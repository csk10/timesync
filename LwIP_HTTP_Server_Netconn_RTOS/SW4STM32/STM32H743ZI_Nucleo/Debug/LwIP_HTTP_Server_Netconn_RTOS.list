
LwIP_HTTP_Server_Netconn_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed2c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013e58  0800efcc  0800efcc  0001efcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08022e24  08022e24  00032e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08022e28  08022e28  00032e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000098  24000000  08022e2c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000a728  24000098  08022ec4  00040098  2**2
                  ALLOC
  7 ._user_heap_stack 00000c00  2400a7c0  08022ec4  0004a7c0  2**0
                  ALLOC
  8 .lwip_sec     00041a00  30000000  08022ec4  00050000  2**2
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00040098  2**0
                  CONTENTS, READONLY
 10 .debug_line   00040291  00000000  00000000  000400c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_info   00064f3a  00000000  00000000  00080357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000b860  00000000  00000000  000e5291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001ef8  00000000  00000000  000f0af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0019d973  00000000  00000000  000f29f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000033a0  00000000  00000000  00290368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    000231ef  00000000  00000000  00293708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000483c4  00000000  00000000  002b68f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  002fecbb  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006bcc  00000000  00000000  002fed10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .stab         000000cc  00000000  00000000  003058dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      000001b9  00000000  00000000  003059a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000098 	.word	0x24000098
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800efb4 	.word	0x0800efb4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400009c 	.word	0x2400009c
 80002dc:	0800efb4 	.word	0x0800efb4

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80003b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80003b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80003b6:	e003      	b.n	80003c0 <LoopCopyDataInit>

080003b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80003b8:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80003ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80003bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80003be:	3104      	adds	r1, #4

080003c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003c0:	480b      	ldr	r0, [pc, #44]	; (80003f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003c2:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003c8:	d3f6      	bcc.n	80003b8 <CopyDataInit>
  ldr  r2, =_sbss
 80003ca:	4a0b      	ldr	r2, [pc, #44]	; (80003f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003cc:	e002      	b.n	80003d4 <LoopFillZerobss>

080003ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80003ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003d0:	f842 3b04 	str.w	r3, [r2], #4

080003d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003d4:	4b09      	ldr	r3, [pc, #36]	; (80003fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80003d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003d8:	d3f9      	bcc.n	80003ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003da:	f000 fe9f 	bl	800111c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003de:	f00d fb49 	bl	800da74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003e2:	f000 fc25 	bl	8000c30 <main>
  bx  lr    
 80003e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003e8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80003ec:	08022e2c 	.word	0x08022e2c
  ldr  r0, =_sdata
 80003f0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80003f4:	24000098 	.word	0x24000098
  ldr  r2, =_sbss
 80003f8:	24000098 	.word	0x24000098
  ldr  r3, = _ebss
 80003fc:	2400a7c0 	.word	0x2400a7c0

08000400 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000400:	e7fe      	b.n	8000400 <ADC3_IRQHandler>
	...

08000404 <ethernet_link_status_updated>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernet_link_status_updated(struct netif *netif) 
{
  if (netif_is_up(netif))
 8000404:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8000408:	f013 0f01 	tst.w	r3, #1
 800040c:	4b02      	ldr	r3, [pc, #8]	; (8000418 <ethernet_link_status_updated+0x14>)
 {
#if LWIP_DHCP
    /* Update DHCP state machine */
    DHCP_state = DHCP_START;
 800040e:	bf14      	ite	ne
 8000410:	2201      	movne	r2, #1
  }
  else
  {  
#if LWIP_DHCP
    /* Update DHCP state machine */
    DHCP_state = DHCP_LINK_DOWN;
 8000412:	2205      	moveq	r2, #5
 8000414:	701a      	strb	r2, [r3, #0]
#else    
    BSP_LED_Off(LED2);
    BSP_LED_On(LED3); 
#endif /* LWIP_DHCP */
  } 
}
 8000416:	4770      	bx	lr
 8000418:	240000b4 	.word	0x240000b4

0800041c <DHCP_Thread>:
  * @brief  DHCP Process
  * @param  argument: network interface
  * @retval None
  */
void DHCP_Thread(void const * argument)
{
 800041c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000420:	4604      	mov	r4, r0
 8000422:	b085      	sub	sp, #20
  ip_addr_t gw;
  struct dhcp *dhcp;
  
  for (;;)
  {
    switch (DHCP_state)
 8000424:	4d24      	ldr	r5, [pc, #144]	; (80004b8 <DHCP_Thread+0x9c>)
          if (dhcp->tries > MAX_DHCP_TRIES)
          {
            DHCP_state = DHCP_TIMEOUT;
            
            /* Static address used */
            IP_ADDR4(&ipaddr, IP_ADDR0 ,IP_ADDR1 , IP_ADDR2 , IP_ADDR3 );
 8000426:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80004bc <DHCP_Thread+0xa0>
            IP_ADDR4(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2, NETMASK_ADDR3);
            IP_ADDR4(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 800042a:	f8df 9094 	ldr.w	r9, [pc, #148]	; 80004c0 <DHCP_Thread+0xa4>
    switch (DHCP_state)
 800042e:	782b      	ldrb	r3, [r5, #0]
 8000430:	2b02      	cmp	r3, #2
 8000432:	b2de      	uxtb	r6, r3
 8000434:	d017      	beq.n	8000466 <DHCP_Thread+0x4a>
 8000436:	2e05      	cmp	r6, #5
 8000438:	d035      	beq.n	80004a6 <DHCP_Thread+0x8a>
 800043a:	2e01      	cmp	r6, #1
 800043c:	d10e      	bne.n	800045c <DHCP_Thread+0x40>
        ip_addr_set_zero_ip4(&netif->ip_addr);
 800043e:	2300      	movs	r3, #0
        DHCP_state = DHCP_WAIT_ADDRESS;
 8000440:	2702      	movs	r7, #2
        BSP_LED_Off(LED2);
 8000442:	4630      	mov	r0, r6
        ip_addr_set_zero_ip4(&netif->gw);    
 8000444:	60e3      	str	r3, [r4, #12]
        DHCP_state = DHCP_WAIT_ADDRESS;
 8000446:	702f      	strb	r7, [r5, #0]
        ip_addr_set_zero_ip4(&netif->netmask);
 8000448:	e9c4 3301 	strd	r3, r3, [r4, #4]
        BSP_LED_Off(LED2);
 800044c:	f000 fe52 	bl	80010f4 <BSP_LED_Off>
        BSP_LED_Off(LED3);
 8000450:	4638      	mov	r0, r7
 8000452:	f000 fe4f 	bl	80010f4 <BSP_LED_Off>
        dhcp_start(netif);
 8000456:	4620      	mov	r0, r4
 8000458:	f007 f86a 	bl	8007530 <dhcp_start>
    break;
    default: break;
    }
    
    /* wait 500 ms */
    osDelay(500);
 800045c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000460:	f004 f98b 	bl	800477a <osDelay>
    switch (DHCP_state)
 8000464:	e7e3      	b.n	800042e <DHCP_Thread+0x12>
        if (dhcp_supplied_address(netif)) 
 8000466:	4620      	mov	r0, r4
 8000468:	f006 fff4 	bl	8007454 <dhcp_supplied_address>
 800046c:	b140      	cbz	r0, 8000480 <DHCP_Thread+0x64>
          DHCP_state = DHCP_ADDRESS_ASSIGNED;	
 800046e:	2303      	movs	r3, #3
 8000470:	702b      	strb	r3, [r5, #0]
            BSP_LED_On(LED2);
 8000472:	2001      	movs	r0, #1
 8000474:	f000 fe2a 	bl	80010cc <BSP_LED_On>
            BSP_LED_Off(LED3);
 8000478:	4630      	mov	r0, r6
 800047a:	f000 fe3b 	bl	80010f4 <BSP_LED_Off>
 800047e:	e7ed      	b.n	800045c <DHCP_Thread+0x40>
          if (dhcp->tries > MAX_DHCP_TRIES)
 8000480:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000482:	799b      	ldrb	r3, [r3, #6]
 8000484:	2b04      	cmp	r3, #4
 8000486:	d9e9      	bls.n	800045c <DHCP_Thread+0x40>
            DHCP_state = DHCP_TIMEOUT;
 8000488:	2304      	movs	r3, #4
            netif_set_addr(netif, ip_2_ip4(&ipaddr), ip_2_ip4(&netmask), ip_2_ip4(&gw));
 800048a:	aa02      	add	r2, sp, #8
 800048c:	a901      	add	r1, sp, #4
 800048e:	4620      	mov	r0, r4
            DHCP_state = DHCP_TIMEOUT;
 8000490:	702b      	strb	r3, [r5, #0]
            IP_ADDR4(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2, NETMASK_ADDR3);
 8000492:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
            IP_ADDR4(&ipaddr, IP_ADDR0 ,IP_ADDR1 , IP_ADDR2 , IP_ADDR3 );
 8000496:	f8cd 8004 	str.w	r8, [sp, #4]
            IP_ADDR4(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 800049a:	e9cd 3902 	strd	r3, r9, [sp, #8]
            netif_set_addr(netif, ip_2_ip4(&ipaddr), ip_2_ip4(&netmask), ip_2_ip4(&gw));
 800049e:	ab03      	add	r3, sp, #12
 80004a0:	f008 ff64 	bl	800936c <netif_set_addr>
 80004a4:	e7e5      	b.n	8000472 <DHCP_Thread+0x56>
      DHCP_state = DHCP_OFF;
 80004a6:	2300      	movs	r3, #0
      BSP_LED_Off(LED2);
 80004a8:	2001      	movs	r0, #1
      DHCP_state = DHCP_OFF;
 80004aa:	702b      	strb	r3, [r5, #0]
      BSP_LED_Off(LED2);
 80004ac:	f000 fe22 	bl	80010f4 <BSP_LED_Off>
      BSP_LED_On(LED3);
 80004b0:	2002      	movs	r0, #2
 80004b2:	f000 fe0b 	bl	80010cc <BSP_LED_On>
    break;
 80004b6:	e7d1      	b.n	800045c <DHCP_Thread+0x40>
 80004b8:	240000b4 	.word	0x240000b4
 80004bc:	0a00a8c0 	.word	0x0a00a8c0
 80004c0:	0100a8c0 	.word	0x0100a8c0

080004c4 <ETH_PHY_IO_DeInit>:
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
  return 0;
}
 80004c4:	2000      	movs	r0, #0
 80004c6:	4770      	bx	lr

080004c8 <low_level_output>:
{
 80004c8:	b530      	push	{r4, r5, lr}
 80004ca:	b08d      	sub	sp, #52	; 0x34
 80004cc:	460d      	mov	r5, r1
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80004ce:	2230      	movs	r2, #48	; 0x30
 80004d0:	2100      	movs	r1, #0
 80004d2:	4668      	mov	r0, sp
  for(q = p; q != NULL; q = q->next)
 80004d4:	462c      	mov	r4, r5
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80004d6:	f00d fb27 	bl	800db28 <memset>
  for(q = p; q != NULL; q = q->next)
 80004da:	466b      	mov	r3, sp
  uint32_t i=0;
 80004dc:	2200      	movs	r2, #0
  for(q = p; q != NULL; q = q->next)
 80004de:	b95c      	cbnz	r4, 80004f8 <low_level_output+0x30>
  TxConfig.Length = p->tot_len;
 80004e0:	490e      	ldr	r1, [pc, #56]	; (800051c <low_level_output+0x54>)
  HAL_ETH_Transmit(&EthHandle, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80004e2:	2214      	movs	r2, #20
  TxConfig.Length = p->tot_len;
 80004e4:	892b      	ldrh	r3, [r5, #8]
  HAL_ETH_Transmit(&EthHandle, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80004e6:	480e      	ldr	r0, [pc, #56]	; (8000520 <low_level_output+0x58>)
  TxConfig.Length = p->tot_len;
 80004e8:	604b      	str	r3, [r1, #4]
  TxConfig.TxBuffer = Txbuffer;
 80004ea:	f8c1 d008 	str.w	sp, [r1, #8]
  HAL_ETH_Transmit(&EthHandle, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80004ee:	f001 fa87 	bl	8001a00 <HAL_ETH_Transmit>
  return errval;
 80004f2:	4620      	mov	r0, r4
}
 80004f4:	b00d      	add	sp, #52	; 0x34
 80004f6:	bd30      	pop	{r4, r5, pc}
    if(i >= ETH_TX_DESC_CNT)	
 80004f8:	2a04      	cmp	r2, #4
 80004fa:	d00c      	beq.n	8000516 <low_level_output+0x4e>
    Txbuffer[i].buffer = q->payload;
 80004fc:	6861      	ldr	r1, [r4, #4]
 80004fe:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8000500:	8961      	ldrh	r1, [r4, #10]
 8000502:	6059      	str	r1, [r3, #4]
    if(i>0)
 8000504:	b10a      	cbz	r2, 800050a <low_level_output+0x42>
      Txbuffer[i-1].next = &Txbuffer[i];
 8000506:	f843 3c04 	str.w	r3, [r3, #-4]
    if(q->next == NULL)
 800050a:	6824      	ldr	r4, [r4, #0]
 800050c:	b904      	cbnz	r4, 8000510 <low_level_output+0x48>
      Txbuffer[i].next = NULL;
 800050e:	609c      	str	r4, [r3, #8]
    i++;
 8000510:	3201      	adds	r2, #1
  for(q = p; q != NULL; q = q->next)
 8000512:	330c      	adds	r3, #12
 8000514:	e7e3      	b.n	80004de <low_level_output+0x16>
      return ERR_IF;
 8000516:	f06f 000b 	mvn.w	r0, #11
 800051a:	e7eb      	b.n	80004f4 <low_level_output+0x2c>
 800051c:	24006974 	.word	0x24006974
 8000520:	24006800 	.word	0x24006800

08000524 <pbuf_free_custom>:
{
 8000524:	4601      	mov	r1, r0
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8000526:	4801      	ldr	r0, [pc, #4]	; (800052c <pbuf_free_custom+0x8>)
 8000528:	f008 be9c 	b.w	8009264 <memp_free_pool>
 800052c:	0800efcc 	.word	0x0800efcc

08000530 <ETH_PHY_IO_GetTick>:
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
  return HAL_GetTick();
 8000530:	f000 be72 	b.w	8001218 <HAL_GetTick>

08000534 <ETH_PHY_IO_Init>:
  HAL_ETH_SetMDIOClockRange(&EthHandle);
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <ETH_PHY_IO_Init+0xc>)
{  
 8000536:	b508      	push	{r3, lr}
  HAL_ETH_SetMDIOClockRange(&EthHandle);
 8000538:	f001 fd98 	bl	800206c <HAL_ETH_SetMDIOClockRange>
}
 800053c:	2000      	movs	r0, #0
 800053e:	bd08      	pop	{r3, pc}
 8000540:	24006800 	.word	0x24006800

08000544 <ETH_PHY_IO_ReadReg>:
{
 8000544:	b508      	push	{r3, lr}
 8000546:	4613      	mov	r3, r2
  if(HAL_ETH_ReadPHYRegister(&EthHandle, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8000548:	460a      	mov	r2, r1
 800054a:	4601      	mov	r1, r0
 800054c:	4803      	ldr	r0, [pc, #12]	; (800055c <ETH_PHY_IO_ReadReg+0x18>)
 800054e:	f001 fc5b 	bl	8001e08 <HAL_ETH_ReadPHYRegister>
 8000552:	3800      	subs	r0, #0
 8000554:	bf18      	it	ne
 8000556:	2001      	movne	r0, #1
}
 8000558:	4240      	negs	r0, r0
 800055a:	bd08      	pop	{r3, pc}
 800055c:	24006800 	.word	0x24006800

08000560 <ETH_PHY_IO_WriteReg>:
{
 8000560:	b508      	push	{r3, lr}
 8000562:	4613      	mov	r3, r2
  if(HAL_ETH_WritePHYRegister(&EthHandle, DevAddr, RegAddr, RegVal) != HAL_OK)
 8000564:	460a      	mov	r2, r1
 8000566:	4601      	mov	r1, r0
 8000568:	4803      	ldr	r0, [pc, #12]	; (8000578 <ETH_PHY_IO_WriteReg+0x18>)
 800056a:	f001 fc7b 	bl	8001e64 <HAL_ETH_WritePHYRegister>
 800056e:	3800      	subs	r0, #0
 8000570:	bf18      	it	ne
 8000572:	2001      	movne	r0, #1
}
 8000574:	4240      	negs	r0, r0
 8000576:	bd08      	pop	{r3, pc}
 8000578:	24006800 	.word	0x24006800

0800057c <ethernetif_input>:
{
 800057c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000580:	4604      	mov	r4, r0
 8000582:	b091      	sub	sp, #68	; 0x44
    if (osSemaphoreWait( RxPktSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 8000584:	4e2a      	ldr	r6, [pc, #168]	; (8000630 <ethernetif_input+0xb4>)
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000586:	4f2b      	ldr	r7, [pc, #172]	; (8000634 <ethernetif_input+0xb8>)
 8000588:	f04f 31ff 	mov.w	r1, #4294967295
 800058c:	6830      	ldr	r0, [r6, #0]
 800058e:	f004 f969 	bl	8004864 <osSemaphoreWait>
 8000592:	2800      	cmp	r0, #0
 8000594:	d1f8      	bne.n	8000588 <ethernetif_input+0xc>
  if(HAL_ETH_GetRxDataBuffer(&EthHandle, RxBuff) == HAL_OK)
 8000596:	4d28      	ldr	r5, [pc, #160]	; (8000638 <ethernetif_input+0xbc>)
    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 8000598:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8000640 <ethernetif_input+0xc4>
  uint32_t framelength = 0, i = 0;;
 800059c:	2100      	movs	r1, #0
  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800059e:	2230      	movs	r2, #48	; 0x30
 80005a0:	a804      	add	r0, sp, #16
  uint32_t framelength = 0, i = 0;;
 80005a2:	9103      	str	r1, [sp, #12]
  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80005a4:	f00d fac0 	bl	800db28 <memset>
    RxBuff[i].next=&RxBuff[i+1];
 80005a8:	ab07      	add	r3, sp, #28
  if(HAL_ETH_GetRxDataBuffer(&EthHandle, RxBuff) == HAL_OK)
 80005aa:	a904      	add	r1, sp, #16
 80005ac:	4628      	mov	r0, r5
    RxBuff[i].next=&RxBuff[i+1];
 80005ae:	9306      	str	r3, [sp, #24]
 80005b0:	ab0a      	add	r3, sp, #40	; 0x28
 80005b2:	9309      	str	r3, [sp, #36]	; 0x24
 80005b4:	ab0d      	add	r3, sp, #52	; 0x34
 80005b6:	930c      	str	r3, [sp, #48]	; 0x30
  if(HAL_ETH_GetRxDataBuffer(&EthHandle, RxBuff) == HAL_OK)
 80005b8:	f001 faea 	bl	8001b90 <HAL_ETH_GetRxDataBuffer>
 80005bc:	2800      	cmp	r0, #0
 80005be:	d1e3      	bne.n	8000588 <ethernetif_input+0xc>
    HAL_ETH_GetRxDataLength(&EthHandle, &framelength);
 80005c0:	a903      	add	r1, sp, #12
 80005c2:	4628      	mov	r0, r5
 80005c4:	f001 fb2b 	bl	8001c1e <HAL_ETH_GetRxDataLength>
    HAL_ETH_BuildRxDescriptors(&EthHandle);
 80005c8:	4628      	mov	r0, r5
 80005ca:	f001 fb44 	bl	8001c56 <HAL_ETH_BuildRxDescriptors>
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 80005ce:	9903      	ldr	r1, [sp, #12]
    if ( dsize > 0 ) { 
 80005d0:	2900      	cmp	r1, #0
 80005d2:	dd10      	ble.n	80005f6 <ethernetif_input+0x7a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80005d4:	9b04      	ldr	r3, [sp, #16]
 80005d6:	f003 021f 	and.w	r2, r3, #31
 80005da:	440a      	add	r2, r1
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005dc:	f3bf 8f4f 	dsb	sy
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 80005e0:	441a      	add	r2, r3
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80005e2:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80005e6:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 80005e8:	1ad1      	subs	r1, r2, r3
 80005ea:	2900      	cmp	r1, #0
 80005ec:	dcf9      	bgt.n	80005e2 <ethernetif_input+0x66>
 80005ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005f2:	f3bf 8f6f 	isb	sy
    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 80005f6:	4640      	mov	r0, r8
 80005f8:	f008 fe00 	bl	80091fc <memp_malloc_pool>
    if(custom_pbuf != NULL)
 80005fc:	4603      	mov	r3, r0
 80005fe:	2800      	cmp	r0, #0
 8000600:	d0c2      	beq.n	8000588 <ethernetif_input+0xc>
      custom_pbuf->custom_free_function = pbuf_free_custom;
 8000602:	4a0e      	ldr	r2, [pc, #56]	; (800063c <ethernetif_input+0xc0>)
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 8000604:	f8bd 100c 	ldrh.w	r1, [sp, #12]
      custom_pbuf->custom_free_function = pbuf_free_custom;
 8000608:	6102      	str	r2, [r0, #16]
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 800060a:	2000      	movs	r0, #0
 800060c:	9a04      	ldr	r2, [sp, #16]
 800060e:	9101      	str	r1, [sp, #4]
 8000610:	9200      	str	r2, [sp, #0]
 8000612:	2241      	movs	r2, #65	; 0x41
 8000614:	f009 f858 	bl	80096c8 <pbuf_alloced_custom>
        if (p != NULL)
 8000618:	4681      	mov	r9, r0
 800061a:	2800      	cmp	r0, #0
 800061c:	d0b4      	beq.n	8000588 <ethernetif_input+0xc>
          if (netif->input( p, netif) != ERR_OK )
 800061e:	6923      	ldr	r3, [r4, #16]
 8000620:	4621      	mov	r1, r4
 8000622:	4798      	blx	r3
 8000624:	2800      	cmp	r0, #0
 8000626:	d0b9      	beq.n	800059c <ethernetif_input+0x20>
            pbuf_free(p);
 8000628:	4648      	mov	r0, r9
 800062a:	f009 f89f 	bl	800976c <pbuf_free>
 800062e:	e7b3      	b.n	8000598 <ethernetif_input+0x1c>
 8000630:	240000b8 	.word	0x240000b8
 8000634:	e000ed00 	.word	0xe000ed00
 8000638:	24006800 	.word	0x24006800
 800063c:	08000525 	.word	0x08000525
 8000640:	0800efcc 	.word	0x0800efcc

08000644 <ethernetif_init>:
{
 8000644:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8000646:	4604      	mov	r4, r0
{
 8000648:	b0a1      	sub	sp, #132	; 0x84
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800064a:	b930      	cbnz	r0, 800065a <ethernetif_init+0x16>
 800064c:	4b4a      	ldr	r3, [pc, #296]	; (8000778 <ethernetif_init+0x134>)
 800064e:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8000652:	494a      	ldr	r1, [pc, #296]	; (800077c <ethernetif_init+0x138>)
 8000654:	484a      	ldr	r0, [pc, #296]	; (8000780 <ethernetif_init+0x13c>)
 8000656:	f00d fa6f 	bl	800db38 <iprintf>
  netif->name[0] = IFNAME0;
 800065a:	f247 4373 	movw	r3, #29811	; 0x7473
  EthHandle.Instance = ETH;  
 800065e:	4d49      	ldr	r5, [pc, #292]	; (8000784 <ethernetif_init+0x140>)
  netif->hwaddr[2] =  ETH_MAC_ADDR2;
 8000660:	2600      	movs	r6, #0
 8000662:	4f49      	ldr	r7, [pc, #292]	; (8000788 <ethernetif_init+0x144>)
  netif->name[0] = IFNAME0;
 8000664:	8663      	strh	r3, [r4, #50]	; 0x32
  netif->output = etharp_output;
 8000666:	4b49      	ldr	r3, [pc, #292]	; (800078c <ethernetif_init+0x148>)
  EthHandle.Init.MACAddr = macaddress;
 8000668:	f8c5 d004 	str.w	sp, [r5, #4]
  netif->output = etharp_output;
 800066c:	6163      	str	r3, [r4, #20]
  netif->linkoutput = low_level_output;
 800066e:	4b48      	ldr	r3, [pc, #288]	; (8000790 <ethernetif_init+0x14c>)
 8000670:	61a3      	str	r3, [r4, #24]
  uint8_t macaddress[6]= {ETH_MAC_ADDR0, ETH_MAC_ADDR1, ETH_MAC_ADDR2, ETH_MAC_ADDR3, ETH_MAC_ADDR4, ETH_MAC_ADDR5};
 8000672:	4b48      	ldr	r3, [pc, #288]	; (8000794 <ethernetif_init+0x150>)
 8000674:	6818      	ldr	r0, [r3, #0]
 8000676:	889b      	ldrh	r3, [r3, #4]
 8000678:	9000      	str	r0, [sp, #0]
  HAL_ETH_Init(&EthHandle);
 800067a:	4628      	mov	r0, r5
  uint8_t macaddress[6]= {ETH_MAC_ADDR0, ETH_MAC_ADDR1, ETH_MAC_ADDR2, ETH_MAC_ADDR3, ETH_MAC_ADDR4, ETH_MAC_ADDR5};
 800067c:	f8ad 3004 	strh.w	r3, [sp, #4]
  EthHandle.Instance = ETH;  
 8000680:	4b45      	ldr	r3, [pc, #276]	; (8000798 <ethernetif_init+0x154>)
 8000682:	602b      	str	r3, [r5, #0]
  EthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000684:	2301      	movs	r3, #1
 8000686:	722b      	strb	r3, [r5, #8]
  EthHandle.Init.RxDesc = DMARxDscrTab;
 8000688:	4b44      	ldr	r3, [pc, #272]	; (800079c <ethernetif_init+0x158>)
 800068a:	612b      	str	r3, [r5, #16]
  EthHandle.Init.TxDesc = DMATxDscrTab;
 800068c:	4b44      	ldr	r3, [pc, #272]	; (80007a0 <ethernetif_init+0x15c>)
 800068e:	60eb      	str	r3, [r5, #12]
  EthHandle.Init.RxBuffLen = ETH_RX_BUFFER_SIZE;
 8000690:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000694:	616b      	str	r3, [r5, #20]
  HAL_ETH_Init(&EthHandle);
 8000696:	f001 fd25 	bl	80020e4 <HAL_ETH_Init>
  netif->hwaddr[2] =  ETH_MAC_ADDR2;
 800069a:	4b42      	ldr	r3, [pc, #264]	; (80007a4 <ethernetif_init+0x160>)
 800069c:	e9c4 360a 	strd	r3, r6, [r4, #40]	; 0x28
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80006a0:	2306      	movs	r3, #6
 80006a2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80006a6:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80006aa:	f043 030a 	orr.w	r3, r3, #10
 80006ae:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    HAL_ETH_DescAssignMemory(&EthHandle, idx, Rx_Buff[idx], NULL);
 80006b2:	4631      	mov	r1, r6
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 80006b4:	3601      	adds	r6, #1
    HAL_ETH_DescAssignMemory(&EthHandle, idx, Rx_Buff[idx], NULL);
 80006b6:	463a      	mov	r2, r7
 80006b8:	2300      	movs	r3, #0
 80006ba:	4628      	mov	r0, r5
 80006bc:	f507 67c0 	add.w	r7, r7, #1536	; 0x600
 80006c0:	f001 f8fe 	bl	80018c0 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 80006c4:	2e04      	cmp	r6, #4
 80006c6:	d1f4      	bne.n	80006b2 <ethernetif_init+0x6e>
  LWIP_MEMPOOL_INIT(RX_POOL);
 80006c8:	4f37      	ldr	r7, [pc, #220]	; (80007a8 <ethernetif_init+0x164>)
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80006ca:	ad02      	add	r5, sp, #8
  LWIP_MEMPOOL_INIT(RX_POOL);
 80006cc:	4638      	mov	r0, r7
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80006ce:	f107 0614 	add.w	r6, r7, #20
  LWIP_MEMPOOL_INIT(RX_POOL);
 80006d2:	f008 fd71 	bl	80091b8 <memp_init_pool>
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));  
 80006d6:	4b35      	ldr	r3, [pc, #212]	; (80007ac <ethernetif_init+0x168>)
 80006d8:	2230      	movs	r2, #48	; 0x30
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f00d fa23 	bl	800db28 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006e2:	2221      	movs	r2, #33	; 0x21
  RxPktSemaphore = xSemaphoreCreateBinary();
 80006e4:	2100      	movs	r1, #0
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006e6:	f840 2c04 	str.w	r2, [r0, #-4]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006ea:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006ee:	6102      	str	r2, [r0, #16]
  RxPktSemaphore = xSemaphoreCreateBinary();
 80006f0:	2203      	movs	r2, #3
 80006f2:	2001      	movs	r0, #1
 80006f4:	f002 fe62 	bl	80033bc <xQueueGenericCreate>
 80006f8:	4b2d      	ldr	r3, [pc, #180]	; (80007b0 <ethernetif_init+0x16c>)
 80006fa:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80006fc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80006fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000700:	6833      	ldr	r3, [r6, #0]
  osThreadCreate (osThread(EthIf), netif);
 8000702:	4621      	mov	r1, r4
 8000704:	a802      	add	r0, sp, #8
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8000706:	602b      	str	r3, [r5, #0]
  osThreadCreate (osThread(EthIf), netif);
 8000708:	f004 f81a 	bl	8004740 <osThreadCreate>
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800070c:	4929      	ldr	r1, [pc, #164]	; (80007b4 <ethernetif_init+0x170>)
 800070e:	482a      	ldr	r0, [pc, #168]	; (80007b8 <ethernetif_init+0x174>)
 8000710:	f000 fbd2 	bl	8000eb8 <LAN8742_RegisterBusIO>
  LAN8742_Init(&LAN8742);
 8000714:	4828      	ldr	r0, [pc, #160]	; (80007b8 <ethernetif_init+0x174>)
 8000716:	f000 fbe3 	bl	8000ee0 <LAN8742_Init>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800071a:	4827      	ldr	r0, [pc, #156]	; (80007b8 <ethernetif_init+0x174>)
 800071c:	f000 fc41 	bl	8000fa2 <LAN8742_GetLinkState>
  if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8000720:	2801      	cmp	r0, #1
 8000722:	dc08      	bgt.n	8000736 <ethernetif_init+0xf2>
    netif_set_link_down(netif);
 8000724:	4620      	mov	r0, r4
 8000726:	f008 ff49 	bl	80095bc <netif_set_link_down>
    netif_set_down(netif);
 800072a:	4620      	mov	r0, r4
 800072c:	f008 ff02 	bl	8009534 <netif_set_down>
}
 8000730:	2000      	movs	r0, #0
 8000732:	b021      	add	sp, #132	; 0x84
 8000734:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (PHYLinkState)
 8000736:	3803      	subs	r0, #3
    HAL_ETH_GetMACConfig(&EthHandle, &MACConf); 
 8000738:	a907      	add	r1, sp, #28
 800073a:	2802      	cmp	r0, #2
 800073c:	bf93      	iteet	ls
 800073e:	eb07 0040 	addls.w	r0, r7, r0, lsl #1
    switch (PHYLinkState)
 8000742:	f44f 4580 	movhi.w	r5, #16384	; 0x4000
 8000746:	f44f 5600 	movhi.w	r6, #8192	; 0x2000
 800074a:	8d06      	ldrhls	r6, [r0, #40]	; 0x28
 800074c:	bf98      	it	ls
 800074e:	8dc5      	ldrhls	r5, [r0, #46]	; 0x2e
    HAL_ETH_GetMACConfig(&EthHandle, &MACConf); 
 8000750:	480c      	ldr	r0, [pc, #48]	; (8000784 <ethernetif_init+0x140>)
 8000752:	f001 fbb9 	bl	8001ec8 <HAL_ETH_GetMACConfig>
    HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 8000756:	a907      	add	r1, sp, #28
 8000758:	480a      	ldr	r0, [pc, #40]	; (8000784 <ethernetif_init+0x140>)
    MACConf.Speed = speed;
 800075a:	e9cd 560c 	strd	r5, r6, [sp, #48]	; 0x30
    HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 800075e:	f001 fc79 	bl	8002054 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&EthHandle);
 8000762:	4808      	ldr	r0, [pc, #32]	; (8000784 <ethernetif_init+0x140>)
 8000764:	f001 f8c9 	bl	80018fa <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8000768:	4620      	mov	r0, r4
 800076a:	f008 fec9 	bl	8009500 <netif_set_up>
    netif_set_link_up(netif);
 800076e:	4620      	mov	r0, r4
 8000770:	f008 fefc 	bl	800956c <netif_set_link_up>
 8000774:	e7dc      	b.n	8000730 <ethernetif_init+0xec>
 8000776:	bf00      	nop
 8000778:	0801f87a 	.word	0x0801f87a
 800077c:	080206f1 	.word	0x080206f1
 8000780:	0801f8bf 	.word	0x0801f8bf
 8000784:	24006800 	.word	0x24006800
 8000788:	30040200 	.word	0x30040200
 800078c:	08007dc1 	.word	0x08007dc1
 8000790:	080004c9 	.word	0x080004c9
 8000794:	0800efd8 	.word	0x0800efd8
 8000798:	40028000 	.word	0x40028000
 800079c:	30040000 	.word	0x30040000
 80007a0:	30040060 	.word	0x30040060
 80007a4:	000205dc 	.word	0x000205dc
 80007a8:	0800efcc 	.word	0x0800efcc
 80007ac:	24006978 	.word	0x24006978
 80007b0:	240000b8 	.word	0x240000b8
 80007b4:	24000000 	.word	0x24000000
 80007b8:	24006954 	.word	0x24006954

080007bc <sys_now>:
  return HAL_GetTick();
 80007bc:	f000 bd2c 	b.w	8001218 <HAL_GetTick>

080007c0 <HAL_ETH_MspInit>:
{
 80007c0:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4c40      	ldr	r4, [pc, #256]	; (80008c4 <HAL_ETH_MspInit+0x104>)
{
 80007c4:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitStructure.Pull = GPIO_NOPULL; 
 80007c6:	2500      	movs	r5, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80007c8:	483f      	ldr	r0, [pc, #252]	; (80008c8 <HAL_ETH_MspInit+0x108>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80007ce:	a907      	add	r1, sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80007d8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80007dc:	f003 0301 	and.w	r3, r3, #1
 80007e0:	9300      	str	r3, [sp, #0]
 80007e2:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80007f0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80007f4:	f003 0302 	and.w	r3, r3, #2
 80007f8:	9301      	str	r3, [sp, #4]
 80007fa:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000800:	f043 0304 	orr.w	r3, r3, #4
 8000804:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000808:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800080c:	f003 0304 	and.w	r3, r3, #4
 8000810:	9302      	str	r3, [sp, #8]
 8000812:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000814:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800081c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000820:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  GPIO_InitStructure.Pull = GPIO_NOPULL; 
 8000824:	9509      	str	r5, [sp, #36]	; 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800082a:	9303      	str	r3, [sp, #12]
 800082c:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800082e:	2302      	movs	r3, #2
 8000830:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000832:	9308      	str	r3, [sp, #32]
  GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
 8000834:	230b      	movs	r3, #11
 8000836:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 8000838:	2386      	movs	r3, #134	; 0x86
 800083a:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800083c:	f001 fd5a 	bl	80022f4 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_13;
 8000840:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000844:	a907      	add	r1, sp, #28
 8000846:	4821      	ldr	r0, [pc, #132]	; (80008cc <HAL_ETH_MspInit+0x10c>)
  GPIO_InitStructure.Pin = GPIO_PIN_13;
 8000848:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800084a:	f001 fd53 	bl	80022f4 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 800084e:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000850:	a907      	add	r1, sp, #28
 8000852:	481f      	ldr	r0, [pc, #124]	; (80008d0 <HAL_ETH_MspInit+0x110>)
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8000854:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000856:	f001 fd4d 	bl	80022f4 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin =  GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_13;
 800085a:	f642 0304 	movw	r3, #10244	; 0x2804
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);	
 800085e:	a907      	add	r1, sp, #28
 8000860:	481c      	ldr	r0, [pc, #112]	; (80008d4 <HAL_ETH_MspInit+0x114>)
  GPIO_InitStructure.Pin =  GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_13;
 8000862:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);	
 8000864:	f001 fd46 	bl	80022f4 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(ETH_IRQn, 0x7, 0);
 8000868:	462a      	mov	r2, r5
 800086a:	2107      	movs	r1, #7
 800086c:	203d      	movs	r0, #61	; 0x3d
 800086e:	f000 fcfb 	bl	8001268 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000872:	203d      	movs	r0, #61	; 0x3d
 8000874:	f000 fd2a 	bl	80012cc <HAL_NVIC_EnableIRQ>
  __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000878:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800087c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000880:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8000884:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8000888:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800088c:	9304      	str	r3, [sp, #16]
 800088e:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000890:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8000894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000898:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 800089c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 80008a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008a4:	9305      	str	r3, [sp, #20]
 80008a6:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_ETH1RX_CLK_ENABLE();
 80008a8:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 80008ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b0:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 80008b4:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 80008b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008bc:	9306      	str	r3, [sp, #24]
 80008be:	9b06      	ldr	r3, [sp, #24]
}
 80008c0:	b00d      	add	sp, #52	; 0x34
 80008c2:	bd30      	pop	{r4, r5, pc}
 80008c4:	58024400 	.word	0x58024400
 80008c8:	58020000 	.word	0x58020000
 80008cc:	58020400 	.word	0x58020400
 80008d0:	58020800 	.word	0x58020800
 80008d4:	58021800 	.word	0x58021800

080008d8 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(RxPktSemaphore);
 80008d8:	4b01      	ldr	r3, [pc, #4]	; (80008e0 <HAL_ETH_RxCpltCallback+0x8>)
 80008da:	6818      	ldr	r0, [r3, #0]
 80008dc:	f003 bfe8 	b.w	80048b0 <osSemaphoreRelease>
 80008e0:	240000b8 	.word	0x240000b8

080008e4 <ethernet_link_thread>:
  * @brief  Check the ETH link state and update netif accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_thread( void const * argument )
{
 80008e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 80008e8:	2500      	movs	r5, #0
{
 80008ea:	b09a      	sub	sp, #104	; 0x68
 80008ec:	4604      	mov	r4, r0
  struct netif *netif = (struct netif *) argument;
  
  for(;;)
  {
    
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80008ee:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8000978 <ethernet_link_thread+0x94>
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 80008f2:	462f      	mov	r7, r5
 80008f4:	46aa      	mov	sl, r5
      }
      
      if(linkchanged)
      {
        /* Get MAC Config MAC */
        HAL_ETH_GetMACConfig(&EthHandle, &MACConf); 
 80008f6:	4e1f      	ldr	r6, [pc, #124]	; (8000974 <ethernet_link_thread+0x90>)
 80008f8:	f8df 9080 	ldr.w	r9, [pc, #128]	; 800097c <ethernet_link_thread+0x98>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80008fc:	4640      	mov	r0, r8
 80008fe:	f000 fb50 	bl	8000fa2 <LAN8742_GetLinkState>
    if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8000902:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8000906:	075a      	lsls	r2, r3, #29
 8000908:	d510      	bpl.n	800092c <ethernet_link_thread+0x48>
 800090a:	2801      	cmp	r0, #1
 800090c:	dc0c      	bgt.n	8000928 <ethernet_link_thread+0x44>
      HAL_ETH_Stop_IT(&EthHandle);
 800090e:	4630      	mov	r0, r6
 8000910:	f001 f838 	bl	8001984 <HAL_ETH_Stop_IT>
      netif_set_down(netif);
 8000914:	4620      	mov	r0, r4
 8000916:	f008 fe0d 	bl	8009534 <netif_set_down>
      netif_set_link_down(netif);
 800091a:	4620      	mov	r0, r4
 800091c:	f008 fe4e 	bl	80095bc <netif_set_link_down>
        netif_set_up(netif);
        netif_set_link_up(netif);
      }
    }
    
    osDelay(100);
 8000920:	2064      	movs	r0, #100	; 0x64
 8000922:	f003 ff2a 	bl	800477a <osDelay>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000926:	e7e9      	b.n	80008fc <ethernet_link_thread+0x18>
    else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8000928:	075b      	lsls	r3, r3, #29
 800092a:	d4f9      	bmi.n	8000920 <ethernet_link_thread+0x3c>
 800092c:	2801      	cmp	r0, #1
 800092e:	ddf7      	ble.n	8000920 <ethernet_link_thread+0x3c>
      switch (PHYLinkState)
 8000930:	3802      	subs	r0, #2
 8000932:	2803      	cmp	r0, #3
 8000934:	d819      	bhi.n	800096a <ethernet_link_thread+0x86>
 8000936:	eb09 0340 	add.w	r3, r9, r0, lsl #1
 800093a:	8e9f      	ldrh	r7, [r3, #52]	; 0x34
 800093c:	8f9d      	ldrh	r5, [r3, #60]	; 0x3c
        HAL_ETH_GetMACConfig(&EthHandle, &MACConf); 
 800093e:	a901      	add	r1, sp, #4
 8000940:	4630      	mov	r0, r6
 8000942:	f001 fac1 	bl	8001ec8 <HAL_ETH_GetMACConfig>
        HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 8000946:	a901      	add	r1, sp, #4
 8000948:	4630      	mov	r0, r6
        netif_set_link_up(netif);
 800094a:	f04f 0a01 	mov.w	sl, #1
        MACConf.Speed = speed;
 800094e:	e9cd 7506 	strd	r7, r5, [sp, #24]
        HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 8000952:	f001 fb7f 	bl	8002054 <HAL_ETH_SetMACConfig>
        HAL_ETH_Start_IT(&EthHandle);
 8000956:	4630      	mov	r0, r6
 8000958:	f000 ffcf 	bl	80018fa <HAL_ETH_Start_IT>
        netif_set_up(netif);
 800095c:	4620      	mov	r0, r4
 800095e:	f008 fdcf 	bl	8009500 <netif_set_up>
        netif_set_link_up(netif);
 8000962:	4620      	mov	r0, r4
 8000964:	f008 fe02 	bl	800956c <netif_set_link_up>
 8000968:	e7da      	b.n	8000920 <ethernet_link_thread+0x3c>
      if(linkchanged)
 800096a:	f1ba 0f00 	cmp.w	sl, #0
 800096e:	d0d7      	beq.n	8000920 <ethernet_link_thread+0x3c>
 8000970:	e7e5      	b.n	800093e <ethernet_link_thread+0x5a>
 8000972:	bf00      	nop
 8000974:	24006800 	.word	0x24006800
 8000978:	24006954 	.word	0x24006954
 800097c:	0800efcc 	.word	0x0800efcc

08000980 <http_server_netconn_init>:
  * @param  none
  * @retval None
  */
void http_server_netconn_init()
{
  sys_thread_new("HTTP", http_server_netconn_thread, NULL, DEFAULT_THREAD_STACKSIZE, WEBSERVER_THREAD_PRIO);
 8000980:	2301      	movs	r3, #1
{
 8000982:	b507      	push	{r0, r1, r2, lr}
  sys_thread_new("HTTP", http_server_netconn_thread, NULL, DEFAULT_THREAD_STACKSIZE, WEBSERVER_THREAD_PRIO);
 8000984:	2200      	movs	r2, #0
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	4904      	ldr	r1, [pc, #16]	; (800099c <http_server_netconn_init+0x1c>)
 800098a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800098e:	4804      	ldr	r0, [pc, #16]	; (80009a0 <http_server_netconn_init+0x20>)
 8000990:	f00d f82c 	bl	800d9ec <sys_thread_new>
}
 8000994:	b003      	add	sp, #12
 8000996:	f85d fb04 	ldr.w	pc, [sp], #4
 800099a:	bf00      	nop
 800099c:	08000a55 	.word	0x08000a55
 80009a0:	0801f8e7 	.word	0x0801f8e7

080009a4 <DynWebPage>:
  *         running tasks and the number of page hits. 
  * @param  conn pointer on connection structure 
  * @retval None
  */
void DynWebPage(struct netconn *conn)
{
 80009a4:	b530      	push	{r4, r5, lr}
  portCHAR PAGE_BODY[512];
  portCHAR pagehits[10] = {0};
 80009a6:	2400      	movs	r4, #0
{
 80009a8:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 80009ac:	4605      	mov	r5, r0

  memset(PAGE_BODY, 0,512);
 80009ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009b2:	4621      	mov	r1, r4
 80009b4:	a806      	add	r0, sp, #24
  portCHAR pagehits[10] = {0};
 80009b6:	f8ad 4014 	strh.w	r4, [sp, #20]
 80009ba:	e9cd 4403 	strd	r4, r4, [sp, #12]
  memset(PAGE_BODY, 0,512);
 80009be:	f00d f8b3 	bl	800db28 <memset>

  /* Update the hit count */
  nPageHits++;
 80009c2:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <DynWebPage+0x94>)
  sprintf(pagehits, "%d", (int)nPageHits);
 80009c4:	491d      	ldr	r1, [pc, #116]	; (8000a3c <DynWebPage+0x98>)
 80009c6:	a803      	add	r0, sp, #12
  nPageHits++;
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	3201      	adds	r2, #1
 80009cc:	601a      	str	r2, [r3, #0]
  sprintf(pagehits, "%d", (int)nPageHits);
 80009ce:	f00d f90b 	bl	800dbe8 <siprintf>
  strcat(PAGE_BODY, pagehits);
 80009d2:	a903      	add	r1, sp, #12
 80009d4:	a806      	add	r0, sp, #24
 80009d6:	f00d f927 	bl	800dc28 <strcat>
  strcat((char *)PAGE_BODY, "<pre><br>Name          State  Priority  Stack   Num" );
 80009da:	4919      	ldr	r1, [pc, #100]	; (8000a40 <DynWebPage+0x9c>)
 80009dc:	a806      	add	r0, sp, #24
 80009de:	f00d f923 	bl	800dc28 <strcat>
  strcat((char *)PAGE_BODY, "<br>---------------------------------------------<br>");
 80009e2:	4918      	ldr	r1, [pc, #96]	; (8000a44 <DynWebPage+0xa0>)
 80009e4:	a806      	add	r0, sp, #24
 80009e6:	f00d f91f 	bl	800dc28 <strcat>
    
  /* The list of tasks and their status */
  osThreadList((unsigned char *)(PAGE_BODY + strlen(PAGE_BODY)));
 80009ea:	a806      	add	r0, sp, #24
 80009ec:	f7ff fc82 	bl	80002f4 <strlen>
 80009f0:	ab06      	add	r3, sp, #24
 80009f2:	4418      	add	r0, r3
 80009f4:	f003 ffd0 	bl	8004998 <osThreadList>
  strcat((char *)PAGE_BODY, "<br><br>---------------------------------------------");
 80009f8:	4913      	ldr	r1, [pc, #76]	; (8000a48 <DynWebPage+0xa4>)
 80009fa:	a806      	add	r0, sp, #24
 80009fc:	f00d f914 	bl	800dc28 <strcat>
  strcat((char *)PAGE_BODY, "<br>B : Blocked, R : Ready, D : Deleted, S : Suspended<br>");
 8000a00:	4912      	ldr	r1, [pc, #72]	; (8000a4c <DynWebPage+0xa8>)
 8000a02:	a806      	add	r0, sp, #24
 8000a04:	f00d f910 	bl	800dc28 <strcat>

  /* Send the dynamically generated page */
  netconn_write(conn, PAGE_START, strlen((char*)PAGE_START), NETCONN_COPY);
 8000a08:	4911      	ldr	r1, [pc, #68]	; (8000a50 <DynWebPage+0xac>)
 8000a0a:	4608      	mov	r0, r1
 8000a0c:	f7ff fc72 	bl	80002f4 <strlen>
 8000a10:	2301      	movs	r3, #1
 8000a12:	4602      	mov	r2, r0
 8000a14:	490e      	ldr	r1, [pc, #56]	; (8000a50 <DynWebPage+0xac>)
 8000a16:	4628      	mov	r0, r5
 8000a18:	9400      	str	r4, [sp, #0]
 8000a1a:	f004 fba1 	bl	8005160 <netconn_write_partly>
  netconn_write(conn, PAGE_BODY, strlen(PAGE_BODY), NETCONN_COPY);
 8000a1e:	a806      	add	r0, sp, #24
 8000a20:	f7ff fc68 	bl	80002f4 <strlen>
 8000a24:	2301      	movs	r3, #1
 8000a26:	4602      	mov	r2, r0
 8000a28:	a906      	add	r1, sp, #24
 8000a2a:	4628      	mov	r0, r5
 8000a2c:	9400      	str	r4, [sp, #0]
 8000a2e:	f004 fb97 	bl	8005160 <netconn_write_partly>
}
 8000a32:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
 8000a36:	bd30      	pop	{r4, r5, pc}
 8000a38:	240000c0 	.word	0x240000c0
 8000a3c:	0801f8ec 	.word	0x0801f8ec
 8000a40:	0801f8ef 	.word	0x0801f8ef
 8000a44:	0801f923 	.word	0x0801f923
 8000a48:	0801f959 	.word	0x0801f959
 8000a4c:	0801f98f 	.word	0x0801f98f
 8000a50:	0800f010 	.word	0x0800f010

08000a54 <http_server_netconn_thread>:
  conn = netconn_new(NETCONN_TCP);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2010      	movs	r0, #16
{ 
 8000a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  conn = netconn_new(NETCONN_TCP);
 8000a5c:	4611      	mov	r1, r2
{ 
 8000a5e:	b08c      	sub	sp, #48	; 0x30
  conn = netconn_new(NETCONN_TCP);
 8000a60:	f004 fa56 	bl	8004f10 <netconn_new_with_proto_and_callback>
  if (conn!= NULL)
 8000a64:	4606      	mov	r6, r0
 8000a66:	2800      	cmp	r0, #0
 8000a68:	f000 8083 	beq.w	8000b72 <http_server_netconn_thread+0x11e>
    err = netconn_bind(conn, NULL, 80);
 8000a6c:	2250      	movs	r2, #80	; 0x50
 8000a6e:	2100      	movs	r1, #0
 8000a70:	f004 fac6 	bl	8005000 <netconn_bind>
    if (err == ERR_OK)
 8000a74:	2800      	cmp	r0, #0
 8000a76:	d17c      	bne.n	8000b72 <http_server_netconn_thread+0x11e>
      if ((buflen >=5) && (strncmp(buf, "GET /", 5) == 0))
 8000a78:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8000b9c <http_server_netconn_thread+0x148>
      netconn_listen(conn);
 8000a7c:	21ff      	movs	r1, #255	; 0xff
        if (strncmp((char const *)buf,"GET /STM32H7xx_files/ST.gif",27)==0)
 8000a7e:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8000ba0 <http_server_netconn_thread+0x14c>
      netconn_listen(conn);
 8000a82:	4630      	mov	r0, r6
        else if (strncmp((char const *)buf,"GET /STM32H7xx_files/stm32.jpg",30)==0)
 8000a84:	f8df a11c 	ldr.w	sl, [pc, #284]	; 8000ba4 <http_server_netconn_thread+0x150>
      netconn_listen(conn);
 8000a88:	f004 fae0 	bl	800504c <netconn_listen_with_backlog>
        accept_err = netconn_accept(conn, &newconn);
 8000a8c:	a904      	add	r1, sp, #16
 8000a8e:	4630      	mov	r0, r6
 8000a90:	f004 fb84 	bl	800519c <netconn_accept>
        if(accept_err == ERR_OK)
 8000a94:	2800      	cmp	r0, #0
 8000a96:	d1f9      	bne.n	8000a8c <http_server_netconn_thread+0x38>
          http_server_serve(newconn);
 8000a98:	9c04      	ldr	r4, [sp, #16]
  recv_err = netconn_recv(conn, &inbuf);
 8000a9a:	a905      	add	r1, sp, #20
 8000a9c:	4620      	mov	r0, r4
 8000a9e:	f004 fcad 	bl	80053fc <netconn_recv>
  if (recv_err == ERR_OK)
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	d146      	bne.n	8000b34 <http_server_netconn_thread+0xe0>
    if (netconn_err(conn) == ERR_OK) 
 8000aa6:	4620      	mov	r0, r4
 8000aa8:	f004 fb69 	bl	800517e <netconn_err>
 8000aac:	2800      	cmp	r0, #0
 8000aae:	d141      	bne.n	8000b34 <http_server_netconn_thread+0xe0>
      netbuf_data(inbuf, (void**)&buf, &buflen);
 8000ab0:	f10d 020e 	add.w	r2, sp, #14
 8000ab4:	a906      	add	r1, sp, #24
 8000ab6:	9805      	ldr	r0, [sp, #20]
 8000ab8:	f005 fc9c 	bl	80063f4 <netbuf_data>
      if ((buflen >=5) && (strncmp(buf, "GET /", 5) == 0))
 8000abc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8000ac0:	2b04      	cmp	r3, #4
 8000ac2:	d937      	bls.n	8000b34 <http_server_netconn_thread+0xe0>
 8000ac4:	9d06      	ldr	r5, [sp, #24]
 8000ac6:	2205      	movs	r2, #5
 8000ac8:	4641      	mov	r1, r8
 8000aca:	4628      	mov	r0, r5
 8000acc:	f00d f8c3 	bl	800dc56 <strncmp>
 8000ad0:	bb80      	cbnz	r0, 8000b34 <http_server_netconn_thread+0xe0>
        if (strncmp((char const *)buf,"GET /STM32H7xx_files/ST.gif",27)==0)
 8000ad2:	221b      	movs	r2, #27
 8000ad4:	4649      	mov	r1, r9
 8000ad6:	4628      	mov	r0, r5
 8000ad8:	f00d f8bd 	bl	800dc56 <strncmp>
 8000adc:	4607      	mov	r7, r0
 8000ade:	b970      	cbnz	r0, 8000afe <http_server_netconn_thread+0xaa>
          fs_open(&file, "/STM32H7xx_files/ST.gif"); 
 8000ae0:	4925      	ldr	r1, [pc, #148]	; (8000b78 <http_server_netconn_thread+0x124>)
          fs_open(&file, "/STM32H7xx_files/logo.jpg"); 
 8000ae2:	a807      	add	r0, sp, #28
 8000ae4:	f00c ffa4 	bl	800da30 <fs_open>
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8000ae8:	463b      	mov	r3, r7
 8000aea:	9700      	str	r7, [sp, #0]
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8000aec:	4620      	mov	r0, r4
 8000aee:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8000af2:	f004 fb35 	bl	8005160 <netconn_write_partly>
          fs_close(&file);
 8000af6:	a807      	add	r0, sp, #28
 8000af8:	f00c ffba 	bl	800da70 <fs_close>
 8000afc:	e01a      	b.n	8000b34 <http_server_netconn_thread+0xe0>
        else if (strncmp((char const *)buf,"GET /STM32H7xx_files/stm32.jpg",30)==0)
 8000afe:	221e      	movs	r2, #30
 8000b00:	4651      	mov	r1, sl
 8000b02:	4628      	mov	r0, r5
 8000b04:	f00d f8a7 	bl	800dc56 <strncmp>
 8000b08:	4607      	mov	r7, r0
 8000b0a:	b908      	cbnz	r0, 8000b10 <http_server_netconn_thread+0xbc>
          fs_open(&file, "/STM32H7xx_files/stm32.jpg"); 
 8000b0c:	491b      	ldr	r1, [pc, #108]	; (8000b7c <http_server_netconn_thread+0x128>)
 8000b0e:	e7e8      	b.n	8000ae2 <http_server_netconn_thread+0x8e>
        else if (strncmp((char const *)buf,"GET /STM32H7xx_files/logo.jpg", 29) == 0)                                           
 8000b10:	221d      	movs	r2, #29
 8000b12:	491b      	ldr	r1, [pc, #108]	; (8000b80 <http_server_netconn_thread+0x12c>)
 8000b14:	4628      	mov	r0, r5
 8000b16:	f00d f89e 	bl	800dc56 <strncmp>
 8000b1a:	4607      	mov	r7, r0
 8000b1c:	b908      	cbnz	r0, 8000b22 <http_server_netconn_thread+0xce>
          fs_open(&file, "/STM32H7xx_files/logo.jpg"); 
 8000b1e:	4919      	ldr	r1, [pc, #100]	; (8000b84 <http_server_netconn_thread+0x130>)
 8000b20:	e7df      	b.n	8000ae2 <http_server_netconn_thread+0x8e>
        else if(strncmp(buf, "GET /STM32H7xxTASKS.html", 24) == 0)
 8000b22:	2218      	movs	r2, #24
 8000b24:	4918      	ldr	r1, [pc, #96]	; (8000b88 <http_server_netconn_thread+0x134>)
 8000b26:	4628      	mov	r0, r5
 8000b28:	f00d f895 	bl	800dc56 <strncmp>
 8000b2c:	b960      	cbnz	r0, 8000b48 <http_server_netconn_thread+0xf4>
           DynWebPage(conn);
 8000b2e:	4620      	mov	r0, r4
 8000b30:	f7ff ff38 	bl	80009a4 <DynWebPage>
  netconn_close(conn);
 8000b34:	4620      	mov	r0, r4
 8000b36:	f004 fb1f 	bl	8005178 <netconn_close>
  netbuf_delete(inbuf);
 8000b3a:	9805      	ldr	r0, [sp, #20]
 8000b3c:	f005 fc48 	bl	80063d0 <netbuf_delete>
          netconn_delete(newconn);
 8000b40:	9804      	ldr	r0, [sp, #16]
 8000b42:	f004 fa4f 	bl	8004fe4 <netconn_delete>
 8000b46:	e7a1      	b.n	8000a8c <http_server_netconn_thread+0x38>
        else if((strncmp(buf, "GET /STM32H7xx.html", 19) == 0)||(strncmp(buf, "GET / ", 6) == 0)) 
 8000b48:	2213      	movs	r2, #19
 8000b4a:	4910      	ldr	r1, [pc, #64]	; (8000b8c <http_server_netconn_thread+0x138>)
 8000b4c:	4628      	mov	r0, r5
 8000b4e:	f00d f882 	bl	800dc56 <strncmp>
 8000b52:	b128      	cbz	r0, 8000b60 <http_server_netconn_thread+0x10c>
 8000b54:	2206      	movs	r2, #6
 8000b56:	490e      	ldr	r1, [pc, #56]	; (8000b90 <http_server_netconn_thread+0x13c>)
 8000b58:	4628      	mov	r0, r5
 8000b5a:	f00d f87c 	bl	800dc56 <strncmp>
 8000b5e:	b930      	cbnz	r0, 8000b6e <http_server_netconn_thread+0x11a>
          fs_open(&file, "/STM32H7xx.html"); 
 8000b60:	490c      	ldr	r1, [pc, #48]	; (8000b94 <http_server_netconn_thread+0x140>)
          fs_open(&file, "/404.html"); 
 8000b62:	a807      	add	r0, sp, #28
 8000b64:	f00c ff64 	bl	800da30 <fs_open>
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8000b68:	2300      	movs	r3, #0
 8000b6a:	9300      	str	r3, [sp, #0]
 8000b6c:	e7be      	b.n	8000aec <http_server_netconn_thread+0x98>
          fs_open(&file, "/404.html"); 
 8000b6e:	490a      	ldr	r1, [pc, #40]	; (8000b98 <http_server_netconn_thread+0x144>)
 8000b70:	e7f7      	b.n	8000b62 <http_server_netconn_thread+0x10e>
}
 8000b72:	b00c      	add	sp, #48	; 0x30
 8000b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b78:	0801f9d4 	.word	0x0801f9d4
 8000b7c:	0801f9f0 	.word	0x0801f9f0
 8000b80:	0801fa0b 	.word	0x0801fa0b
 8000b84:	0801fa0f 	.word	0x0801fa0f
 8000b88:	0801fa29 	.word	0x0801fa29
 8000b8c:	0801fa42 	.word	0x0801fa42
 8000b90:	0801fa56 	.word	0x0801fa56
 8000b94:	0801fa46 	.word	0x0801fa46
 8000b98:	0801fa5d 	.word	0x0801fa5d
 8000b9c:	0801f9ca 	.word	0x0801f9ca
 8000ba0:	0801f9d0 	.word	0x0801f9d0
 8000ba4:	0801f9ec 	.word	0x0801f9ec

08000ba8 <StartThread>:
  * @retval None
  */
static void StartThread(void const * argument)
{   
  /* Create tcp_ip stack thread */
  tcpip_init(NULL, NULL);
 8000ba8:	2100      	movs	r1, #0
  ethernet_link_status_updated(&gnetif); 
  
#if LWIP_NETIF_LINK_CALLBACK 
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
  
  osThreadDef(EthLink, ethernet_link_thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE *2);
 8000baa:	4c1c      	ldr	r4, [pc, #112]	; (8000c1c <StartThread+0x74>)
{   
 8000bac:	b500      	push	{lr}
  tcpip_init(NULL, NULL);
 8000bae:	4608      	mov	r0, r1
{   
 8000bb0:	b093      	sub	sp, #76	; 0x4c
  tcpip_init(NULL, NULL);
 8000bb2:	f005 fcf9 	bl	80065a8 <tcpip_init>
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8000bb6:	4a1a      	ldr	r2, [pc, #104]	; (8000c20 <StartThread+0x78>)
  ip_addr_set_zero_ip4(&ipaddr);
 8000bb8:	2300      	movs	r3, #0
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8000bba:	a905      	add	r1, sp, #20
 8000bbc:	9202      	str	r2, [sp, #8]
  osThreadDef(EthLink, ethernet_link_thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE *2);
 8000bbe:	ad08      	add	r5, sp, #32
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8000bc0:	4a18      	ldr	r2, [pc, #96]	; (8000c24 <StartThread+0x7c>)
  ip_addr_set_zero_ip4(&gw);
 8000bc2:	9307      	str	r3, [sp, #28]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8000bc4:	4818      	ldr	r0, [pc, #96]	; (8000c28 <StartThread+0x80>)
 8000bc6:	e9cd 3200 	strd	r3, r2, [sp]
  ip_addr_set_zero_ip4(&netmask);
 8000bca:	e9cd 3305 	strd	r3, r3, [sp, #20]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8000bce:	aa06      	add	r2, sp, #24
 8000bd0:	ab07      	add	r3, sp, #28
 8000bd2:	f008 fbf7 	bl	80093c4 <netif_add>
  netif_set_default(&gnetif);
 8000bd6:	4814      	ldr	r0, [pc, #80]	; (8000c28 <StartThread+0x80>)
 8000bd8:	f008 fc8c 	bl	80094f4 <netif_set_default>
  ethernet_link_status_updated(&gnetif); 
 8000bdc:	4812      	ldr	r0, [pc, #72]	; (8000c28 <StartThread+0x80>)
 8000bde:	f7ff fc11 	bl	8000404 <ethernet_link_status_updated>
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8000be2:	4912      	ldr	r1, [pc, #72]	; (8000c2c <StartThread+0x84>)
 8000be4:	4810      	ldr	r0, [pc, #64]	; (8000c28 <StartThread+0x80>)
 8000be6:	f008 fd03 	bl	80095f0 <netif_set_link_callback>
  osThreadDef(EthLink, ethernet_link_thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE *2);
 8000bea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bee:	f854 3b04 	ldr.w	r3, [r4], #4
  osThreadCreate (osThread(EthLink), &gnetif);
 8000bf2:	a808      	add	r0, sp, #32
 8000bf4:	490c      	ldr	r1, [pc, #48]	; (8000c28 <StartThread+0x80>)
  osThreadDef(EthLink, ethernet_link_thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE *2);
 8000bf6:	602b      	str	r3, [r5, #0]
  osThreadCreate (osThread(EthLink), &gnetif);
 8000bf8:	f003 fda2 	bl	8004740 <osThreadCreate>
#endif   
 
#if LWIP_DHCP
  /* Start DHCPClient */
  osThreadDef(DHCP, DHCP_Thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8000bfc:	ad0d      	add	r5, sp, #52	; 0x34
 8000bfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c02:	6823      	ldr	r3, [r4, #0]
  osThreadCreate (osThread(DHCP), &gnetif);
 8000c04:	a80d      	add	r0, sp, #52	; 0x34
 8000c06:	4908      	ldr	r1, [pc, #32]	; (8000c28 <StartThread+0x80>)
  osThreadDef(DHCP, DHCP_Thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8000c08:	602b      	str	r3, [r5, #0]
  osThreadCreate (osThread(DHCP), &gnetif);
 8000c0a:	f003 fd99 	bl	8004740 <osThreadCreate>
  http_server_netconn_init();
 8000c0e:	f7ff feb7 	bl	8000980 <http_server_netconn_init>
    osThreadTerminate(NULL);
 8000c12:	2000      	movs	r0, #0
 8000c14:	f003 fdac 	bl	8004770 <osThreadTerminate>
  for( ;; )
 8000c18:	e7fb      	b.n	8000c12 <StartThread+0x6a>
 8000c1a:	bf00      	nop
 8000c1c:	0800f65c 	.word	0x0800f65c
 8000c20:	0800656d 	.word	0x0800656d
 8000c24:	08000645 	.word	0x08000645
 8000c28:	240069a8 	.word	0x240069a8
 8000c2c:	08000405 	.word	0x08000405

08000c30 <main>:
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b09e      	sub	sp, #120	; 0x78

  /* Configure the MPU attributes as Device not cacheable 
     for ETH DMA descriptors */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0x30040000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000c34:	4c66      	ldr	r4, [pc, #408]	; (8000dd0 <main+0x1a0>)
  HAL_MPU_Disable();
 8000c36:	f000 fb57 	bl	80012e8 <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c3a:	2301      	movs	r3, #1
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x00;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c3c:	a80b      	add	r0, sp, #44	; 0x2c
  
  /* Configure the MPU attributes as Normal Non Cacheable
     for LwIP RAM heap which contains the Tx buffers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0x30044000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000c3e:	4d65      	ldr	r5, [pc, #404]	; (8000dd4 <main+0x1a4>)
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c40:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000c44:	4b64      	ldr	r3, [pc, #400]	; (8000dd8 <main+0x1a8>)
 8000c46:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000c4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c4e:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c50:	f000 fb6c 	bl	800132c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c54:	f240 1301 	movw	r3, #257	; 0x101
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
  MPU_InitStruct.SubRegionDisable = 0x00;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c58:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c5a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000c5e:	4b5f      	ldr	r3, [pc, #380]	; (8000ddc <main+0x1ac>)
 8000c60:	e9cd 530c 	strd	r5, r3, [sp, #48]	; 0x30
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000c64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c68:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c6a:	f000 fb5f 	bl	800132c <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c6e:	2004      	movs	r0, #4
 8000c70:	f000 fb4a 	bl	8001308 <HAL_MPU_Enable>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000c74:	4b5a      	ldr	r3, [pc, #360]	; (8000de0 <main+0x1b0>)
 8000c76:	695a      	ldr	r2, [r3, #20]
 8000c78:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 8000c7c:	d111      	bne.n	8000ca2 <main+0x72>
  __ASM volatile ("dsb 0xF":::"memory");
 8000c7e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c82:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000c86:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000c8a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c8e:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000c92:	695a      	ldr	r2, [r3, #20]
 8000c94:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000c98:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c9a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c9e:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000ca2:	4a4f      	ldr	r2, [pc, #316]	; (8000de0 <main+0x1b0>)
 8000ca4:	6953      	ldr	r3, [r2, #20]
 8000ca6:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8000caa:	d123      	bne.n	8000cf4 <main+0xc4>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000cac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000cb0:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8000cb4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000cb8:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000cbc:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000cc0:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000cc4:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000cc6:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000cca:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ccc:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8000cd0:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000cd2:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8000cd6:	d2f9      	bcs.n	8000ccc <main+0x9c>
    } while(sets-- != 0U);
 8000cd8:	3b20      	subs	r3, #32
 8000cda:	f113 0f20 	cmn.w	r3, #32
 8000cde:	d1f2      	bne.n	8000cc6 <main+0x96>
 8000ce0:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000ce4:	6953      	ldr	r3, [r2, #20]
 8000ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cea:	6153      	str	r3, [r2, #20]
 8000cec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000cf0:	f3bf 8f6f 	isb	sy
  HAL_Init();  
 8000cf4:	f000 fa56 	bl	80011a4 <HAL_Init>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000cf8:	2002      	movs	r0, #2
 8000cfa:	f001 fbe7 	bl	80024cc <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cfe:	2300      	movs	r3, #0
 8000d00:	9301      	str	r3, [sp, #4]
 8000d02:	4b38      	ldr	r3, [pc, #224]	; (8000de4 <main+0x1b4>)
 8000d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d06:	f022 0201 	bic.w	r2, r2, #1
 8000d0a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	9301      	str	r3, [sp, #4]
 8000d14:	4b34      	ldr	r3, [pc, #208]	; (8000de8 <main+0x1b8>)
 8000d16:	699a      	ldr	r2, [r3, #24]
 8000d18:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000d1c:	619a      	str	r2, [r3, #24]
 8000d1e:	699a      	ldr	r2, [r3, #24]
 8000d20:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8000d24:	9201      	str	r2, [sp, #4]
 8000d26:	9a01      	ldr	r2, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d28:	699a      	ldr	r2, [r3, #24]
 8000d2a:	0490      	lsls	r0, r2, #18
 8000d2c:	d5fc      	bpl.n	8000d28 <main+0xf8>
  __HAL_RCC_D2SRAM3_CLK_ENABLE();
 8000d2e:	4b2f      	ldr	r3, [pc, #188]	; (8000dec <main+0x1bc>)
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d30:	2701      	movs	r7, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d32:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000d34:	2504      	movs	r5, #4
  __HAL_RCC_D2SRAM3_CLK_ENABLE();
 8000d36:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000d3a:	a80b      	add	r0, sp, #44	; 0x2c
  __HAL_RCC_D2SRAM3_CLK_ENABLE();
 8000d3c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000d40:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000d44:	f44f 72c8 	mov.w	r2, #400	; 0x190
  __HAL_RCC_D2SRAM3_CLK_ENABLE();
 8000d48:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d4c:	9418      	str	r4, [sp, #96]	; 0x60
  __HAL_RCC_D2SRAM3_CLK_ENABLE();
 8000d4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000d52:	9302      	str	r3, [sp, #8]
 8000d54:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d56:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d5a:	e9cd 730b 	strd	r7, r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000d5e:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d60:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000d64:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8000d66:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d68:	931d      	str	r3, [sp, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000d6a:	e9cd 5216 	strd	r5, r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d6e:	e9cd 5419 	strd	r5, r4, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000d72:	e9cd 531b 	strd	r5, r3, [sp, #108]	; 0x6c
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000d76:	f001 fbcd 	bl	8002514 <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
 8000d7a:	b100      	cbz	r0, 8000d7e <main+0x14e>
    while(1);
 8000d7c:	e7fe      	b.n	8000d7c <main+0x14c>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d7e:	223f      	movs	r2, #63	; 0x3f
 8000d80:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;  
 8000d82:	2108      	movs	r1, #8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d84:	9005      	str	r0, [sp, #20]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000d86:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d88:	e9cd 2303 	strd	r2, r3, [sp, #12]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;  
 8000d8c:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2; 
 8000d8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;  
 8000d92:	e9cd 1306 	strd	r1, r3, [sp, #24]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000d96:	4629      	mov	r1, r5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2; 
 8000d98:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2; 
 8000d9a:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000d9e:	f001 fef1 	bl	8002b84 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 8000da2:	4606      	mov	r6, r0
 8000da4:	b100      	cbz	r0, 8000da8 <main+0x178>
    while(1);
 8000da6:	e7fe      	b.n	8000da6 <main+0x176>
  BSP_LED_Init(LED2);
 8000da8:	4638      	mov	r0, r7
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 4);
 8000daa:	4d11      	ldr	r5, [pc, #68]	; (8000df0 <main+0x1c0>)
  BSP_LED_Init(LED2);
 8000dac:	f000 f944 	bl	8001038 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8000db0:	4620      	mov	r0, r4
 8000db2:	f000 f941 	bl	8001038 <BSP_LED_Init>
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 4);
 8000db6:	ac0b      	add	r4, sp, #44	; 0x2c
 8000db8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dbc:	682b      	ldr	r3, [r5, #0]
  osThreadCreate (osThread(Start), NULL);
 8000dbe:	4631      	mov	r1, r6
 8000dc0:	a80b      	add	r0, sp, #44	; 0x2c
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 4);
 8000dc2:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(Start), NULL);
 8000dc4:	f003 fcbc 	bl	8004740 <osThreadCreate>
  osKernelStart();
 8000dc8:	f003 fcae 	bl	8004728 <osKernelStart>
  for( ;; );
 8000dcc:	e7fe      	b.n	8000dcc <main+0x19c>
 8000dce:	bf00      	nop
 8000dd0:	30040000 	.word	0x30040000
 8000dd4:	30044000 	.word	0x30044000
 8000dd8:	03000007 	.word	0x03000007
 8000ddc:	0301000d 	.word	0x0301000d
 8000de0:	e000ed00 	.word	0xe000ed00
 8000de4:	58000400 	.word	0x58000400
 8000de8:	58024800 	.word	0x58024800
 8000dec:	58024400 	.word	0x58024400
 8000df0:	0800f684 	.word	0x0800f684

08000df4 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df4:	280f      	cmp	r0, #15
{
 8000df6:	b510      	push	{r4, lr}
 8000df8:	4604      	mov	r4, r0
 8000dfa:	b08a      	sub	sp, #40	; 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfc:	d902      	bls.n	8000e04 <HAL_InitTick+0x10>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000dfe:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&TimHandle);
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8000e00:	b00a      	add	sp, #40	; 0x28
 8000e02:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000e04:	4601      	mov	r1, r0
 8000e06:	2200      	movs	r2, #0
 8000e08:	2036      	movs	r0, #54	; 0x36
 8000e0a:	f000 fa2d 	bl	8001268 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e0e:	2036      	movs	r0, #54	; 0x36
 8000e10:	f000 fa5c 	bl	80012cc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000e14:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e16:	4669      	mov	r1, sp
 8000e18:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 8000e1a:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e1c:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <HAL_InitTick+0x88>)
 8000e1e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8000e22:	f042 0210 	orr.w	r2, r2, #16
 8000e26:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8000e2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e2e:	f003 0310 	and.w	r3, r3, #16
 8000e32:	9301      	str	r3, [sp, #4]
 8000e34:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e36:	f001 ffff 	bl	8002e38 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 8000e3a:	9b07      	ldr	r3, [sp, #28]
 8000e3c:	b9c3      	cbnz	r3, 8000e70 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e3e:	f001 ffe9 	bl	8002e14 <HAL_RCC_GetPCLK1Freq>
  TimHandle.Instance = TIM6;
 8000e42:	4c0f      	ldr	r4, [pc, #60]	; (8000e80 <HAL_InitTick+0x8c>)
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <HAL_InitTick+0x90>)
 8000e46:	6023      	str	r3, [r4, #0]
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 8000e48:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000e4c:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <HAL_InitTick+0x94>)
 8000e50:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e54:	3801      	subs	r0, #1
  TimHandle.Init.ClockDivision = 0;
 8000e56:	2300      	movs	r3, #0
  TimHandle.Init.Prescaler = uwPrescalerValue;
 8000e58:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8000e5a:	4620      	mov	r0, r4
  TimHandle.Init.ClockDivision = 0;
 8000e5c:	6123      	str	r3, [r4, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5e:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8000e60:	f002 f96a 	bl	8003138 <HAL_TIM_Base_Init>
 8000e64:	2800      	cmp	r0, #0
 8000e66:	d1ca      	bne.n	8000dfe <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&TimHandle);
 8000e68:	4620      	mov	r0, r4
 8000e6a:	f002 f811 	bl	8002e90 <HAL_TIM_Base_Start_IT>
 8000e6e:	e7c7      	b.n	8000e00 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e70:	f001 ffd0 	bl	8002e14 <HAL_RCC_GetPCLK1Freq>
 8000e74:	0040      	lsls	r0, r0, #1
 8000e76:	e7e4      	b.n	8000e42 <HAL_InitTick+0x4e>
 8000e78:	24000020 	.word	0x24000020
 8000e7c:	58024400 	.word	0x58024400
 8000e80:	240000c4 	.word	0x240000c4
 8000e84:	40001000 	.word	0x40001000
 8000e88:	000f4240 	.word	0x000f4240

08000e8c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 8000e8c:	f000 b9b8 	b.w	8001200 <HAL_IncTick>

08000e90 <TIM6_DAC_IRQHandler>:
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimHandle);
 8000e90:	4801      	ldr	r0, [pc, #4]	; (8000e98 <TIM6_DAC_IRQHandler+0x8>)
 8000e92:	f002 b83b 	b.w	8002f0c <HAL_TIM_IRQHandler>
 8000e96:	bf00      	nop
 8000e98:	240000c4 	.word	0x240000c4

08000e9c <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000e9c:	4770      	bx	lr

08000e9e <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <HardFault_Handler>

08000ea0 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <MemManage_Handler>

08000ea2 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <BusFault_Handler>

08000ea4 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <UsageFault_Handler>

08000ea6 <DebugMon_Handler>:
 8000ea6:	4770      	bx	lr

08000ea8 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  osSystickHandler();
 8000ea8:	f003 bd6c 	b.w	8004984 <osSystickHandler>

08000eac <ETH_IRQHandler>:
  * @param  None
  * @retval None
  */
void ETH_IRQHandler(void)
{
  HAL_ETH_IRQHandler(&EthHandle);
 8000eac:	4801      	ldr	r0, [pc, #4]	; (8000eb4 <ETH_IRQHandler+0x8>)
 8000eae:	f000 bf15 	b.w	8001cdc <HAL_ETH_IRQHandler>
 8000eb2:	bf00      	nop
 8000eb4:	24006800 	.word	0x24006800

08000eb8 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000eb8:	b530      	push	{r4, r5, lr}
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000eba:	b170      	cbz	r0, 8000eda <LAN8742_RegisterBusIO+0x22>
 8000ebc:	68cc      	ldr	r4, [r1, #12]
 8000ebe:	b164      	cbz	r4, 8000eda <LAN8742_RegisterBusIO+0x22>
 8000ec0:	688a      	ldr	r2, [r1, #8]
 8000ec2:	b152      	cbz	r2, 8000eda <LAN8742_RegisterBusIO+0x22>
 8000ec4:	690b      	ldr	r3, [r1, #16]
 8000ec6:	b143      	cbz	r3, 8000eda <LAN8742_RegisterBusIO+0x22>
  {
    return LAN8742_STATUS_ERROR;
  }
  
  pObj->IO.Init = ioctx->Init;
 8000ec8:	680d      	ldr	r5, [r1, #0]
  pObj->IO.DeInit = ioctx->DeInit;
 8000eca:	6849      	ldr	r1, [r1, #4]
  pObj->IO.Init = ioctx->Init;
 8000ecc:	6085      	str	r5, [r0, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000ece:	60c1      	str	r1, [r0, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
  pObj->IO.WriteReg = ioctx->WriteReg;
  pObj->IO.GetTick = ioctx->GetTick;
 8000ed0:	6183      	str	r3, [r0, #24]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000ed2:	e9c0 2404 	strd	r2, r4, [r0, #16]
  
  return LAN8742_STATUS_OK;
 8000ed6:	2000      	movs	r0, #0
}
 8000ed8:	bd30      	pop	{r4, r5, pc}
    return LAN8742_STATUS_ERROR;
 8000eda:	f04f 30ff 	mov.w	r0, #4294967295
 8000ede:	e7fb      	b.n	8000ed8 <LAN8742_RegisterBusIO+0x20>

08000ee0 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000ee0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000ee2:	2300      	movs	r3, #0
   int32_t status = LAN8742_STATUS_OK;
   
   if(pObj->Is_Initialized == 0)
 8000ee4:	6846      	ldr	r6, [r0, #4]
 {
 8000ee6:	4604      	mov	r4, r0
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000ee8:	9301      	str	r3, [sp, #4]
   if(pObj->Is_Initialized == 0)
 8000eea:	b166      	cbz	r6, 8000f06 <LAN8742_Init+0x26>
     }
   }
      
   if(status == LAN8742_STATUS_OK)
   {
     tickstart =  pObj->IO.GetTick();
 8000eec:	69a3      	ldr	r3, [r4, #24]
 8000eee:	4798      	blx	r3
 8000ef0:	4605      	mov	r5, r0
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000ef2:	69a3      	ldr	r3, [r4, #24]
 8000ef4:	4798      	blx	r3
 8000ef6:	1b43      	subs	r3, r0, r5
 8000ef8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000efc:	d9f9      	bls.n	8000ef2 <LAN8742_Init+0x12>
     {
     }
     pObj->Is_Initialized = 1;
 8000efe:	2301      	movs	r3, #1
 8000f00:	2500      	movs	r5, #0
 8000f02:	6063      	str	r3, [r4, #4]
 8000f04:	e027      	b.n	8000f56 <LAN8742_Init+0x76>
     if(pObj->IO.Init != 0)
 8000f06:	6883      	ldr	r3, [r0, #8]
 8000f08:	b103      	cbz	r3, 8000f0c <LAN8742_Init+0x2c>
       pObj->IO.Init();
 8000f0a:	4798      	blx	r3
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000f0c:	2320      	movs	r3, #32
   int32_t status = LAN8742_STATUS_OK;
 8000f0e:	2500      	movs	r5, #0
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000f10:	6023      	str	r3, [r4, #0]
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000f12:	6963      	ldr	r3, [r4, #20]
 8000f14:	aa01      	add	r2, sp, #4
 8000f16:	2112      	movs	r1, #18
 8000f18:	4630      	mov	r0, r6
 8000f1a:	4798      	blx	r3
 8000f1c:	2800      	cmp	r0, #0
 8000f1e:	db1d      	blt.n	8000f5c <LAN8742_Init+0x7c>
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000f20:	9b01      	ldr	r3, [sp, #4]
 8000f22:	f003 031f 	and.w	r3, r3, #31
 8000f26:	42b3      	cmp	r3, r6
 8000f28:	d11a      	bne.n	8000f60 <LAN8742_Init+0x80>
         status = LAN8742_STATUS_OK;
 8000f2a:	2500      	movs	r5, #0
         pObj->DevAddr = addr;
 8000f2c:	6026      	str	r6, [r4, #0]
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000f2e:	6820      	ldr	r0, [r4, #0]
 8000f30:	281f      	cmp	r0, #31
 8000f32:	d82d      	bhi.n	8000f90 <LAN8742_Init+0xb0>
     if(status == LAN8742_STATUS_OK)
 8000f34:	b97d      	cbnz	r5, 8000f56 <LAN8742_Init+0x76>
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000f36:	6923      	ldr	r3, [r4, #16]
 8000f38:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f3c:	4629      	mov	r1, r5
 8000f3e:	4798      	blx	r3
 8000f40:	2800      	cmp	r0, #0
 8000f42:	db28      	blt.n	8000f96 <LAN8742_Init+0xb6>
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000f44:	6963      	ldr	r3, [r4, #20]
 8000f46:	aa01      	add	r2, sp, #4
 8000f48:	4629      	mov	r1, r5
 8000f4a:	6820      	ldr	r0, [r4, #0]
 8000f4c:	4798      	blx	r3
 8000f4e:	2800      	cmp	r0, #0
 8000f50:	da0a      	bge.n	8000f68 <LAN8742_Init+0x88>
           status = LAN8742_STATUS_READ_ERROR;
 8000f52:	f06f 0504 	mvn.w	r5, #4
   }
   
   return status;
 }
 8000f56:	4628      	mov	r0, r5
 8000f58:	b002      	add	sp, #8
 8000f5a:	bd70      	pop	{r4, r5, r6, pc}
         status = LAN8742_STATUS_READ_ERROR;
 8000f5c:	f06f 0504 	mvn.w	r5, #4
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000f60:	3601      	adds	r6, #1
 8000f62:	2e20      	cmp	r6, #32
 8000f64:	d1d5      	bne.n	8000f12 <LAN8742_Init+0x32>
 8000f66:	e7e2      	b.n	8000f2e <LAN8742_Init+0x4e>
           tickstart = pObj->IO.GetTick();
 8000f68:	69a3      	ldr	r3, [r4, #24]
 8000f6a:	4798      	blx	r3
 8000f6c:	4605      	mov	r5, r0
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000f6e:	9b01      	ldr	r3, [sp, #4]
 8000f70:	69a2      	ldr	r2, [r4, #24]
 8000f72:	041b      	lsls	r3, r3, #16
 8000f74:	d5ba      	bpl.n	8000eec <LAN8742_Init+0xc>
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000f76:	4790      	blx	r2
 8000f78:	1b40      	subs	r0, r0, r5
 8000f7a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000f7e:	d80d      	bhi.n	8000f9c <LAN8742_Init+0xbc>
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000f80:	6963      	ldr	r3, [r4, #20]
 8000f82:	aa01      	add	r2, sp, #4
 8000f84:	2100      	movs	r1, #0
 8000f86:	6820      	ldr	r0, [r4, #0]
 8000f88:	4798      	blx	r3
 8000f8a:	2800      	cmp	r0, #0
 8000f8c:	daef      	bge.n	8000f6e <LAN8742_Init+0x8e>
 8000f8e:	e7e0      	b.n	8000f52 <LAN8742_Init+0x72>
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000f90:	f06f 0502 	mvn.w	r5, #2
 8000f94:	e7df      	b.n	8000f56 <LAN8742_Init+0x76>
         status = LAN8742_STATUS_WRITE_ERROR;
 8000f96:	f06f 0503 	mvn.w	r5, #3
 8000f9a:	e7dc      	b.n	8000f56 <LAN8742_Init+0x76>
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000f9c:	f06f 0501 	mvn.w	r5, #1
   return status;
 8000fa0:	e7d9      	b.n	8000f56 <LAN8742_Init+0x76>

08000fa2 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000fa2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t readval = 0;
 8000fa4:	2500      	movs	r5, #0
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000fa6:	6943      	ldr	r3, [r0, #20]
{
 8000fa8:	4604      	mov	r4, r0
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000faa:	aa01      	add	r2, sp, #4
 8000fac:	2101      	movs	r1, #1
 8000fae:	6800      	ldr	r0, [r0, #0]
  uint32_t readval = 0;
 8000fb0:	9501      	str	r5, [sp, #4]
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000fb2:	4798      	blx	r3
 8000fb4:	42a8      	cmp	r0, r5
 8000fb6:	da03      	bge.n	8000fc0 <LAN8742_GetLinkState+0x1e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000fb8:	f06f 0004 	mvn.w	r0, #4
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }				
  }
}
 8000fbc:	b003      	add	sp, #12
 8000fbe:	bd30      	pop	{r4, r5, pc}
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000fc0:	6963      	ldr	r3, [r4, #20]
 8000fc2:	aa01      	add	r2, sp, #4
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	6820      	ldr	r0, [r4, #0]
 8000fc8:	4798      	blx	r3
 8000fca:	2800      	cmp	r0, #0
 8000fcc:	dbf4      	blt.n	8000fb8 <LAN8742_GetLinkState+0x16>
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000fce:	9b01      	ldr	r3, [sp, #4]
 8000fd0:	075b      	lsls	r3, r3, #29
 8000fd2:	d52c      	bpl.n	800102e <LAN8742_GetLinkState+0x8c>
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000fd4:	6963      	ldr	r3, [r4, #20]
 8000fd6:	aa01      	add	r2, sp, #4
 8000fd8:	4629      	mov	r1, r5
 8000fda:	6820      	ldr	r0, [r4, #0]
 8000fdc:	4798      	blx	r3
 8000fde:	2800      	cmp	r0, #0
 8000fe0:	dbea      	blt.n	8000fb8 <LAN8742_GetLinkState+0x16>
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000fe2:	9b01      	ldr	r3, [sp, #4]
 8000fe4:	04dd      	lsls	r5, r3, #19
 8000fe6:	d40e      	bmi.n	8001006 <LAN8742_GetLinkState+0x64>
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000fe8:	f403 5204 	and.w	r2, r3, #8448	; 0x2100
 8000fec:	f5b2 5f04 	cmp.w	r2, #8448	; 0x2100
 8000ff0:	d101      	bne.n	8000ff6 <LAN8742_GetLinkState+0x54>
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000ff2:	2002      	movs	r0, #2
 8000ff4:	e7e2      	b.n	8000fbc <LAN8742_GetLinkState+0x1a>
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000ff6:	0498      	lsls	r0, r3, #18
 8000ff8:	d501      	bpl.n	8000ffe <LAN8742_GetLinkState+0x5c>
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000ffa:	2003      	movs	r0, #3
 8000ffc:	e7de      	b.n	8000fbc <LAN8742_GetLinkState+0x1a>
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000ffe:	05d9      	lsls	r1, r3, #23
 8001000:	d513      	bpl.n	800102a <LAN8742_GetLinkState+0x88>
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001002:	2004      	movs	r0, #4
 8001004:	e7da      	b.n	8000fbc <LAN8742_GetLinkState+0x1a>
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001006:	6963      	ldr	r3, [r4, #20]
 8001008:	aa01      	add	r2, sp, #4
 800100a:	211f      	movs	r1, #31
 800100c:	6820      	ldr	r0, [r4, #0]
 800100e:	4798      	blx	r3
 8001010:	2800      	cmp	r0, #0
 8001012:	dbd1      	blt.n	8000fb8 <LAN8742_GetLinkState+0x16>
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001014:	9b01      	ldr	r3, [sp, #4]
 8001016:	04da      	lsls	r2, r3, #19
 8001018:	d50b      	bpl.n	8001032 <LAN8742_GetLinkState+0x90>
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800101a:	f003 031c 	and.w	r3, r3, #28
 800101e:	2b18      	cmp	r3, #24
 8001020:	d0e7      	beq.n	8000ff2 <LAN8742_GetLinkState+0x50>
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001022:	2b08      	cmp	r3, #8
 8001024:	d0e9      	beq.n	8000ffa <LAN8742_GetLinkState+0x58>
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001026:	2b14      	cmp	r3, #20
 8001028:	d0eb      	beq.n	8001002 <LAN8742_GetLinkState+0x60>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800102a:	2005      	movs	r0, #5
 800102c:	e7c6      	b.n	8000fbc <LAN8742_GetLinkState+0x1a>
    return LAN8742_STATUS_LINK_DOWN;    
 800102e:	2001      	movs	r0, #1
 8001030:	e7c4      	b.n	8000fbc <LAN8742_GetLinkState+0x1a>
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001032:	2006      	movs	r0, #6
 8001034:	e7c2      	b.n	8000fbc <LAN8742_GetLinkState+0x1a>
	...

08001038 <BSP_LED_Init>:
int32_t BSP_LED_Init(Led_TypeDef Led)
{
  int32_t ret = BSP_ERROR_NONE;
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001038:	2802      	cmp	r0, #2
{
 800103a:	b530      	push	{r4, r5, lr}
 800103c:	b08b      	sub	sp, #44	; 0x2c
  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800103e:	d83e      	bhi.n	80010be <BSP_LED_Init+0x86>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001040:	4b20      	ldr	r3, [pc, #128]	; (80010c4 <BSP_LED_Init+0x8c>)
    {
      LED1_GPIO_CLK_ENABLE();
 8001042:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    if(Led == LED1)
 8001046:	bb10      	cbnz	r0, 800108e <BSP_LED_Init+0x56>
      LED1_GPIO_CLK_ENABLE();
 8001048:	f042 0202 	orr.w	r2, r2, #2
 800104c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	9302      	str	r3, [sp, #8]
 800105a:	9b02      	ldr	r3, [sp, #8]
    else
    {
      LED3_GPIO_CLK_ENABLE();
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800105c:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <BSP_LED_Init+0x90>)
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800105e:	2400      	movs	r4, #0
 8001060:	2201      	movs	r2, #1
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001062:	a905      	add	r1, sp, #20
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001064:	f833 5010 	ldrh.w	r5, [r3, r0, lsl #1]
    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001068:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800106c:	e9cd 2406 	strd	r2, r4, [sp, #24]
    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001070:	6880      	ldr	r0, [r0, #8]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001072:	2203      	movs	r2, #3
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001074:	9505      	str	r5, [sp, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001076:	9208      	str	r2, [sp, #32]
    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001078:	9001      	str	r0, [sp, #4]
 800107a:	f001 f93b 	bl	80022f4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800107e:	9801      	ldr	r0, [sp, #4]
 8001080:	4622      	mov	r2, r4
 8001082:	4629      	mov	r1, r5
 8001084:	f001 fa1c 	bl	80024c0 <HAL_GPIO_WritePin>
  int32_t ret = BSP_ERROR_NONE;
 8001088:	4620      	mov	r0, r4
  }

  return ret;
}
 800108a:	b00b      	add	sp, #44	; 0x2c
 800108c:	bd30      	pop	{r4, r5, pc}
    else if(Led == LED2)
 800108e:	2801      	cmp	r0, #1
 8001090:	d10a      	bne.n	80010a8 <BSP_LED_Init+0x70>
      LED2_GPIO_CLK_ENABLE();
 8001092:	f042 0210 	orr.w	r2, r2, #16
 8001096:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800109a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800109e:	f003 0310 	and.w	r3, r3, #16
 80010a2:	9303      	str	r3, [sp, #12]
 80010a4:	9b03      	ldr	r3, [sp, #12]
 80010a6:	e7d9      	b.n	800105c <BSP_LED_Init+0x24>
      LED3_GPIO_CLK_ENABLE();
 80010a8:	f042 0202 	orr.w	r2, r2, #2
 80010ac:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80010b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b4:	f003 0302 	and.w	r3, r3, #2
 80010b8:	9304      	str	r3, [sp, #16]
 80010ba:	9b04      	ldr	r3, [sp, #16]
 80010bc:	e7ce      	b.n	800105c <BSP_LED_Init+0x24>
    ret = BSP_ERROR_WRONG_PARAM;
 80010be:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80010c2:	e7e2      	b.n	800108a <BSP_LED_Init+0x52>
 80010c4:	58024400 	.word	0x58024400
 80010c8:	0800f698 	.word	0x0800f698

080010cc <BSP_LED_On>:
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
  int32_t ret = BSP_ERROR_NONE;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80010cc:	2802      	cmp	r0, #2
{
 80010ce:	b510      	push	{r4, lr}
  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80010d0:	d80a      	bhi.n	80010e8 <BSP_LED_On+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80010d2:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <BSP_LED_On+0x24>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 80010da:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 80010de:	68a0      	ldr	r0, [r4, #8]
 80010e0:	f001 f9ee 	bl	80024c0 <HAL_GPIO_WritePin>
  int32_t ret = BSP_ERROR_NONE;
 80010e4:	2000      	movs	r0, #0
  }

  return ret;
}
 80010e6:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80010e8:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80010ec:	e7fb      	b.n	80010e6 <BSP_LED_On+0x1a>
 80010ee:	bf00      	nop
 80010f0:	0800f698 	.word	0x0800f698

080010f4 <BSP_LED_Off>:
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
  int32_t ret = BSP_ERROR_NONE;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80010f4:	2802      	cmp	r0, #2
{
 80010f6:	b510      	push	{r4, lr}
  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80010f8:	d80a      	bhi.n	8001110 <BSP_LED_Off+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80010fa:	4b07      	ldr	r3, [pc, #28]	; (8001118 <BSP_LED_Off+0x24>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8001102:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8001106:	68a0      	ldr	r0, [r4, #8]
 8001108:	f001 f9da 	bl	80024c0 <HAL_GPIO_WritePin>
  int32_t ret = BSP_ERROR_NONE;
 800110c:	2000      	movs	r0, #0
  }

  return ret;
}
 800110e:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8001110:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8001114:	e7fb      	b.n	800110e <BSP_LED_Off+0x1a>
 8001116:	bf00      	nop
 8001118:	0800f698 	.word	0x0800f698

0800111c <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800111c:	491a      	ldr	r1, [pc, #104]	; (8001188 <SystemInit+0x6c>)
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800111e:	481b      	ldr	r0, [pc, #108]	; (800118c <SystemInit+0x70>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001120:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001124:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8001128:	b510      	push	{r4, lr}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800112a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 800112e:	4b18      	ldr	r3, [pc, #96]	; (8001190 <SystemInit+0x74>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	f042 0201 	orr.w	r2, r2, #1
 8001136:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800113c:	681c      	ldr	r4, [r3, #0]
 800113e:	4020      	ands	r0, r4
 8001140:	6018      	str	r0, [r3, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001142:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001144:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001146:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001148:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800114a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800114c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800114e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001150:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
 8001152:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001154:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001156:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001158:	6818      	ldr	r0, [r3, #0]
 800115a:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 800115e:	6018      	str	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001160:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <SystemInit+0x78>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	0c1b      	lsrs	r3, r3, #16
 8001168:	041b      	lsls	r3, r3, #16
 800116a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800116e:	d202      	bcs.n	8001176 <SystemInit+0x5a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001170:	4b09      	ldr	r3, [pc, #36]	; (8001198 <SystemInit+0x7c>)
 8001172:	2201      	movs	r2, #1
 8001174:	601a      	str	r2, [r3, #0]
/*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <SystemInit+0x80>)
 8001178:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800117c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800117e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001182:	608b      	str	r3, [r1, #8]
#endif  


}
 8001184:	bd10      	pop	{r4, pc}
 8001186:	bf00      	nop
 8001188:	e000ed00 	.word	0xe000ed00
 800118c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001190:	58024400 	.word	0x58024400
 8001194:	5c001000 	.word	0x5c001000
 8001198:	51008108 	.word	0x51008108
 800119c:	52004000 	.word	0x52004000

080011a0 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80011a0:	4770      	bx	lr
	...

080011a4 <HAL_Init>:
{
 80011a4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a6:	2003      	movs	r0, #3
 80011a8:	f000 f84c 	bl	8001244 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011ac:	f001 fc4a 	bl	8002a44 <HAL_RCC_GetSysClockFreq>
 80011b0:	490f      	ldr	r1, [pc, #60]	; (80011f0 <HAL_Init+0x4c>)
 80011b2:	4a10      	ldr	r2, [pc, #64]	; (80011f4 <HAL_Init+0x50>)
 80011b4:	698b      	ldr	r3, [r1, #24]
 80011b6:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80011ba:	5cd3      	ldrb	r3, [r2, r3]
 80011bc:	f003 031f 	and.w	r3, r3, #31
 80011c0:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011c2:	698b      	ldr	r3, [r1, #24]
 80011c4:	f003 030f 	and.w	r3, r3, #15
 80011c8:	5cd3      	ldrb	r3, [r2, r3]
 80011ca:	4a0b      	ldr	r2, [pc, #44]	; (80011f8 <HAL_Init+0x54>)
 80011cc:	f003 031f 	and.w	r3, r3, #31
 80011d0:	fa20 f303 	lsr.w	r3, r0, r3
 80011d4:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <HAL_Init+0x58>)
 80011d8:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011da:	200f      	movs	r0, #15
 80011dc:	f7ff fe0a 	bl	8000df4 <HAL_InitTick>
 80011e0:	4604      	mov	r4, r0
 80011e2:	b918      	cbnz	r0, 80011ec <HAL_Init+0x48>
  HAL_MspInit();
 80011e4:	f7ff ffdc 	bl	80011a0 <HAL_MspInit>
}
 80011e8:	4620      	mov	r0, r4
 80011ea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80011ec:	2401      	movs	r4, #1
 80011ee:	e7fb      	b.n	80011e8 <HAL_Init+0x44>
 80011f0:	58024400 	.word	0x58024400
 80011f4:	0800f6ac 	.word	0x0800f6ac
 80011f8:	24000018 	.word	0x24000018
 80011fc:	24000014 	.word	0x24000014

08001200 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001200:	4a03      	ldr	r2, [pc, #12]	; (8001210 <HAL_IncTick+0x10>)
 8001202:	4b04      	ldr	r3, [pc, #16]	; (8001214 <HAL_IncTick+0x14>)
 8001204:	6811      	ldr	r1, [r2, #0]
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	440b      	add	r3, r1
 800120a:	6013      	str	r3, [r2, #0]
}
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	240069e0 	.word	0x240069e0
 8001214:	2400001c 	.word	0x2400001c

08001218 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001218:	4b01      	ldr	r3, [pc, #4]	; (8001220 <HAL_GetTick+0x8>)
 800121a:	6818      	ldr	r0, [r3, #0]
}
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	240069e0 	.word	0x240069e0

08001224 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8001224:	4b01      	ldr	r3, [pc, #4]	; (800122c <HAL_GetREVID+0x8>)
 8001226:	6818      	ldr	r0, [r3, #0]
}
 8001228:	0c00      	lsrs	r0, r0, #16
 800122a:	4770      	bx	lr
 800122c:	5c001000 	.word	0x5c001000

08001230 <HAL_SYSCFG_ETHInterfaceSelect>:
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001230:	4a03      	ldr	r2, [pc, #12]	; (8001240 <HAL_SYSCFG_ETHInterfaceSelect+0x10>)
 8001232:	6853      	ldr	r3, [r2, #4]
 8001234:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8001238:	4318      	orrs	r0, r3
 800123a:	6050      	str	r0, [r2, #4]
}
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	58000400 	.word	0x58000400

08001244 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001244:	4907      	ldr	r1, [pc, #28]	; (8001264 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001246:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001248:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800124a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800124e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001252:	0412      	lsls	r2, r2, #16
 8001254:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001258:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800125c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001260:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001262:	4770      	bx	lr
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001268:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800126a:	b530      	push	{r4, r5, lr}
 800126c:	68dc      	ldr	r4, [r3, #12]
 800126e:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001272:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001276:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001278:	2d04      	cmp	r5, #4
 800127a:	bf28      	it	cs
 800127c:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127e:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001280:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001284:	bf8c      	ite	hi
 8001286:	3c03      	subhi	r4, #3
 8001288:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128a:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 800128e:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001290:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001298:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800129c:	fa01 f104 	lsl.w	r1, r1, r4
 80012a0:	ea41 0302 	orr.w	r3, r1, r2
 80012a4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80012a8:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80012aa:	db06      	blt.n	80012ba <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ac:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80012b0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80012b4:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80012b8:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ba:	f000 000f 	and.w	r0, r0, #15
 80012be:	4a02      	ldr	r2, [pc, #8]	; (80012c8 <HAL_NVIC_SetPriority+0x60>)
 80012c0:	5413      	strb	r3, [r2, r0]
 80012c2:	e7f9      	b.n	80012b8 <HAL_NVIC_SetPriority+0x50>
 80012c4:	e000ed00 	.word	0xe000ed00
 80012c8:	e000ed14 	.word	0xe000ed14

080012cc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80012cc:	2800      	cmp	r0, #0
 80012ce:	db08      	blt.n	80012e2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d0:	2301      	movs	r3, #1
 80012d2:	0942      	lsrs	r2, r0, #5
 80012d4:	f000 001f 	and.w	r0, r0, #31
 80012d8:	fa03 f000 	lsl.w	r0, r3, r0
 80012dc:	4b01      	ldr	r3, [pc, #4]	; (80012e4 <HAL_NVIC_EnableIRQ+0x18>)
 80012de:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80012e2:	4770      	bx	lr
 80012e4:	e000e100 	.word	0xe000e100

080012e8 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80012e8:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80012ec:	4a04      	ldr	r2, [pc, #16]	; (8001300 <HAL_MPU_Disable+0x18>)
 80012ee:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80012f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012f4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80012f6:	2200      	movs	r2, #0
 80012f8:	4b02      	ldr	r3, [pc, #8]	; (8001304 <HAL_MPU_Disable+0x1c>)
 80012fa:	605a      	str	r2, [r3, #4]
}
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000ed00 	.word	0xe000ed00
 8001304:	e000ed90 	.word	0xe000ed90

08001308 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001308:	4a06      	ldr	r2, [pc, #24]	; (8001324 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800130a:	f040 0001 	orr.w	r0, r0, #1
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <HAL_MPU_Enable+0x20>)
 8001310:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001312:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001318:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800131a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800131e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001322:	4770      	bx	lr
 8001324:	e000ed00 	.word	0xe000ed00
 8001328:	e000ed90 	.word	0xe000ed90

0800132c <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800132c:	7843      	ldrb	r3, [r0, #1]
 800132e:	4a12      	ldr	r2, [pc, #72]	; (8001378 <HAL_MPU_ConfigRegion+0x4c>)
{
 8001330:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8001332:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001334:	7801      	ldrb	r1, [r0, #0]
 8001336:	b1d9      	cbz	r1, 8001370 <HAL_MPU_ConfigRegion+0x44>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001338:	6843      	ldr	r3, [r0, #4]
 800133a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800133c:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800133e:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001340:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001342:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001346:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001348:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800134a:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800134e:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001350:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001354:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001356:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800135a:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800135c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001360:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001362:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001366:	7a01      	ldrb	r1, [r0, #8]
 8001368:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800136c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800136e:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8001370:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 8001372:	6111      	str	r1, [r2, #16]
}
 8001374:	e7fb      	b.n	800136e <HAL_MPU_ConfigRegion+0x42>
 8001376:	bf00      	nop
 8001378:	e000ed90 	.word	0xe000ed90

0800137c <ETH_SetMACConfig>:
static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800137c:	688b      	ldr	r3, [r1, #8]
 800137e:	680a      	ldr	r2, [r1, #0]
{
 8001380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001384:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
                    ((uint32_t)macconf->Support2KPacket  << 22) |
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001386:	7c0b      	ldrb	r3, [r1, #16]
{
 8001388:	b085      	sub	sp, #20
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800138a:	f891 a004 	ldrb.w	sl, [r1, #4]
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800138e:	2b00      	cmp	r3, #0
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001390:	f891 900c 	ldrb.w	r9, [r1, #12]
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001394:	f891 800d 	ldrb.w	r8, [r1, #13]
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001398:	bf0c      	ite	eq
 800139a:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
 800139e:	2300      	movne	r3, #0
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80013a0:	f891 e00e 	ldrb.w	lr, [r1, #14]
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80013a4:	9301      	str	r3, [sp, #4]
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80013a6:	7c4b      	ldrb	r3, [r1, #17]
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80013a8:	f891 c00f 	ldrb.w	ip, [r1, #15]
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80013ac:	2b00      	cmp	r3, #0
                              ((uint32_t)macconf->JumboPacket << 16) |
 80013ae:	7c8e      	ldrb	r6, [r1, #18]
                                macconf->Speed |
                                  macconf->DuplexMode |
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80013b0:	7f0d      	ldrb	r5, [r1, #28]
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80013b2:	bf0c      	ite	eq
 80013b4:	f44f 3300 	moveq.w	r3, #131072	; 0x20000
 80013b8:	2300      	movne	r3, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80013ba:	f891 b01d 	ldrb.w	fp, [r1, #29]
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80013be:	9302      	str	r3, [sp, #8]
 80013c0:	694b      	ldr	r3, [r1, #20]
 80013c2:	431a      	orrs	r2, r3
 80013c4:	698b      	ldr	r3, [r1, #24]
 80013c6:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80013c8:	7f8a      	ldrb	r2, [r1, #30]
 80013ca:	2a00      	cmp	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80013cc:	7fca      	ldrb	r2, [r1, #31]
 80013ce:	9203      	str	r2, [sp, #12]
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80013d0:	bf08      	it	eq
 80013d2:	f44f 6780 	moveq.w	r7, #1024	; 0x400
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80013d6:	f891 2020 	ldrb.w	r2, [r1, #32]
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80013da:	bf18      	it	ne
 80013dc:	2700      	movne	r7, #0
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80013de:	2a00      	cmp	r2, #0
                                              macconf->BackOffLimit |
                                                ((uint32_t)macconf->DeferralCheck << 4)|
                                                  macconf->PreambleLength);

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80013e0:	6802      	ldr	r2, [r0, #0]
 80013e2:	6810      	ldr	r0, [r2, #0]
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80013e4:	bf0c      	ite	eq
 80013e6:	f44f 7480 	moveq.w	r4, #256	; 0x100
 80013ea:	2400      	movne	r4, #0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80013ec:	9000      	str	r0, [sp, #0]
 80013ee:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80013f0:	4303      	orrs	r3, r0
 80013f2:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 80013f4:	4303      	orrs	r3, r0
 80013f6:	9800      	ldr	r0, [sp, #0]
 80013f8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80013fc:	f420 007b 	bic.w	r0, r0, #16449536	; 0xfb0000
 8001400:	f420 40fe 	bic.w	r0, r0, #32512	; 0x7f00
 8001404:	f020 007c 	bic.w	r0, r0, #124	; 0x7c
 8001408:	4303      	orrs	r3, r0
 800140a:	9803      	ldr	r0, [sp, #12]
 800140c:	ea43 63ca 	orr.w	r3, r3, sl, lsl #27
 8001410:	ea43 53c9 	orr.w	r3, r3, r9, lsl #23
 8001414:	ea43 5388 	orr.w	r3, r3, r8, lsl #22
 8001418:	ea43 534e 	orr.w	r3, r3, lr, lsl #21
 800141c:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 8001420:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001424:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
 8001428:	ea43 23cb 	orr.w	r3, r3, fp, lsl #11
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 800142c:	f891 b028 	ldrb.w	fp, [r1, #40]	; 0x28
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001430:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
 8001434:	9801      	ldr	r0, [sp, #4]
 8001436:	ea43 130b 	orr.w	r3, r3, fp, lsl #4
 800143a:	4303      	orrs	r3, r0
 800143c:	9802      	ldr	r0, [sp, #8]
 800143e:	4303      	orrs	r3, r0
 8001440:	433b      	orrs	r3, r7
 8001442:	431c      	orrs	r4, r3
 8001444:	6014      	str	r4, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001446:	6bce      	ldr	r6, [r1, #60]	; 0x3c
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001448:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800144c:	f891 7038 	ldrb.w	r7, [r1, #56]	; 0x38
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001450:	2b00      	cmp	r3, #0
                       macconf->GiantPacketSizeLimit);

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001452:	6853      	ldr	r3, [r2, #4]
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001454:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001458:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800145c:	f891 4031 	ldrb.w	r4, [r1, #49]	; 0x31
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001460:	bf0c      	ite	eq
 8001462:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8001466:	2000      	movne	r0, #0
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001468:	f423 23ef 	bic.w	r3, r3, #489472	; 0x77800
 800146c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001470:	f023 0307 	bic.w	r3, r3, #7
 8001474:	ea43 6346 	orr.w	r3, r3, r6, lsl #25
 8001478:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 800147a:	4333      	orrs	r3, r6

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
               macconf->PauseLowThreshold |
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
                   (macconf->PauseTime << 16));
 800147c:	6c8e      	ldr	r6, [r1, #72]	; 0x48
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800147e:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 8001482:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
               macconf->PauseLowThreshold |
 8001486:	6d0d      	ldr	r5, [r1, #80]	; 0x50
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001488:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
 800148c:	4303      	orrs	r3, r0
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800148e:	6c48      	ldr	r0, [r1, #68]	; 0x44
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001490:	6053      	str	r3, [r2, #4]
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001492:	68d3      	ldr	r3, [r2, #12]
 8001494:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8001498:	f023 0301 	bic.w	r3, r3, #1
 800149c:	4303      	orrs	r3, r0
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800149e:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80014a2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80014a6:	60d3      	str	r3, [r2, #12]
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80014a8:	f891 304c 	ldrb.w	r3, [r1, #76]	; 0x4c
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80014ac:	f891 4054 	ldrb.w	r4, [r1, #84]	; 0x54
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80014b0:	2b00      	cmp	r3, #0

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80014b2:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80014b4:	f023 03f2 	bic.w	r3, r3, #242	; 0xf2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80014b8:	bf0c      	ite	eq
 80014ba:	2080      	moveq	r0, #128	; 0x80
 80014bc:	2000      	movne	r0, #0
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80014be:	041b      	lsls	r3, r3, #16
 80014c0:	0c1b      	lsrs	r3, r3, #16
 80014c2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80014c6:	432b      	orrs	r3, r5
  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80014c8:	6dcd      	ldr	r5, [r1, #92]	; 0x5c
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80014ca:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 80014ce:	4303      	orrs	r3, r0
 80014d0:	6713      	str	r3, [r2, #112]	; 0x70
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80014d2:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80014d6:	f891 3056 	ldrb.w	r3, [r1, #86]	; 0x56
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80014da:	f020 0003 	bic.w	r0, r0, #3
 80014de:	4303      	orrs	r3, r0
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80014e0:	f891 0055 	ldrb.w	r0, [r1, #85]	; 0x55
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80014e4:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80014e8:	6d88      	ldr	r0, [r1, #88]	; 0x58
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80014ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80014ee:	f8d2 3d00 	ldr.w	r3, [r2, #3328]	; 0xd00
 80014f2:	f023 0372 	bic.w	r3, r3, #114	; 0x72
 80014f6:	4303      	orrs	r3, r0
 80014f8:	f8c2 3d00 	str.w	r3, [r2, #3328]	; 0xd00
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80014fc:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001500:	f891 4061 	ldrb.w	r4, [r1, #97]	; 0x61
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001504:	2b00      	cmp	r3, #0
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001506:	f8d2 3d30 	ldr.w	r3, [r2, #3376]	; 0xd30
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800150a:	f891 1062 	ldrb.w	r1, [r1, #98]	; 0x62
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800150e:	f023 037b 	bic.w	r3, r3, #123	; 0x7b
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001512:	bf0c      	ite	eq
 8001514:	2040      	moveq	r0, #64	; 0x40
 8001516:	2000      	movne	r0, #0
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001518:	432b      	orrs	r3, r5
 800151a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800151e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001522:	4303      	orrs	r3, r0
 8001524:	f8c2 3d30 	str.w	r3, [r2, #3376]	; 0xd30
}
 8001528:	b005      	add	sp, #20
 800152a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001530 <ETH_SetDMAConfig>:
static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001530:	6802      	ldr	r2, [r0, #0]
 8001532:	f502 5080 	add.w	r0, r2, #4096	; 0x1000
 8001536:	6803      	ldr	r3, [r0, #0]
 8001538:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
{
 800153c:	b530      	push	{r4, r5, lr}
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800153e:	f023 0302 	bic.w	r3, r3, #2
 8001542:	680c      	ldr	r4, [r1, #0]
 8001544:	4323      	orrs	r3, r4
  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
               dmaconf->BurstMode |
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001546:	f241 0404 	movw	r4, #4100	; 0x1004
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800154a:	6003      	str	r3, [r0, #0]
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800154c:	7b0b      	ldrb	r3, [r1, #12]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800154e:	5910      	ldr	r0, [r2, r4]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001550:	790d      	ldrb	r5, [r1, #4]
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001552:	03db      	lsls	r3, r3, #15
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001554:	f420 4050 	bic.w	r0, r0, #53248	; 0xd000
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001558:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
 800155c:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800155e:	f020 0001 	bic.w	r0, r0, #1
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001562:	432b      	orrs	r3, r5
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001564:	4303      	orrs	r3, r0
 8001566:	5113      	str	r3, [r2, r4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
               dmaconf->MaximumSegmentSize);

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001568:	f502 5488 	add.w	r4, r2, #4352	; 0x1100
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800156c:	7b48      	ldrb	r0, [r1, #13]
 800156e:	6a0b      	ldr	r3, [r1, #32]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001570:	6825      	ldr	r5, [r4, #0]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001572:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001576:	4810      	ldr	r0, [pc, #64]	; (80015b8 <ETH_SetDMAConfig+0x88>)
 8001578:	4028      	ands	r0, r5
 800157a:	4303      	orrs	r3, r0
 800157c:	6023      	str	r3, [r4, #0]
  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
                 ((uint32_t)dmaconf->TCPSegmentation << 12));

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800157e:	f241 1404 	movw	r4, #4356	; 0x1104
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001582:	7f4b      	ldrb	r3, [r1, #29]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001584:	7d08      	ldrb	r0, [r1, #20]
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001586:	031b      	lsls	r3, r3, #12
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001588:	5915      	ldr	r5, [r2, r4]
  dmaregval = (dmaconf->TxDMABurstLength |
 800158a:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800158e:	6908      	ldr	r0, [r1, #16]
 8001590:	4303      	orrs	r3, r0
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001592:	480a      	ldr	r0, [pc, #40]	; (80015bc <ETH_SetDMAConfig+0x8c>)
 8001594:	4028      	ands	r0, r5
 8001596:	4303      	orrs	r3, r0
 8001598:	5113      	str	r3, [r2, r4]
  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
               dmaconf->RxDMABurstLength);

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800159a:	f241 1408 	movw	r4, #4360	; 0x1108
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800159e:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80015a0:	5910      	ldr	r0, [r2, r4]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80015a2:	698b      	ldr	r3, [r1, #24]
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80015a4:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80015a8:	ea43 73c5 	orr.w	r3, r3, r5, lsl #31
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80015ac:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 80015b0:	430b      	orrs	r3, r1
 80015b2:	5113      	str	r3, [r2, r4]
}
 80015b4:	bd30      	pop	{r4, r5, pc}
 80015b6:	bf00      	nop
 80015b8:	fffec000 	.word	0xfffec000
 80015bc:	ffc0efef 	.word	0xffc0efef

080015c0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80015c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80015c4:	f8d0 e028 	ldr.w	lr, [r0, #40]	; 0x28
{
 80015c8:	b085      	sub	sp, #20
 80015ca:	eb00 038e 	add.w	r3, r0, lr, lsl #2
 80015ce:	9202      	str	r2, [sp, #8]
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
  uint32_t descnbr = 0, idx;
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80015d0:	699a      	ldr	r2, [r3, #24]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
  uint32_t           bd_count = 0;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80015d2:	68d4      	ldr	r4, [r2, #12]
 80015d4:	2c00      	cmp	r4, #0
 80015d6:	da03      	bge.n	80015e0 <ETH_Prepare_Tx_Descriptors+0x20>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);

      return HAL_ETH_ERROR_BUSY;
 80015d8:	2002      	movs	r0, #2
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
}
 80015da:	b005      	add	sp, #20
 80015dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80015e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f8      	bne.n	80015d8 <ETH_Prepare_Tx_Descriptors+0x18>
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80015e6:	680d      	ldr	r5, [r1, #0]
  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80015e8:	688f      	ldr	r7, [r1, #8]
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80015ea:	f015 0c04 	ands.w	ip, r5, #4
 80015ee:	d028      	beq.n	8001642 <ETH_Prepare_Tx_Descriptors+0x82>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80015f0:	68d4      	ldr	r4, [r2, #12]
 80015f2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80015f4:	0c24      	lsrs	r4, r4, #16
 80015f6:	0424      	lsls	r4, r4, #16
 80015f8:	4323      	orrs	r3, r4
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80015fa:	6804      	ldr	r4, [r0, #0]
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80015fc:	60d3      	str	r3, [r2, #12]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80015fe:	68d3      	ldr	r3, [r2, #12]
 8001600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001604:	60d3      	str	r3, [r2, #12]
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8001606:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001608:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800160c:	6623      	str	r3, [r4, #96]	; 0x60
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 800160e:	072b      	lsls	r3, r5, #28
 8001610:	d517      	bpl.n	8001642 <ETH_Prepare_Tx_Descriptors+0x82>
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8001612:	6896      	ldr	r6, [r2, #8]
 8001614:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001616:	b2b6      	uxth	r6, r6
 8001618:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 800161c:	6093      	str	r3, [r2, #8]
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 800161e:	68d3      	ldr	r3, [r2, #12]
 8001620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001624:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8001626:	68d6      	ldr	r6, [r2, #12]
 8001628:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800162a:	f426 2640 	bic.w	r6, r6, #786432	; 0xc0000
 800162e:	4333      	orrs	r3, r6
 8001630:	60d3      	str	r3, [r2, #12]
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8001632:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001638:	6663      	str	r3, [r4, #100]	; 0x64
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800163a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800163c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001640:	6523      	str	r3, [r4, #80]	; 0x50
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8001642:	f015 0910 	ands.w	r9, r5, #16
 8001646:	d00b      	beq.n	8001660 <ETH_Prepare_Tx_Descriptors+0xa0>
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8001648:	6894      	ldr	r4, [r2, #8]
 800164a:	698b      	ldr	r3, [r1, #24]
 800164c:	f424 547f 	bic.w	r4, r4, #16320	; 0x3fc0
 8001650:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 8001654:	4323      	orrs	r3, r4
 8001656:	6093      	str	r3, [r2, #8]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8001658:	68d3      	ldr	r3, [r2, #12]
 800165a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800165e:	60d3      	str	r3, [r2, #12]
  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8001660:	f015 0414 	ands.w	r4, r5, #20
 8001664:	d018      	beq.n	8001698 <ETH_Prepare_Tx_Descriptors+0xd8>
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8001666:	68d3      	ldr	r3, [r2, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 8001668:	f10e 0601 	add.w	r6, lr, #1
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 800166c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    INCR_TX_DESC_INDEX(descidx, 1U);
 8001670:	2e03      	cmp	r6, #3
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8001672:	60d3      	str	r3, [r2, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 8001674:	bf88      	it	hi
 8001676:	f1ae 0603 	subhi.w	r6, lr, #3
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800167a:	68d3      	ldr	r3, [r2, #12]
 800167c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001680:	60d3      	str	r3, [r2, #12]
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001682:	eb00 0386 	add.w	r3, r0, r6, lsl #2
 8001686:	699b      	ldr	r3, [r3, #24]
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8001688:	68dc      	ldr	r4, [r3, #12]
 800168a:	2c00      	cmp	r4, #0
 800168c:	da7e      	bge.n	800178c <ETH_Prepare_Tx_Descriptors+0x1cc>
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800168e:	68d3      	ldr	r3, [r2, #12]
 8001690:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001694:	60d3      	str	r3, [r2, #12]
 8001696:	e79f      	b.n	80015d8 <ETH_Prepare_Tx_Descriptors+0x18>
 8001698:	4613      	mov	r3, r2
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800169a:	4676      	mov	r6, lr
  descnbr += 1U;
 800169c:	3401      	adds	r4, #1
 800169e:	9401      	str	r4, [sp, #4]
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80016a0:	683c      	ldr	r4, [r7, #0]
 80016a2:	601c      	str	r4, [r3, #0]
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80016a4:	689c      	ldr	r4, [r3, #8]
 80016a6:	f424 587f 	bic.w	r8, r4, #16320	; 0x3fc0
 80016aa:	687c      	ldr	r4, [r7, #4]
 80016ac:	f028 083f 	bic.w	r8, r8, #63	; 0x3f
 80016b0:	ea48 0404 	orr.w	r4, r8, r4
 80016b4:	f8df 8200 	ldr.w	r8, [pc, #512]	; 80018b8 <ETH_Prepare_Tx_Descriptors+0x2f8>
 80016b8:	609c      	str	r4, [r3, #8]
  if(txbuffer->next != NULL)
 80016ba:	68bc      	ldr	r4, [r7, #8]
 80016bc:	2c00      	cmp	r4, #0
 80016be:	d067      	beq.n	8001790 <ETH_Prepare_Tx_Descriptors+0x1d0>
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80016c0:	6827      	ldr	r7, [r4, #0]
 80016c2:	605f      	str	r7, [r3, #4]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80016c4:	689f      	ldr	r7, [r3, #8]
 80016c6:	ea07 0808 	and.w	r8, r7, r8
 80016ca:	6867      	ldr	r7, [r4, #4]
 80016cc:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80016d0:	609f      	str	r7, [r3, #8]
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80016d2:	68df      	ldr	r7, [r3, #12]
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80016d4:	f1b9 0f00 	cmp.w	r9, #0
 80016d8:	d061      	beq.n	800179e <ETH_Prepare_Tx_Descriptors+0x1de>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80016da:	f427 08f0 	bic.w	r8, r7, #7864320	; 0x780000
 80016de:	6a0f      	ldr	r7, [r1, #32]
 80016e0:	ea48 47c7 	orr.w	r7, r8, r7, lsl #19
 80016e4:	60df      	str	r7, [r3, #12]
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80016e6:	68df      	ldr	r7, [r3, #12]
 80016e8:	ea4f 4897 	mov.w	r8, r7, lsr #18
 80016ec:	69cf      	ldr	r7, [r1, #28]
 80016ee:	ea4f 4888 	mov.w	r8, r8, lsl #18
 80016f2:	ea48 0707 	orr.w	r7, r8, r7
 80016f6:	60df      	str	r7, [r3, #12]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80016f8:	68df      	ldr	r7, [r3, #12]
 80016fa:	f447 2780 	orr.w	r7, r7, #262144	; 0x40000
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80016fe:	60df      	str	r7, [r3, #12]
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8001700:	f1bc 0f00 	cmp.w	ip, #0
 8001704:	d006      	beq.n	8001714 <ETH_Prepare_Tx_Descriptors+0x154>
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8001706:	689f      	ldr	r7, [r3, #8]
 8001708:	f427 4c40 	bic.w	ip, r7, #49152	; 0xc000
 800170c:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 800170e:	ea4c 0707 	orr.w	r7, ip, r7
 8001712:	609f      	str	r7, [r3, #8]
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8001714:	68df      	ldr	r7, [r3, #12]
 8001716:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 800171a:	60df      	str	r7, [r3, #12]
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800171c:	68df      	ldr	r7, [r3, #12]
 800171e:	f027 4780 	bic.w	r7, r7, #1073741824	; 0x40000000
 8001722:	60df      	str	r7, [r3, #12]
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8001724:	68df      	ldr	r7, [r3, #12]
 8001726:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 800172a:	60df      	str	r7, [r3, #12]
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 800172c:	07af      	lsls	r7, r5, #30
 800172e:	d506      	bpl.n	800173e <ETH_Prepare_Tx_Descriptors+0x17e>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8001730:	68df      	ldr	r7, [r3, #12]
 8001732:	f027 7c60 	bic.w	ip, r7, #58720256	; 0x3800000
 8001736:	68cf      	ldr	r7, [r1, #12]
 8001738:	ea4c 0707 	orr.w	r7, ip, r7
 800173c:	60df      	str	r7, [r3, #12]
      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800173e:	f005 0501 	and.w	r5, r5, #1
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8001742:	2700      	movs	r7, #0
 8001744:	f8df 8170 	ldr.w	r8, [pc, #368]	; 80018b8 <ETH_Prepare_Tx_Descriptors+0x2f8>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8001748:	f8df a170 	ldr.w	sl, [pc, #368]	; 80018bc <ETH_Prepare_Tx_Descriptors+0x2fc>
      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800174c:	9503      	str	r5, [sp, #12]
 800174e:	9d01      	ldr	r5, [sp, #4]
 8001750:	eb07 0b05 	add.w	fp, r7, r5
  while (txbuffer->next != NULL)
 8001754:	68a5      	ldr	r5, [r4, #8]
 8001756:	2d00      	cmp	r5, #0
 8001758:	d13b      	bne.n	80017d2 <ETH_Prepare_Tx_Descriptors+0x212>
  if(ItMode != ((uint32_t)RESET))
 800175a:	9a02      	ldr	r2, [sp, #8]
 800175c:	2a00      	cmp	r2, #0
 800175e:	f000 80a7 	beq.w	80018b0 <ETH_Prepare_Tx_Descriptors+0x2f0>
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8001768:	609a      	str	r2, [r3, #8]
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800176a:	68da      	ldr	r2, [r3, #12]
 800176c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001770:	60da      	str	r2, [r3, #12]
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8001772:	eb00 0386 	add.w	r3, r0, r6, lsl #2
 8001776:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001778:	62da      	str	r2, [r3, #44]	; 0x2c
  dmatxdesclist->CurTxDesc = descidx;
 800177a:	6286      	str	r6, [r0, #40]	; 0x28
  __ASM volatile ("cpsid i" : : : "memory");
 800177c:	b672      	cpsid	i
  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800177e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001780:	3301      	adds	r3, #1
 8001782:	441f      	add	r7, r3
 8001784:	6407      	str	r7, [r0, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001786:	b662      	cpsie	i
  return HAL_ETH_ERROR_NONE;
 8001788:	2000      	movs	r0, #0
 800178a:	e726      	b.n	80015da <ETH_Prepare_Tx_Descriptors+0x1a>
    descnbr += 1U;
 800178c:	2401      	movs	r4, #1
 800178e:	e785      	b.n	800169c <ETH_Prepare_Tx_Descriptors+0xdc>
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001790:	605c      	str	r4, [r3, #4]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8001792:	689c      	ldr	r4, [r3, #8]
 8001794:	ea04 0408 	and.w	r4, r4, r8
 8001798:	609c      	str	r4, [r3, #8]
 800179a:	463c      	mov	r4, r7
 800179c:	e799      	b.n	80016d2 <ETH_Prepare_Tx_Descriptors+0x112>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800179e:	f427 48ff 	bic.w	r8, r7, #32640	; 0x7f80
 80017a2:	684f      	ldr	r7, [r1, #4]
 80017a4:	f028 087f 	bic.w	r8, r8, #127	; 0x7f
 80017a8:	ea48 0707 	orr.w	r7, r8, r7
 80017ac:	60df      	str	r7, [r3, #12]
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80017ae:	07ef      	lsls	r7, r5, #31
 80017b0:	d506      	bpl.n	80017c0 <ETH_Prepare_Tx_Descriptors+0x200>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80017b2:	68df      	ldr	r7, [r3, #12]
 80017b4:	f427 3840 	bic.w	r8, r7, #196608	; 0x30000
 80017b8:	694f      	ldr	r7, [r1, #20]
 80017ba:	ea48 0707 	orr.w	r7, r8, r7
 80017be:	60df      	str	r7, [r3, #12]
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80017c0:	06af      	lsls	r7, r5, #26
 80017c2:	d59d      	bpl.n	8001700 <ETH_Prepare_Tx_Descriptors+0x140>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80017c4:	68df      	ldr	r7, [r3, #12]
 80017c6:	f027 6840 	bic.w	r8, r7, #201326592	; 0xc000000
 80017ca:	690f      	ldr	r7, [r1, #16]
 80017cc:	ea48 0707 	orr.w	r7, r8, r7
 80017d0:	e795      	b.n	80016fe <ETH_Prepare_Tx_Descriptors+0x13e>
    INCR_TX_DESC_INDEX(descidx, 1U);
 80017d2:	f106 0c01 	add.w	ip, r6, #1
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80017d6:	68dc      	ldr	r4, [r3, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 80017d8:	f1bc 0f03 	cmp.w	ip, #3
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80017dc:	f024 5480 	bic.w	r4, r4, #268435456	; 0x10000000
    INCR_TX_DESC_INDEX(descidx, 1U);
 80017e0:	bf88      	it	hi
 80017e2:	f1a6 0c03 	subhi.w	ip, r6, #3
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80017e6:	60dc      	str	r4, [r3, #12]
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80017e8:	eb00 068c 	add.w	r6, r0, ip, lsl #2
 80017ec:	69b3      	ldr	r3, [r6, #24]
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80017ee:	68dc      	ldr	r4, [r3, #12]
 80017f0:	f024 5400 	bic.w	r4, r4, #536870912	; 0x20000000
 80017f4:	60dc      	str	r4, [r3, #12]
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80017f6:	68dc      	ldr	r4, [r3, #12]
 80017f8:	2c00      	cmp	r4, #0
 80017fa:	db01      	blt.n	8001800 <ETH_Prepare_Tx_Descriptors+0x240>
 80017fc:	6af4      	ldr	r4, [r6, #44]	; 0x2c
 80017fe:	b19c      	cbz	r4, 8001828 <ETH_Prepare_Tx_Descriptors+0x268>
 8001800:	2300      	movs	r3, #0
 8001802:	e00e      	b.n	8001822 <ETH_Prepare_Tx_Descriptors+0x262>
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8001804:	68d1      	ldr	r1, [r2, #12]
      for(idx = 0; idx < descnbr; idx ++)
 8001806:	3301      	adds	r3, #1
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8001808:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800180c:	60d1      	str	r1, [r2, #12]
        INCR_TX_DESC_INDEX(descidx, 1U);
 800180e:	f10e 0101 	add.w	r1, lr, #1
 8001812:	2903      	cmp	r1, #3
 8001814:	bf88      	it	hi
 8001816:	f1ae 0103 	subhi.w	r1, lr, #3
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800181a:	eb00 0281 	add.w	r2, r0, r1, lsl #2
      for(idx = 0; idx < descnbr; idx ++)
 800181e:	468e      	mov	lr, r1
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001820:	6992      	ldr	r2, [r2, #24]
      for(idx = 0; idx < descnbr; idx ++)
 8001822:	459b      	cmp	fp, r3
 8001824:	d1ee      	bne.n	8001804 <ETH_Prepare_Tx_Descriptors+0x244>
 8001826:	e6d7      	b.n	80015d8 <ETH_Prepare_Tx_Descriptors+0x18>
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8001828:	682c      	ldr	r4, [r5, #0]
 800182a:	601c      	str	r4, [r3, #0]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800182c:	689e      	ldr	r6, [r3, #8]
 800182e:	686c      	ldr	r4, [r5, #4]
 8001830:	f426 567f 	bic.w	r6, r6, #16320	; 0x3fc0
 8001834:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 8001838:	4334      	orrs	r4, r6
 800183a:	609c      	str	r4, [r3, #8]
    if (txbuffer->next != NULL)
 800183c:	68ac      	ldr	r4, [r5, #8]
 800183e:	b304      	cbz	r4, 8001882 <ETH_Prepare_Tx_Descriptors+0x2c2>
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8001840:	6825      	ldr	r5, [r4, #0]
 8001842:	605d      	str	r5, [r3, #4]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8001844:	689e      	ldr	r6, [r3, #8]
 8001846:	6865      	ldr	r5, [r4, #4]
 8001848:	ea06 0608 	and.w	r6, r6, r8
 800184c:	ea46 4505 	orr.w	r5, r6, r5, lsl #16
 8001850:	609d      	str	r5, [r3, #8]
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8001852:	68de      	ldr	r6, [r3, #12]
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8001854:	f1b9 0f00 	cmp.w	r9, #0
 8001858:	d01a      	beq.n	8001890 <ETH_Prepare_Tx_Descriptors+0x2d0>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800185a:	69cd      	ldr	r5, [r1, #28]
 800185c:	ea06 060a 	and.w	r6, r6, sl
 8001860:	4335      	orrs	r5, r6
 8001862:	60dd      	str	r5, [r3, #12]
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8001864:	68dd      	ldr	r5, [r3, #12]
 8001866:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800186a:	60dd      	str	r5, [r3, #12]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800186c:	68dd      	ldr	r5, [r3, #12]
    bd_count += 1U;
 800186e:	3701      	adds	r7, #1
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8001870:	4666      	mov	r6, ip
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8001872:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8001876:	60dd      	str	r5, [r3, #12]
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8001878:	68dd      	ldr	r5, [r3, #12]
 800187a:	f025 4580 	bic.w	r5, r5, #1073741824	; 0x40000000
 800187e:	60dd      	str	r5, [r3, #12]
 8001880:	e765      	b.n	800174e <ETH_Prepare_Tx_Descriptors+0x18e>
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001882:	605c      	str	r4, [r3, #4]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8001884:	689c      	ldr	r4, [r3, #8]
 8001886:	ea04 0408 	and.w	r4, r4, r8
 800188a:	609c      	str	r4, [r3, #8]
 800188c:	462c      	mov	r4, r5
 800188e:	e7e0      	b.n	8001852 <ETH_Prepare_Tx_Descriptors+0x292>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8001890:	f426 46ff 	bic.w	r6, r6, #32640	; 0x7f80
 8001894:	684d      	ldr	r5, [r1, #4]
 8001896:	f026 067f 	bic.w	r6, r6, #127	; 0x7f
 800189a:	4335      	orrs	r5, r6
 800189c:	60dd      	str	r5, [r3, #12]
      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800189e:	9d03      	ldr	r5, [sp, #12]
 80018a0:	2d00      	cmp	r5, #0
 80018a2:	d0e3      	beq.n	800186c <ETH_Prepare_Tx_Descriptors+0x2ac>
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80018a4:	68de      	ldr	r6, [r3, #12]
 80018a6:	694d      	ldr	r5, [r1, #20]
 80018a8:	f426 3640 	bic.w	r6, r6, #196608	; 0x30000
 80018ac:	4335      	orrs	r5, r6
 80018ae:	e7dc      	b.n	800186a <ETH_Prepare_Tx_Descriptors+0x2aa>
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80018b0:	689a      	ldr	r2, [r3, #8]
 80018b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018b6:	e757      	b.n	8001768 <ETH_Prepare_Tx_Descriptors+0x1a8>
 80018b8:	c000ffff 	.word	0xc000ffff
 80018bc:	fffc0000 	.word	0xfffc0000

080018c0 <HAL_ETH_DescAssignMemory>:
  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 80018c0:	b10a      	cbz	r2, 80018c6 <HAL_ETH_DescAssignMemory+0x6>
 80018c2:	2903      	cmp	r1, #3
 80018c4:	d903      	bls.n	80018ce <HAL_ETH_DescAssignMemory+0xe>
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80018c6:	2301      	movs	r3, #1
 80018c8:	6743      	str	r3, [r0, #116]	; 0x74
    return HAL_ERROR;
 80018ca:	4618      	mov	r0, r3
 80018cc:	4770      	bx	lr
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 80018ce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80018d2:	6c49      	ldr	r1, [r1, #68]	; 0x44
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 80018d4:	600a      	str	r2, [r1, #0]
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 80018d6:	610a      	str	r2, [r1, #16]
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80018d8:	68ca      	ldr	r2, [r1, #12]
 80018da:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80018de:	60ca      	str	r2, [r1, #12]
  if(pBuffer2 != NULL)
 80018e0:	b12b      	cbz	r3, 80018ee <HAL_ETH_DescAssignMemory+0x2e>
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 80018e2:	608b      	str	r3, [r1, #8]
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 80018e4:	614b      	str	r3, [r1, #20]
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80018e6:	68cb      	ldr	r3, [r1, #12]
 80018e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018ec:	60cb      	str	r3, [r1, #12]
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80018ee:	68cb      	ldr	r3, [r1, #12]
  return HAL_OK;
 80018f0:	2000      	movs	r0, #0
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80018f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018f6:	60cb      	str	r3, [r1, #12]
}
 80018f8:	4770      	bx	lr

080018fa <HAL_ETH_Start_IT>:
  if(heth->gState == HAL_ETH_STATE_READY)
 80018fa:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80018fc:	2b10      	cmp	r3, #16
{
 80018fe:	b510      	push	{r4, lr}
  if(heth->gState == HAL_ETH_STATE_READY)
 8001900:	d13e      	bne.n	8001980 <HAL_ETH_Start_IT+0x86>
    heth->gState = HAL_ETH_STATE_BUSY;
 8001902:	2323      	movs	r3, #35	; 0x23
 8001904:	f100 0454 	add.w	r4, r0, #84	; 0x54
 8001908:	66c3      	str	r3, [r0, #108]	; 0x6c
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800190a:	f100 0344 	add.w	r3, r0, #68	; 0x44
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800190e:	f853 1b04 	ldr.w	r1, [r3], #4
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001912:	68ca      	ldr	r2, [r1, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001914:	42a3      	cmp	r3, r4
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001916:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800191a:	60ca      	str	r2, [r1, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800191c:	d1f7      	bne.n	800190e <HAL_ETH_Start_IT+0x14>
    heth->RxDescList.ItMode = 1U;
 800191e:	2301      	movs	r3, #1
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001920:	f241 1104 	movw	r1, #4356	; 0x1104
    heth->RxDescList.ItMode = 1U;
 8001924:	6643      	str	r3, [r0, #100]	; 0x64
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001926:	6803      	ldr	r3, [r0, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	f042 0202 	orr.w	r2, r2, #2
 800192e:	601a      	str	r2, [r3, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	f042 0201 	orr.w	r2, r2, #1
 8001936:	601a      	str	r2, [r3, #0]
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001938:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800193c:	f042 0201 	orr.w	r2, r2, #1
 8001940:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001944:	585a      	ldr	r2, [r3, r1]
 8001946:	f042 0201 	orr.w	r2, r2, #1
 800194a:	505a      	str	r2, [r3, r1]
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800194c:	f241 1108 	movw	r1, #4360	; 0x1108
 8001950:	585a      	ldr	r2, [r3, r1]
 8001952:	f042 0201 	orr.w	r2, r2, #1
 8001956:	505a      	str	r2, [r3, r1]
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001958:	f503 518b 	add.w	r1, r3, #4448	; 0x1160
 800195c:	680a      	ldr	r2, [r1, #0]
 800195e:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8001962:	600a      	str	r2, [r1, #0]
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001964:	f241 1134 	movw	r1, #4404	; 0x1134
 8001968:	585a      	ldr	r2, [r3, r1]
 800196a:	f442 4250 	orr.w	r2, r2, #53248	; 0xd000
 800196e:	f042 0241 	orr.w	r2, r2, #65	; 0x41
 8001972:	505a      	str	r2, [r3, r1]
    heth->gState = HAL_ETH_STATE_READY;
 8001974:	2310      	movs	r3, #16
 8001976:	66c3      	str	r3, [r0, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8001978:	2322      	movs	r3, #34	; 0x22
 800197a:	6703      	str	r3, [r0, #112]	; 0x70
    return HAL_OK;
 800197c:	2000      	movs	r0, #0
}
 800197e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001980:	2001      	movs	r0, #1
 8001982:	e7fc      	b.n	800197e <HAL_ETH_Start_IT+0x84>

08001984 <HAL_ETH_Stop_IT>:
  if(heth->gState != HAL_ETH_STATE_RESET)
 8001984:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
 8001986:	b510      	push	{r4, lr}
  if(heth->gState != HAL_ETH_STATE_RESET)
 8001988:	2b00      	cmp	r3, #0
 800198a:	d037      	beq.n	80019fc <HAL_ETH_Stop_IT+0x78>
    heth->gState = HAL_ETH_STATE_BUSY;
 800198c:	2323      	movs	r3, #35	; 0x23
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800198e:	4602      	mov	r2, r0
 8001990:	f241 1434 	movw	r4, #4404	; 0x1134
    heth->gState = HAL_ETH_STATE_BUSY;
 8001994:	66c3      	str	r3, [r0, #108]	; 0x6c
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001996:	f852 3b44 	ldr.w	r3, [r2], #68
 800199a:	5919      	ldr	r1, [r3, r4]
 800199c:	f421 4150 	bic.w	r1, r1, #53248	; 0xd000
 80019a0:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 80019a4:	5119      	str	r1, [r3, r4]
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80019a6:	f241 1404 	movw	r4, #4356	; 0x1104
 80019aa:	5919      	ldr	r1, [r3, r4]
 80019ac:	f021 0101 	bic.w	r1, r1, #1
 80019b0:	5119      	str	r1, [r3, r4]
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80019b2:	f241 1408 	movw	r4, #4360	; 0x1108
 80019b6:	5919      	ldr	r1, [r3, r4]
 80019b8:	f021 0101 	bic.w	r1, r1, #1
 80019bc:	5119      	str	r1, [r3, r4]
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 80019be:	f100 0454 	add.w	r4, r0, #84	; 0x54
 80019c2:	6819      	ldr	r1, [r3, #0]
 80019c4:	f021 0101 	bic.w	r1, r1, #1
 80019c8:	6019      	str	r1, [r3, #0]
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80019ca:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 80019ce:	f041 0101 	orr.w	r1, r1, #1
 80019d2:	f8c3 1d00 	str.w	r1, [r3, #3328]	; 0xd00
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80019d6:	6819      	ldr	r1, [r3, #0]
 80019d8:	f021 0102 	bic.w	r1, r1, #2
 80019dc:	6019      	str	r1, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80019de:	f852 1b04 	ldr.w	r1, [r2], #4
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80019e2:	68cb      	ldr	r3, [r1, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80019e4:	42a2      	cmp	r2, r4
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80019e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80019ea:	60cb      	str	r3, [r1, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80019ec:	d1f7      	bne.n	80019de <HAL_ETH_Stop_IT+0x5a>
    heth->RxDescList.ItMode = 0U;
 80019ee:	2300      	movs	r3, #0
    heth->gState = HAL_ETH_STATE_READY;
 80019f0:	2210      	movs	r2, #16
    heth->RxDescList.ItMode = 0U;
 80019f2:	6643      	str	r3, [r0, #100]	; 0x64
    heth->gState = HAL_ETH_STATE_READY;
 80019f4:	66c2      	str	r2, [r0, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 80019f6:	6702      	str	r2, [r0, #112]	; 0x70
    return HAL_OK;
 80019f8:	4618      	mov	r0, r3
}
 80019fa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80019fc:	2001      	movs	r0, #1
 80019fe:	e7fc      	b.n	80019fa <HAL_ETH_Stop_IT+0x76>

08001a00 <HAL_ETH_Transmit>:
{
 8001a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a02:	4604      	mov	r4, r0
 8001a04:	4615      	mov	r5, r2
  if(pTxConfig == NULL)
 8001a06:	b929      	cbnz	r1, 8001a14 <HAL_ETH_Transmit+0x14>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001a08:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001a0e:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_ERROR;
 8001a10:	2001      	movs	r0, #1
 8001a12:	e023      	b.n	8001a5c <HAL_ETH_Transmit+0x5c>
  if(heth->gState == HAL_ETH_STATE_READY)
 8001a14:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8001a16:	2b10      	cmp	r3, #16
 8001a18:	d1fa      	bne.n	8001a10 <HAL_ETH_Transmit+0x10>
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f7ff fdd0 	bl	80015c0 <ETH_Prepare_Tx_Descriptors>
 8001a20:	b118      	cbz	r0, 8001a2a <HAL_ETH_Transmit+0x2a>
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001a22:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8001a24:	f043 0302 	orr.w	r3, r3, #2
 8001a28:	e7f1      	b.n	8001a0e <HAL_ETH_Transmit+0xe>
    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001a2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a2c:	1d9a      	adds	r2, r3, #6
 8001a2e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001a32:	1c5a      	adds	r2, r3, #1
 8001a34:	2a03      	cmp	r2, #3
 8001a36:	bf8a      	itet	hi
 8001a38:	3b03      	subhi	r3, #3
 8001a3a:	62a2      	strls	r2, [r4, #40]	; 0x28
 8001a3c:	62a3      	strhi	r3, [r4, #40]	; 0x28
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001a3e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001a40:	6823      	ldr	r3, [r4, #0]
 8001a42:	3206      	adds	r2, #6
 8001a44:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001a48:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8001a4c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001a4e:	f7ff fbe3 	bl	8001218 <HAL_GetTick>
 8001a52:	4606      	mov	r6, r0
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	db01      	blt.n	8001a5e <HAL_ETH_Transmit+0x5e>
    return HAL_OK;
 8001a5a:	2000      	movs	r0, #0
}
 8001a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8001a5e:	6823      	ldr	r3, [r4, #0]
 8001a60:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	04d2      	lsls	r2, r2, #19
 8001a68:	d508      	bpl.n	8001a7c <HAL_ETH_Transmit+0x7c>
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001a6a:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8001a6c:	f042 0208 	orr.w	r2, r2, #8
 8001a70:	6762      	str	r2, [r4, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	67a3      	str	r3, [r4, #120]	; 0x78
          heth->gState = HAL_ETH_STATE_ERROR;
 8001a76:	23e0      	movs	r3, #224	; 0xe0
 8001a78:	66e3      	str	r3, [r4, #108]	; 0x6c
          return HAL_ERROR;
 8001a7a:	e7c9      	b.n	8001a10 <HAL_ETH_Transmit+0x10>
      if(Timeout != HAL_MAX_DELAY)
 8001a7c:	1c6b      	adds	r3, r5, #1
 8001a7e:	d0e9      	beq.n	8001a54 <HAL_ETH_Transmit+0x54>
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8001a80:	f7ff fbca 	bl	8001218 <HAL_GetTick>
 8001a84:	1b80      	subs	r0, r0, r6
 8001a86:	42a8      	cmp	r0, r5
 8001a88:	d801      	bhi.n	8001a8e <HAL_ETH_Transmit+0x8e>
 8001a8a:	2d00      	cmp	r5, #0
 8001a8c:	d1e2      	bne.n	8001a54 <HAL_ETH_Transmit+0x54>
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001a8e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8001a90:	f043 0304 	orr.w	r3, r3, #4
 8001a94:	6763      	str	r3, [r4, #116]	; 0x74
 8001a96:	e7ee      	b.n	8001a76 <HAL_ETH_Transmit+0x76>

08001a98 <HAL_ETH_IsRxDataAvailable>:
{
 8001a98:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(dmarxdesclist->AppDescNbr != 0U)
 8001a9a:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8001a9c:	2d00      	cmp	r5, #0
 8001a9e:	d13b      	bne.n	8001b18 <HAL_ETH_IsRxDataAvailable+0x80>
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8001aa0:	6d41      	ldr	r1, [r0, #84]	; 0x54
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8001aa2:	462a      	mov	r2, r5
 8001aa4:	462c      	mov	r4, r5
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001aa6:	2705      	movs	r7, #5
 8001aa8:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8001aac:	6c5e      	ldr	r6, [r3, #68]	; 0x44
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8001aae:	68f3      	ldr	r3, [r6, #12]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	db01      	blt.n	8001ab8 <HAL_ETH_IsRxDataAvailable+0x20>
 8001ab4:	3f01      	subs	r7, #1
 8001ab6:	d131      	bne.n	8001b1c <HAL_ETH_IsRxDataAvailable+0x84>
  if(appdesccnt > 0U)
 8001ab8:	b364      	cbz	r4, 8001b14 <HAL_ETH_IsRxDataAvailable+0x7c>
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001aba:	eb00 0382 	add.w	r3, r0, r2, lsl #2
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001abe:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
      if(descscancnt < (appdesccnt - 1U))
 8001ac2:	1e67      	subs	r7, r4, #1
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 8001ac6:	e9c0 1215 	strd	r1, r2, [r0, #84]	; 0x54
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8001aca:	6919      	ldr	r1, [r3, #16]
 8001acc:	6019      	str	r1, [r3, #0]
      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8001ace:	6959      	ldr	r1, [r3, #20]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001ad0:	60de      	str	r6, [r3, #12]
      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8001ad2:	b121      	cbz	r1, 8001ade <HAL_ETH_IsRxDataAvailable+0x46>
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8001ad4:	6099      	str	r1, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001ad6:	68d9      	ldr	r1, [r3, #12]
 8001ad8:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8001adc:	60d9      	str	r1, [r3, #12]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001ade:	68d9      	ldr	r1, [r3, #12]
 8001ae0:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8001ae4:	60d9      	str	r1, [r3, #12]
      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8001ae6:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8001ae8:	b119      	cbz	r1, 8001af2 <HAL_ETH_IsRxDataAvailable+0x5a>
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001aea:	68d9      	ldr	r1, [r3, #12]
 8001aec:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8001af0:	60d9      	str	r1, [r3, #12]
      if(descscancnt < (appdesccnt - 1U))
 8001af2:	42af      	cmp	r7, r5
 8001af4:	d907      	bls.n	8001b06 <HAL_ETH_IsRxDataAvailable+0x6e>
        INCR_RX_DESC_INDEX(descidx, 1U);
 8001af6:	1c51      	adds	r1, r2, #1
 8001af8:	2903      	cmp	r1, #3
 8001afa:	bf88      	it	hi
 8001afc:	1ed1      	subhi	r1, r2, #3
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001afe:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8001b02:	460a      	mov	r2, r1
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8001b06:	3501      	adds	r5, #1
 8001b08:	42ac      	cmp	r4, r5
 8001b0a:	d1de      	bne.n	8001aca <HAL_ETH_IsRxDataAvailable+0x32>
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8001b0c:	6801      	ldr	r1, [r0, #0]
 8001b0e:	f241 1228 	movw	r2, #4392	; 0x1128
 8001b12:	508b      	str	r3, [r1, r2]
  dmarxdesclist->AppDescNbr = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	65c3      	str	r3, [r0, #92]	; 0x5c
    return 0;
 8001b18:	2000      	movs	r0, #0
 8001b1a:	e021      	b.n	8001b60 <HAL_ETH_IsRxDataAvailable+0xc8>
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001b1c:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 8001b20:	1c4b      	adds	r3, r1, #1
 8001b22:	f01c 5f80 	tst.w	ip, #268435456	; 0x10000000
 8001b26:	d01c      	beq.n	8001b62 <HAL_ETH_IsRxDataAvailable+0xca>
      if(appdesccnt == 1U)
 8001b28:	2c00      	cmp	r4, #0
 8001b2a:	bf08      	it	eq
 8001b2c:	460a      	moveq	r2, r1
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001b2e:	2b03      	cmp	r3, #3
      appdesccnt += 1U;
 8001b30:	f104 0501 	add.w	r5, r4, #1
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001b34:	bf88      	it	hi
 8001b36:	1ecb      	subhi	r3, r1, #3
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001b38:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8001b3c:	6c49      	ldr	r1, [r1, #68]	; 0x44
      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8001b3e:	68cc      	ldr	r4, [r1, #12]
 8001b40:	2c00      	cmp	r4, #0
 8001b42:	db09      	blt.n	8001b58 <HAL_ETH_IsRxDataAvailable+0xc0>
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001b44:	68c9      	ldr	r1, [r1, #12]
 8001b46:	004f      	lsls	r7, r1, #1
 8001b48:	d506      	bpl.n	8001b58 <HAL_ETH_IsRxDataAvailable+0xc0>
          dmarxdesclist->AppContextDesc = 1;
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	6601      	str	r1, [r0, #96]	; 0x60
          INCR_RX_DESC_INDEX(descidx, 1U);
 8001b4e:	1859      	adds	r1, r3, r1
 8001b50:	2903      	cmp	r1, #3
 8001b52:	bf8c      	ite	hi
 8001b54:	3b03      	subhi	r3, #3
 8001b56:	460b      	movls	r3, r1
      dmarxdesclist->AppDescNbr = appdesccnt;
 8001b58:	65c5      	str	r5, [r0, #92]	; 0x5c
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8001b5a:	e9c0 3215 	strd	r3, r2, [r0, #84]	; 0x54
      return 1;
 8001b5e:	2001      	movs	r0, #1
}
 8001b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001b62:	68f6      	ldr	r6, [r6, #12]
 8001b64:	00b6      	lsls	r6, r6, #2
 8001b66:	d50a      	bpl.n	8001b7e <HAL_ETH_IsRxDataAvailable+0xe6>
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001b68:	2b03      	cmp	r3, #3
      appdesccnt = 1U;
 8001b6a:	f04f 0401 	mov.w	r4, #1
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001b6e:	bf88      	it	hi
 8001b70:	1ecb      	subhi	r3, r1, #3
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001b72:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8001b76:	6c56      	ldr	r6, [r2, #68]	; 0x44
 8001b78:	460a      	mov	r2, r1
      appdesccnt = 1U;
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	e797      	b.n	8001aae <HAL_ETH_IsRxDataAvailable+0x16>
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001b7e:	2b03      	cmp	r3, #3
      appdesccnt += 1U;
 8001b80:	f104 0401 	add.w	r4, r4, #1
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001b84:	bf88      	it	hi
 8001b86:	1ecb      	subhi	r3, r1, #3
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001b88:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8001b8c:	6c4e      	ldr	r6, [r1, #68]	; 0x44
 8001b8e:	e7f4      	b.n	8001b7a <HAL_ETH_IsRxDataAvailable+0xe2>

08001b90 <HAL_ETH_GetRxDataBuffer>:
{
 8001b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b92:	4605      	mov	r5, r0
  if(rxbuff == NULL)
 8001b94:	460c      	mov	r4, r1
 8001b96:	b911      	cbnz	r1, 8001b9e <HAL_ETH_GetRxDataBuffer+0xe>
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001b98:	2001      	movs	r0, #1
 8001b9a:	6768      	str	r0, [r5, #116]	; 0x74
}
 8001b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(dmarxdesclist->AppDescNbr == 0U)
 8001b9e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001ba0:	b1b3      	cbz	r3, 8001bd0 <HAL_ETH_GetRxDataBuffer+0x40>
      descidx = dmarxdesclist->FirstAppDesc;
 8001ba2:	6da9      	ldr	r1, [r5, #88]	; 0x58
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8001ba4:	2600      	movs	r6, #0
 8001ba6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001ba8:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8001bac:	6968      	ldr	r0, [r5, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8001bae:	f102 3cff 	add.w	ip, r2, #4294967295
 8001bb2:	4637      	mov	r7, r6
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8001bb6:	45bc      	cmp	ip, r7
 8001bb8:	d810      	bhi.n	8001bdc <HAL_ETH_GetRxDataBuffer+0x4c>
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8001bba:	68da      	ldr	r2, [r3, #12]
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8001bbc:	6919      	ldr	r1, [r3, #16]
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8001bbe:	f3c2 020e 	ubfx	r2, r2, #0, #15
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8001bc2:	6021      	str	r1, [r4, #0]
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8001bc4:	1b92      	subs	r2, r2, r6
  if(lastdesclen <= heth->Init.RxBuffLen)
 8001bc6:	4290      	cmp	r0, r2
 8001bc8:	d31f      	bcc.n	8001c0a <HAL_ETH_GetRxDataBuffer+0x7a>
    rxbuff->len = lastdesclen;
 8001bca:	6062      	str	r2, [r4, #4]
  return HAL_OK;
 8001bcc:	2000      	movs	r0, #0
 8001bce:	e7e5      	b.n	8001b9c <HAL_ETH_GetRxDataBuffer+0xc>
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8001bd0:	f7ff ff62 	bl	8001a98 <HAL_ETH_IsRxDataAvailable>
 8001bd4:	2800      	cmp	r0, #0
 8001bd6:	d1e4      	bne.n	8001ba2 <HAL_ETH_GetRxDataBuffer+0x12>
      return HAL_ERROR;
 8001bd8:	2001      	movs	r0, #1
 8001bda:	e7df      	b.n	8001b9c <HAL_ETH_GetRxDataBuffer+0xc>
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8001bdc:	691a      	ldr	r2, [r3, #16]
    rxbuff->len =  heth->Init.RxBuffLen;
 8001bde:	e9c4 2000 	strd	r2, r0, [r4]
    if(dmarxdesc->BackupAddr1 != 0U)
 8001be2:	695a      	ldr	r2, [r3, #20]
 8001be4:	b11a      	cbz	r2, 8001bee <HAL_ETH_GetRxDataBuffer+0x5e>
 8001be6:	68a4      	ldr	r4, [r4, #8]
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8001be8:	695a      	ldr	r2, [r3, #20]
      rxbuff->len =  heth->Init.RxBuffLen;
 8001bea:	e9c4 2000 	strd	r2, r0, [r4]
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001bee:	1c4a      	adds	r2, r1, #1
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8001bf0:	68de      	ldr	r6, [r3, #12]
    rxbuff = rxbuff->next;
 8001bf2:	68a4      	ldr	r4, [r4, #8]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8001bf4:	3701      	adds	r7, #1
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001bf6:	2a03      	cmp	r2, #3
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8001bf8:	f3c6 060e 	ubfx	r6, r6, #0, #15
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001bfc:	bf88      	it	hi
 8001bfe:	1eca      	subhi	r2, r1, #3
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001c00:	eb05 0382 	add.w	r3, r5, r2, lsl #2
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8001c04:	4611      	mov	r1, r2
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8001c08:	e7d5      	b.n	8001bb6 <HAL_ETH_GetRxDataBuffer+0x26>
  else if(dmarxdesc->BackupAddr1 != 0U)
 8001c0a:	6959      	ldr	r1, [r3, #20]
 8001c0c:	2900      	cmp	r1, #0
 8001c0e:	d0e3      	beq.n	8001bd8 <HAL_ETH_GetRxDataBuffer+0x48>
    rxbuff = rxbuff->next;
 8001c10:	68a1      	ldr	r1, [r4, #8]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8001c12:	1a12      	subs	r2, r2, r0
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8001c14:	695b      	ldr	r3, [r3, #20]
    rxbuff->len = heth->Init.RxBuffLen;
 8001c16:	6060      	str	r0, [r4, #4]
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8001c18:	600b      	str	r3, [r1, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8001c1a:	604a      	str	r2, [r1, #4]
 8001c1c:	e7d6      	b.n	8001bcc <HAL_ETH_GetRxDataBuffer+0x3c>

08001c1e <HAL_ETH_GetRxDataLength>:
{
 8001c1e:	b570      	push	{r4, r5, r6, lr}
  if(dmarxdesclist->AppDescNbr == 0U)
 8001c20:	e9d0 5316 	ldrd	r5, r3, [r0, #88]	; 0x58
{
 8001c24:	4604      	mov	r4, r0
 8001c26:	460e      	mov	r6, r1
  if(dmarxdesclist->AppDescNbr == 0U)
 8001c28:	b16b      	cbz	r3, 8001c46 <HAL_ETH_GetRxDataLength+0x28>
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8001c2a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001c2c:	442b      	add	r3, r5
 8001c2e:	1e58      	subs	r0, r3, #1
 8001c30:	2803      	cmp	r0, #3
 8001c32:	d80e      	bhi.n	8001c52 <HAL_ETH_GetRxDataLength+0x34>
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001c34:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  return HAL_OK;
 8001c38:	2000      	movs	r0, #0
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001c3a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001c42:	6033      	str	r3, [r6, #0]
}
 8001c44:	bd70      	pop	{r4, r5, r6, pc}
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8001c46:	f7ff ff27 	bl	8001a98 <HAL_ETH_IsRxDataAvailable>
 8001c4a:	2800      	cmp	r0, #0
 8001c4c:	d1ed      	bne.n	8001c2a <HAL_ETH_GetRxDataLength+0xc>
      return HAL_ERROR;
 8001c4e:	2001      	movs	r0, #1
 8001c50:	e7f8      	b.n	8001c44 <HAL_ETH_GetRxDataLength+0x26>
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8001c52:	1f58      	subs	r0, r3, #5
 8001c54:	e7ee      	b.n	8001c34 <HAL_ETH_GetRxDataLength+0x16>

08001c56 <HAL_ETH_BuildRxDescriptors>:
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8001c56:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
{
 8001c58:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(dmarxdesclist->AppDescNbr == 0U)
 8001c5a:	2a00      	cmp	r2, #0
 8001c5c:	d036      	beq.n	8001ccc <HAL_ETH_BuildRxDescriptors+0x76>
  if(dmarxdesclist->AppContextDesc != 0U)
 8001c5e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001c60:	b103      	cbz	r3, 8001c64 <HAL_ETH_BuildRxDescriptors+0xe>
    totalappdescnbr += 1U;
 8001c62:	3201      	adds	r2, #1
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 8001c64:	6d84      	ldr	r4, [r0, #88]	; 0x58
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8001c66:	2100      	movs	r1, #0
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001c68:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    if(descscan < (totalappdescnbr - 1U))
 8001c6c:	1e57      	subs	r7, r2, #1
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8001c6e:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 8001c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8001c74:	428a      	cmp	r2, r1
 8001c76:	d108      	bne.n	8001c8a <HAL_ETH_BuildRxDescriptors+0x34>
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8001c78:	6801      	ldr	r1, [r0, #0]
 8001c7a:	f241 1228 	movw	r2, #4392	; 0x1128
 8001c7e:	508b      	str	r3, [r1, r2]
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8001c80:	2300      	movs	r3, #0
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8001c82:	e9c0 3317 	strd	r3, r3, [r0, #92]	; 0x5c
  return HAL_OK;
 8001c86:	4618      	mov	r0, r3
}
 8001c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8001c8a:	691d      	ldr	r5, [r3, #16]
 8001c8c:	601d      	str	r5, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001c8e:	60de      	str	r6, [r3, #12]
    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8001c90:	695d      	ldr	r5, [r3, #20]
 8001c92:	b12d      	cbz	r5, 8001ca0 <HAL_ETH_BuildRxDescriptors+0x4a>
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8001c94:	695d      	ldr	r5, [r3, #20]
 8001c96:	609d      	str	r5, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001c98:	68dd      	ldr	r5, [r3, #12]
 8001c9a:	f045 7500 	orr.w	r5, r5, #33554432	; 0x2000000
 8001c9e:	60dd      	str	r5, [r3, #12]
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001ca0:	68dd      	ldr	r5, [r3, #12]
 8001ca2:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8001ca6:	60dd      	str	r5, [r3, #12]
    if(dmarxdesclist->ItMode != 0U)
 8001ca8:	6e45      	ldr	r5, [r0, #100]	; 0x64
 8001caa:	b11d      	cbz	r5, 8001cb4 <HAL_ETH_BuildRxDescriptors+0x5e>
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001cac:	68dd      	ldr	r5, [r3, #12]
 8001cae:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
 8001cb2:	60dd      	str	r5, [r3, #12]
    if(descscan < (totalappdescnbr - 1U))
 8001cb4:	428f      	cmp	r7, r1
 8001cb6:	d907      	bls.n	8001cc8 <HAL_ETH_BuildRxDescriptors+0x72>
      INCR_RX_DESC_INDEX(descindex, 1U);
 8001cb8:	1c65      	adds	r5, r4, #1
 8001cba:	2d03      	cmp	r5, #3
 8001cbc:	bf88      	it	hi
 8001cbe:	1ee5      	subhi	r5, r4, #3
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8001cc0:	eb00 0385 	add.w	r3, r0, r5, lsl #2
 8001cc4:	462c      	mov	r4, r5
 8001cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8001cc8:	3101      	adds	r1, #1
 8001cca:	e7d3      	b.n	8001c74 <HAL_ETH_BuildRxDescriptors+0x1e>
    return HAL_ERROR;
 8001ccc:	2001      	movs	r0, #1
 8001cce:	e7db      	b.n	8001c88 <HAL_ETH_BuildRxDescriptors+0x32>

08001cd0 <HAL_ETH_TxCpltCallback>:
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_ETH_DMAErrorCallback>:
 8001cd2:	4770      	bx	lr

08001cd4 <HAL_ETH_MACErrorCallback>:
 8001cd4:	4770      	bx	lr

08001cd6 <HAL_ETH_PMTCallback>:
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_ETH_EEECallback>:
 8001cd8:	4770      	bx	lr

08001cda <HAL_ETH_WakeUpCallback>:
 8001cda:	4770      	bx	lr

08001cdc <HAL_ETH_IRQHandler>:
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8001cdc:	6803      	ldr	r3, [r0, #0]
 8001cde:	f503 528b 	add.w	r2, r3, #4448	; 0x1160
 8001ce2:	6812      	ldr	r2, [r2, #0]
 8001ce4:	0652      	lsls	r2, r2, #25
{
 8001ce6:	b510      	push	{r4, lr}
 8001ce8:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8001cea:	d50c      	bpl.n	8001d06 <HAL_ETH_IRQHandler+0x2a>
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8001cec:	f241 1234 	movw	r2, #4404	; 0x1134
 8001cf0:	589b      	ldr	r3, [r3, r2]
 8001cf2:	0659      	lsls	r1, r3, #25
 8001cf4:	d507      	bpl.n	8001d06 <HAL_ETH_IRQHandler+0x2a>
      HAL_ETH_RxCpltCallback(heth);
 8001cf6:	f7fe fdef 	bl	80008d8 <HAL_ETH_RxCpltCallback>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8001cfa:	6823      	ldr	r3, [r4, #0]
 8001cfc:	f248 0240 	movw	r2, #32832	; 0x8040
 8001d00:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001d04:	601a      	str	r2, [r3, #0]
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8001d06:	6823      	ldr	r3, [r4, #0]
 8001d08:	f503 528b 	add.w	r2, r3, #4448	; 0x1160
 8001d0c:	6812      	ldr	r2, [r2, #0]
 8001d0e:	07d2      	lsls	r2, r2, #31
 8001d10:	d50d      	bpl.n	8001d2e <HAL_ETH_IRQHandler+0x52>
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8001d12:	f241 1234 	movw	r2, #4404	; 0x1134
 8001d16:	589b      	ldr	r3, [r3, r2]
 8001d18:	07d8      	lsls	r0, r3, #31
 8001d1a:	d508      	bpl.n	8001d2e <HAL_ETH_IRQHandler+0x52>
      HAL_ETH_TxCpltCallback(heth);
 8001d1c:	4620      	mov	r0, r4
 8001d1e:	f7ff ffd7 	bl	8001cd0 <HAL_ETH_TxCpltCallback>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8001d22:	6823      	ldr	r3, [r4, #0]
 8001d24:	f248 0201 	movw	r2, #32769	; 0x8001
 8001d28:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001d2c:	601a      	str	r2, [r3, #0]
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8001d2e:	6822      	ldr	r2, [r4, #0]
 8001d30:	f502 538b 	add.w	r3, r2, #4448	; 0x1160
 8001d34:	6819      	ldr	r1, [r3, #0]
 8001d36:	0449      	lsls	r1, r1, #17
 8001d38:	d51c      	bpl.n	8001d74 <HAL_ETH_IRQHandler+0x98>
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8001d3a:	f241 1134 	movw	r1, #4404	; 0x1134
 8001d3e:	5850      	ldr	r0, [r2, r1]
 8001d40:	0440      	lsls	r0, r0, #17
 8001d42:	d517      	bpl.n	8001d74 <HAL_ETH_IRQHandler+0x98>
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001d44:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001d46:	f040 0008 	orr.w	r0, r0, #8
 8001d4a:	6760      	str	r0, [r4, #116]	; 0x74
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8001d4c:	6818      	ldr	r0, [r3, #0]
 8001d4e:	04c0      	lsls	r0, r0, #19
 8001d50:	d54f      	bpl.n	8001df2 <HAL_ETH_IRQHandler+0x116>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f423 636f 	bic.w	r3, r3, #3824	; 0xef0
 8001d58:	f023 030d 	bic.w	r3, r3, #13
 8001d5c:	04db      	lsls	r3, r3, #19
 8001d5e:	0cdb      	lsrs	r3, r3, #19
 8001d60:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8001d62:	5853      	ldr	r3, [r2, r1]
 8001d64:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d68:	5053      	str	r3, [r2, r1]
        heth->gState = HAL_ETH_STATE_ERROR;
 8001d6a:	23e0      	movs	r3, #224	; 0xe0
 8001d6c:	66e3      	str	r3, [r4, #108]	; 0x6c
      HAL_ETH_DMAErrorCallback(heth);
 8001d6e:	4620      	mov	r0, r4
 8001d70:	f7ff ffaf 	bl	8001cd2 <HAL_ETH_DMAErrorCallback>
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8001d74:	6822      	ldr	r2, [r4, #0]
 8001d76:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
 8001d7a:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8001d7e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8001d82:	d109      	bne.n	8001d98 <HAL_ETH_IRQHandler+0xbc>
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001d84:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
    HAL_ETH_MACErrorCallback(heth);
 8001d88:	4620      	mov	r0, r4
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001d8a:	67e3      	str	r3, [r4, #124]	; 0x7c
    heth->gState = HAL_ETH_STATE_ERROR;
 8001d8c:	23e0      	movs	r3, #224	; 0xe0
 8001d8e:	66e3      	str	r3, [r4, #108]	; 0x6c
    HAL_ETH_MACErrorCallback(heth);
 8001d90:	f7ff ffa0 	bl	8001cd4 <HAL_ETH_MACErrorCallback>
    heth->MACErrorCode = (uint32_t)(0x0U);
 8001d94:	2300      	movs	r3, #0
 8001d96:	67e3      	str	r3, [r4, #124]	; 0x7c
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001d98:	6823      	ldr	r3, [r4, #0]
 8001d9a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d9e:	06d0      	lsls	r0, r2, #27
 8001da0:	d50b      	bpl.n	8001dba <HAL_ETH_IRQHandler+0xde>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8001da2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    HAL_ETH_PMTCallback(heth);
 8001da6:	4620      	mov	r0, r4
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8001da8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001dac:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    HAL_ETH_PMTCallback(heth);
 8001db0:	f7ff ff91 	bl	8001cd6 <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001db4:	2300      	movs	r3, #0
 8001db6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8001dba:	6823      	ldr	r3, [r4, #0]
 8001dbc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001dc0:	0691      	lsls	r1, r2, #26
 8001dc2:	d50b      	bpl.n	8001ddc <HAL_ETH_IRQHandler+0x100>
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8001dc4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    HAL_ETH_EEECallback(heth);
 8001dc8:	4620      	mov	r0, r4
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    HAL_ETH_EEECallback(heth);
 8001dd2:	f7ff ff81 	bl	8001cd8 <HAL_ETH_EEECallback>
    heth->MACLPIEvent = (uint32_t)(0x0U);
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001ddc:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <HAL_ETH_IRQHandler+0x128>)
 8001dde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001de0:	0252      	lsls	r2, r2, #9
 8001de2:	d505      	bpl.n	8001df0 <HAL_ETH_IRQHandler+0x114>
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001de4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
      HAL_ETH_WakeUpCallback(heth);
 8001de8:	4620      	mov	r0, r4
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001dea:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 8001dec:	f7ff ff75 	bl	8001cda <HAL_ETH_WakeUpCallback>
}
 8001df0:	bd10      	pop	{r4, pc}
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	f402 42cd 	and.w	r2, r2, #26240	; 0x6680
 8001df8:	67a2      	str	r2, [r4, #120]	; 0x78
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001dfa:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	e7b5      	b.n	8001d6e <HAL_ETH_IRQHandler+0x92>
 8001e02:	bf00      	nop
 8001e04:	58000080 	.word	0x58000080

08001e08 <HAL_ETH_ReadPHYRegister>:
{
 8001e08:	b570      	push	{r4, r5, r6, lr}
 8001e0a:	461e      	mov	r6, r3
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8001e0c:	6803      	ldr	r3, [r0, #0]
{
 8001e0e:	4605      	mov	r5, r0
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8001e10:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
 8001e14:	07c0      	lsls	r0, r0, #31
 8001e16:	d501      	bpl.n	8001e1c <HAL_ETH_ReadPHYRegister+0x14>
    return HAL_ERROR;
 8001e18:	2001      	movs	r0, #1
}
 8001e1a:	bd70      	pop	{r4, r5, r6, pc}
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001e1c:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8001e20:	f024 7478 	bic.w	r4, r4, #65011712	; 0x3e00000
 8001e24:	ea44 5141 	orr.w	r1, r4, r1, lsl #21
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001e28:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001e2c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001e30:	f042 020d 	orr.w	r2, r2, #13
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001e34:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  tickstart = HAL_GetTick();
 8001e38:	f7ff f9ee 	bl	8001218 <HAL_GetTick>
 8001e3c:	4604      	mov	r4, r0
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001e3e:	682a      	ldr	r2, [r5, #0]
 8001e40:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8001e44:	f013 0301 	ands.w	r3, r3, #1
 8001e48:	d105      	bne.n	8001e56 <HAL_ETH_ReadPHYRegister+0x4e>
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001e4a:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
  return HAL_OK;
 8001e4e:	4618      	mov	r0, r3
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001e50:	b292      	uxth	r2, r2
 8001e52:	6032      	str	r2, [r6, #0]
  return HAL_OK;
 8001e54:	e7e1      	b.n	8001e1a <HAL_ETH_ReadPHYRegister+0x12>
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8001e56:	f7ff f9df 	bl	8001218 <HAL_GetTick>
 8001e5a:	1b00      	subs	r0, r0, r4
 8001e5c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001e60:	d9ed      	bls.n	8001e3e <HAL_ETH_ReadPHYRegister+0x36>
 8001e62:	e7d9      	b.n	8001e18 <HAL_ETH_ReadPHYRegister+0x10>

08001e64 <HAL_ETH_WritePHYRegister>:
{
 8001e64:	b538      	push	{r3, r4, r5, lr}
 8001e66:	4605      	mov	r5, r0
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8001e68:	6800      	ldr	r0, [r0, #0]
 8001e6a:	f8d0 4200 	ldr.w	r4, [r0, #512]	; 0x200
 8001e6e:	07e4      	lsls	r4, r4, #31
 8001e70:	d501      	bpl.n	8001e76 <HAL_ETH_WritePHYRegister+0x12>
    return HAL_ERROR;
 8001e72:	2001      	movs	r0, #1
}
 8001e74:	bd38      	pop	{r3, r4, r5, pc}
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001e76:	f8d0 4200 	ldr.w	r4, [r0, #512]	; 0x200
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	f024 7478 	bic.w	r4, r4, #65011712	; 0x3e00000
 8001e80:	ea44 5141 	orr.w	r1, r4, r1, lsl #21
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001e84:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001e88:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001e8c:	490d      	ldr	r1, [pc, #52]	; (8001ec4 <HAL_ETH_WritePHYRegister+0x60>)
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001e8e:	f022 020c 	bic.w	r2, r2, #12
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001e92:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001e96:	f042 0205 	orr.w	r2, r2, #5
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8001e9a:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
  tickstart = HAL_GetTick();
 8001e9e:	f7ff f9bb 	bl	8001218 <HAL_GetTick>
 8001ea2:	4604      	mov	r4, r0
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001ea4:	682b      	ldr	r3, [r5, #0]
 8001ea6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001eaa:	f013 0301 	ands.w	r3, r3, #1
 8001eae:	d101      	bne.n	8001eb4 <HAL_ETH_WritePHYRegister+0x50>
  return HAL_OK;
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	e7df      	b.n	8001e74 <HAL_ETH_WritePHYRegister+0x10>
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8001eb4:	f7ff f9b0 	bl	8001218 <HAL_GetTick>
 8001eb8:	1b00      	subs	r0, r0, r4
 8001eba:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001ebe:	d9f1      	bls.n	8001ea4 <HAL_ETH_WritePHYRegister+0x40>
 8001ec0:	e7d7      	b.n	8001e72 <HAL_ETH_WritePHYRegister+0xe>
 8001ec2:	bf00      	nop
 8001ec4:	40028000 	.word	0x40028000

08001ec8 <HAL_ETH_GetMACConfig>:
  if (macconf == NULL)
 8001ec8:	2900      	cmp	r1, #0
 8001eca:	f000 80c1 	beq.w	8002050 <HAL_ETH_GetMACConfig+0x188>
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001ece:	6803      	ldr	r3, [r0, #0]
  return HAL_OK;
 8001ed0:	2000      	movs	r0, #0
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	f002 020c 	and.w	r2, r2, #12
 8001ed8:	62ca      	str	r2, [r1, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001ee0:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8001eea:	624a      	str	r2, [r1, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	f482 7280 	eor.w	r2, r2, #256	; 0x100
 8001ef2:	f3c2 2200 	ubfx	r2, r2, #8, #1
 8001ef6:	f881 2020 	strb.w	r2, [r1, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	f3c2 2240 	ubfx	r2, r2, #9, #1
 8001f00:	77ca      	strb	r2, [r1, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	f482 6280 	eor.w	r2, r2, #1024	; 0x400
 8001f08:	f3c2 2280 	ubfx	r2, r2, #10, #1
 8001f0c:	778a      	strb	r2, [r1, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	f3c2 22c0 	ubfx	r2, r2, #11, #1
 8001f14:	774a      	strb	r2, [r1, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8001f1c:	770a      	strb	r2, [r1, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001f24:	618a      	str	r2, [r1, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001f2c:	614a      	str	r2, [r1, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	f3c2 4200 	ubfx	r2, r2, #16, #1
 8001f34:	748a      	strb	r2, [r1, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	f482 3200 	eor.w	r2, r2, #131072	; 0x20000
 8001f3c:	f3c2 4240 	ubfx	r2, r2, #17, #1
 8001f40:	744a      	strb	r2, [r1, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8001f48:	f3c2 42c0 	ubfx	r2, r2, #19, #1
 8001f4c:	740a      	strb	r2, [r1, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	f3c2 5200 	ubfx	r2, r2, #20, #1
 8001f54:	73ca      	strb	r2, [r1, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	f3c2 5240 	ubfx	r2, r2, #21, #1
 8001f5c:	738a      	strb	r2, [r1, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	f3c2 5280 	ubfx	r2, r2, #22, #1
 8001f64:	734a      	strb	r2, [r1, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 8001f6c:	730a      	strb	r2, [r1, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	f002 62e0 	and.w	r2, r2, #117440512	; 0x7000000
 8001f74:	608a      	str	r2, [r1, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	f3c2 62c0 	ubfx	r2, r2, #27, #1
 8001f7c:	710a      	strb	r2, [r1, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8001f84:	600a      	str	r2, [r1, #0]
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8001f8c:	634a      	str	r2, [r1, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	f482 3280 	eor.w	r2, r2, #65536	; 0x10000
 8001f94:	f3c2 4200 	ubfx	r2, r2, #16, #1
 8001f98:	f881 2032 	strb.w	r2, [r1, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	f3c2 4240 	ubfx	r2, r2, #17, #1
 8001fa2:	f881 2031 	strb.w	r2, [r1, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	f3c2 4280 	ubfx	r2, r2, #18, #1
 8001fac:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	f3c2 6200 	ubfx	r2, r2, #24, #1
 8001fb6:	f881 2038 	strb.w	r2, [r1, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	f3c2 6244 	ubfx	r2, r2, #25, #5
 8001fc0:	63ca      	str	r2, [r1, #60]	; 0x3c
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8001fc2:	68da      	ldr	r2, [r3, #12]
 8001fc4:	f3c2 2200 	ubfx	r2, r2, #8, #1
 8001fc8:	f881 2040 	strb.w	r2, [r1, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8001fcc:	68da      	ldr	r2, [r3, #12]
 8001fce:	f002 020f 	and.w	r2, r2, #15
 8001fd2:	644a      	str	r2, [r1, #68]	; 0x44
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001fd4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001fd6:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8001fda:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8001fde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001fe0:	f082 0280 	eor.w	r2, r2, #128	; 0x80
 8001fe4:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8001fe8:	f881 204c 	strb.w	r2, [r1, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8001fec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001fee:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001ff2:	650a      	str	r2, [r1, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8001ff4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ff6:	0c12      	lsrs	r2, r2, #16
 8001ff8:	648a      	str	r2, [r1, #72]	; 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8001ffa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001ffe:	f002 0201 	and.w	r2, r2, #1
 8002002:	f881 2056 	strb.w	r2, [r1, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8002006:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800200a:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800200e:	f881 2055 	strb.w	r2, [r1, #85]	; 0x55
  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002012:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8002016:	f002 0272 	and.w	r2, r2, #114	; 0x72
 800201a:	658a      	str	r2, [r1, #88]	; 0x58
  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 800201c:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
 8002020:	f002 0223 	and.w	r2, r2, #35	; 0x23
 8002024:	65ca      	str	r2, [r1, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002026:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
 800202a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800202e:	f881 2062 	strb.w	r2, [r1, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002032:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
 8002036:	f3c2 1200 	ubfx	r2, r2, #4, #1
 800203a:	f881 2061 	strb.w	r2, [r1, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 800203e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002042:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8002046:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800204a:	f881 3060 	strb.w	r3, [r1, #96]	; 0x60
  return HAL_OK;
 800204e:	4770      	bx	lr
    return HAL_ERROR;
 8002050:	2001      	movs	r0, #1
}
 8002052:	4770      	bx	lr

08002054 <HAL_ETH_SetMACConfig>:
{
 8002054:	b508      	push	{r3, lr}
  if(macconf == NULL)
 8002056:	b131      	cbz	r1, 8002066 <HAL_ETH_SetMACConfig+0x12>
  if(heth->RxState == HAL_ETH_STATE_READY)
 8002058:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800205a:	2b10      	cmp	r3, #16
 800205c:	d103      	bne.n	8002066 <HAL_ETH_SetMACConfig+0x12>
    ETH_SetMACConfig(heth, macconf);
 800205e:	f7ff f98d 	bl	800137c <ETH_SetMACConfig>
    return HAL_OK;
 8002062:	2000      	movs	r0, #0
}
 8002064:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 8002066:	2001      	movs	r0, #1
 8002068:	e7fc      	b.n	8002064 <HAL_ETH_SetMACConfig+0x10>
	...

0800206c <HAL_ETH_SetMDIOClockRange>:
{
 800206c:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (heth->Instance)->MACMDIOAR;
 800206e:	6803      	ldr	r3, [r0, #0]
{
 8002070:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002072:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
  hclk = HAL_RCC_GetHCLKFreq();
 8002076:	f000 feab 	bl	8002dd0 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800207a:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <HAL_ETH_SetMDIOClockRange+0x58>)
 800207c:	4a12      	ldr	r2, [pc, #72]	; (80020c8 <HAL_ETH_SetMDIOClockRange+0x5c>)
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800207e:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002082:	4403      	add	r3, r0
 8002084:	4293      	cmp	r3, r2
 8002086:	d205      	bcs.n	8002094 <HAL_ETH_SetMDIOClockRange+0x28>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002088:	f444 7400 	orr.w	r4, r4, #512	; 0x200
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800208c:	682b      	ldr	r3, [r5, #0]
 800208e:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
}
 8002092:	bd38      	pop	{r3, r4, r5, pc}
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002094:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <HAL_ETH_SetMDIOClockRange+0x60>)
 8002096:	4a0e      	ldr	r2, [pc, #56]	; (80020d0 <HAL_ETH_SetMDIOClockRange+0x64>)
 8002098:	4403      	add	r3, r0
 800209a:	4293      	cmp	r3, r2
 800209c:	d802      	bhi.n	80020a4 <HAL_ETH_SetMDIOClockRange+0x38>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800209e:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 80020a2:	e7f3      	b.n	800208c <HAL_ETH_SetMDIOClockRange+0x20>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80020a4:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <HAL_ETH_SetMDIOClockRange+0x68>)
 80020a6:	4a0c      	ldr	r2, [pc, #48]	; (80020d8 <HAL_ETH_SetMDIOClockRange+0x6c>)
 80020a8:	4403      	add	r3, r0
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d3ee      	bcc.n	800208c <HAL_ETH_SetMDIOClockRange+0x20>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80020ae:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <HAL_ETH_SetMDIOClockRange+0x70>)
 80020b0:	4a0b      	ldr	r2, [pc, #44]	; (80020e0 <HAL_ETH_SetMDIOClockRange+0x74>)
 80020b2:	4403      	add	r3, r0
 80020b4:	4293      	cmp	r3, r2
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80020b6:	bf94      	ite	ls
 80020b8:	f444 7480 	orrls.w	r4, r4, #256	; 0x100
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80020bc:	f444 6480 	orrhi.w	r4, r4, #1024	; 0x400
 80020c0:	e7e4      	b.n	800208c <HAL_ETH_SetMDIOClockRange+0x20>
 80020c2:	bf00      	nop
 80020c4:	feced300 	.word	0xfeced300
 80020c8:	00e4e1c0 	.word	0x00e4e1c0
 80020cc:	fde9f140 	.word	0xfde9f140
 80020d0:	017d783f 	.word	0x017d783f
 80020d4:	fc6c7900 	.word	0xfc6c7900
 80020d8:	02625a00 	.word	0x02625a00
 80020dc:	fa0a1f00 	.word	0xfa0a1f00
 80020e0:	02faf07f 	.word	0x02faf07f

080020e4 <HAL_ETH_Init>:
{
 80020e4:	b570      	push	{r4, r5, r6, lr}
  if(heth == NULL)
 80020e6:	4604      	mov	r4, r0
{
 80020e8:	b0a4      	sub	sp, #144	; 0x90
  if(heth == NULL)
 80020ea:	2800      	cmp	r0, #0
 80020ec:	f000 80a6 	beq.w	800223c <HAL_ETH_Init+0x158>
  if(heth->gState == HAL_ETH_STATE_RESET)
 80020f0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80020f2:	b90b      	cbnz	r3, 80020f8 <HAL_ETH_Init+0x14>
    HAL_ETH_MspInit(heth);
 80020f4:	f7fe fb64 	bl	80007c0 <HAL_ETH_MspInit>
  heth->gState = HAL_ETH_STATE_BUSY;
 80020f8:	2323      	movs	r3, #35	; 0x23
 80020fa:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020fc:	4b7a      	ldr	r3, [pc, #488]	; (80022e8 <HAL_ETH_Init+0x204>)
 80020fe:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8002102:	f042 0202 	orr.w	r2, r2, #2
 8002106:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800210a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800210e:	7a20      	ldrb	r0, [r4, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	9301      	str	r3, [sp, #4]
 8002116:	9b01      	ldr	r3, [sp, #4]
  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002118:	2800      	cmp	r0, #0
 800211a:	f040 8082 	bne.w	8002222 <HAL_ETH_Init+0x13e>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800211e:	f7ff f887 	bl	8001230 <HAL_SYSCFG_ETHInterfaceSelect>
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002122:	6823      	ldr	r3, [r4, #0]
 8002124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	f042 0201 	orr.w	r2, r2, #1
 800212e:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002130:	f7ff f872 	bl	8001218 <HAL_GetTick>
 8002134:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002136:	6823      	ldr	r3, [r4, #0]
 8002138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800213c:	681d      	ldr	r5, [r3, #0]
 800213e:	f015 0501 	ands.w	r5, r5, #1
 8002142:	d171      	bne.n	8002228 <HAL_ETH_Init+0x144>
  ETH_MAC_MDIO_ClkConfig(heth);
 8002144:	4620      	mov	r0, r4
  macDefaultConf.ChecksumOffload = ENABLE;
 8002146:	2601      	movs	r6, #1
  ETH_MAC_MDIO_ClkConfig(heth);
 8002148:	f7ff ff90 	bl	800206c <HAL_ETH_SetMDIOClockRange>
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800214c:	f000 fe40 	bl	8002dd0 <HAL_RCC_GetHCLKFreq>
 8002150:	4a66      	ldr	r2, [pc, #408]	; (80022ec <HAL_ETH_Init+0x208>)
 8002152:	6823      	ldr	r3, [r4, #0]
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002154:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002158:	9514      	str	r5, [sp, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800215a:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
  macDefaultConf.DeferralCheck = DISABLE;
 800215e:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002162:	f88d 5064 	strb.w	r5, [sp, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002166:	951a      	str	r5, [sp, #104]	; 0x68
  macDefaultConf.PauseTime = 0x0;
 8002168:	951d      	str	r5, [sp, #116]	; 0x74
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800216a:	f88d 506c 	strb.w	r5, [sp, #108]	; 0x6c
  macDefaultConf.RetryTransmission = ENABLE;
 800216e:	f88d 604c 	strb.w	r6, [sp, #76]	; 0x4c
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002172:	f8ad 608c 	strh.w	r6, [sp, #140]	; 0x8c
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002176:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800217a:	951f      	str	r5, [sp, #124]	; 0x7c
  macDefaultConf.TransmitFlowControl = DISABLE;
 800217c:	f8ad 5080 	strh.w	r5, [sp, #128]	; 0x80
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002180:	f88d 5082 	strb.w	r5, [sp, #130]	; 0x82
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002184:	9516      	str	r5, [sp, #88]	; 0x58
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002186:	f8ad 505c 	strh.w	r5, [sp, #92]	; 0x5c
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800218a:	f88d 605e 	strb.w	r6, [sp, #94]	; 0x5e
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800218e:	950d      	str	r5, [sp, #52]	; 0x34
  macDefaultConf.JumboPacket = DISABLE;
 8002190:	f88d 503e 	strb.w	r5, [sp, #62]	; 0x3e
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002194:	951c      	str	r5, [sp, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002196:	f88d 6078 	strb.w	r6, [sp, #120]	; 0x78
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800219a:	fbb0 f0f2 	udiv	r0, r0, r2
 800219e:	3801      	subs	r0, #1
 80021a0:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80021a4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80021a8:	2002      	movs	r0, #2
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80021aa:	9318      	str	r3, [sp, #96]	; 0x60
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80021ac:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80021b0:	930b      	str	r3, [sp, #44]	; 0x2c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80021b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021b6:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  macDefaultConf.LoopbackMode = DISABLE;
 80021ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  ETH_SetMACConfig(heth, &macDefaultConf);
 80021be:	a90b      	add	r1, sp, #44	; 0x2c
  macDefaultConf.LoopbackMode = DISABLE;
 80021c0:	9312      	str	r3, [sp, #72]	; 0x48
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80021c2:	2320      	movs	r3, #32
 80021c4:	e9cd 0321 	strd	r0, r3, [sp, #132]	; 0x84
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80021c8:	4b49      	ldr	r3, [pc, #292]	; (80022f0 <HAL_ETH_Init+0x20c>)
  ETH_SetMACConfig(heth, &macDefaultConf);
 80021ca:	4620      	mov	r0, r4
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80021cc:	930e      	str	r3, [sp, #56]	; 0x38
  macDefaultConf.Watchdog = ENABLE;
 80021ce:	f240 1301 	movw	r3, #257	; 0x101
 80021d2:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  ETH_SetMACConfig(heth, &macDefaultConf);
 80021d6:	f7ff f8d1 	bl	800137c <ETH_SetMACConfig>
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80021da:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80021de:	a902      	add	r1, sp, #8
 80021e0:	4620      	mov	r0, r4
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80021e2:	f88d 600c 	strb.w	r6, [sp, #12]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80021e6:	9306      	str	r3, [sp, #24]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80021e8:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.MaximumSegmentSize = 536;
 80021ea:	f44f 7306 	mov.w	r3, #536	; 0x218
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80021ee:	9502      	str	r5, [sp, #8]
  dmaDefaultConf.MaximumSegmentSize = 536;
 80021f0:	930a      	str	r3, [sp, #40]	; 0x28
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80021f2:	9604      	str	r6, [sp, #16]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80021f4:	f8ad 5014 	strh.w	r5, [sp, #20]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80021f8:	f88d 501c 	strb.w	r5, [sp, #28]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80021fc:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002200:	f7ff f996 	bl	8001530 <ETH_SetDMAConfig>
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002204:	6823      	ldr	r3, [r4, #0]
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002206:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002208:	f503 5188 	add.w	r1, r3, #4352	; 0x1100
 800220c:	680a      	ldr	r2, [r1, #0]
 800220e:	f422 12e0 	bic.w	r2, r2, #1835008	; 0x1c0000
 8002212:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002216:	600a      	str	r2, [r1, #0]
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002218:	f010 0103 	ands.w	r1, r0, #3
 800221c:	d010      	beq.n	8002240 <HAL_ETH_Init+0x15c>
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800221e:	6766      	str	r6, [r4, #116]	; 0x74
 8002220:	e00a      	b.n	8002238 <HAL_ETH_Init+0x154>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002222:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002226:	e77a      	b.n	800211e <HAL_ETH_Init+0x3a>
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8002228:	f7fe fff6 	bl	8001218 <HAL_GetTick>
 800222c:	1b80      	subs	r0, r0, r6
 800222e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8002232:	d980      	bls.n	8002136 <HAL_ETH_Init+0x52>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002234:	2304      	movs	r3, #4
 8002236:	6763      	str	r3, [r4, #116]	; 0x74
    heth->gState = HAL_ETH_STATE_ERROR;
 8002238:	23e0      	movs	r3, #224	; 0xe0
 800223a:	66e3      	str	r3, [r4, #108]	; 0x6c
    return HAL_ERROR;
 800223c:	2001      	movs	r0, #1
 800223e:	e051      	b.n	80022e4 <HAL_ETH_Init+0x200>
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002240:	f241 1508 	movw	r5, #4360	; 0x1108
 8002244:	595a      	ldr	r2, [r3, r5]
 8002246:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800224a:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800224e:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8002252:	68e0      	ldr	r0, [r4, #12]
 8002254:	515a      	str	r2, [r3, r5]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002256:	f100 0660 	add.w	r6, r0, #96	; 0x60
 800225a:	f104 0518 	add.w	r5, r4, #24
    dmatxdesc = heth->Init.TxDesc + i;
 800225e:	4602      	mov	r2, r0
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002260:	6011      	str	r1, [r2, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002262:	6051      	str	r1, [r2, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002264:	6091      	str	r1, [r2, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002266:	60d1      	str	r1, [r2, #12]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002268:	f845 2b04 	str.w	r2, [r5], #4
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800226c:	3218      	adds	r2, #24
 800226e:	42b2      	cmp	r2, r6
 8002270:	d1f6      	bne.n	8002260 <HAL_ETH_Init+0x17c>
  heth->TxDescList.CurTxDesc = 0;
 8002272:	62a1      	str	r1, [r4, #40]	; 0x28
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002274:	f241 122c 	movw	r2, #4396	; 0x112c
 8002278:	2103      	movs	r1, #3
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800227a:	2500      	movs	r5, #0
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800227c:	5099      	str	r1, [r3, r2]
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800227e:	f241 1214 	movw	r2, #4372	; 0x1114
    dmarxdesc =  heth->Init.RxDesc + i;
 8002282:	6921      	ldr	r1, [r4, #16]
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002284:	5098      	str	r0, [r3, r2]
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002286:	f503 5289 	add.w	r2, r3, #4384	; 0x1120
 800228a:	f101 0660 	add.w	r6, r1, #96	; 0x60
 800228e:	6010      	str	r0, [r2, #0]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002290:	f104 0044 	add.w	r0, r4, #68	; 0x44
    dmarxdesc =  heth->Init.RxDesc + i;
 8002294:	460a      	mov	r2, r1
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002296:	6015      	str	r5, [r2, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002298:	6055      	str	r5, [r2, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800229a:	6095      	str	r5, [r2, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800229c:	60d5      	str	r5, [r2, #12]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800229e:	e9c2 5504 	strd	r5, r5, [r2, #16]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80022a2:	f840 2b04 	str.w	r2, [r0], #4
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80022a6:	3218      	adds	r2, #24
 80022a8:	42b2      	cmp	r2, r6
 80022aa:	d1f4      	bne.n	8002296 <HAL_ETH_Init+0x1b2>
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80022ac:	f241 1230 	movw	r2, #4400	; 0x1130
 80022b0:	2003      	movs	r0, #3
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80022b2:	65e5      	str	r5, [r4, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80022b4:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80022b8:	e9c4 5518 	strd	r5, r5, [r4, #96]	; 0x60
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80022bc:	5098      	str	r0, [r3, r2]
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80022be:	f241 121c 	movw	r2, #4380	; 0x111c
  return HAL_OK;
 80022c2:	2000      	movs	r0, #0
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80022c4:	5099      	str	r1, [r3, r2]
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80022c6:	3148      	adds	r1, #72	; 0x48
 80022c8:	f241 1228 	movw	r2, #4392	; 0x1128
 80022cc:	5099      	str	r1, [r3, r2]
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80022ce:	6862      	ldr	r2, [r4, #4]
 80022d0:	8891      	ldrh	r1, [r2, #4]
 80022d2:	f8c3 1300 	str.w	r1, [r3, #768]	; 0x300
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80022d6:	6812      	ldr	r2, [r2, #0]
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80022d8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
  heth->gState = HAL_ETH_STATE_READY;
 80022dc:	2310      	movs	r3, #16
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80022de:	6765      	str	r5, [r4, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80022e0:	66e3      	str	r3, [r4, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80022e2:	6723      	str	r3, [r4, #112]	; 0x70
}
 80022e4:	b024      	add	sp, #144	; 0x90
 80022e6:	bd70      	pop	{r4, r5, r6, pc}
 80022e8:	58024400 	.word	0x58024400
 80022ec:	000f4240 	.word	0x000f4240
 80022f0:	01010000 	.word	0x01010000

080022f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 80022f8:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022fa:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80024b8 <HAL_GPIO_Init+0x1c4>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80022fe:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 80024bc <HAL_GPIO_Init+0x1c8>
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002302:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002306:	680a      	ldr	r2, [r1, #0]
 8002308:	fa32 f403 	lsrs.w	r4, r2, r3
 800230c:	d102      	bne.n	8002314 <HAL_GPIO_Init+0x20>
      }
    }

    position++;
  }
}
 800230e:	b003      	add	sp, #12
 8002310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002314:	2701      	movs	r7, #1
 8002316:	409f      	lsls	r7, r3
    if (iocurrent != 0x00U)
 8002318:	403a      	ands	r2, r7
 800231a:	f000 80b6 	beq.w	800248a <HAL_GPIO_Init+0x196>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800231e:	684c      	ldr	r4, [r1, #4]
 8002320:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002324:	2503      	movs	r5, #3
 8002326:	f024 0a10 	bic.w	sl, r4, #16
 800232a:	fa05 f50e 	lsl.w	r5, r5, lr
 800232e:	f10a 36ff 	add.w	r6, sl, #4294967295
 8002332:	43ed      	mvns	r5, r5
 8002334:	2e01      	cmp	r6, #1
 8002336:	d810      	bhi.n	800235a <HAL_GPIO_Init+0x66>
        temp = GPIOx->OSPEEDR;
 8002338:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800233a:	ea06 0b05 	and.w	fp, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800233e:	68ce      	ldr	r6, [r1, #12]
 8002340:	fa06 f60e 	lsl.w	r6, r6, lr
 8002344:	ea46 060b 	orr.w	r6, r6, fp
        GPIOx->OSPEEDR = temp;
 8002348:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800234a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800234c:	ea26 0707 	bic.w	r7, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002350:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8002354:	409e      	lsls	r6, r3
 8002356:	4337      	orrs	r7, r6
        GPIOx->OTYPER = temp;
 8002358:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800235a:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800235c:	f1ba 0f02 	cmp.w	sl, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002360:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002362:	ea07 0705 	and.w	r7, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002366:	fa06 f60e 	lsl.w	r6, r6, lr
 800236a:	ea46 0607 	orr.w	r6, r6, r7
      GPIOx->PUPDR = temp;
 800236e:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002370:	d114      	bne.n	800239c <HAL_GPIO_Init+0xa8>
        temp = GPIOx->AFR[position >> 3U];
 8002372:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002376:	f003 0b07 	and.w	fp, r3, #7
 800237a:	270f      	movs	r7, #15
 800237c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8002380:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8002384:	f8da 6020 	ldr.w	r6, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002388:	fa07 f70b 	lsl.w	r7, r7, fp
 800238c:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002390:	690e      	ldr	r6, [r1, #16]
 8002392:	fa06 f60b 	lsl.w	r6, r6, fp
 8002396:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 8002398:	f8ca 6020 	str.w	r6, [sl, #32]
      temp = GPIOx->MODER;
 800239c:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800239e:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023a0:	f004 0603 	and.w	r6, r4, #3
 80023a4:	fa06 fe0e 	lsl.w	lr, r6, lr
 80023a8:	ea4e 0505 	orr.w	r5, lr, r5
      GPIOx->MODER = temp;
 80023ac:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023ae:	00e5      	lsls	r5, r4, #3
 80023b0:	d56b      	bpl.n	800248a <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b2:	f8d8 50f4 	ldr.w	r5, [r8, #244]	; 0xf4
 80023b6:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80023ba:	f003 0703 	and.w	r7, r3, #3
 80023be:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c2:	f045 0502 	orr.w	r5, r5, #2
 80023c6:	f106 46b0 	add.w	r6, r6, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80023ca:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023cc:	f8c8 50f4 	str.w	r5, [r8, #244]	; 0xf4
 80023d0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80023d4:	f8d8 50f4 	ldr.w	r5, [r8, #244]	; 0xf4
 80023d8:	f005 0502 	and.w	r5, r5, #2
 80023dc:	9501      	str	r5, [sp, #4]
 80023de:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80023e0:	fa0e f507 	lsl.w	r5, lr, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 80023e4:	f8d6 a008 	ldr.w	sl, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80023e8:	ea2a 0e05 	bic.w	lr, sl, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023ec:	4d31      	ldr	r5, [pc, #196]	; (80024b4 <HAL_GPIO_Init+0x1c0>)
 80023ee:	42a8      	cmp	r0, r5
 80023f0:	d04d      	beq.n	800248e <HAL_GPIO_Init+0x19a>
 80023f2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80023f6:	42a8      	cmp	r0, r5
 80023f8:	d04b      	beq.n	8002492 <HAL_GPIO_Init+0x19e>
 80023fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80023fe:	42a8      	cmp	r0, r5
 8002400:	d049      	beq.n	8002496 <HAL_GPIO_Init+0x1a2>
 8002402:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002406:	42a8      	cmp	r0, r5
 8002408:	d047      	beq.n	800249a <HAL_GPIO_Init+0x1a6>
 800240a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800240e:	42a8      	cmp	r0, r5
 8002410:	d045      	beq.n	800249e <HAL_GPIO_Init+0x1aa>
 8002412:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002416:	42a8      	cmp	r0, r5
 8002418:	d043      	beq.n	80024a2 <HAL_GPIO_Init+0x1ae>
 800241a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800241e:	42a8      	cmp	r0, r5
 8002420:	d041      	beq.n	80024a6 <HAL_GPIO_Init+0x1b2>
 8002422:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002426:	42a8      	cmp	r0, r5
 8002428:	d03f      	beq.n	80024aa <HAL_GPIO_Init+0x1b6>
 800242a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800242e:	42a8      	cmp	r0, r5
 8002430:	d03d      	beq.n	80024ae <HAL_GPIO_Init+0x1ba>
 8002432:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002436:	42a8      	cmp	r0, r5
 8002438:	bf0c      	ite	eq
 800243a:	2509      	moveq	r5, #9
 800243c:	250a      	movne	r5, #10
 800243e:	40bd      	lsls	r5, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002440:	03e7      	lsls	r7, r4, #15
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002442:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002446:	60b5      	str	r5, [r6, #8]
        temp &= ~(iocurrent);
 8002448:	ea6f 0602 	mvn.w	r6, r2
        temp = EXTI_CurrentCPU->IMR1;
 800244c:	f8dc 5000 	ldr.w	r5, [ip]
        temp &= ~(iocurrent);
 8002450:	bf54      	ite	pl
 8002452:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8002454:	4315      	orrmi	r5, r2
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002456:	03a7      	lsls	r7, r4, #14
        EXTI_CurrentCPU->IMR1 = temp;
 8002458:	f8cc 5000 	str.w	r5, [ip]
        temp = EXTI_CurrentCPU->EMR1;
 800245c:	f8dc 5004 	ldr.w	r5, [ip, #4]
        temp &= ~(iocurrent);
 8002460:	bf54      	ite	pl
 8002462:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8002464:	4315      	orrmi	r5, r2
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002466:	02e7      	lsls	r7, r4, #11
        EXTI->RTSR1 = temp;
 8002468:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 800246c:	f8cc 5004 	str.w	r5, [ip, #4]
        temp = EXTI->RTSR1;
 8002470:	f8d9 5000 	ldr.w	r5, [r9]
        temp &= ~(iocurrent);
 8002474:	bf54      	ite	pl
 8002476:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8002478:	4315      	orrmi	r5, r2
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800247a:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR1 = temp;
 800247c:	603d      	str	r5, [r7, #0]
        temp = EXTI->FTSR1;
 800247e:	687d      	ldr	r5, [r7, #4]
        temp &= ~(iocurrent);
 8002480:	bf54      	ite	pl
 8002482:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8002484:	4315      	orrmi	r5, r2
        EXTI->FTSR1 = temp;
 8002486:	f8c9 5004 	str.w	r5, [r9, #4]
    position++;
 800248a:	3301      	adds	r3, #1
 800248c:	e73b      	b.n	8002306 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800248e:	2500      	movs	r5, #0
 8002490:	e7d5      	b.n	800243e <HAL_GPIO_Init+0x14a>
 8002492:	2501      	movs	r5, #1
 8002494:	e7d3      	b.n	800243e <HAL_GPIO_Init+0x14a>
 8002496:	2502      	movs	r5, #2
 8002498:	e7d1      	b.n	800243e <HAL_GPIO_Init+0x14a>
 800249a:	2503      	movs	r5, #3
 800249c:	e7cf      	b.n	800243e <HAL_GPIO_Init+0x14a>
 800249e:	2504      	movs	r5, #4
 80024a0:	e7cd      	b.n	800243e <HAL_GPIO_Init+0x14a>
 80024a2:	2505      	movs	r5, #5
 80024a4:	e7cb      	b.n	800243e <HAL_GPIO_Init+0x14a>
 80024a6:	2506      	movs	r5, #6
 80024a8:	e7c9      	b.n	800243e <HAL_GPIO_Init+0x14a>
 80024aa:	2507      	movs	r5, #7
 80024ac:	e7c7      	b.n	800243e <HAL_GPIO_Init+0x14a>
 80024ae:	2508      	movs	r5, #8
 80024b0:	e7c5      	b.n	800243e <HAL_GPIO_Init+0x14a>
 80024b2:	bf00      	nop
 80024b4:	58020000 	.word	0x58020000
 80024b8:	58024400 	.word	0x58024400
 80024bc:	58000080 	.word	0x58000080

080024c0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024c0:	b10a      	cbz	r2, 80024c6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80024c2:	6181      	str	r1, [r0, #24]
  }
}
 80024c4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80024c6:	0409      	lsls	r1, r1, #16
 80024c8:	e7fb      	b.n	80024c2 <HAL_GPIO_WritePin+0x2>
	...

080024cc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80024cc:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80024ce:	4c10      	ldr	r4, [pc, #64]	; (8002510 <HAL_PWREx_ConfigSupply+0x44>)
 80024d0:	68e3      	ldr	r3, [r4, #12]
 80024d2:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80024d6:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80024d8:	d105      	bne.n	80024e6 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80024da:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80024de:	1a18      	subs	r0, r3, r0
 80024e0:	bf18      	it	ne
 80024e2:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80024e4:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80024e6:	f023 0307 	bic.w	r3, r3, #7
 80024ea:	4318      	orrs	r0, r3
 80024ec:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 80024ee:	f7fe fe93 	bl	8001218 <HAL_GetTick>
 80024f2:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024f4:	6863      	ldr	r3, [r4, #4]
 80024f6:	049b      	lsls	r3, r3, #18
 80024f8:	d501      	bpl.n	80024fe <HAL_PWREx_ConfigSupply+0x32>
  return HAL_OK;
 80024fa:	2000      	movs	r0, #0
 80024fc:	e7f2      	b.n	80024e4 <HAL_PWREx_ConfigSupply+0x18>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024fe:	f7fe fe8b 	bl	8001218 <HAL_GetTick>
 8002502:	1b40      	subs	r0, r0, r5
 8002504:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002508:	d9f4      	bls.n	80024f4 <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
 800250a:	2001      	movs	r0, #1
 800250c:	e7ea      	b.n	80024e4 <HAL_PWREx_ConfigSupply+0x18>
 800250e:	bf00      	nop
 8002510:	58024800 	.word	0x58024800

08002514 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002516:	4604      	mov	r4, r0
 8002518:	2800      	cmp	r0, #0
 800251a:	d074      	beq.n	8002606 <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800251c:	6803      	ldr	r3, [r0, #0]
 800251e:	07d8      	lsls	r0, r3, #31
 8002520:	d45e      	bmi.n	80025e0 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002522:	6823      	ldr	r3, [r4, #0]
 8002524:	0799      	lsls	r1, r3, #30
 8002526:	f100 80b0 	bmi.w	800268a <HAL_RCC_OscConfig+0x176>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800252a:	6823      	ldr	r3, [r4, #0]
 800252c:	06da      	lsls	r2, r3, #27
 800252e:	d527      	bpl.n	8002580 <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002530:	4baa      	ldr	r3, [pc, #680]	; (80027dc <HAL_RCC_OscConfig+0x2c8>)
 8002532:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002534:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002536:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800253a:	2a08      	cmp	r2, #8
 800253c:	d007      	beq.n	800254e <HAL_RCC_OscConfig+0x3a>
 800253e:	2a18      	cmp	r2, #24
 8002540:	f040 810e 	bne.w	8002760 <HAL_RCC_OscConfig+0x24c>
 8002544:	f001 0203 	and.w	r2, r1, #3
 8002548:	2a01      	cmp	r2, #1
 800254a:	f040 8109 	bne.w	8002760 <HAL_RCC_OscConfig+0x24c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	05db      	lsls	r3, r3, #23
 8002552:	d502      	bpl.n	800255a <HAL_RCC_OscConfig+0x46>
 8002554:	69e3      	ldr	r3, [r4, #28]
 8002556:	2b80      	cmp	r3, #128	; 0x80
 8002558:	d155      	bne.n	8002606 <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800255a:	f7fe fe63 	bl	8001224 <HAL_GetREVID>
 800255e:	f241 0303 	movw	r3, #4099	; 0x1003
 8002562:	6a21      	ldr	r1, [r4, #32]
 8002564:	4298      	cmp	r0, r3
 8002566:	4b9d      	ldr	r3, [pc, #628]	; (80027dc <HAL_RCC_OscConfig+0x2c8>)
 8002568:	f200 80f3 	bhi.w	8002752 <HAL_RCC_OscConfig+0x23e>
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	2920      	cmp	r1, #32
 8002570:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 8002574:	bf0c      	ite	eq
 8002576:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 800257a:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 800257e:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002580:	6823      	ldr	r3, [r4, #0]
 8002582:	0719      	lsls	r1, r3, #28
 8002584:	f100 812e 	bmi.w	80027e4 <HAL_RCC_OscConfig+0x2d0>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002588:	6823      	ldr	r3, [r4, #0]
 800258a:	069a      	lsls	r2, r3, #26
 800258c:	f100 814f 	bmi.w	800282e <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002590:	6823      	ldr	r3, [r4, #0]
 8002592:	075d      	lsls	r5, r3, #29
 8002594:	d51e      	bpl.n	80025d4 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002596:	4d92      	ldr	r5, [pc, #584]	; (80027e0 <HAL_RCC_OscConfig+0x2cc>)
 8002598:	682b      	ldr	r3, [r5, #0]
 800259a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800259e:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025a0:	f7fe fe3a 	bl	8001218 <HAL_GetTick>
 80025a4:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025a6:	682b      	ldr	r3, [r5, #0]
 80025a8:	05da      	lsls	r2, r3, #23
 80025aa:	f140 8165 	bpl.w	8002878 <HAL_RCC_OscConfig+0x364>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025ae:	68a3      	ldr	r3, [r4, #8]
 80025b0:	4d8a      	ldr	r5, [pc, #552]	; (80027dc <HAL_RCC_OscConfig+0x2c8>)
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	f040 8167 	bne.w	8002886 <HAL_RCC_OscConfig+0x372>
 80025b8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025c0:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80025c4:	f7fe fe28 	bl	8001218 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80025c8:	4e84      	ldr	r6, [pc, #528]	; (80027dc <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80025ca:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80025cc:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80025ce:	079b      	lsls	r3, r3, #30
 80025d0:	f140 817f 	bpl.w	80028d2 <HAL_RCC_OscConfig+0x3be>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80025d6:	2900      	cmp	r1, #0
 80025d8:	f040 8182 	bne.w	80028e0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80025dc:	2000      	movs	r0, #0
 80025de:	e02a      	b.n	8002636 <HAL_RCC_OscConfig+0x122>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025e0:	4b7e      	ldr	r3, [pc, #504]	; (80027dc <HAL_RCC_OscConfig+0x2c8>)
 80025e2:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025e4:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025e6:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80025ea:	2a10      	cmp	r2, #16
 80025ec:	d005      	beq.n	80025fa <HAL_RCC_OscConfig+0xe6>
 80025ee:	2a18      	cmp	r2, #24
 80025f0:	d10b      	bne.n	800260a <HAL_RCC_OscConfig+0xf6>
 80025f2:	f001 0203 	and.w	r2, r1, #3
 80025f6:	2a02      	cmp	r2, #2
 80025f8:	d107      	bne.n	800260a <HAL_RCC_OscConfig+0xf6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	039a      	lsls	r2, r3, #14
 80025fe:	d590      	bpl.n	8002522 <HAL_RCC_OscConfig+0xe>
 8002600:	6863      	ldr	r3, [r4, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d18d      	bne.n	8002522 <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 8002606:	2001      	movs	r0, #1
 8002608:	e015      	b.n	8002636 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800260a:	6862      	ldr	r2, [r4, #4]
 800260c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002610:	d112      	bne.n	8002638 <HAL_RCC_OscConfig+0x124>
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002618:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800261a:	f7fe fdfd 	bl	8001218 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800261e:	4e6f      	ldr	r6, [pc, #444]	; (80027dc <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8002620:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002622:	6833      	ldr	r3, [r6, #0]
 8002624:	039b      	lsls	r3, r3, #14
 8002626:	f53f af7c 	bmi.w	8002522 <HAL_RCC_OscConfig+0xe>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800262a:	f7fe fdf5 	bl	8001218 <HAL_GetTick>
 800262e:	1b40      	subs	r0, r0, r5
 8002630:	2864      	cmp	r0, #100	; 0x64
 8002632:	d9f6      	bls.n	8002622 <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 8002634:	2003      	movs	r0, #3
}
 8002636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002638:	4d68      	ldr	r5, [pc, #416]	; (80027dc <HAL_RCC_OscConfig+0x2c8>)
 800263a:	682b      	ldr	r3, [r5, #0]
 800263c:	b99a      	cbnz	r2, 8002666 <HAL_RCC_OscConfig+0x152>
 800263e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002642:	602b      	str	r3, [r5, #0]
 8002644:	682b      	ldr	r3, [r5, #0]
 8002646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800264a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800264c:	f7fe fde4 	bl	8001218 <HAL_GetTick>
 8002650:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002652:	682b      	ldr	r3, [r5, #0]
 8002654:	039f      	lsls	r7, r3, #14
 8002656:	f57f af64 	bpl.w	8002522 <HAL_RCC_OscConfig+0xe>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800265a:	f7fe fddd 	bl	8001218 <HAL_GetTick>
 800265e:	1b80      	subs	r0, r0, r6
 8002660:	2864      	cmp	r0, #100	; 0x64
 8002662:	d9f6      	bls.n	8002652 <HAL_RCC_OscConfig+0x13e>
 8002664:	e7e6      	b.n	8002634 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002666:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800266a:	d107      	bne.n	800267c <HAL_RCC_OscConfig+0x168>
 800266c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002670:	602b      	str	r3, [r5, #0]
 8002672:	682b      	ldr	r3, [r5, #0]
 8002674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002678:	602b      	str	r3, [r5, #0]
 800267a:	e7ce      	b.n	800261a <HAL_RCC_OscConfig+0x106>
 800267c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002680:	602b      	str	r3, [r5, #0]
 8002682:	682b      	ldr	r3, [r5, #0]
 8002684:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002688:	e7f6      	b.n	8002678 <HAL_RCC_OscConfig+0x164>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800268a:	4b54      	ldr	r3, [pc, #336]	; (80027dc <HAL_RCC_OscConfig+0x2c8>)
 800268c:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800268e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002690:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 8002694:	d003      	beq.n	800269e <HAL_RCC_OscConfig+0x18a>
 8002696:	2a18      	cmp	r2, #24
 8002698:	d11f      	bne.n	80026da <HAL_RCC_OscConfig+0x1c6>
 800269a:	078e      	lsls	r6, r1, #30
 800269c:	d11d      	bne.n	80026da <HAL_RCC_OscConfig+0x1c6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	075d      	lsls	r5, r3, #29
 80026a2:	d502      	bpl.n	80026aa <HAL_RCC_OscConfig+0x196>
 80026a4:	68e3      	ldr	r3, [r4, #12]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0ad      	beq.n	8002606 <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026aa:	f7fe fdbb 	bl	8001224 <HAL_GetREVID>
 80026ae:	f241 0303 	movw	r3, #4099	; 0x1003
 80026b2:	6921      	ldr	r1, [r4, #16]
 80026b4:	4298      	cmp	r0, r3
 80026b6:	4b49      	ldr	r3, [pc, #292]	; (80027dc <HAL_RCC_OscConfig+0x2c8>)
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	d809      	bhi.n	80026d0 <HAL_RCC_OscConfig+0x1bc>
 80026bc:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 80026c0:	2940      	cmp	r1, #64	; 0x40
 80026c2:	bf0c      	ite	eq
 80026c4:	f442 3200 	orreq.w	r2, r2, #131072	; 0x20000
 80026c8:	ea42 3201 	orrne.w	r2, r2, r1, lsl #12
 80026cc:	605a      	str	r2, [r3, #4]
 80026ce:	e72c      	b.n	800252a <HAL_RCC_OscConfig+0x16>
 80026d0:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 80026d4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80026d8:	e7f8      	b.n	80026cc <HAL_RCC_OscConfig+0x1b8>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026da:	68e1      	ldr	r1, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026dc:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026de:	b339      	cbz	r1, 8002730 <HAL_RCC_OscConfig+0x21c>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026e0:	f022 0219 	bic.w	r2, r2, #25
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026e4:	4d3d      	ldr	r5, [pc, #244]	; (80027dc <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026e6:	430a      	orrs	r2, r1
 80026e8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80026ea:	f7fe fd95 	bl	8001218 <HAL_GetTick>
 80026ee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026f0:	682b      	ldr	r3, [r5, #0]
 80026f2:	0758      	lsls	r0, r3, #29
 80026f4:	d511      	bpl.n	800271a <HAL_RCC_OscConfig+0x206>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f6:	f7fe fd95 	bl	8001224 <HAL_GetREVID>
 80026fa:	f241 0303 	movw	r3, #4099	; 0x1003
 80026fe:	6922      	ldr	r2, [r4, #16]
 8002700:	4298      	cmp	r0, r3
 8002702:	686b      	ldr	r3, [r5, #4]
 8002704:	d80f      	bhi.n	8002726 <HAL_RCC_OscConfig+0x212>
 8002706:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800270a:	2a40      	cmp	r2, #64	; 0x40
 800270c:	bf0c      	ite	eq
 800270e:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8002712:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8002716:	606b      	str	r3, [r5, #4]
 8002718:	e707      	b.n	800252a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800271a:	f7fe fd7d 	bl	8001218 <HAL_GetTick>
 800271e:	1b80      	subs	r0, r0, r6
 8002720:	2802      	cmp	r0, #2
 8002722:	d9e5      	bls.n	80026f0 <HAL_RCC_OscConfig+0x1dc>
 8002724:	e786      	b.n	8002634 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002726:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800272a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800272e:	e7f2      	b.n	8002716 <HAL_RCC_OscConfig+0x202>
        __HAL_RCC_HSI_DISABLE();
 8002730:	f022 0201 	bic.w	r2, r2, #1
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002734:	4e29      	ldr	r6, [pc, #164]	; (80027dc <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 8002736:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002738:	f7fe fd6e 	bl	8001218 <HAL_GetTick>
 800273c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800273e:	6833      	ldr	r3, [r6, #0]
 8002740:	0759      	lsls	r1, r3, #29
 8002742:	f57f aef2 	bpl.w	800252a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002746:	f7fe fd67 	bl	8001218 <HAL_GetTick>
 800274a:	1b40      	subs	r0, r0, r5
 800274c:	2802      	cmp	r0, #2
 800274e:	d9f6      	bls.n	800273e <HAL_RCC_OscConfig+0x22a>
 8002750:	e770      	b.n	8002634 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002752:	68da      	ldr	r2, [r3, #12]
 8002754:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 8002758:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800275c:	60da      	str	r2, [r3, #12]
 800275e:	e70f      	b.n	8002580 <HAL_RCC_OscConfig+0x6c>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002760:	69e2      	ldr	r2, [r4, #28]
 8002762:	b34a      	cbz	r2, 80027b8 <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_CSI_ENABLE();
 8002764:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002766:	4d1d      	ldr	r5, [pc, #116]	; (80027dc <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_CSI_ENABLE();
 8002768:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800276c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800276e:	f7fe fd53 	bl	8001218 <HAL_GetTick>
 8002772:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002774:	682b      	ldr	r3, [r5, #0]
 8002776:	05df      	lsls	r7, r3, #23
 8002778:	d511      	bpl.n	800279e <HAL_RCC_OscConfig+0x28a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800277a:	f7fe fd53 	bl	8001224 <HAL_GetREVID>
 800277e:	f241 0303 	movw	r3, #4099	; 0x1003
 8002782:	6a22      	ldr	r2, [r4, #32]
 8002784:	4298      	cmp	r0, r3
 8002786:	d810      	bhi.n	80027aa <HAL_RCC_OscConfig+0x296>
 8002788:	686b      	ldr	r3, [r5, #4]
 800278a:	2a20      	cmp	r2, #32
 800278c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002790:	bf0c      	ite	eq
 8002792:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8002796:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800279a:	606b      	str	r3, [r5, #4]
 800279c:	e6f0      	b.n	8002580 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800279e:	f7fe fd3b 	bl	8001218 <HAL_GetTick>
 80027a2:	1b80      	subs	r0, r0, r6
 80027a4:	2802      	cmp	r0, #2
 80027a6:	d9e5      	bls.n	8002774 <HAL_RCC_OscConfig+0x260>
 80027a8:	e744      	b.n	8002634 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027aa:	68eb      	ldr	r3, [r5, #12]
 80027ac:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80027b0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80027b4:	60eb      	str	r3, [r5, #12]
 80027b6:	e6e3      	b.n	8002580 <HAL_RCC_OscConfig+0x6c>
        __HAL_RCC_CSI_DISABLE();
 80027b8:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027ba:	4e08      	ldr	r6, [pc, #32]	; (80027dc <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_CSI_DISABLE();
 80027bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027c0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80027c2:	f7fe fd29 	bl	8001218 <HAL_GetTick>
 80027c6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027c8:	6833      	ldr	r3, [r6, #0]
 80027ca:	05d8      	lsls	r0, r3, #23
 80027cc:	f57f aed8 	bpl.w	8002580 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80027d0:	f7fe fd22 	bl	8001218 <HAL_GetTick>
 80027d4:	1b40      	subs	r0, r0, r5
 80027d6:	2802      	cmp	r0, #2
 80027d8:	d9f6      	bls.n	80027c8 <HAL_RCC_OscConfig+0x2b4>
 80027da:	e72b      	b.n	8002634 <HAL_RCC_OscConfig+0x120>
 80027dc:	58024400 	.word	0x58024400
 80027e0:	58024800 	.word	0x58024800
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027e4:	6963      	ldr	r3, [r4, #20]
 80027e6:	4d96      	ldr	r5, [pc, #600]	; (8002a40 <HAL_RCC_OscConfig+0x52c>)
 80027e8:	b183      	cbz	r3, 800280c <HAL_RCC_OscConfig+0x2f8>
      __HAL_RCC_LSI_ENABLE();
 80027ea:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80027ec:	f043 0301 	orr.w	r3, r3, #1
 80027f0:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80027f2:	f7fe fd11 	bl	8001218 <HAL_GetTick>
 80027f6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027f8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80027fa:	079b      	lsls	r3, r3, #30
 80027fc:	f53f aec4 	bmi.w	8002588 <HAL_RCC_OscConfig+0x74>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002800:	f7fe fd0a 	bl	8001218 <HAL_GetTick>
 8002804:	1b80      	subs	r0, r0, r6
 8002806:	2802      	cmp	r0, #2
 8002808:	d9f6      	bls.n	80027f8 <HAL_RCC_OscConfig+0x2e4>
 800280a:	e713      	b.n	8002634 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_LSI_DISABLE();
 800280c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800280e:	f023 0301 	bic.w	r3, r3, #1
 8002812:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002814:	f7fe fd00 	bl	8001218 <HAL_GetTick>
 8002818:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800281a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800281c:	079f      	lsls	r7, r3, #30
 800281e:	f57f aeb3 	bpl.w	8002588 <HAL_RCC_OscConfig+0x74>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002822:	f7fe fcf9 	bl	8001218 <HAL_GetTick>
 8002826:	1b80      	subs	r0, r0, r6
 8002828:	2802      	cmp	r0, #2
 800282a:	d9f6      	bls.n	800281a <HAL_RCC_OscConfig+0x306>
 800282c:	e702      	b.n	8002634 <HAL_RCC_OscConfig+0x120>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800282e:	69a3      	ldr	r3, [r4, #24]
 8002830:	4d83      	ldr	r5, [pc, #524]	; (8002a40 <HAL_RCC_OscConfig+0x52c>)
 8002832:	b183      	cbz	r3, 8002856 <HAL_RCC_OscConfig+0x342>
      __HAL_RCC_HSI48_ENABLE();
 8002834:	682b      	ldr	r3, [r5, #0]
 8002836:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800283a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800283c:	f7fe fcec 	bl	8001218 <HAL_GetTick>
 8002840:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002842:	682b      	ldr	r3, [r5, #0]
 8002844:	0498      	lsls	r0, r3, #18
 8002846:	f53f aea3 	bmi.w	8002590 <HAL_RCC_OscConfig+0x7c>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800284a:	f7fe fce5 	bl	8001218 <HAL_GetTick>
 800284e:	1b80      	subs	r0, r0, r6
 8002850:	2802      	cmp	r0, #2
 8002852:	d9f6      	bls.n	8002842 <HAL_RCC_OscConfig+0x32e>
 8002854:	e6ee      	b.n	8002634 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSI48_DISABLE();
 8002856:	682b      	ldr	r3, [r5, #0]
 8002858:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800285c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800285e:	f7fe fcdb 	bl	8001218 <HAL_GetTick>
 8002862:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002864:	682b      	ldr	r3, [r5, #0]
 8002866:	0499      	lsls	r1, r3, #18
 8002868:	f57f ae92 	bpl.w	8002590 <HAL_RCC_OscConfig+0x7c>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800286c:	f7fe fcd4 	bl	8001218 <HAL_GetTick>
 8002870:	1b80      	subs	r0, r0, r6
 8002872:	2802      	cmp	r0, #2
 8002874:	d9f6      	bls.n	8002864 <HAL_RCC_OscConfig+0x350>
 8002876:	e6dd      	b.n	8002634 <HAL_RCC_OscConfig+0x120>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002878:	f7fe fcce 	bl	8001218 <HAL_GetTick>
 800287c:	1b80      	subs	r0, r0, r6
 800287e:	2864      	cmp	r0, #100	; 0x64
 8002880:	f67f ae91 	bls.w	80025a6 <HAL_RCC_OscConfig+0x92>
 8002884:	e6d6      	b.n	8002634 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002886:	b9b3      	cbnz	r3, 80028b6 <HAL_RCC_OscConfig+0x3a2>
 8002888:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800288a:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800288e:	f023 0301 	bic.w	r3, r3, #1
 8002892:	672b      	str	r3, [r5, #112]	; 0x70
 8002894:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002896:	f023 0304 	bic.w	r3, r3, #4
 800289a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800289c:	f7fe fcbc 	bl	8001218 <HAL_GetTick>
 80028a0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028a2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80028a4:	0798      	lsls	r0, r3, #30
 80028a6:	f57f ae95 	bpl.w	80025d4 <HAL_RCC_OscConfig+0xc0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028aa:	f7fe fcb5 	bl	8001218 <HAL_GetTick>
 80028ae:	1b80      	subs	r0, r0, r6
 80028b0:	42b8      	cmp	r0, r7
 80028b2:	d9f6      	bls.n	80028a2 <HAL_RCC_OscConfig+0x38e>
 80028b4:	e6be      	b.n	8002634 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028b6:	2b05      	cmp	r3, #5
 80028b8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80028ba:	d103      	bne.n	80028c4 <HAL_RCC_OscConfig+0x3b0>
 80028bc:	f043 0304 	orr.w	r3, r3, #4
 80028c0:	672b      	str	r3, [r5, #112]	; 0x70
 80028c2:	e679      	b.n	80025b8 <HAL_RCC_OscConfig+0xa4>
 80028c4:	f023 0301 	bic.w	r3, r3, #1
 80028c8:	672b      	str	r3, [r5, #112]	; 0x70
 80028ca:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80028cc:	f023 0304 	bic.w	r3, r3, #4
 80028d0:	e675      	b.n	80025be <HAL_RCC_OscConfig+0xaa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028d2:	f7fe fca1 	bl	8001218 <HAL_GetTick>
 80028d6:	1b40      	subs	r0, r0, r5
 80028d8:	42b8      	cmp	r0, r7
 80028da:	f67f ae77 	bls.w	80025cc <HAL_RCC_OscConfig+0xb8>
 80028de:	e6a9      	b.n	8002634 <HAL_RCC_OscConfig+0x120>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80028e0:	4d57      	ldr	r5, [pc, #348]	; (8002a40 <HAL_RCC_OscConfig+0x52c>)
 80028e2:	692b      	ldr	r3, [r5, #16]
 80028e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028e8:	2b18      	cmp	r3, #24
 80028ea:	d07a      	beq.n	80029e2 <HAL_RCC_OscConfig+0x4ce>
        __HAL_RCC_PLL_DISABLE();
 80028ec:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028ee:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 80028f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028f4:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028f6:	d167      	bne.n	80029c8 <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
 80028f8:	f7fe fc8e 	bl	8001218 <HAL_GetTick>
 80028fc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028fe:	682b      	ldr	r3, [r5, #0]
 8002900:	0199      	lsls	r1, r3, #6
 8002902:	d45b      	bmi.n	80029bc <HAL_RCC_OscConfig+0x4a8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002904:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002906:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002908:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 800290c:	f023 0303 	bic.w	r3, r3, #3
 8002910:	4313      	orrs	r3, r2
 8002912:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002914:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002918:	62ab      	str	r3, [r5, #40]	; 0x28
 800291a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800291c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800291e:	3b01      	subs	r3, #1
 8002920:	3a01      	subs	r2, #1
 8002922:	025b      	lsls	r3, r3, #9
 8002924:	0412      	lsls	r2, r2, #16
 8002926:	b29b      	uxth	r3, r3
 8002928:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800292c:	4313      	orrs	r3, r2
 800292e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002930:	3a01      	subs	r2, #1
 8002932:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002936:	4313      	orrs	r3, r2
 8002938:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800293a:	3a01      	subs	r2, #1
 800293c:	0612      	lsls	r2, r2, #24
 800293e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8002942:	4313      	orrs	r3, r2
 8002944:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8002946:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002948:	f023 0301 	bic.w	r3, r3, #1
 800294c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800294e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002950:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002952:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002956:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800295a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800295e:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002960:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002962:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002964:	f023 030c 	bic.w	r3, r3, #12
 8002968:	4313      	orrs	r3, r2
 800296a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800296c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800296e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002970:	f023 0302 	bic.w	r3, r3, #2
 8002974:	4313      	orrs	r3, r2
 8002976:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002978:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800297a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800297e:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002980:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002982:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002986:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002988:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800298a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800298e:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8002990:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8002998:	682b      	ldr	r3, [r5, #0]
 800299a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800299e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80029a0:	f7fe fc3a 	bl	8001218 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029a4:	4d26      	ldr	r5, [pc, #152]	; (8002a40 <HAL_RCC_OscConfig+0x52c>)
        tickstart = HAL_GetTick();
 80029a6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029a8:	682b      	ldr	r3, [r5, #0]
 80029aa:	019a      	lsls	r2, r3, #6
 80029ac:	f53f ae16 	bmi.w	80025dc <HAL_RCC_OscConfig+0xc8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b0:	f7fe fc32 	bl	8001218 <HAL_GetTick>
 80029b4:	1b00      	subs	r0, r0, r4
 80029b6:	2802      	cmp	r0, #2
 80029b8:	d9f6      	bls.n	80029a8 <HAL_RCC_OscConfig+0x494>
 80029ba:	e63b      	b.n	8002634 <HAL_RCC_OscConfig+0x120>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029bc:	f7fe fc2c 	bl	8001218 <HAL_GetTick>
 80029c0:	1b80      	subs	r0, r0, r6
 80029c2:	2802      	cmp	r0, #2
 80029c4:	d99b      	bls.n	80028fe <HAL_RCC_OscConfig+0x3ea>
 80029c6:	e635      	b.n	8002634 <HAL_RCC_OscConfig+0x120>
        tickstart = HAL_GetTick();
 80029c8:	f7fe fc26 	bl	8001218 <HAL_GetTick>
 80029cc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029ce:	682b      	ldr	r3, [r5, #0]
 80029d0:	019b      	lsls	r3, r3, #6
 80029d2:	f57f ae03 	bpl.w	80025dc <HAL_RCC_OscConfig+0xc8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d6:	f7fe fc1f 	bl	8001218 <HAL_GetTick>
 80029da:	1b00      	subs	r0, r0, r4
 80029dc:	2802      	cmp	r0, #2
 80029de:	d9f6      	bls.n	80029ce <HAL_RCC_OscConfig+0x4ba>
 80029e0:	e628      	b.n	8002634 <HAL_RCC_OscConfig+0x120>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029e2:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 80029e4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80029e6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029e8:	f43f ae0d 	beq.w	8002606 <HAL_RCC_OscConfig+0xf2>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ec:	f002 0103 	and.w	r1, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029f0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80029f2:	4281      	cmp	r1, r0
 80029f4:	f47f ae07 	bne.w	8002606 <HAL_RCC_OscConfig+0xf2>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80029f8:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80029fe:	428a      	cmp	r2, r1
 8002a00:	f47f ae01 	bne.w	8002606 <HAL_RCC_OscConfig+0xf2>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a04:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002a06:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8002a0a:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a0c:	4291      	cmp	r1, r2
 8002a0e:	f47f adfa 	bne.w	8002606 <HAL_RCC_OscConfig+0xf2>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a12:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002a14:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8002a18:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a1a:	4291      	cmp	r1, r2
 8002a1c:	f47f adf3 	bne.w	8002606 <HAL_RCC_OscConfig+0xf2>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a20:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002a22:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8002a26:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a28:	4291      	cmp	r1, r2
 8002a2a:	f47f adec 	bne.w	8002606 <HAL_RCC_OscConfig+0xf2>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002a2e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002a30:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002a34:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a36:	4293      	cmp	r3, r2
 8002a38:	f43f add0 	beq.w	80025dc <HAL_RCC_OscConfig+0xc8>
 8002a3c:	e5e3      	b.n	8002606 <HAL_RCC_OscConfig+0xf2>
 8002a3e:	bf00      	nop
 8002a40:	58024400 	.word	0x58024400

08002a44 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a44:	4b48      	ldr	r3, [pc, #288]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x124>)
 8002a46:	691a      	ldr	r2, [r3, #16]
 8002a48:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8002a4c:	2a10      	cmp	r2, #16
{
 8002a4e:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a50:	f000 8086 	beq.w	8002b60 <HAL_RCC_GetSysClockFreq+0x11c>
 8002a54:	2a18      	cmp	r2, #24
 8002a56:	d00c      	beq.n	8002a72 <HAL_RCC_GetSysClockFreq+0x2e>
 8002a58:	2a00      	cmp	r2, #0
 8002a5a:	f040 8083 	bne.w	8002b64 <HAL_RCC_GetSysClockFreq+0x120>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	4842      	ldr	r0, [pc, #264]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x128>)
 8002a62:	f012 0f20 	tst.w	r2, #32
 8002a66:	d003      	beq.n	8002a70 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002a6e:	40d8      	lsrs	r0, r3
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8002a70:	bd30      	pop	{r4, r5, pc}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002a72:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002a74:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    if (pllm != 0U)
 8002a78:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002a7c:	f3c5 1005 	ubfx	r0, r5, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002a80:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    if (pllm != 0U)
 8002a82:	d0f5      	beq.n	8002a70 <HAL_RCC_GetSysClockFreq+0x2c>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002a84:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002a88:	f002 0201 	and.w	r2, r2, #1
 8002a8c:	ee07 0a90 	vmov	s15, r0
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002a90:	f001 0103 	and.w	r1, r1, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002a94:	4362      	muls	r2, r4
 8002a96:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002a9a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002a9e:	2901      	cmp	r1, #1
 8002aa0:	ee07 2a90 	vmov	s15, r2
 8002aa4:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 8002aa8:	d04c      	beq.n	8002b44 <HAL_RCC_GetSysClockFreq+0x100>
 8002aaa:	2902      	cmp	r1, #2
 8002aac:	d03c      	beq.n	8002b28 <HAL_RCC_GetSysClockFreq+0xe4>
 8002aae:	2900      	cmp	r1, #0
 8002ab0:	d148      	bne.n	8002b44 <HAL_RCC_GetSysClockFreq+0x100>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	0692      	lsls	r2, r2, #26
 8002ab6:	d527      	bpl.n	8002b08 <HAL_RCC_GetSysClockFreq+0xc4>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002ab8:	6819      	ldr	r1, [r3, #0]
 8002aba:	4a2c      	ldr	r2, [pc, #176]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x128>)
 8002abc:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002ac2:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ac8:	ee07 2a10 	vmov	s14, r2
 8002acc:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8002ad0:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8002ad4:	ee06 3a90 	vmov	s13, r3
 8002ad8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002adc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ae0:	ee77 7a86 	vadd.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002ae4:	4b20      	ldr	r3, [pc, #128]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x124>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ae6:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aec:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002af0:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002af2:	ee07 3a10 	vmov	s14, r3
 8002af6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8002afa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002afe:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8002b02:	ee17 0a90 	vmov	r0, s15
 8002b06:	e7b3      	b.n	8002a70 <HAL_RCC_GetSysClockFreq+0x2c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b0e:	ee07 3a10 	vmov	s14, r3
 8002b12:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002b16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b1a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002b1e:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8002b70 <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002b22:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8002b26:	e7dd      	b.n	8002ae4 <HAL_RCC_GetSysClockFreq+0xa0>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b2e:	ee07 3a10 	vmov	s14, r3
 8002b32:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002b36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b3a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002b3e:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8002b74 <HAL_RCC_GetSysClockFreq+0x130>
 8002b42:	e7ee      	b.n	8002b22 <HAL_RCC_GetSysClockFreq+0xde>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b4a:	ee07 3a10 	vmov	s14, r3
 8002b4e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002b52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b56:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002b5a:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8002b78 <HAL_RCC_GetSysClockFreq+0x134>
 8002b5e:	e7e0      	b.n	8002b22 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b60:	4806      	ldr	r0, [pc, #24]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x138>)
 8002b62:	e785      	b.n	8002a70 <HAL_RCC_GetSysClockFreq+0x2c>
    sysclockfreq = CSI_VALUE;
 8002b64:	4806      	ldr	r0, [pc, #24]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002b66:	e783      	b.n	8002a70 <HAL_RCC_GetSysClockFreq+0x2c>
 8002b68:	58024400 	.word	0x58024400
 8002b6c:	03d09000 	.word	0x03d09000
 8002b70:	4c742400 	.word	0x4c742400
 8002b74:	4bbebc20 	.word	0x4bbebc20
 8002b78:	4a742400 	.word	0x4a742400
 8002b7c:	017d7840 	.word	0x017d7840
 8002b80:	003d0900 	.word	0x003d0900

08002b84 <HAL_RCC_ClockConfig>:
{
 8002b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b88:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002b8a:	4604      	mov	r4, r0
 8002b8c:	b910      	cbnz	r0, 8002b94 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002b8e:	2001      	movs	r0, #1
}
 8002b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b94:	4a88      	ldr	r2, [pc, #544]	; (8002db8 <HAL_RCC_ClockConfig+0x234>)
 8002b96:	6813      	ldr	r3, [r2, #0]
 8002b98:	f003 030f 	and.w	r3, r3, #15
 8002b9c:	428b      	cmp	r3, r1
 8002b9e:	f0c0 8093 	bcc.w	8002cc8 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ba2:	6823      	ldr	r3, [r4, #0]
 8002ba4:	075f      	lsls	r7, r3, #29
 8002ba6:	f100 809b 	bmi.w	8002ce0 <HAL_RCC_ClockConfig+0x15c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002baa:	071e      	lsls	r6, r3, #28
 8002bac:	d50b      	bpl.n	8002bc6 <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002bae:	4983      	ldr	r1, [pc, #524]	; (8002dbc <HAL_RCC_ClockConfig+0x238>)
 8002bb0:	6966      	ldr	r6, [r4, #20]
 8002bb2:	69c8      	ldr	r0, [r1, #28]
 8002bb4:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8002bb8:	4286      	cmp	r6, r0
 8002bba:	d904      	bls.n	8002bc6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002bbc:	69ca      	ldr	r2, [r1, #28]
 8002bbe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002bc2:	4332      	orrs	r2, r6
 8002bc4:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc6:	06d8      	lsls	r0, r3, #27
 8002bc8:	d50b      	bpl.n	8002be2 <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002bca:	497c      	ldr	r1, [pc, #496]	; (8002dbc <HAL_RCC_ClockConfig+0x238>)
 8002bcc:	69a6      	ldr	r6, [r4, #24]
 8002bce:	69c8      	ldr	r0, [r1, #28]
 8002bd0:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8002bd4:	4286      	cmp	r6, r0
 8002bd6:	d904      	bls.n	8002be2 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002bd8:	69ca      	ldr	r2, [r1, #28]
 8002bda:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002bde:	4332      	orrs	r2, r6
 8002be0:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002be2:	0699      	lsls	r1, r3, #26
 8002be4:	d50b      	bpl.n	8002bfe <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002be6:	4975      	ldr	r1, [pc, #468]	; (8002dbc <HAL_RCC_ClockConfig+0x238>)
 8002be8:	69e6      	ldr	r6, [r4, #28]
 8002bea:	6a08      	ldr	r0, [r1, #32]
 8002bec:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8002bf0:	4286      	cmp	r6, r0
 8002bf2:	d904      	bls.n	8002bfe <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002bf4:	6a0a      	ldr	r2, [r1, #32]
 8002bf6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002bfa:	4332      	orrs	r2, r6
 8002bfc:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bfe:	079a      	lsls	r2, r3, #30
 8002c00:	d50b      	bpl.n	8002c1a <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c02:	496e      	ldr	r1, [pc, #440]	; (8002dbc <HAL_RCC_ClockConfig+0x238>)
 8002c04:	68e6      	ldr	r6, [r4, #12]
 8002c06:	6988      	ldr	r0, [r1, #24]
 8002c08:	f000 000f 	and.w	r0, r0, #15
 8002c0c:	4286      	cmp	r6, r0
 8002c0e:	d904      	bls.n	8002c1a <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c10:	698a      	ldr	r2, [r1, #24]
 8002c12:	f022 020f 	bic.w	r2, r2, #15
 8002c16:	4332      	orrs	r2, r6
 8002c18:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c1a:	07df      	lsls	r7, r3, #31
 8002c1c:	d46e      	bmi.n	8002cfc <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c1e:	6823      	ldr	r3, [r4, #0]
 8002c20:	079e      	lsls	r6, r3, #30
 8002c22:	f100 80a1 	bmi.w	8002d68 <HAL_RCC_ClockConfig+0x1e4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c26:	4964      	ldr	r1, [pc, #400]	; (8002db8 <HAL_RCC_ClockConfig+0x234>)
 8002c28:	680a      	ldr	r2, [r1, #0]
 8002c2a:	f002 020f 	and.w	r2, r2, #15
 8002c2e:	42aa      	cmp	r2, r5
 8002c30:	f200 80a8 	bhi.w	8002d84 <HAL_RCC_ClockConfig+0x200>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c34:	0758      	lsls	r0, r3, #29
 8002c36:	f100 80b1 	bmi.w	8002d9c <HAL_RCC_ClockConfig+0x218>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c3a:	0719      	lsls	r1, r3, #28
 8002c3c:	d50b      	bpl.n	8002c56 <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c3e:	495f      	ldr	r1, [pc, #380]	; (8002dbc <HAL_RCC_ClockConfig+0x238>)
 8002c40:	6965      	ldr	r5, [r4, #20]
 8002c42:	69c8      	ldr	r0, [r1, #28]
 8002c44:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8002c48:	4285      	cmp	r5, r0
 8002c4a:	d204      	bcs.n	8002c56 <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c4c:	69ca      	ldr	r2, [r1, #28]
 8002c4e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002c52:	432a      	orrs	r2, r5
 8002c54:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c56:	06da      	lsls	r2, r3, #27
 8002c58:	d50b      	bpl.n	8002c72 <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c5a:	4958      	ldr	r1, [pc, #352]	; (8002dbc <HAL_RCC_ClockConfig+0x238>)
 8002c5c:	69a5      	ldr	r5, [r4, #24]
 8002c5e:	69c8      	ldr	r0, [r1, #28]
 8002c60:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8002c64:	4285      	cmp	r5, r0
 8002c66:	d204      	bcs.n	8002c72 <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c68:	69ca      	ldr	r2, [r1, #28]
 8002c6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c6e:	432a      	orrs	r2, r5
 8002c70:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c72:	069b      	lsls	r3, r3, #26
 8002c74:	d50b      	bpl.n	8002c8e <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c76:	4a51      	ldr	r2, [pc, #324]	; (8002dbc <HAL_RCC_ClockConfig+0x238>)
 8002c78:	69e0      	ldr	r0, [r4, #28]
 8002c7a:	6a11      	ldr	r1, [r2, #32]
 8002c7c:	f001 0170 	and.w	r1, r1, #112	; 0x70
 8002c80:	4288      	cmp	r0, r1
 8002c82:	d204      	bcs.n	8002c8e <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002c84:	6a13      	ldr	r3, [r2, #32]
 8002c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c8a:	4303      	orrs	r3, r0
 8002c8c:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002c8e:	f7ff fed9 	bl	8002a44 <HAL_RCC_GetSysClockFreq>
 8002c92:	494a      	ldr	r1, [pc, #296]	; (8002dbc <HAL_RCC_ClockConfig+0x238>)
 8002c94:	4a4a      	ldr	r2, [pc, #296]	; (8002dc0 <HAL_RCC_ClockConfig+0x23c>)
 8002c96:	698b      	ldr	r3, [r1, #24]
 8002c98:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8002c9c:	5cd3      	ldrb	r3, [r2, r3]
 8002c9e:	f003 031f 	and.w	r3, r3, #31
 8002ca2:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ca4:	698b      	ldr	r3, [r1, #24]
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	5cd3      	ldrb	r3, [r2, r3]
 8002cac:	4a45      	ldr	r2, [pc, #276]	; (8002dc4 <HAL_RCC_ClockConfig+0x240>)
 8002cae:	f003 031f 	and.w	r3, r3, #31
 8002cb2:	fa20 f303 	lsr.w	r3, r0, r3
 8002cb6:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8002cb8:	4b43      	ldr	r3, [pc, #268]	; (8002dc8 <HAL_RCC_ClockConfig+0x244>)
 8002cba:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8002cbc:	4b43      	ldr	r3, [pc, #268]	; (8002dcc <HAL_RCC_ClockConfig+0x248>)
}
 8002cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8002cc2:	6818      	ldr	r0, [r3, #0]
 8002cc4:	f7fe b896 	b.w	8000df4 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc8:	6813      	ldr	r3, [r2, #0]
 8002cca:	f023 030f 	bic.w	r3, r3, #15
 8002cce:	430b      	orrs	r3, r1
 8002cd0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd2:	6813      	ldr	r3, [r2, #0]
 8002cd4:	f003 030f 	and.w	r3, r3, #15
 8002cd8:	428b      	cmp	r3, r1
 8002cda:	f47f af58 	bne.w	8002b8e <HAL_RCC_ClockConfig+0xa>
 8002cde:	e760      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ce0:	4936      	ldr	r1, [pc, #216]	; (8002dbc <HAL_RCC_ClockConfig+0x238>)
 8002ce2:	6926      	ldr	r6, [r4, #16]
 8002ce4:	6988      	ldr	r0, [r1, #24]
 8002ce6:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8002cea:	4286      	cmp	r6, r0
 8002cec:	f67f af5d 	bls.w	8002baa <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002cf0:	698a      	ldr	r2, [r1, #24]
 8002cf2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002cf6:	4332      	orrs	r2, r6
 8002cf8:	618a      	str	r2, [r1, #24]
 8002cfa:	e756      	b.n	8002baa <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002cfc:	4b2f      	ldr	r3, [pc, #188]	; (8002dbc <HAL_RCC_ClockConfig+0x238>)
 8002cfe:	68a1      	ldr	r1, [r4, #8]
 8002d00:	699a      	ldr	r2, [r3, #24]
 8002d02:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8002d06:	430a      	orrs	r2, r1
 8002d08:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d0a:	6862      	ldr	r2, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d0c:	681b      	ldr	r3, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d0e:	2a02      	cmp	r2, #2
 8002d10:	d11d      	bne.n	8002d4e <HAL_RCC_ClockConfig+0x1ca>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d12:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d16:	f43f af3a 	beq.w	8002b8e <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d1a:	4e28      	ldr	r6, [pc, #160]	; (8002dbc <HAL_RCC_ClockConfig+0x238>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d1c:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d20:	6933      	ldr	r3, [r6, #16]
 8002d22:	f023 0307 	bic.w	r3, r3, #7
 8002d26:	4313      	orrs	r3, r2
 8002d28:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 8002d2a:	f7fe fa75 	bl	8001218 <HAL_GetTick>
 8002d2e:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d30:	6933      	ldr	r3, [r6, #16]
 8002d32:	6862      	ldr	r2, [r4, #4]
 8002d34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d38:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8002d3c:	f43f af6f 	beq.w	8002c1e <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d40:	f7fe fa6a 	bl	8001218 <HAL_GetTick>
 8002d44:	1bc0      	subs	r0, r0, r7
 8002d46:	4540      	cmp	r0, r8
 8002d48:	d9f2      	bls.n	8002d30 <HAL_RCC_ClockConfig+0x1ac>
            return HAL_TIMEOUT;
 8002d4a:	2003      	movs	r0, #3
 8002d4c:	e720      	b.n	8002b90 <HAL_RCC_ClockConfig+0xc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d4e:	2a03      	cmp	r2, #3
 8002d50:	d102      	bne.n	8002d58 <HAL_RCC_ClockConfig+0x1d4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d52:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002d56:	e7de      	b.n	8002d16 <HAL_RCC_ClockConfig+0x192>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d58:	2a01      	cmp	r2, #1
 8002d5a:	d102      	bne.n	8002d62 <HAL_RCC_ClockConfig+0x1de>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d5c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002d60:	e7d9      	b.n	8002d16 <HAL_RCC_ClockConfig+0x192>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d62:	f013 0f04 	tst.w	r3, #4
 8002d66:	e7d6      	b.n	8002d16 <HAL_RCC_ClockConfig+0x192>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d68:	4914      	ldr	r1, [pc, #80]	; (8002dbc <HAL_RCC_ClockConfig+0x238>)
 8002d6a:	68e6      	ldr	r6, [r4, #12]
 8002d6c:	6988      	ldr	r0, [r1, #24]
 8002d6e:	f000 000f 	and.w	r0, r0, #15
 8002d72:	4286      	cmp	r6, r0
 8002d74:	f4bf af57 	bcs.w	8002c26 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d78:	698a      	ldr	r2, [r1, #24]
 8002d7a:	f022 020f 	bic.w	r2, r2, #15
 8002d7e:	4332      	orrs	r2, r6
 8002d80:	618a      	str	r2, [r1, #24]
 8002d82:	e750      	b.n	8002c26 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d84:	680a      	ldr	r2, [r1, #0]
 8002d86:	f022 020f 	bic.w	r2, r2, #15
 8002d8a:	432a      	orrs	r2, r5
 8002d8c:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8e:	680a      	ldr	r2, [r1, #0]
 8002d90:	f002 020f 	and.w	r2, r2, #15
 8002d94:	42aa      	cmp	r2, r5
 8002d96:	f47f aefa 	bne.w	8002b8e <HAL_RCC_ClockConfig+0xa>
 8002d9a:	e74b      	b.n	8002c34 <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d9c:	4907      	ldr	r1, [pc, #28]	; (8002dbc <HAL_RCC_ClockConfig+0x238>)
 8002d9e:	6925      	ldr	r5, [r4, #16]
 8002da0:	6988      	ldr	r0, [r1, #24]
 8002da2:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8002da6:	4285      	cmp	r5, r0
 8002da8:	f4bf af47 	bcs.w	8002c3a <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002dac:	698a      	ldr	r2, [r1, #24]
 8002dae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002db2:	432a      	orrs	r2, r5
 8002db4:	618a      	str	r2, [r1, #24]
 8002db6:	e740      	b.n	8002c3a <HAL_RCC_ClockConfig+0xb6>
 8002db8:	52002000 	.word	0x52002000
 8002dbc:	58024400 	.word	0x58024400
 8002dc0:	0800f6ac 	.word	0x0800f6ac
 8002dc4:	24000018 	.word	0x24000018
 8002dc8:	24000014 	.word	0x24000014
 8002dcc:	24000020 	.word	0x24000020

08002dd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dd0:	b510      	push	{r4, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002dd2:	4c0c      	ldr	r4, [pc, #48]	; (8002e04 <HAL_RCC_GetHCLKFreq+0x34>)
 8002dd4:	f7ff fe36 	bl	8002a44 <HAL_RCC_GetSysClockFreq>
 8002dd8:	490b      	ldr	r1, [pc, #44]	; (8002e08 <HAL_RCC_GetHCLKFreq+0x38>)
 8002dda:	69a3      	ldr	r3, [r4, #24]
 8002ddc:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8002de0:	5cca      	ldrb	r2, [r1, r3]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002de2:	69a3      	ldr	r3, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002de4:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002de8:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002dec:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002df0:	5ccb      	ldrb	r3, [r1, r3]
 8002df2:	f003 031f 	and.w	r3, r3, #31
 8002df6:	fa22 f003 	lsr.w	r0, r2, r3
 8002dfa:	4b04      	ldr	r3, [pc, #16]	; (8002e0c <HAL_RCC_GetHCLKFreq+0x3c>)
 8002dfc:	6018      	str	r0, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002dfe:	4b04      	ldr	r3, [pc, #16]	; (8002e10 <HAL_RCC_GetHCLKFreq+0x40>)
 8002e00:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8002e02:	bd10      	pop	{r4, pc}
 8002e04:	58024400 	.word	0x58024400
 8002e08:	0800f6ac 	.word	0x0800f6ac
 8002e0c:	24000018 	.word	0x24000018
 8002e10:	24000014 	.word	0x24000014

08002e14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e14:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002e16:	f7ff ffdb 	bl	8002dd0 <HAL_RCC_GetHCLKFreq>
 8002e1a:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002e1c:	4a05      	ldr	r2, [pc, #20]	; (8002e34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e1e:	69db      	ldr	r3, [r3, #28]
 8002e20:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002e24:	5cd3      	ldrb	r3, [r2, r3]
 8002e26:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002e2a:	40d8      	lsrs	r0, r3
 8002e2c:	bd08      	pop	{r3, pc}
 8002e2e:	bf00      	nop
 8002e30:	58024400 	.word	0x58024400
 8002e34:	0800f6ac 	.word	0x0800f6ac

08002e38 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002e38:	233f      	movs	r3, #63	; 0x3f
 8002e3a:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e3c:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <HAL_RCC_GetClockConfig+0x4c>)
 8002e3e:	691a      	ldr	r2, [r3, #16]
 8002e40:	f002 0207 	and.w	r2, r2, #7
 8002e44:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002e46:	699a      	ldr	r2, [r3, #24]
 8002e48:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8002e4c:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002e4e:	699a      	ldr	r2, [r3, #24]
 8002e50:	f002 020f 	and.w	r2, r2, #15
 8002e54:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002e56:	699a      	ldr	r2, [r3, #24]
 8002e58:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002e5c:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8002e5e:	69da      	ldr	r2, [r3, #28]
 8002e60:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002e64:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002e66:	69da      	ldr	r2, [r3, #28]
 8002e68:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002e6c:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e74:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e76:	4b04      	ldr	r3, [pc, #16]	; (8002e88 <HAL_RCC_GetClockConfig+0x50>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	600b      	str	r3, [r1, #0]
}
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	58024400 	.word	0x58024400
 8002e88:	52002000 	.word	0x52002000

08002e8c <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e8c:	4770      	bx	lr
	...

08002e90 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e90:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d12f      	bne.n	8002ef8 <HAL_TIM_Base_Start_IT+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e98:	2302      	movs	r3, #2
 8002e9a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e9e:	6803      	ldr	r3, [r0, #0]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	f042 0201 	orr.w	r2, r2, #1
 8002ea6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ea8:	4a14      	ldr	r2, [pc, #80]	; (8002efc <HAL_TIM_Base_Start_IT+0x6c>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d016      	beq.n	8002edc <HAL_TIM_Base_Start_IT+0x4c>
 8002eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb2:	d013      	beq.n	8002edc <HAL_TIM_Base_Start_IT+0x4c>
 8002eb4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d00f      	beq.n	8002edc <HAL_TIM_Base_Start_IT+0x4c>
 8002ebc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d00b      	beq.n	8002edc <HAL_TIM_Base_Start_IT+0x4c>
 8002ec4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d007      	beq.n	8002edc <HAL_TIM_Base_Start_IT+0x4c>
 8002ecc:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d003      	beq.n	8002edc <HAL_TIM_Base_Start_IT+0x4c>
 8002ed4:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d107      	bne.n	8002eec <HAL_TIM_Base_Start_IT+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002edc:	6899      	ldr	r1, [r3, #8]
 8002ede:	4a08      	ldr	r2, [pc, #32]	; (8002f00 <HAL_TIM_Base_Start_IT+0x70>)
 8002ee0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ee2:	2a06      	cmp	r2, #6
 8002ee4:	d006      	beq.n	8002ef4 <HAL_TIM_Base_Start_IT+0x64>
 8002ee6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002eea:	d003      	beq.n	8002ef4 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	f042 0201 	orr.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ef4:	2000      	movs	r0, #0
}
 8002ef6:	4770      	bx	lr
    return HAL_ERROR;
 8002ef8:	2001      	movs	r0, #1
 8002efa:	4770      	bx	lr
 8002efc:	40010000 	.word	0x40010000
 8002f00:	00010007 	.word	0x00010007

08002f04 <HAL_TIM_OC_DelayElapsedCallback>:
 8002f04:	4770      	bx	lr

08002f06 <HAL_TIM_IC_CaptureCallback>:
 8002f06:	4770      	bx	lr

08002f08 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002f08:	4770      	bx	lr

08002f0a <HAL_TIM_TriggerCallback>:
 8002f0a:	4770      	bx	lr

08002f0c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f0c:	6803      	ldr	r3, [r0, #0]
 8002f0e:	691a      	ldr	r2, [r3, #16]
 8002f10:	0791      	lsls	r1, r2, #30
{
 8002f12:	b510      	push	{r4, lr}
 8002f14:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f16:	d50f      	bpl.n	8002f38 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f18:	68da      	ldr	r2, [r3, #12]
 8002f1a:	0792      	lsls	r2, r2, #30
 8002f1c:	d50c      	bpl.n	8002f38 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f1e:	f06f 0202 	mvn.w	r2, #2
 8002f22:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f24:	2201      	movs	r2, #1
 8002f26:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	0799      	lsls	r1, r3, #30
 8002f2c:	f000 8085 	beq.w	800303a <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f30:	f7ff ffe9 	bl	8002f06 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f34:	2300      	movs	r3, #0
 8002f36:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f38:	6823      	ldr	r3, [r4, #0]
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	0752      	lsls	r2, r2, #29
 8002f3e:	d510      	bpl.n	8002f62 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f40:	68da      	ldr	r2, [r3, #12]
 8002f42:	0750      	lsls	r0, r2, #29
 8002f44:	d50d      	bpl.n	8002f62 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f46:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f4a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f4e:	2202      	movs	r2, #2
 8002f50:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002f58:	d075      	beq.n	8003046 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002f5a:	f7ff ffd4 	bl	8002f06 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f62:	6823      	ldr	r3, [r4, #0]
 8002f64:	691a      	ldr	r2, [r3, #16]
 8002f66:	0711      	lsls	r1, r2, #28
 8002f68:	d50f      	bpl.n	8002f8a <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f6a:	68da      	ldr	r2, [r3, #12]
 8002f6c:	0712      	lsls	r2, r2, #28
 8002f6e:	d50c      	bpl.n	8002f8a <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f70:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f74:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f78:	2204      	movs	r2, #4
 8002f7a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	079b      	lsls	r3, r3, #30
 8002f80:	d067      	beq.n	8003052 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002f82:	f7ff ffc0 	bl	8002f06 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f86:	2300      	movs	r3, #0
 8002f88:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f8a:	6823      	ldr	r3, [r4, #0]
 8002f8c:	691a      	ldr	r2, [r3, #16]
 8002f8e:	06d0      	lsls	r0, r2, #27
 8002f90:	d510      	bpl.n	8002fb4 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	06d1      	lsls	r1, r2, #27
 8002f96:	d50d      	bpl.n	8002fb4 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f98:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f9c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fa0:	2208      	movs	r2, #8
 8002fa2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002faa:	d058      	beq.n	800305e <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8002fac:	f7ff ffab 	bl	8002f06 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fb4:	6823      	ldr	r3, [r4, #0]
 8002fb6:	691a      	ldr	r2, [r3, #16]
 8002fb8:	07d2      	lsls	r2, r2, #31
 8002fba:	d508      	bpl.n	8002fce <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	07d0      	lsls	r0, r2, #31
 8002fc0:	d505      	bpl.n	8002fce <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fc2:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fc6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fc8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fca:	f7fd ff5f 	bl	8000e8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fce:	6823      	ldr	r3, [r4, #0]
 8002fd0:	691a      	ldr	r2, [r3, #16]
 8002fd2:	0611      	lsls	r1, r2, #24
 8002fd4:	d508      	bpl.n	8002fe8 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	0612      	lsls	r2, r2, #24
 8002fda:	d505      	bpl.n	8002fe8 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fe0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fe2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002fe4:	f000 f8d9 	bl	800319a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002fe8:	6823      	ldr	r3, [r4, #0]
 8002fea:	691a      	ldr	r2, [r3, #16]
 8002fec:	05d0      	lsls	r0, r2, #23
 8002fee:	d508      	bpl.n	8003002 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ff0:	68da      	ldr	r2, [r3, #12]
 8002ff2:	0611      	lsls	r1, r2, #24
 8002ff4:	d505      	bpl.n	8003002 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ff6:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ffa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ffc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8002ffe:	f000 f8cd 	bl	800319c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003002:	6823      	ldr	r3, [r4, #0]
 8003004:	691a      	ldr	r2, [r3, #16]
 8003006:	0652      	lsls	r2, r2, #25
 8003008:	d508      	bpl.n	800301c <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800300a:	68da      	ldr	r2, [r3, #12]
 800300c:	0650      	lsls	r0, r2, #25
 800300e:	d505      	bpl.n	800301c <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003010:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003014:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003016:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003018:	f7ff ff77 	bl	8002f0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800301c:	6823      	ldr	r3, [r4, #0]
 800301e:	691a      	ldr	r2, [r3, #16]
 8003020:	0691      	lsls	r1, r2, #26
 8003022:	d522      	bpl.n	800306a <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	0692      	lsls	r2, r2, #26
 8003028:	d51f      	bpl.n	800306a <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800302a:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800302e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003030:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003036:	f000 b8af 	b.w	8003198 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800303a:	f7ff ff63 	bl	8002f04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800303e:	4620      	mov	r0, r4
 8003040:	f7ff ff62 	bl	8002f08 <HAL_TIM_PWM_PulseFinishedCallback>
 8003044:	e776      	b.n	8002f34 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003046:	f7ff ff5d 	bl	8002f04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800304a:	4620      	mov	r0, r4
 800304c:	f7ff ff5c 	bl	8002f08 <HAL_TIM_PWM_PulseFinishedCallback>
 8003050:	e785      	b.n	8002f5e <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003052:	f7ff ff57 	bl	8002f04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003056:	4620      	mov	r0, r4
 8003058:	f7ff ff56 	bl	8002f08 <HAL_TIM_PWM_PulseFinishedCallback>
 800305c:	e793      	b.n	8002f86 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800305e:	f7ff ff51 	bl	8002f04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003062:	4620      	mov	r0, r4
 8003064:	f7ff ff50 	bl	8002f08 <HAL_TIM_PWM_PulseFinishedCallback>
 8003068:	e7a2      	b.n	8002fb0 <HAL_TIM_IRQHandler+0xa4>
}
 800306a:	bd10      	pop	{r4, pc}

0800306c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800306c:	4a30      	ldr	r2, [pc, #192]	; (8003130 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800306e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003070:	4290      	cmp	r0, r2
 8003072:	d012      	beq.n	800309a <TIM_Base_SetConfig+0x2e>
 8003074:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003078:	d00f      	beq.n	800309a <TIM_Base_SetConfig+0x2e>
 800307a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800307e:	4290      	cmp	r0, r2
 8003080:	d00b      	beq.n	800309a <TIM_Base_SetConfig+0x2e>
 8003082:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003086:	4290      	cmp	r0, r2
 8003088:	d007      	beq.n	800309a <TIM_Base_SetConfig+0x2e>
 800308a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800308e:	4290      	cmp	r0, r2
 8003090:	d003      	beq.n	800309a <TIM_Base_SetConfig+0x2e>
 8003092:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003096:	4290      	cmp	r0, r2
 8003098:	d119      	bne.n	80030ce <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800309a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800309c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80030a0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030a2:	4a23      	ldr	r2, [pc, #140]	; (8003130 <TIM_Base_SetConfig+0xc4>)
 80030a4:	4290      	cmp	r0, r2
 80030a6:	d01d      	beq.n	80030e4 <TIM_Base_SetConfig+0x78>
 80030a8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80030ac:	d01a      	beq.n	80030e4 <TIM_Base_SetConfig+0x78>
 80030ae:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80030b2:	4290      	cmp	r0, r2
 80030b4:	d016      	beq.n	80030e4 <TIM_Base_SetConfig+0x78>
 80030b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030ba:	4290      	cmp	r0, r2
 80030bc:	d012      	beq.n	80030e4 <TIM_Base_SetConfig+0x78>
 80030be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030c2:	4290      	cmp	r0, r2
 80030c4:	d00e      	beq.n	80030e4 <TIM_Base_SetConfig+0x78>
 80030c6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80030ca:	4290      	cmp	r0, r2
 80030cc:	d00a      	beq.n	80030e4 <TIM_Base_SetConfig+0x78>
 80030ce:	4a19      	ldr	r2, [pc, #100]	; (8003134 <TIM_Base_SetConfig+0xc8>)
 80030d0:	4290      	cmp	r0, r2
 80030d2:	d007      	beq.n	80030e4 <TIM_Base_SetConfig+0x78>
 80030d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030d8:	4290      	cmp	r0, r2
 80030da:	d003      	beq.n	80030e4 <TIM_Base_SetConfig+0x78>
 80030dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030e0:	4290      	cmp	r0, r2
 80030e2:	d103      	bne.n	80030ec <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030e8:	68ca      	ldr	r2, [r1, #12]
 80030ea:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030ec:	694a      	ldr	r2, [r1, #20]
 80030ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030f2:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80030f4:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030f6:	688b      	ldr	r3, [r1, #8]
 80030f8:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030fa:	680b      	ldr	r3, [r1, #0]
 80030fc:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030fe:	4b0c      	ldr	r3, [pc, #48]	; (8003130 <TIM_Base_SetConfig+0xc4>)
 8003100:	4298      	cmp	r0, r3
 8003102:	d00f      	beq.n	8003124 <TIM_Base_SetConfig+0xb8>
 8003104:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003108:	4298      	cmp	r0, r3
 800310a:	d00b      	beq.n	8003124 <TIM_Base_SetConfig+0xb8>
 800310c:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8003110:	4298      	cmp	r0, r3
 8003112:	d007      	beq.n	8003124 <TIM_Base_SetConfig+0xb8>
 8003114:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003118:	4298      	cmp	r0, r3
 800311a:	d003      	beq.n	8003124 <TIM_Base_SetConfig+0xb8>
 800311c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003120:	4298      	cmp	r0, r3
 8003122:	d101      	bne.n	8003128 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003124:	690b      	ldr	r3, [r1, #16]
 8003126:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003128:	2301      	movs	r3, #1
 800312a:	6143      	str	r3, [r0, #20]
}
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	40010000 	.word	0x40010000
 8003134:	40014000 	.word	0x40014000

08003138 <HAL_TIM_Base_Init>:
{
 8003138:	b510      	push	{r4, lr}
  if (htim == NULL)
 800313a:	4604      	mov	r4, r0
 800313c:	b350      	cbz	r0, 8003194 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800313e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003142:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003146:	b91b      	cbnz	r3, 8003150 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003148:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800314c:	f7ff fe9e 	bl	8002e8c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003150:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003152:	6820      	ldr	r0, [r4, #0]
 8003154:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8003156:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800315a:	f7ff ff87 	bl	800306c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800315e:	2301      	movs	r3, #1
  return HAL_OK;
 8003160:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003162:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003166:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800316a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800316e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003172:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003176:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800317a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800317e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003182:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003186:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800318a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800318e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003192:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003194:	2001      	movs	r0, #1
 8003196:	e7fc      	b.n	8003192 <HAL_TIM_Base_Init+0x5a>

08003198 <HAL_TIMEx_CommutCallback>:
 8003198:	4770      	bx	lr

0800319a <HAL_TIMEx_BreakCallback>:
 800319a:	4770      	bx	lr

0800319c <HAL_TIMEx_Break2Callback>:
 800319c:	4770      	bx	lr

0800319e <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800319e:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80031a2:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031a6:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031a8:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031aa:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80031ae:	2300      	movs	r3, #0
 80031b0:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80031b2:	4770      	bx	lr

080031b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80031b4:	2300      	movs	r3, #0
 80031b6:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80031b8:	4770      	bx	lr

080031ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80031ba:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80031bc:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80031be:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80031c0:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80031c6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80031c8:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80031ca:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80031cc:	3301      	adds	r3, #1
 80031ce:	6003      	str	r3, [r0, #0]
}
 80031d0:	4770      	bx	lr

080031d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031d2:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80031d4:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80031d6:	1c63      	adds	r3, r4, #1
 80031d8:	d10a      	bne.n	80031f0 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80031da:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80031e0:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80031e2:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80031e4:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80031e6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80031e8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80031ea:	3301      	adds	r3, #1
 80031ec:	6003      	str	r3, [r0, #0]
}
 80031ee:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80031f0:	f100 0208 	add.w	r2, r0, #8
 80031f4:	4613      	mov	r3, r2
 80031f6:	6852      	ldr	r2, [r2, #4]
 80031f8:	6815      	ldr	r5, [r2, #0]
 80031fa:	42a5      	cmp	r5, r4
 80031fc:	d9fa      	bls.n	80031f4 <vListInsert+0x22>
 80031fe:	e7ed      	b.n	80031dc <vListInsert+0xa>

08003200 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003200:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003202:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8003206:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003208:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800320a:	6859      	ldr	r1, [r3, #4]
 800320c:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800320e:	bf08      	it	eq
 8003210:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003212:	2200      	movs	r2, #0
 8003214:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	3a01      	subs	r2, #1
 800321a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800321c:	6818      	ldr	r0, [r3, #0]
}
 800321e:	4770      	bx	lr

08003220 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003220:	b510      	push	{r4, lr}
 8003222:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003224:	f001 fd06 	bl	8004c34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003228:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800322a:	f001 fd25 	bl	8004c78 <vPortExitCritical>

	return xReturn;
}
 800322e:	fab4 f084 	clz	r0, r4
 8003232:	0940      	lsrs	r0, r0, #5
 8003234:	bd10      	pop	{r4, pc}

08003236 <prvCopyDataToQueue>:
{
 8003236:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003238:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800323a:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800323c:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800323e:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003240:	b952      	cbnz	r2, 8003258 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003242:	6807      	ldr	r7, [r0, #0]
 8003244:	bb47      	cbnz	r7, 8003298 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003246:	6880      	ldr	r0, [r0, #8]
 8003248:	f001 f95a 	bl	8004500 <xTaskPriorityDisinherit>
 800324c:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800324e:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003250:	3601      	adds	r6, #1
}
 8003252:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003254:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8003256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8003258:	b965      	cbnz	r5, 8003274 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800325a:	6840      	ldr	r0, [r0, #4]
 800325c:	f00a fc3c 	bl	800dad8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003260:	6863      	ldr	r3, [r4, #4]
 8003262:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003264:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003266:	68a2      	ldr	r2, [r4, #8]
 8003268:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800326a:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800326c:	d3f0      	bcc.n	8003250 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800326e:	6823      	ldr	r3, [r4, #0]
 8003270:	6063      	str	r3, [r4, #4]
 8003272:	e7ed      	b.n	8003250 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003274:	68c0      	ldr	r0, [r0, #12]
 8003276:	f00a fc2f 	bl	800dad8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800327a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800327c:	68e3      	ldr	r3, [r4, #12]
 800327e:	4251      	negs	r1, r2
 8003280:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003282:	6822      	ldr	r2, [r4, #0]
 8003284:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003286:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003288:	bf3e      	ittt	cc
 800328a:	68a3      	ldrcc	r3, [r4, #8]
 800328c:	185b      	addcc	r3, r3, r1
 800328e:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8003290:	2d02      	cmp	r5, #2
 8003292:	d101      	bne.n	8003298 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003294:	b116      	cbz	r6, 800329c <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 8003296:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8003298:	2500      	movs	r5, #0
 800329a:	e7d9      	b.n	8003250 <prvCopyDataToQueue+0x1a>
 800329c:	4635      	mov	r5, r6
 800329e:	e7d7      	b.n	8003250 <prvCopyDataToQueue+0x1a>

080032a0 <prvCopyDataFromQueue>:
{
 80032a0:	4603      	mov	r3, r0
 80032a2:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80032a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80032a6:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80032a8:	b162      	cbz	r2, 80032c4 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80032aa:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80032ac:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80032ae:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80032b0:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80032b2:	60dc      	str	r4, [r3, #12]
}
 80032b4:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80032b8:	bf24      	itt	cs
 80032ba:	6819      	ldrcs	r1, [r3, #0]
 80032bc:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80032be:	68d9      	ldr	r1, [r3, #12]
 80032c0:	f00a bc0a 	b.w	800dad8 <memcpy>
}
 80032c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <prvUnlockQueue>:
{
 80032ca:	b570      	push	{r4, r5, r6, lr}
 80032cc:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80032ce:	f001 fcb1 	bl	8004c34 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80032d2:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032d6:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80032da:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80032dc:	2d00      	cmp	r5, #0
 80032de:	dc14      	bgt.n	800330a <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80032e0:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032e2:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 80032e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80032ea:	f001 fcc5 	bl	8004c78 <vPortExitCritical>
	taskENTER_CRITICAL();
 80032ee:	f001 fca1 	bl	8004c34 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80032f2:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80032f6:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80032f8:	2d00      	cmp	r5, #0
 80032fa:	dc12      	bgt.n	8003322 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80032fc:	23ff      	movs	r3, #255	; 0xff
 80032fe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8003302:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8003306:	f001 bcb7 	b.w	8004c78 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800330a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0e7      	beq.n	80032e0 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003310:	4630      	mov	r0, r6
 8003312:	f000 ff71 	bl	80041f8 <xTaskRemoveFromEventList>
 8003316:	b108      	cbz	r0, 800331c <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8003318:	f000 ffec 	bl	80042f4 <vTaskMissedYield>
			--cTxLock;
 800331c:	3d01      	subs	r5, #1
 800331e:	b26d      	sxtb	r5, r5
 8003320:	e7dc      	b.n	80032dc <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003322:	6923      	ldr	r3, [r4, #16]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0e9      	beq.n	80032fc <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003328:	4630      	mov	r0, r6
 800332a:	f000 ff65 	bl	80041f8 <xTaskRemoveFromEventList>
 800332e:	b108      	cbz	r0, 8003334 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8003330:	f000 ffe0 	bl	80042f4 <vTaskMissedYield>
				--cRxLock;
 8003334:	3d01      	subs	r5, #1
 8003336:	b26d      	sxtb	r5, r5
 8003338:	e7de      	b.n	80032f8 <prvUnlockQueue+0x2e>
	...

0800333c <xQueueGenericReset>:
{
 800333c:	b538      	push	{r3, r4, r5, lr}
 800333e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8003340:	4604      	mov	r4, r0
 8003342:	b940      	cbnz	r0, 8003356 <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003348:	f383 8811 	msr	BASEPRI, r3
 800334c:	f3bf 8f6f 	isb	sy
 8003350:	f3bf 8f4f 	dsb	sy
 8003354:	e7fe      	b.n	8003354 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8003356:	f001 fc6d 	bl	8004c34 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800335a:	6822      	ldr	r2, [r4, #0]
 800335c:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003360:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003362:	434b      	muls	r3, r1
 8003364:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003366:	1a5b      	subs	r3, r3, r1
 8003368:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800336a:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800336c:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800336e:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003370:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003372:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8003374:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003378:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800337c:	b995      	cbnz	r5, 80033a4 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800337e:	6923      	ldr	r3, [r4, #16]
 8003380:	b163      	cbz	r3, 800339c <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003382:	f104 0010 	add.w	r0, r4, #16
 8003386:	f000 ff37 	bl	80041f8 <xTaskRemoveFromEventList>
 800338a:	b138      	cbz	r0, 800339c <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 800338c:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <xQueueGenericReset+0x7c>)
 800338e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	f3bf 8f4f 	dsb	sy
 8003398:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800339c:	f001 fc6c 	bl	8004c78 <vPortExitCritical>
}
 80033a0:	2001      	movs	r0, #1
 80033a2:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80033a4:	f104 0010 	add.w	r0, r4, #16
 80033a8:	f7ff fef9 	bl	800319e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80033ac:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80033b0:	f7ff fef5 	bl	800319e <vListInitialise>
 80033b4:	e7f2      	b.n	800339c <xQueueGenericReset+0x60>
 80033b6:	bf00      	nop
 80033b8:	e000ed04 	.word	0xe000ed04

080033bc <xQueueGenericCreate>:
	{
 80033bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033be:	460d      	mov	r5, r1
 80033c0:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80033c2:	4606      	mov	r6, r0
 80033c4:	b940      	cbnz	r0, 80033d8 <xQueueGenericCreate+0x1c>
 80033c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ca:	f383 8811 	msr	BASEPRI, r3
 80033ce:	f3bf 8f6f 	isb	sy
 80033d2:	f3bf 8f4f 	dsb	sy
 80033d6:	e7fe      	b.n	80033d6 <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033d8:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80033da:	3050      	adds	r0, #80	; 0x50
 80033dc:	f001 fb0c 	bl	80049f8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80033e0:	4604      	mov	r4, r0
 80033e2:	b158      	cbz	r0, 80033fc <xQueueGenericCreate+0x40>
	if( uxItemSize == ( UBaseType_t ) 0 )
 80033e4:	b165      	cbz	r5, 8003400 <xQueueGenericCreate+0x44>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80033e6:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80033ea:	2101      	movs	r1, #1
 80033ec:	4620      	mov	r0, r4
 80033ee:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 80033f0:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80033f4:	f7ff ffa2 	bl	800333c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80033f8:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 80033fc:	4620      	mov	r0, r4
 80033fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003400:	4603      	mov	r3, r0
 8003402:	e7f2      	b.n	80033ea <xQueueGenericCreate+0x2e>

08003404 <xQueueCreateCountingSemaphore>:
	{
 8003404:	b510      	push	{r4, lr}
 8003406:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8003408:	b940      	cbnz	r0, 800341c <xQueueCreateCountingSemaphore+0x18>
 800340a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340e:	f383 8811 	msr	BASEPRI, r3
 8003412:	f3bf 8f6f 	isb	sy
 8003416:	f3bf 8f4f 	dsb	sy
 800341a:	e7fe      	b.n	800341a <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800341c:	4288      	cmp	r0, r1
 800341e:	d208      	bcs.n	8003432 <xQueueCreateCountingSemaphore+0x2e>
 8003420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003424:	f383 8811 	msr	BASEPRI, r3
 8003428:	f3bf 8f6f 	isb	sy
 800342c:	f3bf 8f4f 	dsb	sy
 8003430:	e7fe      	b.n	8003430 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003432:	2202      	movs	r2, #2
 8003434:	2100      	movs	r1, #0
 8003436:	f7ff ffc1 	bl	80033bc <xQueueGenericCreate>
		if( xHandle != NULL )
 800343a:	b100      	cbz	r0, 800343e <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800343c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800343e:	bd10      	pop	{r4, pc}

08003440 <xQueueGenericSend>:
{
 8003440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003444:	4688      	mov	r8, r1
 8003446:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8003448:	4604      	mov	r4, r0
{
 800344a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800344c:	b940      	cbnz	r0, 8003460 <xQueueGenericSend+0x20>
 800344e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003452:	f383 8811 	msr	BASEPRI, r3
 8003456:	f3bf 8f6f 	isb	sy
 800345a:	f3bf 8f4f 	dsb	sy
 800345e:	e7fe      	b.n	800345e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003460:	b951      	cbnz	r1, 8003478 <xQueueGenericSend+0x38>
 8003462:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003464:	b143      	cbz	r3, 8003478 <xQueueGenericSend+0x38>
 8003466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346a:	f383 8811 	msr	BASEPRI, r3
 800346e:	f3bf 8f6f 	isb	sy
 8003472:	f3bf 8f4f 	dsb	sy
 8003476:	e7fe      	b.n	8003476 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003478:	2f02      	cmp	r7, #2
 800347a:	d10b      	bne.n	8003494 <xQueueGenericSend+0x54>
 800347c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800347e:	2b01      	cmp	r3, #1
 8003480:	d008      	beq.n	8003494 <xQueueGenericSend+0x54>
 8003482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003486:	f383 8811 	msr	BASEPRI, r3
 800348a:	f3bf 8f6f 	isb	sy
 800348e:	f3bf 8f4f 	dsb	sy
 8003492:	e7fe      	b.n	8003492 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003494:	f000 ffda 	bl	800444c <xTaskGetSchedulerState>
 8003498:	4606      	mov	r6, r0
 800349a:	b950      	cbnz	r0, 80034b2 <xQueueGenericSend+0x72>
 800349c:	9b01      	ldr	r3, [sp, #4]
 800349e:	b14b      	cbz	r3, 80034b4 <xQueueGenericSend+0x74>
 80034a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a4:	f383 8811 	msr	BASEPRI, r3
 80034a8:	f3bf 8f6f 	isb	sy
 80034ac:	f3bf 8f4f 	dsb	sy
 80034b0:	e7fe      	b.n	80034b0 <xQueueGenericSend+0x70>
 80034b2:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80034b4:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 80034b8:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80035a0 <xQueueGenericSend+0x160>
 80034bc:	e037      	b.n	800352e <xQueueGenericSend+0xee>
				if( xTicksToWait == ( TickType_t ) 0 )
 80034be:	9d01      	ldr	r5, [sp, #4]
 80034c0:	b91d      	cbnz	r5, 80034ca <xQueueGenericSend+0x8a>
					taskEXIT_CRITICAL();
 80034c2:	f001 fbd9 	bl	8004c78 <vPortExitCritical>
			return errQUEUE_FULL;
 80034c6:	2000      	movs	r0, #0
 80034c8:	e050      	b.n	800356c <xQueueGenericSend+0x12c>
				else if( xEntryTimeSet == pdFALSE )
 80034ca:	b916      	cbnz	r6, 80034d2 <xQueueGenericSend+0x92>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80034cc:	a802      	add	r0, sp, #8
 80034ce:	f000 fecf 	bl	8004270 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80034d2:	f001 fbd1 	bl	8004c78 <vPortExitCritical>
		vTaskSuspendAll();
 80034d6:	f000 fd25 	bl	8003f24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034da:	f001 fbab 	bl	8004c34 <vPortEnterCritical>
 80034de:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80034e2:	2bff      	cmp	r3, #255	; 0xff
 80034e4:	d101      	bne.n	80034ea <xQueueGenericSend+0xaa>
 80034e6:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 80034ea:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80034ee:	2bff      	cmp	r3, #255	; 0xff
 80034f0:	d101      	bne.n	80034f6 <xQueueGenericSend+0xb6>
 80034f2:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 80034f6:	f001 fbbf 	bl	8004c78 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034fa:	a901      	add	r1, sp, #4
 80034fc:	a802      	add	r0, sp, #8
 80034fe:	f000 fec1 	bl	8004284 <xTaskCheckForTimeOut>
 8003502:	2800      	cmp	r0, #0
 8003504:	d146      	bne.n	8003594 <xQueueGenericSend+0x154>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003506:	f001 fb95 	bl	8004c34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800350a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800350c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800350e:	429a      	cmp	r2, r3
 8003510:	d12f      	bne.n	8003572 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8003512:	f001 fbb1 	bl	8004c78 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003516:	9901      	ldr	r1, [sp, #4]
 8003518:	f104 0010 	add.w	r0, r4, #16
 800351c:	f000 fe54 	bl	80041c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003520:	4620      	mov	r0, r4
 8003522:	f7ff fed2 	bl	80032ca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003526:	f000 fd89 	bl	800403c <xTaskResumeAll>
 800352a:	b350      	cbz	r0, 8003582 <xQueueGenericSend+0x142>
 800352c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800352e:	f001 fb81 	bl	8004c34 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003532:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003534:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003536:	429a      	cmp	r2, r3
 8003538:	d301      	bcc.n	800353e <xQueueGenericSend+0xfe>
 800353a:	2f02      	cmp	r7, #2
 800353c:	d1bf      	bne.n	80034be <xQueueGenericSend+0x7e>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800353e:	463a      	mov	r2, r7
 8003540:	4641      	mov	r1, r8
 8003542:	4620      	mov	r0, r4
 8003544:	f7ff fe77 	bl	8003236 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003548:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800354a:	b11b      	cbz	r3, 8003554 <xQueueGenericSend+0x114>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800354c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003550:	f000 fe52 	bl	80041f8 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8003554:	b138      	cbz	r0, 8003566 <xQueueGenericSend+0x126>
						queueYIELD_IF_USING_PREEMPTION();
 8003556:	4b12      	ldr	r3, [pc, #72]	; (80035a0 <xQueueGenericSend+0x160>)
 8003558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	f3bf 8f4f 	dsb	sy
 8003562:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8003566:	f001 fb87 	bl	8004c78 <vPortExitCritical>
				return pdPASS;
 800356a:	2001      	movs	r0, #1
}
 800356c:	b004      	add	sp, #16
 800356e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 8003572:	f001 fb81 	bl	8004c78 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8003576:	4620      	mov	r0, r4
 8003578:	f7ff fea7 	bl	80032ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800357c:	f000 fd5e 	bl	800403c <xTaskResumeAll>
 8003580:	e7d4      	b.n	800352c <xQueueGenericSend+0xec>
					portYIELD_WITHIN_API();
 8003582:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003586:	f8ca 3000 	str.w	r3, [sl]
 800358a:	f3bf 8f4f 	dsb	sy
 800358e:	f3bf 8f6f 	isb	sy
 8003592:	e7cb      	b.n	800352c <xQueueGenericSend+0xec>
			prvUnlockQueue( pxQueue );
 8003594:	4620      	mov	r0, r4
 8003596:	f7ff fe98 	bl	80032ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800359a:	f000 fd4f 	bl	800403c <xTaskResumeAll>
 800359e:	e792      	b.n	80034c6 <xQueueGenericSend+0x86>
 80035a0:	e000ed04 	.word	0xe000ed04

080035a4 <xQueueCreateMutex>:
	{
 80035a4:	b570      	push	{r4, r5, r6, lr}
 80035a6:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80035a8:	2050      	movs	r0, #80	; 0x50
 80035aa:	f001 fa25 	bl	80049f8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80035ae:	4604      	mov	r4, r0
 80035b0:	b188      	cbz	r0, 80035d6 <xQueueCreateMutex+0x32>
	pxNewQueue->uxItemSize = uxItemSize;
 80035b2:	2500      	movs	r5, #0
 80035b4:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80035b6:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 80035b8:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80035bc:	f7ff febe 	bl	800333c <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80035c0:	462b      	mov	r3, r5
 80035c2:	462a      	mov	r2, r5
 80035c4:	4629      	mov	r1, r5
 80035c6:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 80035c8:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80035cc:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80035ce:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80035d0:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80035d2:	f7ff ff35 	bl	8003440 <xQueueGenericSend>
	}
 80035d6:	4620      	mov	r0, r4
 80035d8:	bd70      	pop	{r4, r5, r6, pc}

080035da <xQueueGenericSendFromISR>:
{
 80035da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035de:	4689      	mov	r9, r1
 80035e0:	4690      	mov	r8, r2
 80035e2:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80035e4:	4604      	mov	r4, r0
 80035e6:	b940      	cbnz	r0, 80035fa <xQueueGenericSendFromISR+0x20>
 80035e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ec:	f383 8811 	msr	BASEPRI, r3
 80035f0:	f3bf 8f6f 	isb	sy
 80035f4:	f3bf 8f4f 	dsb	sy
 80035f8:	e7fe      	b.n	80035f8 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035fa:	b951      	cbnz	r1, 8003612 <xQueueGenericSendFromISR+0x38>
 80035fc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80035fe:	b143      	cbz	r3, 8003612 <xQueueGenericSendFromISR+0x38>
 8003600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003604:	f383 8811 	msr	BASEPRI, r3
 8003608:	f3bf 8f6f 	isb	sy
 800360c:	f3bf 8f4f 	dsb	sy
 8003610:	e7fe      	b.n	8003610 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003612:	2f02      	cmp	r7, #2
 8003614:	d10b      	bne.n	800362e <xQueueGenericSendFromISR+0x54>
 8003616:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003618:	2b01      	cmp	r3, #1
 800361a:	d008      	beq.n	800362e <xQueueGenericSendFromISR+0x54>
 800361c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003620:	f383 8811 	msr	BASEPRI, r3
 8003624:	f3bf 8f6f 	isb	sy
 8003628:	f3bf 8f4f 	dsb	sy
 800362c:	e7fe      	b.n	800362c <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800362e:	f001 fc19 	bl	8004e64 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003632:	f3ef 8611 	mrs	r6, BASEPRI
 8003636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363a:	f383 8811 	msr	BASEPRI, r3
 800363e:	f3bf 8f6f 	isb	sy
 8003642:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003646:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003648:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800364a:	429a      	cmp	r2, r3
 800364c:	d301      	bcc.n	8003652 <xQueueGenericSendFromISR+0x78>
 800364e:	2f02      	cmp	r7, #2
 8003650:	d123      	bne.n	800369a <xQueueGenericSendFromISR+0xc0>
			const int8_t cTxLock = pxQueue->cTxLock;
 8003652:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003656:	463a      	mov	r2, r7
 8003658:	4649      	mov	r1, r9
 800365a:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800365c:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800365e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003660:	f7ff fde9 	bl	8003236 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8003664:	1c6b      	adds	r3, r5, #1
 8003666:	d113      	bne.n	8003690 <xQueueGenericSendFromISR+0xb6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003668:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800366a:	b90b      	cbnz	r3, 8003670 <xQueueGenericSendFromISR+0x96>
			xReturn = pdPASS;
 800366c:	2001      	movs	r0, #1
 800366e:	e00b      	b.n	8003688 <xQueueGenericSendFromISR+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003670:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003674:	f000 fdc0 	bl	80041f8 <xTaskRemoveFromEventList>
 8003678:	2800      	cmp	r0, #0
 800367a:	d0f7      	beq.n	800366c <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 800367c:	f1b8 0f00 	cmp.w	r8, #0
 8003680:	d0f4      	beq.n	800366c <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003682:	2001      	movs	r0, #1
 8003684:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003688:	f386 8811 	msr	BASEPRI, r6
}
 800368c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003690:	3501      	adds	r5, #1
 8003692:	b26d      	sxtb	r5, r5
 8003694:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8003698:	e7e8      	b.n	800366c <xQueueGenericSendFromISR+0x92>
			xReturn = errQUEUE_FULL;
 800369a:	2000      	movs	r0, #0
 800369c:	e7f4      	b.n	8003688 <xQueueGenericSendFromISR+0xae>

0800369e <xQueueGiveFromISR>:
{
 800369e:	b570      	push	{r4, r5, r6, lr}
 80036a0:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80036a2:	4604      	mov	r4, r0
 80036a4:	b940      	cbnz	r0, 80036b8 <xQueueGiveFromISR+0x1a>
	__asm volatile
 80036a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036aa:	f383 8811 	msr	BASEPRI, r3
 80036ae:	f3bf 8f6f 	isb	sy
 80036b2:	f3bf 8f4f 	dsb	sy
 80036b6:	e7fe      	b.n	80036b6 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 80036b8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80036ba:	b143      	cbz	r3, 80036ce <xQueueGiveFromISR+0x30>
 80036bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c0:	f383 8811 	msr	BASEPRI, r3
 80036c4:	f3bf 8f6f 	isb	sy
 80036c8:	f3bf 8f4f 	dsb	sy
 80036cc:	e7fe      	b.n	80036cc <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80036ce:	6803      	ldr	r3, [r0, #0]
 80036d0:	b953      	cbnz	r3, 80036e8 <xQueueGiveFromISR+0x4a>
 80036d2:	6883      	ldr	r3, [r0, #8]
 80036d4:	b143      	cbz	r3, 80036e8 <xQueueGiveFromISR+0x4a>
 80036d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036da:	f383 8811 	msr	BASEPRI, r3
 80036de:	f3bf 8f6f 	isb	sy
 80036e2:	f3bf 8f4f 	dsb	sy
 80036e6:	e7fe      	b.n	80036e6 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036e8:	f001 fbbc 	bl	8004e64 <vPortValidateInterruptPriority>
	__asm volatile
 80036ec:	f3ef 8611 	mrs	r6, BASEPRI
 80036f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f4:	f383 8811 	msr	BASEPRI, r3
 80036f8:	f3bf 8f6f 	isb	sy
 80036fc:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003700:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003702:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003704:	4293      	cmp	r3, r2
 8003706:	d91c      	bls.n	8003742 <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8003708:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800370c:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800370e:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8003710:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003712:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8003714:	d110      	bne.n	8003738 <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003716:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003718:	b90b      	cbnz	r3, 800371e <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 800371a:	2001      	movs	r0, #1
 800371c:	e009      	b.n	8003732 <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800371e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003722:	f000 fd69 	bl	80041f8 <xTaskRemoveFromEventList>
 8003726:	2800      	cmp	r0, #0
 8003728:	d0f7      	beq.n	800371a <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 800372a:	2d00      	cmp	r5, #0
 800372c:	d0f5      	beq.n	800371a <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800372e:	2001      	movs	r0, #1
 8003730:	6028      	str	r0, [r5, #0]
	__asm volatile
 8003732:	f386 8811 	msr	BASEPRI, r6
}
 8003736:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003738:	3301      	adds	r3, #1
 800373a:	b25b      	sxtb	r3, r3
 800373c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003740:	e7eb      	b.n	800371a <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 8003742:	2000      	movs	r0, #0
 8003744:	e7f5      	b.n	8003732 <xQueueGiveFromISR+0x94>
	...

08003748 <xQueueReceive>:
{
 8003748:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800374c:	b085      	sub	sp, #20
 800374e:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 8003750:	4604      	mov	r4, r0
{
 8003752:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8003754:	b940      	cbnz	r0, 8003768 <xQueueReceive+0x20>
	__asm volatile
 8003756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375a:	f383 8811 	msr	BASEPRI, r3
 800375e:	f3bf 8f6f 	isb	sy
 8003762:	f3bf 8f4f 	dsb	sy
 8003766:	e7fe      	b.n	8003766 <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003768:	b951      	cbnz	r1, 8003780 <xQueueReceive+0x38>
 800376a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800376c:	b143      	cbz	r3, 8003780 <xQueueReceive+0x38>
 800376e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003772:	f383 8811 	msr	BASEPRI, r3
 8003776:	f3bf 8f6f 	isb	sy
 800377a:	f3bf 8f4f 	dsb	sy
 800377e:	e7fe      	b.n	800377e <xQueueReceive+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003780:	f000 fe64 	bl	800444c <xTaskGetSchedulerState>
 8003784:	4606      	mov	r6, r0
 8003786:	b950      	cbnz	r0, 800379e <xQueueReceive+0x56>
 8003788:	9b01      	ldr	r3, [sp, #4]
 800378a:	b14b      	cbz	r3, 80037a0 <xQueueReceive+0x58>
 800378c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003790:	f383 8811 	msr	BASEPRI, r3
 8003794:	f3bf 8f6f 	isb	sy
 8003798:	f3bf 8f4f 	dsb	sy
 800379c:	e7fe      	b.n	800379c <xQueueReceive+0x54>
 800379e:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80037a0:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 80037a4:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8003884 <xQueueReceive+0x13c>
 80037a8:	e03b      	b.n	8003822 <xQueueReceive+0xda>
				if( xTicksToWait == ( TickType_t ) 0 )
 80037aa:	9d01      	ldr	r5, [sp, #4]
 80037ac:	b91d      	cbnz	r5, 80037b6 <xQueueReceive+0x6e>
					taskEXIT_CRITICAL();
 80037ae:	f001 fa63 	bl	8004c78 <vPortExitCritical>
				return errQUEUE_EMPTY;
 80037b2:	2000      	movs	r0, #0
 80037b4:	e052      	b.n	800385c <xQueueReceive+0x114>
				else if( xEntryTimeSet == pdFALSE )
 80037b6:	b916      	cbnz	r6, 80037be <xQueueReceive+0x76>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80037b8:	a802      	add	r0, sp, #8
 80037ba:	f000 fd59 	bl	8004270 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80037be:	f001 fa5b 	bl	8004c78 <vPortExitCritical>
		vTaskSuspendAll();
 80037c2:	f000 fbaf 	bl	8003f24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037c6:	f001 fa35 	bl	8004c34 <vPortEnterCritical>
 80037ca:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80037ce:	2bff      	cmp	r3, #255	; 0xff
 80037d0:	d101      	bne.n	80037d6 <xQueueReceive+0x8e>
 80037d2:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 80037d6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80037da:	2bff      	cmp	r3, #255	; 0xff
 80037dc:	d101      	bne.n	80037e2 <xQueueReceive+0x9a>
 80037de:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 80037e2:	f001 fa49 	bl	8004c78 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037e6:	a901      	add	r1, sp, #4
 80037e8:	a802      	add	r0, sp, #8
 80037ea:	f000 fd4b 	bl	8004284 <xTaskCheckForTimeOut>
 80037ee:	2800      	cmp	r0, #0
 80037f0:	d13d      	bne.n	800386e <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037f2:	4620      	mov	r0, r4
 80037f4:	f7ff fd14 	bl	8003220 <prvIsQueueEmpty>
 80037f8:	b398      	cbz	r0, 8003862 <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80037fa:	9901      	ldr	r1, [sp, #4]
 80037fc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003800:	f000 fce2 	bl	80041c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003804:	4620      	mov	r0, r4
 8003806:	f7ff fd60 	bl	80032ca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800380a:	f000 fc17 	bl	800403c <xTaskResumeAll>
 800380e:	b938      	cbnz	r0, 8003820 <xQueueReceive+0xd8>
					portYIELD_WITHIN_API();
 8003810:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003814:	f8c9 3000 	str.w	r3, [r9]
 8003818:	f3bf 8f4f 	dsb	sy
 800381c:	f3bf 8f6f 	isb	sy
 8003820:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8003822:	f001 fa07 	bl	8004c34 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003826:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003828:	2d00      	cmp	r5, #0
 800382a:	d0be      	beq.n	80037aa <xQueueReceive+0x62>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800382c:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800382e:	4639      	mov	r1, r7
 8003830:	4620      	mov	r0, r4
 8003832:	f7ff fd35 	bl	80032a0 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003836:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003838:	6923      	ldr	r3, [r4, #16]
 800383a:	b163      	cbz	r3, 8003856 <xQueueReceive+0x10e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800383c:	f104 0010 	add.w	r0, r4, #16
 8003840:	f000 fcda 	bl	80041f8 <xTaskRemoveFromEventList>
 8003844:	b138      	cbz	r0, 8003856 <xQueueReceive+0x10e>
						queueYIELD_IF_USING_PREEMPTION();
 8003846:	4b0f      	ldr	r3, [pc, #60]	; (8003884 <xQueueReceive+0x13c>)
 8003848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	f3bf 8f4f 	dsb	sy
 8003852:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8003856:	f001 fa0f 	bl	8004c78 <vPortExitCritical>
				return pdPASS;
 800385a:	2001      	movs	r0, #1
}
 800385c:	b005      	add	sp, #20
 800385e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 8003862:	4620      	mov	r0, r4
 8003864:	f7ff fd31 	bl	80032ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003868:	f000 fbe8 	bl	800403c <xTaskResumeAll>
 800386c:	e7d8      	b.n	8003820 <xQueueReceive+0xd8>
			prvUnlockQueue( pxQueue );
 800386e:	4620      	mov	r0, r4
 8003870:	f7ff fd2b 	bl	80032ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003874:	f000 fbe2 	bl	800403c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003878:	4620      	mov	r0, r4
 800387a:	f7ff fcd1 	bl	8003220 <prvIsQueueEmpty>
 800387e:	2800      	cmp	r0, #0
 8003880:	d0ce      	beq.n	8003820 <xQueueReceive+0xd8>
 8003882:	e796      	b.n	80037b2 <xQueueReceive+0x6a>
 8003884:	e000ed04 	.word	0xe000ed04

08003888 <xQueueSemaphoreTake>:
{
 8003888:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 800388c:	4604      	mov	r4, r0
{
 800388e:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8003890:	b940      	cbnz	r0, 80038a4 <xQueueSemaphoreTake+0x1c>
 8003892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003896:	f383 8811 	msr	BASEPRI, r3
 800389a:	f3bf 8f6f 	isb	sy
 800389e:	f3bf 8f4f 	dsb	sy
 80038a2:	e7fe      	b.n	80038a2 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 80038a4:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80038a6:	b145      	cbz	r5, 80038ba <xQueueSemaphoreTake+0x32>
 80038a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ac:	f383 8811 	msr	BASEPRI, r3
 80038b0:	f3bf 8f6f 	isb	sy
 80038b4:	f3bf 8f4f 	dsb	sy
 80038b8:	e7fe      	b.n	80038b8 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038ba:	f000 fdc7 	bl	800444c <xTaskGetSchedulerState>
 80038be:	4606      	mov	r6, r0
 80038c0:	b950      	cbnz	r0, 80038d8 <xQueueSemaphoreTake+0x50>
 80038c2:	9b01      	ldr	r3, [sp, #4]
 80038c4:	b16b      	cbz	r3, 80038e2 <xQueueSemaphoreTake+0x5a>
 80038c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ca:	f383 8811 	msr	BASEPRI, r3
 80038ce:	f3bf 8f6f 	isb	sy
 80038d2:	f3bf 8f4f 	dsb	sy
 80038d6:	e7fe      	b.n	80038d6 <xQueueSemaphoreTake+0x4e>
 80038d8:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 80038da:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 80038dc:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8003a0c <xQueueSemaphoreTake+0x184>
 80038e0:	e051      	b.n	8003986 <xQueueSemaphoreTake+0xfe>
 80038e2:	4605      	mov	r5, r0
 80038e4:	e7f9      	b.n	80038da <xQueueSemaphoreTake+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 80038e6:	9b01      	ldr	r3, [sp, #4]
 80038e8:	b963      	cbnz	r3, 8003904 <xQueueSemaphoreTake+0x7c>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80038ea:	b145      	cbz	r5, 80038fe <xQueueSemaphoreTake+0x76>
 80038ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f0:	f383 8811 	msr	BASEPRI, r3
 80038f4:	f3bf 8f6f 	isb	sy
 80038f8:	f3bf 8f4f 	dsb	sy
 80038fc:	e7fe      	b.n	80038fc <xQueueSemaphoreTake+0x74>
					taskEXIT_CRITICAL();
 80038fe:	f001 f9bb 	bl	8004c78 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8003902:	e05e      	b.n	80039c2 <xQueueSemaphoreTake+0x13a>
				else if( xEntryTimeSet == pdFALSE )
 8003904:	b916      	cbnz	r6, 800390c <xQueueSemaphoreTake+0x84>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003906:	a802      	add	r0, sp, #8
 8003908:	f000 fcb2 	bl	8004270 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800390c:	f001 f9b4 	bl	8004c78 <vPortExitCritical>
		vTaskSuspendAll();
 8003910:	f000 fb08 	bl	8003f24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003914:	f001 f98e 	bl	8004c34 <vPortEnterCritical>
 8003918:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800391c:	2bff      	cmp	r3, #255	; 0xff
 800391e:	d101      	bne.n	8003924 <xQueueSemaphoreTake+0x9c>
 8003920:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8003924:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003928:	2bff      	cmp	r3, #255	; 0xff
 800392a:	d101      	bne.n	8003930 <xQueueSemaphoreTake+0xa8>
 800392c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003930:	f001 f9a2 	bl	8004c78 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003934:	a901      	add	r1, sp, #4
 8003936:	a802      	add	r0, sp, #8
 8003938:	f000 fca4 	bl	8004284 <xTaskCheckForTimeOut>
 800393c:	2800      	cmp	r0, #0
 800393e:	d14a      	bne.n	80039d6 <xQueueSemaphoreTake+0x14e>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003940:	4620      	mov	r0, r4
 8003942:	f7ff fc6d 	bl	8003220 <prvIsQueueEmpty>
 8003946:	2800      	cmp	r0, #0
 8003948:	d03f      	beq.n	80039ca <xQueueSemaphoreTake+0x142>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800394a:	6823      	ldr	r3, [r4, #0]
 800394c:	b93b      	cbnz	r3, 800395e <xQueueSemaphoreTake+0xd6>
						taskENTER_CRITICAL();
 800394e:	f001 f971 	bl	8004c34 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003952:	68a0      	ldr	r0, [r4, #8]
 8003954:	f000 fd8a 	bl	800446c <xTaskPriorityInherit>
 8003958:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800395a:	f001 f98d 	bl	8004c78 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800395e:	9901      	ldr	r1, [sp, #4]
 8003960:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003964:	f000 fc30 	bl	80041c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003968:	4620      	mov	r0, r4
 800396a:	f7ff fcae 	bl	80032ca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800396e:	f000 fb65 	bl	800403c <xTaskResumeAll>
 8003972:	b938      	cbnz	r0, 8003984 <xQueueSemaphoreTake+0xfc>
					portYIELD_WITHIN_API();
 8003974:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003978:	f8c8 3000 	str.w	r3, [r8]
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	f3bf 8f6f 	isb	sy
 8003984:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8003986:	f001 f955 	bl	8004c34 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800398a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0aa      	beq.n	80038e6 <xQueueSemaphoreTake+0x5e>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003990:	3b01      	subs	r3, #1
 8003992:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003994:	6823      	ldr	r3, [r4, #0]
 8003996:	b913      	cbnz	r3, 800399e <xQueueSemaphoreTake+0x116>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003998:	f000 feba 	bl	8004710 <pvTaskIncrementMutexHeldCount>
 800399c:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800399e:	6923      	ldr	r3, [r4, #16]
 80039a0:	b163      	cbz	r3, 80039bc <xQueueSemaphoreTake+0x134>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039a2:	f104 0010 	add.w	r0, r4, #16
 80039a6:	f000 fc27 	bl	80041f8 <xTaskRemoveFromEventList>
 80039aa:	b138      	cbz	r0, 80039bc <xQueueSemaphoreTake+0x134>
						queueYIELD_IF_USING_PREEMPTION();
 80039ac:	4b17      	ldr	r3, [pc, #92]	; (8003a0c <xQueueSemaphoreTake+0x184>)
 80039ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	f3bf 8f6f 	isb	sy
				return pdPASS;
 80039bc:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 80039be:	f001 f95b 	bl	8004c78 <vPortExitCritical>
}
 80039c2:	4628      	mov	r0, r5
 80039c4:	b004      	add	sp, #16
 80039c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 80039ca:	4620      	mov	r0, r4
 80039cc:	f7ff fc7d 	bl	80032ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80039d0:	f000 fb34 	bl	800403c <xTaskResumeAll>
 80039d4:	e7d6      	b.n	8003984 <xQueueSemaphoreTake+0xfc>
			prvUnlockQueue( pxQueue );
 80039d6:	4620      	mov	r0, r4
 80039d8:	f7ff fc77 	bl	80032ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80039dc:	f000 fb2e 	bl	800403c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80039e0:	4620      	mov	r0, r4
 80039e2:	f7ff fc1d 	bl	8003220 <prvIsQueueEmpty>
 80039e6:	2800      	cmp	r0, #0
 80039e8:	d0cc      	beq.n	8003984 <xQueueSemaphoreTake+0xfc>
					if( xInheritanceOccurred != pdFALSE )
 80039ea:	2d00      	cmp	r5, #0
 80039ec:	d0e9      	beq.n	80039c2 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 80039ee:	f001 f921 	bl	8004c34 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80039f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80039f4:	b119      	cbz	r1, 80039fe <xQueueSemaphoreTake+0x176>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80039f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80039f8:	6819      	ldr	r1, [r3, #0]
 80039fa:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80039fe:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 8003a00:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003a02:	f000 fdcd 	bl	80045a0 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8003a06:	f001 f937 	bl	8004c78 <vPortExitCritical>
 8003a0a:	e7da      	b.n	80039c2 <xQueueSemaphoreTake+0x13a>
 8003a0c:	e000ed04 	.word	0xe000ed04

08003a10 <xQueueReceiveFromISR>:
{
 8003a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a14:	4689      	mov	r9, r1
 8003a16:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8003a18:	4605      	mov	r5, r0
 8003a1a:	b940      	cbnz	r0, 8003a2e <xQueueReceiveFromISR+0x1e>
 8003a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a20:	f383 8811 	msr	BASEPRI, r3
 8003a24:	f3bf 8f6f 	isb	sy
 8003a28:	f3bf 8f4f 	dsb	sy
 8003a2c:	e7fe      	b.n	8003a2c <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a2e:	b951      	cbnz	r1, 8003a46 <xQueueReceiveFromISR+0x36>
 8003a30:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003a32:	b143      	cbz	r3, 8003a46 <xQueueReceiveFromISR+0x36>
 8003a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a38:	f383 8811 	msr	BASEPRI, r3
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	e7fe      	b.n	8003a44 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a46:	f001 fa0d 	bl	8004e64 <vPortValidateInterruptPriority>
	__asm volatile
 8003a4a:	f3ef 8711 	mrs	r7, BASEPRI
 8003a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a52:	f383 8811 	msr	BASEPRI, r3
 8003a56:	f3bf 8f6f 	isb	sy
 8003a5a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a5e:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a60:	b31c      	cbz	r4, 8003aaa <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 8003a62:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a66:	4649      	mov	r1, r9
 8003a68:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a6a:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8003a6c:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a6e:	f7ff fc17 	bl	80032a0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a72:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8003a74:	1c73      	adds	r3, r6, #1
 8003a76:	d113      	bne.n	8003aa0 <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a78:	692b      	ldr	r3, [r5, #16]
 8003a7a:	b90b      	cbnz	r3, 8003a80 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 8003a7c:	2001      	movs	r0, #1
 8003a7e:	e00b      	b.n	8003a98 <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a80:	f105 0010 	add.w	r0, r5, #16
 8003a84:	f000 fbb8 	bl	80041f8 <xTaskRemoveFromEventList>
 8003a88:	2800      	cmp	r0, #0
 8003a8a:	d0f7      	beq.n	8003a7c <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 8003a8c:	f1b8 0f00 	cmp.w	r8, #0
 8003a90:	d0f4      	beq.n	8003a7c <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003a92:	2001      	movs	r0, #1
 8003a94:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8003a98:	f387 8811 	msr	BASEPRI, r7
}
 8003a9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003aa0:	3601      	adds	r6, #1
 8003aa2:	b276      	sxtb	r6, r6
 8003aa4:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8003aa8:	e7e8      	b.n	8003a7c <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 8003aaa:	4620      	mov	r0, r4
 8003aac:	e7f4      	b.n	8003a98 <xQueueReceiveFromISR+0x88>

08003aae <uxQueueMessagesWaiting>:
{
 8003aae:	b513      	push	{r0, r1, r4, lr}
	configASSERT( xQueue );
 8003ab0:	4604      	mov	r4, r0
 8003ab2:	b940      	cbnz	r0, 8003ac6 <uxQueueMessagesWaiting+0x18>
	__asm volatile
 8003ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab8:	f383 8811 	msr	BASEPRI, r3
 8003abc:	f3bf 8f6f 	isb	sy
 8003ac0:	f3bf 8f4f 	dsb	sy
 8003ac4:	e7fe      	b.n	8003ac4 <uxQueueMessagesWaiting+0x16>
	taskENTER_CRITICAL();
 8003ac6:	f001 f8b5 	bl	8004c34 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003aca:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003acc:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8003ace:	f001 f8d3 	bl	8004c78 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003ad2:	9801      	ldr	r0, [sp, #4]
 8003ad4:	b002      	add	sp, #8
 8003ad6:	bd10      	pop	{r4, pc}

08003ad8 <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 8003ad8:	b940      	cbnz	r0, 8003aec <uxQueueMessagesWaitingFromISR+0x14>
 8003ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ade:	f383 8811 	msr	BASEPRI, r3
 8003ae2:	f3bf 8f6f 	isb	sy
 8003ae6:	f3bf 8f4f 	dsb	sy
 8003aea:	e7fe      	b.n	8003aea <uxQueueMessagesWaitingFromISR+0x12>
	uxReturn = pxQueue->uxMessagesWaiting;
 8003aec:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003aee:	4770      	bx	lr

08003af0 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003af0:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8003af2:	4909      	ldr	r1, [pc, #36]	; (8003b18 <vQueueUnregisterQueue+0x28>)
	{
 8003af4:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8003af6:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8003afa:	00dc      	lsls	r4, r3, #3
 8003afc:	4282      	cmp	r2, r0
 8003afe:	d106      	bne.n	8003b0e <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8003b00:	4a06      	ldr	r2, [pc, #24]	; (8003b1c <vQueueUnregisterQueue+0x2c>)
 8003b02:	2100      	movs	r1, #0
 8003b04:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003b08:	4422      	add	r2, r4
 8003b0a:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8003b0c:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b0e:	3301      	adds	r3, #1
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	d1f0      	bne.n	8003af6 <vQueueUnregisterQueue+0x6>
 8003b14:	e7fa      	b.n	8003b0c <vQueueUnregisterQueue+0x1c>
 8003b16:	bf00      	nop
 8003b18:	240069e8 	.word	0x240069e8
 8003b1c:	240069e4 	.word	0x240069e4

08003b20 <vQueueDelete>:
{
 8003b20:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8003b22:	b940      	cbnz	r0, 8003b36 <vQueueDelete+0x16>
 8003b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b28:	f383 8811 	msr	BASEPRI, r3
 8003b2c:	f3bf 8f6f 	isb	sy
 8003b30:	f3bf 8f4f 	dsb	sy
 8003b34:	e7fe      	b.n	8003b34 <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 8003b36:	f7ff ffdb 	bl	8003af0 <vQueueUnregisterQueue>
}
 8003b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vPortFree( pxQueue );
 8003b3e:	f000 bfd9 	b.w	8004af4 <vPortFree>
	...

08003b44 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b44:	4b06      	ldr	r3, [pc, #24]	; (8003b60 <prvResetNextTaskUnblockTime+0x1c>)
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	6812      	ldr	r2, [r2, #0]
 8003b4a:	b91a      	cbnz	r2, 8003b54 <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b4c:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003b50:	605a      	str	r2, [r3, #4]
	}
}
 8003b52:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003b58:	68d2      	ldr	r2, [r2, #12]
 8003b5a:	6852      	ldr	r2, [r2, #4]
 8003b5c:	e7f8      	b.n	8003b50 <prvResetNextTaskUnblockTime+0xc>
 8003b5e:	bf00      	nop
 8003b60:	24000110 	.word	0x24000110

08003b64 <prvAddCurrentTaskToDelayedList.isra.0>:
	}

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
 8003b64:	b570      	push	{r4, r5, r6, lr}
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003b66:	4c12      	ldr	r4, [pc, #72]	; (8003bb0 <prvAddCurrentTaskToDelayedList.isra.0+0x4c>)
static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
 8003b68:	4605      	mov	r5, r0
const TickType_t xConstTickCount = xTickCount;
 8003b6a:	68a6      	ldr	r6, [r4, #8]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b6c:	68e0      	ldr	r0, [r4, #12]
 8003b6e:	3004      	adds	r0, #4
 8003b70:	f7ff fb46 	bl	8003200 <uxListRemove>
 8003b74:	b938      	cbnz	r0, 8003b86 <prvAddCurrentTaskToDelayedList.isra.0+0x22>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003b76:	68e2      	ldr	r2, [r4, #12]
 8003b78:	6923      	ldr	r3, [r4, #16]
 8003b7a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	408a      	lsls	r2, r1
 8003b80:	ea23 0302 	bic.w	r3, r3, r2
 8003b84:	6123      	str	r3, [r4, #16]
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
 8003b86:	1975      	adds	r5, r6, r5

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b88:	68e3      	ldr	r3, [r4, #12]
 8003b8a:	605d      	str	r5, [r3, #4]

		if( xTimeToWake < xConstTickCount )
 8003b8c:	d306      	bcc.n	8003b9c <prvAddCurrentTaskToDelayedList.isra.0+0x38>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b8e:	6960      	ldr	r0, [r4, #20]
 8003b90:	68e1      	ldr	r1, [r4, #12]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003b92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b96:	3104      	adds	r1, #4
 8003b98:	f7ff bb1b 	b.w	80031d2 <vListInsert>
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b9c:	6820      	ldr	r0, [r4, #0]
 8003b9e:	68e1      	ldr	r1, [r4, #12]
 8003ba0:	3104      	adds	r1, #4
 8003ba2:	f7ff fb16 	bl	80031d2 <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
 8003ba6:	6863      	ldr	r3, [r4, #4]
 8003ba8:	429d      	cmp	r5, r3
 8003baa:	d200      	bcs.n	8003bae <prvAddCurrentTaskToDelayedList.isra.0+0x4a>
				xNextTaskUnblockTime = xTimeToWake;
 8003bac:	6065      	str	r5, [r4, #4]
}
 8003bae:	bd70      	pop	{r4, r5, r6, pc}
 8003bb0:	24000110 	.word	0x24000110

08003bb4 <prvIdleTask>:
{
 8003bb4:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bb6:	4c12      	ldr	r4, [pc, #72]	; (8003c00 <prvIdleTask+0x4c>)
				taskYIELD();
 8003bb8:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
 8003bbc:	4e11      	ldr	r6, [pc, #68]	; (8003c04 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bbe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003bc0:	b943      	cbnz	r3, 8003bd4 <prvIdleTask+0x20>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003bc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d9fa      	bls.n	8003bbe <prvIdleTask+0xa>
				taskYIELD();
 8003bc8:	6037      	str	r7, [r6, #0]
 8003bca:	f3bf 8f4f 	dsb	sy
 8003bce:	f3bf 8f6f 	isb	sy
 8003bd2:	e7f4      	b.n	8003bbe <prvIdleTask+0xa>
			taskENTER_CRITICAL();
 8003bd4:	f001 f82e 	bl	8004c34 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003bda:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bdc:	1d28      	adds	r0, r5, #4
 8003bde:	f7ff fb0f 	bl	8003200 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003be2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003be4:	3b01      	subs	r3, #1
 8003be6:	62e3      	str	r3, [r4, #44]	; 0x2c
				--uxDeletedTasksWaitingCleanUp;
 8003be8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003bea:	3b01      	subs	r3, #1
 8003bec:	6323      	str	r3, [r4, #48]	; 0x30
			taskEXIT_CRITICAL();
 8003bee:	f001 f843 	bl	8004c78 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8003bf2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8003bf4:	f000 ff7e 	bl	8004af4 <vPortFree>
			vPortFree( pxTCB );
 8003bf8:	4628      	mov	r0, r5
 8003bfa:	f000 ff7b 	bl	8004af4 <vPortFree>
	}
 8003bfe:	e7de      	b.n	8003bbe <prvIdleTask+0xa>
 8003c00:	24000110 	.word	0x24000110
 8003c04:	e000ed04 	.word	0xe000ed04

08003c08 <xTaskCreate>:
	{
 8003c08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003c0c:	0096      	lsls	r6, r2, #2
	{
 8003c0e:	4607      	mov	r7, r0
 8003c10:	460c      	mov	r4, r1
 8003c12:	4698      	mov	r8, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003c14:	4630      	mov	r0, r6
 8003c16:	f000 feef 	bl	80049f8 <pvPortMalloc>
			if( pxStack != NULL )
 8003c1a:	4681      	mov	r9, r0
 8003c1c:	b1a0      	cbz	r0, 8003c48 <xTaskCreate+0x40>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003c1e:	205c      	movs	r0, #92	; 0x5c
 8003c20:	f000 feea 	bl	80049f8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8003c24:	4605      	mov	r5, r0
 8003c26:	b160      	cbz	r0, 8003c42 <xTaskCreate+0x3a>
					pxNewTCB->pxStack = pxStack;
 8003c28:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003c2c:	4632      	mov	r2, r6
 8003c2e:	21a5      	movs	r1, #165	; 0xa5
 8003c30:	4648      	mov	r0, r9
 8003c32:	f009 ff79 	bl	800db28 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003c36:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
	if( pcName != NULL )
 8003c3a:	b944      	cbnz	r4, 8003c4e <xTaskCreate+0x46>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003c3c:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
 8003c40:	e014      	b.n	8003c6c <xTaskCreate+0x64>
					vPortFree( pxStack );
 8003c42:	4648      	mov	r0, r9
 8003c44:	f000 ff56 	bl	8004af4 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c48:	f04f 36ff 	mov.w	r6, #4294967295
 8003c4c:	e09a      	b.n	8003d84 <xTaskCreate+0x17c>
 8003c4e:	1e63      	subs	r3, r4, #1
 8003c50:	f105 0234 	add.w	r2, r5, #52	; 0x34
 8003c54:	340f      	adds	r4, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c56:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8003c5a:	f802 1b01 	strb.w	r1, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 8003c5e:	7819      	ldrb	r1, [r3, #0]
 8003c60:	b109      	cbz	r1, 8003c66 <xTaskCreate+0x5e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c62:	429c      	cmp	r4, r3
 8003c64:	d1f7      	bne.n	8003c56 <xTaskCreate+0x4e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c66:	2300      	movs	r3, #0
 8003c68:	f885 3043 	strb.w	r3, [r5, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c6c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxNewTCB->uxMutexesHeld = 0;
 8003c6e:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c72:	f105 0904 	add.w	r9, r5, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003c76:	3e04      	subs	r6, #4
 8003c78:	2c06      	cmp	r4, #6
		pxNewTCB->uxMutexesHeld = 0;
 8003c7a:	f8c5 a050 	str.w	sl, [r5, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c7e:	4648      	mov	r0, r9
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003c80:	445e      	add	r6, fp
 8003c82:	bf28      	it	cs
 8003c84:	2406      	movcs	r4, #6
	pxNewTCB->uxPriority = uxPriority;
 8003c86:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8003c88:	64ec      	str	r4, [r5, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c8a:	f1c4 0407 	rsb	r4, r4, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c8e:	f7ff fa91 	bl	80031b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c92:	f105 0018 	add.w	r0, r5, #24
 8003c96:	f7ff fa8d 	bl	80031b4 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8003c9a:	f8c5 a054 	str.w	sl, [r5, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c9e:	4642      	mov	r2, r8
 8003ca0:	4639      	mov	r1, r7
 8003ca2:	f026 0007 	bic.w	r0, r6, #7
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003ca6:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ca8:	61ac      	str	r4, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003caa:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003cac:	f885 a058 	strb.w	sl, [r5, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003cb0:	f000 ff96 	bl	8004be0 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 8003cb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003cb6:	6028      	str	r0, [r5, #0]
	if( pxCreatedTask != NULL )
 8003cb8:	b103      	cbz	r3, 8003cbc <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003cba:	601d      	str	r5, [r3, #0]
		uxCurrentNumberOfTasks++;
 8003cbc:	4c38      	ldr	r4, [pc, #224]	; (8003da0 <xTaskCreate+0x198>)
	taskENTER_CRITICAL();
 8003cbe:	f000 ffb9 	bl	8004c34 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8003cc2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003cc4:	f104 0734 	add.w	r7, r4, #52	; 0x34
 8003cc8:	3301      	adds	r3, #1
 8003cca:	62e3      	str	r3, [r4, #44]	; 0x2c
		if( pxCurrentTCB == NULL )
 8003ccc:	68e3      	ldr	r3, [r4, #12]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d15b      	bne.n	8003d8a <xTaskCreate+0x182>
			pxCurrentTCB = pxNewTCB;
 8003cd2:	60e5      	str	r5, [r4, #12]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003cd4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d12f      	bne.n	8003d3a <xTaskCreate+0x132>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003cda:	4638      	mov	r0, r7
	vListInitialise( &xDelayedTaskList1 );
 8003cdc:	f104 08c0 	add.w	r8, r4, #192	; 0xc0
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ce0:	f7ff fa5d 	bl	800319e <vListInitialise>
 8003ce4:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8003ce8:	f7ff fa59 	bl	800319e <vListInitialise>
 8003cec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003cf0:	f7ff fa55 	bl	800319e <vListInitialise>
 8003cf4:	f104 0070 	add.w	r0, r4, #112	; 0x70
 8003cf8:	f7ff fa51 	bl	800319e <vListInitialise>
 8003cfc:	f104 0084 	add.w	r0, r4, #132	; 0x84
 8003d00:	f7ff fa4d 	bl	800319e <vListInitialise>
 8003d04:	f104 0098 	add.w	r0, r4, #152	; 0x98
	vListInitialise( &xDelayedTaskList2 );
 8003d08:	f104 06d4 	add.w	r6, r4, #212	; 0xd4
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d0c:	f7ff fa47 	bl	800319e <vListInitialise>
 8003d10:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8003d14:	f7ff fa43 	bl	800319e <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
 8003d18:	4640      	mov	r0, r8
 8003d1a:	f7ff fa40 	bl	800319e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d1e:	4630      	mov	r0, r6
 8003d20:	f7ff fa3d 	bl	800319e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003d24:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 8003d28:	f7ff fa39 	bl	800319e <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8003d2c:	f104 0018 	add.w	r0, r4, #24
 8003d30:	f7ff fa35 	bl	800319e <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d34:	f8c4 8000 	str.w	r8, [r4]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d38:	6166      	str	r6, [r4, #20]
		uxTaskNumber++;
 8003d3a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
		prvAddTaskToReadyList( pxNewTCB );
 8003d3e:	2601      	movs	r6, #1
 8003d40:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003d42:	2014      	movs	r0, #20
		uxTaskNumber++;
 8003d44:	3301      	adds	r3, #1
		prvAddTaskToReadyList( pxNewTCB );
 8003d46:	6921      	ldr	r1, [r4, #16]
 8003d48:	fb00 7002 	mla	r0, r0, r2, r7
		uxTaskNumber++;
 8003d4c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003d50:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8003d52:	fa06 f302 	lsl.w	r3, r6, r2
 8003d56:	430b      	orrs	r3, r1
 8003d58:	4649      	mov	r1, r9
 8003d5a:	6123      	str	r3, [r4, #16]
 8003d5c:	f7ff fa2d 	bl	80031ba <vListInsertEnd>
	taskEXIT_CRITICAL();
 8003d60:	f000 ff8a 	bl	8004c78 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003d64:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8003d68:	b163      	cbz	r3, 8003d84 <xTaskCreate+0x17c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d6a:	68e3      	ldr	r3, [r4, #12]
 8003d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d6e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d207      	bcs.n	8003d84 <xTaskCreate+0x17c>
			taskYIELD_IF_USING_PREEMPTION();
 8003d74:	4b0b      	ldr	r3, [pc, #44]	; (8003da4 <xTaskCreate+0x19c>)
 8003d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	f3bf 8f4f 	dsb	sy
 8003d80:	f3bf 8f6f 	isb	sy
	}
 8003d84:	4630      	mov	r0, r6
 8003d86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if( xSchedulerRunning == pdFALSE )
 8003d8a:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1d3      	bne.n	8003d3a <xTaskCreate+0x132>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d92:	68e3      	ldr	r3, [r4, #12]
 8003d94:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d3ce      	bcc.n	8003d3a <xTaskCreate+0x132>
					pxCurrentTCB = pxNewTCB;
 8003d9c:	60e5      	str	r5, [r4, #12]
 8003d9e:	e7cc      	b.n	8003d3a <xTaskCreate+0x132>
 8003da0:	24000110 	.word	0x24000110
 8003da4:	e000ed04 	.word	0xe000ed04

08003da8 <vTaskDelete>:
	{
 8003da8:	b570      	push	{r4, r5, r6, lr}
 8003daa:	4605      	mov	r5, r0
 8003dac:	4c29      	ldr	r4, [pc, #164]	; (8003e54 <vTaskDelete+0xac>)
		taskENTER_CRITICAL();
 8003dae:	f000 ff41 	bl	8004c34 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003db2:	b905      	cbnz	r5, 8003db6 <vTaskDelete+0xe>
 8003db4:	68e5      	ldr	r5, [r4, #12]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003db6:	1d2e      	adds	r6, r5, #4
 8003db8:	4630      	mov	r0, r6
 8003dba:	f7ff fa21 	bl	8003200 <uxListRemove>
 8003dbe:	b958      	cbnz	r0, 8003dd8 <vTaskDelete+0x30>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003dc0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8003dc2:	2014      	movs	r0, #20
 8003dc4:	fb00 4001 	mla	r0, r0, r1, r4
 8003dc8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003dca:	b92b      	cbnz	r3, 8003dd8 <vTaskDelete+0x30>
 8003dcc:	2201      	movs	r2, #1
 8003dce:	6923      	ldr	r3, [r4, #16]
 8003dd0:	408a      	lsls	r2, r1
 8003dd2:	ea23 0302 	bic.w	r3, r3, r2
 8003dd6:	6123      	str	r3, [r4, #16]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003dd8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003dda:	b11b      	cbz	r3, 8003de4 <vTaskDelete+0x3c>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ddc:	f105 0018 	add.w	r0, r5, #24
 8003de0:	f7ff fa0e 	bl	8003200 <uxListRemove>
			uxTaskNumber++;
 8003de4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003de8:	3301      	adds	r3, #1
 8003dea:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			if( pxTCB == pxCurrentTCB )
 8003dee:	68e3      	ldr	r3, [r4, #12]
 8003df0:	42ab      	cmp	r3, r5
 8003df2:	d11a      	bne.n	8003e2a <vTaskDelete+0x82>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003df4:	4631      	mov	r1, r6
 8003df6:	4818      	ldr	r0, [pc, #96]	; (8003e58 <vTaskDelete+0xb0>)
 8003df8:	f7ff f9df 	bl	80031ba <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 8003dfc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003dfe:	3301      	adds	r3, #1
 8003e00:	6323      	str	r3, [r4, #48]	; 0x30
		taskEXIT_CRITICAL();
 8003e02:	f000 ff39 	bl	8004c78 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8003e06:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8003e0a:	b313      	cbz	r3, 8003e52 <vTaskDelete+0xaa>
			if( pxTCB == pxCurrentTCB )
 8003e0c:	68e3      	ldr	r3, [r4, #12]
 8003e0e:	42ab      	cmp	r3, r5
 8003e10:	d11f      	bne.n	8003e52 <vTaskDelete+0xaa>
				configASSERT( uxSchedulerSuspended == 0 );
 8003e12:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8003e16:	b1a3      	cbz	r3, 8003e42 <vTaskDelete+0x9a>
 8003e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1c:	f383 8811 	msr	BASEPRI, r3
 8003e20:	f3bf 8f6f 	isb	sy
 8003e24:	f3bf 8f4f 	dsb	sy
 8003e28:	e7fe      	b.n	8003e28 <vTaskDelete+0x80>
				--uxCurrentNumberOfTasks;
 8003e2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			vPortFree( pxTCB->pxStack );
 8003e2c:	6b28      	ldr	r0, [r5, #48]	; 0x30
				--uxCurrentNumberOfTasks;
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	62e3      	str	r3, [r4, #44]	; 0x2c
			vPortFree( pxTCB->pxStack );
 8003e32:	f000 fe5f 	bl	8004af4 <vPortFree>
			vPortFree( pxTCB );
 8003e36:	4628      	mov	r0, r5
 8003e38:	f000 fe5c 	bl	8004af4 <vPortFree>
				prvResetNextTaskUnblockTime();
 8003e3c:	f7ff fe82 	bl	8003b44 <prvResetNextTaskUnblockTime>
 8003e40:	e7df      	b.n	8003e02 <vTaskDelete+0x5a>
				portYIELD_WITHIN_API();
 8003e42:	4b06      	ldr	r3, [pc, #24]	; (8003e5c <vTaskDelete+0xb4>)
 8003e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	f3bf 8f4f 	dsb	sy
 8003e4e:	f3bf 8f6f 	isb	sy
	}
 8003e52:	bd70      	pop	{r4, r5, r6, pc}
 8003e54:	24000110 	.word	0x24000110
 8003e58:	24000128 	.word	0x24000128
 8003e5c:	e000ed04 	.word	0xe000ed04

08003e60 <eTaskGetState>:
	{
 8003e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxTCB );
 8003e62:	4605      	mov	r5, r0
 8003e64:	b940      	cbnz	r0, 8003e78 <eTaskGetState+0x18>
 8003e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6a:	f383 8811 	msr	BASEPRI, r3
 8003e6e:	f3bf 8f6f 	isb	sy
 8003e72:	f3bf 8f4f 	dsb	sy
 8003e76:	e7fe      	b.n	8003e76 <eTaskGetState+0x16>
		if( pxTCB == pxCurrentTCB )
 8003e78:	4c0e      	ldr	r4, [pc, #56]	; (8003eb4 <eTaskGetState+0x54>)
 8003e7a:	68e3      	ldr	r3, [r4, #12]
 8003e7c:	4283      	cmp	r3, r0
 8003e7e:	d012      	beq.n	8003ea6 <eTaskGetState+0x46>
			taskENTER_CRITICAL();
 8003e80:	f000 fed8 	bl	8004c34 <vPortEnterCritical>
				pxDelayedList = pxDelayedTaskList;
 8003e84:	6827      	ldr	r7, [r4, #0]
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8003e86:	696d      	ldr	r5, [r5, #20]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8003e88:	6966      	ldr	r6, [r4, #20]
			taskEXIT_CRITICAL();
 8003e8a:	f000 fef5 	bl	8004c78 <vPortExitCritical>
			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8003e8e:	42bd      	cmp	r5, r7
 8003e90:	d00b      	beq.n	8003eaa <eTaskGetState+0x4a>
 8003e92:	42b5      	cmp	r5, r6
 8003e94:	d009      	beq.n	8003eaa <eTaskGetState+0x4a>
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8003e96:	3418      	adds	r4, #24
 8003e98:	42a5      	cmp	r5, r4
 8003e9a:	d008      	beq.n	8003eae <eTaskGetState+0x4e>
				eReturn = eReady;
 8003e9c:	2d00      	cmp	r5, #0
 8003e9e:	bf0c      	ite	eq
 8003ea0:	2004      	moveq	r0, #4
 8003ea2:	2001      	movne	r0, #1
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			eReturn = eRunning;
 8003ea6:	2000      	movs	r0, #0
 8003ea8:	e7fc      	b.n	8003ea4 <eTaskGetState+0x44>
				eReturn = eBlocked;
 8003eaa:	2002      	movs	r0, #2
 8003eac:	e7fa      	b.n	8003ea4 <eTaskGetState+0x44>
					eReturn = eDeleted;
 8003eae:	2004      	movs	r0, #4
 8003eb0:	e7f8      	b.n	8003ea4 <eTaskGetState+0x44>
 8003eb2:	bf00      	nop
 8003eb4:	24000110 	.word	0x24000110

08003eb8 <vTaskStartScheduler>:
{
 8003eb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8003eba:	4c17      	ldr	r4, [pc, #92]	; (8003f18 <vTaskStartScheduler+0x60>)
 8003ebc:	2500      	movs	r5, #0
 8003ebe:	2280      	movs	r2, #128	; 0x80
 8003ec0:	4916      	ldr	r1, [pc, #88]	; (8003f1c <vTaskStartScheduler+0x64>)
 8003ec2:	f504 7384 	add.w	r3, r4, #264	; 0x108
 8003ec6:	4816      	ldr	r0, [pc, #88]	; (8003f20 <vTaskStartScheduler+0x68>)
 8003ec8:	9500      	str	r5, [sp, #0]
 8003eca:	9301      	str	r3, [sp, #4]
 8003ecc:	462b      	mov	r3, r5
 8003ece:	f7ff fe9b 	bl	8003c08 <xTaskCreate>
	if( xReturn == pdPASS )
 8003ed2:	2801      	cmp	r0, #1
 8003ed4:	d112      	bne.n	8003efc <vTaskStartScheduler+0x44>
 8003ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eda:	f383 8811 	msr	BASEPRI, r3
 8003ede:	f3bf 8f6f 	isb	sy
 8003ee2:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eea:	6063      	str	r3, [r4, #4]
		xSchedulerRunning = pdTRUE;
 8003eec:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003ef0:	60a5      	str	r5, [r4, #8]
}
 8003ef2:	b003      	add	sp, #12
 8003ef4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 8003ef8:	f000 bf34 	b.w	8004d64 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003efc:	3001      	adds	r0, #1
 8003efe:	d108      	bne.n	8003f12 <vTaskStartScheduler+0x5a>
 8003f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f04:	f383 8811 	msr	BASEPRI, r3
 8003f08:	f3bf 8f6f 	isb	sy
 8003f0c:	f3bf 8f4f 	dsb	sy
 8003f10:	e7fe      	b.n	8003f10 <vTaskStartScheduler+0x58>
}
 8003f12:	b003      	add	sp, #12
 8003f14:	bd30      	pop	{r4, r5, pc}
 8003f16:	bf00      	nop
 8003f18:	24000110 	.word	0x24000110
 8003f1c:	0801fa7a 	.word	0x0801fa7a
 8003f20:	08003bb5 	.word	0x08003bb5

08003f24 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003f24:	4a03      	ldr	r2, [pc, #12]	; (8003f34 <vTaskSuspendAll+0x10>)
 8003f26:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
}
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	24000110 	.word	0x24000110

08003f38 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8003f38:	4b01      	ldr	r3, [pc, #4]	; (8003f40 <xTaskGetTickCount+0x8>)
 8003f3a:	6898      	ldr	r0, [r3, #8]
}
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	24000110 	.word	0x24000110

08003f44 <xTaskGetTickCountFromISR>:
{
 8003f44:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f46:	f000 ff8d 	bl	8004e64 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8003f4a:	4b01      	ldr	r3, [pc, #4]	; (8003f50 <xTaskGetTickCountFromISR+0xc>)
 8003f4c:	6898      	ldr	r0, [r3, #8]
}
 8003f4e:	bd08      	pop	{r3, pc}
 8003f50:	24000110 	.word	0x24000110

08003f54 <xTaskIncrementTick>:
{
 8003f54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f58:	4b36      	ldr	r3, [pc, #216]	; (8004034 <xTaskIncrementTick+0xe0>)
 8003f5a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8003f5e:	461c      	mov	r4, r3
 8003f60:	2a00      	cmp	r2, #0
 8003f62:	d15f      	bne.n	8004024 <xTaskIncrementTick+0xd0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f64:	689f      	ldr	r7, [r3, #8]
 8003f66:	3701      	adds	r7, #1
		xTickCount = xConstTickCount;
 8003f68:	609f      	str	r7, [r3, #8]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f6a:	b9b7      	cbnz	r7, 8003f9a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	b143      	cbz	r3, 8003f84 <xTaskIncrementTick+0x30>
 8003f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f76:	f383 8811 	msr	BASEPRI, r3
 8003f7a:	f3bf 8f6f 	isb	sy
 8003f7e:	f3bf 8f4f 	dsb	sy
 8003f82:	e7fe      	b.n	8003f82 <xTaskIncrementTick+0x2e>
 8003f84:	6823      	ldr	r3, [r4, #0]
 8003f86:	6962      	ldr	r2, [r4, #20]
 8003f88:	6022      	str	r2, [r4, #0]
 8003f8a:	6163      	str	r3, [r4, #20]
 8003f8c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8003f90:	3301      	adds	r3, #1
 8003f92:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
 8003f96:	f7ff fdd5 	bl	8003b44 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f9a:	6863      	ldr	r3, [r4, #4]
BaseType_t xSwitchRequired = pdFALSE;
 8003f9c:	2500      	movs	r5, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f9e:	429f      	cmp	r7, r3
 8003fa0:	d210      	bcs.n	8003fc4 <xTaskIncrementTick+0x70>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003fa2:	68e3      	ldr	r3, [r4, #12]
 8003fa4:	2214      	movs	r2, #20
 8003fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa8:	fb02 4303 	mla	r3, r2, r3, r4
 8003fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
				xSwitchRequired = pdTRUE;
 8003fae:	2b02      	cmp	r3, #2
			if( xYieldPending != pdFALSE )
 8003fb0:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
				xSwitchRequired = pdTRUE;
 8003fb4:	bf28      	it	cs
 8003fb6:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	bf18      	it	ne
 8003fbc:	2501      	movne	r5, #1
}
 8003fbe:	4628      	mov	r0, r5
 8003fc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					prvAddTaskToReadyList( pxTCB );
 8003fc4:	f04f 0a01 	mov.w	sl, #1
 8003fc8:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8004038 <xTaskIncrementTick+0xe4>
 8003fcc:	f04f 0914 	mov.w	r9, #20
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fd0:	6823      	ldr	r3, [r4, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	b91b      	cbnz	r3, 8003fde <xTaskIncrementTick+0x8a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fd6:	f04f 33ff 	mov.w	r3, #4294967295
						xNextTaskUnblockTime = xItemValue;
 8003fda:	6063      	str	r3, [r4, #4]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003fdc:	e7e1      	b.n	8003fa2 <xTaskIncrementTick+0x4e>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fde:	6823      	ldr	r3, [r4, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003fe4:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8003fe6:	429f      	cmp	r7, r3
 8003fe8:	d3f7      	bcc.n	8003fda <xTaskIncrementTick+0x86>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fea:	f106 0b04 	add.w	fp, r6, #4
 8003fee:	4658      	mov	r0, fp
 8003ff0:	f7ff f906 	bl	8003200 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ff4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8003ff6:	b11b      	cbz	r3, 8004000 <xTaskIncrementTick+0xac>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ff8:	f106 0018 	add.w	r0, r6, #24
 8003ffc:	f7ff f900 	bl	8003200 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004000:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8004002:	4659      	mov	r1, fp
 8004004:	6922      	ldr	r2, [r4, #16]
 8004006:	fa0a f300 	lsl.w	r3, sl, r0
 800400a:	fb09 8000 	mla	r0, r9, r0, r8
 800400e:	4313      	orrs	r3, r2
 8004010:	6123      	str	r3, [r4, #16]
 8004012:	f7ff f8d2 	bl	80031ba <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004016:	68e3      	ldr	r3, [r4, #12]
 8004018:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800401a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800401c:	429a      	cmp	r2, r3
 800401e:	bf28      	it	cs
 8004020:	2501      	movcs	r5, #1
 8004022:	e7d5      	b.n	8003fd0 <xTaskIncrementTick+0x7c>
		++xPendedTicks;
 8004024:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
BaseType_t xSwitchRequired = pdFALSE;
 8004028:	2500      	movs	r5, #0
		++xPendedTicks;
 800402a:	3201      	adds	r2, #1
 800402c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	return xSwitchRequired;
 8004030:	e7c5      	b.n	8003fbe <xTaskIncrementTick+0x6a>
 8004032:	bf00      	nop
 8004034:	24000110 	.word	0x24000110
 8004038:	24000144 	.word	0x24000144

0800403c <xTaskResumeAll>:
{
 800403c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8004040:	4c33      	ldr	r4, [pc, #204]	; (8004110 <xTaskResumeAll+0xd4>)
 8004042:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8004046:	b943      	cbnz	r3, 800405a <xTaskResumeAll+0x1e>
 8004048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404c:	f383 8811 	msr	BASEPRI, r3
 8004050:	f3bf 8f6f 	isb	sy
 8004054:	f3bf 8f4f 	dsb	sy
 8004058:	e7fe      	b.n	8004058 <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 800405a:	f000 fdeb 	bl	8004c34 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800405e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8004062:	3b01      	subs	r3, #1
 8004064:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004068:	f8d4 5104 	ldr.w	r5, [r4, #260]	; 0x104
 800406c:	b135      	cbz	r5, 800407c <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
 800406e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004070:	f000 fe02 	bl	8004c78 <vPortExitCritical>
}
 8004074:	4620      	mov	r0, r4
 8004076:	b002      	add	sp, #8
 8004078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800407c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800407e:	2b00      	cmp	r3, #0
 8004080:	d0f5      	beq.n	800406e <xTaskResumeAll+0x32>
					prvAddTaskToReadyList( pxTCB );
 8004082:	2601      	movs	r6, #1
 8004084:	f104 0734 	add.w	r7, r4, #52	; 0x34
 8004088:	f04f 0814 	mov.w	r8, #20
 800408c:	e01d      	b.n	80040ca <xTaskResumeAll+0x8e>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800408e:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8004092:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004094:	f105 0018 	add.w	r0, r5, #24
 8004098:	f7ff f8b2 	bl	8003200 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800409c:	1d29      	adds	r1, r5, #4
 800409e:	4608      	mov	r0, r1
 80040a0:	9101      	str	r1, [sp, #4]
 80040a2:	f7ff f8ad 	bl	8003200 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80040a6:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80040a8:	6922      	ldr	r2, [r4, #16]
 80040aa:	fa06 f300 	lsl.w	r3, r6, r0
 80040ae:	9901      	ldr	r1, [sp, #4]
 80040b0:	fb08 7000 	mla	r0, r8, r0, r7
 80040b4:	4313      	orrs	r3, r2
 80040b6:	6123      	str	r3, [r4, #16]
 80040b8:	f7ff f87f 	bl	80031ba <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040bc:	68e3      	ldr	r3, [r4, #12]
 80040be:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80040c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d301      	bcc.n	80040ca <xTaskResumeAll+0x8e>
						xYieldPending = pdTRUE;
 80040c6:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040ca:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1dd      	bne.n	800408e <xTaskResumeAll+0x52>
				if( pxTCB != NULL )
 80040d2:	b10d      	cbz	r5, 80040d8 <xTaskResumeAll+0x9c>
					prvResetNextTaskUnblockTime();
 80040d4:	f7ff fd36 	bl	8003b44 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80040d8:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
					if( xPendedCounts > ( TickType_t ) 0U )
 80040dc:	b14d      	cbz	r5, 80040f2 <xTaskResumeAll+0xb6>
								xYieldPending = pdTRUE;
 80040de:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
 80040e0:	f7ff ff38 	bl	8003f54 <xTaskIncrementTick>
 80040e4:	b108      	cbz	r0, 80040ea <xTaskResumeAll+0xae>
								xYieldPending = pdTRUE;
 80040e6:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
						} while( xPendedCounts > ( TickType_t ) 0U );
 80040ea:	3d01      	subs	r5, #1
 80040ec:	d1f8      	bne.n	80040e0 <xTaskResumeAll+0xa4>
						xPendedTicks = 0;
 80040ee:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
				if( xYieldPending != pdFALSE )
 80040f2:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d0b9      	beq.n	800406e <xTaskResumeAll+0x32>
					taskYIELD_IF_USING_PREEMPTION();
 80040fa:	4b06      	ldr	r3, [pc, #24]	; (8004114 <xTaskResumeAll+0xd8>)
 80040fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	f3bf 8f4f 	dsb	sy
 8004106:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800410a:	2401      	movs	r4, #1
 800410c:	e7b0      	b.n	8004070 <xTaskResumeAll+0x34>
 800410e:	bf00      	nop
 8004110:	24000110 	.word	0x24000110
 8004114:	e000ed04 	.word	0xe000ed04

08004118 <vTaskDelay>:
	{
 8004118:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800411a:	b940      	cbnz	r0, 800412e <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 800411c:	4b0f      	ldr	r3, [pc, #60]	; (800415c <vTaskDelay+0x44>)
 800411e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	f3bf 8f4f 	dsb	sy
 8004128:	f3bf 8f6f 	isb	sy
	}
 800412c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800412e:	4b0c      	ldr	r3, [pc, #48]	; (8004160 <vTaskDelay+0x48>)
 8004130:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8004134:	b143      	cbz	r3, 8004148 <vTaskDelay+0x30>
 8004136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413a:	f383 8811 	msr	BASEPRI, r3
 800413e:	f3bf 8f6f 	isb	sy
 8004142:	f3bf 8f4f 	dsb	sy
 8004146:	e7fe      	b.n	8004146 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004148:	f7ff feec 	bl	8003f24 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800414c:	f7ff fd0a 	bl	8003b64 <prvAddCurrentTaskToDelayedList.isra.0>
			xAlreadyYielded = xTaskResumeAll();
 8004150:	f7ff ff74 	bl	800403c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8004154:	2800      	cmp	r0, #0
 8004156:	d0e1      	beq.n	800411c <vTaskDelay+0x4>
 8004158:	e7e8      	b.n	800412c <vTaskDelay+0x14>
 800415a:	bf00      	nop
 800415c:	e000ed04 	.word	0xe000ed04
 8004160:	24000110 	.word	0x24000110

08004164 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004164:	4b17      	ldr	r3, [pc, #92]	; (80041c4 <vTaskSwitchContext+0x60>)
 8004166:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800416a:	4618      	mov	r0, r3
{
 800416c:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800416e:	b11a      	cbz	r2, 8004178 <vTaskSwitchContext+0x14>
		xYieldPending = pdTRUE;
 8004170:	2201      	movs	r2, #1
 8004172:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
 8004176:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8004178:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800417c:	691a      	ldr	r2, [r3, #16]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800417e:	fab2 f282 	clz	r2, r2
 8004182:	b2d2      	uxtb	r2, r2
 8004184:	2114      	movs	r1, #20
 8004186:	f1c2 021f 	rsb	r2, r2, #31
 800418a:	4351      	muls	r1, r2
 800418c:	440b      	add	r3, r1
 800418e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8004190:	b944      	cbnz	r4, 80041a4 <vTaskSwitchContext+0x40>
	__asm volatile
 8004192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004196:	f383 8811 	msr	BASEPRI, r3
 800419a:	f3bf 8f6f 	isb	sy
 800419e:	f3bf 8f4f 	dsb	sy
 80041a2:	e7fe      	b.n	80041a2 <vTaskSwitchContext+0x3e>
 80041a4:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80041a6:	4401      	add	r1, r0
 80041a8:	6864      	ldr	r4, [r4, #4]
 80041aa:	313c      	adds	r1, #60	; 0x3c
 80041ac:	428c      	cmp	r4, r1
 80041ae:	639c      	str	r4, [r3, #56]	; 0x38
 80041b0:	bf04      	itt	eq
 80041b2:	6861      	ldreq	r1, [r4, #4]
 80041b4:	6399      	streq	r1, [r3, #56]	; 0x38
 80041b6:	2314      	movs	r3, #20
 80041b8:	fb03 0202 	mla	r2, r3, r2, r0
 80041bc:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	60c3      	str	r3, [r0, #12]
}
 80041c2:	e7d8      	b.n	8004176 <vTaskSwitchContext+0x12>
 80041c4:	24000110 	.word	0x24000110

080041c8 <vTaskPlaceOnEventList>:
{
 80041c8:	b510      	push	{r4, lr}
 80041ca:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80041cc:	b940      	cbnz	r0, 80041e0 <vTaskPlaceOnEventList+0x18>
 80041ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d2:	f383 8811 	msr	BASEPRI, r3
 80041d6:	f3bf 8f6f 	isb	sy
 80041da:	f3bf 8f4f 	dsb	sy
 80041de:	e7fe      	b.n	80041de <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041e0:	4b04      	ldr	r3, [pc, #16]	; (80041f4 <vTaskPlaceOnEventList+0x2c>)
 80041e2:	68d9      	ldr	r1, [r3, #12]
 80041e4:	3118      	adds	r1, #24
 80041e6:	f7fe fff4 	bl	80031d2 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80041ea:	4620      	mov	r0, r4
}
 80041ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80041f0:	f7ff bcb8 	b.w	8003b64 <prvAddCurrentTaskToDelayedList.isra.0>
 80041f4:	24000110 	.word	0x24000110

080041f8 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041f8:	68c3      	ldr	r3, [r0, #12]
{
 80041fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041fc:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80041fe:	b945      	cbnz	r5, 8004212 <xTaskRemoveFromEventList+0x1a>
 8004200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004204:	f383 8811 	msr	BASEPRI, r3
 8004208:	f3bf 8f6f 	isb	sy
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	e7fe      	b.n	8004210 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004212:	f105 0118 	add.w	r1, r5, #24
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004216:	4c15      	ldr	r4, [pc, #84]	; (800426c <xTaskRemoveFromEventList+0x74>)
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004218:	4608      	mov	r0, r1
 800421a:	9101      	str	r1, [sp, #4]
 800421c:	f7fe fff0 	bl	8003200 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004220:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8004224:	9901      	ldr	r1, [sp, #4]
 8004226:	b9e3      	cbnz	r3, 8004262 <xTaskRemoveFromEventList+0x6a>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004228:	1d29      	adds	r1, r5, #4
 800422a:	4608      	mov	r0, r1
 800422c:	9101      	str	r1, [sp, #4]
 800422e:	f7fe ffe7 	bl	8003200 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004232:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004234:	2301      	movs	r3, #1
 8004236:	6920      	ldr	r0, [r4, #16]
 8004238:	9901      	ldr	r1, [sp, #4]
 800423a:	4093      	lsls	r3, r2
 800423c:	4303      	orrs	r3, r0
 800423e:	2014      	movs	r0, #20
 8004240:	6123      	str	r3, [r4, #16]
 8004242:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8004246:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800424a:	f7fe ffb6 	bl	80031ba <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800424e:	68e3      	ldr	r3, [r4, #12]
 8004250:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004254:	429a      	cmp	r2, r3
 8004256:	d907      	bls.n	8004268 <xTaskRemoveFromEventList+0x70>
		xYieldPending = pdTRUE;
 8004258:	2001      	movs	r0, #1
 800425a:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
}
 800425e:	b003      	add	sp, #12
 8004260:	bd30      	pop	{r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004262:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 8004266:	e7f0      	b.n	800424a <xTaskRemoveFromEventList+0x52>
		xReturn = pdFALSE;
 8004268:	2000      	movs	r0, #0
	return xReturn;
 800426a:	e7f8      	b.n	800425e <xTaskRemoveFromEventList+0x66>
 800426c:	24000110 	.word	0x24000110

08004270 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004270:	4b03      	ldr	r3, [pc, #12]	; (8004280 <vTaskInternalSetTimeOutState+0x10>)
 8004272:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004276:	689b      	ldr	r3, [r3, #8]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004278:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800427a:	6043      	str	r3, [r0, #4]
}
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	24000110 	.word	0x24000110

08004284 <xTaskCheckForTimeOut>:
{
 8004284:	b538      	push	{r3, r4, r5, lr}
 8004286:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8004288:	4605      	mov	r5, r0
 800428a:	b940      	cbnz	r0, 800429e <xTaskCheckForTimeOut+0x1a>
 800428c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004290:	f383 8811 	msr	BASEPRI, r3
 8004294:	f3bf 8f6f 	isb	sy
 8004298:	f3bf 8f4f 	dsb	sy
 800429c:	e7fe      	b.n	800429c <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800429e:	b941      	cbnz	r1, 80042b2 <xTaskCheckForTimeOut+0x2e>
 80042a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a4:	f383 8811 	msr	BASEPRI, r3
 80042a8:	f3bf 8f6f 	isb	sy
 80042ac:	f3bf 8f4f 	dsb	sy
 80042b0:	e7fe      	b.n	80042b0 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80042b2:	f000 fcbf 	bl	8004c34 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80042b6:	4b0e      	ldr	r3, [pc, #56]	; (80042f0 <xTaskCheckForTimeOut+0x6c>)
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80042b8:	6828      	ldr	r0, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 80042ba:	6899      	ldr	r1, [r3, #8]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80042bc:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80042c0:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80042c2:	4298      	cmp	r0, r3
 80042c4:	d001      	beq.n	80042ca <xTaskCheckForTimeOut+0x46>
 80042c6:	428a      	cmp	r2, r1
 80042c8:	d910      	bls.n	80042ec <xTaskCheckForTimeOut+0x68>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80042ca:	6823      	ldr	r3, [r4, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80042cc:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80042ce:	4283      	cmp	r3, r0
 80042d0:	d90a      	bls.n	80042e8 <xTaskCheckForTimeOut+0x64>
			*pxTicksToWait -= xElapsedTime;
 80042d2:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 80042d4:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 80042d6:	4413      	add	r3, r2
 80042d8:	6023      	str	r3, [r4, #0]
			xReturn = pdFALSE;
 80042da:	2400      	movs	r4, #0
			vTaskInternalSetTimeOutState( pxTimeOut );
 80042dc:	f7ff ffc8 	bl	8004270 <vTaskInternalSetTimeOutState>
	taskEXIT_CRITICAL();
 80042e0:	f000 fcca 	bl	8004c78 <vPortExitCritical>
}
 80042e4:	4620      	mov	r0, r4
 80042e6:	bd38      	pop	{r3, r4, r5, pc}
			*pxTicksToWait = 0;
 80042e8:	2300      	movs	r3, #0
 80042ea:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80042ec:	2401      	movs	r4, #1
 80042ee:	e7f7      	b.n	80042e0 <xTaskCheckForTimeOut+0x5c>
 80042f0:	24000110 	.word	0x24000110

080042f4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80042f4:	4b02      	ldr	r3, [pc, #8]	; (8004300 <vTaskMissedYield+0xc>)
 80042f6:	2201      	movs	r2, #1
 80042f8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	24000110 	.word	0x24000110

08004304 <vTaskGetInfo>:
	{
 8004304:	b570      	push	{r4, r5, r6, lr}
 8004306:	460c      	mov	r4, r1
 8004308:	4616      	mov	r6, r2
		pxTCB = prvGetTCBFromHandle( xTask );
 800430a:	4605      	mov	r5, r0
 800430c:	b908      	cbnz	r0, 8004312 <vTaskGetInfo+0xe>
 800430e:	4a15      	ldr	r2, [pc, #84]	; (8004364 <vTaskGetInfo+0x60>)
 8004310:	68d5      	ldr	r5, [r2, #12]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8004312:	f105 0234 	add.w	r2, r5, #52	; 0x34
		if( eState != eInvalid )
 8004316:	2b05      	cmp	r3, #5
		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8004318:	6025      	str	r5, [r4, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800431a:	6062      	str	r2, [r4, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800431c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800431e:	6122      	str	r2, [r4, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8004320:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8004322:	61e2      	str	r2, [r4, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8004324:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8004326:	60a2      	str	r2, [r4, #8]
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8004328:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 800432a:	6162      	str	r2, [r4, #20]
			pxTaskStatus->ulRunTimeCounter = 0;
 800432c:	f04f 0200 	mov.w	r2, #0
 8004330:	61a2      	str	r2, [r4, #24]
		if( eState != eInvalid )
 8004332:	d00e      	beq.n	8004352 <vTaskGetInfo+0x4e>
			if( pxTCB == pxCurrentTCB )
 8004334:	490b      	ldr	r1, [pc, #44]	; (8004364 <vTaskGetInfo+0x60>)
 8004336:	68c9      	ldr	r1, [r1, #12]
 8004338:	42a9      	cmp	r1, r5
				pxTaskStatus->eCurrentState = eRunning;
 800433a:	bf0c      	ite	eq
 800433c:	7322      	strbeq	r2, [r4, #12]
				pxTaskStatus->eCurrentState = eState;
 800433e:	7323      	strbne	r3, [r4, #12]
		if( xGetFreeStackSpace != pdFALSE )
 8004340:	b176      	cbz	r6, 8004360 <vTaskGetInfo+0x5c>
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8004342:	6b29      	ldr	r1, [r5, #48]	; 0x30
	uint32_t ulCount = 0U;
 8004344:	2300      	movs	r3, #0
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004346:	5cca      	ldrb	r2, [r1, r3]
 8004348:	2aa5      	cmp	r2, #165	; 0xa5
 800434a:	d007      	beq.n	800435c <vTaskGetInfo+0x58>
		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800434c:	089b      	lsrs	r3, r3, #2
		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800434e:	8423      	strh	r3, [r4, #32]
	}
 8004350:	bd70      	pop	{r4, r5, r6, pc}
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8004352:	4628      	mov	r0, r5
 8004354:	f7ff fd84 	bl	8003e60 <eTaskGetState>
 8004358:	7320      	strb	r0, [r4, #12]
 800435a:	e7f1      	b.n	8004340 <vTaskGetInfo+0x3c>
			ulCount++;
 800435c:	3301      	adds	r3, #1
 800435e:	e7f2      	b.n	8004346 <vTaskGetInfo+0x42>
			pxTaskStatus->usStackHighWaterMark = 0;
 8004360:	8426      	strh	r6, [r4, #32]
	}
 8004362:	e7f5      	b.n	8004350 <vTaskGetInfo+0x4c>
 8004364:	24000110 	.word	0x24000110

08004368 <prvListTasksWithinSingleList>:
	{
 8004368:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800436c:	680d      	ldr	r5, [r1, #0]
	{
 800436e:	4606      	mov	r6, r0
 8004370:	460c      	mov	r4, r1
 8004372:	4617      	mov	r7, r2
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8004374:	b31d      	cbz	r5, 80043be <prvListTasksWithinSingleList+0x56>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004376:	684b      	ldr	r3, [r1, #4]
 8004378:	f101 0808 	add.w	r8, r1, #8
	UBaseType_t uxTask = 0;
 800437c:	2500      	movs	r5, #0
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800437e:	f04f 0b24 	mov.w	fp, #36	; 0x24
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	4543      	cmp	r3, r8
 8004386:	604b      	str	r3, [r1, #4]
 8004388:	bf04      	itt	eq
 800438a:	68cb      	ldreq	r3, [r1, #12]
 800438c:	604b      	streq	r3, [r1, #4]
 800438e:	684b      	ldr	r3, [r1, #4]
 8004390:	f8d3 a00c 	ldr.w	sl, [r3, #12]
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004394:	6863      	ldr	r3, [r4, #4]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8004396:	fb0b 6105 	mla	r1, fp, r5, r6
 800439a:	2201      	movs	r2, #1
				uxTask++;
 800439c:	3501      	adds	r5, #1
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	4598      	cmp	r8, r3
 80043a2:	6063      	str	r3, [r4, #4]
 80043a4:	bf04      	itt	eq
 80043a6:	f8d8 3004 	ldreq.w	r3, [r8, #4]
 80043aa:	6063      	streq	r3, [r4, #4]
 80043ac:	6863      	ldr	r3, [r4, #4]
 80043ae:	f8d3 900c 	ldr.w	r9, [r3, #12]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 80043b2:	463b      	mov	r3, r7
 80043b4:	4648      	mov	r0, r9
 80043b6:	f7ff ffa5 	bl	8004304 <vTaskGetInfo>
			} while( pxNextTCB != pxFirstTCB );
 80043ba:	45ca      	cmp	sl, r9
 80043bc:	d1ea      	bne.n	8004394 <prvListTasksWithinSingleList+0x2c>
	}
 80043be:	4628      	mov	r0, r5
 80043c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080043c4 <uxTaskGetSystemState>:
	{
 80043c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80043c8:	4e1e      	ldr	r6, [pc, #120]	; (8004444 <uxTaskGetSystemState+0x80>)
	{
 80043ca:	4605      	mov	r5, r0
 80043cc:	4617      	mov	r7, r2
		vTaskSuspendAll();
 80043ce:	f7ff fda9 	bl	8003f24 <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80043d2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80043d4:	428b      	cmp	r3, r1
 80043d6:	d832      	bhi.n	800443e <uxTaskGetSystemState+0x7a>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80043d8:	f04f 0807 	mov.w	r8, #7
 80043dc:	2400      	movs	r4, #0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80043de:	f04f 0b14 	mov.w	fp, #20
 80043e2:	f106 0a34 	add.w	sl, r6, #52	; 0x34
 80043e6:	f04f 0924 	mov.w	r9, #36	; 0x24
					uxQueue--;
 80043ea:	f108 38ff 	add.w	r8, r8, #4294967295
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80043ee:	fb09 5004 	mla	r0, r9, r4, r5
 80043f2:	2201      	movs	r2, #1
 80043f4:	fb0b a108 	mla	r1, fp, r8, sl
 80043f8:	f7ff ffb6 	bl	8004368 <prvListTasksWithinSingleList>
 80043fc:	4404      	add	r4, r0
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043fe:	f1b8 0f00 	cmp.w	r8, #0
 8004402:	d1f2      	bne.n	80043ea <uxTaskGetSystemState+0x26>
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8004404:	6831      	ldr	r1, [r6, #0]
 8004406:	2202      	movs	r2, #2
 8004408:	fb09 5004 	mla	r0, r9, r4, r5
 800440c:	f7ff ffac 	bl	8004368 <prvListTasksWithinSingleList>
 8004410:	4404      	add	r4, r0
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8004412:	6971      	ldr	r1, [r6, #20]
 8004414:	2202      	movs	r2, #2
 8004416:	fb09 5004 	mla	r0, r9, r4, r5
 800441a:	f7ff ffa5 	bl	8004368 <prvListTasksWithinSingleList>
 800441e:	4404      	add	r4, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8004420:	2204      	movs	r2, #4
 8004422:	4909      	ldr	r1, [pc, #36]	; (8004448 <uxTaskGetSystemState+0x84>)
 8004424:	fb09 5004 	mla	r0, r9, r4, r5
 8004428:	f7ff ff9e 	bl	8004368 <prvListTasksWithinSingleList>
 800442c:	4404      	add	r4, r0
					if( pulTotalRunTime != NULL )
 800442e:	b10f      	cbz	r7, 8004434 <uxTaskGetSystemState+0x70>
						*pulTotalRunTime = 0;
 8004430:	f8c7 8000 	str.w	r8, [r7]
		( void ) xTaskResumeAll();
 8004434:	f7ff fe02 	bl	800403c <xTaskResumeAll>
	}
 8004438:	4620      	mov	r0, r4
 800443a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800443e:	2400      	movs	r4, #0
 8004440:	e7f8      	b.n	8004434 <uxTaskGetSystemState+0x70>
 8004442:	bf00      	nop
 8004444:	24000110 	.word	0x24000110
 8004448:	24000128 	.word	0x24000128

0800444c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800444c:	4b06      	ldr	r3, [pc, #24]	; (8004468 <xTaskGetSchedulerState+0x1c>)
 800444e:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8004452:	b132      	cbz	r2, 8004462 <xTaskGetSchedulerState+0x16>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004454:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8004458:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800445a:	bf0c      	ite	eq
 800445c:	2002      	moveq	r0, #2
 800445e:	2000      	movne	r0, #0
 8004460:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004462:	2001      	movs	r0, #1
	}
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	24000110 	.word	0x24000110

0800446c <xTaskPriorityInherit>:
	{
 800446c:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800446e:	4604      	mov	r4, r0
 8004470:	2800      	cmp	r0, #0
 8004472:	d031      	beq.n	80044d8 <xTaskPriorityInherit+0x6c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004474:	4a20      	ldr	r2, [pc, #128]	; (80044f8 <xTaskPriorityInherit+0x8c>)
 8004476:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004478:	68d1      	ldr	r1, [r2, #12]
 800447a:	4615      	mov	r5, r2
 800447c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800447e:	428b      	cmp	r3, r1
 8004480:	d232      	bcs.n	80044e8 <xTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004482:	6982      	ldr	r2, [r0, #24]
 8004484:	2a00      	cmp	r2, #0
 8004486:	db04      	blt.n	8004492 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004488:	68ea      	ldr	r2, [r5, #12]
 800448a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800448c:	f1c2 0207 	rsb	r2, r2, #7
 8004490:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004492:	2214      	movs	r2, #20
 8004494:	4e19      	ldr	r6, [pc, #100]	; (80044fc <xTaskPriorityInherit+0x90>)
 8004496:	fb02 6303 	mla	r3, r2, r3, r6
 800449a:	6962      	ldr	r2, [r4, #20]
 800449c:	429a      	cmp	r2, r3
 800449e:	d11d      	bne.n	80044dc <xTaskPriorityInherit+0x70>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044a0:	1d21      	adds	r1, r4, #4
 80044a2:	4608      	mov	r0, r1
 80044a4:	9101      	str	r1, [sp, #4]
 80044a6:	f7fe feab 	bl	8003200 <uxListRemove>
 80044aa:	9901      	ldr	r1, [sp, #4]
 80044ac:	b930      	cbnz	r0, 80044bc <xTaskPriorityInherit+0x50>
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80044ae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80044b0:	2201      	movs	r2, #1
 80044b2:	692b      	ldr	r3, [r5, #16]
 80044b4:	4082      	lsls	r2, r0
 80044b6:	ea23 0302 	bic.w	r3, r3, r2
 80044ba:	612b      	str	r3, [r5, #16]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80044bc:	68eb      	ldr	r3, [r5, #12]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80044be:	6928      	ldr	r0, [r5, #16]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80044c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c2:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80044c4:	2401      	movs	r4, #1
 80044c6:	fa04 f203 	lsl.w	r2, r4, r3
 80044ca:	4302      	orrs	r2, r0
 80044cc:	2014      	movs	r0, #20
 80044ce:	fb00 6003 	mla	r0, r0, r3, r6
 80044d2:	612a      	str	r2, [r5, #16]
 80044d4:	f7fe fe71 	bl	80031ba <vListInsertEnd>
	BaseType_t xReturn = pdFALSE;
 80044d8:	4620      	mov	r0, r4
		return xReturn;
 80044da:	e003      	b.n	80044e4 <xTaskPriorityInherit+0x78>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80044dc:	68eb      	ldr	r3, [r5, #12]
				xReturn = pdTRUE;
 80044de:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80044e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e2:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 80044e4:	b002      	add	sp, #8
 80044e6:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80044e8:	68d3      	ldr	r3, [r2, #12]
 80044ea:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80044ec:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80044ee:	42a0      	cmp	r0, r4
 80044f0:	bf2c      	ite	cs
 80044f2:	2000      	movcs	r0, #0
 80044f4:	2001      	movcc	r0, #1
 80044f6:	e7f5      	b.n	80044e4 <xTaskPriorityInherit+0x78>
 80044f8:	24000110 	.word	0x24000110
 80044fc:	24000144 	.word	0x24000144

08004500 <xTaskPriorityDisinherit>:
	{
 8004500:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8004502:	4604      	mov	r4, r0
 8004504:	b910      	cbnz	r0, 800450c <xTaskPriorityDisinherit+0xc>
	BaseType_t xReturn = pdFALSE;
 8004506:	2000      	movs	r0, #0
	}
 8004508:	b002      	add	sp, #8
 800450a:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800450c:	4d22      	ldr	r5, [pc, #136]	; (8004598 <xTaskPriorityDisinherit+0x98>)
 800450e:	68eb      	ldr	r3, [r5, #12]
 8004510:	4283      	cmp	r3, r0
 8004512:	d008      	beq.n	8004526 <xTaskPriorityDisinherit+0x26>
 8004514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	e7fe      	b.n	8004524 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8004526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004528:	b943      	cbnz	r3, 800453c <xTaskPriorityDisinherit+0x3c>
 800452a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452e:	f383 8811 	msr	BASEPRI, r3
 8004532:	f3bf 8f6f 	isb	sy
 8004536:	f3bf 8f4f 	dsb	sy
 800453a:	e7fe      	b.n	800453a <xTaskPriorityDisinherit+0x3a>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800453c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800453e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004540:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8004542:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004544:	4291      	cmp	r1, r2
 8004546:	d0de      	beq.n	8004506 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1dc      	bne.n	8004506 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800454c:	1d01      	adds	r1, r0, #4
 800454e:	4608      	mov	r0, r1
 8004550:	9101      	str	r1, [sp, #4]
 8004552:	f7fe fe55 	bl	8003200 <uxListRemove>
 8004556:	9901      	ldr	r1, [sp, #4]
 8004558:	b958      	cbnz	r0, 8004572 <xTaskPriorityDisinherit+0x72>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800455a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800455c:	2014      	movs	r0, #20
 800455e:	fb00 5006 	mla	r0, r0, r6, r5
 8004562:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004564:	b92b      	cbnz	r3, 8004572 <xTaskPriorityDisinherit+0x72>
 8004566:	2201      	movs	r2, #1
 8004568:	692b      	ldr	r3, [r5, #16]
 800456a:	40b2      	lsls	r2, r6
 800456c:	ea23 0302 	bic.w	r3, r3, r2
 8004570:	612b      	str	r3, [r5, #16]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004572:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 8004574:	6928      	ldr	r0, [r5, #16]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004576:	f1c3 0207 	rsb	r2, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800457a:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800457c:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800457e:	2401      	movs	r4, #1
 8004580:	fa04 f203 	lsl.w	r2, r4, r3
 8004584:	4302      	orrs	r2, r0
 8004586:	2014      	movs	r0, #20
 8004588:	612a      	str	r2, [r5, #16]
 800458a:	4a04      	ldr	r2, [pc, #16]	; (800459c <xTaskPriorityDisinherit+0x9c>)
 800458c:	fb00 2003 	mla	r0, r0, r3, r2
 8004590:	f7fe fe13 	bl	80031ba <vListInsertEnd>
					xReturn = pdTRUE;
 8004594:	4620      	mov	r0, r4
		return xReturn;
 8004596:	e7b7      	b.n	8004508 <xTaskPriorityDisinherit+0x8>
 8004598:	24000110 	.word	0x24000110
 800459c:	24000144 	.word	0x24000144

080045a0 <vTaskPriorityDisinheritAfterTimeout>:
	{
 80045a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 80045a2:	4604      	mov	r4, r0
 80045a4:	2800      	cmp	r0, #0
 80045a6:	d04b      	beq.n	8004640 <vTaskPriorityDisinheritAfterTimeout+0xa0>
			configASSERT( pxTCB->uxMutexesHeld );
 80045a8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80045aa:	b942      	cbnz	r2, 80045be <vTaskPriorityDisinheritAfterTimeout+0x1e>
 80045ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b0:	f383 8811 	msr	BASEPRI, r3
 80045b4:	f3bf 8f6f 	isb	sy
 80045b8:	f3bf 8f4f 	dsb	sy
 80045bc:	e7fe      	b.n	80045bc <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80045be:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80045c0:	4299      	cmp	r1, r3
 80045c2:	bf38      	it	cc
 80045c4:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 80045c6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80045c8:	428b      	cmp	r3, r1
 80045ca:	d039      	beq.n	8004640 <vTaskPriorityDisinheritAfterTimeout+0xa0>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80045cc:	2a01      	cmp	r2, #1
 80045ce:	d137      	bne.n	8004640 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					configASSERT( pxTCB != pxCurrentTCB );
 80045d0:	4d1c      	ldr	r5, [pc, #112]	; (8004644 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 80045d2:	68ea      	ldr	r2, [r5, #12]
 80045d4:	4282      	cmp	r2, r0
 80045d6:	d108      	bne.n	80045ea <vTaskPriorityDisinheritAfterTimeout+0x4a>
 80045d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	e7fe      	b.n	80045e8 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80045ea:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80045ec:	4e16      	ldr	r6, [pc, #88]	; (8004648 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80045ee:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80045f0:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 80045f4:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80045f6:	fb02 6303 	mla	r3, r2, r3, r6
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045fa:	bfa8      	it	ge
 80045fc:	f1c1 0107 	rsbge	r1, r1, #7
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004600:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004602:	bfa8      	it	ge
 8004604:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004606:	429a      	cmp	r2, r3
 8004608:	d11a      	bne.n	8004640 <vTaskPriorityDisinheritAfterTimeout+0xa0>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800460a:	1d01      	adds	r1, r0, #4
 800460c:	4608      	mov	r0, r1
 800460e:	9101      	str	r1, [sp, #4]
 8004610:	f7fe fdf6 	bl	8003200 <uxListRemove>
 8004614:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004616:	9901      	ldr	r1, [sp, #4]
 8004618:	b928      	cbnz	r0, 8004626 <vTaskPriorityDisinheritAfterTimeout+0x86>
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800461a:	2001      	movs	r0, #1
 800461c:	692b      	ldr	r3, [r5, #16]
 800461e:	4090      	lsls	r0, r2
 8004620:	ea23 0300 	bic.w	r3, r3, r0
 8004624:	612b      	str	r3, [r5, #16]
						prvAddTaskToReadyList( pxTCB );
 8004626:	2301      	movs	r3, #1
 8004628:	6928      	ldr	r0, [r5, #16]
 800462a:	4093      	lsls	r3, r2
 800462c:	4303      	orrs	r3, r0
 800462e:	2014      	movs	r0, #20
 8004630:	fb00 6002 	mla	r0, r0, r2, r6
 8004634:	612b      	str	r3, [r5, #16]
	}
 8004636:	b002      	add	sp, #8
 8004638:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 800463c:	f7fe bdbd 	b.w	80031ba <vListInsertEnd>
	}
 8004640:	b002      	add	sp, #8
 8004642:	bd70      	pop	{r4, r5, r6, pc}
 8004644:	24000110 	.word	0x24000110
 8004648:	24000144 	.word	0x24000144

0800464c <vTaskList>:
	{
 800464c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		uxArraySize = uxCurrentNumberOfTasks;
 8004650:	4b2c      	ldr	r3, [pc, #176]	; (8004704 <vTaskList+0xb8>)
		*pcWriteBuffer = ( char ) 0x00;
 8004652:	2500      	movs	r5, #0
	{
 8004654:	4604      	mov	r4, r0
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8004656:	2724      	movs	r7, #36	; 0x24
		uxArraySize = uxCurrentNumberOfTasks;
 8004658:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
	{
 800465a:	b085      	sub	sp, #20
		*pcWriteBuffer = ( char ) 0x00;
 800465c:	7005      	strb	r5, [r0, #0]
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800465e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
		uxArraySize = uxCurrentNumberOfTasks;
 8004660:	9103      	str	r1, [sp, #12]
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8004662:	4378      	muls	r0, r7
 8004664:	f000 f9c8 	bl	80049f8 <pvPortMalloc>
		if( pxTaskStatusArray != NULL )
 8004668:	4606      	mov	r6, r0
 800466a:	2800      	cmp	r0, #0
 800466c:	d046      	beq.n	80046fc <vTaskList+0xb0>
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800466e:	462a      	mov	r2, r5
 8004670:	9903      	ldr	r1, [sp, #12]
 8004672:	f7ff fea7 	bl	80043c4 <uxTaskGetSystemState>
			for( x = 0; x < uxArraySize; x++ )
 8004676:	4635      	mov	r5, r6
 8004678:	fb07 6700 	mla	r7, r7, r0, r6
 800467c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800470c <vTaskList+0xc0>
			pcBuffer[ x ] = ' ';
 8004680:	f04f 0a20 	mov.w	sl, #32
			for( x = 0; x < uxArraySize; x++ )
 8004684:	42af      	cmp	r7, r5
 8004686:	d105      	bne.n	8004694 <vTaskList+0x48>
			vPortFree( pxTaskStatusArray );
 8004688:	4630      	mov	r0, r6
	}
 800468a:	b005      	add	sp, #20
 800468c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			vPortFree( pxTaskStatusArray );
 8004690:	f000 ba30 	b.w	8004af4 <vPortFree>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8004694:	7b2b      	ldrb	r3, [r5, #12]
		strcpy( pcBuffer, pcTaskName );
 8004696:	4620      	mov	r0, r4
 8004698:	6869      	ldr	r1, [r5, #4]
 800469a:	2b04      	cmp	r3, #4
 800469c:	bf94      	ite	ls
 800469e:	f819 b003 	ldrbls.w	fp, [r9, r3]
				switch( pxTaskStatusArray[ x ].eCurrentState )
 80046a2:	f04f 0b00 	movhi.w	fp, #0
		strcpy( pcBuffer, pcTaskName );
 80046a6:	f009 face 	bl	800dc46 <strcpy>
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80046aa:	4620      	mov	r0, r4
 80046ac:	f7fb fe22 	bl	80002f4 <strlen>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b0e      	cmp	r3, #14
 80046b4:	d91e      	bls.n	80046f4 <vTaskList+0xa8>
 80046b6:	280f      	cmp	r0, #15
 80046b8:	f1c0 030f 	rsb	r3, r0, #15
		pcBuffer[ x ] = ( char ) 0x00;
 80046bc:	f04f 0200 	mov.w	r2, #0
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 80046c0:	4911      	ldr	r1, [pc, #68]	; (8004708 <vTaskList+0xbc>)
 80046c2:	bf88      	it	hi
 80046c4:	2300      	movhi	r3, #0
 80046c6:	3524      	adds	r5, #36	; 0x24
 80046c8:	4403      	add	r3, r0
		pcBuffer[ x ] = ( char ) 0x00;
 80046ca:	54e2      	strb	r2, [r4, r3]
 80046cc:	eb04 0803 	add.w	r8, r4, r3
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 80046d0:	f855 3c1c 	ldr.w	r3, [r5, #-28]
 80046d4:	465a      	mov	r2, fp
 80046d6:	4640      	mov	r0, r8
 80046d8:	9301      	str	r3, [sp, #4]
 80046da:	f835 3c04 	ldrh.w	r3, [r5, #-4]
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	f855 3c14 	ldr.w	r3, [r5, #-20]
 80046e4:	f009 fa80 	bl	800dbe8 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 80046e8:	4640      	mov	r0, r8
 80046ea:	f7fb fe03 	bl	80002f4 <strlen>
 80046ee:	eb08 0400 	add.w	r4, r8, r0
			for( x = 0; x < uxArraySize; x++ )
 80046f2:	e7c7      	b.n	8004684 <vTaskList+0x38>
			pcBuffer[ x ] = ' ';
 80046f4:	f804 a003 	strb.w	sl, [r4, r3]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80046f8:	3301      	adds	r3, #1
 80046fa:	e7da      	b.n	80046b2 <vTaskList+0x66>
	}
 80046fc:	b005      	add	sp, #20
 80046fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004702:	bf00      	nop
 8004704:	24000110 	.word	0x24000110
 8004708:	0801fa7f 	.word	0x0801fa7f
 800470c:	0800f6bc 	.word	0x0800f6bc

08004710 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8004710:	4b04      	ldr	r3, [pc, #16]	; (8004724 <pvTaskIncrementMutexHeldCount+0x14>)
 8004712:	68da      	ldr	r2, [r3, #12]
 8004714:	b11a      	cbz	r2, 800471e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8004716:	68d9      	ldr	r1, [r3, #12]
 8004718:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800471a:	3201      	adds	r2, #1
 800471c:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 800471e:	68d8      	ldr	r0, [r3, #12]
	}
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	24000110 	.word	0x24000110

08004728 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004728:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800472a:	f7ff fbc5 	bl	8003eb8 <vTaskStartScheduler>
  
  return osOK;
}
 800472e:	2000      	movs	r0, #0
 8004730:	bd08      	pop	{r3, pc}

08004732 <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004732:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 8004736:	b10b      	cbz	r3, 800473c <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 8004738:	f7ff bc04 	b.w	8003f44 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 800473c:	f7ff bbfc 	b.w	8003f38 <xTaskGetTickCount>

08004740 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004740:	b530      	push	{r4, r5, lr}
 8004742:	4604      	mov	r4, r0
 8004744:	b085      	sub	sp, #20
 8004746:	460b      	mov	r3, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004748:	8a22      	ldrh	r2, [r4, #16]
 800474a:	ad03      	add	r5, sp, #12
 800474c:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
  if (priority != osPriorityError) {
 8004750:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8004752:	bf14      	ite	ne
 8004754:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004756:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004758:	e9d0 1000 	ldrd	r1, r0, [r0]
 800475c:	e9cd 4500 	strd	r4, r5, [sp]
 8004760:	f7ff fa52 	bl	8003c08 <xTaskCreate>
 8004764:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004766:	bf0c      	ite	eq
 8004768:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 800476a:	2000      	movne	r0, #0
}
 800476c:	b005      	add	sp, #20
 800476e:	bd30      	pop	{r4, r5, pc}

08004770 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8004770:	b508      	push	{r3, lr}
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8004772:	f7ff fb19 	bl	8003da8 <vTaskDelete>
  return osOK;
#else
  return osErrorOS;
#endif
}
 8004776:	2000      	movs	r0, #0
 8004778:	bd08      	pop	{r3, pc}

0800477a <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800477a:	2801      	cmp	r0, #1
{
 800477c:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800477e:	bf38      	it	cc
 8004780:	2001      	movcc	r0, #1
 8004782:	f7ff fcc9 	bl	8004118 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004786:	2000      	movs	r0, #0
 8004788:	bd08      	pop	{r3, pc}

0800478a <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800478a:	2001      	movs	r0, #1
 800478c:	f7fe bf0a 	b.w	80035a4 <xQueueCreateMutex>

08004790 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004790:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004792:	2400      	movs	r4, #0
 8004794:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8004796:	b1e0      	cbz	r0, 80047d2 <osMutexWait+0x42>
 8004798:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800479c:	b19b      	cbz	r3, 80047c6 <osMutexWait+0x36>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800479e:	aa01      	add	r2, sp, #4
 80047a0:	4621      	mov	r1, r4
 80047a2:	f7ff f935 	bl	8003a10 <xQueueReceiveFromISR>
 80047a6:	2801      	cmp	r0, #1
 80047a8:	d111      	bne.n	80047ce <osMutexWait+0x3e>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 80047aa:	9b01      	ldr	r3, [sp, #4]
 80047ac:	b913      	cbnz	r3, 80047b4 <osMutexWait+0x24>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 80047ae:	2000      	movs	r0, #0
}
 80047b0:	b002      	add	sp, #8
 80047b2:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 80047b4:	4b08      	ldr	r3, [pc, #32]	; (80047d8 <osMutexWait+0x48>)
 80047b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ba:	601a      	str	r2, [r3, #0]
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	e7f3      	b.n	80047ae <osMutexWait+0x1e>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80047c6:	f7ff f85f 	bl	8003888 <xQueueSemaphoreTake>
 80047ca:	2801      	cmp	r0, #1
 80047cc:	d0ef      	beq.n	80047ae <osMutexWait+0x1e>
    return osErrorOS;
 80047ce:	20ff      	movs	r0, #255	; 0xff
 80047d0:	e7ee      	b.n	80047b0 <osMutexWait+0x20>
    return osErrorParameter;
 80047d2:	2080      	movs	r0, #128	; 0x80
 80047d4:	e7ec      	b.n	80047b0 <osMutexWait+0x20>
 80047d6:	bf00      	nop
 80047d8:	e000ed04 	.word	0xe000ed04

080047dc <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80047dc:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 80047de:	2400      	movs	r4, #0
 80047e0:	9401      	str	r4, [sp, #4]
 80047e2:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 80047e6:	b193      	cbz	r3, 800480e <osMutexRelease+0x32>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80047e8:	a901      	add	r1, sp, #4
 80047ea:	f7fe ff58 	bl	800369e <xQueueGiveFromISR>
 80047ee:	2801      	cmp	r0, #1
 80047f0:	d113      	bne.n	800481a <osMutexRelease+0x3e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 80047f2:	9b01      	ldr	r3, [sp, #4]
 80047f4:	b913      	cbnz	r3, 80047fc <osMutexRelease+0x20>
  osStatus result = osOK;
 80047f6:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 80047f8:	b002      	add	sp, #8
 80047fa:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 80047fc:	4b08      	ldr	r3, [pc, #32]	; (8004820 <osMutexRelease+0x44>)
 80047fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	f3bf 8f4f 	dsb	sy
 8004808:	f3bf 8f6f 	isb	sy
 800480c:	e7f3      	b.n	80047f6 <osMutexRelease+0x1a>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800480e:	461a      	mov	r2, r3
 8004810:	4619      	mov	r1, r3
 8004812:	f7fe fe15 	bl	8003440 <xQueueGenericSend>
 8004816:	2801      	cmp	r0, #1
 8004818:	d0ed      	beq.n	80047f6 <osMutexRelease+0x1a>
    result = osErrorOS;
 800481a:	20ff      	movs	r0, #255	; 0xff
 800481c:	e7ec      	b.n	80047f8 <osMutexRelease+0x1c>
 800481e:	bf00      	nop
 8004820:	e000ed04 	.word	0xe000ed04

08004824 <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 8004824:	b510      	push	{r4, lr}
 8004826:	f3ef 8405 	mrs	r4, IPSR
  if (inHandlerMode()) {
 800482a:	b91c      	cbnz	r4, 8004834 <osMutexDelete+0x10>
    return osErrorISR;
  }

  vQueueDelete(mutex_id);
 800482c:	f7ff f978 	bl	8003b20 <vQueueDelete>

  return osOK;
}
 8004830:	4620      	mov	r0, r4
 8004832:	bd10      	pop	{r4, pc}
    return osErrorISR;
 8004834:	2482      	movs	r4, #130	; 0x82
 8004836:	e7fb      	b.n	8004830 <osMutexDelete+0xc>

08004838 <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8004838:	2901      	cmp	r1, #1
{ 
 800483a:	4608      	mov	r0, r1
 800483c:	b510      	push	{r4, lr}
  if (count == 1) {
 800483e:	d10c      	bne.n	800485a <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 8004840:	2203      	movs	r2, #3
 8004842:	2100      	movs	r1, #0
 8004844:	f7fe fdba 	bl	80033bc <xQueueGenericCreate>
 8004848:	4604      	mov	r4, r0
 800484a:	b120      	cbz	r0, 8004856 <osSemaphoreCreate+0x1e>
 800484c:	2300      	movs	r3, #0
 800484e:	461a      	mov	r2, r3
 8004850:	4619      	mov	r1, r3
 8004852:	f7fe fdf5 	bl	8003440 <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 8004856:	4620      	mov	r0, r4
 8004858:	bd10      	pop	{r4, pc}
 800485a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return xSemaphoreCreateCounting(count, count);
 800485e:	f7fe bdd1 	b.w	8003404 <xQueueCreateCountingSemaphore>
	...

08004864 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004864:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004866:	2400      	movs	r4, #0
 8004868:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800486a:	b1e0      	cbz	r0, 80048a6 <osSemaphoreWait+0x42>
 800486c:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8004870:	b19b      	cbz	r3, 800489a <osSemaphoreWait+0x36>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004872:	aa01      	add	r2, sp, #4
 8004874:	4621      	mov	r1, r4
 8004876:	f7ff f8cb 	bl	8003a10 <xQueueReceiveFromISR>
 800487a:	2801      	cmp	r0, #1
 800487c:	d111      	bne.n	80048a2 <osSemaphoreWait+0x3e>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800487e:	9b01      	ldr	r3, [sp, #4]
 8004880:	b913      	cbnz	r3, 8004888 <osSemaphoreWait+0x24>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8004882:	2000      	movs	r0, #0
}
 8004884:	b002      	add	sp, #8
 8004886:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8004888:	4b08      	ldr	r3, [pc, #32]	; (80048ac <osSemaphoreWait+0x48>)
 800488a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	e7f3      	b.n	8004882 <osSemaphoreWait+0x1e>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800489a:	f7fe fff5 	bl	8003888 <xQueueSemaphoreTake>
 800489e:	2801      	cmp	r0, #1
 80048a0:	d0ef      	beq.n	8004882 <osSemaphoreWait+0x1e>
    return osErrorOS;
 80048a2:	20ff      	movs	r0, #255	; 0xff
 80048a4:	e7ee      	b.n	8004884 <osSemaphoreWait+0x20>
    return osErrorParameter;
 80048a6:	2080      	movs	r0, #128	; 0x80
 80048a8:	e7ec      	b.n	8004884 <osSemaphoreWait+0x20>
 80048aa:	bf00      	nop
 80048ac:	e000ed04 	.word	0xe000ed04

080048b0 <osSemaphoreRelease>:
 80048b0:	f7ff bf94 	b.w	80047dc <osMutexRelease>

080048b4 <osSemaphoreDelete>:
 80048b4:	f7ff bfb6 	b.w	8004824 <osMutexDelete>

080048b8 <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80048b8:	2200      	movs	r2, #0
 80048ba:	e9d0 0100 	ldrd	r0, r1, [r0]
 80048be:	f7fe bd7d 	b.w	80033bc <xQueueGenericCreate>
	...

080048c4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80048c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 80048c6:	2400      	movs	r4, #0
{
 80048c8:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80048ca:	9403      	str	r4, [sp, #12]
 80048cc:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 80048d0:	b1a3      	cbz	r3, 80048fc <osMessagePut+0x38>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80048d2:	4623      	mov	r3, r4
 80048d4:	aa03      	add	r2, sp, #12
 80048d6:	a901      	add	r1, sp, #4
 80048d8:	f7fe fe7f 	bl	80035da <xQueueGenericSendFromISR>
 80048dc:	2801      	cmp	r0, #1
 80048de:	d115      	bne.n	800490c <osMessagePut+0x48>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 80048e0:	9b03      	ldr	r3, [sp, #12]
 80048e2:	b913      	cbnz	r3, 80048ea <osMessagePut+0x26>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 80048e4:	2000      	movs	r0, #0
}
 80048e6:	b004      	add	sp, #16
 80048e8:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 80048ea:	4b09      	ldr	r3, [pc, #36]	; (8004910 <osMessagePut+0x4c>)
 80048ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	f3bf 8f4f 	dsb	sy
 80048f6:	f3bf 8f6f 	isb	sy
 80048fa:	e7f3      	b.n	80048e4 <osMessagePut+0x20>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80048fc:	2a01      	cmp	r2, #1
 80048fe:	a901      	add	r1, sp, #4
 8004900:	bf38      	it	cc
 8004902:	2201      	movcc	r2, #1
 8004904:	f7fe fd9c 	bl	8003440 <xQueueGenericSend>
 8004908:	2801      	cmp	r0, #1
 800490a:	d0eb      	beq.n	80048e4 <osMessagePut+0x20>
      return osErrorOS;
 800490c:	20ff      	movs	r0, #255	; 0xff
 800490e:	e7ea      	b.n	80048e6 <osMessagePut+0x22>
 8004910:	e000ed04 	.word	0xe000ed04

08004914 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004914:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8004916:	2300      	movs	r3, #0
{
 8004918:	4604      	mov	r4, r0
 800491a:	4616      	mov	r6, r2
 800491c:	4608      	mov	r0, r1
 800491e:	ad01      	add	r5, sp, #4
  event.def.message_id = queue_id;
 8004920:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 8004922:	9302      	str	r3, [sp, #8]
  
  if (queue_id == NULL) {
 8004924:	b911      	cbnz	r1, 800492c <osMessageGet+0x18>
    event.status = osErrorParameter;
 8004926:	2380      	movs	r3, #128	; 0x80
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
 8004928:	9301      	str	r3, [sp, #4]
 800492a:	e016      	b.n	800495a <osMessageGet+0x46>
  taskWoken = pdFALSE;
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 8004932:	b1cb      	cbz	r3, 8004968 <osMessageGet+0x54>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004934:	466a      	mov	r2, sp
 8004936:	a902      	add	r1, sp, #8
 8004938:	f7ff f86a 	bl	8003a10 <xQueueReceiveFromISR>
      event.status = osOK;
 800493c:	2801      	cmp	r0, #1
 800493e:	bf0c      	ite	eq
 8004940:	2310      	moveq	r3, #16
 8004942:	2300      	movne	r3, #0
 8004944:	9301      	str	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8004946:	9b00      	ldr	r3, [sp, #0]
 8004948:	b13b      	cbz	r3, 800495a <osMessageGet+0x46>
 800494a:	4b0d      	ldr	r3, [pc, #52]	; (8004980 <osMessageGet+0x6c>)
 800494c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004950:	601a      	str	r2, [r3, #0]
 8004952:	f3bf 8f4f 	dsb	sy
 8004956:	f3bf 8f6f 	isb	sy
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
    }
  }
  
  return event;
 800495a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800495e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004962:	4620      	mov	r0, r4
 8004964:	b004      	add	sp, #16
 8004966:	bd70      	pop	{r4, r5, r6, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004968:	a902      	add	r1, sp, #8
 800496a:	f7fe feed 	bl	8003748 <xQueueReceive>
 800496e:	2801      	cmp	r0, #1
 8004970:	d101      	bne.n	8004976 <osMessageGet+0x62>
      event.status = osEventMessage;
 8004972:	2310      	movs	r3, #16
 8004974:	e7d8      	b.n	8004928 <osMessageGet+0x14>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004976:	2e00      	cmp	r6, #0
 8004978:	bf18      	it	ne
 800497a:	2640      	movne	r6, #64	; 0x40
 800497c:	9601      	str	r6, [sp, #4]
 800497e:	e7ec      	b.n	800495a <osMessageGet+0x46>
 8004980:	e000ed04 	.word	0xe000ed04

08004984 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8004984:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004986:	f7ff fd61 	bl	800444c <xTaskGetSchedulerState>
 800498a:	2801      	cmp	r0, #1
 800498c:	d003      	beq.n	8004996 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800498e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8004992:	f000 b9b7 	b.w	8004d04 <xPortSysTickHandler>
}
 8004996:	bd08      	pop	{r3, pc}

08004998 <osThreadList>:
* @param   buffer   A buffer into which the above mentioned details
*          will be written
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadList (uint8_t *buffer)
{
 8004998:	b508      	push	{r3, lr}
#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) )
  vTaskList((char *)buffer);
 800499a:	f7ff fe57 	bl	800464c <vTaskList>
#endif
  return osOK;
}
 800499e:	2000      	movs	r0, #0
 80049a0:	bd08      	pop	{r3, pc}

080049a2 <osMessageWaiting>:
 80049a2:	f3ef 8305 	mrs	r3, IPSR
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
  if (inHandlerMode()) {
 80049a6:	b10b      	cbz	r3, 80049ac <osMessageWaiting+0xa>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80049a8:	f7ff b896 	b.w	8003ad8 <uxQueueMessagesWaitingFromISR>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80049ac:	f7ff b87f 	b.w	8003aae <uxQueueMessagesWaiting>

080049b0 <osMessageDelete>:
 80049b0:	f7ff bf38 	b.w	8004824 <osMutexDelete>

080049b4 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80049b4:	4b0f      	ldr	r3, [pc, #60]	; (80049f4 <prvInsertBlockIntoFreeList+0x40>)
{
 80049b6:	b530      	push	{r4, r5, lr}
 80049b8:	461d      	mov	r5, r3
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80049ba:	461a      	mov	r2, r3
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4283      	cmp	r3, r0
 80049c0:	d3fb      	bcc.n	80049ba <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80049c2:	6854      	ldr	r4, [r2, #4]
 80049c4:	1911      	adds	r1, r2, r4
 80049c6:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80049c8:	bf01      	itttt	eq
 80049ca:	6841      	ldreq	r1, [r0, #4]
 80049cc:	4610      	moveq	r0, r2
 80049ce:	1909      	addeq	r1, r1, r4
 80049d0:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80049d2:	6844      	ldr	r4, [r0, #4]
 80049d4:	1901      	adds	r1, r0, r4
 80049d6:	428b      	cmp	r3, r1
 80049d8:	d106      	bne.n	80049e8 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80049da:	68a9      	ldr	r1, [r5, #8]
 80049dc:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80049de:	bf1f      	itttt	ne
 80049e0:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80049e2:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80049e4:	1909      	addne	r1, r1, r4
 80049e6:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80049e8:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80049ea:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80049ec:	bf18      	it	ne
 80049ee:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049f0:	bd30      	pop	{r4, r5, pc}
 80049f2:	bf00      	nop
 80049f4:	24000228 	.word	0x24000228

080049f8 <pvPortMalloc>:
{
 80049f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 80049fc:	4d3a      	ldr	r5, [pc, #232]	; (8004ae8 <pvPortMalloc+0xf0>)
{
 80049fe:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8004a00:	f7ff fa90 	bl	8003f24 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8004a04:	68ab      	ldr	r3, [r5, #8]
 8004a06:	b9bb      	cbnz	r3, 8004a38 <pvPortMalloc+0x40>
	uxAddress = ( size_t ) ucHeap;
 8004a08:	4a38      	ldr	r2, [pc, #224]	; (8004aec <pvPortMalloc+0xf4>)
	xStart.xBlockSize = ( size_t ) 0;
 8004a0a:	2100      	movs	r1, #0
	uxAddress -= xHeapStructSize;
 8004a0c:	4b38      	ldr	r3, [pc, #224]	; (8004af0 <pvPortMalloc+0xf8>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a0e:	0756      	lsls	r6, r2, #29
	xStart.xBlockSize = ( size_t ) 0;
 8004a10:	6069      	str	r1, [r5, #4]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a12:	f023 0307 	bic.w	r3, r3, #7
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a16:	bf18      	it	ne
 8004a18:	3207      	addne	r2, #7
	pxEnd = ( void * ) uxAddress;
 8004a1a:	60ab      	str	r3, [r5, #8]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a1c:	bf18      	it	ne
 8004a1e:	f022 0207 	bicne.w	r2, r2, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a22:	602a      	str	r2, [r5, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8004a24:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a28:	1a99      	subs	r1, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a2a:	e9c2 3100 	strd	r3, r1, [r2]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a2e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a32:	e9c5 1103 	strd	r1, r1, [r5, #12]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a36:	616b      	str	r3, [r5, #20]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a38:	f8d5 8014 	ldr.w	r8, [r5, #20]
 8004a3c:	ea18 0f04 	tst.w	r8, r4
 8004a40:	d14d      	bne.n	8004ade <pvPortMalloc+0xe6>
			if( xWantedSize > 0 )
 8004a42:	2c00      	cmp	r4, #0
 8004a44:	d03e      	beq.n	8004ac4 <pvPortMalloc+0xcc>
				xWantedSize += xHeapStructSize;
 8004a46:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a4a:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a4c:	bf1c      	itt	ne
 8004a4e:	f023 0307 	bicne.w	r3, r3, #7
 8004a52:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d042      	beq.n	8004ade <pvPortMalloc+0xe6>
 8004a58:	692f      	ldr	r7, [r5, #16]
 8004a5a:	429f      	cmp	r7, r3
 8004a5c:	d33f      	bcc.n	8004ade <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 8004a5e:	682e      	ldr	r6, [r5, #0]
				pxPreviousBlock = &xStart;
 8004a60:	4821      	ldr	r0, [pc, #132]	; (8004ae8 <pvPortMalloc+0xf0>)
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a62:	6872      	ldr	r2, [r6, #4]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d201      	bcs.n	8004a6c <pvPortMalloc+0x74>
 8004a68:	6831      	ldr	r1, [r6, #0]
 8004a6a:	b9a1      	cbnz	r1, 8004a96 <pvPortMalloc+0x9e>
				if( pxBlock != pxEnd )
 8004a6c:	68a9      	ldr	r1, [r5, #8]
 8004a6e:	42b1      	cmp	r1, r6
 8004a70:	d035      	beq.n	8004ade <pvPortMalloc+0xe6>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a72:	1ad2      	subs	r2, r2, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a74:	6831      	ldr	r1, [r6, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a76:	6804      	ldr	r4, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a78:	2a10      	cmp	r2, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a7a:	6001      	str	r1, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a7c:	d912      	bls.n	8004aa4 <pvPortMalloc+0xac>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a7e:	18f0      	adds	r0, r6, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a80:	0741      	lsls	r1, r0, #29
 8004a82:	d00b      	beq.n	8004a9c <pvPortMalloc+0xa4>
 8004a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a88:	f383 8811 	msr	BASEPRI, r3
 8004a8c:	f3bf 8f6f 	isb	sy
 8004a90:	f3bf 8f4f 	dsb	sy
 8004a94:	e7fe      	b.n	8004a94 <pvPortMalloc+0x9c>
 8004a96:	4630      	mov	r0, r6
 8004a98:	460e      	mov	r6, r1
 8004a9a:	e7e2      	b.n	8004a62 <pvPortMalloc+0x6a>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a9c:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004a9e:	6073      	str	r3, [r6, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004aa0:	f7ff ff88 	bl	80049b4 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004aa4:	6873      	ldr	r3, [r6, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004aa6:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004aa8:	68e9      	ldr	r1, [r5, #12]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004aaa:	1aff      	subs	r7, r7, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004aac:	ea48 0303 	orr.w	r3, r8, r3
 8004ab0:	6073      	str	r3, [r6, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004ab2:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004ab4:	428f      	cmp	r7, r1
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ab6:	612f      	str	r7, [r5, #16]
					pxBlock->pxNextFreeBlock = NULL;
 8004ab8:	6033      	str	r3, [r6, #0]
					xNumberOfSuccessfulAllocations++;
 8004aba:	69ab      	ldr	r3, [r5, #24]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004abc:	bf38      	it	cc
 8004abe:	60ef      	strcc	r7, [r5, #12]
					xNumberOfSuccessfulAllocations++;
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	61ab      	str	r3, [r5, #24]
	( void ) xTaskResumeAll();
 8004ac4:	f7ff faba 	bl	800403c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ac8:	0763      	lsls	r3, r4, #29
 8004aca:	d00a      	beq.n	8004ae2 <pvPortMalloc+0xea>
 8004acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad0:	f383 8811 	msr	BASEPRI, r3
 8004ad4:	f3bf 8f6f 	isb	sy
 8004ad8:	f3bf 8f4f 	dsb	sy
 8004adc:	e7fe      	b.n	8004adc <pvPortMalloc+0xe4>
void *pvReturn = NULL;
 8004ade:	2400      	movs	r4, #0
 8004ae0:	e7f0      	b.n	8004ac4 <pvPortMalloc+0xcc>
}
 8004ae2:	4620      	mov	r0, r4
 8004ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ae8:	24000228 	.word	0x24000228
 8004aec:	24000248 	.word	0x24000248
 8004af0:	24006640 	.word	0x24006640

08004af4 <vPortFree>:
{
 8004af4:	b538      	push	{r3, r4, r5, lr}
	if( pv != NULL )
 8004af6:	4604      	mov	r4, r0
 8004af8:	b380      	cbz	r0, 8004b5c <vPortFree+0x68>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004afa:	4d19      	ldr	r5, [pc, #100]	; (8004b60 <vPortFree+0x6c>)
 8004afc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004b00:	696a      	ldr	r2, [r5, #20]
 8004b02:	4213      	tst	r3, r2
 8004b04:	d108      	bne.n	8004b18 <vPortFree+0x24>
 8004b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0a:	f383 8811 	msr	BASEPRI, r3
 8004b0e:	f3bf 8f6f 	isb	sy
 8004b12:	f3bf 8f4f 	dsb	sy
 8004b16:	e7fe      	b.n	8004b16 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b18:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8004b1c:	b141      	cbz	r1, 8004b30 <vPortFree+0x3c>
 8004b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b22:	f383 8811 	msr	BASEPRI, r3
 8004b26:	f3bf 8f6f 	isb	sy
 8004b2a:	f3bf 8f4f 	dsb	sy
 8004b2e:	e7fe      	b.n	8004b2e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b30:	ea23 0302 	bic.w	r3, r3, r2
 8004b34:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8004b38:	f7ff f9f4 	bl	8003f24 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004b3c:	692a      	ldr	r2, [r5, #16]
 8004b3e:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b42:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004b46:	4413      	add	r3, r2
 8004b48:	612b      	str	r3, [r5, #16]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b4a:	f7ff ff33 	bl	80049b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004b4e:	69eb      	ldr	r3, [r5, #28]
 8004b50:	3301      	adds	r3, #1
 8004b52:	61eb      	str	r3, [r5, #28]
}
 8004b54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				( void ) xTaskResumeAll();
 8004b58:	f7ff ba70 	b.w	800403c <xTaskResumeAll>
}
 8004b5c:	bd38      	pop	{r3, r4, r5, pc}
 8004b5e:	bf00      	nop
 8004b60:	24000228 	.word	0x24000228

08004b64 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004b64:	4808      	ldr	r0, [pc, #32]	; (8004b88 <prvPortStartFirstTask+0x24>)
 8004b66:	6800      	ldr	r0, [r0, #0]
 8004b68:	6800      	ldr	r0, [r0, #0]
 8004b6a:	f380 8808 	msr	MSP, r0
 8004b6e:	f04f 0000 	mov.w	r0, #0
 8004b72:	f380 8814 	msr	CONTROL, r0
 8004b76:	b662      	cpsie	i
 8004b78:	b661      	cpsie	f
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	df00      	svc	0
 8004b84:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004b86:	0000      	.short	0x0000
 8004b88:	e000ed08 	.word	0xe000ed08

08004b8c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004b8c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004b9c <vPortEnableVFP+0x10>
 8004b90:	6801      	ldr	r1, [r0, #0]
 8004b92:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004b96:	6001      	str	r1, [r0, #0]
 8004b98:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004b9a:	0000      	.short	0x0000
 8004b9c:	e000ed88 	.word	0xe000ed88

08004ba0 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 8004ba0:	2300      	movs	r3, #0
{
 8004ba2:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8004ba4:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8004ba6:	4b0d      	ldr	r3, [pc, #52]	; (8004bdc <prvTaskExitError+0x3c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	3301      	adds	r3, #1
 8004bac:	d008      	beq.n	8004bc0 <prvTaskExitError+0x20>
 8004bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb2:	f383 8811 	msr	BASEPRI, r3
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	e7fe      	b.n	8004bbe <prvTaskExitError+0x1e>
 8004bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc4:	f383 8811 	msr	BASEPRI, r3
 8004bc8:	f3bf 8f6f 	isb	sy
 8004bcc:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8004bd0:	9b01      	ldr	r3, [sp, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0fc      	beq.n	8004bd0 <prvTaskExitError+0x30>
}
 8004bd6:	b002      	add	sp, #8
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	24000024 	.word	0x24000024

08004be0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004be0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004be4:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004be8:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8004bec:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004bee:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004bf0:	4b03      	ldr	r3, [pc, #12]	; (8004c00 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004bf2:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004bf4:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004bf6:	f06f 0302 	mvn.w	r3, #2
 8004bfa:	6203      	str	r3, [r0, #32]
}
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	08004ba1 	.word	0x08004ba1
	...

08004c10 <SVC_Handler>:
	__asm volatile (
 8004c10:	4b07      	ldr	r3, [pc, #28]	; (8004c30 <pxCurrentTCBConst2>)
 8004c12:	6819      	ldr	r1, [r3, #0]
 8004c14:	6808      	ldr	r0, [r1, #0]
 8004c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c1a:	f380 8809 	msr	PSP, r0
 8004c1e:	f3bf 8f6f 	isb	sy
 8004c22:	f04f 0000 	mov.w	r0, #0
 8004c26:	f380 8811 	msr	BASEPRI, r0
 8004c2a:	4770      	bx	lr
 8004c2c:	f3af 8000 	nop.w

08004c30 <pxCurrentTCBConst2>:
 8004c30:	2400011c 	.word	0x2400011c

08004c34 <vPortEnterCritical>:
 8004c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c38:	f383 8811 	msr	BASEPRI, r3
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8004c44:	4a0a      	ldr	r2, [pc, #40]	; (8004c70 <vPortEnterCritical+0x3c>)
 8004c46:	6813      	ldr	r3, [r2, #0]
 8004c48:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8004c4a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8004c4c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8004c4e:	d10d      	bne.n	8004c6c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c50:	4b08      	ldr	r3, [pc, #32]	; (8004c74 <vPortEnterCritical+0x40>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004c58:	d008      	beq.n	8004c6c <vPortEnterCritical+0x38>
 8004c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5e:	f383 8811 	msr	BASEPRI, r3
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	f3bf 8f4f 	dsb	sy
 8004c6a:	e7fe      	b.n	8004c6a <vPortEnterCritical+0x36>
}
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	24000024 	.word	0x24000024
 8004c74:	e000ed04 	.word	0xe000ed04

08004c78 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8004c78:	4a08      	ldr	r2, [pc, #32]	; (8004c9c <vPortExitCritical+0x24>)
 8004c7a:	6813      	ldr	r3, [r2, #0]
 8004c7c:	b943      	cbnz	r3, 8004c90 <vPortExitCritical+0x18>
 8004c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c82:	f383 8811 	msr	BASEPRI, r3
 8004c86:	f3bf 8f6f 	isb	sy
 8004c8a:	f3bf 8f4f 	dsb	sy
 8004c8e:	e7fe      	b.n	8004c8e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8004c90:	3b01      	subs	r3, #1
 8004c92:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004c94:	b90b      	cbnz	r3, 8004c9a <vPortExitCritical+0x22>
	__asm volatile
 8004c96:	f383 8811 	msr	BASEPRI, r3
}
 8004c9a:	4770      	bx	lr
 8004c9c:	24000024 	.word	0x24000024

08004ca0 <PendSV_Handler>:
	__asm volatile
 8004ca0:	f3ef 8009 	mrs	r0, PSP
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	4b15      	ldr	r3, [pc, #84]	; (8004d00 <pxCurrentTCBConst>)
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	f01e 0f10 	tst.w	lr, #16
 8004cb0:	bf08      	it	eq
 8004cb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004cb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cba:	6010      	str	r0, [r2, #0]
 8004cbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004cc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004cc4:	f380 8811 	msr	BASEPRI, r0
 8004cc8:	f3bf 8f4f 	dsb	sy
 8004ccc:	f3bf 8f6f 	isb	sy
 8004cd0:	f7ff fa48 	bl	8004164 <vTaskSwitchContext>
 8004cd4:	f04f 0000 	mov.w	r0, #0
 8004cd8:	f380 8811 	msr	BASEPRI, r0
 8004cdc:	bc09      	pop	{r0, r3}
 8004cde:	6819      	ldr	r1, [r3, #0]
 8004ce0:	6808      	ldr	r0, [r1, #0]
 8004ce2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ce6:	f01e 0f10 	tst.w	lr, #16
 8004cea:	bf08      	it	eq
 8004cec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004cf0:	f380 8809 	msr	PSP, r0
 8004cf4:	f3bf 8f6f 	isb	sy
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	f3af 8000 	nop.w

08004d00 <pxCurrentTCBConst>:
 8004d00:	2400011c 	.word	0x2400011c

08004d04 <xPortSysTickHandler>:
{
 8004d04:	b508      	push	{r3, lr}
	__asm volatile
 8004d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0a:	f383 8811 	msr	BASEPRI, r3
 8004d0e:	f3bf 8f6f 	isb	sy
 8004d12:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8004d16:	f7ff f91d 	bl	8003f54 <xTaskIncrementTick>
 8004d1a:	b118      	cbz	r0, 8004d24 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d1c:	4b03      	ldr	r3, [pc, #12]	; (8004d2c <xPortSysTickHandler+0x28>)
 8004d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d22:	601a      	str	r2, [r3, #0]
	__asm volatile
 8004d24:	2300      	movs	r3, #0
 8004d26:	f383 8811 	msr	BASEPRI, r3
}
 8004d2a:	bd08      	pop	{r3, pc}
 8004d2c:	e000ed04 	.word	0xe000ed04

08004d30 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d30:	2300      	movs	r3, #0
 8004d32:	4a08      	ldr	r2, [pc, #32]	; (8004d54 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d34:	4908      	ldr	r1, [pc, #32]	; (8004d58 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d38:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d3a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004d3e:	4b07      	ldr	r3, [pc, #28]	; (8004d5c <vPortSetupTimerInterrupt+0x2c>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d46:	4906      	ldr	r1, [pc, #24]	; (8004d60 <vPortSetupTimerInterrupt+0x30>)
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d4c:	2307      	movs	r3, #7
 8004d4e:	6013      	str	r3, [r2, #0]
}
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	e000e010 	.word	0xe000e010
 8004d58:	e000e018 	.word	0xe000e018
 8004d5c:	24000014 	.word	0x24000014
 8004d60:	e000e014 	.word	0xe000e014

08004d64 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004d64:	4b37      	ldr	r3, [pc, #220]	; (8004e44 <xPortStartScheduler+0xe0>)
 8004d66:	4a38      	ldr	r2, [pc, #224]	; (8004e48 <xPortStartScheduler+0xe4>)
{
 8004d68:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004d6a:	6819      	ldr	r1, [r3, #0]
 8004d6c:	4291      	cmp	r1, r2
 8004d6e:	d108      	bne.n	8004d82 <xPortStartScheduler+0x1e>
	__asm volatile
 8004d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d74:	f383 8811 	msr	BASEPRI, r3
 8004d78:	f3bf 8f6f 	isb	sy
 8004d7c:	f3bf 8f4f 	dsb	sy
 8004d80:	e7fe      	b.n	8004d80 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	4b31      	ldr	r3, [pc, #196]	; (8004e4c <xPortStartScheduler+0xe8>)
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d108      	bne.n	8004d9c <xPortStartScheduler+0x38>
 8004d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8e:	f383 8811 	msr	BASEPRI, r3
 8004d92:	f3bf 8f6f 	isb	sy
 8004d96:	f3bf 8f4f 	dsb	sy
 8004d9a:	e7fe      	b.n	8004d9a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004d9c:	4b2c      	ldr	r3, [pc, #176]	; (8004e50 <xPortStartScheduler+0xec>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d9e:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004da0:	781a      	ldrb	r2, [r3, #0]
 8004da2:	b2d2      	uxtb	r2, r2
 8004da4:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004da6:	22ff      	movs	r2, #255	; 0xff
 8004da8:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004daa:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004dac:	4a29      	ldr	r2, [pc, #164]	; (8004e54 <xPortStartScheduler+0xf0>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004db4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004db8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004dbc:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004dbe:	2307      	movs	r3, #7
 8004dc0:	6053      	str	r3, [r2, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004dc2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8004dc6:	1e5c      	subs	r4, r3, #1
 8004dc8:	0600      	lsls	r0, r0, #24
 8004dca:	d40c      	bmi.n	8004de6 <xPortStartScheduler+0x82>
 8004dcc:	b111      	cbz	r1, 8004dd4 <xPortStartScheduler+0x70>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004dce:	2b03      	cmp	r3, #3
 8004dd0:	6053      	str	r3, [r2, #4]
 8004dd2:	d011      	beq.n	8004df8 <xPortStartScheduler+0x94>
 8004dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd8:	f383 8811 	msr	BASEPRI, r3
 8004ddc:	f3bf 8f6f 	isb	sy
 8004de0:	f3bf 8f4f 	dsb	sy
 8004de4:	e7fe      	b.n	8004de4 <xPortStartScheduler+0x80>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004de6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004dea:	2101      	movs	r1, #1
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	f88d 3003 	strb.w	r3, [sp, #3]
 8004df4:	4623      	mov	r3, r4
 8004df6:	e7e4      	b.n	8004dc2 <xPortStartScheduler+0x5e>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004df8:	f44f 7340 	mov.w	r3, #768	; 0x300
	uxCriticalNesting = 0;
 8004dfc:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004dfe:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e00:	9b01      	ldr	r3, [sp, #4]
 8004e02:	4a13      	ldr	r2, [pc, #76]	; (8004e50 <xPortStartScheduler+0xec>)
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e08:	4b13      	ldr	r3, [pc, #76]	; (8004e58 <xPortStartScheduler+0xf4>)
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004e10:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8004e18:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8004e1a:	f7ff ff89 	bl	8004d30 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8004e1e:	4b0f      	ldr	r3, [pc, #60]	; (8004e5c <xPortStartScheduler+0xf8>)
 8004e20:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8004e22:	f7ff feb3 	bl	8004b8c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004e26:	4a0e      	ldr	r2, [pc, #56]	; (8004e60 <xPortStartScheduler+0xfc>)
 8004e28:	6813      	ldr	r3, [r2, #0]
 8004e2a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004e2e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8004e30:	f7ff fe98 	bl	8004b64 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8004e34:	f7ff f996 	bl	8004164 <vTaskSwitchContext>
	prvTaskExitError();
 8004e38:	f7ff feb2 	bl	8004ba0 <prvTaskExitError>
}
 8004e3c:	4620      	mov	r0, r4
 8004e3e:	b002      	add	sp, #8
 8004e40:	bd10      	pop	{r4, pc}
 8004e42:	bf00      	nop
 8004e44:	e000ed00 	.word	0xe000ed00
 8004e48:	410fc271 	.word	0x410fc271
 8004e4c:	410fc270 	.word	0x410fc270
 8004e50:	e000e400 	.word	0xe000e400
 8004e54:	24006648 	.word	0x24006648
 8004e58:	e000ed20 	.word	0xe000ed20
 8004e5c:	24000024 	.word	0x24000024
 8004e60:	e000ef34 	.word	0xe000ef34

08004e64 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004e64:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004e68:	2b0f      	cmp	r3, #15
 8004e6a:	4a10      	ldr	r2, [pc, #64]	; (8004eac <vPortValidateInterruptPriority+0x48>)
 8004e6c:	d90d      	bls.n	8004e8a <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004e6e:	4910      	ldr	r1, [pc, #64]	; (8004eb0 <vPortValidateInterruptPriority+0x4c>)
 8004e70:	5c5b      	ldrb	r3, [r3, r1]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004e72:	7811      	ldrb	r1, [r2, #0]
 8004e74:	4299      	cmp	r1, r3
 8004e76:	d908      	bls.n	8004e8a <vPortValidateInterruptPriority+0x26>
 8004e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7c:	f383 8811 	msr	BASEPRI, r3
 8004e80:	f3bf 8f6f 	isb	sy
 8004e84:	f3bf 8f4f 	dsb	sy
 8004e88:	e7fe      	b.n	8004e88 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004e8a:	4b0a      	ldr	r3, [pc, #40]	; (8004eb4 <vPortValidateInterruptPriority+0x50>)
 8004e8c:	6852      	ldr	r2, [r2, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d908      	bls.n	8004eaa <vPortValidateInterruptPriority+0x46>
 8004e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9c:	f383 8811 	msr	BASEPRI, r3
 8004ea0:	f3bf 8f6f 	isb	sy
 8004ea4:	f3bf 8f4f 	dsb	sy
 8004ea8:	e7fe      	b.n	8004ea8 <vPortValidateInterruptPriority+0x44>
	}
 8004eaa:	4770      	bx	lr
 8004eac:	24006648 	.word	0x24006648
 8004eb0:	e000e3f0 	.word	0xe000e3f0
 8004eb4:	e000ed0c 	.word	0xe000ed0c

08004eb8 <netconn_apimsg>:

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8004eb8:	680a      	ldr	r2, [r1, #0]
{
 8004eba:	b510      	push	{r4, lr}
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8004ebc:	320c      	adds	r2, #12
{
 8004ebe:	460c      	mov	r4, r1
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8004ec0:	f001 fb62 	bl	8006588 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8004ec4:	b908      	cbnz	r0, 8004eca <netconn_apimsg+0x12>
    return apimsg->err;
 8004ec6:	f994 0004 	ldrsb.w	r0, [r4, #4]
  }
  return err;
}
 8004eca:	bd10      	pop	{r4, pc}

08004ecc <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8004ecc:	b500      	push	{lr}
 8004ece:	b089      	sub	sp, #36	; 0x24
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8004ed0:	b958      	cbnz	r0, 8004eea <netconn_close_shutdown+0x1e>
 8004ed2:	4b0b      	ldr	r3, [pc, #44]	; (8004f00 <netconn_close_shutdown+0x34>)
 8004ed4:	f240 4247 	movw	r2, #1095	; 0x447
 8004ed8:	490a      	ldr	r1, [pc, #40]	; (8004f04 <netconn_close_shutdown+0x38>)
 8004eda:	480b      	ldr	r0, [pc, #44]	; (8004f08 <netconn_close_shutdown+0x3c>)
 8004edc:	f008 fe2c 	bl	800db38 <iprintf>
 8004ee0:	f06f 000f 	mvn.w	r0, #15
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);

  return err;
}
 8004ee4:	b009      	add	sp, #36	; 0x24
 8004ee6:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8004eea:	2329      	movs	r3, #41	; 0x29
  API_MSG_VAR_REF(msg).conn = conn;
 8004eec:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8004eee:	f88d 1008 	strb.w	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8004ef2:	4669      	mov	r1, sp
 8004ef4:	4805      	ldr	r0, [pc, #20]	; (8004f0c <netconn_close_shutdown+0x40>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8004ef6:	f88d 3009 	strb.w	r3, [sp, #9]
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8004efa:	f7ff ffdd 	bl	8004eb8 <netconn_apimsg>
  return err;
 8004efe:	e7f1      	b.n	8004ee4 <netconn_close_shutdown+0x18>
 8004f00:	0801fa8e 	.word	0x0801fa8e
 8004f04:	0801faf1 	.word	0x0801faf1
 8004f08:	0801f8bf 	.word	0x0801f8bf
 8004f0c:	08006315 	.word	0x08006315

08004f10 <netconn_new_with_proto_and_callback>:
{
 8004f10:	b570      	push	{r4, r5, r6, lr}
 8004f12:	460d      	mov	r5, r1
 8004f14:	b088      	sub	sp, #32
  conn = netconn_alloc(t, callback);
 8004f16:	4611      	mov	r1, r2
 8004f18:	f000 ff36 	bl	8005d88 <netconn_alloc>
  if (conn != NULL) {
 8004f1c:	4604      	mov	r4, r0
 8004f1e:	2800      	cmp	r0, #0
 8004f20:	d03e      	beq.n	8004fa0 <netconn_new_with_proto_and_callback+0x90>
    API_MSG_VAR_REF(msg).conn = conn;
 8004f22:	9000      	str	r0, [sp, #0]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8004f24:	4669      	mov	r1, sp
 8004f26:	4820      	ldr	r0, [pc, #128]	; (8004fa8 <netconn_new_with_proto_and_callback+0x98>)
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8004f28:	f88d 5008 	strb.w	r5, [sp, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8004f2c:	f7ff ffc4 	bl	8004eb8 <netconn_apimsg>
    if (err != ERR_OK) {
 8004f30:	2800      	cmp	r0, #0
 8004f32:	d035      	beq.n	8004fa0 <netconn_new_with_proto_and_callback+0x90>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8004f34:	6863      	ldr	r3, [r4, #4]
 8004f36:	b12b      	cbz	r3, 8004f44 <netconn_new_with_proto_and_callback+0x34>
 8004f38:	4b1c      	ldr	r3, [pc, #112]	; (8004fac <netconn_new_with_proto_and_callback+0x9c>)
 8004f3a:	22a3      	movs	r2, #163	; 0xa3
 8004f3c:	491c      	ldr	r1, [pc, #112]	; (8004fb0 <netconn_new_with_proto_and_callback+0xa0>)
 8004f3e:	481d      	ldr	r0, [pc, #116]	; (8004fb4 <netconn_new_with_proto_and_callback+0xa4>)
 8004f40:	f008 fdfa 	bl	800db38 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8004f44:	f104 0510 	add.w	r5, r4, #16
 8004f48:	4628      	mov	r0, r5
 8004f4a:	f008 fce4 	bl	800d916 <sys_mbox_valid>
 8004f4e:	b928      	cbnz	r0, 8004f5c <netconn_new_with_proto_and_callback+0x4c>
 8004f50:	4b16      	ldr	r3, [pc, #88]	; (8004fac <netconn_new_with_proto_and_callback+0x9c>)
 8004f52:	22a4      	movs	r2, #164	; 0xa4
 8004f54:	4918      	ldr	r1, [pc, #96]	; (8004fb8 <netconn_new_with_proto_and_callback+0xa8>)
 8004f56:	4817      	ldr	r0, [pc, #92]	; (8004fb4 <netconn_new_with_proto_and_callback+0xa4>)
 8004f58:	f008 fdee 	bl	800db38 <iprintf>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8004f5c:	f104 0014 	add.w	r0, r4, #20
 8004f60:	f008 fcd9 	bl	800d916 <sys_mbox_valid>
 8004f64:	b128      	cbz	r0, 8004f72 <netconn_new_with_proto_and_callback+0x62>
 8004f66:	4b11      	ldr	r3, [pc, #68]	; (8004fac <netconn_new_with_proto_and_callback+0x9c>)
 8004f68:	22a6      	movs	r2, #166	; 0xa6
 8004f6a:	4914      	ldr	r1, [pc, #80]	; (8004fbc <netconn_new_with_proto_and_callback+0xac>)
 8004f6c:	4811      	ldr	r0, [pc, #68]	; (8004fb4 <netconn_new_with_proto_and_callback+0xa4>)
 8004f6e:	f008 fde3 	bl	800db38 <iprintf>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8004f72:	f104 060c 	add.w	r6, r4, #12
 8004f76:	4630      	mov	r0, r6
 8004f78:	f008 fd0d 	bl	800d996 <sys_sem_valid>
 8004f7c:	b928      	cbnz	r0, 8004f8a <netconn_new_with_proto_and_callback+0x7a>
 8004f7e:	4b0b      	ldr	r3, [pc, #44]	; (8004fac <netconn_new_with_proto_and_callback+0x9c>)
 8004f80:	22a9      	movs	r2, #169	; 0xa9
 8004f82:	490f      	ldr	r1, [pc, #60]	; (8004fc0 <netconn_new_with_proto_and_callback+0xb0>)
 8004f84:	480b      	ldr	r0, [pc, #44]	; (8004fb4 <netconn_new_with_proto_and_callback+0xa4>)
 8004f86:	f008 fdd7 	bl	800db38 <iprintf>
      sys_sem_free(&conn->op_completed);
 8004f8a:	4630      	mov	r0, r6
 8004f8c:	f008 fd00 	bl	800d990 <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 8004f90:	4628      	mov	r0, r5
 8004f92:	f008 fc79 	bl	800d888 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8004f96:	4621      	mov	r1, r4
      return NULL;
 8004f98:	2400      	movs	r4, #0
      memp_free(MEMP_NETCONN, conn);
 8004f9a:	2007      	movs	r0, #7
 8004f9c:	f004 f976 	bl	800928c <memp_free>
}
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	b008      	add	sp, #32
 8004fa4:	bd70      	pop	{r4, r5, r6, pc}
 8004fa6:	bf00      	nop
 8004fa8:	08005d29 	.word	0x08005d29
 8004fac:	0801fa8e 	.word	0x0801fa8e
 8004fb0:	0801fb0d 	.word	0x0801fb0d
 8004fb4:	0801f8bf 	.word	0x0801f8bf
 8004fb8:	0801fb2e 	.word	0x0801fb2e
 8004fbc:	0801fb43 	.word	0x0801fb43
 8004fc0:	0801fb64 	.word	0x0801fb64

08004fc4 <netconn_prepare_delete>:
{
 8004fc4:	b500      	push	{lr}
 8004fc6:	b089      	sub	sp, #36	; 0x24
  if (conn == NULL) {
 8004fc8:	b138      	cbz	r0, 8004fda <netconn_prepare_delete+0x16>
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8004fca:	2329      	movs	r3, #41	; 0x29
  API_MSG_VAR_REF(msg).conn = conn;
 8004fcc:	9000      	str	r0, [sp, #0]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8004fce:	4669      	mov	r1, sp
 8004fd0:	4803      	ldr	r0, [pc, #12]	; (8004fe0 <netconn_prepare_delete+0x1c>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8004fd2:	f88d 3009 	strb.w	r3, [sp, #9]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8004fd6:	f7ff ff6f 	bl	8004eb8 <netconn_apimsg>
}
 8004fda:	b009      	add	sp, #36	; 0x24
 8004fdc:	f85d fb04 	ldr.w	pc, [sp], #4
 8004fe0:	08006019 	.word	0x08006019

08004fe4 <netconn_delete>:
{
 8004fe4:	b538      	push	{r3, r4, r5, lr}
  if (conn == NULL) {
 8004fe6:	4605      	mov	r5, r0
 8004fe8:	b140      	cbz	r0, 8004ffc <netconn_delete+0x18>
    err = netconn_prepare_delete(conn);
 8004fea:	f7ff ffeb 	bl	8004fc4 <netconn_prepare_delete>
  if (err == ERR_OK) {
 8004fee:	4604      	mov	r4, r0
 8004ff0:	b910      	cbnz	r0, 8004ff8 <netconn_delete+0x14>
    netconn_free(conn);
 8004ff2:	4628      	mov	r0, r5
 8004ff4:	f000 ff0a 	bl	8005e0c <netconn_free>
}
 8004ff8:	4620      	mov	r0, r4
 8004ffa:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 8004ffc:	4604      	mov	r4, r0
 8004ffe:	e7fb      	b.n	8004ff8 <netconn_delete+0x14>

08005000 <netconn_bind>:
{
 8005000:	b500      	push	{lr}
 8005002:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8005004:	b958      	cbnz	r0, 800501e <netconn_bind+0x1e>
 8005006:	4b0c      	ldr	r3, [pc, #48]	; (8005038 <netconn_bind+0x38>)
 8005008:	f44f 729c 	mov.w	r2, #312	; 0x138
 800500c:	490b      	ldr	r1, [pc, #44]	; (800503c <netconn_bind+0x3c>)
 800500e:	480c      	ldr	r0, [pc, #48]	; (8005040 <netconn_bind+0x40>)
 8005010:	f008 fd92 	bl	800db38 <iprintf>
 8005014:	f06f 000f 	mvn.w	r0, #15
}
 8005018:	b009      	add	sp, #36	; 0x24
 800501a:	f85d fb04 	ldr.w	pc, [sp], #4
    addr = IP4_ADDR_ANY;
 800501e:	4b09      	ldr	r3, [pc, #36]	; (8005044 <netconn_bind+0x44>)
  API_MSG_VAR_REF(msg).conn = conn;
 8005020:	9000      	str	r0, [sp, #0]
    addr = IP4_ADDR_ANY;
 8005022:	2900      	cmp	r1, #0
 8005024:	bf08      	it	eq
 8005026:	4619      	moveq	r1, r3
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8005028:	4807      	ldr	r0, [pc, #28]	; (8005048 <netconn_bind+0x48>)
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800502a:	f8ad 200c 	strh.w	r2, [sp, #12]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800502e:	9102      	str	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8005030:	4669      	mov	r1, sp
 8005032:	f7ff ff41 	bl	8004eb8 <netconn_apimsg>
  return err;
 8005036:	e7ef      	b.n	8005018 <netconn_bind+0x18>
 8005038:	0801fa8e 	.word	0x0801fa8e
 800503c:	0801fbd7 	.word	0x0801fbd7
 8005040:	0801f8bf 	.word	0x0801f8bf
 8005044:	0800f6e0 	.word	0x0800f6e0
 8005048:	08006125 	.word	0x08006125

0800504c <netconn_listen_with_backlog>:
{
 800504c:	b500      	push	{lr}
 800504e:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8005050:	b958      	cbnz	r0, 800506a <netconn_listen_with_backlog+0x1e>
 8005052:	4b09      	ldr	r3, [pc, #36]	; (8005078 <netconn_listen_with_backlog+0x2c>)
 8005054:	f240 12bb 	movw	r2, #443	; 0x1bb
 8005058:	4908      	ldr	r1, [pc, #32]	; (800507c <netconn_listen_with_backlog+0x30>)
 800505a:	4809      	ldr	r0, [pc, #36]	; (8005080 <netconn_listen_with_backlog+0x34>)
 800505c:	f008 fd6c 	bl	800db38 <iprintf>
 8005060:	f06f 000f 	mvn.w	r0, #15
}
 8005064:	b009      	add	sp, #36	; 0x24
 8005066:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).conn = conn;
 800506a:	9000      	str	r0, [sp, #0]
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800506c:	4669      	mov	r1, sp
 800506e:	4805      	ldr	r0, [pc, #20]	; (8005084 <netconn_listen_with_backlog+0x38>)
 8005070:	f7ff ff22 	bl	8004eb8 <netconn_apimsg>
  return err;
 8005074:	e7f6      	b.n	8005064 <netconn_listen_with_backlog+0x18>
 8005076:	bf00      	nop
 8005078:	0801fa8e 	.word	0x0801fa8e
 800507c:	0801fc4f 	.word	0x0801fc4f
 8005080:	0801f8bf 	.word	0x0801f8bf
 8005084:	08006159 	.word	0x08006159

08005088 <netconn_write_vectors_partly>:
{
 8005088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800508a:	b089      	sub	sp, #36	; 0x24
 800508c:	469e      	mov	lr, r3
 800508e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8005090:	b958      	cbnz	r0, 80050aa <netconn_write_vectors_partly+0x22>
 8005092:	f06f 040f 	mvn.w	r4, #15
 8005096:	4b2c      	ldr	r3, [pc, #176]	; (8005148 <netconn_write_vectors_partly+0xc0>)
 8005098:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800509c:	492b      	ldr	r1, [pc, #172]	; (800514c <netconn_write_vectors_partly+0xc4>)
 800509e:	482c      	ldr	r0, [pc, #176]	; (8005150 <netconn_write_vectors_partly+0xc8>)
 80050a0:	f008 fd4a 	bl	800db38 <iprintf>
}
 80050a4:	4620      	mov	r0, r4
 80050a6:	b009      	add	sp, #36	; 0x24
 80050a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80050aa:	7804      	ldrb	r4, [r0, #0]
 80050ac:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 80050b0:	2c10      	cmp	r4, #16
 80050b2:	d009      	beq.n	80050c8 <netconn_write_vectors_partly+0x40>
 80050b4:	4b24      	ldr	r3, [pc, #144]	; (8005148 <netconn_write_vectors_partly+0xc0>)
 80050b6:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80050ba:	4926      	ldr	r1, [pc, #152]	; (8005154 <netconn_write_vectors_partly+0xcc>)
 80050bc:	4824      	ldr	r0, [pc, #144]	; (8005150 <netconn_write_vectors_partly+0xc8>)
 80050be:	f008 fd3b 	bl	800db38 <iprintf>
    return ERR_VAL;
 80050c2:	f06f 0405 	mvn.w	r4, #5
 80050c6:	e7ed      	b.n	80050a4 <netconn_write_vectors_partly+0x1c>
  if (dontblock && !bytes_written) {
 80050c8:	7e05      	ldrb	r5, [r0, #24]
 80050ca:	f003 0404 	and.w	r4, r3, #4
 80050ce:	f005 0502 	and.w	r5, r5, #2
 80050d2:	4325      	orrs	r5, r4
 80050d4:	d002      	beq.n	80050dc <netconn_write_vectors_partly+0x54>
 80050d6:	2f00      	cmp	r7, #0
 80050d8:	d0f3      	beq.n	80050c2 <netconn_write_vectors_partly+0x3a>
 80050da:	2501      	movs	r5, #1
 80050dc:	2400      	movs	r4, #0
    size += vectors[i].len;
 80050de:	f101 0c04 	add.w	ip, r1, #4
 80050e2:	4626      	mov	r6, r4
 80050e4:	e004      	b.n	80050f0 <netconn_write_vectors_partly+0x68>
    if (size < vectors[i].len) {
 80050e6:	f85c 3034 	ldr.w	r3, [ip, r4, lsl #3]
 80050ea:	199e      	adds	r6, r3, r6
 80050ec:	d2e9      	bcs.n	80050c2 <netconn_write_vectors_partly+0x3a>
  for (i = 0; i < vectorcnt; i++) {
 80050ee:	3401      	adds	r4, #1
 80050f0:	42a2      	cmp	r2, r4
 80050f2:	dcf8      	bgt.n	80050e6 <netconn_write_vectors_partly+0x5e>
  if (size == 0) {
 80050f4:	2e00      	cmp	r6, #0
 80050f6:	d101      	bne.n	80050fc <netconn_write_vectors_partly+0x74>
    return ERR_OK;
 80050f8:	2400      	movs	r4, #0
 80050fa:	e7d3      	b.n	80050a4 <netconn_write_vectors_partly+0x1c>
  } else if (size > SSIZE_MAX) {
 80050fc:	da03      	bge.n	8005106 <netconn_write_vectors_partly+0x7e>
    if (!bytes_written) {
 80050fe:	2f00      	cmp	r7, #0
 8005100:	d0df      	beq.n	80050c2 <netconn_write_vectors_partly+0x3a>
    size = (size_t)limited;
 8005102:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8005106:	f8ad 200c 	strh.w	r2, [sp, #12]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800510a:	2200      	movs	r2, #0
  API_MSG_VAR_REF(msg).conn = conn;
 800510c:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800510e:	9102      	str	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8005110:	4669      	mov	r1, sp
 8005112:	4811      	ldr	r0, [pc, #68]	; (8005158 <netconn_write_vectors_partly+0xd0>)
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8005114:	9204      	str	r2, [sp, #16]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8005116:	f88d e01c 	strb.w	lr, [sp, #28]
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800511a:	e9cd 6205 	strd	r6, r2, [sp, #20]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800511e:	f7ff fecb 	bl	8004eb8 <netconn_apimsg>
  if (err == ERR_OK) {
 8005122:	4604      	mov	r4, r0
 8005124:	2800      	cmp	r0, #0
 8005126:	d1bd      	bne.n	80050a4 <netconn_write_vectors_partly+0x1c>
    if (bytes_written != NULL) {
 8005128:	b10f      	cbz	r7, 800512e <netconn_write_vectors_partly+0xa6>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800512a:	9b06      	ldr	r3, [sp, #24]
 800512c:	603b      	str	r3, [r7, #0]
    if (!dontblock) {
 800512e:	2d00      	cmp	r5, #0
 8005130:	d1e2      	bne.n	80050f8 <netconn_write_vectors_partly+0x70>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8005132:	9b06      	ldr	r3, [sp, #24]
 8005134:	42b3      	cmp	r3, r6
 8005136:	d0df      	beq.n	80050f8 <netconn_write_vectors_partly+0x70>
 8005138:	4b03      	ldr	r3, [pc, #12]	; (8005148 <netconn_write_vectors_partly+0xc0>)
 800513a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800513e:	4907      	ldr	r1, [pc, #28]	; (800515c <netconn_write_vectors_partly+0xd4>)
 8005140:	4803      	ldr	r0, [pc, #12]	; (8005150 <netconn_write_vectors_partly+0xc8>)
 8005142:	f008 fcf9 	bl	800db38 <iprintf>
 8005146:	e7ad      	b.n	80050a4 <netconn_write_vectors_partly+0x1c>
 8005148:	0801fa8e 	.word	0x0801fa8e
 800514c:	0801fcab 	.word	0x0801fcab
 8005150:	0801f8bf 	.word	0x0801f8bf
 8005154:	0801fcc7 	.word	0x0801fcc7
 8005158:	08006249 	.word	0x08006249
 800515c:	0801fce9 	.word	0x0801fce9

08005160 <netconn_write_partly>:
{
 8005160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  vector.len = size;
 8005162:	e9cd 1202 	strd	r1, r2, [sp, #8]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8005166:	9a06      	ldr	r2, [sp, #24]
 8005168:	a902      	add	r1, sp, #8
 800516a:	9200      	str	r2, [sp, #0]
 800516c:	2201      	movs	r2, #1
 800516e:	f7ff ff8b 	bl	8005088 <netconn_write_vectors_partly>
}
 8005172:	b005      	add	sp, #20
 8005174:	f85d fb04 	ldr.w	pc, [sp], #4

08005178 <netconn_close>:
 */
err_t
netconn_close(struct netconn *conn)
{
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8005178:	2103      	movs	r1, #3
 800517a:	f7ff bea7 	b.w	8004ecc <netconn_close_shutdown>

0800517e <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800517e:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8005180:	4604      	mov	r4, r0
 8005182:	b148      	cbz	r0, 8005198 <netconn_err+0x1a>
    return ERR_OK;
  }
  SYS_ARCH_PROTECT(lev);
 8005184:	f008 fc42 	bl	800da0c <sys_arch_protect>
  err = conn->pending_err;
  conn->pending_err = ERR_OK;
 8005188:	2300      	movs	r3, #0
  err = conn->pending_err;
 800518a:	f994 5008 	ldrsb.w	r5, [r4, #8]
  conn->pending_err = ERR_OK;
 800518e:	7223      	strb	r3, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 8005190:	f008 fc48 	bl	800da24 <sys_arch_unprotect>
  return err;
}
 8005194:	4628      	mov	r0, r5
 8005196:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 8005198:	4605      	mov	r5, r0
 800519a:	e7fb      	b.n	8005194 <netconn_err+0x16>

0800519c <netconn_accept>:
{
 800519c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800519e:	4605      	mov	r5, r0
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 80051a0:	460e      	mov	r6, r1
 80051a2:	b959      	cbnz	r1, 80051bc <netconn_accept+0x20>
 80051a4:	4b25      	ldr	r3, [pc, #148]	; (800523c <netconn_accept+0xa0>)
 80051a6:	f240 12e1 	movw	r2, #481	; 0x1e1
 80051aa:	4925      	ldr	r1, [pc, #148]	; (8005240 <netconn_accept+0xa4>)
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80051ac:	f06f 040f 	mvn.w	r4, #15
 80051b0:	4824      	ldr	r0, [pc, #144]	; (8005244 <netconn_accept+0xa8>)
 80051b2:	f008 fcc1 	bl	800db38 <iprintf>
}
 80051b6:	4620      	mov	r0, r4
 80051b8:	b003      	add	sp, #12
 80051ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_conn = NULL;
 80051bc:	2300      	movs	r3, #0
 80051be:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80051c0:	b920      	cbnz	r0, 80051cc <netconn_accept+0x30>
 80051c2:	4b1e      	ldr	r3, [pc, #120]	; (800523c <netconn_accept+0xa0>)
 80051c4:	f240 12e3 	movw	r2, #483	; 0x1e3
 80051c8:	491f      	ldr	r1, [pc, #124]	; (8005248 <netconn_accept+0xac>)
 80051ca:	e7ef      	b.n	80051ac <netconn_accept+0x10>
  err = netconn_err(conn);
 80051cc:	f7ff ffd7 	bl	800517e <netconn_err>
 80051d0:	4604      	mov	r4, r0
 80051d2:	f88d 0003 	strb.w	r0, [sp, #3]
  if (err != ERR_OK) {
 80051d6:	2800      	cmp	r0, #0
 80051d8:	d1ed      	bne.n	80051b6 <netconn_accept+0x1a>
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 80051da:	f105 0714 	add.w	r7, r5, #20
 80051de:	4638      	mov	r0, r7
 80051e0:	f008 fb99 	bl	800d916 <sys_mbox_valid>
 80051e4:	b910      	cbnz	r0, 80051ec <netconn_accept+0x50>
    return ERR_CLSD;
 80051e6:	f06f 040e 	mvn.w	r4, #14
 80051ea:	e7e4      	b.n	80051b6 <netconn_accept+0x1a>
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 80051ec:	7e2b      	ldrb	r3, [r5, #24]
 80051ee:	07da      	lsls	r2, r3, #31
 80051f0:	d4f9      	bmi.n	80051e6 <netconn_accept+0x4a>
  if (netconn_is_nonblocking(conn)) {
 80051f2:	079b      	lsls	r3, r3, #30
 80051f4:	d508      	bpl.n	8005208 <netconn_accept+0x6c>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 80051f6:	a901      	add	r1, sp, #4
 80051f8:	4638      	mov	r0, r7
 80051fa:	f008 fb7b 	bl	800d8f4 <sys_arch_mbox_tryfetch>
 80051fe:	3001      	adds	r0, #1
 8005200:	d107      	bne.n	8005212 <netconn_accept+0x76>
      return ERR_WOULDBLOCK;
 8005202:	f06f 0406 	mvn.w	r4, #6
 8005206:	e7d6      	b.n	80051b6 <netconn_accept+0x1a>
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8005208:	4622      	mov	r2, r4
 800520a:	a901      	add	r1, sp, #4
 800520c:	4638      	mov	r0, r7
 800520e:	f008 fb4f 	bl	800d8b0 <sys_arch_mbox_fetch>
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8005212:	6a2b      	ldr	r3, [r5, #32]
 8005214:	b11b      	cbz	r3, 800521e <netconn_accept+0x82>
 8005216:	2200      	movs	r2, #0
 8005218:	2101      	movs	r1, #1
 800521a:	4628      	mov	r0, r5
 800521c:	4798      	blx	r3
  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800521e:	f10d 0103 	add.w	r1, sp, #3
 8005222:	9801      	ldr	r0, [sp, #4]
 8005224:	f000 fd58 	bl	8005cd8 <lwip_netconn_is_err_msg>
 8005228:	b110      	cbz	r0, 8005230 <netconn_accept+0x94>
    return err;
 800522a:	f99d 4003 	ldrsb.w	r4, [sp, #3]
 800522e:	e7c2      	b.n	80051b6 <netconn_accept+0x1a>
  if (accept_ptr == NULL) {
 8005230:	9b01      	ldr	r3, [sp, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d0d7      	beq.n	80051e6 <netconn_accept+0x4a>
  *new_conn = newconn;
 8005236:	6033      	str	r3, [r6, #0]
  return ERR_OK;
 8005238:	e7bd      	b.n	80051b6 <netconn_accept+0x1a>
 800523a:	bf00      	nop
 800523c:	0801fa8e 	.word	0x0801fa8e
 8005240:	0801fd0c 	.word	0x0801fd0c
 8005244:	0801f8bf 	.word	0x0801f8bf
 8005248:	0801fd2c 	.word	0x0801fd2c

0800524c <netconn_recv_data>:
  void *buf = NULL;
 800524c:	2300      	movs	r3, #0
{
 800524e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005250:	4604      	mov	r4, r0
 8005252:	4616      	mov	r6, r2
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8005254:	460d      	mov	r5, r1
  void *buf = NULL;
 8005256:	9301      	str	r3, [sp, #4]
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8005258:	b951      	cbnz	r1, 8005270 <netconn_recv_data+0x24>
 800525a:	4b32      	ldr	r3, [pc, #200]	; (8005324 <netconn_recv_data+0xd8>)
 800525c:	f44f 7212 	mov.w	r2, #584	; 0x248
 8005260:	4931      	ldr	r1, [pc, #196]	; (8005328 <netconn_recv_data+0xdc>)
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8005262:	4832      	ldr	r0, [pc, #200]	; (800532c <netconn_recv_data+0xe0>)
 8005264:	f008 fc68 	bl	800db38 <iprintf>
 8005268:	f06f 000f 	mvn.w	r0, #15
}
 800526c:	b003      	add	sp, #12
 800526e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_buf = NULL;
 8005270:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8005272:	b920      	cbnz	r0, 800527e <netconn_recv_data+0x32>
 8005274:	4b2b      	ldr	r3, [pc, #172]	; (8005324 <netconn_recv_data+0xd8>)
 8005276:	f240 224a 	movw	r2, #586	; 0x24a
 800527a:	492d      	ldr	r1, [pc, #180]	; (8005330 <netconn_recv_data+0xe4>)
 800527c:	e7f1      	b.n	8005262 <netconn_recv_data+0x16>
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800527e:	f100 0710 	add.w	r7, r0, #16
 8005282:	4638      	mov	r0, r7
 8005284:	f008 fb47 	bl	800d916 <sys_mbox_valid>
 8005288:	b938      	cbnz	r0, 800529a <netconn_recv_data+0x4e>
    err_t err = netconn_err(conn);
 800528a:	4620      	mov	r0, r4
 800528c:	f7ff ff77 	bl	800517e <netconn_err>
    if (err != ERR_OK) {
 8005290:	2800      	cmp	r0, #0
 8005292:	d1eb      	bne.n	800526c <netconn_recv_data+0x20>
    return ERR_CONN;
 8005294:	f06f 000a 	mvn.w	r0, #10
 8005298:	e7e8      	b.n	800526c <netconn_recv_data+0x20>
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800529a:	7e23      	ldrb	r3, [r4, #24]
 800529c:	f006 0604 	and.w	r6, r6, #4
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80052a0:	a901      	add	r1, sp, #4
 80052a2:	4638      	mov	r0, r7
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80052a4:	f003 0303 	and.w	r3, r3, #3
 80052a8:	4333      	orrs	r3, r6
 80052aa:	d102      	bne.n	80052b2 <netconn_recv_data+0x66>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80052ac:	f994 2008 	ldrsb.w	r2, [r4, #8]
 80052b0:	b172      	cbz	r2, 80052d0 <netconn_recv_data+0x84>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80052b2:	f008 fb1f 	bl	800d8f4 <sys_arch_mbox_tryfetch>
 80052b6:	3001      	adds	r0, #1
 80052b8:	d10c      	bne.n	80052d4 <netconn_recv_data+0x88>
      err = netconn_err(conn);
 80052ba:	4620      	mov	r0, r4
 80052bc:	f7ff ff5f 	bl	800517e <netconn_err>
      if (err != ERR_OK) {
 80052c0:	2800      	cmp	r0, #0
 80052c2:	d1d3      	bne.n	800526c <netconn_recv_data+0x20>
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 80052c4:	7e23      	ldrb	r3, [r4, #24]
 80052c6:	07db      	lsls	r3, r3, #31
 80052c8:	d4e4      	bmi.n	8005294 <netconn_recv_data+0x48>
      return ERR_WOULDBLOCK;
 80052ca:	f06f 0006 	mvn.w	r0, #6
 80052ce:	e7cd      	b.n	800526c <netconn_recv_data+0x20>
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 80052d0:	f008 faee 	bl	800d8b0 <sys_arch_mbox_fetch>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80052d4:	7823      	ldrb	r3, [r4, #0]
 80052d6:	9801      	ldr	r0, [sp, #4]
 80052d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052dc:	2b10      	cmp	r3, #16
 80052de:	d116      	bne.n	800530e <netconn_recv_data+0xc2>
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80052e0:	f10d 0103 	add.w	r1, sp, #3
 80052e4:	f000 fcf8 	bl	8005cd8 <lwip_netconn_is_err_msg>
 80052e8:	b130      	cbz	r0, 80052f8 <netconn_recv_data+0xac>
      if (err == ERR_CLSD) {
 80052ea:	f99d 0003 	ldrsb.w	r0, [sp, #3]
        return ERR_OK;
 80052ee:	f110 0f0f 	cmn.w	r0, #15
 80052f2:	bf08      	it	eq
 80052f4:	2000      	moveq	r0, #0
 80052f6:	e7b9      	b.n	800526c <netconn_recv_data+0x20>
    len = ((struct pbuf *)buf)->tot_len;
 80052f8:	9b01      	ldr	r3, [sp, #4]
    len = netbuf_len((struct netbuf *)buf);
 80052fa:	891a      	ldrh	r2, [r3, #8]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80052fc:	6a23      	ldr	r3, [r4, #32]
 80052fe:	b113      	cbz	r3, 8005306 <netconn_recv_data+0xba>
 8005300:	2101      	movs	r1, #1
 8005302:	4620      	mov	r0, r4
 8005304:	4798      	blx	r3
  *new_buf = buf;
 8005306:	9b01      	ldr	r3, [sp, #4]
  return ERR_OK;
 8005308:	2000      	movs	r0, #0
  *new_buf = buf;
 800530a:	602b      	str	r3, [r5, #0]
  return ERR_OK;
 800530c:	e7ae      	b.n	800526c <netconn_recv_data+0x20>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800530e:	b930      	cbnz	r0, 800531e <netconn_recv_data+0xd2>
 8005310:	4b04      	ldr	r3, [pc, #16]	; (8005324 <netconn_recv_data+0xd8>)
 8005312:	f240 2291 	movw	r2, #657	; 0x291
 8005316:	4907      	ldr	r1, [pc, #28]	; (8005334 <netconn_recv_data+0xe8>)
 8005318:	4804      	ldr	r0, [pc, #16]	; (800532c <netconn_recv_data+0xe0>)
 800531a:	f008 fc0d 	bl	800db38 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800531e:	9b01      	ldr	r3, [sp, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	e7ea      	b.n	80052fa <netconn_recv_data+0xae>
 8005324:	0801fa8e 	.word	0x0801fa8e
 8005328:	0801fd49 	.word	0x0801fd49
 800532c:	0801f8bf 	.word	0x0801f8bf
 8005330:	0801fd67 	.word	0x0801fd67
 8005334:	0801fd82 	.word	0x0801fd82

08005338 <netconn_recv_data_tcp>:
{
 8005338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800533a:	4604      	mov	r4, r0
 800533c:	b089      	sub	sp, #36	; 0x24
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800533e:	3010      	adds	r0, #16
{
 8005340:	460f      	mov	r7, r1
 8005342:	4616      	mov	r6, r2
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8005344:	f008 fae7 	bl	800d916 <sys_mbox_valid>
 8005348:	2800      	cmp	r0, #0
 800534a:	d04c      	beq.n	80053e6 <netconn_recv_data_tcp+0xae>
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800534c:	f994 2018 	ldrsb.w	r2, [r4, #24]
 8005350:	7e23      	ldrb	r3, [r4, #24]
 8005352:	2a00      	cmp	r2, #0
 8005354:	da13      	bge.n	800537e <netconn_recv_data_tcp+0x46>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8005356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800535a:	7623      	strb	r3, [r4, #24]
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800535c:	6a23      	ldr	r3, [r4, #32]
 800535e:	b11b      	cbz	r3, 8005368 <netconn_recv_data_tcp+0x30>
 8005360:	2200      	movs	r2, #0
 8005362:	2101      	movs	r1, #1
 8005364:	4620      	mov	r0, r4
 8005366:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8005368:	6863      	ldr	r3, [r4, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d134      	bne.n	80053d8 <netconn_recv_data_tcp+0xa0>
        err = netconn_err(conn);
 800536e:	4620      	mov	r0, r4
 8005370:	f7ff ff05 	bl	800517e <netconn_err>
        return ERR_RST;
 8005374:	1e05      	subs	r5, r0, #0
 8005376:	bf08      	it	eq
 8005378:	f06f 050d 	mvneq.w	r5, #13
 800537c:	e020      	b.n	80053c0 <netconn_recv_data_tcp+0x88>
  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800537e:	4632      	mov	r2, r6
 8005380:	4639      	mov	r1, r7
 8005382:	4620      	mov	r0, r4
 8005384:	f7ff ff62 	bl	800524c <netconn_recv_data>
  if (err != ERR_OK) {
 8005388:	4605      	mov	r5, r0
 800538a:	b9c8      	cbnz	r0, 80053c0 <netconn_recv_data_tcp+0x88>
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800538c:	0732      	lsls	r2, r6, #28
  buf = *new_buf;
 800538e:	683f      	ldr	r7, [r7, #0]
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8005390:	d40d      	bmi.n	80053ae <netconn_recv_data_tcp+0x76>
    u16_t len = buf ? buf->tot_len : 1;
 8005392:	b1c7      	cbz	r7, 80053c6 <netconn_recv_data_tcp+0x8e>
 8005394:	893a      	ldrh	r2, [r7, #8]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8005396:	7823      	ldrb	r3, [r4, #0]
 8005398:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800539c:	2b10      	cmp	r3, #16
 800539e:	d014      	beq.n	80053ca <netconn_recv_data_tcp+0x92>
 80053a0:	4b12      	ldr	r3, [pc, #72]	; (80053ec <netconn_recv_data_tcp+0xb4>)
 80053a2:	f240 22a7 	movw	r2, #679	; 0x2a7
 80053a6:	4912      	ldr	r1, [pc, #72]	; (80053f0 <netconn_recv_data_tcp+0xb8>)
 80053a8:	4812      	ldr	r0, [pc, #72]	; (80053f4 <netconn_recv_data_tcp+0xbc>)
 80053aa:	f008 fbc5 	bl	800db38 <iprintf>
  if (buf == NULL) {
 80053ae:	b93f      	cbnz	r7, 80053c0 <netconn_recv_data_tcp+0x88>
    if (apiflags & NETCONN_NOFIN) {
 80053b0:	06f3      	lsls	r3, r6, #27
 80053b2:	d5d3      	bpl.n	800535c <netconn_recv_data_tcp+0x24>
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80053b4:	7e23      	ldrb	r3, [r4, #24]
      return ERR_WOULDBLOCK;
 80053b6:	f06f 0506 	mvn.w	r5, #6
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80053ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80053be:	7623      	strb	r3, [r4, #24]
}
 80053c0:	4628      	mov	r0, r5
 80053c2:	b009      	add	sp, #36	; 0x24
 80053c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    u16_t len = buf ? buf->tot_len : 1;
 80053c6:	2201      	movs	r2, #1
 80053c8:	e7e5      	b.n	8005396 <netconn_recv_data_tcp+0x5e>
  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80053ca:	4669      	mov	r1, sp
 80053cc:	480a      	ldr	r0, [pc, #40]	; (80053f8 <netconn_recv_data_tcp+0xc0>)
  msg->conn = conn;
 80053ce:	9400      	str	r4, [sp, #0]
  msg->msg.r.len = len;
 80053d0:	9202      	str	r2, [sp, #8]
  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80053d2:	f7ff fd71 	bl	8004eb8 <netconn_apimsg>
 80053d6:	e7ea      	b.n	80053ae <netconn_recv_data_tcp+0x76>
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80053d8:	2101      	movs	r1, #1
 80053da:	4620      	mov	r0, r4
      return ERR_CLSD;
 80053dc:	f06f 050e 	mvn.w	r5, #14
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80053e0:	f7ff fd74 	bl	8004ecc <netconn_close_shutdown>
      return ERR_CLSD;
 80053e4:	e7ec      	b.n	80053c0 <netconn_recv_data_tcp+0x88>
    return ERR_CONN;
 80053e6:	f06f 050a 	mvn.w	r5, #10
 80053ea:	e7e9      	b.n	80053c0 <netconn_recv_data_tcp+0x88>
 80053ec:	0801fa8e 	.word	0x0801fa8e
 80053f0:	0801fc6c 	.word	0x0801fc6c
 80053f4:	0801f8bf 	.word	0x0801f8bf
 80053f8:	08006211 	.word	0x08006211

080053fc <netconn_recv>:
{
 80053fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053fe:	4604      	mov	r4, r0
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8005400:	460e      	mov	r6, r1
 8005402:	b959      	cbnz	r1, 800541c <netconn_recv+0x20>
 8005404:	4b21      	ldr	r3, [pc, #132]	; (800548c <netconn_recv+0x90>)
 8005406:	f240 3263 	movw	r2, #867	; 0x363
 800540a:	4921      	ldr	r1, [pc, #132]	; (8005490 <netconn_recv+0x94>)
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800540c:	f06f 040f 	mvn.w	r4, #15
 8005410:	4820      	ldr	r0, [pc, #128]	; (8005494 <netconn_recv+0x98>)
 8005412:	f008 fb91 	bl	800db38 <iprintf>
}
 8005416:	4620      	mov	r0, r4
 8005418:	b003      	add	sp, #12
 800541a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_buf = NULL;
 800541c:	2700      	movs	r7, #0
 800541e:	600f      	str	r7, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8005420:	b920      	cbnz	r0, 800542c <netconn_recv+0x30>
 8005422:	4b1a      	ldr	r3, [pc, #104]	; (800548c <netconn_recv+0x90>)
 8005424:	f240 3265 	movw	r2, #869	; 0x365
 8005428:	491b      	ldr	r1, [pc, #108]	; (8005498 <netconn_recv+0x9c>)
 800542a:	e7ef      	b.n	800540c <netconn_recv+0x10>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800542c:	7803      	ldrb	r3, [r0, #0]
 800542e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005432:	2b10      	cmp	r3, #16
 8005434:	d125      	bne.n	8005482 <netconn_recv+0x86>
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8005436:	2006      	movs	r0, #6
    struct pbuf *p = NULL;
 8005438:	9701      	str	r7, [sp, #4]
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800543a:	f003 fef7 	bl	800922c <memp_malloc>
    if (buf == NULL) {
 800543e:	4605      	mov	r5, r0
 8005440:	b1e0      	cbz	r0, 800547c <netconn_recv+0x80>
    err = netconn_recv_data_tcp(conn, &p, 0);
 8005442:	4620      	mov	r0, r4
 8005444:	463a      	mov	r2, r7
 8005446:	a901      	add	r1, sp, #4
 8005448:	f7ff ff76 	bl	8005338 <netconn_recv_data_tcp>
    if (err != ERR_OK) {
 800544c:	4604      	mov	r4, r0
 800544e:	b120      	cbz	r0, 800545a <netconn_recv+0x5e>
      memp_free(MEMP_NETBUF, buf);
 8005450:	4629      	mov	r1, r5
 8005452:	2006      	movs	r0, #6
 8005454:	f003 ff1a 	bl	800928c <memp_free>
      return err;
 8005458:	e7dd      	b.n	8005416 <netconn_recv+0x1a>
    LWIP_ASSERT("p != NULL", p != NULL);
 800545a:	9b01      	ldr	r3, [sp, #4]
 800545c:	b933      	cbnz	r3, 800546c <netconn_recv+0x70>
 800545e:	4b0b      	ldr	r3, [pc, #44]	; (800548c <netconn_recv+0x90>)
 8005460:	f240 3279 	movw	r2, #889	; 0x379
 8005464:	490d      	ldr	r1, [pc, #52]	; (800549c <netconn_recv+0xa0>)
 8005466:	480b      	ldr	r0, [pc, #44]	; (8005494 <netconn_recv+0x98>)
 8005468:	f008 fb66 	bl	800db38 <iprintf>
    buf->p = p;
 800546c:	9b01      	ldr	r3, [sp, #4]
    buf->ptr = p;
 800546e:	e9c5 3300 	strd	r3, r3, [r5]
    buf->port = 0;
 8005472:	2300      	movs	r3, #0
 8005474:	81ab      	strh	r3, [r5, #12]
    ip_addr_set_zero(&buf->addr);
 8005476:	60ab      	str	r3, [r5, #8]
    *new_buf = buf;
 8005478:	6035      	str	r5, [r6, #0]
    return ERR_OK;
 800547a:	e7cc      	b.n	8005416 <netconn_recv+0x1a>
      return ERR_MEM;
 800547c:	f04f 34ff 	mov.w	r4, #4294967295
 8005480:	e7c9      	b.n	8005416 <netconn_recv+0x1a>
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8005482:	463a      	mov	r2, r7
 8005484:	f7ff fee2 	bl	800524c <netconn_recv_data>
 8005488:	4604      	mov	r4, r0
 800548a:	e7c4      	b.n	8005416 <netconn_recv+0x1a>
 800548c:	0801fa8e 	.word	0x0801fa8e
 8005490:	0801fd49 	.word	0x0801fd49
 8005494:	0801f8bf 	.word	0x0801f8bf
 8005498:	0801fd67 	.word	0x0801fd67
 800549c:	080213f7 	.word	0x080213f7

080054a0 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80054a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80054a4:	4606      	mov	r6, r0
 80054a6:	4617      	mov	r7, r2
 80054a8:	461d      	mov	r5, r3
 80054aa:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80054ae:	460c      	mov	r4, r1
 80054b0:	b929      	cbnz	r1, 80054be <recv_udp+0x1e>
 80054b2:	4b25      	ldr	r3, [pc, #148]	; (8005548 <recv_udp+0xa8>)
 80054b4:	22e5      	movs	r2, #229	; 0xe5
 80054b6:	4925      	ldr	r1, [pc, #148]	; (800554c <recv_udp+0xac>)
 80054b8:	4825      	ldr	r0, [pc, #148]	; (8005550 <recv_udp+0xb0>)
 80054ba:	f008 fb3d 	bl	800db38 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80054be:	b99e      	cbnz	r6, 80054e8 <recv_udp+0x48>
 80054c0:	4b21      	ldr	r3, [pc, #132]	; (8005548 <recv_udp+0xa8>)
 80054c2:	22e6      	movs	r2, #230	; 0xe6
 80054c4:	4923      	ldr	r1, [pc, #140]	; (8005554 <recv_udp+0xb4>)
 80054c6:	4822      	ldr	r0, [pc, #136]	; (8005550 <recv_udp+0xb0>)
 80054c8:	f008 fb36 	bl	800db38 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80054cc:	4638      	mov	r0, r7
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  }
}
 80054ce:	b003      	add	sp, #12
 80054d0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    pbuf_free(p);
 80054d4:	f004 b94a 	b.w	800976c <pbuf_free>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80054d8:	6a33      	ldr	r3, [r6, #32]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d031      	beq.n	8005542 <recv_udp+0xa2>
 80054de:	4630      	mov	r0, r6
}
 80054e0:	b003      	add	sp, #12
 80054e2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80054e6:	4718      	bx	r3
  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80054e8:	6873      	ldr	r3, [r6, #4]
 80054ea:	42a3      	cmp	r3, r4
 80054ec:	d005      	beq.n	80054fa <recv_udp+0x5a>
 80054ee:	4b16      	ldr	r3, [pc, #88]	; (8005548 <recv_udp+0xa8>)
 80054f0:	22ee      	movs	r2, #238	; 0xee
 80054f2:	4919      	ldr	r1, [pc, #100]	; (8005558 <recv_udp+0xb8>)
 80054f4:	4816      	ldr	r0, [pc, #88]	; (8005550 <recv_udp+0xb0>)
 80054f6:	f008 fb1f 	bl	800db38 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80054fa:	f106 0910 	add.w	r9, r6, #16
 80054fe:	4648      	mov	r0, r9
 8005500:	f008 fa09 	bl	800d916 <sys_mbox_valid>
 8005504:	2800      	cmp	r0, #0
 8005506:	d0e1      	beq.n	80054cc <recv_udp+0x2c>
  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8005508:	2006      	movs	r0, #6
 800550a:	f003 fe8f 	bl	800922c <memp_malloc>
  if (buf == NULL) {
 800550e:	4604      	mov	r4, r0
 8005510:	2800      	cmp	r0, #0
 8005512:	d0db      	beq.n	80054cc <recv_udp+0x2c>
    buf->ptr = p;
 8005514:	e9c0 7700 	strd	r7, r7, [r0]
    ip_addr_set(&buf->addr, addr);
 8005518:	b105      	cbz	r5, 800551c <recv_udp+0x7c>
 800551a:	682d      	ldr	r5, [r5, #0]
  len = p->tot_len;
 800551c:	893a      	ldrh	r2, [r7, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800551e:	4621      	mov	r1, r4
 8005520:	4648      	mov	r0, r9
    ip_addr_set(&buf->addr, addr);
 8005522:	60a5      	str	r5, [r4, #8]
    buf->port = port;
 8005524:	f8a4 800c 	strh.w	r8, [r4, #12]
  len = p->tot_len;
 8005528:	9201      	str	r2, [sp, #4]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800552a:	f008 f9b7 	bl	800d89c <sys_mbox_trypost>
 800552e:	9a01      	ldr	r2, [sp, #4]
 8005530:	4601      	mov	r1, r0
 8005532:	2800      	cmp	r0, #0
 8005534:	d0d0      	beq.n	80054d8 <recv_udp+0x38>
    netbuf_delete(buf);
 8005536:	4620      	mov	r0, r4
}
 8005538:	b003      	add	sp, #12
 800553a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    netbuf_delete(buf);
 800553e:	f000 bf47 	b.w	80063d0 <netbuf_delete>
}
 8005542:	b003      	add	sp, #12
 8005544:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005548:	0801fdb8 	.word	0x0801fdb8
 800554c:	0801fe1b 	.word	0x0801fe1b
 8005550:	0801f8bf 	.word	0x0801f8bf
 8005554:	0801fe3d 	.word	0x0801fe3d
 8005558:	0801fe5c 	.word	0x0801fe5c

0800555c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800555c:	b507      	push	{r0, r1, r2, lr}
 800555e:	4601      	mov	r1, r0
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8005560:	6840      	ldr	r0, [r0, #4]
  tcp_arg(pcb, conn);
 8005562:	9001      	str	r0, [sp, #4]
 8005564:	f004 fd4c 	bl	800a000 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8005568:	9801      	ldr	r0, [sp, #4]
 800556a:	4909      	ldr	r1, [pc, #36]	; (8005590 <setup_tcp+0x34>)
 800556c:	f004 fd4c 	bl	800a008 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8005570:	9801      	ldr	r0, [sp, #4]
 8005572:	4908      	ldr	r1, [pc, #32]	; (8005594 <setup_tcp+0x38>)
 8005574:	f004 fd60 	bl	800a038 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8005578:	9801      	ldr	r0, [sp, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	4906      	ldr	r1, [pc, #24]	; (8005598 <setup_tcp+0x3c>)
 800557e:	f004 fd8f 	bl	800a0a0 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8005582:	4906      	ldr	r1, [pc, #24]	; (800559c <setup_tcp+0x40>)
 8005584:	9801      	ldr	r0, [sp, #4]
}
 8005586:	b003      	add	sp, #12
 8005588:	f85d eb04 	ldr.w	lr, [sp], #4
  tcp_err(pcb, err_tcp);
 800558c:	f004 bd6a 	b.w	800a064 <tcp_err>
 8005590:	08005a59 	.word	0x08005a59
 8005594:	08005c69 	.word	0x08005c69
 8005598:	080059dd 	.word	0x080059dd
 800559c:	08005b29 	.word	0x08005b29

080055a0 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80055a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055a4:	460f      	mov	r7, r1
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 80055a6:	4604      	mov	r4, r0
 80055a8:	b930      	cbnz	r0, 80055b8 <lwip_netconn_do_writemore+0x18>
 80055aa:	4b89      	ldr	r3, [pc, #548]	; (80057d0 <lwip_netconn_do_writemore+0x230>)
 80055ac:	f240 6273 	movw	r2, #1651	; 0x673
 80055b0:	4988      	ldr	r1, [pc, #544]	; (80057d4 <lwip_netconn_do_writemore+0x234>)
 80055b2:	4889      	ldr	r0, [pc, #548]	; (80057d8 <lwip_netconn_do_writemore+0x238>)
 80055b4:	f008 fac0 	bl	800db38 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 80055b8:	7863      	ldrb	r3, [r4, #1]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d006      	beq.n	80055cc <lwip_netconn_do_writemore+0x2c>
 80055be:	4b84      	ldr	r3, [pc, #528]	; (80057d0 <lwip_netconn_do_writemore+0x230>)
 80055c0:	f240 6274 	movw	r2, #1652	; 0x674
 80055c4:	4985      	ldr	r1, [pc, #532]	; (80057dc <lwip_netconn_do_writemore+0x23c>)
 80055c6:	4884      	ldr	r0, [pc, #528]	; (80057d8 <lwip_netconn_do_writemore+0x238>)
 80055c8:	f008 fab6 	bl	800db38 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80055cc:	69e3      	ldr	r3, [r4, #28]
 80055ce:	b933      	cbnz	r3, 80055de <lwip_netconn_do_writemore+0x3e>
 80055d0:	4b7f      	ldr	r3, [pc, #508]	; (80057d0 <lwip_netconn_do_writemore+0x230>)
 80055d2:	f240 6275 	movw	r2, #1653	; 0x675
 80055d6:	4982      	ldr	r1, [pc, #520]	; (80057e0 <lwip_netconn_do_writemore+0x240>)
 80055d8:	487f      	ldr	r0, [pc, #508]	; (80057d8 <lwip_netconn_do_writemore+0x238>)
 80055da:	f008 faad 	bl	800db38 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80055de:	6863      	ldr	r3, [r4, #4]
 80055e0:	b933      	cbnz	r3, 80055f0 <lwip_netconn_do_writemore+0x50>
 80055e2:	4b7b      	ldr	r3, [pc, #492]	; (80057d0 <lwip_netconn_do_writemore+0x230>)
 80055e4:	f240 6276 	movw	r2, #1654	; 0x676
 80055e8:	497e      	ldr	r1, [pc, #504]	; (80057e4 <lwip_netconn_do_writemore+0x244>)
 80055ea:	487b      	ldr	r0, [pc, #492]	; (80057d8 <lwip_netconn_do_writemore+0x238>)
 80055ec:	f008 faa4 	bl	800db38 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80055f0:	69e3      	ldr	r3, [r4, #28]
 80055f2:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d306      	bcc.n	8005608 <lwip_netconn_do_writemore+0x68>
 80055fa:	4b75      	ldr	r3, [pc, #468]	; (80057d0 <lwip_netconn_do_writemore+0x230>)
 80055fc:	f240 6277 	movw	r2, #1655	; 0x677
 8005600:	4979      	ldr	r1, [pc, #484]	; (80057e8 <lwip_netconn_do_writemore+0x248>)
 8005602:	4875      	ldr	r0, [pc, #468]	; (80057d8 <lwip_netconn_do_writemore+0x238>)
 8005604:	f008 fa98 	bl	800db38 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8005608:	69e3      	ldr	r3, [r4, #28]
 800560a:	899b      	ldrh	r3, [r3, #12]
 800560c:	b933      	cbnz	r3, 800561c <lwip_netconn_do_writemore+0x7c>
 800560e:	4b70      	ldr	r3, [pc, #448]	; (80057d0 <lwip_netconn_do_writemore+0x230>)
 8005610:	f240 6279 	movw	r2, #1657	; 0x679
 8005614:	4975      	ldr	r1, [pc, #468]	; (80057ec <lwip_netconn_do_writemore+0x24c>)
 8005616:	4870      	ldr	r0, [pc, #448]	; (80057d8 <lwip_netconn_do_writemore+0x238>)
 8005618:	f008 fa8e 	bl	800db38 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800561c:	69e3      	ldr	r3, [r4, #28]
 800561e:	7e26      	ldrb	r6, [r4, #24]
 8005620:	f893 801c 	ldrb.w	r8, [r3, #28]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8005624:	f006 0602 	and.w	r6, r6, #2
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8005628:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 80057d8 <lwip_netconn_do_writemore+0x238>
 800562c:	f008 0304 	and.w	r3, r8, #4
 8005630:	431e      	orrs	r6, r3
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8005632:	69e1      	ldr	r1, [r4, #28]
      available = tcp_sndbuf(conn->pcb.tcp);
 8005634:	6865      	ldr	r5, [r4, #4]
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8005636:	688a      	ldr	r2, [r1, #8]
 8005638:	690b      	ldr	r3, [r1, #16]
 800563a:	6810      	ldr	r0, [r2, #0]
      available = tcp_sndbuf(conn->pcb.tcp);
 800563c:	f8b5 5064 	ldrh.w	r5, [r5, #100]	; 0x64
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8005640:	eb00 0a03 	add.w	sl, r0, r3
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8005644:	6850      	ldr	r0, [r2, #4]
 8005646:	eba0 0903 	sub.w	r9, r0, r3
      if (diff > 0xffffUL) { /* max_u16_t */
 800564a:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
        len = 0xffff;
 800564e:	bf2a      	itet	cs
 8005650:	f64f 72ff 	movwcs	r2, #65535	; 0xffff
        len = (u16_t)diff;
 8005654:	fa1f f289 	uxthcc.w	r2, r9
        apiflags |= TCP_WRITE_FLAG_MORE;
 8005658:	f048 0802 	orrcs.w	r8, r8, #2
      if (available < len) {
 800565c:	42aa      	cmp	r2, r5
 800565e:	d979      	bls.n	8005754 <lwip_netconn_do_writemore+0x1b4>
        if (dontblock) {
 8005660:	2e00      	cmp	r6, #0
 8005662:	d038      	beq.n	80056d6 <lwip_netconn_do_writemore+0x136>
          if (!len) {
 8005664:	2d00      	cmp	r5, #0
 8005666:	d138      	bne.n	80056da <lwip_netconn_do_writemore+0x13a>
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8005668:	698b      	ldr	r3, [r1, #24]
 800566a:	2b00      	cmp	r3, #0
 800566c:	bf0c      	ite	eq
 800566e:	f06f 0a06 	mvneq.w	sl, #6
 8005672:	f04f 0a00 	movne.w	sl, #0
      }
    } while (write_more && err == ERR_OK);
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
err_mem:
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8005676:	69e3      	ldr	r3, [r4, #28]
 8005678:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 800567c:	429a      	cmp	r2, r3
 800567e:	d276      	bcs.n	800576e <lwip_netconn_do_writemore+0x1ce>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8005680:	6a23      	ldr	r3, [r4, #32]
 8005682:	b11b      	cbz	r3, 800568c <lwip_netconn_do_writemore+0xec>
 8005684:	2200      	movs	r2, #0
 8005686:	2103      	movs	r1, #3
 8005688:	4620      	mov	r0, r4
 800568a:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800568c:	7e23      	ldrb	r3, [r4, #24]
 800568e:	f043 0310 	orr.w	r3, r3, #16
 8005692:	7623      	strb	r3, [r4, #24]
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
      }
    }

    if (err == ERR_OK) {
 8005694:	f1ba 0f00 	cmp.w	sl, #0
 8005698:	d17e      	bne.n	8005798 <lwip_netconn_do_writemore+0x1f8>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800569a:	69e3      	ldr	r3, [r4, #28]
 800569c:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d077      	beq.n	8005794 <lwip_netconn_do_writemore+0x1f4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 80056a4:	3e00      	subs	r6, #0
 80056a6:	bf18      	it	ne
 80056a8:	2601      	movne	r6, #1
      }
      out_err = tcp_output(conn->pcb.tcp);
 80056aa:	6860      	ldr	r0, [r4, #4]
 80056ac:	f007 fa38 	bl	800cb20 <tcp_output>
      if (out_err == ERR_RTE) {
 80056b0:	3004      	adds	r0, #4
 80056b2:	f040 8084 	bne.w	80057be <lwip_netconn_do_writemore+0x21e>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80056b6:	f06f 0a03 	mvn.w	sl, #3
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80056ba:	69e3      	ldr	r3, [r4, #28]
    conn->current_msg->err = err;
    conn->current_msg = NULL;
 80056bc:	2500      	movs	r5, #0
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80056be:	6818      	ldr	r0, [r3, #0]
    conn->current_msg->err = err;
 80056c0:	f883 a004 	strb.w	sl, [r3, #4]
    conn->current_msg = NULL;
 80056c4:	61e5      	str	r5, [r4, #28]
    conn->state = NETCONN_NONE;
 80056c6:	7065      	strb	r5, [r4, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80056c8:	2f00      	cmp	r7, #0
 80056ca:	d07e      	beq.n	80057ca <lwip_netconn_do_writemore+0x22a>
#endif
    {
      sys_sem_signal(op_completed_sem);
 80056cc:	300c      	adds	r0, #12
 80056ce:	f008 f95c 	bl	800d98a <sys_sem_signal>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 80056d2:	4628      	mov	r0, r5
 80056d4:	e06b      	b.n	80057ae <lwip_netconn_do_writemore+0x20e>
          apiflags |= TCP_WRITE_FLAG_MORE;
 80056d6:	f048 0802 	orr.w	r8, r8, #2
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 80056da:	442b      	add	r3, r5
 80056dc:	4298      	cmp	r0, r3
 80056de:	d206      	bcs.n	80056ee <lwip_netconn_do_writemore+0x14e>
 80056e0:	4b3b      	ldr	r3, [pc, #236]	; (80057d0 <lwip_netconn_do_writemore+0x230>)
 80056e2:	f240 62a3 	movw	r2, #1699	; 0x6a3
 80056e6:	4942      	ldr	r1, [pc, #264]	; (80057f0 <lwip_netconn_do_writemore+0x250>)
 80056e8:	4658      	mov	r0, fp
 80056ea:	f008 fa25 	bl	800db38 <iprintf>
      if ((len == 0xffff && diff > 0xffffUL) ||
 80056ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80056f2:	429d      	cmp	r5, r3
 80056f4:	d102      	bne.n	80056fc <lwip_netconn_do_writemore+0x15c>
 80056f6:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
 80056fa:	d207      	bcs.n	800570c <lwip_netconn_do_writemore+0x16c>
 80056fc:	fa1f f989 	uxth.w	r9, r9
 8005700:	45a9      	cmp	r9, r5
 8005702:	d129      	bne.n	8005758 <lwip_netconn_do_writemore+0x1b8>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8005704:	69e3      	ldr	r3, [r4, #28]
 8005706:	899b      	ldrh	r3, [r3, #12]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d925      	bls.n	8005758 <lwip_netconn_do_writemore+0x1b8>
        apiflags |= TCP_WRITE_FLAG_MORE;
 800570c:	f048 0802 	orr.w	r8, r8, #2
        write_more = 1;
 8005710:	f04f 0901 	mov.w	r9, #1
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8005714:	4651      	mov	r1, sl
 8005716:	4643      	mov	r3, r8
 8005718:	462a      	mov	r2, r5
 800571a:	6860      	ldr	r0, [r4, #4]
 800571c:	f006 fca0 	bl	800c060 <tcp_write>
      if (err == ERR_OK) {
 8005720:	4682      	mov	sl, r0
 8005722:	b9e0      	cbnz	r0, 800575e <lwip_netconn_do_writemore+0x1be>
        conn->current_msg->msg.w.offset += len;
 8005724:	69e3      	ldr	r3, [r4, #28]
 8005726:	699a      	ldr	r2, [r3, #24]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8005728:	6899      	ldr	r1, [r3, #8]
        conn->current_msg->msg.w.offset += len;
 800572a:	442a      	add	r2, r5
 800572c:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800572e:	691a      	ldr	r2, [r3, #16]
 8005730:	4415      	add	r5, r2
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8005732:	684a      	ldr	r2, [r1, #4]
 8005734:	4295      	cmp	r5, r2
        conn->current_msg->msg.w.vector_off += len;
 8005736:	611d      	str	r5, [r3, #16]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8005738:	d107      	bne.n	800574a <lwip_netconn_do_writemore+0x1aa>
          conn->current_msg->msg.w.vector_cnt--;
 800573a:	899a      	ldrh	r2, [r3, #12]
 800573c:	3a01      	subs	r2, #1
 800573e:	b292      	uxth	r2, r2
 8005740:	819a      	strh	r2, [r3, #12]
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8005742:	b112      	cbz	r2, 800574a <lwip_netconn_do_writemore+0x1aa>
            conn->current_msg->msg.w.vector++;
 8005744:	3108      	adds	r1, #8
            conn->current_msg->msg.w.vector_off = 0;
 8005746:	6118      	str	r0, [r3, #16]
            conn->current_msg->msg.w.vector++;
 8005748:	6099      	str	r1, [r3, #8]
    } while (write_more && err == ERR_OK);
 800574a:	f1b9 0f00 	cmp.w	r9, #0
 800574e:	f47f af70 	bne.w	8005632 <lwip_netconn_do_writemore+0x92>
 8005752:	e00a      	b.n	800576a <lwip_netconn_do_writemore+0x1ca>
 8005754:	4615      	mov	r5, r2
 8005756:	e7c0      	b.n	80056da <lwip_netconn_do_writemore+0x13a>
        write_more = 0;
 8005758:	f04f 0900 	mov.w	r9, #0
 800575c:	e7da      	b.n	8005714 <lwip_netconn_do_writemore+0x174>
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800575e:	1c43      	adds	r3, r0, #1
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b01      	cmp	r3, #1
 8005764:	d8a9      	bhi.n	80056ba <lwip_netconn_do_writemore+0x11a>
err_mem:
 8005766:	f04f 3aff 	mov.w	sl, #4294967295
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800576a:	2e00      	cmp	r6, #0
 800576c:	d183      	bne.n	8005676 <lwip_netconn_do_writemore+0xd6>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800576e:	6863      	ldr	r3, [r4, #4]
 8005770:	f640 3269 	movw	r2, #2921	; 0xb69
 8005774:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
 8005778:	4291      	cmp	r1, r2
 800577a:	d903      	bls.n	8005784 <lwip_netconn_do_writemore+0x1e4>
 800577c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8005780:	2b04      	cmp	r3, #4
 8005782:	d987      	bls.n	8005694 <lwip_netconn_do_writemore+0xf4>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8005784:	6a23      	ldr	r3, [r4, #32]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d084      	beq.n	8005694 <lwip_netconn_do_writemore+0xf4>
 800578a:	2200      	movs	r2, #0
 800578c:	2103      	movs	r1, #3
 800578e:	4620      	mov	r0, r4
 8005790:	4798      	blx	r3
 8005792:	e77f      	b.n	8005694 <lwip_netconn_do_writemore+0xf4>
        write_finished = 1;
 8005794:	2601      	movs	r6, #1
 8005796:	e788      	b.n	80056aa <lwip_netconn_do_writemore+0x10a>
    } else if (err == ERR_MEM) {
 8005798:	f1ba 3fff 	cmp.w	sl, #4294967295
 800579c:	d18d      	bne.n	80056ba <lwip_netconn_do_writemore+0x11a>
      err_t out_err = tcp_output(conn->pcb.tcp);
 800579e:	6860      	ldr	r0, [r4, #4]
 80057a0:	f007 f9be 	bl	800cb20 <tcp_output>
      if (out_err == ERR_RTE) {
 80057a4:	3004      	adds	r0, #4
 80057a6:	d086      	beq.n	80056b6 <lwip_netconn_do_writemore+0x116>
      } else if (dontblock) {
 80057a8:	b91e      	cbnz	r6, 80057b2 <lwip_netconn_do_writemore+0x212>
    return ERR_MEM;
 80057aa:	f04f 30ff 	mov.w	r0, #4294967295
}
 80057ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80057b2:	69e3      	ldr	r3, [r4, #28]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	b12b      	cbz	r3, 80057c4 <lwip_netconn_do_writemore+0x224>
 80057b8:	f04f 0a00 	mov.w	sl, #0
 80057bc:	e77d      	b.n	80056ba <lwip_netconn_do_writemore+0x11a>
  if (write_finished) {
 80057be:	2e00      	cmp	r6, #0
 80057c0:	d1fa      	bne.n	80057b8 <lwip_netconn_do_writemore+0x218>
 80057c2:	e7f2      	b.n	80057aa <lwip_netconn_do_writemore+0x20a>
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80057c4:	f06f 0a06 	mvn.w	sl, #6
 80057c8:	e777      	b.n	80056ba <lwip_netconn_do_writemore+0x11a>
  return ERR_OK;
 80057ca:	4638      	mov	r0, r7
 80057cc:	e7ef      	b.n	80057ae <lwip_netconn_do_writemore+0x20e>
 80057ce:	bf00      	nop
 80057d0:	0801fdb8 	.word	0x0801fdb8
 80057d4:	0801fef3 	.word	0x0801fef3
 80057d8:	0801f8bf 	.word	0x0801f8bf
 80057dc:	0801ff00 	.word	0x0801ff00
 80057e0:	0801ff1d 	.word	0x0801ff1d
 80057e4:	0801ff37 	.word	0x0801ff37
 80057e8:	0801ff4d 	.word	0x0801ff4d
 80057ec:	0801ff8c 	.word	0x0801ff8c
 80057f0:	0801ffb4 	.word	0x0801ffb4

080057f4 <lwip_netconn_do_close_internal>:
{
 80057f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f8:	4689      	mov	r9, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 80057fa:	4604      	mov	r4, r0
 80057fc:	b930      	cbnz	r0, 800580c <lwip_netconn_do_close_internal+0x18>
 80057fe:	4b6c      	ldr	r3, [pc, #432]	; (80059b0 <lwip_netconn_do_close_internal+0x1bc>)
 8005800:	f240 32a2 	movw	r2, #930	; 0x3a2
 8005804:	496b      	ldr	r1, [pc, #428]	; (80059b4 <lwip_netconn_do_close_internal+0x1c0>)
 8005806:	486c      	ldr	r0, [pc, #432]	; (80059b8 <lwip_netconn_do_close_internal+0x1c4>)
 8005808:	f008 f996 	bl	800db38 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800580c:	7823      	ldrb	r3, [r4, #0]
 800580e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005812:	2b10      	cmp	r3, #16
 8005814:	d006      	beq.n	8005824 <lwip_netconn_do_close_internal+0x30>
 8005816:	4b66      	ldr	r3, [pc, #408]	; (80059b0 <lwip_netconn_do_close_internal+0x1bc>)
 8005818:	f240 32a3 	movw	r2, #931	; 0x3a3
 800581c:	4967      	ldr	r1, [pc, #412]	; (80059bc <lwip_netconn_do_close_internal+0x1c8>)
 800581e:	4866      	ldr	r0, [pc, #408]	; (80059b8 <lwip_netconn_do_close_internal+0x1c4>)
 8005820:	f008 f98a 	bl	800db38 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8005824:	7863      	ldrb	r3, [r4, #1]
 8005826:	2b04      	cmp	r3, #4
 8005828:	d006      	beq.n	8005838 <lwip_netconn_do_close_internal+0x44>
 800582a:	4b61      	ldr	r3, [pc, #388]	; (80059b0 <lwip_netconn_do_close_internal+0x1bc>)
 800582c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8005830:	4963      	ldr	r1, [pc, #396]	; (80059c0 <lwip_netconn_do_close_internal+0x1cc>)
 8005832:	4861      	ldr	r0, [pc, #388]	; (80059b8 <lwip_netconn_do_close_internal+0x1c4>)
 8005834:	f008 f980 	bl	800db38 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8005838:	6863      	ldr	r3, [r4, #4]
 800583a:	b933      	cbnz	r3, 800584a <lwip_netconn_do_close_internal+0x56>
 800583c:	4b5c      	ldr	r3, [pc, #368]	; (80059b0 <lwip_netconn_do_close_internal+0x1bc>)
 800583e:	f240 32a5 	movw	r2, #933	; 0x3a5
 8005842:	4960      	ldr	r1, [pc, #384]	; (80059c4 <lwip_netconn_do_close_internal+0x1d0>)
 8005844:	485c      	ldr	r0, [pc, #368]	; (80059b8 <lwip_netconn_do_close_internal+0x1c4>)
 8005846:	f008 f977 	bl	800db38 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800584a:	69e3      	ldr	r3, [r4, #28]
 800584c:	b933      	cbnz	r3, 800585c <lwip_netconn_do_close_internal+0x68>
 800584e:	4b58      	ldr	r3, [pc, #352]	; (80059b0 <lwip_netconn_do_close_internal+0x1bc>)
 8005850:	f240 32a6 	movw	r2, #934	; 0x3a6
 8005854:	495c      	ldr	r1, [pc, #368]	; (80059c8 <lwip_netconn_do_close_internal+0x1d4>)
 8005856:	4858      	ldr	r0, [pc, #352]	; (80059b8 <lwip_netconn_do_close_internal+0x1c4>)
 8005858:	f008 f96e 	bl	800db38 <iprintf>
  shut = conn->current_msg->msg.sd.shut;
 800585c:	69e3      	ldr	r3, [r4, #28]
  tpcb = conn->pcb.tcp;
 800585e:	6865      	ldr	r5, [r4, #4]
  shut = conn->current_msg->msg.sd.shut;
 8005860:	7a1b      	ldrb	r3, [r3, #8]
  if (shut == NETCONN_SHUT_RDWR) {
 8005862:	2b03      	cmp	r3, #3
  shut_rx = shut & NETCONN_SHUT_RD;
 8005864:	f003 0a01 	and.w	sl, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 8005868:	f003 0802 	and.w	r8, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 800586c:	d00f      	beq.n	800588e <lwip_netconn_do_close_internal+0x9a>
  } else if (shut_rx &&
 800586e:	f1ba 0f00 	cmp.w	sl, #0
 8005872:	d005      	beq.n	8005880 <lwip_netconn_do_close_internal+0x8c>
             ((tpcb->state == FIN_WAIT_1) ||
 8005874:	7d2b      	ldrb	r3, [r5, #20]
  } else if (shut_rx &&
 8005876:	1f5a      	subs	r2, r3, #5
 8005878:	2a01      	cmp	r2, #1
 800587a:	d908      	bls.n	800588e <lwip_netconn_do_close_internal+0x9a>
              (tpcb->state == FIN_WAIT_2) ||
 800587c:	2b08      	cmp	r3, #8
 800587e:	d006      	beq.n	800588e <lwip_netconn_do_close_internal+0x9a>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8005880:	f1b8 0f00 	cmp.w	r8, #0
 8005884:	d016      	beq.n	80058b4 <lwip_netconn_do_close_internal+0xc0>
 8005886:	8b6f      	ldrh	r7, [r5, #26]
 8005888:	f017 0710 	ands.w	r7, r7, #16
 800588c:	d004      	beq.n	8005898 <lwip_netconn_do_close_internal+0xa4>
    tcp_arg(tpcb, NULL);
 800588e:	2701      	movs	r7, #1
 8005890:	2100      	movs	r1, #0
 8005892:	4628      	mov	r0, r5
 8005894:	f004 fbb4 	bl	800a000 <tcp_arg>
  if (tpcb->state == LISTEN) {
 8005898:	7d2b      	ldrb	r3, [r5, #20]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d10c      	bne.n	80058b8 <lwip_netconn_do_close_internal+0xc4>
    tcp_accept(tpcb, NULL);
 800589e:	2100      	movs	r1, #0
 80058a0:	4628      	mov	r0, r5
 80058a2:	f004 fbf7 	bl	800a094 <tcp_accept>
  if (shut_close) {
 80058a6:	bb27      	cbnz	r7, 80058f2 <lwip_netconn_do_close_internal+0xfe>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80058a8:	4642      	mov	r2, r8
 80058aa:	4651      	mov	r1, sl
 80058ac:	4628      	mov	r0, r5
 80058ae:	f005 f83b 	bl	800a928 <tcp_shutdown>
 80058b2:	e021      	b.n	80058f8 <lwip_netconn_do_close_internal+0x104>
    shut_close = 0;
 80058b4:	4647      	mov	r7, r8
 80058b6:	e7ef      	b.n	8005898 <lwip_netconn_do_close_internal+0xa4>
    if (shut_rx) {
 80058b8:	f1ba 0f00 	cmp.w	sl, #0
 80058bc:	d007      	beq.n	80058ce <lwip_netconn_do_close_internal+0xda>
      tcp_recv(tpcb, NULL);
 80058be:	2100      	movs	r1, #0
 80058c0:	4628      	mov	r0, r5
 80058c2:	f004 fba1 	bl	800a008 <tcp_recv>
      tcp_accept(tpcb, NULL);
 80058c6:	2100      	movs	r1, #0
 80058c8:	4628      	mov	r0, r5
 80058ca:	f004 fbe3 	bl	800a094 <tcp_accept>
    if (shut_tx) {
 80058ce:	f1b8 0f00 	cmp.w	r8, #0
 80058d2:	d003      	beq.n	80058dc <lwip_netconn_do_close_internal+0xe8>
      tcp_sent(tpcb, NULL);
 80058d4:	2100      	movs	r1, #0
 80058d6:	4628      	mov	r0, r5
 80058d8:	f004 fbae 	bl	800a038 <tcp_sent>
    if (shut_close) {
 80058dc:	2f00      	cmp	r7, #0
 80058de:	d0e3      	beq.n	80058a8 <lwip_netconn_do_close_internal+0xb4>
      tcp_poll(tpcb, NULL, 0);
 80058e0:	2200      	movs	r2, #0
 80058e2:	4628      	mov	r0, r5
 80058e4:	4611      	mov	r1, r2
 80058e6:	f004 fbdb 	bl	800a0a0 <tcp_poll>
      tcp_err(tpcb, NULL);
 80058ea:	2100      	movs	r1, #0
 80058ec:	4628      	mov	r0, r5
 80058ee:	f004 fbb9 	bl	800a064 <tcp_err>
      err = tcp_close(tpcb);
 80058f2:	4628      	mov	r0, r5
 80058f4:	f004 ff3e 	bl	800a774 <tcp_close>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80058f8:	4606      	mov	r6, r0
  if (err == ERR_OK) {
 80058fa:	b160      	cbz	r0, 8005916 <lwip_netconn_do_close_internal+0x122>
    if (err == ERR_MEM) {
 80058fc:	1c43      	adds	r3, r0, #1
 80058fe:	d10a      	bne.n	8005916 <lwip_netconn_do_close_internal+0x122>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8005900:	69e3      	ldr	r3, [r4, #28]
 8005902:	f893 b009 	ldrb.w	fp, [r3, #9]
 8005906:	f1bb 0f00 	cmp.w	fp, #0
 800590a:	d130      	bne.n	800596e <lwip_netconn_do_close_internal+0x17a>
        if (shut_close) {
 800590c:	b11f      	cbz	r7, 8005916 <lwip_netconn_do_close_internal+0x122>
          err = ERR_OK;
 800590e:	465e      	mov	r6, fp
          tcp_abort(tpcb);
 8005910:	4628      	mov	r0, r5
 8005912:	f005 f8bf 	bl	800aa94 <tcp_abort>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8005916:	69e3      	ldr	r3, [r4, #28]
 8005918:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 800591a:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 800591c:	2300      	movs	r3, #0
 800591e:	61e3      	str	r3, [r4, #28]
    conn->state = NETCONN_NONE;
 8005920:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 8005922:	b9ce      	cbnz	r6, 8005958 <lwip_netconn_do_close_internal+0x164>
      if (shut_close) {
 8005924:	b137      	cbz	r7, 8005934 <lwip_netconn_do_close_internal+0x140>
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8005926:	6a23      	ldr	r3, [r4, #32]
        conn->pcb.tcp = NULL;
 8005928:	6066      	str	r6, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800592a:	b11b      	cbz	r3, 8005934 <lwip_netconn_do_close_internal+0x140>
 800592c:	4632      	mov	r2, r6
 800592e:	2104      	movs	r1, #4
 8005930:	4620      	mov	r0, r4
 8005932:	4798      	blx	r3
      if (shut_rx) {
 8005934:	f1ba 0f00 	cmp.w	sl, #0
 8005938:	d005      	beq.n	8005946 <lwip_netconn_do_close_internal+0x152>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800593a:	6a23      	ldr	r3, [r4, #32]
 800593c:	b11b      	cbz	r3, 8005946 <lwip_netconn_do_close_internal+0x152>
 800593e:	2200      	movs	r2, #0
 8005940:	4620      	mov	r0, r4
 8005942:	4611      	mov	r1, r2
 8005944:	4798      	blx	r3
      if (shut_tx) {
 8005946:	f1b8 0f00 	cmp.w	r8, #0
 800594a:	d005      	beq.n	8005958 <lwip_netconn_do_close_internal+0x164>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800594c:	6a23      	ldr	r3, [r4, #32]
 800594e:	b11b      	cbz	r3, 8005958 <lwip_netconn_do_close_internal+0x164>
 8005950:	2200      	movs	r2, #0
 8005952:	2102      	movs	r1, #2
 8005954:	4620      	mov	r0, r4
 8005956:	4798      	blx	r3
    if (delayed)
 8005958:	f1b9 0f00 	cmp.w	r9, #0
 800595c:	d026      	beq.n	80059ac <lwip_netconn_do_close_internal+0x1b8>
    return ERR_OK;
 800595e:	2600      	movs	r6, #0
      sys_sem_signal(op_completed_sem);
 8005960:	f105 000c 	add.w	r0, r5, #12
 8005964:	f008 f811 	bl	800d98a <sys_sem_signal>
}
 8005968:	4630      	mov	r0, r6
 800596a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800596e:	7d2b      	ldrb	r3, [r5, #20]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d106      	bne.n	8005982 <lwip_netconn_do_close_internal+0x18e>
 8005974:	4b0e      	ldr	r3, [pc, #56]	; (80059b0 <lwip_netconn_do_close_internal+0x1bc>)
 8005976:	f240 4241 	movw	r2, #1089	; 0x441
 800597a:	4914      	ldr	r1, [pc, #80]	; (80059cc <lwip_netconn_do_close_internal+0x1d8>)
 800597c:	480e      	ldr	r0, [pc, #56]	; (80059b8 <lwip_netconn_do_close_internal+0x1c4>)
 800597e:	f008 f8db 	bl	800db38 <iprintf>
    if (shut_tx) {
 8005982:	f1b8 0f00 	cmp.w	r8, #0
 8005986:	d003      	beq.n	8005990 <lwip_netconn_do_close_internal+0x19c>
      tcp_sent(tpcb, sent_tcp);
 8005988:	4911      	ldr	r1, [pc, #68]	; (80059d0 <lwip_netconn_do_close_internal+0x1dc>)
 800598a:	4628      	mov	r0, r5
 800598c:	f004 fb54 	bl	800a038 <tcp_sent>
    tcp_poll(tpcb, poll_tcp, 1);
 8005990:	2201      	movs	r2, #1
 8005992:	4628      	mov	r0, r5
 8005994:	490f      	ldr	r1, [pc, #60]	; (80059d4 <lwip_netconn_do_close_internal+0x1e0>)
 8005996:	f004 fb83 	bl	800a0a0 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800599a:	4628      	mov	r0, r5
 800599c:	490e      	ldr	r1, [pc, #56]	; (80059d8 <lwip_netconn_do_close_internal+0x1e4>)
 800599e:	f004 fb61 	bl	800a064 <tcp_err>
    tcp_arg(tpcb, conn);
 80059a2:	4621      	mov	r1, r4
 80059a4:	4628      	mov	r0, r5
 80059a6:	f004 fb2b 	bl	800a000 <tcp_arg>
  return err;
 80059aa:	e7dd      	b.n	8005968 <lwip_netconn_do_close_internal+0x174>
    return ERR_OK;
 80059ac:	464e      	mov	r6, r9
 80059ae:	e7db      	b.n	8005968 <lwip_netconn_do_close_internal+0x174>
 80059b0:	0801fdb8 	.word	0x0801fdb8
 80059b4:	0801fc9e 	.word	0x0801fc9e
 80059b8:	0801f8bf 	.word	0x0801f8bf
 80059bc:	0801ffdf 	.word	0x0801ffdf
 80059c0:	0801fffd 	.word	0x0801fffd
 80059c4:	08020021 	.word	0x08020021
 80059c8:	0801ff1d 	.word	0x0801ff1d
 80059cc:	08020034 	.word	0x08020034
 80059d0:	08005c69 	.word	0x08005c69
 80059d4:	080059dd 	.word	0x080059dd
 80059d8:	08005b29 	.word	0x08005b29

080059dc <poll_tcp>:
{
 80059dc:	b510      	push	{r4, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80059de:	4604      	mov	r4, r0
 80059e0:	b930      	cbnz	r0, 80059f0 <poll_tcp+0x14>
 80059e2:	4b1a      	ldr	r3, [pc, #104]	; (8005a4c <poll_tcp+0x70>)
 80059e4:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 80059e8:	4919      	ldr	r1, [pc, #100]	; (8005a50 <poll_tcp+0x74>)
 80059ea:	481a      	ldr	r0, [pc, #104]	; (8005a54 <poll_tcp+0x78>)
 80059ec:	f008 f8a4 	bl	800db38 <iprintf>
  if (conn->state == NETCONN_WRITE) {
 80059f0:	7861      	ldrb	r1, [r4, #1]
 80059f2:	2901      	cmp	r1, #1
 80059f4:	d11c      	bne.n	8005a30 <poll_tcp+0x54>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80059f6:	4620      	mov	r0, r4
 80059f8:	f7ff fdd2 	bl	80055a0 <lwip_netconn_do_writemore>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80059fc:	7e23      	ldrb	r3, [r4, #24]
 80059fe:	06da      	lsls	r2, r3, #27
 8005a00:	d514      	bpl.n	8005a2c <poll_tcp+0x50>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8005a02:	6862      	ldr	r2, [r4, #4]
 8005a04:	b192      	cbz	r2, 8005a2c <poll_tcp+0x50>
 8005a06:	f8b2 0064 	ldrh.w	r0, [r2, #100]	; 0x64
 8005a0a:	f640 3169 	movw	r1, #2921	; 0xb69
 8005a0e:	4288      	cmp	r0, r1
 8005a10:	d90c      	bls.n	8005a2c <poll_tcp+0x50>
 8005a12:	f8b2 2066 	ldrh.w	r2, [r2, #102]	; 0x66
 8005a16:	2a04      	cmp	r2, #4
 8005a18:	d808      	bhi.n	8005a2c <poll_tcp+0x50>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8005a1a:	f023 0310 	bic.w	r3, r3, #16
 8005a1e:	7623      	strb	r3, [r4, #24]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8005a20:	6a23      	ldr	r3, [r4, #32]
 8005a22:	b11b      	cbz	r3, 8005a2c <poll_tcp+0x50>
 8005a24:	2200      	movs	r2, #0
 8005a26:	2102      	movs	r1, #2
 8005a28:	4620      	mov	r0, r4
 8005a2a:	4798      	blx	r3
}
 8005a2c:	2000      	movs	r0, #0
 8005a2e:	bd10      	pop	{r4, pc}
  } else if (conn->state == NETCONN_CLOSE) {
 8005a30:	2904      	cmp	r1, #4
 8005a32:	d1e3      	bne.n	80059fc <poll_tcp+0x20>
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8005a34:	69e2      	ldr	r2, [r4, #28]
 8005a36:	b11a      	cbz	r2, 8005a40 <poll_tcp+0x64>
 8005a38:	7a53      	ldrb	r3, [r2, #9]
 8005a3a:	b10b      	cbz	r3, 8005a40 <poll_tcp+0x64>
      conn->current_msg->msg.sd.polls_left--;
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	7253      	strb	r3, [r2, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8005a40:	2101      	movs	r1, #1
 8005a42:	4620      	mov	r0, r4
 8005a44:	f7ff fed6 	bl	80057f4 <lwip_netconn_do_close_internal>
 8005a48:	e7d8      	b.n	80059fc <poll_tcp+0x20>
 8005a4a:	bf00      	nop
 8005a4c:	0801fdb8 	.word	0x0801fdb8
 8005a50:	0801fef3 	.word	0x0801fef3
 8005a54:	0801f8bf 	.word	0x0801f8bf

08005a58 <recv_tcp>:
{
 8005a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a5c:	4606      	mov	r6, r0
 8005a5e:	4615      	mov	r5, r2
 8005a60:	461c      	mov	r4, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8005a62:	460f      	mov	r7, r1
 8005a64:	b931      	cbnz	r1, 8005a74 <recv_tcp+0x1c>
 8005a66:	4b29      	ldr	r3, [pc, #164]	; (8005b0c <recv_tcp+0xb4>)
 8005a68:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005a6c:	4928      	ldr	r1, [pc, #160]	; (8005b10 <recv_tcp+0xb8>)
 8005a6e:	4829      	ldr	r0, [pc, #164]	; (8005b14 <recv_tcp+0xbc>)
 8005a70:	f008 f862 	bl	800db38 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8005a74:	bb4e      	cbnz	r6, 8005aca <recv_tcp+0x72>
 8005a76:	4b25      	ldr	r3, [pc, #148]	; (8005b0c <recv_tcp+0xb4>)
 8005a78:	f240 122d 	movw	r2, #301	; 0x12d
 8005a7c:	4926      	ldr	r1, [pc, #152]	; (8005b18 <recv_tcp+0xc0>)
 8005a7e:	4825      	ldr	r0, [pc, #148]	; (8005b14 <recv_tcp+0xbc>)
 8005a80:	f008 f85a 	bl	800db38 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8005a84:	bb14      	cbnz	r4, 8005acc <recv_tcp+0x74>
    return ERR_VAL;
 8005a86:	f06f 0405 	mvn.w	r4, #5
}
 8005a8a:	4620      	mov	r0, r4
 8005a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tcp_recved(pcb, p->tot_len);
 8005a90:	4638      	mov	r0, r7
 8005a92:	8929      	ldrh	r1, [r5, #8]
 8005a94:	f004 fa60 	bl	8009f58 <tcp_recved>
      pbuf_free(p);
 8005a98:	4628      	mov	r0, r5
 8005a9a:	f003 fe67 	bl	800976c <pbuf_free>
 8005a9e:	e7f4      	b.n	8005a8a <recv_tcp+0x32>
  if (p != NULL) {
 8005aa0:	b16d      	cbz	r5, 8005abe <recv_tcp+0x66>
    len = p->tot_len;
 8005aa2:	892f      	ldrh	r7, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8005aa4:	4629      	mov	r1, r5
 8005aa6:	4640      	mov	r0, r8
 8005aa8:	f007 fef8 	bl	800d89c <sys_mbox_trypost>
 8005aac:	4604      	mov	r4, r0
 8005aae:	b948      	cbnz	r0, 8005ac4 <recv_tcp+0x6c>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8005ab0:	6a33      	ldr	r3, [r6, #32]
 8005ab2:	b343      	cbz	r3, 8005b06 <recv_tcp+0xae>
 8005ab4:	4601      	mov	r1, r0
 8005ab6:	463a      	mov	r2, r7
 8005ab8:	4630      	mov	r0, r6
 8005aba:	4798      	blx	r3
 8005abc:	e7e5      	b.n	8005a8a <recv_tcp+0x32>
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8005abe:	4d17      	ldr	r5, [pc, #92]	; (8005b1c <recv_tcp+0xc4>)
    len = 0;
 8005ac0:	2700      	movs	r7, #0
 8005ac2:	e7ef      	b.n	8005aa4 <recv_tcp+0x4c>
    return ERR_MEM;
 8005ac4:	f04f 34ff 	mov.w	r4, #4294967295
 8005ac8:	e7df      	b.n	8005a8a <recv_tcp+0x32>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8005aca:	b144      	cbz	r4, 8005ade <recv_tcp+0x86>
 8005acc:	4b0f      	ldr	r3, [pc, #60]	; (8005b0c <recv_tcp+0xb4>)
 8005ace:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8005ad2:	4913      	ldr	r1, [pc, #76]	; (8005b20 <recv_tcp+0xc8>)
 8005ad4:	480f      	ldr	r0, [pc, #60]	; (8005b14 <recv_tcp+0xbc>)
 8005ad6:	f008 f82f 	bl	800db38 <iprintf>
  if (conn == NULL) {
 8005ada:	2e00      	cmp	r6, #0
 8005adc:	d0d3      	beq.n	8005a86 <recv_tcp+0x2e>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8005ade:	6873      	ldr	r3, [r6, #4]
 8005ae0:	42bb      	cmp	r3, r7
 8005ae2:	d006      	beq.n	8005af2 <recv_tcp+0x9a>
 8005ae4:	4b09      	ldr	r3, [pc, #36]	; (8005b0c <recv_tcp+0xb4>)
 8005ae6:	f240 1235 	movw	r2, #309	; 0x135
 8005aea:	490e      	ldr	r1, [pc, #56]	; (8005b24 <recv_tcp+0xcc>)
 8005aec:	4809      	ldr	r0, [pc, #36]	; (8005b14 <recv_tcp+0xbc>)
 8005aee:	f008 f823 	bl	800db38 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8005af2:	f106 0810 	add.w	r8, r6, #16
 8005af6:	4640      	mov	r0, r8
 8005af8:	f007 ff0d 	bl	800d916 <sys_mbox_valid>
 8005afc:	4604      	mov	r4, r0
 8005afe:	2800      	cmp	r0, #0
 8005b00:	d1ce      	bne.n	8005aa0 <recv_tcp+0x48>
    if (p != NULL) {
 8005b02:	2d00      	cmp	r5, #0
 8005b04:	d1c4      	bne.n	8005a90 <recv_tcp+0x38>
    return ERR_OK;
 8005b06:	2400      	movs	r4, #0
 8005b08:	e7bf      	b.n	8005a8a <recv_tcp+0x32>
 8005b0a:	bf00      	nop
 8005b0c:	0801fdb8 	.word	0x0801fdb8
 8005b10:	08020057 	.word	0x08020057
 8005b14:	0801f8bf 	.word	0x0801f8bf
 8005b18:	08020079 	.word	0x08020079
 8005b1c:	0800f6c4 	.word	0x0800f6c4
 8005b20:	08020098 	.word	0x08020098
 8005b24:	080200b0 	.word	0x080200b0

08005b28 <err_tcp>:
{
 8005b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b2c:	460d      	mov	r5, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8005b2e:	4604      	mov	r4, r0
 8005b30:	b930      	cbnz	r0, 8005b40 <err_tcp+0x18>
 8005b32:	4b45      	ldr	r3, [pc, #276]	; (8005c48 <err_tcp+0x120>)
 8005b34:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8005b38:	4944      	ldr	r1, [pc, #272]	; (8005c4c <err_tcp+0x124>)
 8005b3a:	4845      	ldr	r0, [pc, #276]	; (8005c50 <err_tcp+0x128>)
 8005b3c:	f007 fffc 	bl	800db38 <iprintf>
  SYS_ARCH_PROTECT(lev);
 8005b40:	f007 ff64 	bl	800da0c <sys_arch_protect>
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8005b44:	7e23      	ldrb	r3, [r4, #24]
  conn->pcb.tcp = NULL;
 8005b46:	2600      	movs	r6, #0
  old_state = conn->state;
 8005b48:	7867      	ldrb	r7, [r4, #1]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8005b4a:	f043 0301 	orr.w	r3, r3, #1
  conn->pending_err = err;
 8005b4e:	7225      	strb	r5, [r4, #8]
  conn->pcb.tcp = NULL;
 8005b50:	6066      	str	r6, [r4, #4]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8005b52:	7623      	strb	r3, [r4, #24]
  conn->state = NETCONN_NONE;
 8005b54:	7066      	strb	r6, [r4, #1]
  SYS_ARCH_UNPROTECT(lev);
 8005b56:	f007 ff65 	bl	800da24 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8005b5a:	6a23      	ldr	r3, [r4, #32]
 8005b5c:	b11b      	cbz	r3, 8005b66 <err_tcp+0x3e>
 8005b5e:	4632      	mov	r2, r6
 8005b60:	2104      	movs	r1, #4
 8005b62:	4620      	mov	r0, r4
 8005b64:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8005b66:	6a23      	ldr	r3, [r4, #32]
 8005b68:	b11b      	cbz	r3, 8005b72 <err_tcp+0x4a>
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	4611      	mov	r1, r2
 8005b70:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8005b72:	6a23      	ldr	r3, [r4, #32]
 8005b74:	b11b      	cbz	r3, 8005b7e <err_tcp+0x56>
 8005b76:	2200      	movs	r2, #0
 8005b78:	2102      	movs	r1, #2
 8005b7a:	4620      	mov	r0, r4
 8005b7c:	4798      	blx	r3
  switch (err) {
 8005b7e:	f105 030f 	add.w	r3, r5, #15
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d846      	bhi.n	8005c16 <err_tcp+0xee>
 8005b88:	4a32      	ldr	r2, [pc, #200]	; (8005c54 <err_tcp+0x12c>)
 8005b8a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005b8e:	685e      	ldr	r6, [r3, #4]
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8005b90:	f104 0810 	add.w	r8, r4, #16
 8005b94:	4640      	mov	r0, r8
 8005b96:	f007 febe 	bl	800d916 <sys_mbox_valid>
 8005b9a:	b118      	cbz	r0, 8005ba4 <err_tcp+0x7c>
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8005b9c:	4631      	mov	r1, r6
 8005b9e:	4640      	mov	r0, r8
 8005ba0:	f007 fe7c 	bl	800d89c <sys_mbox_trypost>
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8005ba4:	f104 0814 	add.w	r8, r4, #20
 8005ba8:	4640      	mov	r0, r8
 8005baa:	f007 feb4 	bl	800d916 <sys_mbox_valid>
 8005bae:	b118      	cbz	r0, 8005bb8 <err_tcp+0x90>
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8005bb0:	4631      	mov	r1, r6
 8005bb2:	4640      	mov	r0, r8
 8005bb4:	f007 fe72 	bl	800d89c <sys_mbox_trypost>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8005bb8:	2f01      	cmp	r7, #1
 8005bba:	d002      	beq.n	8005bc2 <err_tcp+0x9a>
 8005bbc:	1efb      	subs	r3, r7, #3
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d834      	bhi.n	8005c2c <err_tcp+0x104>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8005bc2:	7e23      	ldrb	r3, [r4, #24]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8005bc4:	f023 0204 	bic.w	r2, r3, #4
    if (!was_nonblocking_connect) {
 8005bc8:	075b      	lsls	r3, r3, #29
    SET_NONBLOCKING_CONNECT(conn, 0);
 8005bca:	7622      	strb	r2, [r4, #24]
    if (!was_nonblocking_connect) {
 8005bcc:	d439      	bmi.n	8005c42 <err_tcp+0x11a>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8005bce:	69e3      	ldr	r3, [r4, #28]
 8005bd0:	b933      	cbnz	r3, 8005be0 <err_tcp+0xb8>
 8005bd2:	4b1d      	ldr	r3, [pc, #116]	; (8005c48 <err_tcp+0x120>)
 8005bd4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8005bd8:	491f      	ldr	r1, [pc, #124]	; (8005c58 <err_tcp+0x130>)
 8005bda:	481d      	ldr	r0, [pc, #116]	; (8005c50 <err_tcp+0x128>)
 8005bdc:	f007 ffac 	bl	800db38 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8005be0:	2f04      	cmp	r7, #4
        conn->current_msg->err = ERR_OK;
 8005be2:	69e3      	ldr	r3, [r4, #28]
        conn->current_msg->err = err;
 8005be4:	bf14      	ite	ne
 8005be6:	711d      	strbne	r5, [r3, #4]
        conn->current_msg->err = ERR_OK;
 8005be8:	2200      	moveq	r2, #0
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8005bea:	681d      	ldr	r5, [r3, #0]
        conn->current_msg->err = ERR_OK;
 8005bec:	bf08      	it	eq
 8005bee:	711a      	strbeq	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8005bf0:	350c      	adds	r5, #12
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8005bf2:	4628      	mov	r0, r5
 8005bf4:	f007 fecf 	bl	800d996 <sys_sem_valid>
 8005bf8:	b930      	cbnz	r0, 8005c08 <err_tcp+0xe0>
 8005bfa:	4b13      	ldr	r3, [pc, #76]	; (8005c48 <err_tcp+0x120>)
 8005bfc:	f240 12ef 	movw	r2, #495	; 0x1ef
 8005c00:	4916      	ldr	r1, [pc, #88]	; (8005c5c <err_tcp+0x134>)
 8005c02:	4813      	ldr	r0, [pc, #76]	; (8005c50 <err_tcp+0x128>)
 8005c04:	f007 ff98 	bl	800db38 <iprintf>
      conn->current_msg = NULL;
 8005c08:	2300      	movs	r3, #0
      sys_sem_signal(op_completed_sem);
 8005c0a:	4628      	mov	r0, r5
      conn->current_msg = NULL;
 8005c0c:	61e3      	str	r3, [r4, #28]
}
 8005c0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      sys_sem_signal(op_completed_sem);
 8005c12:	f007 beba 	b.w	800d98a <sys_sem_signal>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8005c16:	b13d      	cbz	r5, 8005c28 <err_tcp+0x100>
 8005c18:	4b0b      	ldr	r3, [pc, #44]	; (8005c48 <err_tcp+0x120>)
 8005c1a:	227d      	movs	r2, #125	; 0x7d
 8005c1c:	4910      	ldr	r1, [pc, #64]	; (8005c60 <err_tcp+0x138>)
 8005c1e:	2600      	movs	r6, #0
 8005c20:	480b      	ldr	r0, [pc, #44]	; (8005c50 <err_tcp+0x128>)
 8005c22:	f007 ff89 	bl	800db38 <iprintf>
 8005c26:	e7b3      	b.n	8005b90 <err_tcp+0x68>
      return NULL;
 8005c28:	462e      	mov	r6, r5
 8005c2a:	e7b1      	b.n	8005b90 <err_tcp+0x68>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8005c2c:	69e3      	ldr	r3, [r4, #28]
 8005c2e:	b143      	cbz	r3, 8005c42 <err_tcp+0x11a>
 8005c30:	4b05      	ldr	r3, [pc, #20]	; (8005c48 <err_tcp+0x120>)
 8005c32:	f240 12f7 	movw	r2, #503	; 0x1f7
 8005c36:	490b      	ldr	r1, [pc, #44]	; (8005c64 <err_tcp+0x13c>)
 8005c38:	4805      	ldr	r0, [pc, #20]	; (8005c50 <err_tcp+0x128>)
}
 8005c3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8005c3e:	f007 bf7b 	b.w	800db38 <iprintf>
}
 8005c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c46:	bf00      	nop
 8005c48:	0801fdb8 	.word	0x0801fdb8
 8005c4c:	0801fef3 	.word	0x0801fef3
 8005c50:	0801f8bf 	.word	0x0801f8bf
 8005c54:	0800f6c4 	.word	0x0800f6c4
 8005c58:	0801ff1d 	.word	0x0801ff1d
 8005c5c:	080200de 	.word	0x080200de
 8005c60:	080200ce 	.word	0x080200ce
 8005c64:	080200f7 	.word	0x080200f7

08005c68 <sent_tcp>:
{
 8005c68:	b538      	push	{r3, r4, r5, lr}
 8005c6a:	4615      	mov	r5, r2
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8005c6c:	4604      	mov	r4, r0
 8005c6e:	b970      	cbnz	r0, 8005c8e <sent_tcp+0x26>
 8005c70:	4b16      	ldr	r3, [pc, #88]	; (8005ccc <sent_tcp+0x64>)
 8005c72:	f240 1293 	movw	r2, #403	; 0x193
 8005c76:	4916      	ldr	r1, [pc, #88]	; (8005cd0 <sent_tcp+0x68>)
 8005c78:	4816      	ldr	r0, [pc, #88]	; (8005cd4 <sent_tcp+0x6c>)
 8005c7a:	f007 ff5d 	bl	800db38 <iprintf>
}
 8005c7e:	2000      	movs	r0, #0
 8005c80:	bd38      	pop	{r3, r4, r5, pc}
    } else if (conn->state == NETCONN_CLOSE) {
 8005c82:	2904      	cmp	r1, #4
 8005c84:	d108      	bne.n	8005c98 <sent_tcp+0x30>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8005c86:	2101      	movs	r1, #1
 8005c88:	f7ff fdb4 	bl	80057f4 <lwip_netconn_do_close_internal>
 8005c8c:	e004      	b.n	8005c98 <sent_tcp+0x30>
    if (conn->state == NETCONN_WRITE) {
 8005c8e:	7841      	ldrb	r1, [r0, #1]
 8005c90:	2901      	cmp	r1, #1
 8005c92:	d1f6      	bne.n	8005c82 <sent_tcp+0x1a>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8005c94:	f7ff fc84 	bl	80055a0 <lwip_netconn_do_writemore>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8005c98:	6863      	ldr	r3, [r4, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d0ef      	beq.n	8005c7e <sent_tcp+0x16>
 8005c9e:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
 8005ca2:	f640 3269 	movw	r2, #2921	; 0xb69
 8005ca6:	4291      	cmp	r1, r2
 8005ca8:	d9e9      	bls.n	8005c7e <sent_tcp+0x16>
 8005caa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8005cae:	2b04      	cmp	r3, #4
 8005cb0:	d8e5      	bhi.n	8005c7e <sent_tcp+0x16>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8005cb2:	7e23      	ldrb	r3, [r4, #24]
 8005cb4:	f023 0310 	bic.w	r3, r3, #16
 8005cb8:	7623      	strb	r3, [r4, #24]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8005cba:	6a23      	ldr	r3, [r4, #32]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d0de      	beq.n	8005c7e <sent_tcp+0x16>
 8005cc0:	462a      	mov	r2, r5
 8005cc2:	2102      	movs	r1, #2
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	4798      	blx	r3
  return ERR_OK;
 8005cc8:	e7d9      	b.n	8005c7e <sent_tcp+0x16>
 8005cca:	bf00      	nop
 8005ccc:	0801fdb8 	.word	0x0801fdb8
 8005cd0:	0801fef3 	.word	0x0801fef3
 8005cd4:	0801f8bf 	.word	0x0801f8bf

08005cd8 <lwip_netconn_is_err_msg>:
{
 8005cd8:	b538      	push	{r3, r4, r5, lr}
 8005cda:	4605      	mov	r5, r0
  LWIP_ASSERT("err != NULL", err != NULL);
 8005cdc:	460c      	mov	r4, r1
 8005cde:	b929      	cbnz	r1, 8005cec <lwip_netconn_is_err_msg+0x14>
 8005ce0:	4b0d      	ldr	r3, [pc, #52]	; (8005d18 <lwip_netconn_is_err_msg+0x40>)
 8005ce2:	2285      	movs	r2, #133	; 0x85
 8005ce4:	490d      	ldr	r1, [pc, #52]	; (8005d1c <lwip_netconn_is_err_msg+0x44>)
 8005ce6:	480e      	ldr	r0, [pc, #56]	; (8005d20 <lwip_netconn_is_err_msg+0x48>)
 8005ce8:	f007 ff26 	bl	800db38 <iprintf>
  if (msg == &netconn_aborted) {
 8005cec:	4b0d      	ldr	r3, [pc, #52]	; (8005d24 <lwip_netconn_is_err_msg+0x4c>)
 8005cee:	f103 0210 	add.w	r2, r3, #16
 8005cf2:	4295      	cmp	r5, r2
 8005cf4:	d103      	bne.n	8005cfe <lwip_netconn_is_err_msg+0x26>
    *err = ERR_ABRT;
 8005cf6:	23f3      	movs	r3, #243	; 0xf3
    return 1;
 8005cf8:	2001      	movs	r0, #1
    *err = ERR_CLSD;
 8005cfa:	7023      	strb	r3, [r4, #0]
}
 8005cfc:	bd38      	pop	{r3, r4, r5, pc}
  } else if (msg == &netconn_reset) {
 8005cfe:	f103 0211 	add.w	r2, r3, #17
 8005d02:	4295      	cmp	r5, r2
 8005d04:	d101      	bne.n	8005d0a <lwip_netconn_is_err_msg+0x32>
    *err = ERR_RST;
 8005d06:	23f2      	movs	r3, #242	; 0xf2
 8005d08:	e7f6      	b.n	8005cf8 <lwip_netconn_is_err_msg+0x20>
  } else if (msg == &netconn_closed) {
 8005d0a:	429d      	cmp	r5, r3
 8005d0c:	d101      	bne.n	8005d12 <lwip_netconn_is_err_msg+0x3a>
    *err = ERR_CLSD;
 8005d0e:	23f1      	movs	r3, #241	; 0xf1
 8005d10:	e7f2      	b.n	8005cf8 <lwip_netconn_is_err_msg+0x20>
  return 0;
 8005d12:	2000      	movs	r0, #0
 8005d14:	e7f2      	b.n	8005cfc <lwip_netconn_is_err_msg+0x24>
 8005d16:	bf00      	nop
 8005d18:	0801fdb8 	.word	0x0801fdb8
 8005d1c:	08020111 	.word	0x08020111
 8005d20:	0801f8bf 	.word	0x0801f8bf
 8005d24:	0800f6c4 	.word	0x0800f6c4

08005d28 <lwip_netconn_do_newconn>:
{
 8005d28:	b538      	push	{r3, r4, r5, lr}
  msg->err = ERR_OK;
 8005d2a:	2300      	movs	r3, #0
  if (msg->conn->pcb.tcp == NULL) {
 8005d2c:	6805      	ldr	r5, [r0, #0]
{
 8005d2e:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 8005d30:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8005d32:	6868      	ldr	r0, [r5, #4]
 8005d34:	bb28      	cbnz	r0, 8005d82 <lwip_netconn_do_newconn+0x5a>
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8005d36:	782b      	ldrb	r3, [r5, #0]
 8005d38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d3c:	2b10      	cmp	r3, #16
 8005d3e:	d014      	beq.n	8005d6a <lwip_netconn_do_newconn+0x42>
 8005d40:	2b20      	cmp	r3, #32
 8005d42:	d11c      	bne.n	8005d7e <lwip_netconn_do_newconn+0x56>
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8005d44:	f007 fcf0 	bl	800d728 <udp_new_ip_type>
      if (msg->conn->pcb.udp != NULL) {
 8005d48:	6822      	ldr	r2, [r4, #0]
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8005d4a:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.udp != NULL) {
 8005d4c:	6850      	ldr	r0, [r2, #4]
 8005d4e:	b150      	cbz	r0, 8005d66 <lwip_netconn_do_newconn+0x3e>
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8005d50:	7813      	ldrb	r3, [r2, #0]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8005d52:	490c      	ldr	r1, [pc, #48]	; (8005d84 <lwip_netconn_do_newconn+0x5c>)
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8005d54:	2b22      	cmp	r3, #34	; 0x22
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8005d56:	bf04      	itt	eq
 8005d58:	2301      	moveq	r3, #1
 8005d5a:	7403      	strbeq	r3, [r0, #16]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8005d5c:	f007 fc9e 	bl	800d69c <udp_recv>
  if (msg->conn->pcb.ip == NULL) {
 8005d60:	6823      	ldr	r3, [r4, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	b96b      	cbnz	r3, 8005d82 <lwip_netconn_do_newconn+0x5a>
    msg->err = ERR_MEM;
 8005d66:	23ff      	movs	r3, #255	; 0xff
 8005d68:	e00a      	b.n	8005d80 <lwip_netconn_do_newconn+0x58>
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8005d6a:	f004 ff83 	bl	800ac74 <tcp_new_ip_type>
 8005d6e:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8005d70:	6820      	ldr	r0, [r4, #0]
 8005d72:	6843      	ldr	r3, [r0, #4]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d0f6      	beq.n	8005d66 <lwip_netconn_do_newconn+0x3e>
        setup_tcp(msg->conn);
 8005d78:	f7ff fbf0 	bl	800555c <setup_tcp>
 8005d7c:	e7f0      	b.n	8005d60 <lwip_netconn_do_newconn+0x38>
      msg->err = ERR_VAL;
 8005d7e:	23fa      	movs	r3, #250	; 0xfa
    msg->err = ERR_MEM;
 8005d80:	7123      	strb	r3, [r4, #4]
}
 8005d82:	bd38      	pop	{r3, r4, r5, pc}
 8005d84:	080054a1 	.word	0x080054a1

08005d88 <netconn_alloc>:
{
 8005d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d8a:	4605      	mov	r5, r0
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8005d8c:	2007      	movs	r0, #7
{
 8005d8e:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8005d90:	f003 fa4c 	bl	800922c <memp_malloc>
  if (conn == NULL) {
 8005d94:	4604      	mov	r4, r0
 8005d96:	b388      	cbz	r0, 8005dfc <netconn_alloc+0x74>
  conn->type = t;
 8005d98:	7005      	strb	r5, [r0, #0]
 8005d9a:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
  conn->pending_err = ERR_OK;
 8005d9e:	2300      	movs	r3, #0
  switch (NETCONNTYPE_GROUP(t)) {
 8005da0:	2d10      	cmp	r5, #16
  conn->pending_err = ERR_OK;
 8005da2:	7203      	strb	r3, [r0, #8]
  conn->pcb.tcp = NULL;
 8005da4:	6043      	str	r3, [r0, #4]
  switch (NETCONNTYPE_GROUP(t)) {
 8005da6:	d00e      	beq.n	8005dc6 <netconn_alloc+0x3e>
 8005da8:	2d20      	cmp	r5, #32
 8005daa:	d00c      	beq.n	8005dc6 <netconn_alloc+0x3e>
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8005dac:	4b14      	ldr	r3, [pc, #80]	; (8005e00 <netconn_alloc+0x78>)
 8005dae:	f240 22e5 	movw	r2, #741	; 0x2e5
 8005db2:	4914      	ldr	r1, [pc, #80]	; (8005e04 <netconn_alloc+0x7c>)
 8005db4:	4814      	ldr	r0, [pc, #80]	; (8005e08 <netconn_alloc+0x80>)
 8005db6:	f007 febf 	bl	800db38 <iprintf>
  memp_free(MEMP_NETCONN, conn);
 8005dba:	4621      	mov	r1, r4
 8005dbc:	2007      	movs	r0, #7
  return NULL;
 8005dbe:	2400      	movs	r4, #0
  memp_free(MEMP_NETCONN, conn);
 8005dc0:	f003 fa64 	bl	800928c <memp_free>
  return NULL;
 8005dc4:	e01a      	b.n	8005dfc <netconn_alloc+0x74>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8005dc6:	f104 0710 	add.w	r7, r4, #16
 8005dca:	2106      	movs	r1, #6
 8005dcc:	4638      	mov	r0, r7
 8005dce:	f007 fd4b 	bl	800d868 <sys_mbox_new>
 8005dd2:	4601      	mov	r1, r0
 8005dd4:	2800      	cmp	r0, #0
 8005dd6:	d1f0      	bne.n	8005dba <netconn_alloc+0x32>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8005dd8:	f104 000c 	add.w	r0, r4, #12
 8005ddc:	f007 fda3 	bl	800d926 <sys_sem_new>
 8005de0:	4605      	mov	r5, r0
 8005de2:	b118      	cbz	r0, 8005dec <netconn_alloc+0x64>
    sys_mbox_free(&conn->recvmbox);
 8005de4:	4638      	mov	r0, r7
 8005de6:	f007 fd4f 	bl	800d888 <sys_mbox_free>
    goto free_and_return;
 8005dea:	e7e6      	b.n	8005dba <netconn_alloc+0x32>
  sys_mbox_set_invalid(&conn->acceptmbox);
 8005dec:	f104 0014 	add.w	r0, r4, #20
 8005df0:	f007 fd96 	bl	800d920 <sys_mbox_set_invalid>
  conn->state        = NETCONN_NONE;
 8005df4:	7065      	strb	r5, [r4, #1]
  conn->flags = init_flags;
 8005df6:	7625      	strb	r5, [r4, #24]
  conn->current_msg  = NULL;
 8005df8:	e9c4 5607 	strd	r5, r6, [r4, #28]
}
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e00:	0801fdb8 	.word	0x0801fdb8
 8005e04:	0802011d 	.word	0x0802011d
 8005e08:	0801f8bf 	.word	0x0801f8bf

08005e0c <netconn_free>:
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8005e0c:	6843      	ldr	r3, [r0, #4]
{
 8005e0e:	b513      	push	{r0, r1, r4, lr}
 8005e10:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8005e12:	b133      	cbz	r3, 8005e22 <netconn_free+0x16>
 8005e14:	4b16      	ldr	r3, [pc, #88]	; (8005e70 <netconn_free+0x64>)
 8005e16:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8005e1a:	4916      	ldr	r1, [pc, #88]	; (8005e74 <netconn_free+0x68>)
 8005e1c:	4816      	ldr	r0, [pc, #88]	; (8005e78 <netconn_free+0x6c>)
 8005e1e:	f007 fe8b 	bl	800db38 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8005e22:	f104 0010 	add.w	r0, r4, #16
 8005e26:	f007 fd76 	bl	800d916 <sys_mbox_valid>
 8005e2a:	b130      	cbz	r0, 8005e3a <netconn_free+0x2e>
 8005e2c:	4b10      	ldr	r3, [pc, #64]	; (8005e70 <netconn_free+0x64>)
 8005e2e:	f240 3223 	movw	r2, #803	; 0x323
 8005e32:	4912      	ldr	r1, [pc, #72]	; (8005e7c <netconn_free+0x70>)
 8005e34:	4810      	ldr	r0, [pc, #64]	; (8005e78 <netconn_free+0x6c>)
 8005e36:	f007 fe7f 	bl	800db38 <iprintf>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8005e3a:	f104 0014 	add.w	r0, r4, #20
 8005e3e:	f007 fd6a 	bl	800d916 <sys_mbox_valid>
 8005e42:	b130      	cbz	r0, 8005e52 <netconn_free+0x46>
 8005e44:	4b0a      	ldr	r3, [pc, #40]	; (8005e70 <netconn_free+0x64>)
 8005e46:	f240 3226 	movw	r2, #806	; 0x326
 8005e4a:	490d      	ldr	r1, [pc, #52]	; (8005e80 <netconn_free+0x74>)
 8005e4c:	480a      	ldr	r0, [pc, #40]	; (8005e78 <netconn_free+0x6c>)
 8005e4e:	f007 fe73 	bl	800db38 <iprintf>
  sys_sem_free(&conn->op_completed);
 8005e52:	f104 000c 	add.w	r0, r4, #12
 8005e56:	9001      	str	r0, [sp, #4]
 8005e58:	f007 fd9a 	bl	800d990 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8005e5c:	9801      	ldr	r0, [sp, #4]
 8005e5e:	f007 fd9f 	bl	800d9a0 <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 8005e62:	4621      	mov	r1, r4
 8005e64:	2007      	movs	r0, #7
}
 8005e66:	b002      	add	sp, #8
 8005e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_NETCONN, conn);
 8005e6c:	f003 ba0e 	b.w	800928c <memp_free>
 8005e70:	0801fdb8 	.word	0x0801fdb8
 8005e74:	08020143 	.word	0x08020143
 8005e78:	0801f8bf 	.word	0x0801f8bf
 8005e7c:	08020171 	.word	0x08020171
 8005e80:	080201ab 	.word	0x080201ab

08005e84 <netconn_drain>:
{
 8005e84:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (sys_mbox_valid(&conn->recvmbox)) {
 8005e86:	f100 0510 	add.w	r5, r0, #16
{
 8005e8a:	4604      	mov	r4, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 8005e8c:	4628      	mov	r0, r5
 8005e8e:	f007 fd42 	bl	800d916 <sys_mbox_valid>
 8005e92:	b158      	cbz	r0, 8005eac <netconn_drain+0x28>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8005e94:	a901      	add	r1, sp, #4
 8005e96:	4628      	mov	r0, r5
 8005e98:	f007 fd2c 	bl	800d8f4 <sys_arch_mbox_tryfetch>
 8005e9c:	3001      	adds	r0, #1
 8005e9e:	d118      	bne.n	8005ed2 <netconn_drain+0x4e>
    sys_mbox_free(&conn->recvmbox);
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	f007 fcf1 	bl	800d888 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	f007 fd3a 	bl	800d920 <sys_mbox_set_invalid>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8005eac:	3414      	adds	r4, #20
 8005eae:	4620      	mov	r0, r4
 8005eb0:	f007 fd31 	bl	800d916 <sys_mbox_valid>
 8005eb4:	b158      	cbz	r0, 8005ece <netconn_drain+0x4a>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8005eb6:	a901      	add	r1, sp, #4
 8005eb8:	4620      	mov	r0, r4
 8005eba:	f007 fd1b 	bl	800d8f4 <sys_arch_mbox_tryfetch>
 8005ebe:	3001      	adds	r0, #1
 8005ec0:	d11a      	bne.n	8005ef8 <netconn_drain+0x74>
    sys_mbox_free(&conn->acceptmbox);
 8005ec2:	4620      	mov	r0, r4
 8005ec4:	f007 fce0 	bl	800d888 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8005ec8:	4620      	mov	r0, r4
 8005eca:	f007 fd29 	bl	800d920 <sys_mbox_set_invalid>
}
 8005ece:	b002      	add	sp, #8
 8005ed0:	bd70      	pop	{r4, r5, r6, pc}
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8005ed2:	7823      	ldrb	r3, [r4, #0]
 8005ed4:	9801      	ldr	r0, [sp, #4]
 8005ed6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005eda:	2b10      	cmp	r3, #16
 8005edc:	d109      	bne.n	8005ef2 <netconn_drain+0x6e>
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8005ede:	f10d 0103 	add.w	r1, sp, #3
 8005ee2:	f7ff fef9 	bl	8005cd8 <lwip_netconn_is_err_msg>
 8005ee6:	2800      	cmp	r0, #0
 8005ee8:	d1d4      	bne.n	8005e94 <netconn_drain+0x10>
            pbuf_free((struct pbuf *)mem);
 8005eea:	9801      	ldr	r0, [sp, #4]
 8005eec:	f003 fc3e 	bl	800976c <pbuf_free>
 8005ef0:	e7d0      	b.n	8005e94 <netconn_drain+0x10>
          netbuf_delete((struct netbuf *)mem);
 8005ef2:	f000 fa6d 	bl	80063d0 <netbuf_delete>
 8005ef6:	e7cd      	b.n	8005e94 <netconn_drain+0x10>
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8005ef8:	f10d 0103 	add.w	r1, sp, #3
 8005efc:	9801      	ldr	r0, [sp, #4]
 8005efe:	f7ff feeb 	bl	8005cd8 <lwip_netconn_is_err_msg>
 8005f02:	4606      	mov	r6, r0
 8005f04:	2800      	cmp	r0, #0
 8005f06:	d1d6      	bne.n	8005eb6 <netconn_drain+0x32>
          struct netconn *newconn = (struct netconn *)mem;
 8005f08:	9d01      	ldr	r5, [sp, #4]
          netconn_drain(newconn);
 8005f0a:	4628      	mov	r0, r5
 8005f0c:	f7ff ffba 	bl	8005e84 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8005f10:	6868      	ldr	r0, [r5, #4]
 8005f12:	b110      	cbz	r0, 8005f1a <netconn_drain+0x96>
            tcp_abort(newconn->pcb.tcp);
 8005f14:	f004 fdbe 	bl	800aa94 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8005f18:	606e      	str	r6, [r5, #4]
          netconn_free(newconn);
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	f7ff ff76 	bl	8005e0c <netconn_free>
 8005f20:	e7c9      	b.n	8005eb6 <netconn_drain+0x32>
	...

08005f24 <accept_function>:
{
 8005f24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f26:	460f      	mov	r7, r1
 8005f28:	4616      	mov	r6, r2
  if (conn == NULL) {
 8005f2a:	4605      	mov	r5, r0
 8005f2c:	b920      	cbnz	r0, 8005f38 <accept_function+0x14>
    return ERR_VAL;
 8005f2e:	f06f 0405 	mvn.w	r4, #5
}
 8005f32:	4620      	mov	r0, r4
 8005f34:	b003      	add	sp, #12
 8005f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8005f38:	f100 0414 	add.w	r4, r0, #20
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	f007 fcea 	bl	800d916 <sys_mbox_valid>
 8005f42:	2800      	cmp	r0, #0
 8005f44:	d0f3      	beq.n	8005f2e <accept_function+0xa>
  if (newpcb == NULL) {
 8005f46:	b96f      	cbnz	r7, 8005f64 <accept_function+0x40>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8005f48:	492f      	ldr	r1, [pc, #188]	; (8006008 <accept_function+0xe4>)
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	f007 fca6 	bl	800d89c <sys_mbox_trypost>
 8005f50:	4602      	mov	r2, r0
 8005f52:	2800      	cmp	r0, #0
 8005f54:	d1eb      	bne.n	8005f2e <accept_function+0xa>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8005f56:	6a2b      	ldr	r3, [r5, #32]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d0e8      	beq.n	8005f2e <accept_function+0xa>
 8005f5c:	4601      	mov	r1, r0
 8005f5e:	4628      	mov	r0, r5
 8005f60:	4798      	blx	r3
 8005f62:	e7e4      	b.n	8005f2e <accept_function+0xa>
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8005f64:	b136      	cbz	r6, 8005f74 <accept_function+0x50>
 8005f66:	4b29      	ldr	r3, [pc, #164]	; (800600c <accept_function+0xe8>)
 8005f68:	f240 222a 	movw	r2, #554	; 0x22a
 8005f6c:	4928      	ldr	r1, [pc, #160]	; (8006010 <accept_function+0xec>)
 8005f6e:	4829      	ldr	r0, [pc, #164]	; (8006014 <accept_function+0xf0>)
 8005f70:	f007 fde2 	bl	800db38 <iprintf>
  newconn = netconn_alloc(conn->type, conn->callback);
 8005f74:	6a29      	ldr	r1, [r5, #32]
 8005f76:	7828      	ldrb	r0, [r5, #0]
 8005f78:	f7ff ff06 	bl	8005d88 <netconn_alloc>
  if (newconn == NULL) {
 8005f7c:	4606      	mov	r6, r0
 8005f7e:	b968      	cbnz	r0, 8005f9c <accept_function+0x78>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8005f80:	4921      	ldr	r1, [pc, #132]	; (8006008 <accept_function+0xe4>)
 8005f82:	4620      	mov	r0, r4
 8005f84:	f007 fc8a 	bl	800d89c <sys_mbox_trypost>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	b920      	cbnz	r0, 8005f96 <accept_function+0x72>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8005f8c:	6a2b      	ldr	r3, [r5, #32]
 8005f8e:	b113      	cbz	r3, 8005f96 <accept_function+0x72>
 8005f90:	4601      	mov	r1, r0
 8005f92:	4628      	mov	r0, r5
 8005f94:	4798      	blx	r3
    return ERR_MEM;
 8005f96:	f04f 34ff 	mov.w	r4, #4294967295
 8005f9a:	e7ca      	b.n	8005f32 <accept_function+0xe>
  newconn->pcb.tcp = newpcb;
 8005f9c:	6047      	str	r7, [r0, #4]
  setup_tcp(newconn);
 8005f9e:	f7ff fadd 	bl	800555c <setup_tcp>
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	4631      	mov	r1, r6
 8005fa6:	f007 fc79 	bl	800d89c <sys_mbox_trypost>
 8005faa:	4604      	mov	r4, r0
 8005fac:	b318      	cbz	r0, 8005ff6 <accept_function+0xd2>
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8005fae:	6870      	ldr	r0, [r6, #4]
    tcp_arg(pcb, NULL);
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	9001      	str	r0, [sp, #4]
 8005fb4:	f004 f824 	bl	800a000 <tcp_arg>
    tcp_recv(pcb, NULL);
 8005fb8:	9801      	ldr	r0, [sp, #4]
 8005fba:	2100      	movs	r1, #0
 8005fbc:	f004 f824 	bl	800a008 <tcp_recv>
    tcp_sent(pcb, NULL);
 8005fc0:	9801      	ldr	r0, [sp, #4]
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	f004 f838 	bl	800a038 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8005fc8:	2200      	movs	r2, #0
 8005fca:	9801      	ldr	r0, [sp, #4]
 8005fcc:	4611      	mov	r1, r2
 8005fce:	f004 f867 	bl	800a0a0 <tcp_poll>
    tcp_err(pcb, NULL);
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	9801      	ldr	r0, [sp, #4]
 8005fd6:	f004 f845 	bl	800a064 <tcp_err>
    newconn->pcb.tcp = NULL;
 8005fda:	2300      	movs	r3, #0
    sys_mbox_free(&newconn->recvmbox);
 8005fdc:	f106 0010 	add.w	r0, r6, #16
    newconn->pcb.tcp = NULL;
 8005fe0:	6073      	str	r3, [r6, #4]
    sys_mbox_free(&newconn->recvmbox);
 8005fe2:	9001      	str	r0, [sp, #4]
 8005fe4:	f007 fc50 	bl	800d888 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8005fe8:	9801      	ldr	r0, [sp, #4]
 8005fea:	f007 fc99 	bl	800d920 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8005fee:	4630      	mov	r0, r6
 8005ff0:	f7ff ff0c 	bl	8005e0c <netconn_free>
    return ERR_MEM;
 8005ff4:	e7cf      	b.n	8005f96 <accept_function+0x72>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8005ff6:	6a2b      	ldr	r3, [r5, #32]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d09a      	beq.n	8005f32 <accept_function+0xe>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	4601      	mov	r1, r0
 8006000:	4628      	mov	r0, r5
 8006002:	4798      	blx	r3
 8006004:	e795      	b.n	8005f32 <accept_function+0xe>
 8006006:	bf00      	nop
 8006008:	0800f6d4 	.word	0x0800f6d4
 800600c:	0801fdb8 	.word	0x0801fdb8
 8006010:	080201e7 	.word	0x080201e7
 8006014:	0801f8bf 	.word	0x0801f8bf

08006018 <lwip_netconn_do_delconn>:
  enum netconn_state state = msg->conn->state;
 8006018:	6803      	ldr	r3, [r0, #0]
{
 800601a:	b570      	push	{r4, r5, r6, lr}
  enum netconn_state state = msg->conn->state;
 800601c:	785d      	ldrb	r5, [r3, #1]
{
 800601e:	4604      	mov	r4, r0
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8006020:	b16d      	cbz	r5, 800603e <lwip_netconn_do_delconn+0x26>
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006028:	2b10      	cmp	r3, #16
 800602a:	d006      	beq.n	800603a <lwip_netconn_do_delconn+0x22>
 800602c:	4b37      	ldr	r3, [pc, #220]	; (800610c <lwip_netconn_do_delconn+0xf4>)
 800602e:	f240 425e 	movw	r2, #1118	; 0x45e
 8006032:	4937      	ldr	r1, [pc, #220]	; (8006110 <lwip_netconn_do_delconn+0xf8>)
 8006034:	4837      	ldr	r0, [pc, #220]	; (8006114 <lwip_netconn_do_delconn+0xfc>)
 8006036:	f007 fd7f 	bl	800db38 <iprintf>
  if (((state != NETCONN_NONE) &&
 800603a:	2d02      	cmp	r5, #2
 800603c:	d121      	bne.n	8006082 <lwip_netconn_do_delconn+0x6a>
    msg->err = ERR_OK;
 800603e:	2500      	movs	r5, #0
    netconn_drain(msg->conn);
 8006040:	6820      	ldr	r0, [r4, #0]
    msg->err = ERR_OK;
 8006042:	7125      	strb	r5, [r4, #4]
    netconn_drain(msg->conn);
 8006044:	f7ff ff1e 	bl	8005e84 <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 8006048:	6822      	ldr	r2, [r4, #0]
 800604a:	6850      	ldr	r0, [r2, #4]
 800604c:	b160      	cbz	r0, 8006068 <lwip_netconn_do_delconn+0x50>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800604e:	7813      	ldrb	r3, [r2, #0]
 8006050:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006054:	2b10      	cmp	r3, #16
 8006056:	d022      	beq.n	800609e <lwip_netconn_do_delconn+0x86>
 8006058:	2b20      	cmp	r3, #32
 800605a:	d102      	bne.n	8006062 <lwip_netconn_do_delconn+0x4a>
          msg->conn->pcb.udp->recv_arg = NULL;
 800605c:	61c5      	str	r5, [r0, #28]
          udp_remove(msg->conn->pcb.udp);
 800605e:	f007 fb2f 	bl	800d6c0 <udp_remove>
      msg->conn->pcb.tcp = NULL;
 8006062:	6823      	ldr	r3, [r4, #0]
 8006064:	2200      	movs	r2, #0
 8006066:	605a      	str	r2, [r3, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8006068:	6820      	ldr	r0, [r4, #0]
 800606a:	6a03      	ldr	r3, [r0, #32]
 800606c:	b113      	cbz	r3, 8006074 <lwip_netconn_do_delconn+0x5c>
 800606e:	2200      	movs	r2, #0
 8006070:	4611      	mov	r1, r2
 8006072:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8006074:	6820      	ldr	r0, [r4, #0]
 8006076:	6a03      	ldr	r3, [r0, #32]
 8006078:	b15b      	cbz	r3, 8006092 <lwip_netconn_do_delconn+0x7a>
 800607a:	2200      	movs	r2, #0
 800607c:	2102      	movs	r1, #2
 800607e:	4798      	blx	r3
 8006080:	e007      	b.n	8006092 <lwip_netconn_do_delconn+0x7a>
       (state != NETCONN_LISTEN) &&
 8006082:	2d03      	cmp	r5, #3
 8006084:	d103      	bne.n	800608e <lwip_netconn_do_delconn+0x76>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8006086:	6823      	ldr	r3, [r4, #0]
 8006088:	7e1b      	ldrb	r3, [r3, #24]
 800608a:	075b      	lsls	r3, r3, #29
 800608c:	d4d7      	bmi.n	800603e <lwip_netconn_do_delconn+0x26>
    msg->err = ERR_INPROGRESS;
 800608e:	23fb      	movs	r3, #251	; 0xfb
 8006090:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8006092:	6820      	ldr	r0, [r4, #0]
}
 8006094:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8006098:	300c      	adds	r0, #12
 800609a:	f007 bc7c 	b.w	800d996 <sys_sem_valid>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800609e:	69d3      	ldr	r3, [r2, #28]
 80060a0:	b133      	cbz	r3, 80060b0 <lwip_netconn_do_delconn+0x98>
 80060a2:	4b1a      	ldr	r3, [pc, #104]	; (800610c <lwip_netconn_do_delconn+0xf4>)
 80060a4:	f240 4294 	movw	r2, #1172	; 0x494
 80060a8:	491b      	ldr	r1, [pc, #108]	; (8006118 <lwip_netconn_do_delconn+0x100>)
 80060aa:	481a      	ldr	r0, [pc, #104]	; (8006114 <lwip_netconn_do_delconn+0xfc>)
 80060ac:	f007 fd44 	bl	800db38 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 80060b0:	6820      	ldr	r0, [r4, #0]
 80060b2:	2304      	movs	r3, #4
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80060b4:	2100      	movs	r1, #0
          msg->conn->state = NETCONN_CLOSE;
 80060b6:	7043      	strb	r3, [r0, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80060b8:	2303      	movs	r3, #3
 80060ba:	7223      	strb	r3, [r4, #8]
          msg->conn->current_msg = msg;
 80060bc:	61c4      	str	r4, [r0, #28]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80060be:	f7ff fb99 	bl	80057f4 <lwip_netconn_do_close_internal>
 80060c2:	b308      	cbz	r0, 8006108 <lwip_netconn_do_delconn+0xf0>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80060c4:	6823      	ldr	r3, [r4, #0]
 80060c6:	785b      	ldrb	r3, [r3, #1]
 80060c8:	2b04      	cmp	r3, #4
 80060ca:	d006      	beq.n	80060da <lwip_netconn_do_delconn+0xc2>
 80060cc:	4b0f      	ldr	r3, [pc, #60]	; (800610c <lwip_netconn_do_delconn+0xf4>)
 80060ce:	f240 429a 	movw	r2, #1178	; 0x49a
 80060d2:	4912      	ldr	r1, [pc, #72]	; (800611c <lwip_netconn_do_delconn+0x104>)
 80060d4:	480f      	ldr	r0, [pc, #60]	; (8006114 <lwip_netconn_do_delconn+0xfc>)
 80060d6:	f007 fd2f 	bl	800db38 <iprintf>
            UNLOCK_TCPIP_CORE();
 80060da:	4811      	ldr	r0, [pc, #68]	; (8006120 <lwip_netconn_do_delconn+0x108>)
 80060dc:	f007 fc83 	bl	800d9e6 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80060e0:	6820      	ldr	r0, [r4, #0]
 80060e2:	2100      	movs	r1, #0
 80060e4:	300c      	adds	r0, #12
 80060e6:	f007 fc35 	bl	800d954 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 80060ea:	480d      	ldr	r0, [pc, #52]	; (8006120 <lwip_netconn_do_delconn+0x108>)
 80060ec:	f007 fc76 	bl	800d9dc <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80060f0:	6823      	ldr	r3, [r4, #0]
 80060f2:	785b      	ldrb	r3, [r3, #1]
 80060f4:	b143      	cbz	r3, 8006108 <lwip_netconn_do_delconn+0xf0>
 80060f6:	4b05      	ldr	r3, [pc, #20]	; (800610c <lwip_netconn_do_delconn+0xf4>)
 80060f8:	f240 429e 	movw	r2, #1182	; 0x49e
 80060fc:	4907      	ldr	r1, [pc, #28]	; (800611c <lwip_netconn_do_delconn+0x104>)
 80060fe:	4805      	ldr	r0, [pc, #20]	; (8006114 <lwip_netconn_do_delconn+0xfc>)
}
 8006100:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8006104:	f007 bd18 	b.w	800db38 <iprintf>
}
 8006108:	bd70      	pop	{r4, r5, r6, pc}
 800610a:	bf00      	nop
 800610c:	0801fdb8 	.word	0x0801fdb8
 8006110:	0802020e 	.word	0x0802020e
 8006114:	0801f8bf 	.word	0x0801f8bf
 8006118:	08020222 	.word	0x08020222
 800611c:	0802023d 	.word	0x0802023d
 8006120:	24006a24 	.word	0x24006a24

08006124 <lwip_netconn_do_bind>:
  if (msg->conn->pcb.tcp != NULL) {
 8006124:	6803      	ldr	r3, [r0, #0]
{
 8006126:	b510      	push	{r4, lr}
 8006128:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 800612a:	6858      	ldr	r0, [r3, #4]
 800612c:	b188      	cbz	r0, 8006152 <lwip_netconn_do_bind+0x2e>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006134:	2b10      	cmp	r3, #16
 8006136:	d007      	beq.n	8006148 <lwip_netconn_do_bind+0x24>
 8006138:	2b20      	cmp	r3, #32
 800613a:	d10a      	bne.n	8006152 <lwip_netconn_do_bind+0x2e>
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800613c:	89a2      	ldrh	r2, [r4, #12]
 800613e:	68a1      	ldr	r1, [r4, #8]
 8006140:	f007 f930 	bl	800d3a4 <udp_bind>
  msg->err = err;
 8006144:	7120      	strb	r0, [r4, #4]
}
 8006146:	bd10      	pop	{r4, pc}
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8006148:	89a2      	ldrh	r2, [r4, #12]
 800614a:	68a1      	ldr	r1, [r4, #8]
 800614c:	f003 fe12 	bl	8009d74 <tcp_bind>
        break;
 8006150:	e7f8      	b.n	8006144 <lwip_netconn_do_bind+0x20>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8006152:	f06f 0005 	mvn.w	r0, #5
 8006156:	e7f5      	b.n	8006144 <lwip_netconn_do_bind+0x20>

08006158 <lwip_netconn_do_listen>:
  if (msg->conn->pcb.tcp != NULL) {
 8006158:	6803      	ldr	r3, [r0, #0]
{
 800615a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800615c:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 800615e:	6858      	ldr	r0, [r3, #4]
 8006160:	2800      	cmp	r0, #0
 8006162:	d04f      	beq.n	8006204 <lwip_netconn_do_listen+0xac>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8006164:	781a      	ldrb	r2, [r3, #0]
 8006166:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800616a:	2a10      	cmp	r2, #16
 800616c:	d14c      	bne.n	8006208 <lwip_netconn_do_listen+0xb0>
      if (msg->conn->state == NETCONN_NONE) {
 800616e:	785b      	ldrb	r3, [r3, #1]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d143      	bne.n	80061fc <lwip_netconn_do_listen+0xa4>
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8006174:	7d03      	ldrb	r3, [r0, #20]
 8006176:	b11b      	cbz	r3, 8006180 <lwip_netconn_do_listen+0x28>
          err = ERR_VAL;
 8006178:	23fa      	movs	r3, #250	; 0xfa
      err = ERR_ARG;
 800617a:	f88d 3007 	strb.w	r3, [sp, #7]
 800617e:	e031      	b.n	80061e4 <lwip_netconn_do_listen+0x8c>
          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8006180:	f10d 0207 	add.w	r2, sp, #7
 8006184:	21ff      	movs	r1, #255	; 0xff
 8006186:	f003 fe4b 	bl	8009e20 <tcp_listen_with_backlog_and_err>
          if (lpcb == NULL) {
 800618a:	4605      	mov	r5, r0
 800618c:	b350      	cbz	r0, 80061e4 <lwip_netconn_do_listen+0x8c>
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800618e:	6820      	ldr	r0, [r4, #0]
 8006190:	3010      	adds	r0, #16
 8006192:	f007 fbc0 	bl	800d916 <sys_mbox_valid>
 8006196:	b138      	cbz	r0, 80061a8 <lwip_netconn_do_listen+0x50>
              sys_mbox_free(&msg->conn->recvmbox);
 8006198:	6820      	ldr	r0, [r4, #0]
 800619a:	3010      	adds	r0, #16
 800619c:	f007 fb74 	bl	800d888 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 80061a0:	6820      	ldr	r0, [r4, #0]
 80061a2:	3010      	adds	r0, #16
 80061a4:	f007 fbbc 	bl	800d920 <sys_mbox_set_invalid>
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 80061a8:	6820      	ldr	r0, [r4, #0]
            err = ERR_OK;
 80061aa:	2300      	movs	r3, #0
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 80061ac:	3014      	adds	r0, #20
            err = ERR_OK;
 80061ae:	f88d 3007 	strb.w	r3, [sp, #7]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 80061b2:	f007 fbb0 	bl	800d916 <sys_mbox_valid>
 80061b6:	b930      	cbnz	r0, 80061c6 <lwip_netconn_do_listen+0x6e>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 80061b8:	6820      	ldr	r0, [r4, #0]
 80061ba:	2106      	movs	r1, #6
 80061bc:	3014      	adds	r0, #20
 80061be:	f007 fb53 	bl	800d868 <sys_mbox_new>
 80061c2:	f88d 0007 	strb.w	r0, [sp, #7]
            if (err == ERR_OK) {
 80061c6:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 80061ca:	b983      	cbnz	r3, 80061ee <lwip_netconn_do_listen+0x96>
              msg->conn->state = NETCONN_LISTEN;
 80061cc:	6821      	ldr	r1, [r4, #0]
 80061ce:	2302      	movs	r3, #2
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 80061d0:	4628      	mov	r0, r5
              msg->conn->state = NETCONN_LISTEN;
 80061d2:	704b      	strb	r3, [r1, #1]
              msg->conn->pcb.tcp = lpcb;
 80061d4:	604d      	str	r5, [r1, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 80061d6:	f003 ff13 	bl	800a000 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 80061da:	6823      	ldr	r3, [r4, #0]
 80061dc:	490b      	ldr	r1, [pc, #44]	; (800620c <lwip_netconn_do_listen+0xb4>)
 80061de:	6858      	ldr	r0, [r3, #4]
 80061e0:	f003 ff58 	bl	800a094 <tcp_accept>
  msg->err = err;
 80061e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80061e8:	7123      	strb	r3, [r4, #4]
}
 80061ea:	b003      	add	sp, #12
 80061ec:	bd30      	pop	{r4, r5, pc}
              tcp_close(lpcb);
 80061ee:	4628      	mov	r0, r5
 80061f0:	f004 fac0 	bl	800a774 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 80061f4:	6823      	ldr	r3, [r4, #0]
 80061f6:	2200      	movs	r2, #0
 80061f8:	605a      	str	r2, [r3, #4]
 80061fa:	e7f3      	b.n	80061e4 <lwip_netconn_do_listen+0x8c>
      } else if (msg->conn->state == NETCONN_LISTEN) {
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d101      	bne.n	8006204 <lwip_netconn_do_listen+0xac>
        err = ERR_OK;
 8006200:	2300      	movs	r3, #0
 8006202:	e7ba      	b.n	800617a <lwip_netconn_do_listen+0x22>
        err = ERR_CONN;
 8006204:	23f5      	movs	r3, #245	; 0xf5
 8006206:	e7b8      	b.n	800617a <lwip_netconn_do_listen+0x22>
      err = ERR_ARG;
 8006208:	23f0      	movs	r3, #240	; 0xf0
 800620a:	e7b6      	b.n	800617a <lwip_netconn_do_listen+0x22>
 800620c:	08005f25 	.word	0x08005f25

08006210 <lwip_netconn_do_recv>:
{
 8006210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg->err = ERR_OK;
 8006212:	2300      	movs	r3, #0
{
 8006214:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 8006216:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8006218:	6803      	ldr	r3, [r0, #0]
 800621a:	685a      	ldr	r2, [r3, #4]
 800621c:	b192      	cbz	r2, 8006244 <lwip_netconn_do_recv+0x34>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006224:	2b10      	cmp	r3, #16
 8006226:	d10d      	bne.n	8006244 <lwip_netconn_do_recv+0x34>
      size_t remaining = msg->msg.r.len;
 8006228:	6885      	ldr	r5, [r0, #8]
 800622a:	f64f 77ff 	movw	r7, #65535	; 0xffff
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800622e:	42bd      	cmp	r5, r7
 8006230:	462e      	mov	r6, r5
        tcp_recved(msg->conn->pcb.tcp, recved);
 8006232:	6823      	ldr	r3, [r4, #0]
 8006234:	bf28      	it	cs
 8006236:	463e      	movcs	r6, r7
 8006238:	6858      	ldr	r0, [r3, #4]
 800623a:	b2b1      	uxth	r1, r6
 800623c:	f003 fe8c 	bl	8009f58 <tcp_recved>
      } while (remaining != 0);
 8006240:	1bad      	subs	r5, r5, r6
 8006242:	d1f4      	bne.n	800622e <lwip_netconn_do_recv+0x1e>
}
 8006244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006248 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8006248:	b510      	push	{r4, lr}
 800624a:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

  err_t err = netconn_err(msg->conn);
 800624c:	6800      	ldr	r0, [r0, #0]
 800624e:	f7fe ff96 	bl	800517e <netconn_err>
  if (err == ERR_OK) {
 8006252:	2800      	cmp	r0, #0
 8006254:	d14a      	bne.n	80062ec <lwip_netconn_do_write+0xa4>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8006256:	6823      	ldr	r3, [r4, #0]
 8006258:	781a      	ldrb	r2, [r3, #0]
 800625a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800625e:	2a10      	cmp	r2, #16
 8006260:	d142      	bne.n	80062e8 <lwip_netconn_do_write+0xa0>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8006262:	785a      	ldrb	r2, [r3, #1]
 8006264:	2a00      	cmp	r2, #0
 8006266:	d143      	bne.n	80062f0 <lwip_netconn_do_write+0xa8>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
      } else if (msg->conn->pcb.tcp != NULL) {
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	2a00      	cmp	r2, #0
 800626c:	d043      	beq.n	80062f6 <lwip_netconn_do_write+0xae>
        msg->conn->state = NETCONN_WRITE;
 800626e:	2201      	movs	r2, #1
 8006270:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8006272:	69db      	ldr	r3, [r3, #28]
 8006274:	b133      	cbz	r3, 8006284 <lwip_netconn_do_write+0x3c>
 8006276:	4b21      	ldr	r3, [pc, #132]	; (80062fc <lwip_netconn_do_write+0xb4>)
 8006278:	f240 7223 	movw	r2, #1827	; 0x723
 800627c:	4920      	ldr	r1, [pc, #128]	; (8006300 <lwip_netconn_do_write+0xb8>)
 800627e:	4821      	ldr	r0, [pc, #132]	; (8006304 <lwip_netconn_do_write+0xbc>)
 8006280:	f007 fc5a 	bl	800db38 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8006284:	6963      	ldr	r3, [r4, #20]
 8006286:	b933      	cbnz	r3, 8006296 <lwip_netconn_do_write+0x4e>
 8006288:	4b1c      	ldr	r3, [pc, #112]	; (80062fc <lwip_netconn_do_write+0xb4>)
 800628a:	f240 7224 	movw	r2, #1828	; 0x724
 800628e:	491e      	ldr	r1, [pc, #120]	; (8006308 <lwip_netconn_do_write+0xc0>)
 8006290:	481c      	ldr	r0, [pc, #112]	; (8006304 <lwip_netconn_do_write+0xbc>)
 8006292:	f007 fc51 	bl	800db38 <iprintf>
        msg->conn->current_msg = msg;
 8006296:	6820      	ldr	r0, [r4, #0]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8006298:	2100      	movs	r1, #0
        msg->conn->current_msg = msg;
 800629a:	61c4      	str	r4, [r0, #28]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800629c:	f7ff f980 	bl	80055a0 <lwip_netconn_do_writemore>
 80062a0:	b328      	cbz	r0, 80062ee <lwip_netconn_do_write+0xa6>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 80062a2:	6823      	ldr	r3, [r4, #0]
 80062a4:	785b      	ldrb	r3, [r3, #1]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d006      	beq.n	80062b8 <lwip_netconn_do_write+0x70>
 80062aa:	4b14      	ldr	r3, [pc, #80]	; (80062fc <lwip_netconn_do_write+0xb4>)
 80062ac:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80062b0:	4916      	ldr	r1, [pc, #88]	; (800630c <lwip_netconn_do_write+0xc4>)
 80062b2:	4814      	ldr	r0, [pc, #80]	; (8006304 <lwip_netconn_do_write+0xbc>)
 80062b4:	f007 fc40 	bl	800db38 <iprintf>
          UNLOCK_TCPIP_CORE();
 80062b8:	4815      	ldr	r0, [pc, #84]	; (8006310 <lwip_netconn_do_write+0xc8>)
 80062ba:	f007 fb94 	bl	800d9e6 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80062be:	6820      	ldr	r0, [r4, #0]
 80062c0:	2100      	movs	r1, #0
 80062c2:	300c      	adds	r0, #12
 80062c4:	f007 fb46 	bl	800d954 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80062c8:	4811      	ldr	r0, [pc, #68]	; (8006310 <lwip_netconn_do_write+0xc8>)
 80062ca:	f007 fb87 	bl	800d9dc <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80062ce:	6823      	ldr	r3, [r4, #0]
 80062d0:	785b      	ldrb	r3, [r3, #1]
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d10b      	bne.n	80062ee <lwip_netconn_do_write+0xa6>
 80062d6:	4b09      	ldr	r3, [pc, #36]	; (80062fc <lwip_netconn_do_write+0xb4>)
 80062d8:	f240 722c 	movw	r2, #1836	; 0x72c
 80062dc:	490b      	ldr	r1, [pc, #44]	; (800630c <lwip_netconn_do_write+0xc4>)
 80062de:	4809      	ldr	r0, [pc, #36]	; (8006304 <lwip_netconn_do_write+0xbc>)
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
  TCPIP_APIMSG_ACK(msg);
}
 80062e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80062e4:	f007 bc28 	b.w	800db38 <iprintf>
      err = ERR_VAL;
 80062e8:	f06f 0005 	mvn.w	r0, #5
  msg->err = err;
 80062ec:	7120      	strb	r0, [r4, #4]
}
 80062ee:	bd10      	pop	{r4, pc}
        err = ERR_INPROGRESS;
 80062f0:	f06f 0004 	mvn.w	r0, #4
 80062f4:	e7fa      	b.n	80062ec <lwip_netconn_do_write+0xa4>
        err = ERR_CONN;
 80062f6:	f06f 000a 	mvn.w	r0, #10
 80062fa:	e7f7      	b.n	80062ec <lwip_netconn_do_write+0xa4>
 80062fc:	0801fdb8 	.word	0x0801fdb8
 8006300:	08020222 	.word	0x08020222
 8006304:	0801f8bf 	.word	0x0801f8bf
 8006308:	08020259 	.word	0x08020259
 800630c:	0802023d 	.word	0x0802023d
 8006310:	24006a24 	.word	0x24006a24

08006314 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8006314:	b510      	push	{r4, lr}
 8006316:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8006318:	6800      	ldr	r0, [r0, #0]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800631a:	6843      	ldr	r3, [r0, #4]
 800631c:	b163      	cbz	r3, 8006338 <lwip_netconn_do_close+0x24>
 800631e:	7803      	ldrb	r3, [r0, #0]
 8006320:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006324:	2b10      	cmp	r3, #16
 8006326:	d107      	bne.n	8006338 <lwip_netconn_do_close+0x24>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8006328:	7a22      	ldrb	r2, [r4, #8]
  enum netconn_state state = msg->conn->state;
 800632a:	7843      	ldrb	r3, [r0, #1]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800632c:	2a03      	cmp	r2, #3
 800632e:	d001      	beq.n	8006334 <lwip_netconn_do_close+0x20>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8006330:	2b02      	cmp	r3, #2
 8006332:	d001      	beq.n	8006338 <lwip_netconn_do_close+0x24>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8006334:	2b03      	cmp	r3, #3
 8006336:	d102      	bne.n	800633e <lwip_netconn_do_close+0x2a>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8006338:	23f5      	movs	r3, #245	; 0xf5
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800633a:	7123      	strb	r3, [r4, #4]
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
}
 800633c:	bd10      	pop	{r4, pc}
    } else if (state == NETCONN_WRITE) {
 800633e:	2b01      	cmp	r3, #1
 8006340:	d101      	bne.n	8006346 <lwip_netconn_do_close+0x32>
      msg->err = ERR_INPROGRESS;
 8006342:	23fb      	movs	r3, #251	; 0xfb
 8006344:	e7f9      	b.n	800633a <lwip_netconn_do_close+0x26>
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8006346:	07d3      	lsls	r3, r2, #31
 8006348:	d501      	bpl.n	800634e <lwip_netconn_do_close+0x3a>
        netconn_drain(msg->conn);
 800634a:	f7ff fd9b 	bl	8005e84 <netconn_drain>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800634e:	6823      	ldr	r3, [r4, #0]
 8006350:	69db      	ldr	r3, [r3, #28]
 8006352:	b133      	cbz	r3, 8006362 <lwip_netconn_do_close+0x4e>
 8006354:	4b19      	ldr	r3, [pc, #100]	; (80063bc <lwip_netconn_do_close+0xa8>)
 8006356:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800635a:	4919      	ldr	r1, [pc, #100]	; (80063c0 <lwip_netconn_do_close+0xac>)
 800635c:	4819      	ldr	r0, [pc, #100]	; (80063c4 <lwip_netconn_do_close+0xb0>)
 800635e:	f007 fbeb 	bl	800db38 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8006362:	6820      	ldr	r0, [r4, #0]
 8006364:	2304      	movs	r3, #4
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8006366:	2100      	movs	r1, #0
      msg->conn->state = NETCONN_CLOSE;
 8006368:	7043      	strb	r3, [r0, #1]
      msg->conn->current_msg = msg;
 800636a:	61c4      	str	r4, [r0, #28]
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800636c:	f7ff fa42 	bl	80057f4 <lwip_netconn_do_close_internal>
 8006370:	2800      	cmp	r0, #0
 8006372:	d0e3      	beq.n	800633c <lwip_netconn_do_close+0x28>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8006374:	6823      	ldr	r3, [r4, #0]
 8006376:	785b      	ldrb	r3, [r3, #1]
 8006378:	2b04      	cmp	r3, #4
 800637a:	d006      	beq.n	800638a <lwip_netconn_do_close+0x76>
 800637c:	4b0f      	ldr	r3, [pc, #60]	; (80063bc <lwip_netconn_do_close+0xa8>)
 800637e:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8006382:	4911      	ldr	r1, [pc, #68]	; (80063c8 <lwip_netconn_do_close+0xb4>)
 8006384:	480f      	ldr	r0, [pc, #60]	; (80063c4 <lwip_netconn_do_close+0xb0>)
 8006386:	f007 fbd7 	bl	800db38 <iprintf>
        UNLOCK_TCPIP_CORE();
 800638a:	4810      	ldr	r0, [pc, #64]	; (80063cc <lwip_netconn_do_close+0xb8>)
 800638c:	f007 fb2b 	bl	800d9e6 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8006390:	6820      	ldr	r0, [r4, #0]
 8006392:	2100      	movs	r1, #0
 8006394:	300c      	adds	r0, #12
 8006396:	f007 fadd 	bl	800d954 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800639a:	480c      	ldr	r0, [pc, #48]	; (80063cc <lwip_netconn_do_close+0xb8>)
 800639c:	f007 fb1e 	bl	800d9dc <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80063a0:	6823      	ldr	r3, [r4, #0]
 80063a2:	785b      	ldrb	r3, [r3, #1]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d0c9      	beq.n	800633c <lwip_netconn_do_close+0x28>
 80063a8:	4b04      	ldr	r3, [pc, #16]	; (80063bc <lwip_netconn_do_close+0xa8>)
 80063aa:	f240 72c6 	movw	r2, #1990	; 0x7c6
 80063ae:	4906      	ldr	r1, [pc, #24]	; (80063c8 <lwip_netconn_do_close+0xb4>)
 80063b0:	4804      	ldr	r0, [pc, #16]	; (80063c4 <lwip_netconn_do_close+0xb0>)
}
 80063b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80063b6:	f007 bbbf 	b.w	800db38 <iprintf>
 80063ba:	bf00      	nop
 80063bc:	0801fdb8 	.word	0x0801fdb8
 80063c0:	08020222 	.word	0x08020222
 80063c4:	0801f8bf 	.word	0x0801f8bf
 80063c8:	0802023d 	.word	0x0802023d
 80063cc:	24006a24 	.word	0x24006a24

080063d0 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 80063d0:	b510      	push	{r4, lr}
  if (buf != NULL) {
 80063d2:	4604      	mov	r4, r0
 80063d4:	b160      	cbz	r0, 80063f0 <netbuf_delete+0x20>
    if (buf->p != NULL) {
 80063d6:	6800      	ldr	r0, [r0, #0]
 80063d8:	b120      	cbz	r0, 80063e4 <netbuf_delete+0x14>
      pbuf_free(buf->p);
 80063da:	f003 f9c7 	bl	800976c <pbuf_free>
      buf->p = buf->ptr = NULL;
 80063de:	2300      	movs	r3, #0
 80063e0:	e9c4 3300 	strd	r3, r3, [r4]
    }
    memp_free(MEMP_NETBUF, buf);
 80063e4:	4621      	mov	r1, r4
 80063e6:	2006      	movs	r0, #6
  }
}
 80063e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_NETBUF, buf);
 80063ec:	f002 bf4e 	b.w	800928c <memp_free>
}
 80063f0:	bd10      	pop	{r4, pc}
	...

080063f4 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 80063f4:	b508      	push	{r3, lr}
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 80063f6:	b940      	cbnz	r0, 800640a <netbuf_data+0x16>
 80063f8:	4b0f      	ldr	r3, [pc, #60]	; (8006438 <netbuf_data+0x44>)
 80063fa:	22c6      	movs	r2, #198	; 0xc6
 80063fc:	490f      	ldr	r1, [pc, #60]	; (800643c <netbuf_data+0x48>)
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 80063fe:	4810      	ldr	r0, [pc, #64]	; (8006440 <netbuf_data+0x4c>)
 8006400:	f007 fb9a 	bl	800db38 <iprintf>
 8006404:	f06f 000f 	mvn.w	r0, #15
    return ERR_BUF;
  }
  *dataptr = buf->ptr->payload;
  *len = buf->ptr->len;
  return ERR_OK;
}
 8006408:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800640a:	b919      	cbnz	r1, 8006414 <netbuf_data+0x20>
 800640c:	4b0a      	ldr	r3, [pc, #40]	; (8006438 <netbuf_data+0x44>)
 800640e:	22c7      	movs	r2, #199	; 0xc7
 8006410:	490c      	ldr	r1, [pc, #48]	; (8006444 <netbuf_data+0x50>)
 8006412:	e7f4      	b.n	80063fe <netbuf_data+0xa>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8006414:	b91a      	cbnz	r2, 800641e <netbuf_data+0x2a>
 8006416:	4b08      	ldr	r3, [pc, #32]	; (8006438 <netbuf_data+0x44>)
 8006418:	22c8      	movs	r2, #200	; 0xc8
 800641a:	490b      	ldr	r1, [pc, #44]	; (8006448 <netbuf_data+0x54>)
 800641c:	e7ef      	b.n	80063fe <netbuf_data+0xa>
  if (buf->ptr == NULL) {
 800641e:	6843      	ldr	r3, [r0, #4]
 8006420:	b133      	cbz	r3, 8006430 <netbuf_data+0x3c>
  *dataptr = buf->ptr->payload;
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	600b      	str	r3, [r1, #0]
  *len = buf->ptr->len;
 8006426:	6843      	ldr	r3, [r0, #4]
  return ERR_OK;
 8006428:	2000      	movs	r0, #0
  *len = buf->ptr->len;
 800642a:	895b      	ldrh	r3, [r3, #10]
 800642c:	8013      	strh	r3, [r2, #0]
  return ERR_OK;
 800642e:	e7eb      	b.n	8006408 <netbuf_data+0x14>
    return ERR_BUF;
 8006430:	f06f 0001 	mvn.w	r0, #1
 8006434:	e7e8      	b.n	8006408 <netbuf_data+0x14>
 8006436:	bf00      	nop
 8006438:	08020282 	.word	0x08020282
 800643c:	08020389 	.word	0x08020389
 8006440:	0801f8bf 	.word	0x0801f8bf
 8006444:	080203a2 	.word	0x080203a2
 8006448:	080203bf 	.word	0x080203bf

0800644c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800644c:	b583      	push	{r0, r1, r7, lr}
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800644e:	482b      	ldr	r0, [pc, #172]	; (80064fc <tcpip_thread+0xb0>)
 8006450:	f007 fac4 	bl	800d9dc <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8006454:	4a2a      	ldr	r2, [pc, #168]	; (8006500 <tcpip_thread+0xb4>)
 8006456:	6813      	ldr	r3, [r2, #0]
 8006458:	b10b      	cbz	r3, 800645e <tcpip_thread+0x12>
    tcpip_init_done(tcpip_init_done_arg);
 800645a:	6850      	ldr	r0, [r2, #4]
 800645c:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800645e:	4d27      	ldr	r5, [pc, #156]	; (80064fc <tcpip_thread+0xb0>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8006460:	4f28      	ldr	r7, [pc, #160]	; (8006504 <tcpip_thread+0xb8>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8006462:	4e29      	ldr	r6, [pc, #164]	; (8006508 <tcpip_thread+0xbc>)
  sleeptime = sys_timeouts_sleeptime();
 8006464:	f006 fea8 	bl	800d1b8 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8006468:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 800646a:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800646c:	d113      	bne.n	8006496 <tcpip_thread+0x4a>
    UNLOCK_TCPIP_CORE();
 800646e:	4628      	mov	r0, r5
 8006470:	f007 fab9 	bl	800d9e6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8006474:	2200      	movs	r2, #0
 8006476:	a901      	add	r1, sp, #4
 8006478:	4638      	mov	r0, r7
 800647a:	f007 fa19 	bl	800d8b0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800647e:	4628      	mov	r0, r5
 8006480:	f007 faac 	bl	800d9dc <sys_mutex_lock>
    if (msg == NULL) {
 8006484:	9c01      	ldr	r4, [sp, #4]
 8006486:	b9cc      	cbnz	r4, 80064bc <tcpip_thread+0x70>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8006488:	4633      	mov	r3, r6
 800648a:	2291      	movs	r2, #145	; 0x91
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800648c:	491f      	ldr	r1, [pc, #124]	; (800650c <tcpip_thread+0xc0>)
 800648e:	4820      	ldr	r0, [pc, #128]	; (8006510 <tcpip_thread+0xc4>)
 8006490:	f007 fb52 	bl	800db38 <iprintf>
      break;
 8006494:	e7e6      	b.n	8006464 <tcpip_thread+0x18>
  } else if (sleeptime == 0) {
 8006496:	b910      	cbnz	r0, 800649e <tcpip_thread+0x52>
    sys_check_timeouts();
 8006498:	f006 fe72 	bl	800d180 <sys_check_timeouts>
    goto again;
 800649c:	e7e2      	b.n	8006464 <tcpip_thread+0x18>
  UNLOCK_TCPIP_CORE();
 800649e:	4628      	mov	r0, r5
 80064a0:	f007 faa1 	bl	800d9e6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80064a4:	4622      	mov	r2, r4
 80064a6:	a901      	add	r1, sp, #4
 80064a8:	4638      	mov	r0, r7
 80064aa:	f007 fa01 	bl	800d8b0 <sys_arch_mbox_fetch>
 80064ae:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 80064b0:	4628      	mov	r0, r5
 80064b2:	f007 fa93 	bl	800d9dc <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80064b6:	3401      	adds	r4, #1
 80064b8:	d0ee      	beq.n	8006498 <tcpip_thread+0x4c>
 80064ba:	e7e3      	b.n	8006484 <tcpip_thread+0x38>
  switch (msg->type) {
 80064bc:	7823      	ldrb	r3, [r4, #0]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d00f      	beq.n	80064e2 <tcpip_thread+0x96>
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d013      	beq.n	80064ee <tcpip_thread+0xa2>
 80064c6:	b9b3      	cbnz	r3, 80064f6 <tcpip_thread+0xaa>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80064c8:	6860      	ldr	r0, [r4, #4]
 80064ca:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 80064ce:	4798      	blx	r3
 80064d0:	b110      	cbz	r0, 80064d8 <tcpip_thread+0x8c>
        pbuf_free(msg->msg.inp.p);
 80064d2:	6860      	ldr	r0, [r4, #4]
 80064d4:	f003 f94a 	bl	800976c <pbuf_free>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80064d8:	4621      	mov	r1, r4
 80064da:	2009      	movs	r0, #9
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80064dc:	f002 fed6 	bl	800928c <memp_free>
      break;
 80064e0:	e7c0      	b.n	8006464 <tcpip_thread+0x18>
      msg->msg.cb.function(msg->msg.cb.ctx);
 80064e2:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 80064e6:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80064e8:	4621      	mov	r1, r4
 80064ea:	2008      	movs	r0, #8
 80064ec:	e7f6      	b.n	80064dc <tcpip_thread+0x90>
      msg->msg.cb.function(msg->msg.cb.ctx);
 80064ee:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 80064f2:	4798      	blx	r3
      break;
 80064f4:	e7b6      	b.n	8006464 <tcpip_thread+0x18>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80064f6:	4633      	mov	r3, r6
 80064f8:	22cf      	movs	r2, #207	; 0xcf
 80064fa:	e7c7      	b.n	800648c <tcpip_thread+0x40>
 80064fc:	24006a24 	.word	0x24006a24
 8006500:	24006650 	.word	0x24006650
 8006504:	24006658 	.word	0x24006658
 8006508:	0802040b 	.word	0x0802040b
 800650c:	0802046c 	.word	0x0802046c
 8006510:	0801f8bf 	.word	0x0801f8bf

08006514 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8006514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006516:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8006518:	4810      	ldr	r0, [pc, #64]	; (800655c <tcpip_inpkt+0x48>)
{
 800651a:	460e      	mov	r6, r1
 800651c:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800651e:	f007 f9fa 	bl	800d916 <sys_mbox_valid>
 8006522:	b928      	cbnz	r0, 8006530 <tcpip_inpkt+0x1c>
 8006524:	4b0e      	ldr	r3, [pc, #56]	; (8006560 <tcpip_inpkt+0x4c>)
 8006526:	22fc      	movs	r2, #252	; 0xfc
 8006528:	490e      	ldr	r1, [pc, #56]	; (8006564 <tcpip_inpkt+0x50>)
 800652a:	480f      	ldr	r0, [pc, #60]	; (8006568 <tcpip_inpkt+0x54>)
 800652c:	f007 fb04 	bl	800db38 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8006530:	2009      	movs	r0, #9
 8006532:	f002 fe7b 	bl	800922c <memp_malloc>
  if (msg == NULL) {
 8006536:	4604      	mov	r4, r0
 8006538:	b168      	cbz	r0, 8006556 <tcpip_inpkt+0x42>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 800653a:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
  msg->msg.inp.netif = inp;
  msg->msg.inp.input_fn = input_fn;
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800653c:	4601      	mov	r1, r0
  msg->msg.inp.input_fn = input_fn;
 800653e:	60c5      	str	r5, [r0, #12]
  msg->type = TCPIP_MSG_INPKT;
 8006540:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.netif = inp;
 8006542:	e9c0 7601 	strd	r7, r6, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8006546:	4805      	ldr	r0, [pc, #20]	; (800655c <tcpip_inpkt+0x48>)
 8006548:	f007 f9a8 	bl	800d89c <sys_mbox_trypost>
 800654c:	b128      	cbz	r0, 800655a <tcpip_inpkt+0x46>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800654e:	4621      	mov	r1, r4
 8006550:	2009      	movs	r0, #9
 8006552:	f002 fe9b 	bl	800928c <memp_free>
    return ERR_MEM;
 8006556:	f04f 30ff 	mov.w	r0, #4294967295
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800655a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800655c:	24006658 	.word	0x24006658
 8006560:	0802040b 	.word	0x0802040b
 8006564:	0802048a 	.word	0x0802048a
 8006568:	0801f8bf 	.word	0x0801f8bf

0800656c <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800656c:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 8006570:	f013 0f18 	tst.w	r3, #24
    return tcpip_inpkt(p, inp, ethernet_input);
 8006574:	bf14      	ite	ne
 8006576:	4a02      	ldrne	r2, [pc, #8]	; (8006580 <tcpip_input+0x14>)
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8006578:	4a02      	ldreq	r2, [pc, #8]	; (8006584 <tcpip_input+0x18>)
 800657a:	f7ff bfcb 	b.w	8006514 <tcpip_inpkt>
 800657e:	bf00      	nop
 8006580:	0800d759 	.word	0x0800d759
 8006584:	08008179 	.word	0x08008179

08006588 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8006588:	b570      	push	{r4, r5, r6, lr}
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800658a:	4e06      	ldr	r6, [pc, #24]	; (80065a4 <tcpip_send_msg_wait_sem+0x1c>)
{
 800658c:	460d      	mov	r5, r1
 800658e:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8006590:	4630      	mov	r0, r6
 8006592:	f007 fa23 	bl	800d9dc <sys_mutex_lock>
  fn(apimsg);
 8006596:	4628      	mov	r0, r5
 8006598:	47a0      	blx	r4
  UNLOCK_TCPIP_CORE();
 800659a:	4630      	mov	r0, r6
 800659c:	f007 fa23 	bl	800d9e6 <sys_mutex_unlock>
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80065a0:	2000      	movs	r0, #0
 80065a2:	bd70      	pop	{r4, r5, r6, pc}
 80065a4:	24006a24 	.word	0x24006a24

080065a8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80065a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065aa:	4605      	mov	r5, r0
 80065ac:	460c      	mov	r4, r1
  lwip_init();
 80065ae:	f002 fb5b 	bl	8008c68 <lwip_init>

  tcpip_init_done = initfunc;
 80065b2:	4812      	ldr	r0, [pc, #72]	; (80065fc <tcpip_init+0x54>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80065b4:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 80065b6:	e9c0 5400 	strd	r5, r4, [r0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80065ba:	3008      	adds	r0, #8
 80065bc:	f007 f954 	bl	800d868 <sys_mbox_new>
 80065c0:	b130      	cbz	r0, 80065d0 <tcpip_init+0x28>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80065c2:	4b0f      	ldr	r3, [pc, #60]	; (8006600 <tcpip_init+0x58>)
 80065c4:	f240 2261 	movw	r2, #609	; 0x261
 80065c8:	490e      	ldr	r1, [pc, #56]	; (8006604 <tcpip_init+0x5c>)
 80065ca:	480f      	ldr	r0, [pc, #60]	; (8006608 <tcpip_init+0x60>)
 80065cc:	f007 fab4 	bl	800db38 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80065d0:	480e      	ldr	r0, [pc, #56]	; (800660c <tcpip_init+0x64>)
 80065d2:	f007 f9f5 	bl	800d9c0 <sys_mutex_new>
 80065d6:	b130      	cbz	r0, 80065e6 <tcpip_init+0x3e>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80065d8:	4b09      	ldr	r3, [pc, #36]	; (8006600 <tcpip_init+0x58>)
 80065da:	f240 2265 	movw	r2, #613	; 0x265
 80065de:	490c      	ldr	r1, [pc, #48]	; (8006610 <tcpip_init+0x68>)
 80065e0:	4809      	ldr	r0, [pc, #36]	; (8006608 <tcpip_init+0x60>)
 80065e2:	f007 faa9 	bl	800db38 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80065e6:	2302      	movs	r3, #2
 80065e8:	2200      	movs	r2, #0
 80065ea:	490a      	ldr	r1, [pc, #40]	; (8006614 <tcpip_init+0x6c>)
 80065ec:	9300      	str	r3, [sp, #0]
 80065ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80065f2:	4809      	ldr	r0, [pc, #36]	; (8006618 <tcpip_init+0x70>)
 80065f4:	f007 f9fa 	bl	800d9ec <sys_thread_new>
}
 80065f8:	b003      	add	sp, #12
 80065fa:	bd30      	pop	{r4, r5, pc}
 80065fc:	24006650 	.word	0x24006650
 8006600:	0802040b 	.word	0x0802040b
 8006604:	08020497 	.word	0x08020497
 8006608:	0801f8bf 	.word	0x0801f8bf
 800660c:	24006a24 	.word	0x24006a24
 8006610:	080204ba 	.word	0x080204ba
 8006614:	0800644d 	.word	0x0800644d
 8006618:	080204db 	.word	0x080204db

0800661c <dhcp_set_state>:
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
 800661c:	7943      	ldrb	r3, [r0, #5]
 800661e:	428b      	cmp	r3, r1
    dhcp->state = new_state;
    dhcp->tries = 0;
 8006620:	bf1f      	itttt	ne
 8006622:	2300      	movne	r3, #0
    dhcp->state = new_state;
 8006624:	7141      	strbne	r1, [r0, #5]
    dhcp->tries = 0;
 8006626:	7183      	strbne	r3, [r0, #6]
    dhcp->request_timeout = 0;
 8006628:	8103      	strhne	r3, [r0, #8]
  }
}
 800662a:	4770      	bx	lr

0800662c <dhcp_option_short>:
  return options_out_len;
}

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800662c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800662e:	1c87      	adds	r7, r0, #2
{
 8006630:	4604      	mov	r4, r0
 8006632:	460d      	mov	r5, r1
 8006634:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8006636:	2f44      	cmp	r7, #68	; 0x44
 8006638:	d906      	bls.n	8006648 <dhcp_option_short+0x1c>
 800663a:	4b07      	ldr	r3, [pc, #28]	; (8006658 <dhcp_option_short+0x2c>)
 800663c:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8006640:	4906      	ldr	r1, [pc, #24]	; (800665c <dhcp_option_short+0x30>)
 8006642:	4807      	ldr	r0, [pc, #28]	; (8006660 <dhcp_option_short+0x34>)
 8006644:	f007 fa78 	bl	800db38 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8006648:	0a33      	lsrs	r3, r6, #8
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
  return options_out_len;
}
 800664a:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800664c:	552b      	strb	r3, [r5, r4]
 800664e:	3401      	adds	r4, #1
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8006650:	b2a4      	uxth	r4, r4
 8006652:	552e      	strb	r6, [r5, r4]
}
 8006654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006656:	bf00      	nop
 8006658:	080204e2 	.word	0x080204e2
 800665c:	08020548 	.word	0x08020548
 8006660:	0801f8bf 	.word	0x0801f8bf

08006664 <dhcp_option>:
{
 8006664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006666:	461e      	mov	r6, r3
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8006668:	3302      	adds	r3, #2
{
 800666a:	4604      	mov	r4, r0
 800666c:	460d      	mov	r5, r1
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800666e:	4403      	add	r3, r0
{
 8006670:	4617      	mov	r7, r2
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8006672:	2b44      	cmp	r3, #68	; 0x44
 8006674:	d906      	bls.n	8006684 <dhcp_option+0x20>
 8006676:	4b07      	ldr	r3, [pc, #28]	; (8006694 <dhcp_option+0x30>)
 8006678:	f240 529a 	movw	r2, #1434	; 0x59a
 800667c:	4906      	ldr	r1, [pc, #24]	; (8006698 <dhcp_option+0x34>)
 800667e:	4807      	ldr	r0, [pc, #28]	; (800669c <dhcp_option+0x38>)
 8006680:	f007 fa5a 	bl	800db38 <iprintf>
  options[options_out_len++] = option_type;
 8006684:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = option_len;
 8006686:	1ca0      	adds	r0, r4, #2
  options[options_out_len++] = option_type;
 8006688:	552f      	strb	r7, [r5, r4]
  options[options_out_len++] = option_len;
 800668a:	b29b      	uxth	r3, r3
}
 800668c:	b280      	uxth	r0, r0
  options[options_out_len++] = option_len;
 800668e:	54ee      	strb	r6, [r5, r3]
}
 8006690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006692:	bf00      	nop
 8006694:	080204e2 	.word	0x080204e2
 8006698:	08020583 	.word	0x08020583
 800669c:	0801f8bf 	.word	0x0801f8bf

080066a0 <dhcp_option_byte>:
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80066a0:	2843      	cmp	r0, #67	; 0x43
{
 80066a2:	b570      	push	{r4, r5, r6, lr}
 80066a4:	4604      	mov	r4, r0
 80066a6:	460d      	mov	r5, r1
 80066a8:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80066aa:	d906      	bls.n	80066ba <dhcp_option_byte+0x1a>
 80066ac:	4b05      	ldr	r3, [pc, #20]	; (80066c4 <dhcp_option_byte+0x24>)
 80066ae:	f240 52a6 	movw	r2, #1446	; 0x5a6
 80066b2:	4905      	ldr	r1, [pc, #20]	; (80066c8 <dhcp_option_byte+0x28>)
 80066b4:	4805      	ldr	r0, [pc, #20]	; (80066cc <dhcp_option_byte+0x2c>)
 80066b6:	f007 fa3f 	bl	800db38 <iprintf>
  options[options_out_len++] = value;
 80066ba:	1c60      	adds	r0, r4, #1
 80066bc:	552e      	strb	r6, [r5, r4]
}
 80066be:	b280      	uxth	r0, r0
 80066c0:	bd70      	pop	{r4, r5, r6, pc}
 80066c2:	bf00      	nop
 80066c4:	080204e2 	.word	0x080204e2
 80066c8:	080205c5 	.word	0x080205c5
 80066cc:	0801f8bf 	.word	0x0801f8bf

080066d0 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80066d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80066d2:	1d07      	adds	r7, r0, #4
{
 80066d4:	4604      	mov	r4, r0
 80066d6:	460d      	mov	r5, r1
 80066d8:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80066da:	2f44      	cmp	r7, #68	; 0x44
 80066dc:	d906      	bls.n	80066ec <dhcp_option_long+0x1c>
 80066de:	4b0b      	ldr	r3, [pc, #44]	; (800670c <dhcp_option_long+0x3c>)
 80066e0:	f240 52b7 	movw	r2, #1463	; 0x5b7
 80066e4:	490a      	ldr	r1, [pc, #40]	; (8006710 <dhcp_option_long+0x40>)
 80066e6:	480b      	ldr	r0, [pc, #44]	; (8006714 <dhcp_option_long+0x44>)
 80066e8:	f007 fa26 	bl	800db38 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80066ec:	0e33      	lsrs	r3, r6, #24
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80066ee:	0c32      	lsrs	r2, r6, #16
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80066f0:	552b      	strb	r3, [r5, r4]
 80066f2:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
  return options_out_len;
}
 80066f4:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	54ea      	strb	r2, [r5, r3]
 80066fa:	1ca3      	adds	r3, r4, #2
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80066fc:	3403      	adds	r4, #3
 80066fe:	0a32      	lsrs	r2, r6, #8
 8006700:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8006702:	b2a4      	uxth	r4, r4
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8006704:	54ea      	strb	r2, [r5, r3]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8006706:	552e      	strb	r6, [r5, r4]
}
 8006708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800670a:	bf00      	nop
 800670c:	080204e2 	.word	0x080204e2
 8006710:	080205fa 	.word	0x080205fa
 8006714:	0801f8bf 	.word	0x0801f8bf

08006718 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8006718:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800671c:	460e      	mov	r6, r1
 800671e:	4690      	mov	r8, r2
 8006720:	4699      	mov	r9, r3
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8006722:	4605      	mov	r5, r0
 8006724:	b958      	cbnz	r0, 800673e <dhcp_create_msg+0x26>
 8006726:	462f      	mov	r7, r5
 8006728:	4b3f      	ldr	r3, [pc, #252]	; (8006828 <dhcp_create_msg+0x110>)
 800672a:	f240 7269 	movw	r2, #1897	; 0x769
 800672e:	493f      	ldr	r1, [pc, #252]	; (800682c <dhcp_create_msg+0x114>)
 8006730:	483f      	ldr	r0, [pc, #252]	; (8006830 <dhcp_create_msg+0x118>)
 8006732:	f007 fa01 	bl	800db38 <iprintf>
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
  if (options_out_len) {
    *options_out_len = options_out_len_loc;
  }
  return p_out;
}
 8006736:	4638      	mov	r0, r7
 8006738:	b003      	add	sp, #12
 800673a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800673e:	b941      	cbnz	r1, 8006752 <dhcp_create_msg+0x3a>
 8006740:	4b39      	ldr	r3, [pc, #228]	; (8006828 <dhcp_create_msg+0x110>)
 8006742:	f240 726a 	movw	r2, #1898	; 0x76a
 8006746:	493b      	ldr	r1, [pc, #236]	; (8006834 <dhcp_create_msg+0x11c>)
 8006748:	4637      	mov	r7, r6
 800674a:	4839      	ldr	r0, [pc, #228]	; (8006830 <dhcp_create_msg+0x118>)
 800674c:	f007 f9f4 	bl	800db38 <iprintf>
 8006750:	e7f1      	b.n	8006736 <dhcp_create_msg+0x1e>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8006752:	f44f 7220 	mov.w	r2, #640	; 0x280
 8006756:	f44f 719a 	mov.w	r1, #308	; 0x134
 800675a:	2036      	movs	r0, #54	; 0x36
 800675c:	f003 f86e 	bl	800983c <pbuf_alloc>
  if (p_out == NULL) {
 8006760:	4607      	mov	r7, r0
 8006762:	2800      	cmp	r0, #0
 8006764:	d0e7      	beq.n	8006736 <dhcp_create_msg+0x1e>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8006766:	8943      	ldrh	r3, [r0, #10]
 8006768:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800676c:	d206      	bcs.n	800677c <dhcp_create_msg+0x64>
 800676e:	4b2e      	ldr	r3, [pc, #184]	; (8006828 <dhcp_create_msg+0x110>)
 8006770:	f240 7271 	movw	r2, #1905	; 0x771
 8006774:	4930      	ldr	r1, [pc, #192]	; (8006838 <dhcp_create_msg+0x120>)
 8006776:	482e      	ldr	r0, [pc, #184]	; (8006830 <dhcp_create_msg+0x118>)
 8006778:	f007 f9de 	bl	800db38 <iprintf>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800677c:	f1b8 0f03 	cmp.w	r8, #3
 8006780:	d102      	bne.n	8006788 <dhcp_create_msg+0x70>
 8006782:	7973      	ldrb	r3, [r6, #5]
 8006784:	2b03      	cmp	r3, #3
 8006786:	d107      	bne.n	8006798 <dhcp_create_msg+0x80>
    if (dhcp->tries == 0) {
 8006788:	79b3      	ldrb	r3, [r6, #6]
 800678a:	4c2c      	ldr	r4, [pc, #176]	; (800683c <dhcp_create_msg+0x124>)
 800678c:	b913      	cbnz	r3, 8006794 <dhcp_create_msg+0x7c>
      xid = LWIP_RAND();
 800678e:	f007 f9eb 	bl	800db68 <rand>
 8006792:	6020      	str	r0, [r4, #0]
    dhcp->xid = xid;
 8006794:	6823      	ldr	r3, [r4, #0]
 8006796:	6033      	str	r3, [r6, #0]
  msg_out = (struct dhcp_msg *)p_out->payload;
 8006798:	687c      	ldr	r4, [r7, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800679a:	f44f 729a 	mov.w	r2, #308	; 0x134
 800679e:	2100      	movs	r1, #0
 80067a0:	4620      	mov	r0, r4
 80067a2:	f007 f9c1 	bl	800db28 <memset>
  msg_out->op = DHCP_BOOTREQUEST;
 80067a6:	2301      	movs	r3, #1
 80067a8:	7023      	strb	r3, [r4, #0]
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80067aa:	7063      	strb	r3, [r4, #1]
  msg_out->hlen = netif->hwaddr_len;
 80067ac:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 80067b0:	70a3      	strb	r3, [r4, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80067b2:	6830      	ldr	r0, [r6, #0]
 80067b4:	f002 fa23 	bl	8008bfe <lwip_htonl>
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80067b8:	f1b8 0f04 	cmp.w	r8, #4
  msg_out->xid = lwip_htonl(dhcp->xid);
 80067bc:	6060      	str	r0, [r4, #4]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80067be:	d00a      	beq.n	80067d6 <dhcp_create_msg+0xbe>
 80067c0:	f1a8 0307 	sub.w	r3, r8, #7
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d906      	bls.n	80067d6 <dhcp_create_msg+0xbe>
 80067c8:	f1b8 0f03 	cmp.w	r8, #3
 80067cc:	d105      	bne.n	80067da <dhcp_create_msg+0xc2>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80067ce:	7973      	ldrb	r3, [r6, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80067d0:	3b04      	subs	r3, #4
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d801      	bhi.n	80067da <dhcp_create_msg+0xc2>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80067d6:	686b      	ldr	r3, [r5, #4]
 80067d8:	60e3      	str	r3, [r4, #12]
 80067da:	f105 032a 	add.w	r3, r5, #42	; 0x2a
 80067de:	f104 021c 	add.w	r2, r4, #28
 80067e2:	3530      	adds	r5, #48	; 0x30
    msg_out->chaddr[i] = netif->hwaddr[i];
 80067e4:	f813 1b01 	ldrb.w	r1, [r3], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80067e8:	42ab      	cmp	r3, r5
    msg_out->chaddr[i] = netif->hwaddr[i];
 80067ea:	f802 1b01 	strb.w	r1, [r2], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80067ee:	d1f9      	bne.n	80067e4 <dhcp_create_msg+0xcc>
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80067f0:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 80067f4:	2363      	movs	r3, #99	; 0x63
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80067f6:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
 80067fa:	2000      	movs	r0, #0
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80067fc:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
 8006800:	2253      	movs	r2, #83	; 0x53
 8006802:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
 8006806:	f884 20ee 	strb.w	r2, [r4, #238]	; 0xee
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800680a:	2235      	movs	r2, #53	; 0x35
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800680c:	f884 30ef 	strb.w	r3, [r4, #239]	; 0xef
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8006810:	2301      	movs	r3, #1
 8006812:	9101      	str	r1, [sp, #4]
 8006814:	f7ff ff26 	bl	8006664 <dhcp_option>
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8006818:	4642      	mov	r2, r8
 800681a:	9901      	ldr	r1, [sp, #4]
 800681c:	f7ff ff40 	bl	80066a0 <dhcp_option_byte>
    *options_out_len = options_out_len_loc;
 8006820:	f8a9 0000 	strh.w	r0, [r9]
 8006824:	e787      	b.n	8006736 <dhcp_create_msg+0x1e>
 8006826:	bf00      	nop
 8006828:	080204e2 	.word	0x080204e2
 800682c:	08020634 	.word	0x08020634
 8006830:	0801f8bf 	.word	0x0801f8bf
 8006834:	08020653 	.word	0x08020653
 8006838:	08020671 	.word	0x08020671
 800683c:	2400665c 	.word	0x2400665c

08006840 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8006840:	4603      	mov	r3, r0
 8006842:	4610      	mov	r0, r2
 8006844:	b430      	push	{r4, r5}
  options[options_out_len++] = DHCP_OPTION_END;
 8006846:	1c5c      	adds	r4, r3, #1
 8006848:	25ff      	movs	r5, #255	; 0xff
 800684a:	b2a2      	uxth	r2, r4
 800684c:	54cd      	strb	r5, [r1, r3]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800684e:	fa11 f184 	uxtah	r1, r1, r4
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8006852:	2500      	movs	r5, #0
  options[options_out_len++] = DHCP_OPTION_END;
 8006854:	4614      	mov	r4, r2
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8006856:	2c43      	cmp	r4, #67	; 0x43
 8006858:	d90b      	bls.n	8006872 <dhcp_option_trailer+0x32>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800685a:	2a44      	cmp	r2, #68	; 0x44
 800685c:	f1c3 0143 	rsb	r1, r3, #67	; 0x43
 8006860:	f103 03f1 	add.w	r3, r3, #241	; 0xf1
 8006864:	bf88      	it	hi
 8006866:	2100      	movhi	r1, #0
 8006868:	4419      	add	r1, r3
}
 800686a:	bc30      	pop	{r4, r5}
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800686c:	b289      	uxth	r1, r1
 800686e:	f003 b85f 	b.w	8009930 <pbuf_realloc>
    options[options_out_len++] = 0;
 8006872:	3401      	adds	r4, #1
 8006874:	f801 5b01 	strb.w	r5, [r1], #1
 8006878:	b2a4      	uxth	r4, r4
 800687a:	e7ec      	b.n	8006856 <dhcp_option_trailer+0x16>

0800687c <dhcp_reboot>:
{
 800687c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8006880:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 8006882:	b086      	sub	sp, #24
 8006884:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8006886:	2103      	movs	r1, #3
 8006888:	4620      	mov	r0, r4
 800688a:	f7ff fec7 	bl	800661c <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800688e:	f10d 0316 	add.w	r3, sp, #22
 8006892:	2203      	movs	r2, #3
 8006894:	4621      	mov	r1, r4
 8006896:	4630      	mov	r0, r6
 8006898:	f7ff ff3e 	bl	8006718 <dhcp_create_msg>
  if (p_out != NULL) {
 800689c:	4605      	mov	r5, r0
 800689e:	2800      	cmp	r0, #0
 80068a0:	d067      	beq.n	8006972 <dhcp_reboot+0xf6>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80068a2:	6841      	ldr	r1, [r0, #4]
 80068a4:	2302      	movs	r3, #2
 80068a6:	2239      	movs	r2, #57	; 0x39
 80068a8:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80068ac:	31f0      	adds	r1, #240	; 0xf0
 80068ae:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006980 <dhcp_reboot+0x104>
 80068b2:	9103      	str	r1, [sp, #12]
 80068b4:	f7ff fed6 	bl	8006664 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80068b8:	f44f 7210 	mov.w	r2, #576	; 0x240
 80068bc:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80068be:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80068c2:	f7ff feb3 	bl	800662c <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80068c6:	2304      	movs	r3, #4
 80068c8:	2232      	movs	r2, #50	; 0x32
 80068ca:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80068cc:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80068d0:	f7ff fec8 	bl	8006664 <dhcp_option>
 80068d4:	4607      	mov	r7, r0
 80068d6:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80068da:	69e0      	ldr	r0, [r4, #28]
 80068dc:	f002 f98f 	bl	8008bfe <lwip_htonl>
 80068e0:	9903      	ldr	r1, [sp, #12]
 80068e2:	4602      	mov	r2, r0
 80068e4:	4638      	mov	r0, r7
 80068e6:	f7ff fef3 	bl	80066d0 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80068ea:	9903      	ldr	r1, [sp, #12]
 80068ec:	2303      	movs	r3, #3
 80068ee:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80068f0:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80068f4:	2703      	movs	r7, #3
 80068f6:	f7ff feb5 	bl	8006664 <dhcp_option>
 80068fa:	9903      	ldr	r1, [sp, #12]
 80068fc:	f8ad 0016 	strh.w	r0, [sp, #22]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8006900:	3f01      	subs	r7, #1
 8006902:	f818 2b01 	ldrb.w	r2, [r8], #1
 8006906:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800690a:	9103      	str	r1, [sp, #12]
 800690c:	f7ff fec8 	bl	80066a0 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8006910:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8006914:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8006916:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800691a:	d1f1      	bne.n	8006900 <dhcp_reboot+0x84>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800691c:	462a      	mov	r2, r5
 800691e:	f7ff ff8f 	bl	8006840 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8006922:	4815      	ldr	r0, [pc, #84]	; (8006978 <dhcp_reboot+0xfc>)
 8006924:	9600      	str	r6, [sp, #0]
 8006926:	2343      	movs	r3, #67	; 0x43
 8006928:	4a14      	ldr	r2, [pc, #80]	; (800697c <dhcp_reboot+0x100>)
 800692a:	4629      	mov	r1, r5
 800692c:	6840      	ldr	r0, [r0, #4]
 800692e:	f006 fe39 	bl	800d5a4 <udp_sendto_if>
 8006932:	4606      	mov	r6, r0
    pbuf_free(p_out);
 8006934:	4628      	mov	r0, r5
 8006936:	f002 ff19 	bl	800976c <pbuf_free>
  if (dhcp->tries < 255) {
 800693a:	79a3      	ldrb	r3, [r4, #6]
}
 800693c:	4630      	mov	r0, r6
  if (dhcp->tries < 255) {
 800693e:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8006940:	bf1c      	itt	ne
 8006942:	3301      	addne	r3, #1
 8006944:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8006946:	79a3      	ldrb	r3, [r4, #6]
 8006948:	2b09      	cmp	r3, #9
 800694a:	bf96      	itet	ls
 800694c:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8006950:	f242 7310 	movwhi	r3, #10000	; 0x2710
 8006954:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8006958:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800695c:	bf9c      	itt	ls
 800695e:	00db      	lslls	r3, r3, #3
 8006960:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8006962:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8006966:	fbb3 f3f2 	udiv	r3, r3, r2
 800696a:	8123      	strh	r3, [r4, #8]
}
 800696c:	b006      	add	sp, #24
 800696e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = ERR_MEM;
 8006972:	f04f 36ff 	mov.w	r6, #4294967295
 8006976:	e7e0      	b.n	800693a <dhcp_reboot+0xbe>
 8006978:	2400665c 	.word	0x2400665c
 800697c:	0800f6dc 	.word	0x0800f6dc
 8006980:	0800f6d6 	.word	0x0800f6d6

08006984 <dhcp_select>:
{
 8006984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8006988:	4607      	mov	r7, r0
{
 800698a:	b085      	sub	sp, #20
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800698c:	b960      	cbnz	r0, 80069a8 <dhcp_select+0x24>
 800698e:	f06f 050f 	mvn.w	r5, #15
 8006992:	4b52      	ldr	r3, [pc, #328]	; (8006adc <dhcp_select+0x158>)
 8006994:	f240 1277 	movw	r2, #375	; 0x177
 8006998:	4951      	ldr	r1, [pc, #324]	; (8006ae0 <dhcp_select+0x15c>)
 800699a:	4852      	ldr	r0, [pc, #328]	; (8006ae4 <dhcp_select+0x160>)
 800699c:	f007 f8cc 	bl	800db38 <iprintf>
}
 80069a0:	4628      	mov	r0, r5
 80069a2:	b005      	add	sp, #20
 80069a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  dhcp = netif_dhcp_data(netif);
 80069a8:	6a44      	ldr	r4, [r0, #36]	; 0x24
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80069aa:	b94c      	cbnz	r4, 80069c0 <dhcp_select+0x3c>
 80069ac:	4b4b      	ldr	r3, [pc, #300]	; (8006adc <dhcp_select+0x158>)
 80069ae:	f240 1279 	movw	r2, #377	; 0x179
 80069b2:	494d      	ldr	r1, [pc, #308]	; (8006ae8 <dhcp_select+0x164>)
 80069b4:	f06f 0505 	mvn.w	r5, #5
 80069b8:	484a      	ldr	r0, [pc, #296]	; (8006ae4 <dhcp_select+0x160>)
 80069ba:	f007 f8bd 	bl	800db38 <iprintf>
 80069be:	e7ef      	b.n	80069a0 <dhcp_select+0x1c>
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80069c0:	2101      	movs	r1, #1
 80069c2:	4620      	mov	r0, r4
 80069c4:	f7ff fe2a 	bl	800661c <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80069c8:	f10d 030e 	add.w	r3, sp, #14
 80069cc:	2203      	movs	r2, #3
 80069ce:	4621      	mov	r1, r4
 80069d0:	4638      	mov	r0, r7
 80069d2:	f7ff fea1 	bl	8006718 <dhcp_create_msg>
  if (p_out != NULL) {
 80069d6:	4606      	mov	r6, r0
 80069d8:	2800      	cmp	r0, #0
 80069da:	d07b      	beq.n	8006ad4 <dhcp_select+0x150>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80069dc:	6845      	ldr	r5, [r0, #4]
 80069de:	2302      	movs	r3, #2
 80069e0:	2239      	movs	r2, #57	; 0x39
 80069e2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 80069e6:	35f0      	adds	r5, #240	; 0xf0
 80069e8:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8006af8 <dhcp_select+0x174>
 80069ec:	4629      	mov	r1, r5
 80069ee:	f7ff fe39 	bl	8006664 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80069f2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80069f4:	4629      	mov	r1, r5
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80069f6:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80069fa:	f7ff fe17 	bl	800662c <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80069fe:	2304      	movs	r3, #4
 8006a00:	2232      	movs	r2, #50	; 0x32
 8006a02:	4629      	mov	r1, r5
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8006a04:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8006a08:	f7ff fe2c 	bl	8006664 <dhcp_option>
 8006a0c:	4680      	mov	r8, r0
 8006a0e:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8006a12:	69e0      	ldr	r0, [r4, #28]
 8006a14:	f002 f8f3 	bl	8008bfe <lwip_htonl>
 8006a18:	4629      	mov	r1, r5
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	4640      	mov	r0, r8
 8006a1e:	f7ff fe57 	bl	80066d0 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8006a22:	2304      	movs	r3, #4
 8006a24:	2236      	movs	r2, #54	; 0x36
 8006a26:	4629      	mov	r1, r5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8006a28:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8006a2c:	f7ff fe1a 	bl	8006664 <dhcp_option>
 8006a30:	4680      	mov	r8, r0
 8006a32:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8006a36:	69a0      	ldr	r0, [r4, #24]
 8006a38:	f002 f8e1 	bl	8008bfe <lwip_htonl>
 8006a3c:	4629      	mov	r1, r5
 8006a3e:	4602      	mov	r2, r0
 8006a40:	4640      	mov	r0, r8
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8006a42:	f04f 0803 	mov.w	r8, #3
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8006a46:	f7ff fe43 	bl	80066d0 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	2237      	movs	r2, #55	; 0x37
 8006a4e:	4629      	mov	r1, r5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8006a50:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8006a54:	f7ff fe06 	bl	8006664 <dhcp_option>
 8006a58:	f8ad 000e 	strh.w	r0, [sp, #14]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8006a5c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006a60:	f819 2b01 	ldrb.w	r2, [r9], #1
 8006a64:	4629      	mov	r1, r5
 8006a66:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8006a6a:	f7ff fe19 	bl	80066a0 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8006a6e:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8006a72:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8006a76:	d1f1      	bne.n	8006a5c <dhcp_select+0xd8>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8006a78:	4629      	mov	r1, r5
 8006a7a:	4632      	mov	r2, r6
 8006a7c:	f7ff fee0 	bl	8006840 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8006a80:	4b1a      	ldr	r3, [pc, #104]	; (8006aec <dhcp_select+0x168>)
 8006a82:	481b      	ldr	r0, [pc, #108]	; (8006af0 <dhcp_select+0x16c>)
 8006a84:	4631      	mov	r1, r6
 8006a86:	4a1b      	ldr	r2, [pc, #108]	; (8006af4 <dhcp_select+0x170>)
 8006a88:	e9cd 7300 	strd	r7, r3, [sp]
 8006a8c:	2343      	movs	r3, #67	; 0x43
 8006a8e:	6840      	ldr	r0, [r0, #4]
 8006a90:	f006 fcf0 	bl	800d474 <udp_sendto_if_src>
 8006a94:	4605      	mov	r5, r0
    pbuf_free(p_out);
 8006a96:	4630      	mov	r0, r6
 8006a98:	f002 fe68 	bl	800976c <pbuf_free>
  if (dhcp->tries < 255) {
 8006a9c:	79a3      	ldrb	r3, [r4, #6]
 8006a9e:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8006aa0:	bf1c      	itt	ne
 8006aa2:	3301      	addne	r3, #1
 8006aa4:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8006aa6:	79a2      	ldrb	r2, [r4, #6]
 8006aa8:	2a05      	cmp	r2, #5
 8006aaa:	bf97      	itett	ls
 8006aac:	2301      	movls	r3, #1
 8006aae:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 8006ab2:	4093      	lslls	r3, r2
 8006ab4:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8006ab8:	bf98      	it	ls
 8006aba:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8006abe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8006ac2:	bf9c      	itt	ls
 8006ac4:	00db      	lslls	r3, r3, #3
 8006ac6:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8006ac8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8006acc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ad0:	8123      	strh	r3, [r4, #8]
  return result;
 8006ad2:	e765      	b.n	80069a0 <dhcp_select+0x1c>
    result = ERR_MEM;
 8006ad4:	f04f 35ff 	mov.w	r5, #4294967295
 8006ad8:	e7e0      	b.n	8006a9c <dhcp_select+0x118>
 8006ada:	bf00      	nop
 8006adc:	080204e2 	.word	0x080204e2
 8006ae0:	080206b1 	.word	0x080206b1
 8006ae4:	0801f8bf 	.word	0x0801f8bf
 8006ae8:	080206cc 	.word	0x080206cc
 8006aec:	0800f6e0 	.word	0x0800f6e0
 8006af0:	2400665c 	.word	0x2400665c
 8006af4:	0800f6dc 	.word	0x0800f6dc
 8006af8:	0800f6d6 	.word	0x0800f6d6

08006afc <dhcp_discover>:
{
 8006afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8006b00:	2300      	movs	r3, #0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8006b02:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 8006b04:	b086      	sub	sp, #24
 8006b06:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8006b08:	2106      	movs	r1, #6
 8006b0a:	4620      	mov	r0, r4
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8006b0c:	61e3      	str	r3, [r4, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8006b0e:	f7ff fd85 	bl	800661c <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8006b12:	f10d 0316 	add.w	r3, sp, #22
 8006b16:	2201      	movs	r2, #1
 8006b18:	4621      	mov	r1, r4
 8006b1a:	4630      	mov	r0, r6
 8006b1c:	f7ff fdfc 	bl	8006718 <dhcp_create_msg>
  if (p_out != NULL) {
 8006b20:	4605      	mov	r5, r0
 8006b22:	2800      	cmp	r0, #0
 8006b24:	d039      	beq.n	8006b9a <dhcp_discover+0x9e>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8006b26:	6841      	ldr	r1, [r0, #4]
 8006b28:	2302      	movs	r3, #2
 8006b2a:	2239      	movs	r2, #57	; 0x39
 8006b2c:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8006b30:	31f0      	adds	r1, #240	; 0xf0
 8006b32:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8006be4 <dhcp_discover+0xe8>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8006b36:	2703      	movs	r7, #3
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8006b38:	9103      	str	r1, [sp, #12]
 8006b3a:	f7ff fd93 	bl	8006664 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8006b3e:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 8006b40:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8006b42:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8006b46:	f7ff fd71 	bl	800662c <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8006b4a:	9903      	ldr	r1, [sp, #12]
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8006b50:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8006b54:	f7ff fd86 	bl	8006664 <dhcp_option>
 8006b58:	9903      	ldr	r1, [sp, #12]
 8006b5a:	f8ad 0016 	strh.w	r0, [sp, #22]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8006b5e:	3f01      	subs	r7, #1
 8006b60:	f818 2b01 	ldrb.w	r2, [r8], #1
 8006b64:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8006b68:	9103      	str	r1, [sp, #12]
 8006b6a:	f7ff fd99 	bl	80066a0 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8006b6e:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8006b72:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8006b74:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8006b78:	d1f1      	bne.n	8006b5e <dhcp_discover+0x62>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8006b7a:	462a      	mov	r2, r5
 8006b7c:	f7ff fe60 	bl	8006840 <dhcp_option_trailer>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8006b80:	4b15      	ldr	r3, [pc, #84]	; (8006bd8 <dhcp_discover+0xdc>)
 8006b82:	4816      	ldr	r0, [pc, #88]	; (8006bdc <dhcp_discover+0xe0>)
 8006b84:	4629      	mov	r1, r5
 8006b86:	4a16      	ldr	r2, [pc, #88]	; (8006be0 <dhcp_discover+0xe4>)
 8006b88:	e9cd 6300 	strd	r6, r3, [sp]
 8006b8c:	2343      	movs	r3, #67	; 0x43
 8006b8e:	6840      	ldr	r0, [r0, #4]
 8006b90:	f006 fc70 	bl	800d474 <udp_sendto_if_src>
    pbuf_free(p_out);
 8006b94:	4628      	mov	r0, r5
 8006b96:	f002 fde9 	bl	800976c <pbuf_free>
  if (dhcp->tries < 255) {
 8006b9a:	79a3      	ldrb	r3, [r4, #6]
}
 8006b9c:	2000      	movs	r0, #0
  if (dhcp->tries < 255) {
 8006b9e:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8006ba0:	bf1c      	itt	ne
 8006ba2:	3301      	addne	r3, #1
 8006ba4:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8006ba6:	79a2      	ldrb	r2, [r4, #6]
 8006ba8:	2a05      	cmp	r2, #5
 8006baa:	bf97      	itett	ls
 8006bac:	2301      	movls	r3, #1
 8006bae:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 8006bb2:	4093      	lslls	r3, r2
 8006bb4:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8006bb8:	bf98      	it	ls
 8006bba:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8006bbe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8006bc2:	bf9c      	itt	ls
 8006bc4:	00db      	lslls	r3, r3, #3
 8006bc6:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8006bc8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8006bcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bd0:	8123      	strh	r3, [r4, #8]
}
 8006bd2:	b006      	add	sp, #24
 8006bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bd8:	0800f6e0 	.word	0x0800f6e0
 8006bdc:	2400665c 	.word	0x2400665c
 8006be0:	0800f6dc 	.word	0x0800f6dc
 8006be4:	0800f6d6 	.word	0x0800f6d6

08006be8 <dhcp_check>:
{
 8006be8:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8006bea:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 8006bec:	4605      	mov	r5, r0
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8006bee:	2108      	movs	r1, #8
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	f7ff fd13 	bl	800661c <dhcp_set_state>
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f104 011c 	add.w	r1, r4, #28
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	f001 f849 	bl	8007c94 <etharp_query>
  if (dhcp->tries < 255) {
 8006c02:	79a3      	ldrb	r3, [r4, #6]
 8006c04:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8006c06:	bf1c      	itt	ne
 8006c08:	3301      	addne	r3, #1
 8006c0a:	71a3      	strbne	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	8123      	strh	r3, [r4, #8]
}
 8006c10:	bd38      	pop	{r3, r4, r5, pc}
	...

08006c14 <dhcp_bind>:
{
 8006c14:	b523      	push	{r0, r1, r5, lr}
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8006c16:	4605      	mov	r5, r0
 8006c18:	b940      	cbnz	r0, 8006c2c <dhcp_bind+0x18>
 8006c1a:	4b3d      	ldr	r3, [pc, #244]	; (8006d10 <dhcp_bind+0xfc>)
 8006c1c:	f240 4215 	movw	r2, #1045	; 0x415
 8006c20:	493c      	ldr	r1, [pc, #240]	; (8006d14 <dhcp_bind+0x100>)
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8006c22:	483d      	ldr	r0, [pc, #244]	; (8006d18 <dhcp_bind+0x104>)
 8006c24:	f006 ff88 	bl	800db38 <iprintf>
}
 8006c28:	b002      	add	sp, #8
 8006c2a:	bd20      	pop	{r5, pc}
  dhcp = netif_dhcp_data(netif);
 8006c2c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8006c2e:	b920      	cbnz	r0, 8006c3a <dhcp_bind+0x26>
 8006c30:	4b37      	ldr	r3, [pc, #220]	; (8006d10 <dhcp_bind+0xfc>)
 8006c32:	f240 4217 	movw	r2, #1047	; 0x417
 8006c36:	4939      	ldr	r1, [pc, #228]	; (8006d1c <dhcp_bind+0x108>)
 8006c38:	e7f3      	b.n	8006c22 <dhcp_bind+0xe>
  dhcp->lease_used = 0;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	8243      	strh	r3, [r0, #18]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8006c3e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006c40:	1c5a      	adds	r2, r3, #1
 8006c42:	d00c      	beq.n	8006c5e <dhcp_bind+0x4a>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8006c44:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 8006c46:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8006c4a:	bf36      	itet	cc
 8006c4c:	223c      	movcc	r2, #60	; 0x3c
      timeout = 0xffff;
 8006c4e:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8006c52:	fbb3 f3f2 	udivcc	r3, r3, r2
    dhcp->t0_timeout = (u16_t)timeout;
 8006c56:	b29a      	uxth	r2, r3
    if (dhcp->t0_timeout == 0) {
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d042      	beq.n	8006ce2 <dhcp_bind+0xce>
    dhcp->t0_timeout = (u16_t)timeout;
 8006c5c:	8282      	strh	r2, [r0, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8006c5e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006c60:	1c59      	adds	r1, r3, #1
 8006c62:	d00e      	beq.n	8006c82 <dhcp_bind+0x6e>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8006c64:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 8006c66:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8006c6a:	bf36      	itet	cc
 8006c6c:	223c      	movcc	r2, #60	; 0x3c
      timeout = 0xffff;
 8006c6e:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8006c72:	fbb3 f3f2 	udivcc	r3, r3, r2
    dhcp->t1_timeout = (u16_t)timeout;
 8006c76:	b29a      	uxth	r2, r3
    if (dhcp->t1_timeout == 0) {
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d035      	beq.n	8006ce8 <dhcp_bind+0xd4>
    dhcp->t1_timeout = (u16_t)timeout;
 8006c7c:	8142      	strh	r2, [r0, #10]
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8006c7e:	8943      	ldrh	r3, [r0, #10]
 8006c80:	81c3      	strh	r3, [r0, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8006c82:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006c84:	1c5a      	adds	r2, r3, #1
 8006c86:	d00d      	beq.n	8006ca4 <dhcp_bind+0x90>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8006c88:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 8006c8a:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8006c8e:	bf36      	itet	cc
 8006c90:	223c      	movcc	r2, #60	; 0x3c
      timeout = 0xffff;
 8006c92:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8006c96:	fbb3 f3f2 	udivcc	r3, r3, r2
    dhcp->t2_timeout = (u16_t)timeout;
 8006c9a:	b29a      	uxth	r2, r3
    if (dhcp->t2_timeout == 0) {
 8006c9c:	b33b      	cbz	r3, 8006cee <dhcp_bind+0xda>
    dhcp->t2_timeout = (u16_t)timeout;
 8006c9e:	8182      	strh	r2, [r0, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8006ca0:	8983      	ldrh	r3, [r0, #12]
 8006ca2:	8203      	strh	r3, [r0, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8006ca4:	8983      	ldrh	r3, [r0, #12]
 8006ca6:	8942      	ldrh	r2, [r0, #10]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d302      	bcc.n	8006cb2 <dhcp_bind+0x9e>
 8006cac:	b10b      	cbz	r3, 8006cb2 <dhcp_bind+0x9e>
    dhcp->t1_timeout = 0;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	8143      	strh	r3, [r0, #10]
  if (dhcp->subnet_mask_given) {
 8006cb2:	79c3      	ldrb	r3, [r0, #7]
 8006cb4:	b1f3      	cbz	r3, 8006cf4 <dhcp_bind+0xe0>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8006cb6:	6a03      	ldr	r3, [r0, #32]
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8006cb8:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8006cba:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006cbc:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 8006cbe:	b92b      	cbnz	r3, 8006ccc <dhcp_bind+0xb8>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8006cc0:	69c3      	ldr	r3, [r0, #28]
 8006cc2:	9a00      	ldr	r2, [sp, #0]
 8006cc4:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8006cc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cca:	9301      	str	r3, [sp, #4]
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8006ccc:	210a      	movs	r1, #10
 8006cce:	f7ff fca5 	bl	800661c <dhcp_set_state>
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8006cd2:	ab01      	add	r3, sp, #4
 8006cd4:	f100 011c 	add.w	r1, r0, #28
 8006cd8:	466a      	mov	r2, sp
 8006cda:	4628      	mov	r0, r5
 8006cdc:	f002 fb46 	bl	800936c <netif_set_addr>
 8006ce0:	e7a2      	b.n	8006c28 <dhcp_bind+0x14>
      dhcp->t0_timeout = 1;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	8283      	strh	r3, [r0, #20]
 8006ce6:	e7ba      	b.n	8006c5e <dhcp_bind+0x4a>
      dhcp->t1_timeout = 1;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	8143      	strh	r3, [r0, #10]
 8006cec:	e7c7      	b.n	8006c7e <dhcp_bind+0x6a>
      dhcp->t2_timeout = 1;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	8183      	strh	r3, [r0, #12]
 8006cf2:	e7d5      	b.n	8006ca0 <dhcp_bind+0x8c>
    if (first_octet <= 127) {
 8006cf4:	f990 201c 	ldrsb.w	r2, [r0, #28]
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8006cf8:	7f03      	ldrb	r3, [r0, #28]
    if (first_octet <= 127) {
 8006cfa:	2a00      	cmp	r2, #0
 8006cfc:	db01      	blt.n	8006d02 <dhcp_bind+0xee>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8006cfe:	23ff      	movs	r3, #255	; 0xff
 8006d00:	e7da      	b.n	8006cb8 <dhcp_bind+0xa4>
    } else if (first_octet >= 192) {
 8006d02:	2bbf      	cmp	r3, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8006d04:	bf8c      	ite	hi
 8006d06:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8006d0a:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 8006d0e:	e7d3      	b.n	8006cb8 <dhcp_bind+0xa4>
 8006d10:	080204e2 	.word	0x080204e2
 8006d14:	080206e6 	.word	0x080206e6
 8006d18:	0801f8bf 	.word	0x0801f8bf
 8006d1c:	080206ff 	.word	0x080206ff

08006d20 <dhcp_inc_pcb_refcount>:
{
 8006d20:	b510      	push	{r4, lr}
  if (dhcp_pcb_refcount == 0) {
 8006d22:	4c14      	ldr	r4, [pc, #80]	; (8006d74 <dhcp_inc_pcb_refcount+0x54>)
 8006d24:	7a23      	ldrb	r3, [r4, #8]
 8006d26:	b9eb      	cbnz	r3, 8006d64 <dhcp_inc_pcb_refcount+0x44>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8006d28:	6863      	ldr	r3, [r4, #4]
 8006d2a:	b12b      	cbz	r3, 8006d38 <dhcp_inc_pcb_refcount+0x18>
 8006d2c:	4b12      	ldr	r3, [pc, #72]	; (8006d78 <dhcp_inc_pcb_refcount+0x58>)
 8006d2e:	22e5      	movs	r2, #229	; 0xe5
 8006d30:	4912      	ldr	r1, [pc, #72]	; (8006d7c <dhcp_inc_pcb_refcount+0x5c>)
 8006d32:	4813      	ldr	r0, [pc, #76]	; (8006d80 <dhcp_inc_pcb_refcount+0x60>)
 8006d34:	f006 ff00 	bl	800db38 <iprintf>
    dhcp_pcb = udp_new();
 8006d38:	f006 fce8 	bl	800d70c <udp_new>
 8006d3c:	6060      	str	r0, [r4, #4]
    if (dhcp_pcb == NULL) {
 8006d3e:	b1b0      	cbz	r0, 8006d6e <dhcp_inc_pcb_refcount+0x4e>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8006d40:	7a42      	ldrb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8006d42:	4910      	ldr	r1, [pc, #64]	; (8006d84 <dhcp_inc_pcb_refcount+0x64>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8006d44:	f042 0220 	orr.w	r2, r2, #32
 8006d48:	7242      	strb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8006d4a:	2244      	movs	r2, #68	; 0x44
 8006d4c:	f006 fb2a 	bl	800d3a4 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8006d50:	2243      	movs	r2, #67	; 0x43
 8006d52:	490c      	ldr	r1, [pc, #48]	; (8006d84 <dhcp_inc_pcb_refcount+0x64>)
 8006d54:	6860      	ldr	r0, [r4, #4]
 8006d56:	f006 fc65 	bl	800d624 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	490a      	ldr	r1, [pc, #40]	; (8006d88 <dhcp_inc_pcb_refcount+0x68>)
 8006d5e:	6860      	ldr	r0, [r4, #4]
 8006d60:	f006 fc9c 	bl	800d69c <udp_recv>
  dhcp_pcb_refcount++;
 8006d64:	7a23      	ldrb	r3, [r4, #8]
  return ERR_OK;
 8006d66:	2000      	movs	r0, #0
  dhcp_pcb_refcount++;
 8006d68:	3301      	adds	r3, #1
 8006d6a:	7223      	strb	r3, [r4, #8]
}
 8006d6c:	bd10      	pop	{r4, pc}
      return ERR_MEM;
 8006d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d72:	e7fb      	b.n	8006d6c <dhcp_inc_pcb_refcount+0x4c>
 8006d74:	2400665c 	.word	0x2400665c
 8006d78:	080204e2 	.word	0x080204e2
 8006d7c:	08020717 	.word	0x08020717
 8006d80:	0801f8bf 	.word	0x0801f8bf
 8006d84:	0800f6e0 	.word	0x0800f6e0
 8006d88:	08006e2d 	.word	0x08006e2d

08006d8c <dhcp_handle_ack.isra.0>:
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 8006d8c:	b538      	push	{r3, r4, r5, lr}
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8006d8e:	2300      	movs	r3, #0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8006d90:	4d16      	ldr	r5, [pc, #88]	; (8006dec <dhcp_handle_ack.isra.0+0x60>)
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 8006d92:	4604      	mov	r4, r0
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8006d94:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8006d98:	78eb      	ldrb	r3, [r5, #3]
 8006d9a:	b113      	cbz	r3, 8006da2 <dhcp_handle_ack.isra.0+0x16>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8006d9c:	4b14      	ldr	r3, [pc, #80]	; (8006df0 <dhcp_handle_ack.isra.0+0x64>)
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	6283      	str	r3, [r0, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8006da2:	792b      	ldrb	r3, [r5, #4]
 8006da4:	b1d3      	cbz	r3, 8006ddc <dhcp_handle_ack.isra.0+0x50>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8006da6:	4b12      	ldr	r3, [pc, #72]	; (8006df0 <dhcp_handle_ack.isra.0+0x64>)
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8006dac:	796b      	ldrb	r3, [r5, #5]
 8006dae:	b1c3      	cbz	r3, 8006de2 <dhcp_handle_ack.isra.0+0x56>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8006db0:	4b0f      	ldr	r3, [pc, #60]	; (8006df0 <dhcp_handle_ack.isra.0+0x64>)
 8006db2:	695b      	ldr	r3, [r3, #20]
 8006db4:	6323      	str	r3, [r4, #48]	; 0x30
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8006db6:	690b      	ldr	r3, [r1, #16]
 8006db8:	61e3      	str	r3, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8006dba:	79ab      	ldrb	r3, [r5, #6]
 8006dbc:	b12b      	cbz	r3, 8006dca <dhcp_handle_ack.isra.0+0x3e>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8006dbe:	4b0c      	ldr	r3, [pc, #48]	; (8006df0 <dhcp_handle_ack.isra.0+0x64>)
 8006dc0:	6998      	ldr	r0, [r3, #24]
 8006dc2:	f001 ff1c 	bl	8008bfe <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 8006dc6:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8006dc8:	6220      	str	r0, [r4, #32]
    dhcp->subnet_mask_given = 0;
 8006dca:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8006dcc:	79eb      	ldrb	r3, [r5, #7]
 8006dce:	b123      	cbz	r3, 8006dda <dhcp_handle_ack.isra.0+0x4e>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8006dd0:	4b07      	ldr	r3, [pc, #28]	; (8006df0 <dhcp_handle_ack.isra.0+0x64>)
 8006dd2:	69d8      	ldr	r0, [r3, #28]
 8006dd4:	f001 ff13 	bl	8008bfe <lwip_htonl>
 8006dd8:	6260      	str	r0, [r4, #36]	; 0x24
}
 8006dda:	bd38      	pop	{r3, r4, r5, pc}
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8006ddc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006dde:	085b      	lsrs	r3, r3, #1
 8006de0:	e7e3      	b.n	8006daa <dhcp_handle_ack.isra.0+0x1e>
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8006de2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006de4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006de8:	08db      	lsrs	r3, r3, #3
 8006dea:	e7e3      	b.n	8006db4 <dhcp_handle_ack.isra.0+0x28>
 8006dec:	24006a28 	.word	0x24006a28
 8006df0:	24006a30 	.word	0x24006a30

08006df4 <dhcp_dec_pcb_refcount>:
{
 8006df4:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8006df6:	4c09      	ldr	r4, [pc, #36]	; (8006e1c <dhcp_dec_pcb_refcount+0x28>)
 8006df8:	7a23      	ldrb	r3, [r4, #8]
 8006dfa:	b92b      	cbnz	r3, 8006e08 <dhcp_dec_pcb_refcount+0x14>
 8006dfc:	4b08      	ldr	r3, [pc, #32]	; (8006e20 <dhcp_dec_pcb_refcount+0x2c>)
 8006dfe:	22ff      	movs	r2, #255	; 0xff
 8006e00:	4908      	ldr	r1, [pc, #32]	; (8006e24 <dhcp_dec_pcb_refcount+0x30>)
 8006e02:	4809      	ldr	r0, [pc, #36]	; (8006e28 <dhcp_dec_pcb_refcount+0x34>)
 8006e04:	f006 fe98 	bl	800db38 <iprintf>
  dhcp_pcb_refcount--;
 8006e08:	7a25      	ldrb	r5, [r4, #8]
 8006e0a:	3d01      	subs	r5, #1
 8006e0c:	b2ed      	uxtb	r5, r5
 8006e0e:	7225      	strb	r5, [r4, #8]
  if (dhcp_pcb_refcount == 0) {
 8006e10:	b91d      	cbnz	r5, 8006e1a <dhcp_dec_pcb_refcount+0x26>
    udp_remove(dhcp_pcb);
 8006e12:	6860      	ldr	r0, [r4, #4]
 8006e14:	f006 fc54 	bl	800d6c0 <udp_remove>
    dhcp_pcb = NULL;
 8006e18:	6065      	str	r5, [r4, #4]
}
 8006e1a:	bd38      	pop	{r3, r4, r5, pc}
 8006e1c:	2400665c 	.word	0x2400665c
 8006e20:	080204e2 	.word	0x080204e2
 8006e24:	0802073c 	.word	0x0802073c
 8006e28:	0801f8bf 	.word	0x0801f8bf

08006e2c <dhcp_recv>:
  struct netif *netif = ip_current_input_netif();
 8006e2c:	4bb2      	ldr	r3, [pc, #712]	; (80070f8 <dhcp_recv+0x2cc>)
{
 8006e2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 8006e32:	685d      	ldr	r5, [r3, #4]
{
 8006e34:	b089      	sub	sp, #36	; 0x24
 8006e36:	4693      	mov	fp, r2
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8006e38:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006e3a:	9301      	str	r3, [sp, #4]
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d03b      	beq.n	8006eb8 <dhcp_recv+0x8c>
 8006e40:	791b      	ldrb	r3, [r3, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d038      	beq.n	8006eb8 <dhcp_recv+0x8c>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 8006e46:	8953      	ldrh	r3, [r2, #10]
 8006e48:	2b2b      	cmp	r3, #43	; 0x2b
 8006e4a:	d935      	bls.n	8006eb8 <dhcp_recv+0x8c>
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8006e4c:	6852      	ldr	r2, [r2, #4]
  if (reply_msg->op != DHCP_BOOTREPLY) {
 8006e4e:	7813      	ldrb	r3, [r2, #0]
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d131      	bne.n	8006eb8 <dhcp_recv+0x8c>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8006e54:	f895 4030 	ldrb.w	r4, [r5, #48]	; 0x30
 8006e58:	f105 002a 	add.w	r0, r5, #42	; 0x2a
 8006e5c:	f102 011c 	add.w	r1, r2, #28
 8006e60:	2300      	movs	r3, #0
 8006e62:	b2de      	uxtb	r6, r3
 8006e64:	42b4      	cmp	r4, r6
 8006e66:	d901      	bls.n	8006e6c <dhcp_recv+0x40>
 8006e68:	2b06      	cmp	r3, #6
 8006e6a:	d11e      	bne.n	8006eaa <dhcp_recv+0x7e>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8006e6c:	6850      	ldr	r0, [r2, #4]
 8006e6e:	f001 fec6 	bl	8008bfe <lwip_htonl>
 8006e72:	9b01      	ldr	r3, [sp, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4298      	cmp	r0, r3
 8006e78:	d11e      	bne.n	8006eb8 <dhcp_recv+0x8c>
  dhcp_clear_all_options(dhcp);
 8006e7a:	4ba0      	ldr	r3, [pc, #640]	; (80070fc <dhcp_recv+0x2d0>)
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	605a      	str	r2, [r3, #4]
  if (p->len < DHCP_SNAME_OFS) {
 8006e80:	f8bb 100a 	ldrh.w	r1, [fp, #10]
  dhcp_clear_all_options(dhcp);
 8006e84:	601a      	str	r2, [r3, #0]
  if (p->len < DHCP_SNAME_OFS) {
 8006e86:	292b      	cmp	r1, #43	; 0x2b
 8006e88:	d916      	bls.n	8006eb8 <dhcp_recv+0x8c>
  options_idx_max = p->tot_len;
 8006e8a:	f8bb a008 	ldrh.w	sl, [fp, #8]
  options_idx = DHCP_OPTIONS_OFS;
 8006e8e:	f04f 09f0 	mov.w	r9, #240	; 0xf0
  int parse_sname_as_options = 0;
 8006e92:	9203      	str	r2, [sp, #12]
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8006e94:	9302      	str	r3, [sp, #8]
  options_idx = DHCP_OPTIONS_OFS;
 8006e96:	46d8      	mov	r8, fp
  while ((q != NULL) && (options_idx >= q->len)) {
 8006e98:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8006e9c:	454b      	cmp	r3, r9
 8006e9e:	d911      	bls.n	8006ec4 <dhcp_recv+0x98>
  options = (u8_t *)q->payload;
 8006ea0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006ea4:	464c      	mov	r4, r9
 8006ea6:	9305      	str	r3, [sp, #20]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8006ea8:	e0a8      	b.n	8006ffc <dhcp_recv+0x1d0>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8006eaa:	f810 7b01 	ldrb.w	r7, [r0], #1
 8006eae:	3301      	adds	r3, #1
 8006eb0:	f811 6b01 	ldrb.w	r6, [r1], #1
 8006eb4:	42b7      	cmp	r7, r6
 8006eb6:	d0d4      	beq.n	8006e62 <dhcp_recv+0x36>
  pbuf_free(p);
 8006eb8:	4658      	mov	r0, fp
 8006eba:	f002 fc57 	bl	800976c <pbuf_free>
}
 8006ebe:	b009      	add	sp, #36	; 0x24
 8006ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options_idx = (u16_t)(options_idx - q->len);
 8006ec4:	eba9 0903 	sub.w	r9, r9, r3
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8006ec8:	ebaa 0a03 	sub.w	sl, sl, r3
    q = q->next;
 8006ecc:	f8d8 8000 	ldr.w	r8, [r8]
    options_idx = (u16_t)(options_idx - q->len);
 8006ed0:	fa1f f989 	uxth.w	r9, r9
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8006ed4:	fa1f fa8a 	uxth.w	sl, sl
  while ((q != NULL) && (options_idx >= q->len)) {
 8006ed8:	f1b8 0f00 	cmp.w	r8, #0
 8006edc:	d1dc      	bne.n	8006e98 <dhcp_recv+0x6c>
 8006ede:	e7eb      	b.n	8006eb8 <dhcp_recv+0x8c>
    u16_t val_offset = (u16_t)(offset + 2);
 8006ee0:	1ca3      	adds	r3, r4, #2
 8006ee2:	b29b      	uxth	r3, r3
    if (val_offset < offset) {
 8006ee4:	42a3      	cmp	r3, r4
    u16_t val_offset = (u16_t)(offset + 2);
 8006ee6:	9304      	str	r3, [sp, #16]
    if (val_offset < offset) {
 8006ee8:	d3e6      	bcc.n	8006eb8 <dhcp_recv+0x8c>
    if ((offset + 1) < q->len) {
 8006eea:	1c60      	adds	r0, r4, #1
 8006eec:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8006ef0:	4298      	cmp	r0, r3
 8006ef2:	da16      	bge.n	8006f22 <dhcp_recv+0xf6>
      len = options[offset + 1];
 8006ef4:	9b05      	ldr	r3, [sp, #20]
 8006ef6:	4423      	add	r3, r4
 8006ef8:	785b      	ldrb	r3, [r3, #1]
    switch (op) {
 8006efa:	2a3b      	cmp	r2, #59	; 0x3b
 8006efc:	d855      	bhi.n	8006faa <dhcp_recv+0x17e>
 8006efe:	2a32      	cmp	r2, #50	; 0x32
 8006f00:	f200 8189 	bhi.w	8007216 <dhcp_recv+0x3ea>
 8006f04:	2a01      	cmp	r2, #1
 8006f06:	d014      	beq.n	8006f32 <dhcp_recv+0x106>
 8006f08:	2a03      	cmp	r2, #3
 8006f0a:	d14e      	bne.n	8006faa <dhcp_recv+0x17e>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8006f0c:	2b03      	cmp	r3, #3
 8006f0e:	f200 8170 	bhi.w	80071f2 <dhcp_recv+0x3c6>
 8006f12:	4b7b      	ldr	r3, [pc, #492]	; (8007100 <dhcp_recv+0x2d4>)
 8006f14:	f240 6233 	movw	r2, #1587	; 0x633
 8006f18:	497a      	ldr	r1, [pc, #488]	; (8007104 <dhcp_recv+0x2d8>)
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8006f1a:	487b      	ldr	r0, [pc, #492]	; (8007108 <dhcp_recv+0x2dc>)
 8006f1c:	f006 fe0c 	bl	800db38 <iprintf>
 8006f20:	e7ca      	b.n	8006eb8 <dhcp_recv+0x8c>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8006f22:	f8d8 3000 	ldr.w	r3, [r8]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	f000 80fe 	beq.w	8007128 <dhcp_recv+0x2fc>
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	e7e3      	b.n	8006efa <dhcp_recv+0xce>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8006f32:	2b04      	cmp	r3, #4
 8006f34:	f000 815a 	beq.w	80071ec <dhcp_recv+0x3c0>
 8006f38:	4b71      	ldr	r3, [pc, #452]	; (8007100 <dhcp_recv+0x2d4>)
 8006f3a:	f240 622e 	movw	r2, #1582	; 0x62e
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8006f3e:	4973      	ldr	r1, [pc, #460]	; (800710c <dhcp_recv+0x2e0>)
 8006f40:	e7eb      	b.n	8006f1a <dhcp_recv+0xee>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8006f42:	2b04      	cmp	r3, #4
 8006f44:	f000 8158 	beq.w	80071f8 <dhcp_recv+0x3cc>
 8006f48:	4b6d      	ldr	r3, [pc, #436]	; (8007100 <dhcp_recv+0x2d4>)
 8006f4a:	f240 6241 	movw	r2, #1601	; 0x641
 8006f4e:	e7f6      	b.n	8006f3e <dhcp_recv+0x112>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d004      	beq.n	8006f5e <dhcp_recv+0x132>
 8006f54:	4b6a      	ldr	r3, [pc, #424]	; (8007100 <dhcp_recv+0x2d4>)
 8006f56:	f240 624f 	movw	r2, #1615	; 0x64f
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8006f5a:	496d      	ldr	r1, [pc, #436]	; (8007110 <dhcp_recv+0x2e4>)
 8006f5c:	e7dd      	b.n	8006f1a <dhcp_recv+0xee>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8006f5e:	f1b9 0ff0 	cmp.w	r9, #240	; 0xf0
 8006f62:	f000 814c 	beq.w	80071fe <dhcp_recv+0x3d2>
 8006f66:	4b66      	ldr	r3, [pc, #408]	; (8007100 <dhcp_recv+0x2d4>)
 8006f68:	f240 6251 	movw	r2, #1617	; 0x651
 8006f6c:	4969      	ldr	r1, [pc, #420]	; (8007114 <dhcp_recv+0x2e8>)
 8006f6e:	e7d4      	b.n	8006f1a <dhcp_recv+0xee>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	f000 814a 	beq.w	800720a <dhcp_recv+0x3de>
 8006f76:	4b62      	ldr	r3, [pc, #392]	; (8007100 <dhcp_recv+0x2d4>)
 8006f78:	f240 6255 	movw	r2, #1621	; 0x655
 8006f7c:	e7ed      	b.n	8006f5a <dhcp_recv+0x12e>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8006f7e:	2b04      	cmp	r3, #4
 8006f80:	f000 8140 	beq.w	8007204 <dhcp_recv+0x3d8>
 8006f84:	4b5e      	ldr	r3, [pc, #376]	; (8007100 <dhcp_recv+0x2d4>)
 8006f86:	f240 6259 	movw	r2, #1625	; 0x659
 8006f8a:	e7d8      	b.n	8006f3e <dhcp_recv+0x112>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8006f8c:	2b04      	cmp	r3, #4
 8006f8e:	f000 813c 	beq.w	800720a <dhcp_recv+0x3de>
 8006f92:	4b5b      	ldr	r3, [pc, #364]	; (8007100 <dhcp_recv+0x2d4>)
 8006f94:	f240 625d 	movw	r2, #1629	; 0x65d
 8006f98:	e7d1      	b.n	8006f3e <dhcp_recv+0x112>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8006f9a:	2b04      	cmp	r3, #4
 8006f9c:	f000 8138 	beq.w	8007210 <dhcp_recv+0x3e4>
 8006fa0:	4b57      	ldr	r3, [pc, #348]	; (8007100 <dhcp_recv+0x2d4>)
 8006fa2:	f240 6261 	movw	r2, #1633	; 0x661
 8006fa6:	e7ca      	b.n	8006f3e <dhcp_recv+0x112>
    switch (op) {
 8006fa8:	2300      	movs	r3, #0
    if (op == DHCP_OPTION_PAD) {
 8006faa:	2a00      	cmp	r2, #0
 8006fac:	f040 80cb 	bne.w	8007146 <dhcp_recv+0x31a>
      offset++;
 8006fb0:	b284      	uxth	r4, r0
    if (offset >= q->len) {
 8006fb2:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8006fb6:	42a3      	cmp	r3, r4
 8006fb8:	d820      	bhi.n	8006ffc <dhcp_recv+0x1d0>
      offset = (u16_t)(offset - q->len);
 8006fba:	1ae4      	subs	r4, r4, r3
      offset_max = (u16_t)(offset_max - q->len);
 8006fbc:	ebaa 0a03 	sub.w	sl, sl, r3
      offset = (u16_t)(offset - q->len);
 8006fc0:	b2a4      	uxth	r4, r4
      offset_max = (u16_t)(offset_max - q->len);
 8006fc2:	fa1f fa8a 	uxth.w	sl, sl
      if (offset < offset_max) {
 8006fc6:	4554      	cmp	r4, sl
 8006fc8:	f4bf af76 	bcs.w	8006eb8 <dhcp_recv+0x8c>
        q = q->next;
 8006fcc:	f8d8 8000 	ldr.w	r8, [r8]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8006fd0:	f1b8 0f00 	cmp.w	r8, #0
 8006fd4:	d10f      	bne.n	8006ff6 <dhcp_recv+0x1ca>
 8006fd6:	4b4a      	ldr	r3, [pc, #296]	; (8007100 <dhcp_recv+0x2d4>)
 8006fd8:	f240 629d 	movw	r2, #1693	; 0x69d
 8006fdc:	494e      	ldr	r1, [pc, #312]	; (8007118 <dhcp_recv+0x2ec>)
 8006fde:	e79c      	b.n	8006f1a <dhcp_recv+0xee>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8006fe0:	2e01      	cmp	r6, #1
 8006fe2:	d004      	beq.n	8006fee <dhcp_recv+0x1c2>
 8006fe4:	4b46      	ldr	r3, [pc, #280]	; (8007100 <dhcp_recv+0x2d4>)
 8006fe6:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8006fea:	494c      	ldr	r1, [pc, #304]	; (800711c <dhcp_recv+0x2f0>)
 8006fec:	e795      	b.n	8006f1a <dhcp_recv+0xee>
            value = ((u8_t *)&value)[0];
 8006fee:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8006ff2:	9307      	str	r3, [sp, #28]
 8006ff4:	e0d8      	b.n	80071a8 <dhcp_recv+0x37c>
        options = (u8_t *)q->payload;
 8006ff6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006ffa:	9305      	str	r3, [sp, #20]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8006ffc:	4554      	cmp	r4, sl
 8006ffe:	d204      	bcs.n	800700a <dhcp_recv+0x1de>
 8007000:	9b05      	ldr	r3, [sp, #20]
 8007002:	5d1a      	ldrb	r2, [r3, r4]
 8007004:	2aff      	cmp	r2, #255	; 0xff
 8007006:	f47f af6b 	bne.w	8006ee0 <dhcp_recv+0xb4>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800700a:	9b02      	ldr	r3, [sp, #8]
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	b9db      	cbnz	r3, 8007048 <dhcp_recv+0x21c>
  } else if (parse_sname_as_options) {
 8007010:	9b03      	ldr	r3, [sp, #12]
 8007012:	bb13      	cbnz	r3, 800705a <dhcp_recv+0x22e>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8007014:	9b02      	ldr	r3, [sp, #8]
 8007016:	785b      	ldrb	r3, [r3, #1]
 8007018:	2b00      	cmp	r3, #0
 800701a:	f43f af4d 	beq.w	8006eb8 <dhcp_recv+0x8c>
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800701e:	4a40      	ldr	r2, [pc, #256]	; (8007120 <dhcp_recv+0x2f4>)
  msg_in = (struct dhcp_msg *)p->payload;
 8007020:	f8db 1004 	ldr.w	r1, [fp, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8007024:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
 8007026:	2b05      	cmp	r3, #5
 8007028:	d132      	bne.n	8007090 <dhcp_recv+0x264>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800702a:	9b01      	ldr	r3, [sp, #4]
 800702c:	795b      	ldrb	r3, [r3, #5]
 800702e:	2b01      	cmp	r3, #1
 8007030:	d123      	bne.n	800707a <dhcp_recv+0x24e>
      dhcp_handle_ack(netif, msg_in);
 8007032:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007034:	f7ff feaa 	bl	8006d8c <dhcp_handle_ack.isra.0>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8007038:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
        dhcp_check(netif);
 800703c:	4628      	mov	r0, r5
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800703e:	071b      	lsls	r3, r3, #28
 8007040:	d523      	bpl.n	800708a <dhcp_recv+0x25e>
        dhcp_check(netif);
 8007042:	f7ff fdd1 	bl	8006be8 <dhcp_check>
 8007046:	e737      	b.n	8006eb8 <dhcp_recv+0x8c>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8007048:	4b35      	ldr	r3, [pc, #212]	; (8007120 <dhcp_recv+0x2f4>)
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800704a:	2200      	movs	r2, #0
 800704c:	9902      	ldr	r1, [sp, #8]
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800704e:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8007050:	700a      	strb	r2, [r1, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8007052:	2b01      	cmp	r3, #1
 8007054:	d00c      	beq.n	8007070 <dhcp_recv+0x244>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8007056:	2b02      	cmp	r3, #2
 8007058:	d106      	bne.n	8007068 <dhcp_recv+0x23c>
    parse_sname_as_options = 0;
 800705a:	2300      	movs	r3, #0
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800705c:	f04f 0a6c 	mov.w	sl, #108	; 0x6c
    options_idx = DHCP_SNAME_OFS;
 8007060:	f04f 092c 	mov.w	r9, #44	; 0x2c
    parse_sname_as_options = 0;
 8007064:	9303      	str	r3, [sp, #12]
 8007066:	e716      	b.n	8006e96 <dhcp_recv+0x6a>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8007068:	2b03      	cmp	r3, #3
 800706a:	d1d1      	bne.n	8007010 <dhcp_recv+0x1e4>
      parse_sname_as_options = 1;
 800706c:	2301      	movs	r3, #1
 800706e:	9303      	str	r3, [sp, #12]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8007070:	f04f 0aec 	mov.w	sl, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 8007074:	f04f 096c 	mov.w	r9, #108	; 0x6c
 8007078:	e70d      	b.n	8006e96 <dhcp_recv+0x6a>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800707a:	3b03      	subs	r3, #3
 800707c:	2b02      	cmp	r3, #2
 800707e:	f63f af1b 	bhi.w	8006eb8 <dhcp_recv+0x8c>
      dhcp_handle_ack(netif, msg_in);
 8007082:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007084:	f7ff fe82 	bl	8006d8c <dhcp_handle_ack.isra.0>
      dhcp_bind(netif);
 8007088:	4628      	mov	r0, r5
 800708a:	f7ff fdc3 	bl	8006c14 <dhcp_bind>
 800708e:	e713      	b.n	8006eb8 <dhcp_recv+0x8c>
  else if ((msg_type == DHCP_NAK) &&
 8007090:	2b06      	cmp	r3, #6
 8007092:	d115      	bne.n	80070c0 <dhcp_recv+0x294>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8007094:	9b01      	ldr	r3, [sp, #4]
 8007096:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8007098:	1eda      	subs	r2, r3, #3
 800709a:	2a02      	cmp	r2, #2
 800709c:	d902      	bls.n	80070a4 <dhcp_recv+0x278>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800709e:	2b01      	cmp	r3, #1
 80070a0:	f47f af0a 	bne.w	8006eb8 <dhcp_recv+0x8c>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80070a4:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80070a6:	210c      	movs	r1, #12
 80070a8:	f7ff fab8 	bl	800661c <dhcp_set_state>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80070ac:	4b1d      	ldr	r3, [pc, #116]	; (8007124 <dhcp_recv+0x2f8>)
 80070ae:	4628      	mov	r0, r5
 80070b0:	461a      	mov	r2, r3
 80070b2:	4619      	mov	r1, r3
 80070b4:	f002 f95a 	bl	800936c <netif_set_addr>
  dhcp_discover(netif);
 80070b8:	4628      	mov	r0, r5
 80070ba:	f7ff fd1f 	bl	8006afc <dhcp_discover>
}
 80070be:	e6fb      	b.n	8006eb8 <dhcp_recv+0x8c>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	f47f aef9 	bne.w	8006eb8 <dhcp_recv+0x8c>
 80070c6:	9b01      	ldr	r3, [sp, #4]
 80070c8:	795b      	ldrb	r3, [r3, #5]
 80070ca:	2b06      	cmp	r3, #6
 80070cc:	f47f aef4 	bne.w	8006eb8 <dhcp_recv+0x8c>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80070d0:	9b02      	ldr	r3, [sp, #8]
 80070d2:	789b      	ldrb	r3, [r3, #2]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	f43f aeef 	beq.w	8006eb8 <dhcp_recv+0x8c>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80070da:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    dhcp->request_timeout = 0; /* stop timer */
 80070dc:	9b03      	ldr	r3, [sp, #12]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80070de:	6890      	ldr	r0, [r2, #8]
    dhcp->request_timeout = 0; /* stop timer */
 80070e0:	8123      	strh	r3, [r4, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80070e2:	9101      	str	r1, [sp, #4]
 80070e4:	f001 fd8b 	bl	8008bfe <lwip_htonl>
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80070e8:	9901      	ldr	r1, [sp, #4]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80070ea:	61a0      	str	r0, [r4, #24]
    dhcp_select(netif);
 80070ec:	4628      	mov	r0, r5
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80070ee:	690b      	ldr	r3, [r1, #16]
 80070f0:	61e3      	str	r3, [r4, #28]
    dhcp_select(netif);
 80070f2:	f7ff fc47 	bl	8006984 <dhcp_select>
 80070f6:	e6df      	b.n	8006eb8 <dhcp_recv+0x8c>
 80070f8:	24006a50 	.word	0x24006a50
 80070fc:	24006a28 	.word	0x24006a28
 8007100:	080204e2 	.word	0x080204e2
 8007104:	08020769 	.word	0x08020769
 8007108:	0801f8bf 	.word	0x0801f8bf
 800710c:	08020760 	.word	0x08020760
 8007110:	0802077b 	.word	0x0802077b
 8007114:	08020784 	.word	0x08020784
 8007118:	080207bf 	.word	0x080207bf
 800711c:	080207ac 	.word	0x080207ac
 8007120:	24006a30 	.word	0x24006a30
 8007124:	0800f6e0 	.word	0x0800f6e0
    switch (op) {
 8007128:	2a3b      	cmp	r2, #59	; 0x3b
 800712a:	f63f af3e 	bhi.w	8006faa <dhcp_recv+0x17e>
 800712e:	2a32      	cmp	r2, #50	; 0x32
 8007130:	d842      	bhi.n	80071b8 <dhcp_recv+0x38c>
 8007132:	2a01      	cmp	r2, #1
 8007134:	f43f af00 	beq.w	8006f38 <dhcp_recv+0x10c>
 8007138:	2a03      	cmp	r2, #3
 800713a:	f43f aeea 	beq.w	8006f12 <dhcp_recv+0xe6>
 800713e:	2a00      	cmp	r2, #0
 8007140:	f43f af36 	beq.w	8006fb0 <dhcp_recv+0x184>
 8007144:	2300      	movs	r3, #0
 8007146:	f04f 37ff 	mov.w	r7, #4294967295
 800714a:	2600      	movs	r6, #0
      if (offset + len + 2 > 0xFFFF) {
 800714c:	441c      	add	r4, r3
 800714e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8007152:	4294      	cmp	r4, r2
 8007154:	f73f aeb0 	bgt.w	8006eb8 <dhcp_recv+0x8c>
      offset = (u16_t)(offset + len + 2);
 8007158:	9a04      	ldr	r2, [sp, #16]
 800715a:	18d4      	adds	r4, r2, r3
 800715c:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 800715e:	2e00      	cmp	r6, #0
 8007160:	f43f af27 	beq.w	8006fb2 <dhcp_recv+0x186>
        u32_t value = 0;
 8007164:	2300      	movs	r3, #0
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8007166:	2f07      	cmp	r7, #7
        u32_t value = 0;
 8007168:	9307      	str	r3, [sp, #28]
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800716a:	d906      	bls.n	800717a <dhcp_recv+0x34e>
 800716c:	4b37      	ldr	r3, [pc, #220]	; (800724c <dhcp_recv+0x420>)
 800716e:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8007172:	4937      	ldr	r1, [pc, #220]	; (8007250 <dhcp_recv+0x424>)
 8007174:	4837      	ldr	r0, [pc, #220]	; (8007254 <dhcp_recv+0x428>)
 8007176:	f006 fcdf 	bl	800db38 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 800717a:	9b02      	ldr	r3, [sp, #8]
 800717c:	5ddb      	ldrb	r3, [r3, r7]
 800717e:	2b00      	cmp	r3, #0
 8007180:	f47f af17 	bne.w	8006fb2 <dhcp_recv+0x186>
          copy_len = LWIP_MIN(decode_len, 4);
 8007184:	b2b2      	uxth	r2, r6
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8007186:	9b04      	ldr	r3, [sp, #16]
 8007188:	a907      	add	r1, sp, #28
 800718a:	4640      	mov	r0, r8
 800718c:	9204      	str	r2, [sp, #16]
 800718e:	f002 fd11 	bl	8009bb4 <pbuf_copy_partial>
 8007192:	9a04      	ldr	r2, [sp, #16]
 8007194:	4282      	cmp	r2, r0
 8007196:	f47f ae8f 	bne.w	8006eb8 <dhcp_recv+0x8c>
          } else if (decode_len == 4) {
 800719a:	2e04      	cmp	r6, #4
 800719c:	f47f af20 	bne.w	8006fe0 <dhcp_recv+0x1b4>
            value = lwip_ntohl(value);
 80071a0:	9807      	ldr	r0, [sp, #28]
 80071a2:	f001 fd2c 	bl	8008bfe <lwip_htonl>
 80071a6:	9007      	str	r0, [sp, #28]
          dhcp_got_option(dhcp, decode_idx);
 80071a8:	2301      	movs	r3, #1
 80071aa:	9a02      	ldr	r2, [sp, #8]
 80071ac:	55d3      	strb	r3, [r2, r7]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80071ae:	9b07      	ldr	r3, [sp, #28]
 80071b0:	4a29      	ldr	r2, [pc, #164]	; (8007258 <dhcp_recv+0x42c>)
 80071b2:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 80071b6:	e6fc      	b.n	8006fb2 <dhcp_recv+0x186>
 80071b8:	f1a2 0333 	sub.w	r3, r2, #51	; 0x33
 80071bc:	2b08      	cmp	r3, #8
 80071be:	f63f aef3 	bhi.w	8006fa8 <dhcp_recv+0x17c>
 80071c2:	a101      	add	r1, pc, #4	; (adr r1, 80071c8 <dhcp_recv+0x39c>)
 80071c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071c8:	08006f49 	.word	0x08006f49
 80071cc:	08006f55 	.word	0x08006f55
 80071d0:	08006f77 	.word	0x08006f77
 80071d4:	08006f85 	.word	0x08006f85
 80071d8:	08006fa9 	.word	0x08006fa9
 80071dc:	08006fa9 	.word	0x08006fa9
 80071e0:	08006fa9 	.word	0x08006fa9
 80071e4:	08006f93 	.word	0x08006f93
 80071e8:	08006fa1 	.word	0x08006fa1
 80071ec:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80071ee:	2706      	movs	r7, #6
 80071f0:	e7ac      	b.n	800714c <dhcp_recv+0x320>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80071f2:	2707      	movs	r7, #7
        decode_len = 4; /* only copy the first given router */
 80071f4:	2604      	movs	r6, #4
 80071f6:	e7a9      	b.n	800714c <dhcp_recv+0x320>
 80071f8:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80071fa:	2703      	movs	r7, #3
 80071fc:	e7a6      	b.n	800714c <dhcp_recv+0x320>
    decode_len = len;
 80071fe:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8007200:	2700      	movs	r7, #0
 8007202:	e7a3      	b.n	800714c <dhcp_recv+0x320>
 8007204:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8007206:	2702      	movs	r7, #2
 8007208:	e7a0      	b.n	800714c <dhcp_recv+0x320>
 800720a:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_T1;
 800720c:	461f      	mov	r7, r3
 800720e:	e79d      	b.n	800714c <dhcp_recv+0x320>
 8007210:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_T2;
 8007212:	2705      	movs	r7, #5
    if (op == DHCP_OPTION_PAD) {
 8007214:	e79a      	b.n	800714c <dhcp_recv+0x320>
 8007216:	f1a2 0133 	sub.w	r1, r2, #51	; 0x33
 800721a:	2908      	cmp	r1, #8
 800721c:	f63f aec5 	bhi.w	8006faa <dhcp_recv+0x17e>
 8007220:	a601      	add	r6, pc, #4	; (adr r6, 8007228 <dhcp_recv+0x3fc>)
 8007222:	f856 f021 	ldr.w	pc, [r6, r1, lsl #2]
 8007226:	bf00      	nop
 8007228:	08006f43 	.word	0x08006f43
 800722c:	08006f51 	.word	0x08006f51
 8007230:	08006f71 	.word	0x08006f71
 8007234:	08006f7f 	.word	0x08006f7f
 8007238:	08006fab 	.word	0x08006fab
 800723c:	08006fab 	.word	0x08006fab
 8007240:	08006fab 	.word	0x08006fab
 8007244:	08006f8d 	.word	0x08006f8d
 8007248:	08006f9b 	.word	0x08006f9b
 800724c:	080204e2 	.word	0x080204e2
 8007250:	0802079b 	.word	0x0802079b
 8007254:	0801f8bf 	.word	0x0801f8bf
 8007258:	24006a30 	.word	0x24006a30

0800725c <dhcp_network_changed>:
{
 800725c:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800725e:	6a45      	ldr	r5, [r0, #36]	; 0x24
{
 8007260:	4604      	mov	r4, r0
  if (!dhcp) {
 8007262:	b1fd      	cbz	r5, 80072a4 <dhcp_network_changed+0x48>
  switch (dhcp->state) {
 8007264:	796b      	ldrb	r3, [r5, #5]
 8007266:	2b05      	cmp	r3, #5
 8007268:	d809      	bhi.n	800727e <dhcp_network_changed+0x22>
 800726a:	2b02      	cmp	r3, #2
 800726c:	d809      	bhi.n	8007282 <dhcp_network_changed+0x26>
 800726e:	b1cb      	cbz	r3, 80072a4 <dhcp_network_changed+0x48>
      dhcp->tries = 0;
 8007270:	2300      	movs	r3, #0
      dhcp_discover(netif);
 8007272:	4620      	mov	r0, r4
      dhcp->tries = 0;
 8007274:	71ab      	strb	r3, [r5, #6]
}
 8007276:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_discover(netif);
 800727a:	f7ff bc3f 	b.w	8006afc <dhcp_discover>
  switch (dhcp->state) {
 800727e:	2b0a      	cmp	r3, #10
 8007280:	d106      	bne.n	8007290 <dhcp_network_changed+0x34>
      dhcp->tries = 0;
 8007282:	2300      	movs	r3, #0
      dhcp_reboot(netif);
 8007284:	4620      	mov	r0, r4
      dhcp->tries = 0;
 8007286:	71ab      	strb	r3, [r5, #6]
}
 8007288:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_reboot(netif);
 800728c:	f7ff baf6 	b.w	800687c <dhcp_reboot>
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8007290:	2b0c      	cmp	r3, #12
 8007292:	d9ed      	bls.n	8007270 <dhcp_network_changed+0x14>
 8007294:	4b04      	ldr	r3, [pc, #16]	; (80072a8 <dhcp_network_changed+0x4c>)
 8007296:	f240 326d 	movw	r2, #877	; 0x36d
 800729a:	4904      	ldr	r1, [pc, #16]	; (80072ac <dhcp_network_changed+0x50>)
 800729c:	4804      	ldr	r0, [pc, #16]	; (80072b0 <dhcp_network_changed+0x54>)
 800729e:	f006 fc4b 	bl	800db38 <iprintf>
 80072a2:	e7e5      	b.n	8007270 <dhcp_network_changed+0x14>
}
 80072a4:	bd38      	pop	{r3, r4, r5, pc}
 80072a6:	bf00      	nop
 80072a8:	080204e2 	.word	0x080204e2
 80072ac:	080207f6 	.word	0x080207f6
 80072b0:	0801f8bf 	.word	0x0801f8bf

080072b4 <dhcp_arp_reply>:
{
 80072b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80072b6:	4606      	mov	r6, r0
{
 80072b8:	b087      	sub	sp, #28
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80072ba:	b940      	cbnz	r0, 80072ce <dhcp_arp_reply+0x1a>
 80072bc:	4b27      	ldr	r3, [pc, #156]	; (800735c <dhcp_arp_reply+0xa8>)
 80072be:	f240 328b 	movw	r2, #907	; 0x38b
 80072c2:	4927      	ldr	r1, [pc, #156]	; (8007360 <dhcp_arp_reply+0xac>)
 80072c4:	4827      	ldr	r0, [pc, #156]	; (8007364 <dhcp_arp_reply+0xb0>)
 80072c6:	f006 fc37 	bl	800db38 <iprintf>
}
 80072ca:	b007      	add	sp, #28
 80072cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  dhcp = netif_dhcp_data(netif);
 80072ce:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80072d0:	2c00      	cmp	r4, #0
 80072d2:	d0fa      	beq.n	80072ca <dhcp_arp_reply+0x16>
 80072d4:	7963      	ldrb	r3, [r4, #5]
 80072d6:	2b08      	cmp	r3, #8
 80072d8:	d1f7      	bne.n	80072ca <dhcp_arp_reply+0x16>
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80072da:	680a      	ldr	r2, [r1, #0]
 80072dc:	69e3      	ldr	r3, [r4, #28]
 80072de:	429a      	cmp	r2, r3
 80072e0:	d1f3      	bne.n	80072ca <dhcp_arp_reply+0x16>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80072e2:	210c      	movs	r1, #12
 80072e4:	4620      	mov	r0, r4
 80072e6:	f7ff f999 	bl	800661c <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80072ea:	f10d 0316 	add.w	r3, sp, #22
 80072ee:	2204      	movs	r2, #4
 80072f0:	4621      	mov	r1, r4
 80072f2:	4630      	mov	r0, r6
 80072f4:	f7ff fa10 	bl	8006718 <dhcp_create_msg>
  if (p_out != NULL) {
 80072f8:	4605      	mov	r5, r0
 80072fa:	b330      	cbz	r0, 800734a <dhcp_arp_reply+0x96>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80072fc:	6841      	ldr	r1, [r0, #4]
 80072fe:	2304      	movs	r3, #4
 8007300:	2232      	movs	r2, #50	; 0x32
 8007302:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8007306:	31f0      	adds	r1, #240	; 0xf0
 8007308:	9103      	str	r1, [sp, #12]
 800730a:	f7ff f9ab 	bl	8006664 <dhcp_option>
 800730e:	4607      	mov	r7, r0
 8007310:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8007314:	69e0      	ldr	r0, [r4, #28]
 8007316:	f001 fc72 	bl	8008bfe <lwip_htonl>
 800731a:	9903      	ldr	r1, [sp, #12]
 800731c:	4602      	mov	r2, r0
 800731e:	4638      	mov	r0, r7
 8007320:	f7ff f9d6 	bl	80066d0 <dhcp_option_long>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8007324:	462a      	mov	r2, r5
 8007326:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8007328:	f8ad 0016 	strh.w	r0, [sp, #22]
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800732c:	f7ff fa88 	bl	8006840 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8007330:	4b0d      	ldr	r3, [pc, #52]	; (8007368 <dhcp_arp_reply+0xb4>)
 8007332:	4629      	mov	r1, r5
 8007334:	480d      	ldr	r0, [pc, #52]	; (800736c <dhcp_arp_reply+0xb8>)
 8007336:	4a0e      	ldr	r2, [pc, #56]	; (8007370 <dhcp_arp_reply+0xbc>)
 8007338:	e9cd 6300 	strd	r6, r3, [sp]
 800733c:	2343      	movs	r3, #67	; 0x43
 800733e:	6840      	ldr	r0, [r0, #4]
 8007340:	f006 f898 	bl	800d474 <udp_sendto_if_src>
    pbuf_free(p_out);
 8007344:	4628      	mov	r0, r5
 8007346:	f002 fa11 	bl	800976c <pbuf_free>
  if (dhcp->tries < 255) {
 800734a:	79a3      	ldrb	r3, [r4, #6]
 800734c:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800734e:	bf1c      	itt	ne
 8007350:	3301      	addne	r3, #1
 8007352:	71a3      	strbne	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8007354:	2314      	movs	r3, #20
 8007356:	8123      	strh	r3, [r4, #8]
  return result;
 8007358:	e7b7      	b.n	80072ca <dhcp_arp_reply+0x16>
 800735a:	bf00      	nop
 800735c:	080204e2 	.word	0x080204e2
 8007360:	080206f1 	.word	0x080206f1
 8007364:	0801f8bf 	.word	0x0801f8bf
 8007368:	0800f6e0 	.word	0x0800f6e0
 800736c:	2400665c 	.word	0x2400665c
 8007370:	0800f6dc 	.word	0x0800f6dc

08007374 <dhcp_renew>:
{
 8007374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8007378:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 800737a:	b086      	sub	sp, #24
 800737c:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800737e:	2105      	movs	r1, #5
 8007380:	4620      	mov	r0, r4
 8007382:	f7ff f94b 	bl	800661c <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8007386:	f10d 0316 	add.w	r3, sp, #22
 800738a:	2203      	movs	r2, #3
 800738c:	4621      	mov	r1, r4
 800738e:	4630      	mov	r0, r6
 8007390:	f7ff f9c2 	bl	8006718 <dhcp_create_msg>
  if (p_out != NULL) {
 8007394:	4605      	mov	r5, r0
 8007396:	2800      	cmp	r0, #0
 8007398:	d055      	beq.n	8007446 <dhcp_renew+0xd2>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800739a:	6841      	ldr	r1, [r0, #4]
 800739c:	2302      	movs	r3, #2
 800739e:	2239      	movs	r2, #57	; 0x39
 80073a0:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80073a4:	31f0      	adds	r1, #240	; 0xf0
 80073a6:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8007450 <dhcp_renew+0xdc>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80073aa:	2703      	movs	r7, #3
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80073ac:	9103      	str	r1, [sp, #12]
 80073ae:	f7ff f959 	bl	8006664 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80073b2:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 80073b4:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80073b6:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80073ba:	f7ff f937 	bl	800662c <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80073be:	9903      	ldr	r1, [sp, #12]
 80073c0:	2303      	movs	r3, #3
 80073c2:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80073c4:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80073c8:	f7ff f94c 	bl	8006664 <dhcp_option>
 80073cc:	9903      	ldr	r1, [sp, #12]
 80073ce:	f8ad 0016 	strh.w	r0, [sp, #22]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80073d2:	3f01      	subs	r7, #1
 80073d4:	f818 2b01 	ldrb.w	r2, [r8], #1
 80073d8:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80073dc:	9103      	str	r1, [sp, #12]
 80073de:	f7ff f95f 	bl	80066a0 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80073e2:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 80073e6:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80073e8:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80073ec:	d1f1      	bne.n	80073d2 <dhcp_renew+0x5e>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80073ee:	462a      	mov	r2, r5
 80073f0:	f7ff fa26 	bl	8006840 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80073f4:	4815      	ldr	r0, [pc, #84]	; (800744c <dhcp_renew+0xd8>)
 80073f6:	9600      	str	r6, [sp, #0]
 80073f8:	2343      	movs	r3, #67	; 0x43
 80073fa:	f104 0218 	add.w	r2, r4, #24
 80073fe:	4629      	mov	r1, r5
 8007400:	6840      	ldr	r0, [r0, #4]
 8007402:	f006 f8cf 	bl	800d5a4 <udp_sendto_if>
 8007406:	4606      	mov	r6, r0
    pbuf_free(p_out);
 8007408:	4628      	mov	r0, r5
 800740a:	f002 f9af 	bl	800976c <pbuf_free>
  if (dhcp->tries < 255) {
 800740e:	79a3      	ldrb	r3, [r4, #6]
}
 8007410:	4630      	mov	r0, r6
  if (dhcp->tries < 255) {
 8007412:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8007414:	bf1c      	itt	ne
 8007416:	3301      	addne	r3, #1
 8007418:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800741a:	79a3      	ldrb	r3, [r4, #6]
 800741c:	2b09      	cmp	r3, #9
 800741e:	bf96      	itet	ls
 8007420:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8007424:	f644 6320 	movwhi	r3, #20000	; 0x4e20
 8007428:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800742c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8007430:	bf9c      	itt	ls
 8007432:	011b      	lslls	r3, r3, #4
 8007434:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8007436:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800743a:	fbb3 f3f2 	udiv	r3, r3, r2
 800743e:	8123      	strh	r3, [r4, #8]
}
 8007440:	b006      	add	sp, #24
 8007442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = ERR_MEM;
 8007446:	f04f 36ff 	mov.w	r6, #4294967295
 800744a:	e7e0      	b.n	800740e <dhcp_renew+0x9a>
 800744c:	2400665c 	.word	0x2400665c
 8007450:	0800f6d6 	.word	0x0800f6d6

08007454 <dhcp_supplied_address>:
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8007454:	b150      	cbz	r0, 800746c <dhcp_supplied_address+0x18>
 8007456:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8007458:	b140      	cbz	r0, 800746c <dhcp_supplied_address+0x18>
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800745a:	7940      	ldrb	r0, [r0, #5]
 800745c:	280a      	cmp	r0, #10
 800745e:	d006      	beq.n	800746e <dhcp_supplied_address+0x1a>
 8007460:	3804      	subs	r0, #4
 8007462:	2801      	cmp	r0, #1
 8007464:	bf8c      	ite	hi
 8007466:	2000      	movhi	r0, #0
 8007468:	2001      	movls	r0, #1
 800746a:	b2c0      	uxtb	r0, r0
           (dhcp->state == DHCP_STATE_REBINDING);
  }
  return 0;
}
 800746c:	4770      	bx	lr
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800746e:	2001      	movs	r0, #1
 8007470:	e7fb      	b.n	800746a <dhcp_supplied_address+0x16>
	...

08007474 <dhcp_release_and_stop>:
{
 8007474:	b5f0      	push	{r4, r5, r6, r7, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8007476:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 8007478:	b087      	sub	sp, #28
 800747a:	4606      	mov	r6, r0
  if (dhcp == NULL) {
 800747c:	2c00      	cmp	r4, #0
 800747e:	d050      	beq.n	8007522 <dhcp_release_and_stop+0xae>
  if (dhcp->state == DHCP_STATE_OFF) {
 8007480:	7963      	ldrb	r3, [r4, #5]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d04d      	beq.n	8007522 <dhcp_release_and_stop+0xae>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8007486:	69a3      	ldr	r3, [r4, #24]
 8007488:	9305      	str	r3, [sp, #20]
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800748a:	2300      	movs	r3, #0
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800748c:	e9c4 3306 	strd	r3, r3, [r4, #24]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8007490:	e9c4 3308 	strd	r3, r3, [r4, #32]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8007494:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8007498:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800749a:	81e3      	strh	r3, [r4, #14]
 800749c:	6123      	str	r3, [r4, #16]
 800749e:	82a3      	strh	r3, [r4, #20]
  if (dhcp_supplied_address(netif)) {
 80074a0:	f7ff ffd8 	bl	8007454 <dhcp_supplied_address>
 80074a4:	b368      	cbz	r0, 8007502 <dhcp_release_and_stop+0x8e>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80074a6:	f10d 0312 	add.w	r3, sp, #18
 80074aa:	2207      	movs	r2, #7
 80074ac:	4621      	mov	r1, r4
 80074ae:	4630      	mov	r0, r6
 80074b0:	f7ff f932 	bl	8006718 <dhcp_create_msg>
    if (p_out != NULL) {
 80074b4:	4605      	mov	r5, r0
 80074b6:	b320      	cbz	r0, 8007502 <dhcp_release_and_stop+0x8e>
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80074b8:	6841      	ldr	r1, [r0, #4]
 80074ba:	2304      	movs	r3, #4
 80074bc:	2236      	movs	r2, #54	; 0x36
 80074be:	f8bd 0012 	ldrh.w	r0, [sp, #18]
 80074c2:	31f0      	adds	r1, #240	; 0xf0
 80074c4:	9103      	str	r1, [sp, #12]
 80074c6:	f7ff f8cd 	bl	8006664 <dhcp_option>
 80074ca:	4607      	mov	r7, r0
 80074cc:	f8ad 0012 	strh.w	r0, [sp, #18]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80074d0:	9805      	ldr	r0, [sp, #20]
 80074d2:	f001 fb94 	bl	8008bfe <lwip_htonl>
 80074d6:	9903      	ldr	r1, [sp, #12]
 80074d8:	4602      	mov	r2, r0
 80074da:	4638      	mov	r0, r7
 80074dc:	f7ff f8f8 	bl	80066d0 <dhcp_option_long>
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80074e0:	462a      	mov	r2, r5
 80074e2:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80074e4:	f8ad 0012 	strh.w	r0, [sp, #18]
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80074e8:	f7ff f9aa 	bl	8006840 <dhcp_option_trailer>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80074ec:	480e      	ldr	r0, [pc, #56]	; (8007528 <dhcp_release_and_stop+0xb4>)
 80074ee:	2343      	movs	r3, #67	; 0x43
 80074f0:	9600      	str	r6, [sp, #0]
 80074f2:	aa05      	add	r2, sp, #20
 80074f4:	4629      	mov	r1, r5
 80074f6:	6840      	ldr	r0, [r0, #4]
 80074f8:	f006 f854 	bl	800d5a4 <udp_sendto_if>
      pbuf_free(p_out);
 80074fc:	4628      	mov	r0, r5
 80074fe:	f002 f935 	bl	800976c <pbuf_free>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8007502:	4b0a      	ldr	r3, [pc, #40]	; (800752c <dhcp_release_and_stop+0xb8>)
 8007504:	4630      	mov	r0, r6
 8007506:	4619      	mov	r1, r3
 8007508:	461a      	mov	r2, r3
 800750a:	f001 ff2f 	bl	800936c <netif_set_addr>
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800750e:	2100      	movs	r1, #0
 8007510:	4620      	mov	r0, r4
 8007512:	f7ff f883 	bl	800661c <dhcp_set_state>
  if (dhcp->pcb_allocated != 0) {
 8007516:	7923      	ldrb	r3, [r4, #4]
 8007518:	b11b      	cbz	r3, 8007522 <dhcp_release_and_stop+0xae>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800751a:	f7ff fc6b 	bl	8006df4 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800751e:	2300      	movs	r3, #0
 8007520:	7123      	strb	r3, [r4, #4]
}
 8007522:	b007      	add	sp, #28
 8007524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007526:	bf00      	nop
 8007528:	2400665c 	.word	0x2400665c
 800752c:	0800f6e0 	.word	0x0800f6e0

08007530 <dhcp_start>:
{
 8007530:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8007532:	4604      	mov	r4, r0
 8007534:	b950      	cbnz	r0, 800754c <dhcp_start+0x1c>
 8007536:	4b24      	ldr	r3, [pc, #144]	; (80075c8 <dhcp_start+0x98>)
 8007538:	f240 22e7 	movw	r2, #743	; 0x2e7
 800753c:	4923      	ldr	r1, [pc, #140]	; (80075cc <dhcp_start+0x9c>)
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800753e:	4824      	ldr	r0, [pc, #144]	; (80075d0 <dhcp_start+0xa0>)
 8007540:	f006 fafa 	bl	800db38 <iprintf>
 8007544:	f06f 020f 	mvn.w	r2, #15
}
 8007548:	4610      	mov	r0, r2
 800754a:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800754c:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8007550:	07da      	lsls	r2, r3, #31
 8007552:	d404      	bmi.n	800755e <dhcp_start+0x2e>
 8007554:	4b1c      	ldr	r3, [pc, #112]	; (80075c8 <dhcp_start+0x98>)
 8007556:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800755a:	491e      	ldr	r1, [pc, #120]	; (80075d4 <dhcp_start+0xa4>)
 800755c:	e7ef      	b.n	800753e <dhcp_start+0xe>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800755e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
  dhcp = netif_dhcp_data(netif);
 8007560:	6a45      	ldr	r5, [r0, #36]	; 0x24
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8007562:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8007566:	d202      	bcs.n	800756e <dhcp_start+0x3e>
    return ERR_MEM;
 8007568:	f04f 32ff 	mov.w	r2, #4294967295
 800756c:	e7ec      	b.n	8007548 <dhcp_start+0x18>
  if (dhcp == NULL) {
 800756e:	b9dd      	cbnz	r5, 80075a8 <dhcp_start+0x78>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8007570:	2034      	movs	r0, #52	; 0x34
 8007572:	f001 fd3d 	bl	8008ff0 <mem_malloc>
    if (dhcp == NULL) {
 8007576:	4605      	mov	r5, r0
 8007578:	2800      	cmp	r0, #0
 800757a:	d0f5      	beq.n	8007568 <dhcp_start+0x38>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800757c:	6260      	str	r0, [r4, #36]	; 0x24
  memset(dhcp, 0, sizeof(struct dhcp));
 800757e:	2234      	movs	r2, #52	; 0x34
 8007580:	2100      	movs	r1, #0
 8007582:	4628      	mov	r0, r5
 8007584:	f006 fad0 	bl	800db28 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8007588:	f7ff fbca 	bl	8006d20 <dhcp_inc_pcb_refcount>
 800758c:	4602      	mov	r2, r0
 800758e:	2800      	cmp	r0, #0
 8007590:	d1ea      	bne.n	8007568 <dhcp_start+0x38>
  dhcp->pcb_allocated = 1;
 8007592:	2301      	movs	r3, #1
 8007594:	712b      	strb	r3, [r5, #4]
  if (!netif_is_link_up(netif)) {
 8007596:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 800759a:	075b      	lsls	r3, r3, #29
 800759c:	d40a      	bmi.n	80075b4 <dhcp_start+0x84>
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800759e:	2102      	movs	r1, #2
 80075a0:	4628      	mov	r0, r5
 80075a2:	f7ff f83b 	bl	800661c <dhcp_set_state>
    return ERR_OK;
 80075a6:	e7cf      	b.n	8007548 <dhcp_start+0x18>
    if (dhcp->pcb_allocated != 0) {
 80075a8:	792b      	ldrb	r3, [r5, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d0e7      	beq.n	800757e <dhcp_start+0x4e>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80075ae:	f7ff fc21 	bl	8006df4 <dhcp_dec_pcb_refcount>
 80075b2:	e7e4      	b.n	800757e <dhcp_start+0x4e>
  result = dhcp_discover(netif);
 80075b4:	4620      	mov	r0, r4
 80075b6:	f7ff faa1 	bl	8006afc <dhcp_discover>
  if (result != ERR_OK) {
 80075ba:	4602      	mov	r2, r0
 80075bc:	2800      	cmp	r0, #0
 80075be:	d0c3      	beq.n	8007548 <dhcp_start+0x18>
    dhcp_release_and_stop(netif);
 80075c0:	4620      	mov	r0, r4
 80075c2:	f7ff ff57 	bl	8007474 <dhcp_release_and_stop>
 80075c6:	e7cf      	b.n	8007568 <dhcp_start+0x38>
 80075c8:	080204e2 	.word	0x080204e2
 80075cc:	080206f1 	.word	0x080206f1
 80075d0:	0801f8bf 	.word	0x0801f8bf
 80075d4:	0802080a 	.word	0x0802080a

080075d8 <dhcp_coarse_tmr>:
  NETIF_FOREACH(netif) {
 80075d8:	4b58      	ldr	r3, [pc, #352]	; (800773c <dhcp_coarse_tmr+0x164>)
{
 80075da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  NETIF_FOREACH(netif) {
 80075de:	681d      	ldr	r5, [r3, #0]
{
 80075e0:	b087      	sub	sp, #28
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80075e2:	f240 2619 	movw	r6, #537	; 0x219
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80075e6:	4f56      	ldr	r7, [pc, #344]	; (8007740 <dhcp_coarse_tmr+0x168>)
 80075e8:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8007744 <dhcp_coarse_tmr+0x16c>
  NETIF_FOREACH(netif) {
 80075ec:	b915      	cbnz	r5, 80075f4 <dhcp_coarse_tmr+0x1c>
}
 80075ee:	b007      	add	sp, #28
 80075f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80075f4:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80075f6:	b17c      	cbz	r4, 8007618 <dhcp_coarse_tmr+0x40>
 80075f8:	7963      	ldrb	r3, [r4, #5]
 80075fa:	b16b      	cbz	r3, 8007618 <dhcp_coarse_tmr+0x40>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80075fc:	8aa1      	ldrh	r1, [r4, #20]
 80075fe:	b169      	cbz	r1, 800761c <dhcp_coarse_tmr+0x44>
 8007600:	8a62      	ldrh	r2, [r4, #18]
 8007602:	3201      	adds	r2, #1
 8007604:	b292      	uxth	r2, r2
 8007606:	4291      	cmp	r1, r2
 8007608:	8262      	strh	r2, [r4, #18]
 800760a:	d107      	bne.n	800761c <dhcp_coarse_tmr+0x44>
        dhcp_release_and_stop(netif);
 800760c:	4628      	mov	r0, r5
 800760e:	f7ff ff31 	bl	8007474 <dhcp_release_and_stop>
        dhcp_start(netif);
 8007612:	4628      	mov	r0, r5
 8007614:	f7ff ff8c 	bl	8007530 <dhcp_start>
  NETIF_FOREACH(netif) {
 8007618:	682d      	ldr	r5, [r5, #0]
 800761a:	e7e7      	b.n	80075ec <dhcp_coarse_tmr+0x14>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800761c:	8a22      	ldrh	r2, [r4, #16]
 800761e:	2a00      	cmp	r2, #0
 8007620:	d072      	beq.n	8007708 <dhcp_coarse_tmr+0x130>
 8007622:	1e51      	subs	r1, r2, #1
 8007624:	2a01      	cmp	r2, #1
 8007626:	8221      	strh	r1, [r4, #16]
 8007628:	d16e      	bne.n	8007708 <dhcp_coarse_tmr+0x130>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800762a:	3b01      	subs	r3, #1
 800762c:	b2db      	uxtb	r3, r3
 800762e:	2b09      	cmp	r3, #9
 8007630:	d8f2      	bhi.n	8007618 <dhcp_coarse_tmr+0x40>
 8007632:	fa26 f303 	lsr.w	r3, r6, r3
 8007636:	07db      	lsls	r3, r3, #31
 8007638:	d5ee      	bpl.n	8007618 <dhcp_coarse_tmr+0x40>
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800763a:	2104      	movs	r1, #4
 800763c:	4620      	mov	r0, r4
 800763e:	f7fe ffed 	bl	800661c <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8007642:	f10d 0316 	add.w	r3, sp, #22
 8007646:	2203      	movs	r2, #3
 8007648:	4621      	mov	r1, r4
 800764a:	4628      	mov	r0, r5
 800764c:	f7ff f864 	bl	8006718 <dhcp_create_msg>
  if (p_out != NULL) {
 8007650:	4681      	mov	r9, r0
 8007652:	2800      	cmp	r0, #0
 8007654:	d038      	beq.n	80076c8 <dhcp_coarse_tmr+0xf0>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8007656:	6841      	ldr	r1, [r0, #4]
 8007658:	2302      	movs	r3, #2
 800765a:	2239      	movs	r2, #57	; 0x39
 800765c:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8007660:	31f0      	adds	r1, #240	; 0xf0
 8007662:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 8007748 <dhcp_coarse_tmr+0x170>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8007666:	f04f 0a03 	mov.w	sl, #3
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800766a:	9103      	str	r1, [sp, #12]
 800766c:	f7fe fffa 	bl	8006664 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8007670:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 8007672:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8007674:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8007678:	f7fe ffd8 	bl	800662c <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800767c:	9903      	ldr	r1, [sp, #12]
 800767e:	2303      	movs	r3, #3
 8007680:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8007682:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8007686:	f7fe ffed 	bl	8006664 <dhcp_option>
 800768a:	9903      	ldr	r1, [sp, #12]
 800768c:	f8ad 0016 	strh.w	r0, [sp, #22]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8007690:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007694:	f81b 2b01 	ldrb.w	r2, [fp], #1
 8007698:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800769c:	9103      	str	r1, [sp, #12]
 800769e:	f7fe ffff 	bl	80066a0 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80076a2:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
 80076a6:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80076a8:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80076ac:	d1f0      	bne.n	8007690 <dhcp_coarse_tmr+0xb8>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80076ae:	464a      	mov	r2, r9
 80076b0:	f7ff f8c6 	bl	8006840 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80076b4:	2343      	movs	r3, #67	; 0x43
 80076b6:	4642      	mov	r2, r8
 80076b8:	4649      	mov	r1, r9
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	9500      	str	r5, [sp, #0]
 80076be:	f005 ff71 	bl	800d5a4 <udp_sendto_if>
    pbuf_free(p_out);
 80076c2:	4648      	mov	r0, r9
 80076c4:	f002 f852 	bl	800976c <pbuf_free>
  if (dhcp->tries < 255) {
 80076c8:	79a3      	ldrb	r3, [r4, #6]
 80076ca:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 80076cc:	bf1c      	itt	ne
 80076ce:	3301      	addne	r3, #1
 80076d0:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80076d2:	79a3      	ldrb	r3, [r4, #6]
 80076d4:	2b09      	cmp	r3, #9
 80076d6:	bf96      	itet	ls
 80076d8:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 80076dc:	f242 7310 	movwhi	r3, #10000	; 0x2710
 80076e0:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80076e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80076e8:	bf9c      	itt	ls
 80076ea:	00db      	lslls	r3, r3, #3
 80076ec:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80076ee:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80076f2:	fbb3 f3f2 	udiv	r3, r3, r2
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80076f6:	8a62      	ldrh	r2, [r4, #18]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80076f8:	8123      	strh	r3, [r4, #8]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80076fa:	8aa3      	ldrh	r3, [r4, #20]
 80076fc:	1a9b      	subs	r3, r3, r2
 80076fe:	2b01      	cmp	r3, #1
 8007700:	dd8a      	ble.n	8007618 <dhcp_coarse_tmr+0x40>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8007702:	105b      	asrs	r3, r3, #1
 8007704:	8223      	strh	r3, [r4, #16]
 8007706:	e787      	b.n	8007618 <dhcp_coarse_tmr+0x40>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8007708:	89e2      	ldrh	r2, [r4, #14]
 800770a:	2a00      	cmp	r2, #0
 800770c:	d084      	beq.n	8007618 <dhcp_coarse_tmr+0x40>
 800770e:	1e51      	subs	r1, r2, #1
 8007710:	2a01      	cmp	r2, #1
 8007712:	81e1      	strh	r1, [r4, #14]
 8007714:	d180      	bne.n	8007618 <dhcp_coarse_tmr+0x40>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8007716:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 800771a:	2a01      	cmp	r2, #1
 800771c:	d002      	beq.n	8007724 <dhcp_coarse_tmr+0x14c>
 800771e:	2b0a      	cmp	r3, #10
 8007720:	f47f af7a 	bne.w	8007618 <dhcp_coarse_tmr+0x40>
    dhcp_renew(netif);
 8007724:	4628      	mov	r0, r5
 8007726:	f7ff fe25 	bl	8007374 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800772a:	89a3      	ldrh	r3, [r4, #12]
 800772c:	8a62      	ldrh	r2, [r4, #18]
 800772e:	1a9b      	subs	r3, r3, r2
 8007730:	2b01      	cmp	r3, #1
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8007732:	bfc4      	itt	gt
 8007734:	105b      	asrgt	r3, r3, #1
 8007736:	81e3      	strhgt	r3, [r4, #14]
 8007738:	e76e      	b.n	8007618 <dhcp_coarse_tmr+0x40>
 800773a:	bf00      	nop
 800773c:	2400a784 	.word	0x2400a784
 8007740:	2400665c 	.word	0x2400665c
 8007744:	0800f6dc 	.word	0x0800f6dc
 8007748:	0800f6d6 	.word	0x0800f6d6

0800774c <dhcp_fine_tmr>:
{
 800774c:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
 800774e:	4b1e      	ldr	r3, [pc, #120]	; (80077c8 <dhcp_fine_tmr+0x7c>)
        dhcp->request_timeout--;
 8007750:	2500      	movs	r5, #0
  NETIF_FOREACH(netif) {
 8007752:	681c      	ldr	r4, [r3, #0]
 8007754:	b904      	cbnz	r4, 8007758 <dhcp_fine_tmr+0xc>
}
 8007756:	bd38      	pop	{r3, r4, r5, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8007758:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (dhcp != NULL) {
 800775a:	b123      	cbz	r3, 8007766 <dhcp_fine_tmr+0x1a>
      if (dhcp->request_timeout > 1) {
 800775c:	891a      	ldrh	r2, [r3, #8]
 800775e:	2a01      	cmp	r2, #1
 8007760:	d903      	bls.n	800776a <dhcp_fine_tmr+0x1e>
        dhcp->request_timeout--;
 8007762:	3a01      	subs	r2, #1
 8007764:	811a      	strh	r2, [r3, #8]
  NETIF_FOREACH(netif) {
 8007766:	6824      	ldr	r4, [r4, #0]
 8007768:	e7f4      	b.n	8007754 <dhcp_fine_tmr+0x8>
      } else if (dhcp->request_timeout == 1) {
 800776a:	d1fc      	bne.n	8007766 <dhcp_fine_tmr+0x1a>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800776c:	795a      	ldrb	r2, [r3, #5]
        dhcp->request_timeout--;
 800776e:	811d      	strh	r5, [r3, #8]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8007770:	2a0c      	cmp	r2, #12
 8007772:	d001      	beq.n	8007778 <dhcp_fine_tmr+0x2c>
 8007774:	2a06      	cmp	r2, #6
 8007776:	d103      	bne.n	8007780 <dhcp_fine_tmr+0x34>
    dhcp_discover(netif);
 8007778:	4620      	mov	r0, r4
      dhcp_discover(netif);
 800777a:	f7ff f9bf 	bl	8006afc <dhcp_discover>
 800777e:	e7f2      	b.n	8007766 <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8007780:	2a01      	cmp	r2, #1
 8007782:	d10c      	bne.n	800779e <dhcp_fine_tmr+0x52>
    if (dhcp->tries <= 5) {
 8007784:	799b      	ldrb	r3, [r3, #6]
      dhcp_select(netif);
 8007786:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 8007788:	2b05      	cmp	r3, #5
 800778a:	d802      	bhi.n	8007792 <dhcp_fine_tmr+0x46>
      dhcp_select(netif);
 800778c:	f7ff f8fa 	bl	8006984 <dhcp_select>
 8007790:	e7e9      	b.n	8007766 <dhcp_fine_tmr+0x1a>
      dhcp_release_and_stop(netif);
 8007792:	f7ff fe6f 	bl	8007474 <dhcp_release_and_stop>
      dhcp_start(netif);
 8007796:	4620      	mov	r0, r4
 8007798:	f7ff feca 	bl	8007530 <dhcp_start>
 800779c:	e7e3      	b.n	8007766 <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800779e:	2a08      	cmp	r2, #8
 80077a0:	d109      	bne.n	80077b6 <dhcp_fine_tmr+0x6a>
    if (dhcp->tries <= 1) {
 80077a2:	799b      	ldrb	r3, [r3, #6]
      dhcp_check(netif);
 80077a4:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d802      	bhi.n	80077b0 <dhcp_fine_tmr+0x64>
      dhcp_check(netif);
 80077aa:	f7ff fa1d 	bl	8006be8 <dhcp_check>
 80077ae:	e7da      	b.n	8007766 <dhcp_fine_tmr+0x1a>
      dhcp_bind(netif);
 80077b0:	f7ff fa30 	bl	8006c14 <dhcp_bind>
 80077b4:	e7d7      	b.n	8007766 <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80077b6:	2a03      	cmp	r2, #3
 80077b8:	d1d5      	bne.n	8007766 <dhcp_fine_tmr+0x1a>
    if (dhcp->tries < REBOOT_TRIES) {
 80077ba:	799b      	ldrb	r3, [r3, #6]
      dhcp_reboot(netif);
 80077bc:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d8db      	bhi.n	800777a <dhcp_fine_tmr+0x2e>
      dhcp_reboot(netif);
 80077c2:	f7ff f85b 	bl	800687c <dhcp_reboot>
 80077c6:	e7ce      	b.n	8007766 <dhcp_fine_tmr+0x1a>
 80077c8:	2400a784 	.word	0x2400a784

080077cc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80077cc:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80077ce:	2618      	movs	r6, #24
 80077d0:	4d07      	ldr	r5, [pc, #28]	; (80077f0 <etharp_free_entry+0x24>)
{
 80077d2:	4604      	mov	r4, r0
  if (arp_table[i].q != NULL) {
 80077d4:	4346      	muls	r6, r0
 80077d6:	59a8      	ldr	r0, [r5, r6]
 80077d8:	b118      	cbz	r0, 80077e2 <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80077da:	f001 ffc7 	bl	800976c <pbuf_free>
    arp_table[i].q = NULL;
 80077de:	2300      	movs	r3, #0
 80077e0:	51ab      	str	r3, [r5, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80077e2:	2018      	movs	r0, #24
 80077e4:	2300      	movs	r3, #0
 80077e6:	fb00 5404 	mla	r4, r0, r4, r5
 80077ea:	7523      	strb	r3, [r4, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80077ec:	bd70      	pop	{r4, r5, r6, pc}
 80077ee:	bf00      	nop
 80077f0:	24006668 	.word	0x24006668

080077f4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80077f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f8:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80077fa:	f04f 0e0a 	mov.w	lr, #10
{
 80077fe:	4606      	mov	r6, r0
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8007800:	4699      	mov	r9, r3
 8007802:	469b      	mov	fp, r3
 8007804:	469c      	mov	ip, r3
  s16_t empty = ARP_TABLE_SIZE;
 8007806:	4674      	mov	r4, lr
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8007808:	4675      	mov	r5, lr
 800780a:	46f0      	mov	r8, lr
{
 800780c:	e9cd 2100 	strd	r2, r1, [sp]
 8007810:	4a3a      	ldr	r2, [pc, #232]	; (80078fc <etharp_find_entry+0x108>)
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8007812:	2c0a      	cmp	r4, #10
 8007814:	b218      	sxth	r0, r3
    u8_t state = arp_table[i].state;
 8007816:	f892 a014 	ldrb.w	sl, [r2, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800781a:	d11a      	bne.n	8007852 <etharp_find_entry+0x5e>
 800781c:	f1ba 0f00 	cmp.w	sl, #0
 8007820:	d05d      	beq.n	80078de <etharp_find_entry+0xea>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8007822:	b156      	cbz	r6, 800783a <etharp_find_entry+0x46>
 8007824:	6837      	ldr	r7, [r6, #0]
 8007826:	6851      	ldr	r1, [r2, #4]
 8007828:	428f      	cmp	r7, r1
 800782a:	d106      	bne.n	800783a <etharp_find_entry+0x46>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800782c:	9900      	ldr	r1, [sp, #0]
 800782e:	2900      	cmp	r1, #0
 8007830:	d048      	beq.n	80078c4 <etharp_find_entry+0xd0>
 8007832:	6891      	ldr	r1, [r2, #8]
 8007834:	9f00      	ldr	r7, [sp, #0]
 8007836:	42b9      	cmp	r1, r7
 8007838:	d044      	beq.n	80078c4 <etharp_find_entry+0xd0>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800783a:	f1ba 0f01 	cmp.w	sl, #1
 800783e:	8a51      	ldrh	r1, [r2, #18]
 8007840:	d148      	bne.n	80078d4 <etharp_find_entry+0xe0>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8007842:	6817      	ldr	r7, [r2, #0]
 8007844:	2f00      	cmp	r7, #0
 8007846:	d040      	beq.n	80078ca <etharp_find_entry+0xd6>
          if (arp_table[i].ctime >= age_queue) {
 8007848:	458c      	cmp	ip, r1
 800784a:	d805      	bhi.n	8007858 <etharp_find_entry+0x64>
 800784c:	468c      	mov	ip, r1
 800784e:	4686      	mov	lr, r0
 8007850:	e002      	b.n	8007858 <etharp_find_entry+0x64>
    } else if (state != ETHARP_STATE_EMPTY) {
 8007852:	f1ba 0f00 	cmp.w	sl, #0
 8007856:	d1e4      	bne.n	8007822 <etharp_find_entry+0x2e>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8007858:	3301      	adds	r3, #1
 800785a:	3218      	adds	r2, #24
 800785c:	2b0a      	cmp	r3, #10
 800785e:	d1d8      	bne.n	8007812 <etharp_find_entry+0x1e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8007860:	9b01      	ldr	r3, [sp, #4]
 8007862:	2b01      	cmp	r3, #1
 8007864:	d143      	bne.n	80078ee <etharp_find_entry+0xfa>
 8007866:	2c0a      	cmp	r4, #10
 8007868:	d111      	bne.n	800788e <etharp_find_entry+0x9a>
  if (empty < ARP_TABLE_SIZE) {
    i = empty;
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800786a:	2d0a      	cmp	r5, #10
 800786c:	d039      	beq.n	80078e2 <etharp_find_entry+0xee>
      /* recycle oldest stable*/
      i = old_stable;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800786e:	2318      	movs	r3, #24
 8007870:	4a22      	ldr	r2, [pc, #136]	; (80078fc <etharp_find_entry+0x108>)
 8007872:	436b      	muls	r3, r5
 8007874:	58d3      	ldr	r3, [r2, r3]
 8007876:	b133      	cbz	r3, 8007886 <etharp_find_entry+0x92>
 8007878:	4b21      	ldr	r3, [pc, #132]	; (8007900 <etharp_find_entry+0x10c>)
 800787a:	f240 126d 	movw	r2, #365	; 0x16d
 800787e:	4921      	ldr	r1, [pc, #132]	; (8007904 <etharp_find_entry+0x110>)
 8007880:	4821      	ldr	r0, [pc, #132]	; (8007908 <etharp_find_entry+0x114>)
 8007882:	f006 f959 	bl	800db38 <iprintf>
      return (s16_t)ERR_MEM;
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
 8007886:	462c      	mov	r4, r5
 8007888:	4628      	mov	r0, r5
 800788a:	f7ff ff9f 	bl	80077cc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800788e:	4d1b      	ldr	r5, [pc, #108]	; (80078fc <etharp_find_entry+0x108>)
 8007890:	2318      	movs	r3, #24
 8007892:	fb03 5304 	mla	r3, r3, r4, r5
 8007896:	7d1b      	ldrb	r3, [r3, #20]
 8007898:	b133      	cbz	r3, 80078a8 <etharp_find_entry+0xb4>
 800789a:	4b19      	ldr	r3, [pc, #100]	; (8007900 <etharp_find_entry+0x10c>)
 800789c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80078a0:	491a      	ldr	r1, [pc, #104]	; (800790c <etharp_find_entry+0x118>)
 80078a2:	4819      	ldr	r0, [pc, #100]	; (8007908 <etharp_find_entry+0x114>)
 80078a4:	f006 f948 	bl	800db38 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80078a8:	b126      	cbz	r6, 80078b4 <etharp_find_entry+0xc0>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80078aa:	2318      	movs	r3, #24
 80078ac:	6832      	ldr	r2, [r6, #0]
 80078ae:	fb03 5304 	mla	r3, r3, r4, r5
 80078b2:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 80078b4:	2318      	movs	r3, #24
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80078b6:	4620      	mov	r0, r4
  arp_table[i].ctime = 0;
 80078b8:	fb03 5504 	mla	r5, r3, r4, r5
 80078bc:	2300      	movs	r3, #0
 80078be:	826b      	strh	r3, [r5, #18]
  arp_table[i].netif = netif;
 80078c0:	9b00      	ldr	r3, [sp, #0]
 80078c2:	60ab      	str	r3, [r5, #8]
}
 80078c4:	b003      	add	sp, #12
 80078c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 80078ca:	458b      	cmp	fp, r1
 80078cc:	d8c4      	bhi.n	8007858 <etharp_find_entry+0x64>
 80078ce:	468b      	mov	fp, r1
 80078d0:	4680      	mov	r8, r0
 80078d2:	e7c1      	b.n	8007858 <etharp_find_entry+0x64>
          if (arp_table[i].ctime >= age_stable) {
 80078d4:	4589      	cmp	r9, r1
 80078d6:	d8bf      	bhi.n	8007858 <etharp_find_entry+0x64>
 80078d8:	4689      	mov	r9, r1
 80078da:	4605      	mov	r5, r0
 80078dc:	e7bc      	b.n	8007858 <etharp_find_entry+0x64>
 80078de:	4604      	mov	r4, r0
 80078e0:	e7ba      	b.n	8007858 <etharp_find_entry+0x64>
    } else if (old_pending < ARP_TABLE_SIZE) {
 80078e2:	f1b8 0f0a 	cmp.w	r8, #10
 80078e6:	d105      	bne.n	80078f4 <etharp_find_entry+0x100>
    } else if (old_queue < ARP_TABLE_SIZE) {
 80078e8:	f1be 0f0a 	cmp.w	lr, #10
 80078ec:	d104      	bne.n	80078f8 <etharp_find_entry+0x104>
    return (s16_t)ERR_MEM;
 80078ee:	f04f 30ff 	mov.w	r0, #4294967295
 80078f2:	e7e7      	b.n	80078c4 <etharp_find_entry+0xd0>
 80078f4:	4645      	mov	r5, r8
 80078f6:	e7c6      	b.n	8007886 <etharp_find_entry+0x92>
 80078f8:	4675      	mov	r5, lr
 80078fa:	e7c4      	b.n	8007886 <etharp_find_entry+0x92>
 80078fc:	24006668 	.word	0x24006668
 8007900:	0802082b 	.word	0x0802082b
 8007904:	08020893 	.word	0x08020893
 8007908:	0801f8bf 	.word	0x0801f8bf
 800790c:	080208aa 	.word	0x080208aa

08007910 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8007910:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007914:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8007918:	4688      	mov	r8, r1
 800791a:	4691      	mov	r9, r2
 800791c:	461e      	mov	r6, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800791e:	4607      	mov	r7, r0
 8007920:	b930      	cbnz	r0, 8007930 <etharp_raw+0x20>
 8007922:	4b2d      	ldr	r3, [pc, #180]	; (80079d8 <etharp_raw+0xc8>)
 8007924:	f240 4257 	movw	r2, #1111	; 0x457
 8007928:	492c      	ldr	r1, [pc, #176]	; (80079dc <etharp_raw+0xcc>)
 800792a:	482d      	ldr	r0, [pc, #180]	; (80079e0 <etharp_raw+0xd0>)
 800792c:	f006 f904 	bl	800db38 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8007930:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007934:	211c      	movs	r1, #28
 8007936:	200e      	movs	r0, #14
 8007938:	f001 ff80 	bl	800983c <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800793c:	4605      	mov	r5, r0
 800793e:	2800      	cmp	r0, #0
 8007940:	d047      	beq.n	80079d2 <etharp_raw+0xc2>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8007942:	8943      	ldrh	r3, [r0, #10]
 8007944:	2b1b      	cmp	r3, #27
 8007946:	d806      	bhi.n	8007956 <etharp_raw+0x46>
 8007948:	4b23      	ldr	r3, [pc, #140]	; (80079d8 <etharp_raw+0xc8>)
 800794a:	f240 4262 	movw	r2, #1122	; 0x462
 800794e:	4925      	ldr	r1, [pc, #148]	; (80079e4 <etharp_raw+0xd4>)
 8007950:	4823      	ldr	r0, [pc, #140]	; (80079e0 <etharp_raw+0xd0>)
 8007952:	f006 f8f1 	bl	800db38 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8007956:	686c      	ldr	r4, [r5, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8007958:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800795c:	f001 f94c 	bl	8008bf8 <lwip_htons>
 8007960:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8007962:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007966:	2b06      	cmp	r3, #6
 8007968:	d006      	beq.n	8007978 <etharp_raw+0x68>
 800796a:	4b1b      	ldr	r3, [pc, #108]	; (80079d8 <etharp_raw+0xc8>)
 800796c:	f240 4269 	movw	r2, #1129	; 0x469
 8007970:	491d      	ldr	r1, [pc, #116]	; (80079e8 <etharp_raw+0xd8>)
 8007972:	481b      	ldr	r0, [pc, #108]	; (80079e0 <etharp_raw+0xd0>)
 8007974:	f006 f8e0 	bl	800db38 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8007978:	6833      	ldr	r3, [r6, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800797a:	4642      	mov	r2, r8
 800797c:	4629      	mov	r1, r5
 800797e:	4638      	mov	r0, r7
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8007980:	60a3      	str	r3, [r4, #8]
 8007982:	88b3      	ldrh	r3, [r6, #4]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8007984:	2600      	movs	r6, #0
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8007986:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8007988:	f8da 3000 	ldr.w	r3, [sl]
 800798c:	f8c4 3012 	str.w	r3, [r4, #18]
 8007990:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8007994:	82e3      	strh	r3, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8007996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800799e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079a0:	681b      	ldr	r3, [r3, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80079a2:	7026      	strb	r6, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80079a4:	61a3      	str	r3, [r4, #24]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80079a6:	2301      	movs	r3, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80079a8:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80079aa:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80079ac:	2308      	movs	r3, #8
 80079ae:	70a3      	strb	r3, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 80079b0:	2306      	movs	r3, #6
 80079b2:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80079b4:	2304      	movs	r3, #4
 80079b6:	7163      	strb	r3, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80079b8:	f640 0306 	movw	r3, #2054	; 0x806
 80079bc:	9300      	str	r3, [sp, #0]
 80079be:	464b      	mov	r3, r9
 80079c0:	f005 ff1a 	bl	800d7f8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80079c4:	4628      	mov	r0, r5
 80079c6:	f001 fed1 	bl	800976c <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 80079ca:	4630      	mov	r0, r6
}
 80079cc:	b002      	add	sp, #8
 80079ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 80079d2:	f04f 30ff 	mov.w	r0, #4294967295
 80079d6:	e7f9      	b.n	80079cc <etharp_raw+0xbc>
 80079d8:	0802082b 	.word	0x0802082b
 80079dc:	080206f1 	.word	0x080206f1
 80079e0:	0801f8bf 	.word	0x0801f8bf
 80079e4:	080208d3 	.word	0x080208d3
 80079e8:	08020904 	.word	0x08020904

080079ec <etharp_cleanup_netif>:
{
 80079ec:	b570      	push	{r4, r5, r6, lr}
 80079ee:	4606      	mov	r6, r0
 80079f0:	4d07      	ldr	r5, [pc, #28]	; (8007a10 <etharp_cleanup_netif+0x24>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80079f2:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80079f4:	7d2b      	ldrb	r3, [r5, #20]
 80079f6:	b12b      	cbz	r3, 8007a04 <etharp_cleanup_netif+0x18>
 80079f8:	68ab      	ldr	r3, [r5, #8]
 80079fa:	42b3      	cmp	r3, r6
 80079fc:	d102      	bne.n	8007a04 <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 80079fe:	4620      	mov	r0, r4
 8007a00:	f7ff fee4 	bl	80077cc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8007a04:	3401      	adds	r4, #1
 8007a06:	3518      	adds	r5, #24
 8007a08:	2c0a      	cmp	r4, #10
 8007a0a:	d1f3      	bne.n	80079f4 <etharp_cleanup_netif+0x8>
}
 8007a0c:	bd70      	pop	{r4, r5, r6, pc}
 8007a0e:	bf00      	nop
 8007a10:	24006668 	.word	0x24006668

08007a14 <etharp_input>:
{
 8007a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a18:	4607      	mov	r7, r0
 8007a1a:	b088      	sub	sp, #32
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8007a1c:	460c      	mov	r4, r1
 8007a1e:	b949      	cbnz	r1, 8007a34 <etharp_input+0x20>
 8007a20:	4b4c      	ldr	r3, [pc, #304]	; (8007b54 <etharp_input+0x140>)
 8007a22:	f240 228a 	movw	r2, #650	; 0x28a
 8007a26:	494c      	ldr	r1, [pc, #304]	; (8007b58 <etharp_input+0x144>)
 8007a28:	484c      	ldr	r0, [pc, #304]	; (8007b5c <etharp_input+0x148>)
 8007a2a:	f006 f885 	bl	800db38 <iprintf>
}
 8007a2e:	b008      	add	sp, #32
 8007a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr = (struct etharp_hdr *)p->payload;
 8007a34:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8007a36:	882b      	ldrh	r3, [r5, #0]
 8007a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a3c:	d108      	bne.n	8007a50 <etharp_input+0x3c>
 8007a3e:	792b      	ldrb	r3, [r5, #4]
 8007a40:	2b06      	cmp	r3, #6
 8007a42:	d105      	bne.n	8007a50 <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8007a44:	796b      	ldrb	r3, [r5, #5]
 8007a46:	2b04      	cmp	r3, #4
 8007a48:	d102      	bne.n	8007a50 <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8007a4a:	886b      	ldrh	r3, [r5, #2]
 8007a4c:	2b08      	cmp	r3, #8
 8007a4e:	d003      	beq.n	8007a58 <etharp_input+0x44>
  pbuf_free(p);
 8007a50:	4638      	mov	r0, r7
 8007a52:	f001 fe8b 	bl	800976c <pbuf_free>
 8007a56:	e7ea      	b.n	8007a2e <etharp_input+0x1a>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8007a58:	f8d5 300e 	ldr.w	r3, [r5, #14]
 8007a5c:	f105 0808 	add.w	r8, r5, #8
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007a60:	684e      	ldr	r6, [r1, #4]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8007a62:	9307      	str	r3, [sp, #28]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8007a64:	69ab      	ldr	r3, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007a66:	2e00      	cmp	r6, #0
 8007a68:	d05f      	beq.n	8007b2a <etharp_input+0x116>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8007a6a:	1af3      	subs	r3, r6, r3
 8007a6c:	425e      	negs	r6, r3
 8007a6e:	415e      	adcs	r6, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8007a70:	f1c6 0a02 	rsb	sl, r6, #2
 8007a74:	fa5f fa8a 	uxtb.w	sl, sl
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8007a78:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8007a7c:	2b06      	cmp	r3, #6
 8007a7e:	d006      	beq.n	8007a8e <etharp_input+0x7a>
 8007a80:	4b34      	ldr	r3, [pc, #208]	; (8007b54 <etharp_input+0x140>)
 8007a82:	f240 12a9 	movw	r2, #425	; 0x1a9
 8007a86:	4936      	ldr	r1, [pc, #216]	; (8007b60 <etharp_input+0x14c>)
 8007a88:	4834      	ldr	r0, [pc, #208]	; (8007b5c <etharp_input+0x148>)
 8007a8a:	f006 f855 	bl	800db38 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 8007a8e:	9807      	ldr	r0, [sp, #28]
 8007a90:	2800      	cmp	r0, #0
 8007a92:	d03e      	beq.n	8007b12 <etharp_input+0xfe>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8007a94:	4621      	mov	r1, r4
 8007a96:	f000 fcbe 	bl	8008416 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8007a9a:	4681      	mov	r9, r0
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	d138      	bne.n	8007b12 <etharp_input+0xfe>
      ip4_addr_ismulticast(ipaddr)) {
 8007aa0:	9b07      	ldr	r3, [sp, #28]
 8007aa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8007aa6:	2be0      	cmp	r3, #224	; 0xe0
 8007aa8:	d033      	beq.n	8007b12 <etharp_input+0xfe>
  i = etharp_find_entry(ipaddr, flags, netif);
 8007aaa:	4622      	mov	r2, r4
 8007aac:	4651      	mov	r1, sl
 8007aae:	a807      	add	r0, sp, #28
 8007ab0:	f7ff fea0 	bl	80077f4 <etharp_find_entry>
  if (i < 0) {
 8007ab4:	1e03      	subs	r3, r0, #0
 8007ab6:	db2c      	blt.n	8007b12 <etharp_input+0xfe>
    arp_table[i].state = ETHARP_STATE_STABLE;
 8007ab8:	2018      	movs	r0, #24
 8007aba:	4a2a      	ldr	r2, [pc, #168]	; (8007b64 <etharp_input+0x150>)
 8007abc:	f04f 0e02 	mov.w	lr, #2
 8007ac0:	fb00 fc03 	mul.w	ip, r0, r3
 8007ac4:	eb02 010c 	add.w	r1, r2, ip
 8007ac8:	f881 e014 	strb.w	lr, [r1, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8007acc:	f04f 0e0c 	mov.w	lr, #12
  arp_table[i].netif = netif;
 8007ad0:	608c      	str	r4, [r1, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8007ad2:	fb13 e300 	smlabb	r3, r3, r0, lr
 8007ad6:	f8d8 0000 	ldr.w	r0, [r8]
 8007ada:	eb02 0e03 	add.w	lr, r2, r3
 8007ade:	50d0      	str	r0, [r2, r3]
 8007ae0:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8007ae4:	f8ae 3004 	strh.w	r3, [lr, #4]
  arp_table[i].ctime = 0;
 8007ae8:	f8a1 9012 	strh.w	r9, [r1, #18]
  if (arp_table[i].q != NULL) {
 8007aec:	f852 100c 	ldr.w	r1, [r2, ip]
 8007af0:	b179      	cbz	r1, 8007b12 <etharp_input+0xfe>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8007af2:	f44f 6300 	mov.w	r3, #2048	; 0x800
    arp_table[i].q = NULL;
 8007af6:	f842 900c 	str.w	r9, [r2, ip]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8007afa:	4620      	mov	r0, r4
 8007afc:	f104 022a 	add.w	r2, r4, #42	; 0x2a
 8007b00:	9300      	str	r3, [sp, #0]
 8007b02:	4643      	mov	r3, r8
 8007b04:	9105      	str	r1, [sp, #20]
 8007b06:	f005 fe77 	bl	800d7f8 <ethernet_output>
    pbuf_free(p);
 8007b0a:	9905      	ldr	r1, [sp, #20]
 8007b0c:	4608      	mov	r0, r1
 8007b0e:	f001 fe2d 	bl	800976c <pbuf_free>
  switch (hdr->opcode) {
 8007b12:	88eb      	ldrh	r3, [r5, #6]
 8007b14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b18:	d00a      	beq.n	8007b30 <etharp_input+0x11c>
 8007b1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b1e:	d197      	bne.n	8007a50 <etharp_input+0x3c>
      dhcp_arp_reply(netif, &sipaddr);
 8007b20:	a907      	add	r1, sp, #28
 8007b22:	4620      	mov	r0, r4
 8007b24:	f7ff fbc6 	bl	80072b4 <dhcp_arp_reply>
      break;
 8007b28:	e792      	b.n	8007a50 <etharp_input+0x3c>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8007b2a:	f04f 0a02 	mov.w	sl, #2
 8007b2e:	e7a3      	b.n	8007a78 <etharp_input+0x64>
      if (for_us) {
 8007b30:	2e00      	cmp	r6, #0
 8007b32:	d08d      	beq.n	8007a50 <etharp_input+0x3c>
        etharp_raw(netif,
 8007b34:	2202      	movs	r2, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8007b36:	f104 032a 	add.w	r3, r4, #42	; 0x2a
        etharp_raw(netif,
 8007b3a:	4620      	mov	r0, r4
 8007b3c:	9203      	str	r2, [sp, #12]
 8007b3e:	aa07      	add	r2, sp, #28
 8007b40:	4619      	mov	r1, r3
 8007b42:	e9cd 8201 	strd	r8, r2, [sp, #4]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8007b46:	1d22      	adds	r2, r4, #4
        etharp_raw(netif,
 8007b48:	9200      	str	r2, [sp, #0]
 8007b4a:	4642      	mov	r2, r8
 8007b4c:	f7ff fee0 	bl	8007910 <etharp_raw>
 8007b50:	e77e      	b.n	8007a50 <etharp_input+0x3c>
 8007b52:	bf00      	nop
 8007b54:	0802082b 	.word	0x0802082b
 8007b58:	080206f1 	.word	0x080206f1
 8007b5c:	0801f8bf 	.word	0x0801f8bf
 8007b60:	08020986 	.word	0x08020986
 8007b64:	24006668 	.word	0x24006668

08007b68 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8007b68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b6a:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8007b6c:	2401      	movs	r4, #1
 8007b6e:	f100 032a 	add.w	r3, r0, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8007b72:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8007b74:	e9cd 1402 	strd	r1, r4, [sp, #8]
 8007b78:	4904      	ldr	r1, [pc, #16]	; (8007b8c <etharp_request+0x24>)
 8007b7a:	9200      	str	r2, [sp, #0]
 8007b7c:	9101      	str	r1, [sp, #4]
 8007b7e:	4619      	mov	r1, r3
 8007b80:	4a03      	ldr	r2, [pc, #12]	; (8007b90 <etharp_request+0x28>)
 8007b82:	f7ff fec5 	bl	8007910 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8007b86:	b004      	add	sp, #16
 8007b88:	bd10      	pop	{r4, pc}
 8007b8a:	bf00      	nop
 8007b8c:	0800f836 	.word	0x0800f836
 8007b90:	0800f830 	.word	0x0800f830

08007b94 <etharp_tmr>:
{
 8007b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b96:	4c13      	ldr	r4, [pc, #76]	; (8007be4 <etharp_tmr+0x50>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8007b98:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 8007b9a:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8007b9c:	2704      	movs	r7, #4
    u8_t state = arp_table[i].state;
 8007b9e:	7d22      	ldrb	r2, [r4, #20]
    if (state != ETHARP_STATE_EMPTY
 8007ba0:	b16a      	cbz	r2, 8007bbe <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 8007ba2:	8a63      	ldrh	r3, [r4, #18]
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8007ba8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 8007bac:	8263      	strh	r3, [r4, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8007bae:	d203      	bcs.n	8007bb8 <etharp_tmr+0x24>
 8007bb0:	2a01      	cmp	r2, #1
 8007bb2:	d109      	bne.n	8007bc8 <etharp_tmr+0x34>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8007bb4:	2b04      	cmp	r3, #4
 8007bb6:	d90f      	bls.n	8007bd8 <etharp_tmr+0x44>
        etharp_free_entry(i);
 8007bb8:	4628      	mov	r0, r5
 8007bba:	f7ff fe07 	bl	80077cc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8007bbe:	3501      	adds	r5, #1
 8007bc0:	3418      	adds	r4, #24
 8007bc2:	2d0a      	cmp	r5, #10
 8007bc4:	d1eb      	bne.n	8007b9e <etharp_tmr+0xa>
}
 8007bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8007bc8:	2a03      	cmp	r2, #3
 8007bca:	d101      	bne.n	8007bd0 <etharp_tmr+0x3c>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8007bcc:	7527      	strb	r7, [r4, #20]
 8007bce:	e7f6      	b.n	8007bbe <etharp_tmr+0x2a>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8007bd0:	2a04      	cmp	r2, #4
 8007bd2:	d1f4      	bne.n	8007bbe <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 8007bd4:	7526      	strb	r6, [r4, #20]
 8007bd6:	e7f2      	b.n	8007bbe <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8007bd8:	1d21      	adds	r1, r4, #4
 8007bda:	68a0      	ldr	r0, [r4, #8]
 8007bdc:	f7ff ffc4 	bl	8007b68 <etharp_request>
 8007be0:	e7ed      	b.n	8007bbe <etharp_tmr+0x2a>
 8007be2:	bf00      	nop
 8007be4:	24006668 	.word	0x24006668

08007be8 <etharp_output_to_arp_index>:
{
 8007be8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8007bec:	4d24      	ldr	r5, [pc, #144]	; (8007c80 <etharp_output_to_arp_index+0x98>)
 8007bee:	2318      	movs	r3, #24
{
 8007bf0:	4607      	mov	r7, r0
 8007bf2:	4688      	mov	r8, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8007bf4:	fb03 5302 	mla	r3, r3, r2, r5
{
 8007bf8:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8007bfa:	7d1b      	ldrb	r3, [r3, #20]
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d806      	bhi.n	8007c0e <etharp_output_to_arp_index+0x26>
 8007c00:	4b20      	ldr	r3, [pc, #128]	; (8007c84 <etharp_output_to_arp_index+0x9c>)
 8007c02:	f240 22ee 	movw	r2, #750	; 0x2ee
 8007c06:	4920      	ldr	r1, [pc, #128]	; (8007c88 <etharp_output_to_arp_index+0xa0>)
 8007c08:	4820      	ldr	r0, [pc, #128]	; (8007c8c <etharp_output_to_arp_index+0xa4>)
 8007c0a:	f005 ff95 	bl	800db38 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8007c0e:	2218      	movs	r2, #24
 8007c10:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 8007c14:	f107 092a 	add.w	r9, r7, #42	; 0x2a
 8007c18:	fb02 5404 	mla	r4, r2, r4, r5
 8007c1c:	00f6      	lsls	r6, r6, #3
 8007c1e:	7d23      	ldrb	r3, [r4, #20]
 8007c20:	f106 0a0c 	add.w	sl, r6, #12
 8007c24:	2b02      	cmp	r3, #2
 8007c26:	44aa      	add	sl, r5
 8007c28:	d10b      	bne.n	8007c42 <etharp_output_to_arp_index+0x5a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8007c2a:	8a63      	ldrh	r3, [r4, #18]
 8007c2c:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8007c30:	d913      	bls.n	8007c5a <etharp_output_to_arp_index+0x72>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8007c32:	3604      	adds	r6, #4
 8007c34:	4638      	mov	r0, r7
 8007c36:	19a9      	adds	r1, r5, r6
 8007c38:	f7ff ff96 	bl	8007b68 <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8007c3c:	b908      	cbnz	r0, 8007c42 <etharp_output_to_arp_index+0x5a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8007c3e:	2303      	movs	r3, #3
 8007c40:	7523      	strb	r3, [r4, #20]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8007c42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c46:	464a      	mov	r2, r9
 8007c48:	4641      	mov	r1, r8
 8007c4a:	4638      	mov	r0, r7
 8007c4c:	9300      	str	r3, [sp, #0]
 8007c4e:	4653      	mov	r3, sl
 8007c50:	f005 fdd2 	bl	800d7f8 <ethernet_output>
}
 8007c54:	b004      	add	sp, #16
 8007c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8007c5a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8007c5e:	d3f0      	bcc.n	8007c42 <etharp_output_to_arp_index+0x5a>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8007c60:	2301      	movs	r3, #1
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8007c62:	3604      	adds	r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8007c64:	4652      	mov	r2, sl
 8007c66:	4649      	mov	r1, r9
 8007c68:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8007c6a:	442e      	add	r6, r5
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8007c6c:	4b08      	ldr	r3, [pc, #32]	; (8007c90 <etharp_output_to_arp_index+0xa8>)
 8007c6e:	4638      	mov	r0, r7
 8007c70:	9602      	str	r6, [sp, #8]
 8007c72:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8007c74:	1d3b      	adds	r3, r7, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8007c76:	9300      	str	r3, [sp, #0]
 8007c78:	464b      	mov	r3, r9
 8007c7a:	f7ff fe49 	bl	8007910 <etharp_raw>
 8007c7e:	e7dd      	b.n	8007c3c <etharp_output_to_arp_index+0x54>
 8007c80:	24006668 	.word	0x24006668
 8007c84:	0802082b 	.word	0x0802082b
 8007c88:	080209aa 	.word	0x080209aa
 8007c8c:	0801f8bf 	.word	0x0801f8bf
 8007c90:	0800f836 	.word	0x0800f836

08007c94 <etharp_query>:
{
 8007c94:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c98:	4688      	mov	r8, r1
 8007c9a:	4606      	mov	r6, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8007c9c:	4601      	mov	r1, r0
{
 8007c9e:	4615      	mov	r5, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8007ca0:	f8d8 0000 	ldr.w	r0, [r8]
 8007ca4:	f000 fbb7 	bl	8008416 <ip4_addr_isbroadcast_u32>
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	d16b      	bne.n	8007d84 <etharp_query+0xf0>
      ip4_addr_ismulticast(ipaddr) ||
 8007cac:	f8d8 3000 	ldr.w	r3, [r8]
 8007cb0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8007cb4:	2ae0      	cmp	r2, #224	; 0xe0
 8007cb6:	d065      	beq.n	8007d84 <etharp_query+0xf0>
      ip4_addr_isany(ipaddr)) {
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d063      	beq.n	8007d84 <etharp_query+0xf0>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8007cbc:	4632      	mov	r2, r6
 8007cbe:	2101      	movs	r1, #1
 8007cc0:	4640      	mov	r0, r8
 8007cc2:	f7ff fd97 	bl	80077f4 <etharp_find_entry>
  if (i_err < 0) {
 8007cc6:	1e04      	subs	r4, r0, #0
 8007cc8:	da03      	bge.n	8007cd2 <etharp_query+0x3e>
    return (err_t)i_err;
 8007cca:	b260      	sxtb	r0, r4
}
 8007ccc:	b002      	add	sp, #8
 8007cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8007cd2:	2c7e      	cmp	r4, #126	; 0x7e
 8007cd4:	dd06      	ble.n	8007ce4 <etharp_query+0x50>
 8007cd6:	4b35      	ldr	r3, [pc, #212]	; (8007dac <etharp_query+0x118>)
 8007cd8:	f240 32c1 	movw	r2, #961	; 0x3c1
 8007cdc:	4934      	ldr	r1, [pc, #208]	; (8007db0 <etharp_query+0x11c>)
 8007cde:	4835      	ldr	r0, [pc, #212]	; (8007db4 <etharp_query+0x120>)
 8007ce0:	f005 ff2a 	bl	800db38 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8007ce4:	b2e4      	uxtb	r4, r4
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8007ce6:	4f34      	ldr	r7, [pc, #208]	; (8007db8 <etharp_query+0x124>)
 8007ce8:	2218      	movs	r2, #24
 8007cea:	fb02 7204 	mla	r2, r2, r4, r7
 8007cee:	7d13      	ldrb	r3, [r2, #20]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d156      	bne.n	8007da2 <etharp_query+0x10e>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8007cf4:	2301      	movs	r3, #1
    arp_table[i].netif = netif;
 8007cf6:	6096      	str	r6, [r2, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8007cf8:	7513      	strb	r3, [r2, #20]
    result = etharp_request(netif, ipaddr);
 8007cfa:	4641      	mov	r1, r8
 8007cfc:	4630      	mov	r0, r6
 8007cfe:	f7ff ff33 	bl	8007b68 <etharp_request>
    if (q == NULL) {
 8007d02:	2d00      	cmp	r5, #0
 8007d04:	d0e2      	beq.n	8007ccc <etharp_query+0x38>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8007d06:	2318      	movs	r3, #24
 8007d08:	fb03 7204 	mla	r2, r3, r4, r7
 8007d0c:	7d12      	ldrb	r2, [r2, #20]
 8007d0e:	2a01      	cmp	r2, #1
 8007d10:	d90e      	bls.n	8007d30 <etharp_query+0x9c>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8007d12:	fb03 7304 	mla	r3, r3, r4, r7
 8007d16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d1a:	4629      	mov	r1, r5
 8007d1c:	4630      	mov	r0, r6
 8007d1e:	9200      	str	r2, [sp, #0]
 8007d20:	330c      	adds	r3, #12
 8007d22:	f106 022a 	add.w	r2, r6, #42	; 0x2a
    ETHARP_SET_ADDRHINT(netif, i);
 8007d26:	f887 40f0 	strb.w	r4, [r7, #240]	; 0xf0
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8007d2a:	f005 fd65 	bl	800d7f8 <ethernet_output>
 8007d2e:	e7cd      	b.n	8007ccc <etharp_query+0x38>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8007d30:	d1cc      	bne.n	8007ccc <etharp_query+0x38>
 8007d32:	462e      	mov	r6, r5
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8007d34:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8007dac <etharp_query+0x118>
 8007d38:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8007dbc <etharp_query+0x128>
 8007d3c:	f8df a074 	ldr.w	sl, [pc, #116]	; 8007db4 <etharp_query+0x120>
 8007d40:	8972      	ldrh	r2, [r6, #10]
 8007d42:	8933      	ldrh	r3, [r6, #8]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d108      	bne.n	8007d5a <etharp_query+0xc6>
 8007d48:	6833      	ldr	r3, [r6, #0]
 8007d4a:	b133      	cbz	r3, 8007d5a <etharp_query+0xc6>
 8007d4c:	4643      	mov	r3, r8
 8007d4e:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8007d52:	4649      	mov	r1, r9
 8007d54:	4650      	mov	r0, sl
 8007d56:	f005 feef 	bl	800db38 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8007d5a:	7b33      	ldrb	r3, [r6, #12]
 8007d5c:	065b      	lsls	r3, r3, #25
 8007d5e:	d414      	bmi.n	8007d8a <etharp_query+0xf6>
      p = p->next;
 8007d60:	6836      	ldr	r6, [r6, #0]
    while (p) {
 8007d62:	2e00      	cmp	r6, #0
 8007d64:	d1ec      	bne.n	8007d40 <etharp_query+0xac>
      pbuf_ref(p);
 8007d66:	4628      	mov	r0, r5
 8007d68:	f001 fe42 	bl	80099f0 <pbuf_ref>
      if (arp_table[i].q != NULL) {
 8007d6c:	2318      	movs	r3, #24
 8007d6e:	fb03 f204 	mul.w	r2, r3, r4
 8007d72:	461e      	mov	r6, r3
 8007d74:	58b8      	ldr	r0, [r7, r2]
 8007d76:	b108      	cbz	r0, 8007d7c <etharp_query+0xe8>
        pbuf_free(arp_table[i].q);
 8007d78:	f001 fcf8 	bl	800976c <pbuf_free>
      arp_table[i].q = p;
 8007d7c:	4374      	muls	r4, r6
      result = ERR_OK;
 8007d7e:	2000      	movs	r0, #0
      arp_table[i].q = p;
 8007d80:	513d      	str	r5, [r7, r4]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
 8007d82:	e7a3      	b.n	8007ccc <etharp_query+0x38>
    return ERR_ARG;
 8007d84:	f06f 000f 	mvn.w	r0, #15
 8007d88:	e7a0      	b.n	8007ccc <etharp_query+0x38>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8007d8a:	462a      	mov	r2, r5
 8007d8c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8007d90:	200e      	movs	r0, #14
 8007d92:	f001 ff55 	bl	8009c40 <pbuf_clone>
    if (p != NULL) {
 8007d96:	4605      	mov	r5, r0
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	d1e7      	bne.n	8007d6c <etharp_query+0xd8>
      result = ERR_MEM;
 8007d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007da0:	e794      	b.n	8007ccc <etharp_query+0x38>
  if (is_new_entry || (q == NULL)) {
 8007da2:	2d00      	cmp	r5, #0
 8007da4:	d0a9      	beq.n	8007cfa <etharp_query+0x66>
  err_t result = ERR_MEM;
 8007da6:	f04f 30ff 	mov.w	r0, #4294967295
 8007daa:	e7ac      	b.n	8007d06 <etharp_query+0x72>
 8007dac:	0802082b 	.word	0x0802082b
 8007db0:	080209da 	.word	0x080209da
 8007db4:	0801f8bf 	.word	0x0801f8bf
 8007db8:	24006668 	.word	0x24006668
 8007dbc:	080209e8 	.word	0x080209e8

08007dc0 <etharp_output>:
{
 8007dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dc2:	460e      	mov	r6, r1
 8007dc4:	b085      	sub	sp, #20
 8007dc6:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8007dc8:	4604      	mov	r4, r0
 8007dca:	b930      	cbnz	r0, 8007dda <etharp_output+0x1a>
 8007dcc:	4b41      	ldr	r3, [pc, #260]	; (8007ed4 <etharp_output+0x114>)
 8007dce:	f240 321e 	movw	r2, #798	; 0x31e
 8007dd2:	4941      	ldr	r1, [pc, #260]	; (8007ed8 <etharp_output+0x118>)
 8007dd4:	4841      	ldr	r0, [pc, #260]	; (8007edc <etharp_output+0x11c>)
 8007dd6:	f005 feaf 	bl	800db38 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8007dda:	b936      	cbnz	r6, 8007dea <etharp_output+0x2a>
 8007ddc:	4b3d      	ldr	r3, [pc, #244]	; (8007ed4 <etharp_output+0x114>)
 8007dde:	f240 321f 	movw	r2, #799	; 0x31f
 8007de2:	493f      	ldr	r1, [pc, #252]	; (8007ee0 <etharp_output+0x120>)
 8007de4:	483d      	ldr	r0, [pc, #244]	; (8007edc <etharp_output+0x11c>)
 8007de6:	f005 fea7 	bl	800db38 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8007dea:	b935      	cbnz	r5, 8007dfa <etharp_output+0x3a>
 8007dec:	4b39      	ldr	r3, [pc, #228]	; (8007ed4 <etharp_output+0x114>)
 8007dee:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007df2:	493c      	ldr	r1, [pc, #240]	; (8007ee4 <etharp_output+0x124>)
 8007df4:	4839      	ldr	r0, [pc, #228]	; (8007edc <etharp_output+0x11c>)
 8007df6:	f005 fe9f 	bl	800db38 <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8007dfa:	4621      	mov	r1, r4
 8007dfc:	6828      	ldr	r0, [r5, #0]
 8007dfe:	f000 fb0a 	bl	8008416 <ip4_addr_isbroadcast_u32>
 8007e02:	2800      	cmp	r0, #0
 8007e04:	d160      	bne.n	8007ec8 <etharp_output+0x108>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8007e06:	682b      	ldr	r3, [r5, #0]
 8007e08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007e0c:	2ae0      	cmp	r2, #224	; 0xe0
 8007e0e:	d11b      	bne.n	8007e48 <etharp_output+0x88>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8007e10:	2301      	movs	r3, #1
 8007e12:	f8ad 3008 	strh.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8007e16:	235e      	movs	r3, #94	; 0x5e
 8007e18:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8007e1c:	786b      	ldrb	r3, [r5, #1]
 8007e1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e22:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8007e26:	78ab      	ldrb	r3, [r5, #2]
 8007e28:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8007e2c:	78eb      	ldrb	r3, [r5, #3]
 8007e2e:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 8007e32:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8007e34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e38:	4631      	mov	r1, r6
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	9200      	str	r2, [sp, #0]
 8007e3e:	f104 022a 	add.w	r2, r4, #42	; 0x2a
 8007e42:	f005 fcd9 	bl	800d7f8 <ethernet_output>
 8007e46:	e023      	b.n	8007e90 <etharp_output+0xd0>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8007e48:	6862      	ldr	r2, [r4, #4]
 8007e4a:	68a1      	ldr	r1, [r4, #8]
 8007e4c:	405a      	eors	r2, r3
 8007e4e:	420a      	tst	r2, r1
 8007e50:	d009      	beq.n	8007e66 <etharp_output+0xa6>
        !ip4_addr_islinklocal(ipaddr)) {
 8007e52:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8007e54:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d004      	beq.n	8007e66 <etharp_output+0xa6>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8007e5c:	68e3      	ldr	r3, [r4, #12]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d034      	beq.n	8007ecc <etharp_output+0x10c>
            dst_addr = netif_ip4_gw(netif);
 8007e62:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8007e66:	4920      	ldr	r1, [pc, #128]	; (8007ee8 <etharp_output+0x128>)
 8007e68:	2318      	movs	r3, #24
 8007e6a:	f891 20f0 	ldrb.w	r2, [r1, #240]	; 0xf0
 8007e6e:	468c      	mov	ip, r1
 8007e70:	fb03 1302 	mla	r3, r3, r2, r1
 8007e74:	7d18      	ldrb	r0, [r3, #20]
 8007e76:	2801      	cmp	r0, #1
 8007e78:	d90c      	bls.n	8007e94 <etharp_output+0xd4>
 8007e7a:	6899      	ldr	r1, [r3, #8]
 8007e7c:	42a1      	cmp	r1, r4
 8007e7e:	d109      	bne.n	8007e94 <etharp_output+0xd4>
            (arp_table[etharp_cached_entry].netif == netif) &&
 8007e80:	6829      	ldr	r1, [r5, #0]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	4299      	cmp	r1, r3
 8007e86:	d105      	bne.n	8007e94 <etharp_output+0xd4>
        return etharp_output_to_arp_index(netif, q, i);
 8007e88:	4631      	mov	r1, r6
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	f7ff feac 	bl	8007be8 <etharp_output_to_arp_index>
}
 8007e90:	b005      	add	sp, #20
 8007e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e94:	4b14      	ldr	r3, [pc, #80]	; (8007ee8 <etharp_output+0x128>)
{
 8007e96:	2100      	movs	r1, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8007e98:	7d1f      	ldrb	r7, [r3, #20]
 8007e9a:	b2ca      	uxtb	r2, r1
 8007e9c:	2f01      	cmp	r7, #1
 8007e9e:	d909      	bls.n	8007eb4 <etharp_output+0xf4>
 8007ea0:	689f      	ldr	r7, [r3, #8]
 8007ea2:	42a7      	cmp	r7, r4
 8007ea4:	d106      	bne.n	8007eb4 <etharp_output+0xf4>
          (arp_table[i].netif == netif) &&
 8007ea6:	685f      	ldr	r7, [r3, #4]
 8007ea8:	6828      	ldr	r0, [r5, #0]
 8007eaa:	42b8      	cmp	r0, r7
 8007eac:	d102      	bne.n	8007eb4 <etharp_output+0xf4>
        ETHARP_SET_ADDRHINT(netif, i);
 8007eae:	f88c 20f0 	strb.w	r2, [ip, #240]	; 0xf0
 8007eb2:	e7e9      	b.n	8007e88 <etharp_output+0xc8>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8007eb4:	3101      	adds	r1, #1
 8007eb6:	3318      	adds	r3, #24
 8007eb8:	290a      	cmp	r1, #10
 8007eba:	d1ed      	bne.n	8007e98 <etharp_output+0xd8>
    return etharp_query(netif, dst_addr, q);
 8007ebc:	4632      	mov	r2, r6
 8007ebe:	4629      	mov	r1, r5
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	f7ff fee7 	bl	8007c94 <etharp_query>
 8007ec6:	e7e3      	b.n	8007e90 <etharp_output+0xd0>
    dest = (const struct eth_addr *)&ethbroadcast;
 8007ec8:	4b08      	ldr	r3, [pc, #32]	; (8007eec <etharp_output+0x12c>)
 8007eca:	e7b3      	b.n	8007e34 <etharp_output+0x74>
            return ERR_RTE;
 8007ecc:	f06f 0003 	mvn.w	r0, #3
 8007ed0:	e7de      	b.n	8007e90 <etharp_output+0xd0>
 8007ed2:	bf00      	nop
 8007ed4:	0802082b 	.word	0x0802082b
 8007ed8:	080206f1 	.word	0x080206f1
 8007edc:	0801f8bf 	.word	0x0801f8bf
 8007ee0:	0802140f 	.word	0x0802140f
 8007ee4:	08020967 	.word	0x08020967
 8007ee8:	24006668 	.word	0x24006668
 8007eec:	0800f830 	.word	0x0800f830

08007ef0 <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 8007ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ef2:	4604      	mov	r4, r0
 8007ef4:	b087      	sub	sp, #28
 8007ef6:	460f      	mov	r7, r1
 8007ef8:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8007efa:	2124      	movs	r1, #36	; 0x24
 8007efc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007f00:	2022      	movs	r0, #34	; 0x22
 8007f02:	f001 fc9b 	bl	800983c <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8007f06:	4605      	mov	r5, r0
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	d039      	beq.n	8007f80 <icmp_send_response.isra.0+0x90>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8007f0c:	8943      	ldrh	r3, [r0, #10]
 8007f0e:	2b23      	cmp	r3, #35	; 0x23
 8007f10:	d806      	bhi.n	8007f20 <icmp_send_response.isra.0+0x30>
 8007f12:	4b1c      	ldr	r3, [pc, #112]	; (8007f84 <icmp_send_response.isra.0+0x94>)
 8007f14:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8007f18:	491b      	ldr	r1, [pc, #108]	; (8007f88 <icmp_send_response.isra.0+0x98>)
 8007f1a:	481c      	ldr	r0, [pc, #112]	; (8007f8c <icmp_send_response.isra.0+0x9c>)
 8007f1c:	f005 fe0c 	bl	800db38 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8007f20:	6820      	ldr	r0, [r4, #0]
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 8007f22:	2300      	movs	r3, #0
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8007f24:	686c      	ldr	r4, [r5, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8007f26:	f100 011c 	add.w	r1, r0, #28
  icmphdr->id = 0;
 8007f2a:	7123      	strb	r3, [r4, #4]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8007f2c:	f104 0208 	add.w	r2, r4, #8
  icmphdr->id = 0;
 8007f30:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 8007f32:	71a3      	strb	r3, [r4, #6]
 8007f34:	71e3      	strb	r3, [r4, #7]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8007f36:	4603      	mov	r3, r0
  icmphdr->type = type;
 8007f38:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 8007f3a:	7066      	strb	r6, [r4, #1]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8007f3c:	f853 6b04 	ldr.w	r6, [r3], #4
 8007f40:	428b      	cmp	r3, r1
 8007f42:	f842 6b04 	str.w	r6, [r2], #4
 8007f46:	d1f9      	bne.n	8007f3c <icmp_send_response.isra.0+0x4c>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8007f48:	68c3      	ldr	r3, [r0, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8007f4a:	a805      	add	r0, sp, #20
  ip4_addr_copy(iphdr_src, iphdr->src);
 8007f4c:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 8007f4e:	f000 f8e5 	bl	800811c <ip4_route>
#endif
  if (netif != NULL) {
 8007f52:	4607      	mov	r7, r0
 8007f54:	b188      	cbz	r0, 8007f7a <icmp_send_response.isra.0+0x8a>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8007f56:	2600      	movs	r6, #0
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8007f58:	8969      	ldrh	r1, [r5, #10]
 8007f5a:	4620      	mov	r0, r4
    icmphdr->chksum = 0;
 8007f5c:	70a6      	strb	r6, [r4, #2]
 8007f5e:	70e6      	strb	r6, [r4, #3]
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8007f60:	f000 fe7c 	bl	8008c5c <inet_chksum>
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8007f64:	2301      	movs	r3, #1
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8007f66:	8060      	strh	r0, [r4, #2]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8007f68:	aa05      	add	r2, sp, #20
 8007f6a:	4631      	mov	r1, r6
 8007f6c:	4628      	mov	r0, r5
 8007f6e:	9702      	str	r7, [sp, #8]
 8007f70:	e9cd 6300 	strd	r6, r3, [sp]
 8007f74:	23ff      	movs	r3, #255	; 0xff
 8007f76:	f000 fa3d 	bl	80083f4 <ip4_output_if>
  }
  pbuf_free(q);
 8007f7a:	4628      	mov	r0, r5
 8007f7c:	f001 fbf6 	bl	800976c <pbuf_free>
}
 8007f80:	b007      	add	sp, #28
 8007f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f84:	08020a02 	.word	0x08020a02
 8007f88:	08020a68 	.word	0x08020a68
 8007f8c:	0801f8bf 	.word	0x0801f8bf

08007f90 <icmp_input>:
  iphdr_in = ip4_current_header();
 8007f90:	4b4a      	ldr	r3, [pc, #296]	; (80080bc <icmp_input+0x12c>)
{
 8007f92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 8007f96:	f8d3 9008 	ldr.w	r9, [r3, #8]
{
 8007f9a:	b087      	sub	sp, #28
 8007f9c:	4604      	mov	r4, r0
 8007f9e:	460f      	mov	r7, r1
  hlen = IPH_HL_BYTES(iphdr_in);
 8007fa0:	f899 5000 	ldrb.w	r5, [r9]
 8007fa4:	4698      	mov	r8, r3
 8007fa6:	f005 050f 	and.w	r5, r5, #15
 8007faa:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 8007fac:	2d13      	cmp	r5, #19
 8007fae:	d931      	bls.n	8008014 <icmp_input+0x84>
  if (p->len < sizeof(u16_t) * 2) {
 8007fb0:	8943      	ldrh	r3, [r0, #10]
 8007fb2:	2b03      	cmp	r3, #3
 8007fb4:	d92e      	bls.n	8008014 <icmp_input+0x84>
  type = *((u8_t *)p->payload);
 8007fb6:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	2b08      	cmp	r3, #8
 8007fbc:	d12a      	bne.n	8008014 <icmp_input+0x84>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8007fbe:	f8d8 0014 	ldr.w	r0, [r8, #20]
 8007fc2:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8007fc6:	2be0      	cmp	r3, #224	; 0xe0
 8007fc8:	d024      	beq.n	8008014 <icmp_input+0x84>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8007fca:	f8d8 1000 	ldr.w	r1, [r8]
 8007fce:	f000 fa22 	bl	8008416 <ip4_addr_isbroadcast_u32>
 8007fd2:	b9f8      	cbnz	r0, 8008014 <icmp_input+0x84>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8007fd4:	8923      	ldrh	r3, [r4, #8]
 8007fd6:	2b07      	cmp	r3, #7
 8007fd8:	d91c      	bls.n	8008014 <icmp_input+0x84>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8007fda:	f105 010e 	add.w	r1, r5, #14
 8007fde:	4620      	mov	r0, r4
 8007fe0:	9105      	str	r1, [sp, #20]
 8007fe2:	f001 fb8b 	bl	80096fc <pbuf_add_header>
 8007fe6:	9905      	ldr	r1, [sp, #20]
 8007fe8:	2800      	cmp	r0, #0
 8007fea:	d05b      	beq.n	80080a4 <icmp_input+0x114>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8007fec:	8923      	ldrh	r3, [r4, #8]
 8007fee:	1959      	adds	r1, r3, r5
 8007ff0:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 8007ff2:	428b      	cmp	r3, r1
 8007ff4:	d80e      	bhi.n	8008014 <icmp_input+0x84>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8007ff6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007ffa:	200e      	movs	r0, #14
 8007ffc:	f001 fc1e 	bl	800983c <pbuf_alloc>
        if (r == NULL) {
 8008000:	4606      	mov	r6, r0
 8008002:	b138      	cbz	r0, 8008014 <icmp_input+0x84>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8008004:	8942      	ldrh	r2, [r0, #10]
 8008006:	f105 0308 	add.w	r3, r5, #8
 800800a:	429a      	cmp	r2, r3
 800800c:	d208      	bcs.n	8008020 <icmp_input+0x90>
          pbuf_free(r);
 800800e:	4630      	mov	r0, r6
 8008010:	f001 fbac 	bl	800976c <pbuf_free>
  pbuf_free(p);
 8008014:	4620      	mov	r0, r4
}
 8008016:	b007      	add	sp, #28
 8008018:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 800801c:	f001 bba6 	b.w	800976c <pbuf_free>
        MEMCPY(r->payload, iphdr_in, hlen);
 8008020:	4649      	mov	r1, r9
 8008022:	462a      	mov	r2, r5
 8008024:	6840      	ldr	r0, [r0, #4]
 8008026:	f005 fd57 	bl	800dad8 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 800802a:	4629      	mov	r1, r5
 800802c:	4630      	mov	r0, r6
 800802e:	f001 fb69 	bl	8009704 <pbuf_remove_header>
 8008032:	b130      	cbz	r0, 8008042 <icmp_input+0xb2>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8008034:	4b22      	ldr	r3, [pc, #136]	; (80080c0 <icmp_input+0x130>)
 8008036:	22b6      	movs	r2, #182	; 0xb6
 8008038:	4922      	ldr	r1, [pc, #136]	; (80080c4 <icmp_input+0x134>)
 800803a:	4823      	ldr	r0, [pc, #140]	; (80080c8 <icmp_input+0x138>)
 800803c:	f005 fd7c 	bl	800db38 <iprintf>
          pbuf_free(r);
 8008040:	e7e5      	b.n	800800e <icmp_input+0x7e>
        if (pbuf_copy(r, p) != ERR_OK) {
 8008042:	4621      	mov	r1, r4
 8008044:	4630      	mov	r0, r6
 8008046:	f001 fd33 	bl	8009ab0 <pbuf_copy>
 800804a:	2800      	cmp	r0, #0
 800804c:	d1df      	bne.n	800800e <icmp_input+0x7e>
        pbuf_free(p);
 800804e:	4620      	mov	r0, r4
 8008050:	4634      	mov	r4, r6
 8008052:	f001 fb8b 	bl	800976c <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 8008056:	4629      	mov	r1, r5
 8008058:	4620      	mov	r0, r4
      iecho = (struct icmp_echo_hdr *)p->payload;
 800805a:	6866      	ldr	r6, [r4, #4]
      if (pbuf_add_header(p, hlen)) {
 800805c:	f001 fb4e 	bl	80096fc <pbuf_add_header>
 8008060:	2800      	cmp	r0, #0
 8008062:	d1d7      	bne.n	8008014 <icmp_input+0x84>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8008064:	6861      	ldr	r1, [r4, #4]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8008066:	f64f 72f7 	movw	r2, #65527	; 0xfff7
        ip4_addr_copy(iphdr->src, *src);
 800806a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800806e:	60cb      	str	r3, [r1, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8008070:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008074:	610b      	str	r3, [r1, #16]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8008076:	8873      	ldrh	r3, [r6, #2]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8008078:	7030      	strb	r0, [r6, #0]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800807a:	4620      	mov	r0, r4
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800807c:	4293      	cmp	r3, r2
        IPH_CHKSUM_SET(iphdr, 0);
 800807e:	f04f 0200 	mov.w	r2, #0
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8008082:	bf8c      	ite	hi
 8008084:	3309      	addhi	r3, #9
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8008086:	3308      	addls	r3, #8
 8008088:	b29b      	uxth	r3, r3
 800808a:	8073      	strh	r3, [r6, #2]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800808c:	23ff      	movs	r3, #255	; 0xff
        IPH_CHKSUM_SET(iphdr, 0);
 800808e:	728a      	strb	r2, [r1, #10]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8008090:	720b      	strb	r3, [r1, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8008092:	72ca      	strb	r2, [r1, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8008094:	2101      	movs	r1, #1
 8008096:	9702      	str	r7, [sp, #8]
 8008098:	e9cd 2100 	strd	r2, r1, [sp]
 800809c:	490b      	ldr	r1, [pc, #44]	; (80080cc <icmp_input+0x13c>)
 800809e:	f000 f9a9 	bl	80083f4 <ip4_output_if>
  pbuf_free(p);
 80080a2:	e7b7      	b.n	8008014 <icmp_input+0x84>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80080a4:	4620      	mov	r0, r4
 80080a6:	f001 fb2d 	bl	8009704 <pbuf_remove_header>
 80080aa:	2800      	cmp	r0, #0
 80080ac:	d0d3      	beq.n	8008056 <icmp_input+0xc6>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80080ae:	4b04      	ldr	r3, [pc, #16]	; (80080c0 <icmp_input+0x130>)
 80080b0:	22c7      	movs	r2, #199	; 0xc7
 80080b2:	4907      	ldr	r1, [pc, #28]	; (80080d0 <icmp_input+0x140>)
 80080b4:	4804      	ldr	r0, [pc, #16]	; (80080c8 <icmp_input+0x138>)
 80080b6:	f005 fd3f 	bl	800db38 <iprintf>
          goto icmperr;
 80080ba:	e7ab      	b.n	8008014 <icmp_input+0x84>
 80080bc:	24006a50 	.word	0x24006a50
 80080c0:	08020a02 	.word	0x08020a02
 80080c4:	08020a94 	.word	0x08020a94
 80080c8:	0801f8bf 	.word	0x0801f8bf
 80080cc:	24006a64 	.word	0x24006a64
 80080d0:	08020ac9 	.word	0x08020ac9

080080d4 <icmp_dest_unreach>:
{
 80080d4:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 80080d6:	3004      	adds	r0, #4
 80080d8:	2103      	movs	r1, #3
 80080da:	f7ff bf09 	b.w	8007ef0 <icmp_send_response.isra.0>

080080de <icmp_time_exceeded>:
{
 80080de:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 80080e0:	3004      	adds	r0, #4
 80080e2:	210b      	movs	r1, #11
 80080e4:	f7ff bf04 	b.w	8007ef0 <icmp_send_response.isra.0>

080080e8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80080e8:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80080ea:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
{
 80080ee:	4601      	mov	r1, r0
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80080f0:	f013 0301 	ands.w	r3, r3, #1
 80080f4:	d00b      	beq.n	800810e <ip4_input_accept+0x26>
 80080f6:	6843      	ldr	r3, [r0, #4]
 80080f8:	b14b      	cbz	r3, 800810e <ip4_input_accept+0x26>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80080fa:	4a07      	ldr	r2, [pc, #28]	; (8008118 <ip4_input_accept+0x30>)
 80080fc:	6950      	ldr	r0, [r2, #20]
 80080fe:	4283      	cmp	r3, r0
 8008100:	d007      	beq.n	8008112 <ip4_input_accept+0x2a>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8008102:	f000 f988 	bl	8008416 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8008106:	3800      	subs	r0, #0
 8008108:	bf18      	it	ne
 800810a:	2001      	movne	r0, #1
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
}
 800810c:	bd08      	pop	{r3, pc}
  return 0;
 800810e:	4618      	mov	r0, r3
 8008110:	e7fc      	b.n	800810c <ip4_input_accept+0x24>
      return 1;
 8008112:	2001      	movs	r0, #1
 8008114:	e7fa      	b.n	800810c <ip4_input_accept+0x24>
 8008116:	bf00      	nop
 8008118:	24006a50 	.word	0x24006a50

0800811c <ip4_route>:
  NETIF_FOREACH(netif) {
 800811c:	4b14      	ldr	r3, [pc, #80]	; (8008170 <ip4_route+0x54>)
{
 800811e:	4602      	mov	r2, r0
  NETIF_FOREACH(netif) {
 8008120:	6818      	ldr	r0, [r3, #0]
{
 8008122:	b530      	push	{r4, r5, lr}
  NETIF_FOREACH(netif) {
 8008124:	b978      	cbnz	r0, 8008146 <ip4_route+0x2a>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8008126:	4b13      	ldr	r3, [pc, #76]	; (8008174 <ip4_route+0x58>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	b15b      	cbz	r3, 8008144 <ip4_route+0x28>
 800812c:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
 8008130:	f001 0105 	and.w	r1, r1, #5
 8008134:	2905      	cmp	r1, #5
 8008136:	d105      	bne.n	8008144 <ip4_route+0x28>
 8008138:	6859      	ldr	r1, [r3, #4]
 800813a:	b119      	cbz	r1, 8008144 <ip4_route+0x28>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800813c:	7812      	ldrb	r2, [r2, #0]
 800813e:	2a7f      	cmp	r2, #127	; 0x7f
 8008140:	bf18      	it	ne
 8008142:	4618      	movne	r0, r3
}
 8008144:	bd30      	pop	{r4, r5, pc}
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008146:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
 800814a:	07cd      	lsls	r5, r1, #31
 800814c:	d50d      	bpl.n	800816a <ip4_route+0x4e>
 800814e:	074c      	lsls	r4, r1, #29
 8008150:	d50b      	bpl.n	800816a <ip4_route+0x4e>
 8008152:	6843      	ldr	r3, [r0, #4]
 8008154:	b14b      	cbz	r3, 800816a <ip4_route+0x4e>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8008156:	6814      	ldr	r4, [r2, #0]
 8008158:	6885      	ldr	r5, [r0, #8]
 800815a:	4063      	eors	r3, r4
 800815c:	422b      	tst	r3, r5
 800815e:	d0f1      	beq.n	8008144 <ip4_route+0x28>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8008160:	078b      	lsls	r3, r1, #30
 8008162:	d402      	bmi.n	800816a <ip4_route+0x4e>
 8008164:	68c3      	ldr	r3, [r0, #12]
 8008166:	429c      	cmp	r4, r3
 8008168:	d0ec      	beq.n	8008144 <ip4_route+0x28>
  NETIF_FOREACH(netif) {
 800816a:	6800      	ldr	r0, [r0, #0]
 800816c:	e7da      	b.n	8008124 <ip4_route+0x8>
 800816e:	bf00      	nop
 8008170:	2400a784 	.word	0x2400a784
 8008174:	2400a788 	.word	0x2400a788

08008178 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8008178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800817c:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
 8008180:	4604      	mov	r4, r0
 8008182:	460e      	mov	r6, r1
  if (IPH_V(iphdr) != 4) {
 8008184:	f898 5000 	ldrb.w	r5, [r8]
 8008188:	092b      	lsrs	r3, r5, #4
 800818a:	2b04      	cmp	r3, #4
 800818c:	d005      	beq.n	800819a <ip4_input+0x22>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800818e:	4620      	mov	r0, r4
 8008190:	f001 faec 	bl	800976c <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8008194:	2000      	movs	r0, #0
 8008196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800819a:	f8b8 0002 	ldrh.w	r0, [r8, #2]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800819e:	f005 050f 	and.w	r5, r5, #15
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80081a2:	f000 fd29 	bl	8008bf8 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 80081a6:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80081a8:	ea4f 0985 	mov.w	r9, r5, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80081ac:	4607      	mov	r7, r0
  if (iphdr_len < p->tot_len) {
 80081ae:	4283      	cmp	r3, r0
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80081b0:	464d      	mov	r5, r9
  if (iphdr_len < p->tot_len) {
 80081b2:	d903      	bls.n	80081bc <ip4_input+0x44>
    pbuf_realloc(p, iphdr_len);
 80081b4:	4601      	mov	r1, r0
 80081b6:	4620      	mov	r0, r4
 80081b8:	f001 fbba 	bl	8009930 <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80081bc:	8963      	ldrh	r3, [r4, #10]
 80081be:	42ab      	cmp	r3, r5
 80081c0:	d3e5      	bcc.n	800818e <ip4_input+0x16>
 80081c2:	8923      	ldrh	r3, [r4, #8]
 80081c4:	42bb      	cmp	r3, r7
 80081c6:	d3e2      	bcc.n	800818e <ip4_input+0x16>
 80081c8:	2d13      	cmp	r5, #19
 80081ca:	d9e0      	bls.n	800818e <ip4_input+0x16>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80081cc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80081d0:	4d49      	ldr	r5, [pc, #292]	; (80082f8 <ip4_input+0x180>)
 80081d2:	616b      	str	r3, [r5, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80081d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80081d8:	f8d8 200c 	ldr.w	r2, [r8, #12]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80081dc:	2be0      	cmp	r3, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80081de:	612a      	str	r2, [r5, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80081e0:	d143      	bne.n	800826a <ip4_input+0xf2>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80081e2:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
 80081e6:	07db      	lsls	r3, r3, #31
 80081e8:	d405      	bmi.n	80081f6 <ip4_input+0x7e>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80081ea:	f898 3009 	ldrb.w	r3, [r8, #9]
 80081ee:	2b11      	cmp	r3, #17
 80081f0:	d053      	beq.n	800829a <ip4_input+0x122>
 80081f2:	2700      	movs	r7, #0
 80081f4:	e003      	b.n	80081fe <ip4_input+0x86>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80081f6:	6873      	ldr	r3, [r6, #4]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d0f6      	beq.n	80081ea <ip4_input+0x72>
 80081fc:	4637      	mov	r7, r6
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80081fe:	6928      	ldr	r0, [r5, #16]
 8008200:	b148      	cbz	r0, 8008216 <ip4_input+0x9e>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8008202:	4631      	mov	r1, r6
 8008204:	f000 f907 	bl	8008416 <ip4_addr_isbroadcast_u32>
 8008208:	2800      	cmp	r0, #0
 800820a:	d1c0      	bne.n	800818e <ip4_input+0x16>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800820c:	692b      	ldr	r3, [r5, #16]
 800820e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8008212:	2be0      	cmp	r3, #224	; 0xe0
 8008214:	d0bb      	beq.n	800818e <ip4_input+0x16>
  if (netif == NULL) {
 8008216:	2f00      	cmp	r7, #0
 8008218:	d0b9      	beq.n	800818e <ip4_input+0x16>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800821a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800821e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008222:	b13b      	cbz	r3, 8008234 <ip4_input+0xbc>
    p = ip4_reass(p);
 8008224:	4620      	mov	r0, r4
 8008226:	f000 fa29 	bl	800867c <ip4_reass>
    if (p == NULL) {
 800822a:	4604      	mov	r4, r0
 800822c:	2800      	cmp	r0, #0
 800822e:	d0b1      	beq.n	8008194 <ip4_input+0x1c>
    iphdr = (const struct ip_hdr *)p->payload;
 8008230:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 8008234:	f8c5 8008 	str.w	r8, [r5, #8]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8008238:	4649      	mov	r1, r9
 800823a:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
 800823c:	e9c5 7600 	strd	r7, r6, [r5]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8008240:	f898 3000 	ldrb.w	r3, [r8]
 8008244:	f003 030f 	and.w	r3, r3, #15
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	81ab      	strh	r3, [r5, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800824c:	f001 fa5a 	bl	8009704 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 8008250:	f898 3009 	ldrb.w	r3, [r8, #9]
 8008254:	2b06      	cmp	r3, #6
 8008256:	d034      	beq.n	80082c2 <ip4_input+0x14a>
 8008258:	2b11      	cmp	r3, #17
 800825a:	d026      	beq.n	80082aa <ip4_input+0x132>
 800825c:	2b01      	cmp	r3, #1
 800825e:	d135      	bne.n	80082cc <ip4_input+0x154>
        icmp_input(p, inp);
 8008260:	4631      	mov	r1, r6
 8008262:	4620      	mov	r0, r4
 8008264:	f7ff fe94 	bl	8007f90 <icmp_input>
        break;
 8008268:	e023      	b.n	80082b2 <ip4_input+0x13a>
    if (ip4_input_accept(inp)) {
 800826a:	4630      	mov	r0, r6
 800826c:	f7ff ff3c 	bl	80080e8 <ip4_input_accept>
 8008270:	b980      	cbnz	r0, 8008294 <ip4_input+0x11c>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8008272:	7d2b      	ldrb	r3, [r5, #20]
 8008274:	2b7f      	cmp	r3, #127	; 0x7f
 8008276:	d0b8      	beq.n	80081ea <ip4_input+0x72>
        NETIF_FOREACH(netif) {
 8008278:	4b20      	ldr	r3, [pc, #128]	; (80082fc <ip4_input+0x184>)
 800827a:	681f      	ldr	r7, [r3, #0]
 800827c:	2f00      	cmp	r7, #0
 800827e:	d0b4      	beq.n	80081ea <ip4_input+0x72>
          if (netif == inp) {
 8008280:	42b7      	cmp	r7, r6
 8008282:	d101      	bne.n	8008288 <ip4_input+0x110>
        NETIF_FOREACH(netif) {
 8008284:	683f      	ldr	r7, [r7, #0]
 8008286:	e7f9      	b.n	800827c <ip4_input+0x104>
          if (ip4_input_accept(netif)) {
 8008288:	4638      	mov	r0, r7
 800828a:	f7ff ff2d 	bl	80080e8 <ip4_input_accept>
 800828e:	2800      	cmp	r0, #0
 8008290:	d0f8      	beq.n	8008284 <ip4_input+0x10c>
 8008292:	e7b4      	b.n	80081fe <ip4_input+0x86>
  if (netif == NULL) {
 8008294:	2e00      	cmp	r6, #0
 8008296:	d1b1      	bne.n	80081fc <ip4_input+0x84>
 8008298:	e7a7      	b.n	80081ea <ip4_input+0x72>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800829a:	eb08 0309 	add.w	r3, r8, r9
 800829e:	885b      	ldrh	r3, [r3, #2]
 80082a0:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80082a4:	d1a5      	bne.n	80081f2 <ip4_input+0x7a>
 80082a6:	4637      	mov	r7, r6
 80082a8:	e7b5      	b.n	8008216 <ip4_input+0x9e>
        udp_input(p, inp);
 80082aa:	4631      	mov	r1, r6
 80082ac:	4620      	mov	r0, r4
 80082ae:	f004 ffa1 	bl	800d1f4 <udp_input>
  ip_data.current_netif = NULL;
 80082b2:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 80082b4:	e9c5 3300 	strd	r3, r3, [r5]
  ip_data.current_ip4_header = NULL;
 80082b8:	60ab      	str	r3, [r5, #8]
  ip_data.current_ip_header_tot_len = 0;
 80082ba:	81ab      	strh	r3, [r5, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 80082bc:	e9c5 3304 	strd	r3, r3, [r5, #16]
  return ERR_OK;
 80082c0:	e768      	b.n	8008194 <ip4_input+0x1c>
        tcp_input(p, inp);
 80082c2:	4631      	mov	r1, r6
 80082c4:	4620      	mov	r0, r4
 80082c6:	f003 f84f 	bl	800b368 <tcp_input>
        break;
 80082ca:	e7f2      	b.n	80082b2 <ip4_input+0x13a>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80082cc:	4639      	mov	r1, r7
 80082ce:	6968      	ldr	r0, [r5, #20]
 80082d0:	f000 f8a1 	bl	8008416 <ip4_addr_isbroadcast_u32>
 80082d4:	b960      	cbnz	r0, 80082f0 <ip4_input+0x178>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80082d6:	696b      	ldr	r3, [r5, #20]
 80082d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80082dc:	2be0      	cmp	r3, #224	; 0xe0
 80082de:	d007      	beq.n	80082f0 <ip4_input+0x178>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80082e0:	4649      	mov	r1, r9
 80082e2:	4620      	mov	r0, r4
 80082e4:	f001 fa3a 	bl	800975c <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80082e8:	2102      	movs	r1, #2
 80082ea:	4620      	mov	r0, r4
 80082ec:	f7ff fef2 	bl	80080d4 <icmp_dest_unreach>
        pbuf_free(p);
 80082f0:	4620      	mov	r0, r4
 80082f2:	f001 fa3b 	bl	800976c <pbuf_free>
        break;
 80082f6:	e7dc      	b.n	80082b2 <ip4_input+0x13a>
 80082f8:	24006a50 	.word	0x24006a50
 80082fc:	2400a784 	.word	0x2400a784

08008300 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8008300:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8008304:	461f      	mov	r7, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8008306:	7b83      	ldrb	r3, [r0, #14]
{
 8008308:	4604      	mov	r4, r0
 800830a:	4689      	mov	r9, r1
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800830c:	2b01      	cmp	r3, #1
{
 800830e:	4616      	mov	r6, r2
 8008310:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8008314:	d006      	beq.n	8008324 <ip4_output_if_src+0x24>
 8008316:	4b31      	ldr	r3, [pc, #196]	; (80083dc <ip4_output_if_src+0xdc>)
 8008318:	f44f 7255 	mov.w	r2, #852	; 0x354
 800831c:	4930      	ldr	r1, [pc, #192]	; (80083e0 <ip4_output_if_src+0xe0>)
 800831e:	4831      	ldr	r0, [pc, #196]	; (80083e4 <ip4_output_if_src+0xe4>)
 8008320:	f005 fc0a 	bl	800db38 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8008324:	2e00      	cmp	r6, #0
 8008326:	d049      	beq.n	80083bc <ip4_output_if_src+0xbc>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8008328:	2114      	movs	r1, #20
 800832a:	4620      	mov	r0, r4
 800832c:	f001 f9e6 	bl	80096fc <pbuf_add_header>
 8008330:	b120      	cbz	r0, 800833c <ip4_output_if_src+0x3c>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8008332:	f06f 0001 	mvn.w	r0, #1
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 8008336:	b002      	add	sp, #8
 8008338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800833c:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 800833e:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8008340:	2b13      	cmp	r3, #19
 8008342:	d806      	bhi.n	8008352 <ip4_output_if_src+0x52>
 8008344:	4b25      	ldr	r3, [pc, #148]	; (80083dc <ip4_output_if_src+0xdc>)
 8008346:	f44f 7262 	mov.w	r2, #904	; 0x388
 800834a:	4927      	ldr	r1, [pc, #156]	; (80083e8 <ip4_output_if_src+0xe8>)
 800834c:	4825      	ldr	r0, [pc, #148]	; (80083e4 <ip4_output_if_src+0xe4>)
 800834e:	f005 fbf3 	bl	800db38 <iprintf>
    IPH_PROTO_SET(iphdr, proto);
 8008352:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 8008356:	722f      	strb	r7, [r5, #8]
    IPH_OFFSET_SET(iphdr, 0);
 8008358:	2700      	movs	r7, #0
    IPH_PROTO_SET(iphdr, proto);
 800835a:	726b      	strb	r3, [r5, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 800835c:	6833      	ldr	r3, [r6, #0]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800835e:	f8df a090 	ldr.w	sl, [pc, #144]	; 80083f0 <ip4_output_if_src+0xf0>
    ip4_addr_copy(iphdr->dest, *dest);
 8008362:	612b      	str	r3, [r5, #16]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8008364:	2345      	movs	r3, #69	; 0x45
 8008366:	702b      	strb	r3, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 8008368:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800836c:	706b      	strb	r3, [r5, #1]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800836e:	8920      	ldrh	r0, [r4, #8]
 8008370:	f000 fc42 	bl	8008bf8 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8008374:	71af      	strb	r7, [r5, #6]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8008376:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(iphdr, 0);
 8008378:	71ef      	strb	r7, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800837a:	f8ba 0000 	ldrh.w	r0, [sl]
 800837e:	f000 fc3b 	bl	8008bf8 <lwip_htons>
    ++ip_id;
 8008382:	f8ba 3000 	ldrh.w	r3, [sl]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8008386:	80a8      	strh	r0, [r5, #4]
    ++ip_id;
 8008388:	3301      	adds	r3, #1
 800838a:	f8aa 3000 	strh.w	r3, [sl]
    if (src == NULL) {
 800838e:	f1b9 0f00 	cmp.w	r9, #0
 8008392:	d110      	bne.n	80083b6 <ip4_output_if_src+0xb6>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8008394:	4b15      	ldr	r3, [pc, #84]	; (80083ec <ip4_output_if_src+0xec>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	60eb      	str	r3, [r5, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 800839a:	72af      	strb	r7, [r5, #10]
 800839c:	72ef      	strb	r7, [r5, #11]
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800839e:	f8b8 3028 	ldrh.w	r3, [r8, #40]	; 0x28
 80083a2:	b19b      	cbz	r3, 80083cc <ip4_output_if_src+0xcc>
 80083a4:	8922      	ldrh	r2, [r4, #8]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d910      	bls.n	80083cc <ip4_output_if_src+0xcc>
    return ip4_frag(p, netif, dest);
 80083aa:	4632      	mov	r2, r6
 80083ac:	4641      	mov	r1, r8
 80083ae:	4620      	mov	r0, r4
 80083b0:	f000 fb36 	bl	8008a20 <ip4_frag>
 80083b4:	e7bf      	b.n	8008336 <ip4_output_if_src+0x36>
      ip4_addr_copy(iphdr->src, *src);
 80083b6:	f8d9 3000 	ldr.w	r3, [r9]
 80083ba:	e7ed      	b.n	8008398 <ip4_output_if_src+0x98>
    if (p->len < IP_HLEN) {
 80083bc:	8963      	ldrh	r3, [r4, #10]
 80083be:	2b13      	cmp	r3, #19
 80083c0:	d9b7      	bls.n	8008332 <ip4_output_if_src+0x32>
    ip4_addr_copy(dest_addr, iphdr->dest);
 80083c2:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 80083c4:	ae01      	add	r6, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 80083c6:	691b      	ldr	r3, [r3, #16]
 80083c8:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 80083ca:	e7e8      	b.n	800839e <ip4_output_if_src+0x9e>
  return netif->output(netif, p, dest);
 80083cc:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80083d0:	4632      	mov	r2, r6
 80083d2:	4621      	mov	r1, r4
 80083d4:	4640      	mov	r0, r8
 80083d6:	4798      	blx	r3
 80083d8:	e7ad      	b.n	8008336 <ip4_output_if_src+0x36>
 80083da:	bf00      	nop
 80083dc:	08020afb 	.word	0x08020afb
 80083e0:	08020b60 	.word	0x08020b60
 80083e4:	0801f8bf 	.word	0x0801f8bf
 80083e8:	08020b6c 	.word	0x08020b6c
 80083ec:	0800f6e0 	.word	0x0800f6e0
 80083f0:	2400675a 	.word	0x2400675a

080083f4 <ip4_output_if>:
{
 80083f4:	b4f0      	push	{r4, r5, r6, r7}
 80083f6:	9c06      	ldr	r4, [sp, #24]
 80083f8:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80083fc:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8008400:	b11a      	cbz	r2, 800840a <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 8008402:	b109      	cbz	r1, 8008408 <ip4_output_if+0x14>
 8008404:	680f      	ldr	r7, [r1, #0]
 8008406:	b907      	cbnz	r7, 800840a <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 8008408:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800840a:	9504      	str	r5, [sp, #16]
 800840c:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 8008410:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8008412:	f7ff bf75 	b.w	8008300 <ip4_output_if_src>

08008416 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8008416:	1e43      	subs	r3, r0, #1
{
 8008418:	4602      	mov	r2, r0
  if ((~addr == IPADDR_ANY) ||
 800841a:	3303      	adds	r3, #3
 800841c:	d812      	bhi.n	8008444 <ip4_addr_isbroadcast_u32+0x2e>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800841e:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 8008422:	f013 0002 	ands.w	r0, r3, #2
 8008426:	d010      	beq.n	800844a <ip4_addr_isbroadcast_u32+0x34>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8008428:	684b      	ldr	r3, [r1, #4]
 800842a:	4293      	cmp	r3, r2
 800842c:	d00c      	beq.n	8008448 <ip4_addr_isbroadcast_u32+0x32>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800842e:	6888      	ldr	r0, [r1, #8]
 8008430:	4053      	eors	r3, r2
 8008432:	4203      	tst	r3, r0
 8008434:	d108      	bne.n	8008448 <ip4_addr_isbroadcast_u32+0x32>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8008436:	43c3      	mvns	r3, r0
 8008438:	ea22 0000 	bic.w	r0, r2, r0
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 800843c:	1ac3      	subs	r3, r0, r3
 800843e:	4258      	negs	r0, r3
 8008440:	4158      	adcs	r0, r3
 8008442:	4770      	bx	lr
    return 1;
 8008444:	2001      	movs	r0, #1
 8008446:	4770      	bx	lr
    return 0;
 8008448:	2000      	movs	r0, #0
  }
}
 800844a:	4770      	bx	lr

0800844c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800844c:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800844e:	4b0c      	ldr	r3, [pc, #48]	; (8008480 <ip_reass_dequeue_datagram+0x34>)
{
 8008450:	4604      	mov	r4, r0
 8008452:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	4282      	cmp	r2, r0
 8008458:	d107      	bne.n	800846a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800845a:	6802      	ldr	r2, [r0, #0]
 800845c:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800845e:	4621      	mov	r1, r4
 8008460:	2004      	movs	r0, #4
}
 8008462:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 8008466:	f000 bf11 	b.w	800928c <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800846a:	b931      	cbnz	r1, 800847a <ip_reass_dequeue_datagram+0x2e>
 800846c:	4b05      	ldr	r3, [pc, #20]	; (8008484 <ip_reass_dequeue_datagram+0x38>)
 800846e:	f240 1245 	movw	r2, #325	; 0x145
 8008472:	4905      	ldr	r1, [pc, #20]	; (8008488 <ip_reass_dequeue_datagram+0x3c>)
 8008474:	4805      	ldr	r0, [pc, #20]	; (800848c <ip_reass_dequeue_datagram+0x40>)
 8008476:	f005 fb5f 	bl	800db38 <iprintf>
    prev->next = ipr->next;
 800847a:	6823      	ldr	r3, [r4, #0]
 800847c:	602b      	str	r3, [r5, #0]
 800847e:	e7ee      	b.n	800845e <ip_reass_dequeue_datagram+0x12>
 8008480:	2400675c 	.word	0x2400675c
 8008484:	08020b99 	.word	0x08020b99
 8008488:	08020c03 	.word	0x08020c03
 800848c:	0801f8bf 	.word	0x0801f8bf

08008490 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8008490:	4281      	cmp	r1, r0
{
 8008492:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008496:	4604      	mov	r4, r0
 8008498:	460e      	mov	r6, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800849a:	d105      	bne.n	80084a8 <ip_reass_free_complete_datagram+0x18>
 800849c:	4b2f      	ldr	r3, [pc, #188]	; (800855c <ip_reass_free_complete_datagram+0xcc>)
 800849e:	22ab      	movs	r2, #171	; 0xab
 80084a0:	492f      	ldr	r1, [pc, #188]	; (8008560 <ip_reass_free_complete_datagram+0xd0>)
 80084a2:	4830      	ldr	r0, [pc, #192]	; (8008564 <ip_reass_free_complete_datagram+0xd4>)
 80084a4:	f005 fb48 	bl	800db38 <iprintf>
  if (prev != NULL) {
 80084a8:	b146      	cbz	r6, 80084bc <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80084aa:	6833      	ldr	r3, [r6, #0]
 80084ac:	42a3      	cmp	r3, r4
 80084ae:	d005      	beq.n	80084bc <ip_reass_free_complete_datagram+0x2c>
 80084b0:	4b2a      	ldr	r3, [pc, #168]	; (800855c <ip_reass_free_complete_datagram+0xcc>)
 80084b2:	22ad      	movs	r2, #173	; 0xad
 80084b4:	492c      	ldr	r1, [pc, #176]	; (8008568 <ip_reass_free_complete_datagram+0xd8>)
 80084b6:	482b      	ldr	r0, [pc, #172]	; (8008564 <ip_reass_free_complete_datagram+0xd4>)
 80084b8:	f005 fb3e 	bl	800db38 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80084bc:	6867      	ldr	r7, [r4, #4]
 80084be:	687b      	ldr	r3, [r7, #4]
  if (iprh->start == 0) {
 80084c0:	889a      	ldrh	r2, [r3, #4]
 80084c2:	bb92      	cbnz	r2, 800852a <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 80084c4:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80084c6:	f104 011c 	add.w	r1, r4, #28
    ipr->p = iprh->next_pbuf;
 80084ca:	6062      	str	r2, [r4, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80084cc:	f104 0208 	add.w	r2, r4, #8
 80084d0:	f852 0b04 	ldr.w	r0, [r2], #4
 80084d4:	428a      	cmp	r2, r1
 80084d6:	f843 0b04 	str.w	r0, [r3], #4
 80084da:	d1f9      	bne.n	80084d0 <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80084dc:	2101      	movs	r1, #1
 80084de:	4638      	mov	r0, r7
 80084e0:	f7ff fdfd 	bl	80080de <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80084e4:	4638      	mov	r0, r7
 80084e6:	f001 fa7b 	bl	80099e0 <pbuf_clen>
 80084ea:	4605      	mov	r5, r0
    pbuf_free(p);
 80084ec:	4638      	mov	r0, r7
 80084ee:	f001 f93d 	bl	800976c <pbuf_free>
  p = ipr->p;
 80084f2:	6867      	ldr	r7, [r4, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80084f4:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800855c <ip_reass_free_complete_datagram+0xcc>
 80084f8:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8008574 <ip_reass_free_complete_datagram+0xe4>
 80084fc:	f8df a064 	ldr.w	sl, [pc, #100]	; 8008564 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 8008500:	b9af      	cbnz	r7, 800852e <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 8008502:	4620      	mov	r0, r4
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8008504:	4c19      	ldr	r4, [pc, #100]	; (800856c <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 8008506:	4631      	mov	r1, r6
 8008508:	f7ff ffa0 	bl	800844c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800850c:	88a3      	ldrh	r3, [r4, #4]
 800850e:	42ab      	cmp	r3, r5
 8008510:	d205      	bcs.n	800851e <ip_reass_free_complete_datagram+0x8e>
 8008512:	4b12      	ldr	r3, [pc, #72]	; (800855c <ip_reass_free_complete_datagram+0xcc>)
 8008514:	22d2      	movs	r2, #210	; 0xd2
 8008516:	4916      	ldr	r1, [pc, #88]	; (8008570 <ip_reass_free_complete_datagram+0xe0>)
 8008518:	4812      	ldr	r0, [pc, #72]	; (8008564 <ip_reass_free_complete_datagram+0xd4>)
 800851a:	f005 fb0d 	bl	800db38 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800851e:	88a3      	ldrh	r3, [r4, #4]
}
 8008520:	4628      	mov	r0, r5
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8008522:	1b5b      	subs	r3, r3, r5
 8008524:	80a3      	strh	r3, [r4, #4]
}
 8008526:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 800852a:	2500      	movs	r5, #0
 800852c:	e7e1      	b.n	80084f2 <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 800852e:	687b      	ldr	r3, [r7, #4]
    clen = pbuf_clen(pcur);
 8008530:	4638      	mov	r0, r7
    p = iprh->next_pbuf;
 8008532:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 8008536:	f001 fa53 	bl	80099e0 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800853a:	4405      	add	r5, r0
 800853c:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8008540:	db05      	blt.n	800854e <ip_reass_free_complete_datagram+0xbe>
 8008542:	4643      	mov	r3, r8
 8008544:	22cc      	movs	r2, #204	; 0xcc
 8008546:	4649      	mov	r1, r9
 8008548:	4650      	mov	r0, sl
 800854a:	f005 faf5 	bl	800db38 <iprintf>
    pbuf_free(pcur);
 800854e:	4638      	mov	r0, r7
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8008550:	b2ad      	uxth	r5, r5
    p = iprh->next_pbuf;
 8008552:	465f      	mov	r7, fp
    pbuf_free(pcur);
 8008554:	f001 f90a 	bl	800976c <pbuf_free>
 8008558:	e7d2      	b.n	8008500 <ip_reass_free_complete_datagram+0x70>
 800855a:	bf00      	nop
 800855c:	08020b99 	.word	0x08020b99
 8008560:	08020c1c 	.word	0x08020c1c
 8008564:	0801f8bf 	.word	0x0801f8bf
 8008568:	08020c28 	.word	0x08020c28
 800856c:	2400675c 	.word	0x2400675c
 8008570:	08020c57 	.word	0x08020c57
 8008574:	08020c3a 	.word	0x08020c3a

08008578 <ip_reass_remove_oldest_datagram>:
{
 8008578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800857c:	4605      	mov	r5, r0
 800857e:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8008580:	2600      	movs	r6, #0
    r = reassdatagrams;
 8008582:	f8df 8068 	ldr.w	r8, [pc, #104]	; 80085ec <ip_reass_remove_oldest_datagram+0x74>
    other_datagrams = 0;
 8008586:	2400      	movs	r4, #0
    r = reassdatagrams;
 8008588:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 800858c:	4621      	mov	r1, r4
    prev = NULL;
 800858e:	46a4      	mov	ip, r4
    oldest = NULL;
 8008590:	4620      	mov	r0, r4
    while (r != NULL) {
 8008592:	b953      	cbnz	r3, 80085aa <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 8008594:	b110      	cbz	r0, 800859c <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8008596:	f7ff ff7b 	bl	8008490 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800859a:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800859c:	42be      	cmp	r6, r7
 800859e:	da01      	bge.n	80085a4 <ip_reass_remove_oldest_datagram+0x2c>
 80085a0:	2c01      	cmp	r4, #1
 80085a2:	dcf0      	bgt.n	8008586 <ip_reass_remove_oldest_datagram+0xe>
}
 80085a4:	4630      	mov	r0, r6
 80085a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80085aa:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 80085ae:	695a      	ldr	r2, [r3, #20]
 80085b0:	4572      	cmp	r2, lr
 80085b2:	d109      	bne.n	80085c8 <ip_reass_remove_oldest_datagram+0x50>
 80085b4:	f8d5 e010 	ldr.w	lr, [r5, #16]
 80085b8:	699a      	ldr	r2, [r3, #24]
 80085ba:	4572      	cmp	r2, lr
 80085bc:	d104      	bne.n	80085c8 <ip_reass_remove_oldest_datagram+0x50>
 80085be:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
 80085c2:	88aa      	ldrh	r2, [r5, #4]
 80085c4:	4596      	cmp	lr, r2
 80085c6:	d008      	beq.n	80085da <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 80085c8:	3401      	adds	r4, #1
        if (oldest == NULL) {
 80085ca:	b160      	cbz	r0, 80085e6 <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 80085cc:	7fc2      	ldrb	r2, [r0, #31]
 80085ce:	f893 e01f 	ldrb.w	lr, [r3, #31]
          oldest_prev = prev;
 80085d2:	4596      	cmp	lr, r2
 80085d4:	bf9c      	itt	ls
 80085d6:	4661      	movls	r1, ip
 80085d8:	4618      	movls	r0, r3
      if (r->next != NULL) {
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	2a00      	cmp	r2, #0
 80085de:	bf18      	it	ne
 80085e0:	469c      	movne	ip, r3
 80085e2:	4613      	mov	r3, r2
 80085e4:	e7d5      	b.n	8008592 <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 80085e6:	4661      	mov	r1, ip
 80085e8:	4618      	mov	r0, r3
 80085ea:	e7f6      	b.n	80085da <ip_reass_remove_oldest_datagram+0x62>
 80085ec:	2400675c 	.word	0x2400675c

080085f0 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80085f0:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 80085f2:	4604      	mov	r4, r0
 80085f4:	b930      	cbnz	r0, 8008604 <ip_frag_free_pbuf_custom_ref+0x14>
 80085f6:	4b06      	ldr	r3, [pc, #24]	; (8008610 <ip_frag_free_pbuf_custom_ref+0x20>)
 80085f8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80085fc:	4905      	ldr	r1, [pc, #20]	; (8008614 <ip_frag_free_pbuf_custom_ref+0x24>)
 80085fe:	4806      	ldr	r0, [pc, #24]	; (8008618 <ip_frag_free_pbuf_custom_ref+0x28>)
 8008600:	f005 fa9a 	bl	800db38 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8008604:	4621      	mov	r1, r4
 8008606:	2005      	movs	r0, #5
}
 8008608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 800860c:	f000 be3e 	b.w	800928c <memp_free>
 8008610:	08020b99 	.word	0x08020b99
 8008614:	080213f7 	.word	0x080213f7
 8008618:	0801f8bf 	.word	0x0801f8bf

0800861c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800861c:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800861e:	4604      	mov	r4, r0
 8008620:	b930      	cbnz	r0, 8008630 <ipfrag_free_pbuf_custom+0x14>
 8008622:	4b08      	ldr	r3, [pc, #32]	; (8008644 <ipfrag_free_pbuf_custom+0x28>)
 8008624:	f240 22ce 	movw	r2, #718	; 0x2ce
 8008628:	4907      	ldr	r1, [pc, #28]	; (8008648 <ipfrag_free_pbuf_custom+0x2c>)
 800862a:	4808      	ldr	r0, [pc, #32]	; (800864c <ipfrag_free_pbuf_custom+0x30>)
 800862c:	f005 fa84 	bl	800db38 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 8008630:	6960      	ldr	r0, [r4, #20]
 8008632:	b108      	cbz	r0, 8008638 <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 8008634:	f001 f89a 	bl	800976c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8008638:	4620      	mov	r0, r4
}
 800863a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 800863e:	f7ff bfd7 	b.w	80085f0 <ip_frag_free_pbuf_custom_ref>
 8008642:	bf00      	nop
 8008644:	08020b99 	.word	0x08020b99
 8008648:	08020c79 	.word	0x08020c79
 800864c:	0801f8bf 	.word	0x0801f8bf

08008650 <ip_reass_tmr>:
{
 8008650:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 8008652:	4b09      	ldr	r3, [pc, #36]	; (8008678 <ip_reass_tmr+0x28>)
  struct ip_reassdata *r, *prev = NULL;
 8008654:	2400      	movs	r4, #0
  r = reassdatagrams;
 8008656:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 8008658:	b900      	cbnz	r0, 800865c <ip_reass_tmr+0xc>
}
 800865a:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 800865c:	7fc3      	ldrb	r3, [r0, #31]
 800865e:	6805      	ldr	r5, [r0, #0]
 8008660:	b123      	cbz	r3, 800866c <ip_reass_tmr+0x1c>
      r->timer--;
 8008662:	3b01      	subs	r3, #1
 8008664:	77c3      	strb	r3, [r0, #31]
      ip_reass_free_complete_datagram(tmp, prev);
 8008666:	4604      	mov	r4, r0
 8008668:	4628      	mov	r0, r5
 800866a:	e7f5      	b.n	8008658 <ip_reass_tmr+0x8>
 800866c:	4621      	mov	r1, r4
 800866e:	f7ff ff0f 	bl	8008490 <ip_reass_free_complete_datagram>
 8008672:	4620      	mov	r0, r4
 8008674:	e7f7      	b.n	8008666 <ip_reass_tmr+0x16>
 8008676:	bf00      	nop
 8008678:	2400675c 	.word	0x2400675c

0800867c <ip4_reass>:
{
 800867c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 8008680:	6845      	ldr	r5, [r0, #4]
{
 8008682:	4680      	mov	r8, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8008684:	782b      	ldrb	r3, [r5, #0]
 8008686:	f003 030f 	and.w	r3, r3, #15
 800868a:	2b05      	cmp	r3, #5
 800868c:	f040 80a0 	bne.w	80087d0 <ip4_reass+0x154>
  offset = IPH_OFFSET_BYTES(fraghdr);
 8008690:	88e8      	ldrh	r0, [r5, #6]
 8008692:	f000 fab1 	bl	8008bf8 <lwip_htons>
 8008696:	4682      	mov	sl, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8008698:	8868      	ldrh	r0, [r5, #2]
 800869a:	f000 faad 	bl	8008bf8 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800869e:	782b      	ldrb	r3, [r5, #0]
 80086a0:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 80086a4:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 80086a8:	ea4f 0783 	mov.w	r7, r3, lsl #2
 80086ac:	f0c0 8090 	bcc.w	80087d0 <ip4_reass+0x154>
  len = (u16_t)(len - hlen);
 80086b0:	1bc0      	subs	r0, r0, r7
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80086b2:	4ec0      	ldr	r6, [pc, #768]	; (80089b4 <ip4_reass+0x338>)
  len = (u16_t)(len - hlen);
 80086b4:	b283      	uxth	r3, r0
  clen = pbuf_clen(p);
 80086b6:	4640      	mov	r0, r8
  len = (u16_t)(len - hlen);
 80086b8:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 80086ba:	f001 f991 	bl	80099e0 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80086be:	88b3      	ldrh	r3, [r6, #4]
  clen = pbuf_clen(p);
 80086c0:	4681      	mov	r9, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80086c2:	4403      	add	r3, r0
 80086c4:	2b0a      	cmp	r3, #10
 80086c6:	dc79      	bgt.n	80087bc <ip4_reass+0x140>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80086c8:	6834      	ldr	r4, [r6, #0]
 80086ca:	2c00      	cmp	r4, #0
 80086cc:	f040 8085 	bne.w	80087da <ip4_reass+0x15e>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80086d0:	2004      	movs	r0, #4
 80086d2:	f000 fdab 	bl	800922c <memp_malloc>
  if (ipr == NULL) {
 80086d6:	4604      	mov	r4, r0
 80086d8:	b958      	cbnz	r0, 80086f2 <ip4_reass+0x76>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80086da:	4649      	mov	r1, r9
 80086dc:	4628      	mov	r0, r5
 80086de:	f7ff ff4b 	bl	8008578 <ip_reass_remove_oldest_datagram>
 80086e2:	4581      	cmp	r9, r0
 80086e4:	dc74      	bgt.n	80087d0 <ip4_reass+0x154>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80086e6:	2004      	movs	r0, #4
 80086e8:	f000 fda0 	bl	800922c <memp_malloc>
    if (ipr == NULL)
 80086ec:	4604      	mov	r4, r0
 80086ee:	2800      	cmp	r0, #0
 80086f0:	d06e      	beq.n	80087d0 <ip4_reass+0x154>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80086f2:	221c      	movs	r2, #28
 80086f4:	2100      	movs	r1, #0
 80086f6:	1d20      	adds	r0, r4, #4
 80086f8:	f005 fa16 	bl	800db28 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80086fc:	230f      	movs	r3, #15
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80086fe:	f104 0208 	add.w	r2, r4, #8
 8008702:	f105 0114 	add.w	r1, r5, #20
  ipr->timer = IP_REASS_MAXAGE;
 8008706:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 8008708:	6833      	ldr	r3, [r6, #0]
  reassdatagrams = ipr;
 800870a:	6034      	str	r4, [r6, #0]
  ipr->next = reassdatagrams;
 800870c:	6023      	str	r3, [r4, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800870e:	462b      	mov	r3, r5
 8008710:	f853 0b04 	ldr.w	r0, [r3], #4
 8008714:	428b      	cmp	r3, r1
 8008716:	f842 0b04 	str.w	r0, [r2], #4
 800871a:	d1f9      	bne.n	8008710 <ip4_reass+0x94>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800871c:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8008720:	f3ca 070c 	ubfx	r7, sl, #0, #13
  if (is_last) {
 8008724:	f01b 0b20 	ands.w	fp, fp, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 8008728:	ea4f 07c7 	mov.w	r7, r7, lsl #3
  if (is_last) {
 800872c:	d10a      	bne.n	8008744 <ip4_reass+0xc8>
    u16_t datagram_len = (u16_t)(offset + len);
 800872e:	9b01      	ldr	r3, [sp, #4]
 8008730:	18fb      	adds	r3, r7, r3
 8008732:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8008734:	429f      	cmp	r7, r3
 8008736:	f200 8129 	bhi.w	800898c <ip4_reass+0x310>
 800873a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800873e:	4293      	cmp	r3, r2
 8008740:	f200 8124 	bhi.w	800898c <ip4_reass+0x310>
  fraghdr = (struct ip_hdr *)new_p->payload;
 8008744:	f8d8 5004 	ldr.w	r5, [r8, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8008748:	8868      	ldrh	r0, [r5, #2]
 800874a:	f000 fa55 	bl	8008bf8 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800874e:	782b      	ldrb	r3, [r5, #0]
 8008750:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 8008754:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 8008758:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800875c:	f0c0 8116 	bcc.w	800898c <ip4_reass+0x310>
  len = (u16_t)(len - hlen);
 8008760:	1a80      	subs	r0, r0, r2
 8008762:	fa1f fa80 	uxth.w	sl, r0
  offset = IPH_OFFSET_BYTES(fraghdr);
 8008766:	88e8      	ldrh	r0, [r5, #6]
 8008768:	f000 fa46 	bl	8008bf8 <lwip_htons>
 800876c:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 8008770:	f8d8 6004 	ldr.w	r6, [r8, #4]
  iprh->next_pbuf = NULL;
 8008774:	2500      	movs	r5, #0
  offset = IPH_OFFSET_BYTES(fraghdr);
 8008776:	00c0      	lsls	r0, r0, #3
  iprh->next_pbuf = NULL;
 8008778:	7035      	strb	r5, [r6, #0]
  iprh->end = (u16_t)(offset + len);
 800877a:	eb0a 0300 	add.w	r3, sl, r0
  iprh->next_pbuf = NULL;
 800877e:	7075      	strb	r5, [r6, #1]
 8008780:	70b5      	strb	r5, [r6, #2]
  iprh->end = (u16_t)(offset + len);
 8008782:	fa1f fc83 	uxth.w	ip, r3
  iprh->next_pbuf = NULL;
 8008786:	70f5      	strb	r5, [r6, #3]
  iprh->start = offset;
 8008788:	80b0      	strh	r0, [r6, #4]
  if (iprh->end < offset) {
 800878a:	4560      	cmp	r0, ip
  iprh->end = (u16_t)(offset + len);
 800878c:	80f3      	strh	r3, [r6, #6]
  if (iprh->end < offset) {
 800878e:	f200 80fd 	bhi.w	800898c <ip4_reass+0x310>
  for (q = ipr->p; q != NULL;) {
 8008792:	f8d4 e004 	ldr.w	lr, [r4, #4]
  int valid = 1;
 8008796:	f04f 0a01 	mov.w	sl, #1
  for (q = ipr->p; q != NULL;) {
 800879a:	4671      	mov	r1, lr
 800879c:	bb61      	cbnz	r1, 80087f8 <ip4_reass+0x17c>
    if (iprh_prev != NULL) {
 800879e:	2d00      	cmp	r5, #0
 80087a0:	f040 80ae 	bne.w	8008900 <ip4_reass+0x284>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80087a4:	f1be 0f00 	cmp.w	lr, #0
 80087a8:	f000 809a 	beq.w	80088e0 <ip4_reass+0x264>
 80087ac:	4b82      	ldr	r3, [pc, #520]	; (80089b8 <ip4_reass+0x33c>)
 80087ae:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80087b2:	4982      	ldr	r1, [pc, #520]	; (80089bc <ip4_reass+0x340>)
 80087b4:	4882      	ldr	r0, [pc, #520]	; (80089c0 <ip4_reass+0x344>)
 80087b6:	f005 f9bf 	bl	800db38 <iprintf>
 80087ba:	e091      	b.n	80088e0 <ip4_reass+0x264>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80087bc:	4601      	mov	r1, r0
 80087be:	4628      	mov	r0, r5
 80087c0:	f7ff feda 	bl	8008578 <ip_reass_remove_oldest_datagram>
 80087c4:	b120      	cbz	r0, 80087d0 <ip4_reass+0x154>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80087c6:	88b3      	ldrh	r3, [r6, #4]
 80087c8:	444b      	add	r3, r9
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80087ca:	2b0a      	cmp	r3, #10
 80087cc:	f77f af7c 	ble.w	80086c8 <ip4_reass+0x4c>
  pbuf_free(p);
 80087d0:	4640      	mov	r0, r8
 80087d2:	f000 ffcb 	bl	800976c <pbuf_free>
  return NULL;
 80087d6:	2600      	movs	r6, #0
 80087d8:	e07c      	b.n	80088d4 <ip4_reass+0x258>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80087da:	68eb      	ldr	r3, [r5, #12]
 80087dc:	6962      	ldr	r2, [r4, #20]
 80087de:	429a      	cmp	r2, r3
 80087e0:	d108      	bne.n	80087f4 <ip4_reass+0x178>
 80087e2:	692b      	ldr	r3, [r5, #16]
 80087e4:	69a2      	ldr	r2, [r4, #24]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d104      	bne.n	80087f4 <ip4_reass+0x178>
 80087ea:	89a2      	ldrh	r2, [r4, #12]
 80087ec:	88ab      	ldrh	r3, [r5, #4]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	f000 80f2 	beq.w	80089d8 <ip4_reass+0x35c>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80087f4:	6824      	ldr	r4, [r4, #0]
 80087f6:	e768      	b.n	80086ca <ip4_reass+0x4e>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80087f8:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 80087fa:	889a      	ldrh	r2, [r3, #4]
 80087fc:	4290      	cmp	r0, r2
 80087fe:	d272      	bcs.n	80088e6 <ip4_reass+0x26a>
      iprh->next_pbuf = q;
 8008800:	6031      	str	r1, [r6, #0]
      if (iprh_prev != NULL) {
 8008802:	2d00      	cmp	r5, #0
 8008804:	d06a      	beq.n	80088dc <ip4_reass+0x260>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8008806:	88eb      	ldrh	r3, [r5, #6]
 8008808:	4298      	cmp	r0, r3
 800880a:	f0c0 80bf 	bcc.w	800898c <ip4_reass+0x310>
 800880e:	4594      	cmp	ip, r2
 8008810:	f200 80bc 	bhi.w	800898c <ip4_reass+0x310>
        if (iprh_prev->end != iprh->start) {
 8008814:	4298      	cmp	r0, r3
        iprh_prev->next_pbuf = new_p;
 8008816:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
 800881a:	f040 80f9 	bne.w	8008a10 <ip4_reass+0x394>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800881e:	f1bb 0f00 	cmp.w	fp, #0
 8008822:	d004      	beq.n	800882e <ip4_reass+0x1b2>
 8008824:	7fa3      	ldrb	r3, [r4, #30]
 8008826:	f013 0301 	ands.w	r3, r3, #1
 800882a:	f000 80a0 	beq.w	800896e <ip4_reass+0x2f2>
    if (valid) {
 800882e:	f1ba 0f00 	cmp.w	sl, #0
 8008832:	d175      	bne.n	8008920 <ip4_reass+0x2a4>
          q = iprh->next_pbuf;
 8008834:	f04f 0a00 	mov.w	sl, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8008838:	4b5e      	ldr	r3, [pc, #376]	; (80089b4 <ip4_reass+0x338>)
 800883a:	8898      	ldrh	r0, [r3, #4]
 800883c:	4698      	mov	r8, r3
 800883e:	4481      	add	r9, r0
 8008840:	f8a3 9004 	strh.w	r9, [r3, #4]
  if (is_last) {
 8008844:	f1bb 0f00 	cmp.w	fp, #0
 8008848:	d106      	bne.n	8008858 <ip4_reass+0x1dc>
    u16_t datagram_len = (u16_t)(offset + len);
 800884a:	9b01      	ldr	r3, [sp, #4]
 800884c:	441f      	add	r7, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800884e:	7fa3      	ldrb	r3, [r4, #30]
 8008850:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 8008854:	83a7      	strh	r7, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8008856:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8008858:	f1ba 0f01 	cmp.w	sl, #1
 800885c:	d1bb      	bne.n	80087d6 <ip4_reass+0x15a>
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800885e:	6863      	ldr	r3, [r4, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8008860:	f104 011c 	add.w	r1, r4, #28
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8008864:	8ba0      	ldrh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8008866:	685e      	ldr	r6, [r3, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8008868:	f104 0308 	add.w	r3, r4, #8
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800886c:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800886e:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8008870:	4632      	mov	r2, r6
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8008872:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8008874:	f853 7b04 	ldr.w	r7, [r3], #4
 8008878:	428b      	cmp	r3, r1
 800887a:	f842 7b04 	str.w	r7, [r2], #4
 800887e:	d1f9      	bne.n	8008874 <ip4_reass+0x1f8>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8008880:	f000 f9ba 	bl	8008bf8 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 8008884:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8008886:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8008888:	71b3      	strb	r3, [r6, #6]
 800888a:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800888c:	72b3      	strb	r3, [r6, #10]
 800888e:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 8008890:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 8008892:	2d00      	cmp	r5, #0
 8008894:	d16d      	bne.n	8008972 <ip4_reass+0x2f6>
    if (ipr == reassdatagrams) {
 8008896:	f8d8 3000 	ldr.w	r3, [r8]
        if (ipr_prev->next == ipr) {
 800889a:	42a3      	cmp	r3, r4
 800889c:	d002      	beq.n	80088a4 <ip4_reass+0x228>
 800889e:	461d      	mov	r5, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d171      	bne.n	8008988 <ip4_reass+0x30c>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80088a4:	4620      	mov	r0, r4
 80088a6:	4629      	mov	r1, r5
 80088a8:	f7ff fdd0 	bl	800844c <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 80088ac:	4630      	mov	r0, r6
 80088ae:	f001 f897 	bl	80099e0 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80088b2:	f8b8 3004 	ldrh.w	r3, [r8, #4]
    clen = pbuf_clen(p);
 80088b6:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80088b8:	4283      	cmp	r3, r0
 80088ba:	d206      	bcs.n	80088ca <ip4_reass+0x24e>
 80088bc:	4b3e      	ldr	r3, [pc, #248]	; (80089b8 <ip4_reass+0x33c>)
 80088be:	f240 229b 	movw	r2, #667	; 0x29b
 80088c2:	4940      	ldr	r1, [pc, #256]	; (80089c4 <ip4_reass+0x348>)
 80088c4:	483e      	ldr	r0, [pc, #248]	; (80089c0 <ip4_reass+0x344>)
 80088c6:	f005 f937 	bl	800db38 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80088ca:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80088ce:	1b04      	subs	r4, r0, r4
 80088d0:	f8a8 4004 	strh.w	r4, [r8, #4]
}
 80088d4:	4630      	mov	r0, r6
 80088d6:	b003      	add	sp, #12
 80088d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (iprh->end > iprh_tmp->start) {
 80088dc:	4594      	cmp	ip, r2
 80088de:	d855      	bhi.n	800898c <ip4_reass+0x310>
      ipr->p = new_p;
 80088e0:	f8c4 8004 	str.w	r8, [r4, #4]
 80088e4:	e79b      	b.n	800881e <ip4_reass+0x1a2>
    } else if (iprh->start == iprh_tmp->start) {
 80088e6:	d051      	beq.n	800898c <ip4_reass+0x310>
    } else if (iprh->start < iprh_tmp->end) {
 80088e8:	88d9      	ldrh	r1, [r3, #6]
 80088ea:	4281      	cmp	r1, r0
 80088ec:	d84e      	bhi.n	800898c <ip4_reass+0x310>
      if (iprh_prev != NULL) {
 80088ee:	b125      	cbz	r5, 80088fa <ip4_reass+0x27e>
        if (iprh_prev->end != iprh_tmp->start) {
 80088f0:	88e9      	ldrh	r1, [r5, #6]
          valid = 0;
 80088f2:	4291      	cmp	r1, r2
 80088f4:	bf18      	it	ne
 80088f6:	f04f 0a00 	movne.w	sl, #0
    q = iprh_tmp->next_pbuf;
 80088fa:	6819      	ldr	r1, [r3, #0]
 80088fc:	461d      	mov	r5, r3
 80088fe:	e74d      	b.n	800879c <ip4_reass+0x120>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8008900:	88eb      	ldrh	r3, [r5, #6]
 8008902:	4283      	cmp	r3, r0
 8008904:	d906      	bls.n	8008914 <ip4_reass+0x298>
 8008906:	4b2c      	ldr	r3, [pc, #176]	; (80089b8 <ip4_reass+0x33c>)
 8008908:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800890c:	492e      	ldr	r1, [pc, #184]	; (80089c8 <ip4_reass+0x34c>)
 800890e:	482c      	ldr	r0, [pc, #176]	; (80089c0 <ip4_reass+0x344>)
 8008910:	f005 f912 	bl	800db38 <iprintf>
      if (iprh_prev->end != iprh->start) {
 8008914:	88ea      	ldrh	r2, [r5, #6]
      iprh_prev->next_pbuf = new_p;
 8008916:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
 800891a:	88b3      	ldrh	r3, [r6, #4]
 800891c:	429a      	cmp	r2, r3
 800891e:	e77c      	b.n	800881a <ip4_reass+0x19e>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8008920:	6863      	ldr	r3, [r4, #4]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d086      	beq.n	8008834 <ip4_reass+0x1b8>
 8008926:	6859      	ldr	r1, [r3, #4]
 8008928:	888b      	ldrh	r3, [r1, #4]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d182      	bne.n	8008834 <ip4_reass+0x1b8>
        q = iprh->next_pbuf;
 800892e:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 8008930:	b9a3      	cbnz	r3, 800895c <ip4_reass+0x2e0>
          LWIP_ASSERT("sanity check",
 8008932:	42b1      	cmp	r1, r6
 8008934:	d106      	bne.n	8008944 <ip4_reass+0x2c8>
 8008936:	4b20      	ldr	r3, [pc, #128]	; (80089b8 <ip4_reass+0x33c>)
 8008938:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800893c:	4923      	ldr	r1, [pc, #140]	; (80089cc <ip4_reass+0x350>)
 800893e:	4820      	ldr	r0, [pc, #128]	; (80089c0 <ip4_reass+0x344>)
 8008940:	f005 f8fa 	bl	800db38 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8008944:	6833      	ldr	r3, [r6, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	f43f af76 	beq.w	8008838 <ip4_reass+0x1bc>
 800894c:	4b1a      	ldr	r3, [pc, #104]	; (80089b8 <ip4_reass+0x33c>)
 800894e:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8008952:	491f      	ldr	r1, [pc, #124]	; (80089d0 <ip4_reass+0x354>)
 8008954:	481a      	ldr	r0, [pc, #104]	; (80089c0 <ip4_reass+0x344>)
 8008956:	f005 f8ef 	bl	800db38 <iprintf>
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800895a:	e76d      	b.n	8008838 <ip4_reass+0x1bc>
          iprh = (struct ip_reass_helper *)q->payload;
 800895c:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 800895e:	88f0      	ldrh	r0, [r6, #6]
 8008960:	8893      	ldrh	r3, [r2, #4]
 8008962:	4298      	cmp	r0, r3
 8008964:	f47f af66 	bne.w	8008834 <ip4_reass+0x1b8>
          q = iprh->next_pbuf;
 8008968:	6813      	ldr	r3, [r2, #0]
 800896a:	4616      	mov	r6, r2
 800896c:	e7e0      	b.n	8008930 <ip4_reass+0x2b4>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800896e:	469a      	mov	sl, r3
 8008970:	e762      	b.n	8008838 <ip4_reass+0x1bc>
      iprh = (struct ip_reass_helper *)r->payload;
 8008972:	686f      	ldr	r7, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 8008974:	2114      	movs	r1, #20
 8008976:	4628      	mov	r0, r5
 8008978:	f000 fec4 	bl	8009704 <pbuf_remove_header>
      pbuf_cat(p, r);
 800897c:	4629      	mov	r1, r5
 800897e:	4630      	mov	r0, r6
 8008980:	f001 f852 	bl	8009a28 <pbuf_cat>
      r = iprh->next_pbuf;
 8008984:	683d      	ldr	r5, [r7, #0]
 8008986:	e784      	b.n	8008892 <ip4_reass+0x216>
        if (ipr_prev->next == ipr) {
 8008988:	682b      	ldr	r3, [r5, #0]
 800898a:	e786      	b.n	800889a <ip4_reass+0x21e>
  if (ipr->p == NULL) {
 800898c:	6863      	ldr	r3, [r4, #4]
 800898e:	2b00      	cmp	r3, #0
 8008990:	f47f af1e 	bne.w	80087d0 <ip4_reass+0x154>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8008994:	4b07      	ldr	r3, [pc, #28]	; (80089b4 <ip4_reass+0x338>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	42a3      	cmp	r3, r4
 800899a:	d006      	beq.n	80089aa <ip4_reass+0x32e>
 800899c:	4b06      	ldr	r3, [pc, #24]	; (80089b8 <ip4_reass+0x33c>)
 800899e:	f240 22ab 	movw	r2, #683	; 0x2ab
 80089a2:	490c      	ldr	r1, [pc, #48]	; (80089d4 <ip4_reass+0x358>)
 80089a4:	4806      	ldr	r0, [pc, #24]	; (80089c0 <ip4_reass+0x344>)
 80089a6:	f005 f8c7 	bl	800db38 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80089aa:	2100      	movs	r1, #0
 80089ac:	4620      	mov	r0, r4
 80089ae:	f7ff fd4d 	bl	800844c <ip_reass_dequeue_datagram>
 80089b2:	e70d      	b.n	80087d0 <ip4_reass+0x154>
 80089b4:	2400675c 	.word	0x2400675c
 80089b8:	08020b99 	.word	0x08020b99
 80089bc:	08020ca3 	.word	0x08020ca3
 80089c0:	0801f8bf 	.word	0x0801f8bf
 80089c4:	08020d09 	.word	0x08020d09
 80089c8:	08020c85 	.word	0x08020c85
 80089cc:	08020cda 	.word	0x08020cda
 80089d0:	08020ce7 	.word	0x08020ce7
 80089d4:	08020d24 	.word	0x08020d24
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80089d8:	88e8      	ldrh	r0, [r5, #6]
 80089da:	f000 f90d 	bl	8008bf8 <lwip_htons>
 80089de:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80089e2:	2800      	cmp	r0, #0
 80089e4:	f47f ae9a 	bne.w	800871c <ip4_reass+0xa0>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80089e8:	89e0      	ldrh	r0, [r4, #14]
 80089ea:	f000 f905 	bl	8008bf8 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80089ee:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80089f2:	2800      	cmp	r0, #0
 80089f4:	f43f ae92 	beq.w	800871c <ip4_reass+0xa0>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80089f8:	462b      	mov	r3, r5
 80089fa:	f104 0208 	add.w	r2, r4, #8
 80089fe:	f105 0114 	add.w	r1, r5, #20
 8008a02:	f853 0b04 	ldr.w	r0, [r3], #4
 8008a06:	428b      	cmp	r3, r1
 8008a08:	f842 0b04 	str.w	r0, [r2], #4
 8008a0c:	d1f9      	bne.n	8008a02 <ip4_reass+0x386>
 8008a0e:	e685      	b.n	800871c <ip4_reass+0xa0>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8008a10:	f1bb 0f00 	cmp.w	fp, #0
 8008a14:	f43f af0e 	beq.w	8008834 <ip4_reass+0x1b8>
 8008a18:	f04f 0a00 	mov.w	sl, #0
 8008a1c:	e702      	b.n	8008824 <ip4_reass+0x1a8>
 8008a1e:	bf00      	nop

08008a20 <ip4_frag>:
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8008a20:	8d0b      	ldrh	r3, [r1, #40]	; 0x28
{
 8008a22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a26:	ed2d 8b02 	vpush	{d8}
 8008a2a:	ee08 2a10 	vmov	s16, r2
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8008a2e:	f1b3 0214 	subs.w	r2, r3, #20
{
 8008a32:	b08b      	sub	sp, #44	; 0x2c
 8008a34:	4605      	mov	r5, r0
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8008a36:	bf48      	it	mi
 8008a38:	f1a3 020d 	submi.w	r2, r3, #13
{
 8008a3c:	468a      	mov	sl, r1
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8008a3e:	f3c2 03cf 	ubfx	r3, r2, #3, #16
 8008a42:	9305      	str	r3, [sp, #20]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8008a44:	6843      	ldr	r3, [r0, #4]
 8008a46:	9302      	str	r3, [sp, #8]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	f003 030f 	and.w	r3, r3, #15
 8008a4e:	2b05      	cmp	r3, #5
 8008a50:	ea4f 0783 	mov.w	r7, r3, lsl #2
 8008a54:	d109      	bne.n	8008a6a <ip4_frag+0x4a>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8008a56:	8943      	ldrh	r3, [r0, #10]
 8008a58:	2b13      	cmp	r3, #19
 8008a5a:	d809      	bhi.n	8008a70 <ip4_frag+0x50>
 8008a5c:	4b60      	ldr	r3, [pc, #384]	; (8008be0 <ip4_frag+0x1c0>)
 8008a5e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8008a62:	4960      	ldr	r1, [pc, #384]	; (8008be4 <ip4_frag+0x1c4>)
 8008a64:	4860      	ldr	r0, [pc, #384]	; (8008be8 <ip4_frag+0x1c8>)
 8008a66:	f005 f867 	bl	800db38 <iprintf>
    return ERR_VAL;
 8008a6a:	f06f 0005 	mvn.w	r0, #5
 8008a6e:	e013      	b.n	8008a98 <ip4_frag+0x78>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8008a70:	9b02      	ldr	r3, [sp, #8]
  u16_t newpbuflen = 0;
 8008a72:	2600      	movs	r6, #0
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8008a74:	88d8      	ldrh	r0, [r3, #6]
 8008a76:	f000 f8bf 	bl	8008bf8 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 8008a7a:	f3c0 030c 	ubfx	r3, r0, #0, #13
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 8008a7e:	892c      	ldrh	r4, [r5, #8]
  ofo = tmp & IP_OFFMASK;
 8008a80:	9303      	str	r3, [sp, #12]
  mf_set = tmp & IP_MF;
 8008a82:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 8008a86:	3c14      	subs	r4, #20
 8008a88:	9307      	str	r3, [sp, #28]

  while (left) {
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8008a8a:	9b05      	ldr	r3, [sp, #20]
  left = (u16_t)(p->tot_len - IP_HLEN);
 8008a8c:	b2a4      	uxth	r4, r4
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8008a8e:	00db      	lsls	r3, r3, #3
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	9306      	str	r3, [sp, #24]
  while (left) {
 8008a94:	b92c      	cbnz	r4, 8008aa2 <ip4_frag+0x82>
    pbuf_free(rambuf);
    left = (u16_t)(left - fragsize);
    ofo = (u16_t)(ofo + nfb);
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8008a96:	4620      	mov	r0, r4
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 8008a98:	b00b      	add	sp, #44	; 0x2c
 8008a9a:	ecbd 8b02 	vpop	{d8}
 8008a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8008aa2:	9b06      	ldr	r3, [sp, #24]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8008aa4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008aa8:	2114      	movs	r1, #20
 8008aaa:	200e      	movs	r0, #14
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8008aac:	42a3      	cmp	r3, r4
 8008aae:	bf28      	it	cs
 8008ab0:	4623      	movcs	r3, r4
 8008ab2:	9304      	str	r3, [sp, #16]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8008ab4:	f000 fec2 	bl	800983c <pbuf_alloc>
    if (rambuf == NULL) {
 8008ab8:	4680      	mov	r8, r0
 8008aba:	2800      	cmp	r0, #0
 8008abc:	d036      	beq.n	8008b2c <ip4_frag+0x10c>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8008abe:	8943      	ldrh	r3, [r0, #10]
 8008ac0:	2b13      	cmp	r3, #19
 8008ac2:	d806      	bhi.n	8008ad2 <ip4_frag+0xb2>
 8008ac4:	4b46      	ldr	r3, [pc, #280]	; (8008be0 <ip4_frag+0x1c0>)
 8008ac6:	f44f 7249 	mov.w	r2, #804	; 0x324
 8008aca:	4948      	ldr	r1, [pc, #288]	; (8008bec <ip4_frag+0x1cc>)
 8008acc:	4846      	ldr	r0, [pc, #280]	; (8008be8 <ip4_frag+0x1c8>)
 8008ace:	f005 f833 	bl	800db38 <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8008ad2:	9b02      	ldr	r3, [sp, #8]
 8008ad4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8008ad8:	4619      	mov	r1, r3
 8008ada:	3114      	adds	r1, #20
 8008adc:	f853 0b04 	ldr.w	r0, [r3], #4
 8008ae0:	428b      	cmp	r3, r1
 8008ae2:	f842 0b04 	str.w	r0, [r2], #4
 8008ae6:	d1f9      	bne.n	8008adc <ip4_frag+0xbc>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8008ae8:	f8d8 b004 	ldr.w	fp, [r8, #4]
    left_to_copy = fragsize;
 8008aec:	f8dd 9010 	ldr.w	r9, [sp, #16]
    while (left_to_copy) {
 8008af0:	f1b9 0f00 	cmp.w	r9, #0
 8008af4:	d041      	beq.n	8008b7a <ip4_frag+0x15a>
      u16_t plen = (u16_t)(p->len - poff);
 8008af6:	896b      	ldrh	r3, [r5, #10]
 8008af8:	1bde      	subs	r6, r3, r7
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8008afa:	42bb      	cmp	r3, r7
      u16_t plen = (u16_t)(p->len - poff);
 8008afc:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8008afe:	d206      	bcs.n	8008b0e <ip4_frag+0xee>
 8008b00:	4b37      	ldr	r3, [pc, #220]	; (8008be0 <ip4_frag+0x1c0>)
 8008b02:	f240 322d 	movw	r2, #813	; 0x32d
 8008b06:	493a      	ldr	r1, [pc, #232]	; (8008bf0 <ip4_frag+0x1d0>)
 8008b08:	4837      	ldr	r0, [pc, #220]	; (8008be8 <ip4_frag+0x1c8>)
 8008b0a:	f005 f815 	bl	800db38 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8008b0e:	454e      	cmp	r6, r9
 8008b10:	bf28      	it	cs
 8008b12:	464e      	movcs	r6, r9
      if (!newpbuflen) {
 8008b14:	b916      	cbnz	r6, 8008b1c <ip4_frag+0xfc>
        p = p->next;
 8008b16:	682d      	ldr	r5, [r5, #0]
        poff = 0;
 8008b18:	2700      	movs	r7, #0
 8008b1a:	e7e9      	b.n	8008af0 <ip4_frag+0xd0>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8008b1c:	2005      	movs	r0, #5
 8008b1e:	f000 fb85 	bl	800922c <memp_malloc>
      if (pcr == NULL) {
 8008b22:	4603      	mov	r3, r0
 8008b24:	b928      	cbnz	r0, 8008b32 <ip4_frag+0x112>
        pbuf_free(rambuf);
 8008b26:	4640      	mov	r0, r8
 8008b28:	f000 fe20 	bl	800976c <pbuf_free>
  return ERR_MEM;
 8008b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b30:	e7b2      	b.n	8008a98 <ip4_frag+0x78>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8008b32:	9601      	str	r6, [sp, #4]
 8008b34:	4631      	mov	r1, r6
 8008b36:	686a      	ldr	r2, [r5, #4]
 8008b38:	9008      	str	r0, [sp, #32]
 8008b3a:	2000      	movs	r0, #0
 8008b3c:	443a      	add	r2, r7
 8008b3e:	9200      	str	r2, [sp, #0]
 8008b40:	2241      	movs	r2, #65	; 0x41
 8008b42:	f000 fdc1 	bl	80096c8 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 8008b46:	9b08      	ldr	r3, [sp, #32]
 8008b48:	b918      	cbnz	r0, 8008b52 <ip4_frag+0x132>
        ip_frag_free_pbuf_custom_ref(pcr);
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7ff fd50 	bl	80085f0 <ip_frag_free_pbuf_custom_ref>
 8008b50:	e7e9      	b.n	8008b26 <ip4_frag+0x106>
 8008b52:	e9cd 0308 	strd	r0, r3, [sp, #32]
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8008b56:	eba9 0906 	sub.w	r9, r9, r6
      pbuf_ref(p);
 8008b5a:	4628      	mov	r0, r5
 8008b5c:	f000 ff48 	bl	80099f0 <pbuf_ref>
      pcr->original = p;
 8008b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8008b62:	4a24      	ldr	r2, [pc, #144]	; (8008bf4 <ip4_frag+0x1d4>)
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8008b64:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 8008b68:	9908      	ldr	r1, [sp, #32]
 8008b6a:	4640      	mov	r0, r8
      pcr->original = p;
 8008b6c:	615d      	str	r5, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8008b6e:	611a      	str	r2, [r3, #16]
      pbuf_cat(rambuf, newpbuf);
 8008b70:	f000 ff5a 	bl	8009a28 <pbuf_cat>
      if (left_to_copy) {
 8008b74:	f1b9 0f00 	cmp.w	r9, #0
 8008b78:	d1cd      	bne.n	8008b16 <ip4_frag+0xf6>
    tmp = (IP_OFFMASK & (ofo));
 8008b7a:	9b03      	ldr	r3, [sp, #12]
    poff = (u16_t)(poff + newpbuflen);
 8008b7c:	4437      	add	r7, r6
    tmp = (IP_OFFMASK & (ofo));
 8008b7e:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 8008b82:	f8ba 3028 	ldrh.w	r3, [sl, #40]	; 0x28
    poff = (u16_t)(poff + newpbuflen);
 8008b86:	b2bf      	uxth	r7, r7
    last = (left <= netif->mtu - IP_HLEN);
 8008b88:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 8008b8a:	42a3      	cmp	r3, r4
 8008b8c:	dd01      	ble.n	8008b92 <ip4_frag+0x172>
 8008b8e:	9b07      	ldr	r3, [sp, #28]
 8008b90:	b10b      	cbz	r3, 8008b96 <ip4_frag+0x176>
      tmp = tmp | IP_MF;
 8008b92:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8008b96:	f000 f82f 	bl	8008bf8 <lwip_htons>
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8008b9a:	9b04      	ldr	r3, [sp, #16]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8008b9c:	f8ab 0006 	strh.w	r0, [fp, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8008ba0:	f103 0014 	add.w	r0, r3, #20
 8008ba4:	b280      	uxth	r0, r0
 8008ba6:	f000 f827 	bl	8008bf8 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 8008baa:	2300      	movs	r3, #0
    netif->output(netif, rambuf, dest);
 8008bac:	ee18 2a10 	vmov	r2, s16
 8008bb0:	4641      	mov	r1, r8
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8008bb2:	f8ab 0002 	strh.w	r0, [fp, #2]
    netif->output(netif, rambuf, dest);
 8008bb6:	4650      	mov	r0, sl
    IPH_CHKSUM_SET(iphdr, 0);
 8008bb8:	f88b 300a 	strb.w	r3, [fp, #10]
 8008bbc:	f88b 300b 	strb.w	r3, [fp, #11]
    netif->output(netif, rambuf, dest);
 8008bc0:	f8da 3014 	ldr.w	r3, [sl, #20]
 8008bc4:	4798      	blx	r3
    pbuf_free(rambuf);
 8008bc6:	4640      	mov	r0, r8
 8008bc8:	f000 fdd0 	bl	800976c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8008bcc:	9b04      	ldr	r3, [sp, #16]
    ofo = (u16_t)(ofo + nfb);
 8008bce:	9a05      	ldr	r2, [sp, #20]
    left = (u16_t)(left - fragsize);
 8008bd0:	1ae4      	subs	r4, r4, r3
    ofo = (u16_t)(ofo + nfb);
 8008bd2:	9b03      	ldr	r3, [sp, #12]
 8008bd4:	4413      	add	r3, r2
    left = (u16_t)(left - fragsize);
 8008bd6:	b2a4      	uxth	r4, r4
    ofo = (u16_t)(ofo + nfb);
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	9303      	str	r3, [sp, #12]
 8008bdc:	e75a      	b.n	8008a94 <ip4_frag+0x74>
 8008bde:	bf00      	nop
 8008be0:	08020b99 	.word	0x08020b99
 8008be4:	08020d44 	.word	0x08020d44
 8008be8:	0801f8bf 	.word	0x0801f8bf
 8008bec:	08020d5f 	.word	0x08020d5f
 8008bf0:	08020d7f 	.word	0x08020d7f
 8008bf4:	0800861d 	.word	0x0800861d

08008bf8 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 8008bf8:	ba40      	rev16	r0, r0
}
 8008bfa:	b280      	uxth	r0, r0
 8008bfc:	4770      	bx	lr

08008bfe <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 8008bfe:	ba00      	rev	r0, r0
 8008c00:	4770      	bx	lr

08008c02 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8008c02:	b513      	push	{r0, r1, r4, lr}
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 8008c04:	2300      	movs	r3, #0
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8008c06:	f010 0401 	ands.w	r4, r0, #1
  u16_t t = 0;
 8008c0a:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (odd && len > 0) {
 8008c0e:	d007      	beq.n	8008c20 <lwip_standard_chksum+0x1e>
 8008c10:	4299      	cmp	r1, r3
    ((u8_t *)&t)[1] = *pb++;
 8008c12:	bfc2      	ittt	gt
 8008c14:	f810 3b01 	ldrbgt.w	r3, [r0], #1
    len--;
 8008c18:	f101 31ff 	addgt.w	r1, r1, #4294967295
    ((u8_t *)&t)[1] = *pb++;
 8008c1c:	f88d 3007 	strbgt.w	r3, [sp, #7]
  u32_t sum = 0;
 8008c20:	2200      	movs	r2, #0
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 8008c22:	2901      	cmp	r1, #1
 8008c24:	dc15      	bgt.n	8008c52 <lwip_standard_chksum+0x50>
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8008c26:	bf04      	itt	eq
 8008c28:	7803      	ldrbeq	r3, [r0, #0]
 8008c2a:	f88d 3006 	strbeq.w	r3, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 8008c2e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008c32:	4413      	add	r3, r2

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8008c34:	b298      	uxth	r0, r3
 8008c36:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 8008c3a:	b298      	uxth	r0, r3
 8008c3c:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 8008c40:	b124      	cbz	r4, 8008c4c <lwip_standard_chksum+0x4a>
    sum = SWAP_BYTES_IN_WORD(sum);
 8008c42:	0203      	lsls	r3, r0, #8
 8008c44:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 8008c4c:	b280      	uxth	r0, r0
 8008c4e:	b002      	add	sp, #8
 8008c50:	bd10      	pop	{r4, pc}
    sum += *ps++;
 8008c52:	f830 3b02 	ldrh.w	r3, [r0], #2
    len -= 2;
 8008c56:	3902      	subs	r1, #2
    sum += *ps++;
 8008c58:	441a      	add	r2, r3
    len -= 2;
 8008c5a:	e7e2      	b.n	8008c22 <lwip_standard_chksum+0x20>

08008c5c <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8008c5c:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8008c5e:	f7ff ffd0 	bl	8008c02 <lwip_standard_chksum>
 8008c62:	43c0      	mvns	r0, r0
}
 8008c64:	b280      	uxth	r0, r0
 8008c66:	bd08      	pop	{r3, pc}

08008c68 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8008c68:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8008c6a:	f004 fe9d 	bl	800d9a8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8008c6e:	f000 f80d 	bl	8008c8c <mem_init>
  memp_init();
 8008c72:	f000 fab5 	bl	80091e0 <memp_init>
  pbuf_init();
  netif_init();
 8008c76:	f000 fb77 	bl	8009368 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8008c7a:	f004 faaf 	bl	800d1dc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8008c7e:	f001 f855 	bl	8009d2c <tcp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8008c82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8008c86:	f004 ba57 	b.w	800d138 <sys_timeouts_init>
	...

08008c8c <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008c8c:	4810      	ldr	r0, [pc, #64]	; (8008cd0 <mem_init+0x44>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 8008c8e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008c92:	4b10      	ldr	r3, [pc, #64]	; (8008cd4 <mem_init+0x48>)
  mem->prev = 0;
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
 8008c94:	f04f 2128 	mov.w	r1, #671098880	; 0x28002800
  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8008c98:	300c      	adds	r0, #12
{
 8008c9a:	b510      	push	{r4, lr}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008c9c:	f840 3c0c 	str.w	r3, [r0, #-12]
  mem->next = MEM_SIZE_ALIGNED;
 8008ca0:	601a      	str	r2, [r3, #0]
  mem->used = 0;
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	711a      	strb	r2, [r3, #4]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8008ca6:	4a0c      	ldr	r2, [pc, #48]	; (8008cd8 <mem_init+0x4c>)
 8008ca8:	f840 2c08 	str.w	r2, [r0, #-8]
  ram_end->next = MEM_SIZE_ALIGNED;
 8008cac:	6011      	str	r1, [r2, #0]
  ram_end->used = 1;
 8008cae:	2101      	movs	r1, #1
 8008cb0:	7111      	strb	r1, [r2, #4]
  lfree = (struct mem *)(void *)ram;
 8008cb2:	f840 3c04 	str.w	r3, [r0, #-4]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8008cb6:	f004 fe83 	bl	800d9c0 <sys_mutex_new>
 8008cba:	b140      	cbz	r0, 8008cce <mem_init+0x42>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8008cbc:	4b07      	ldr	r3, [pc, #28]	; (8008cdc <mem_init+0x50>)
 8008cbe:	f240 221f 	movw	r2, #543	; 0x21f
 8008cc2:	4907      	ldr	r1, [pc, #28]	; (8008ce0 <mem_init+0x54>)
 8008cc4:	4807      	ldr	r0, [pc, #28]	; (8008ce4 <mem_init+0x58>)
  }
}
 8008cc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8008cca:	f004 bf35 	b.w	800db38 <iprintf>
}
 8008cce:	bd10      	pop	{r4, pc}
 8008cd0:	24006764 	.word	0x24006764
 8008cd4:	30044000 	.word	0x30044000
 8008cd8:	30046800 	.word	0x30046800
 8008cdc:	08020d8e 	.word	0x08020d8e
 8008ce0:	08020dee 	.word	0x08020dee
 8008ce4:	0801f8bf 	.word	0x0801f8bf

08008ce8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8008ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8008cea:	4604      	mov	r4, r0
 8008cec:	2800      	cmp	r0, #0
 8008cee:	f000 80b8 	beq.w	8008e62 <mem_free+0x17a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8008cf2:	0783      	lsls	r3, r0, #30
 8008cf4:	d00c      	beq.n	8008d10 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8008cf6:	4b5b      	ldr	r3, [pc, #364]	; (8008e64 <mem_free+0x17c>)
 8008cf8:	f240 2273 	movw	r2, #627	; 0x273
 8008cfc:	495a      	ldr	r1, [pc, #360]	; (8008e68 <mem_free+0x180>)
  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8008cfe:	485b      	ldr	r0, [pc, #364]	; (8008e6c <mem_free+0x184>)
 8008d00:	f004 ff1a 	bl	800db38 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008d04:	f004 fe82 	bl	800da0c <sys_arch_protect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8008d08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MEM_STATS_INC_LOCKED(illegal);
 8008d0c:	f004 be8a 	b.w	800da24 <sys_arch_unprotect>
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8008d10:	4f57      	ldr	r7, [pc, #348]	; (8008e70 <mem_free+0x188>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008d12:	f1a0 0608 	sub.w	r6, r0, #8
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	463d      	mov	r5, r7
 8008d1a:	42b3      	cmp	r3, r6
 8008d1c:	d804      	bhi.n	8008d28 <mem_free+0x40>
 8008d1e:	f100 030c 	add.w	r3, r0, #12
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d204      	bcs.n	8008d32 <mem_free+0x4a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8008d28:	4b4e      	ldr	r3, [pc, #312]	; (8008e64 <mem_free+0x17c>)
 8008d2a:	f240 227f 	movw	r2, #639	; 0x27f
 8008d2e:	4951      	ldr	r1, [pc, #324]	; (8008e74 <mem_free+0x18c>)
 8008d30:	e7e5      	b.n	8008cfe <mem_free+0x16>
  LWIP_MEM_FREE_PROTECT();
 8008d32:	f107 000c 	add.w	r0, r7, #12
 8008d36:	f004 fe51 	bl	800d9dc <sys_mutex_lock>
  if (!mem->used) {
 8008d3a:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8008d3e:	b95b      	cbnz	r3, 8008d58 <mem_free+0x70>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8008d40:	4b48      	ldr	r3, [pc, #288]	; (8008e64 <mem_free+0x17c>)
 8008d42:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8008d46:	494c      	ldr	r1, [pc, #304]	; (8008e78 <mem_free+0x190>)
 8008d48:	4848      	ldr	r0, [pc, #288]	; (8008e6c <mem_free+0x184>)
 8008d4a:	f004 fef5 	bl	800db38 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8008d4e:	f107 000c 	add.w	r0, r7, #12
    LWIP_MEM_FREE_UNPROTECT();
 8008d52:	f004 fe48 	bl	800d9e6 <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 8008d56:	e7d5      	b.n	8008d04 <mem_free+0x1c>
  nmem = ptr_to_mem(mem->next);
 8008d58:	f834 2c08 	ldrh.w	r2, [r4, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008d5c:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8008d60:	d813      	bhi.n	8008d8a <mem_free+0xa2>
  pmem = ptr_to_mem(mem->prev);
 8008d62:	f834 0c06 	ldrh.w	r0, [r4, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008d66:	f5b0 5f20 	cmp.w	r0, #10240	; 0x2800
 8008d6a:	d80e      	bhi.n	8008d8a <mem_free+0xa2>
  return (mem_size_t)((u8_t *)mem - ram);
 8008d6c:	6839      	ldr	r1, [r7, #0]
 8008d6e:	1a73      	subs	r3, r6, r1
 8008d70:	b29b      	uxth	r3, r3
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008d72:	4283      	cmp	r3, r0
 8008d74:	d002      	beq.n	8008d7c <mem_free+0x94>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008d76:	5a08      	ldrh	r0, [r1, r0]
 8008d78:	4298      	cmp	r0, r3
 8008d7a:	d106      	bne.n	8008d8a <mem_free+0xa2>
  return (struct mem *)(void *)&ram[ptr];
 8008d7c:	440a      	add	r2, r1
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008d7e:	6868      	ldr	r0, [r5, #4]
 8008d80:	4282      	cmp	r2, r0
 8008d82:	d00b      	beq.n	8008d9c <mem_free+0xb4>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008d84:	8852      	ldrh	r2, [r2, #2]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d008      	beq.n	8008d9c <mem_free+0xb4>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8008d8a:	4b36      	ldr	r3, [pc, #216]	; (8008e64 <mem_free+0x17c>)
 8008d8c:	f240 2295 	movw	r2, #661	; 0x295
 8008d90:	493a      	ldr	r1, [pc, #232]	; (8008e7c <mem_free+0x194>)
 8008d92:	4836      	ldr	r0, [pc, #216]	; (8008e6c <mem_free+0x184>)
 8008d94:	f004 fed0 	bl	800db38 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8008d98:	4839      	ldr	r0, [pc, #228]	; (8008e80 <mem_free+0x198>)
 8008d9a:	e7da      	b.n	8008d52 <mem_free+0x6a>
  mem->used = 0;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 8008da2:	68ab      	ldr	r3, [r5, #8]
 8008da4:	42b3      	cmp	r3, r6
    lfree = mem;
 8008da6:	bf88      	it	hi
 8008da8:	60ae      	strhi	r6, [r5, #8]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8008daa:	428e      	cmp	r6, r1
 8008dac:	d206      	bcs.n	8008dbc <mem_free+0xd4>
 8008dae:	4b2d      	ldr	r3, [pc, #180]	; (8008e64 <mem_free+0x17c>)
 8008db0:	f240 12df 	movw	r2, #479	; 0x1df
 8008db4:	4933      	ldr	r1, [pc, #204]	; (8008e84 <mem_free+0x19c>)
 8008db6:	482d      	ldr	r0, [pc, #180]	; (8008e6c <mem_free+0x184>)
 8008db8:	f004 febe 	bl	800db38 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8008dbc:	686b      	ldr	r3, [r5, #4]
 8008dbe:	429e      	cmp	r6, r3
 8008dc0:	d306      	bcc.n	8008dd0 <mem_free+0xe8>
 8008dc2:	4b28      	ldr	r3, [pc, #160]	; (8008e64 <mem_free+0x17c>)
 8008dc4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8008dc8:	492f      	ldr	r1, [pc, #188]	; (8008e88 <mem_free+0x1a0>)
 8008dca:	4828      	ldr	r0, [pc, #160]	; (8008e6c <mem_free+0x184>)
 8008dcc:	f004 feb4 	bl	800db38 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8008dd0:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8008dd4:	b133      	cbz	r3, 8008de4 <mem_free+0xfc>
 8008dd6:	4b23      	ldr	r3, [pc, #140]	; (8008e64 <mem_free+0x17c>)
 8008dd8:	f240 12e1 	movw	r2, #481	; 0x1e1
 8008ddc:	492b      	ldr	r1, [pc, #172]	; (8008e8c <mem_free+0x1a4>)
 8008dde:	4823      	ldr	r0, [pc, #140]	; (8008e6c <mem_free+0x184>)
 8008de0:	f004 feaa 	bl	800db38 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8008de4:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8008de8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008dec:	d906      	bls.n	8008dfc <mem_free+0x114>
 8008dee:	4b1d      	ldr	r3, [pc, #116]	; (8008e64 <mem_free+0x17c>)
 8008df0:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8008df4:	4926      	ldr	r1, [pc, #152]	; (8008e90 <mem_free+0x1a8>)
 8008df6:	481d      	ldr	r0, [pc, #116]	; (8008e6c <mem_free+0x184>)
 8008df8:	f004 fe9e 	bl	800db38 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8008dfc:	682b      	ldr	r3, [r5, #0]
 8008dfe:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8008e02:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8008e04:	4296      	cmp	r6, r2
 8008e06:	d012      	beq.n	8008e2e <mem_free+0x146>
 8008e08:	7910      	ldrb	r0, [r2, #4]
 8008e0a:	b980      	cbnz	r0, 8008e2e <mem_free+0x146>
 8008e0c:	6868      	ldr	r0, [r5, #4]
 8008e0e:	4282      	cmp	r2, r0
 8008e10:	d00d      	beq.n	8008e2e <mem_free+0x146>
    if (lfree == nmem) {
 8008e12:	68a8      	ldr	r0, [r5, #8]
 8008e14:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 8008e16:	5a5a      	ldrh	r2, [r3, r1]
 8008e18:	f824 2c08 	strh.w	r2, [r4, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8008e1c:	5a5a      	ldrh	r2, [r3, r1]
      lfree = mem;
 8008e1e:	bf08      	it	eq
 8008e20:	60ae      	streq	r6, [r5, #8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8008e22:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8008e26:	bf1e      	ittt	ne
 8008e28:	18d2      	addne	r2, r2, r3
  return (mem_size_t)((u8_t *)mem - ram);
 8008e2a:	1af1      	subne	r1, r6, r3
 8008e2c:	8051      	strhne	r1, [r2, #2]
  pmem = ptr_to_mem(mem->prev);
 8008e2e:	f834 2c06 	ldrh.w	r2, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 8008e32:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 8008e34:	428e      	cmp	r6, r1
 8008e36:	d00f      	beq.n	8008e58 <mem_free+0x170>
 8008e38:	7908      	ldrb	r0, [r1, #4]
 8008e3a:	b968      	cbnz	r0, 8008e58 <mem_free+0x170>
    if (lfree == mem) {
 8008e3c:	68a8      	ldr	r0, [r5, #8]
 8008e3e:	4286      	cmp	r6, r0
      lfree = pmem;
 8008e40:	bf08      	it	eq
 8008e42:	60a9      	streq	r1, [r5, #8]
    pmem->next = mem->next;
 8008e44:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8008e48:	5299      	strh	r1, [r3, r2]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8008e4a:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8008e4e:	f5b1 5f20 	cmp.w	r1, #10240	; 0x2800
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8008e52:	bf1c      	itt	ne
 8008e54:	185b      	addne	r3, r3, r1
 8008e56:	805a      	strhne	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8008e58:	4809      	ldr	r0, [pc, #36]	; (8008e80 <mem_free+0x198>)
}
 8008e5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  LWIP_MEM_FREE_UNPROTECT();
 8008e5e:	f004 bdc2 	b.w	800d9e6 <sys_mutex_unlock>
}
 8008e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e64:	08020d8e 	.word	0x08020d8e
 8008e68:	08020e09 	.word	0x08020e09
 8008e6c:	0801f8bf 	.word	0x0801f8bf
 8008e70:	24006764 	.word	0x24006764
 8008e74:	08020e2a 	.word	0x08020e2a
 8008e78:	08020e43 	.word	0x08020e43
 8008e7c:	08020e69 	.word	0x08020e69
 8008e80:	24006770 	.word	0x24006770
 8008e84:	08020e9b 	.word	0x08020e9b
 8008e88:	08020eb2 	.word	0x08020eb2
 8008e8c:	08020ecc 	.word	0x08020ecc
 8008e90:	08020ee7 	.word	0x08020ee7

08008e94 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8008e94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8008e98:	1ccc      	adds	r4, r1, #3
{
 8008e9a:	4605      	mov	r5, r0
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8008e9c:	f024 0403 	bic.w	r4, r4, #3
 8008ea0:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 8008ea2:	2c0b      	cmp	r4, #11
 8008ea4:	d904      	bls.n	8008eb0 <mem_trim+0x1c>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8008ea6:	f5b4 5f20 	cmp.w	r4, #10240	; 0x2800
 8008eaa:	d902      	bls.n	8008eb2 <mem_trim+0x1e>
    return NULL;
 8008eac:	2500      	movs	r5, #0
 8008eae:	e01a      	b.n	8008ee6 <mem_trim+0x52>
    newsize = MIN_SIZE_ALIGNED;
 8008eb0:	240c      	movs	r4, #12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8008eb2:	42a1      	cmp	r1, r4
 8008eb4:	d8fa      	bhi.n	8008eac <mem_trim+0x18>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8008eb6:	4e47      	ldr	r6, [pc, #284]	; (8008fd4 <mem_trim+0x140>)
 8008eb8:	6833      	ldr	r3, [r6, #0]
 8008eba:	42ab      	cmp	r3, r5
 8008ebc:	d802      	bhi.n	8008ec4 <mem_trim+0x30>
 8008ebe:	6873      	ldr	r3, [r6, #4]
 8008ec0:	42ab      	cmp	r3, r5
 8008ec2:	d806      	bhi.n	8008ed2 <mem_trim+0x3e>
 8008ec4:	4b44      	ldr	r3, [pc, #272]	; (8008fd8 <mem_trim+0x144>)
 8008ec6:	f240 22d1 	movw	r2, #721	; 0x2d1
 8008eca:	4944      	ldr	r1, [pc, #272]	; (8008fdc <mem_trim+0x148>)
 8008ecc:	4844      	ldr	r0, [pc, #272]	; (8008fe0 <mem_trim+0x14c>)
 8008ece:	f004 fe33 	bl	800db38 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8008ed2:	6833      	ldr	r3, [r6, #0]
 8008ed4:	42ab      	cmp	r3, r5
 8008ed6:	d802      	bhi.n	8008ede <mem_trim+0x4a>
 8008ed8:	6872      	ldr	r2, [r6, #4]
 8008eda:	42aa      	cmp	r2, r5
 8008edc:	d806      	bhi.n	8008eec <mem_trim+0x58>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008ede:	f004 fd95 	bl	800da0c <sys_arch_protect>
 8008ee2:	f004 fd9f 	bl	800da24 <sys_arch_unprotect>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8008ee6:	4628      	mov	r0, r5
 8008ee8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008eec:	f1a5 0708 	sub.w	r7, r5, #8
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8008ef0:	f835 8c08 	ldrh.w	r8, [r5, #-8]
  return (mem_size_t)((u8_t *)mem - ram);
 8008ef4:	1aff      	subs	r7, r7, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8008ef6:	f1a8 0808 	sub.w	r8, r8, #8
  return (mem_size_t)((u8_t *)mem - ram);
 8008efa:	b2bf      	uxth	r7, r7
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8008efc:	eba8 0807 	sub.w	r8, r8, r7
 8008f00:	fa1f f888 	uxth.w	r8, r8
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8008f04:	45a0      	cmp	r8, r4
 8008f06:	d207      	bcs.n	8008f18 <mem_trim+0x84>
 8008f08:	4b33      	ldr	r3, [pc, #204]	; (8008fd8 <mem_trim+0x144>)
 8008f0a:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8008f0e:	4935      	ldr	r1, [pc, #212]	; (8008fe4 <mem_trim+0x150>)
 8008f10:	4833      	ldr	r0, [pc, #204]	; (8008fe0 <mem_trim+0x14c>)
 8008f12:	f004 fe11 	bl	800db38 <iprintf>
  if (newsize > size) {
 8008f16:	e7c9      	b.n	8008eac <mem_trim+0x18>
  if (newsize == size) {
 8008f18:	d0e5      	beq.n	8008ee6 <mem_trim+0x52>
  LWIP_MEM_FREE_PROTECT();
 8008f1a:	4833      	ldr	r0, [pc, #204]	; (8008fe8 <mem_trim+0x154>)
 8008f1c:	f004 fd5e 	bl	800d9dc <sys_mutex_lock>
  mem2 = ptr_to_mem(mem->next);
 8008f20:	f835 9c08 	ldrh.w	r9, [r5, #-8]
  return (struct mem *)(void *)&ram[ptr];
 8008f24:	f8d6 b000 	ldr.w	fp, [r6]
 8008f28:	eb0b 0a09 	add.w	sl, fp, r9
  if (mem2->used == 0) {
 8008f2c:	f89a 3004 	ldrb.w	r3, [sl, #4]
 8008f30:	bb3b      	cbnz	r3, 8008f82 <mem_trim+0xee>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008f32:	f5b9 5f20 	cmp.w	r9, #10240	; 0x2800
 8008f36:	d106      	bne.n	8008f46 <mem_trim+0xb2>
 8008f38:	4b27      	ldr	r3, [pc, #156]	; (8008fd8 <mem_trim+0x144>)
 8008f3a:	f240 22f5 	movw	r2, #757	; 0x2f5
 8008f3e:	492b      	ldr	r1, [pc, #172]	; (8008fec <mem_trim+0x158>)
 8008f40:	4827      	ldr	r0, [pc, #156]	; (8008fe0 <mem_trim+0x14c>)
 8008f42:	f004 fdf9 	bl	800db38 <iprintf>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008f46:	f107 0308 	add.w	r3, r7, #8
    if (lfree == mem2) {
 8008f4a:	68b1      	ldr	r1, [r6, #8]
    next = mem2->next;
 8008f4c:	f83b 0009 	ldrh.w	r0, [fp, r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008f50:	441c      	add	r4, r3
 8008f52:	6833      	ldr	r3, [r6, #0]
    if (lfree == mem2) {
 8008f54:	4551      	cmp	r1, sl
    mem2->used = 0;
 8008f56:	f04f 0100 	mov.w	r1, #0
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008f5a:	b2a2      	uxth	r2, r4
  return (struct mem *)(void *)&ram[ptr];
 8008f5c:	fa13 f484 	uxtah	r4, r3, r4
    mem2->used = 0;
 8008f60:	7121      	strb	r1, [r4, #4]
    mem2->next = next;
 8008f62:	5298      	strh	r0, [r3, r2]
    mem2->prev = ptr;
 8008f64:	8067      	strh	r7, [r4, #2]
    mem->next = ptr2;
 8008f66:	f825 2c08 	strh.w	r2, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008f6a:	5a99      	ldrh	r1, [r3, r2]
      lfree = ptr_to_mem(ptr2);
 8008f6c:	bf08      	it	eq
 8008f6e:	60b4      	streq	r4, [r6, #8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008f70:	f5b1 5f20 	cmp.w	r1, #10240	; 0x2800
 8008f74:	d001      	beq.n	8008f7a <mem_trim+0xe6>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008f76:	440b      	add	r3, r1
 8008f78:	805a      	strh	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8008f7a:	481b      	ldr	r0, [pc, #108]	; (8008fe8 <mem_trim+0x154>)
 8008f7c:	f004 fd33 	bl	800d9e6 <sys_mutex_unlock>
  return rmem;
 8008f80:	e7b1      	b.n	8008ee6 <mem_trim+0x52>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8008f82:	f104 0314 	add.w	r3, r4, #20
 8008f86:	4543      	cmp	r3, r8
 8008f88:	d8f7      	bhi.n	8008f7a <mem_trim+0xe6>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008f8a:	f107 0308 	add.w	r3, r7, #8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008f8e:	f5b9 5f20 	cmp.w	r9, #10240	; 0x2800
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008f92:	441c      	add	r4, r3
 8008f94:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008f96:	d106      	bne.n	8008fa6 <mem_trim+0x112>
 8008f98:	4b0f      	ldr	r3, [pc, #60]	; (8008fd8 <mem_trim+0x144>)
 8008f9a:	f240 3216 	movw	r2, #790	; 0x316
 8008f9e:	4913      	ldr	r1, [pc, #76]	; (8008fec <mem_trim+0x158>)
 8008fa0:	480f      	ldr	r0, [pc, #60]	; (8008fe0 <mem_trim+0x14c>)
 8008fa2:	f004 fdc9 	bl	800db38 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8008fa6:	6833      	ldr	r3, [r6, #0]
    if (mem2 < lfree) {
 8008fa8:	68b1      	ldr	r1, [r6, #8]
  return (struct mem *)(void *)&ram[ptr];
 8008faa:	191a      	adds	r2, r3, r4
    if (mem2 < lfree) {
 8008fac:	4291      	cmp	r1, r2
    mem2->used = 0;
 8008fae:	f04f 0100 	mov.w	r1, #0
 8008fb2:	7111      	strb	r1, [r2, #4]
    mem2->next = mem->next;
 8008fb4:	f835 1c08 	ldrh.w	r1, [r5, #-8]
      lfree = mem2;
 8008fb8:	bf88      	it	hi
 8008fba:	60b2      	strhi	r2, [r6, #8]
    mem2->next = mem->next;
 8008fbc:	5319      	strh	r1, [r3, r4]
    mem2->prev = ptr;
 8008fbe:	8057      	strh	r7, [r2, #2]
    mem->next = ptr2;
 8008fc0:	f825 4c08 	strh.w	r4, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008fc4:	5b1a      	ldrh	r2, [r3, r4]
 8008fc6:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008fca:	bf1c      	itt	ne
 8008fcc:	189b      	addne	r3, r3, r2
 8008fce:	805c      	strhne	r4, [r3, #2]
 8008fd0:	e7d3      	b.n	8008f7a <mem_trim+0xe6>
 8008fd2:	bf00      	nop
 8008fd4:	24006764 	.word	0x24006764
 8008fd8:	08020d8e 	.word	0x08020d8e
 8008fdc:	08020f11 	.word	0x08020f11
 8008fe0:	0801f8bf 	.word	0x0801f8bf
 8008fe4:	08020f28 	.word	0x08020f28
 8008fe8:	24006770 	.word	0x24006770
 8008fec:	08020f48 	.word	0x08020f48

08008ff0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8008ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	f000 8088 	beq.w	800910a <mem_malloc+0x11a>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8008ffa:	1cc5      	adds	r5, r0, #3
 8008ffc:	f025 0503 	bic.w	r5, r5, #3
 8009000:	b2ad      	uxth	r5, r5
  if (size < MIN_SIZE_ALIGNED) {
 8009002:	2d0b      	cmp	r5, #11
 8009004:	d904      	bls.n	8009010 <mem_malloc+0x20>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009006:	f5b5 5f20 	cmp.w	r5, #10240	; 0x2800
 800900a:	d902      	bls.n	8009012 <mem_malloc+0x22>
    return NULL;
 800900c:	2000      	movs	r0, #0
 800900e:	e07c      	b.n	800910a <mem_malloc+0x11a>
    size = MIN_SIZE_ALIGNED;
 8009010:	250c      	movs	r5, #12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009012:	42a8      	cmp	r0, r5
 8009014:	d8fa      	bhi.n	800900c <mem_malloc+0x1c>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8009016:	4f42      	ldr	r7, [pc, #264]	; (8009120 <mem_malloc+0x130>)
 8009018:	f107 000c 	add.w	r0, r7, #12
 800901c:	f004 fcde 	bl	800d9dc <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 8009020:	683a      	ldr	r2, [r7, #0]
 8009022:	68be      	ldr	r6, [r7, #8]
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009024:	f5c5 5020 	rsb	r0, r5, #10240	; 0x2800
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009028:	f06f 0c07 	mvn.w	ip, #7
  return (mem_size_t)((u8_t *)mem - ram);
 800902c:	1ab6      	subs	r6, r6, r2
 800902e:	b2b6      	uxth	r6, r6
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009030:	4286      	cmp	r6, r0
 8009032:	d303      	bcc.n	800903c <mem_malloc+0x4c>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8009034:	483b      	ldr	r0, [pc, #236]	; (8009124 <mem_malloc+0x134>)
 8009036:	f004 fcd6 	bl	800d9e6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800903a:	e7e7      	b.n	800900c <mem_malloc+0x1c>
  return (struct mem *)(void *)&ram[ptr];
 800903c:	1994      	adds	r4, r2, r6
      if ((!mem->used) &&
 800903e:	5b91      	ldrh	r1, [r2, r6]
 8009040:	7923      	ldrb	r3, [r4, #4]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d169      	bne.n	800911a <mem_malloc+0x12a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009046:	ebac 0306 	sub.w	r3, ip, r6
 800904a:	440b      	add	r3, r1
      if ((!mem->used) &&
 800904c:	42ab      	cmp	r3, r5
 800904e:	d364      	bcc.n	800911a <mem_malloc+0x12a>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009050:	f105 0214 	add.w	r2, r5, #20
 8009054:	4293      	cmp	r3, r2
 8009056:	d35a      	bcc.n	800910e <mem_malloc+0x11e>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009058:	f105 0808 	add.w	r8, r5, #8
 800905c:	44b0      	add	r8, r6
 800905e:	fa1f f888 	uxth.w	r8, r8
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009062:	f5b8 5f20 	cmp.w	r8, #10240	; 0x2800
 8009066:	d106      	bne.n	8009076 <mem_malloc+0x86>
 8009068:	4b2f      	ldr	r3, [pc, #188]	; (8009128 <mem_malloc+0x138>)
 800906a:	f240 3287 	movw	r2, #903	; 0x387
 800906e:	492f      	ldr	r1, [pc, #188]	; (800912c <mem_malloc+0x13c>)
 8009070:	482f      	ldr	r0, [pc, #188]	; (8009130 <mem_malloc+0x140>)
 8009072:	f004 fd61 	bl	800db38 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8009076:	683b      	ldr	r3, [r7, #0]
          mem2->used = 0;
 8009078:	2100      	movs	r1, #0
  return (struct mem *)(void *)&ram[ptr];
 800907a:	eb03 0208 	add.w	r2, r3, r8
          mem2->used = 0;
 800907e:	7111      	strb	r1, [r2, #4]
          mem2->next = mem->next;
 8009080:	8821      	ldrh	r1, [r4, #0]
 8009082:	f823 1008 	strh.w	r1, [r3, r8]
          mem2->prev = ptr;
 8009086:	8056      	strh	r6, [r2, #2]
          mem->used = 1;
 8009088:	2201      	movs	r2, #1
          mem->next = ptr2;
 800908a:	f8a4 8000 	strh.w	r8, [r4]
          mem->used = 1;
 800908e:	7122      	strb	r2, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009090:	f833 2008 	ldrh.w	r2, [r3, r8]
 8009094:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8009098:	d002      	beq.n	80090a0 <mem_malloc+0xb0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800909a:	4413      	add	r3, r2
 800909c:	f8a3 8002 	strh.w	r8, [r3, #2]
        if (mem == lfree) {
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	42a3      	cmp	r3, r4
 80090a4:	d110      	bne.n	80090c8 <mem_malloc+0xd8>
  return (struct mem *)(void *)&ram[ptr];
 80090a6:	e9d7 0100 	ldrd	r0, r1, [r7]
          while (cur->used && cur != ram_end) {
 80090aa:	791a      	ldrb	r2, [r3, #4]
 80090ac:	b10a      	cbz	r2, 80090b2 <mem_malloc+0xc2>
 80090ae:	4299      	cmp	r1, r3
 80090b0:	d130      	bne.n	8009114 <mem_malloc+0x124>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80090b2:	4299      	cmp	r1, r3
          lfree = cur;
 80090b4:	60bb      	str	r3, [r7, #8]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80090b6:	d007      	beq.n	80090c8 <mem_malloc+0xd8>
 80090b8:	b132      	cbz	r2, 80090c8 <mem_malloc+0xd8>
 80090ba:	4b1b      	ldr	r3, [pc, #108]	; (8009128 <mem_malloc+0x138>)
 80090bc:	f240 32b5 	movw	r2, #949	; 0x3b5
 80090c0:	491c      	ldr	r1, [pc, #112]	; (8009134 <mem_malloc+0x144>)
 80090c2:	481b      	ldr	r0, [pc, #108]	; (8009130 <mem_malloc+0x140>)
 80090c4:	f004 fd38 	bl	800db38 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80090c8:	3508      	adds	r5, #8
        sys_mutex_unlock(&mem_mutex);
 80090ca:	4816      	ldr	r0, [pc, #88]	; (8009124 <mem_malloc+0x134>)
 80090cc:	f004 fc8b 	bl	800d9e6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	4425      	add	r5, r4
 80090d4:	42ab      	cmp	r3, r5
 80090d6:	d206      	bcs.n	80090e6 <mem_malloc+0xf6>
 80090d8:	4b13      	ldr	r3, [pc, #76]	; (8009128 <mem_malloc+0x138>)
 80090da:	f240 32b9 	movw	r2, #953	; 0x3b9
 80090de:	4916      	ldr	r1, [pc, #88]	; (8009138 <mem_malloc+0x148>)
 80090e0:	4813      	ldr	r0, [pc, #76]	; (8009130 <mem_malloc+0x140>)
 80090e2:	f004 fd29 	bl	800db38 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80090e6:	07a3      	lsls	r3, r4, #30
 80090e8:	d00d      	beq.n	8009106 <mem_malloc+0x116>
 80090ea:	4b0f      	ldr	r3, [pc, #60]	; (8009128 <mem_malloc+0x138>)
 80090ec:	f240 32bb 	movw	r2, #955	; 0x3bb
 80090f0:	4912      	ldr	r1, [pc, #72]	; (800913c <mem_malloc+0x14c>)
 80090f2:	480f      	ldr	r0, [pc, #60]	; (8009130 <mem_malloc+0x140>)
 80090f4:	f004 fd20 	bl	800db38 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80090f8:	4b0b      	ldr	r3, [pc, #44]	; (8009128 <mem_malloc+0x138>)
 80090fa:	f240 32bd 	movw	r2, #957	; 0x3bd
 80090fe:	4910      	ldr	r1, [pc, #64]	; (8009140 <mem_malloc+0x150>)
 8009100:	480b      	ldr	r0, [pc, #44]	; (8009130 <mem_malloc+0x140>)
 8009102:	f004 fd19 	bl	800db38 <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8009106:	f104 0008 	add.w	r0, r4, #8
}
 800910a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          mem->used = 1;
 800910e:	2301      	movs	r3, #1
 8009110:	7123      	strb	r3, [r4, #4]
 8009112:	e7c5      	b.n	80090a0 <mem_malloc+0xb0>
  return (struct mem *)(void *)&ram[ptr];
 8009114:	881b      	ldrh	r3, [r3, #0]
 8009116:	4403      	add	r3, r0
 8009118:	e7c7      	b.n	80090aa <mem_malloc+0xba>
    size = MIN_SIZE_ALIGNED;
 800911a:	460e      	mov	r6, r1
 800911c:	e788      	b.n	8009030 <mem_malloc+0x40>
 800911e:	bf00      	nop
 8009120:	24006764 	.word	0x24006764
 8009124:	24006770 	.word	0x24006770
 8009128:	08020d8e 	.word	0x08020d8e
 800912c:	08020f48 	.word	0x08020f48
 8009130:	0801f8bf 	.word	0x0801f8bf
 8009134:	08020f59 	.word	0x08020f59
 8009138:	08020f72 	.word	0x08020f72
 800913c:	08020fa2 	.word	0x08020fa2
 8009140:	08020fd1 	.word	0x08020fd1

08009144 <do_memp_malloc_pool.isra.0>:
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}

static void *
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
 8009144:	b538      	push	{r3, r4, r5, lr}
 8009146:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8009148:	f004 fc60 	bl	800da0c <sys_arch_protect>
 800914c:	4605      	mov	r5, r0

  memp = *desc->tab;
 800914e:	6823      	ldr	r3, [r4, #0]
 8009150:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009152:	b15c      	cbz	r4, 800916c <do_memp_malloc_pool.isra.0+0x28>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009154:	6822      	ldr	r2, [r4, #0]
 8009156:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009158:	07a3      	lsls	r3, r4, #30
 800915a:	d006      	beq.n	800916a <do_memp_malloc_pool.isra.0+0x26>
 800915c:	4b05      	ldr	r3, [pc, #20]	; (8009174 <do_memp_malloc_pool.isra.0+0x30>)
 800915e:	f44f 728c 	mov.w	r2, #280	; 0x118
 8009162:	4905      	ldr	r1, [pc, #20]	; (8009178 <do_memp_malloc_pool.isra.0+0x34>)
 8009164:	4805      	ldr	r0, [pc, #20]	; (800917c <do_memp_malloc_pool.isra.0+0x38>)
 8009166:	f004 fce7 	bl	800db38 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800916a:	4628      	mov	r0, r5
    return ((u8_t *)memp + MEMP_SIZE);
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800916c:	f004 fc5a 	bl	800da24 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 8009170:	4620      	mov	r0, r4
 8009172:	bd38      	pop	{r3, r4, r5, pc}
 8009174:	08020ff4 	.word	0x08020ff4
 8009178:	08021055 	.word	0x08021055
 800917c:	0801f8bf 	.word	0x0801f8bf

08009180 <do_memp_free_pool.isra.0>:

  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
 8009180:	b538      	push	{r3, r4, r5, lr}
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009182:	078b      	lsls	r3, r1, #30
do_memp_free_pool(const struct memp_desc *desc, void *mem)
 8009184:	4605      	mov	r5, r0
 8009186:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 8009188:	d006      	beq.n	8009198 <do_memp_free_pool.isra.0+0x18>
 800918a:	4b08      	ldr	r3, [pc, #32]	; (80091ac <do_memp_free_pool.isra.0+0x2c>)
 800918c:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009190:	4907      	ldr	r1, [pc, #28]	; (80091b0 <do_memp_free_pool.isra.0+0x30>)
 8009192:	4808      	ldr	r0, [pc, #32]	; (80091b4 <do_memp_free_pool.isra.0+0x34>)
 8009194:	f004 fcd0 	bl	800db38 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 8009198:	f004 fc38 	bl	800da0c <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800919c:	682b      	ldr	r3, [r5, #0]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 80091a2:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80091a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SYS_ARCH_UNPROTECT(old_level);
 80091a8:	f004 bc3c 	b.w	800da24 <sys_arch_unprotect>
 80091ac:	08020ff4 	.word	0x08020ff4
 80091b0:	08021078 	.word	0x08021078
 80091b4:	0801f8bf 	.word	0x0801f8bf

080091b8 <memp_init_pool>:
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80091b8:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 80091ba:	2200      	movs	r2, #0
 80091bc:	6881      	ldr	r1, [r0, #8]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80091be:	3303      	adds	r3, #3
{
 80091c0:	b530      	push	{r4, r5, lr}
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80091c2:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 80091c6:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 80091c8:	600a      	str	r2, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 80091ca:	4294      	cmp	r4, r2
 80091cc:	dc00      	bgt.n	80091d0 <memp_init_pool+0x18>
}
 80091ce:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 80091d0:	680d      	ldr	r5, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 80091d2:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 80091d4:	601d      	str	r5, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80091d6:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 80091d8:	600b      	str	r3, [r1, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80091da:	442b      	add	r3, r5
  for (i = 0; i < desc->num; ++i) {
 80091dc:	e7f5      	b.n	80091ca <memp_init_pool+0x12>
	...

080091e0 <memp_init>:
{
 80091e0:	b538      	push	{r3, r4, r5, lr}
 80091e2:	4d05      	ldr	r5, [pc, #20]	; (80091f8 <memp_init+0x18>)
 80091e4:	240d      	movs	r4, #13
    memp_init_pool(memp_pools[i]);
 80091e6:	3c01      	subs	r4, #1
 80091e8:	f855 0b04 	ldr.w	r0, [r5], #4
 80091ec:	f7ff ffe4 	bl	80091b8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80091f0:	b2a4      	uxth	r4, r4
 80091f2:	2c00      	cmp	r4, #0
 80091f4:	d1f7      	bne.n	80091e6 <memp_init+0x6>
}
 80091f6:	bd38      	pop	{r3, r4, r5, pc}
 80091f8:	0800f6e4 	.word	0x0800f6e4

080091fc <memp_malloc_pool>:
{
 80091fc:	b510      	push	{r4, lr}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80091fe:	4604      	mov	r4, r0
 8009200:	b120      	cbz	r0, 800920c <memp_malloc_pool+0x10>
  return do_memp_malloc_pool(desc);
 8009202:	3008      	adds	r0, #8
}
 8009204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return do_memp_malloc_pool(desc);
 8009208:	f7ff bf9c 	b.w	8009144 <do_memp_malloc_pool.isra.0>
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800920c:	4b04      	ldr	r3, [pc, #16]	; (8009220 <memp_malloc_pool+0x24>)
 800920e:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8009212:	4904      	ldr	r1, [pc, #16]	; (8009224 <memp_malloc_pool+0x28>)
 8009214:	4804      	ldr	r0, [pc, #16]	; (8009228 <memp_malloc_pool+0x2c>)
 8009216:	f004 fc8f 	bl	800db38 <iprintf>
}
 800921a:	4620      	mov	r0, r4
 800921c:	bd10      	pop	{r4, pc}
 800921e:	bf00      	nop
 8009220:	08020ff4 	.word	0x08020ff4
 8009224:	08021098 	.word	0x08021098
 8009228:	0801f8bf 	.word	0x0801f8bf

0800922c <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800922c:	280c      	cmp	r0, #12
{
 800922e:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009230:	d807      	bhi.n	8009242 <memp_malloc+0x16>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009232:	4b08      	ldr	r3, [pc, #32]	; (8009254 <memp_malloc+0x28>)
 8009234:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 8009238:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 800923c:	3008      	adds	r0, #8
 800923e:	f7ff bf81 	b.w	8009144 <do_memp_malloc_pool.isra.0>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009242:	4b05      	ldr	r3, [pc, #20]	; (8009258 <memp_malloc+0x2c>)
 8009244:	f240 1257 	movw	r2, #343	; 0x157
 8009248:	4904      	ldr	r1, [pc, #16]	; (800925c <memp_malloc+0x30>)
 800924a:	4805      	ldr	r0, [pc, #20]	; (8009260 <memp_malloc+0x34>)
 800924c:	f004 fc74 	bl	800db38 <iprintf>
}
 8009250:	2000      	movs	r0, #0
 8009252:	bd08      	pop	{r3, pc}
 8009254:	0800f6e4 	.word	0x0800f6e4
 8009258:	08020ff4 	.word	0x08020ff4
 800925c:	080210aa 	.word	0x080210aa
 8009260:	0801f8bf 	.word	0x0801f8bf

08009264 <memp_free_pool>:
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009264:	b948      	cbnz	r0, 800927a <memp_free_pool+0x16>
 8009266:	4b06      	ldr	r3, [pc, #24]	; (8009280 <memp_free_pool+0x1c>)
 8009268:	f240 1295 	movw	r2, #405	; 0x195
 800926c:	4905      	ldr	r1, [pc, #20]	; (8009284 <memp_free_pool+0x20>)
 800926e:	4806      	ldr	r0, [pc, #24]	; (8009288 <memp_free_pool+0x24>)
 8009270:	f004 bc62 	b.w	800db38 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
    return;
  }

  do_memp_free_pool(desc, mem);
 8009274:	3008      	adds	r0, #8
 8009276:	f7ff bf83 	b.w	8009180 <do_memp_free_pool.isra.0>
  if ((desc == NULL) || (mem == NULL)) {
 800927a:	2900      	cmp	r1, #0
 800927c:	d1fa      	bne.n	8009274 <memp_free_pool+0x10>
}
 800927e:	4770      	bx	lr
 8009280:	08020ff4 	.word	0x08020ff4
 8009284:	08021098 	.word	0x08021098
 8009288:	0801f8bf 	.word	0x0801f8bf

0800928c <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800928c:	280c      	cmp	r0, #12
 800928e:	d906      	bls.n	800929e <memp_free+0x12>
 8009290:	4b07      	ldr	r3, [pc, #28]	; (80092b0 <memp_free+0x24>)
 8009292:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009296:	4907      	ldr	r1, [pc, #28]	; (80092b4 <memp_free+0x28>)
 8009298:	4807      	ldr	r0, [pc, #28]	; (80092b8 <memp_free+0x2c>)
 800929a:	f004 bc4d 	b.w	800db38 <iprintf>

  if (mem == NULL) {
 800929e:	b129      	cbz	r1, 80092ac <memp_free+0x20>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80092a0:	4b06      	ldr	r3, [pc, #24]	; (80092bc <memp_free+0x30>)
 80092a2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80092a6:	3008      	adds	r0, #8
 80092a8:	f7ff bf6a 	b.w	8009180 <do_memp_free_pool.isra.0>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80092ac:	4770      	bx	lr
 80092ae:	bf00      	nop
 80092b0:	08020ff4 	.word	0x08020ff4
 80092b4:	080210c7 	.word	0x080210c7
 80092b8:	0801f8bf 	.word	0x0801f8bf
 80092bc:	0800f6e4 	.word	0x0800f6e4

080092c0 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 80092c0:	f06f 000b 	mvn.w	r0, #11
 80092c4:	4770      	bx	lr
	...

080092c8 <netif_issue_reports>:
{
 80092c8:	b538      	push	{r3, r4, r5, lr}
 80092ca:	460d      	mov	r5, r1
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80092cc:	4604      	mov	r4, r0
 80092ce:	b930      	cbnz	r0, 80092de <netif_issue_reports+0x16>
 80092d0:	4b0c      	ldr	r3, [pc, #48]	; (8009304 <netif_issue_reports+0x3c>)
 80092d2:	f240 326d 	movw	r2, #877	; 0x36d
 80092d6:	490c      	ldr	r1, [pc, #48]	; (8009308 <netif_issue_reports+0x40>)
 80092d8:	480c      	ldr	r0, [pc, #48]	; (800930c <netif_issue_reports+0x44>)
 80092da:	f004 fc2d 	bl	800db38 <iprintf>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80092de:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80092e2:	f003 0205 	and.w	r2, r3, #5
 80092e6:	2a05      	cmp	r2, #5
 80092e8:	d10b      	bne.n	8009302 <netif_issue_reports+0x3a>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80092ea:	07ea      	lsls	r2, r5, #31
 80092ec:	d509      	bpl.n	8009302 <netif_issue_reports+0x3a>
 80092ee:	6862      	ldr	r2, [r4, #4]
 80092f0:	b13a      	cbz	r2, 8009302 <netif_issue_reports+0x3a>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80092f2:	071b      	lsls	r3, r3, #28
 80092f4:	d505      	bpl.n	8009302 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 80092f6:	1d21      	adds	r1, r4, #4
 80092f8:	4620      	mov	r0, r4
}
 80092fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      etharp_gratuitous(netif);
 80092fe:	f7fe bc33 	b.w	8007b68 <etharp_request>
}
 8009302:	bd38      	pop	{r3, r4, r5, pc}
 8009304:	080210e2 	.word	0x080210e2
 8009308:	08021144 	.word	0x08021144
 800930c:	0801f8bf 	.word	0x0801f8bf

08009310 <netif_do_set_ipaddr>:
{
 8009310:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009312:	4605      	mov	r5, r0
 8009314:	4616      	mov	r6, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8009316:	460c      	mov	r4, r1
 8009318:	b931      	cbnz	r1, 8009328 <netif_do_set_ipaddr+0x18>
 800931a:	4b10      	ldr	r3, [pc, #64]	; (800935c <netif_do_set_ipaddr+0x4c>)
 800931c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8009320:	490f      	ldr	r1, [pc, #60]	; (8009360 <netif_do_set_ipaddr+0x50>)
 8009322:	4810      	ldr	r0, [pc, #64]	; (8009364 <netif_do_set_ipaddr+0x54>)
 8009324:	f004 fc08 	bl	800db38 <iprintf>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009328:	686b      	ldr	r3, [r5, #4]
 800932a:	6822      	ldr	r2, [r4, #0]
 800932c:	429a      	cmp	r2, r3
 800932e:	d101      	bne.n	8009334 <netif_do_set_ipaddr+0x24>
  return 0; /* address unchanged */
 8009330:	2000      	movs	r0, #0
 8009332:	e010      	b.n	8009356 <netif_do_set_ipaddr+0x46>
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8009334:	6033      	str	r3, [r6, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009336:	a901      	add	r1, sp, #4
 8009338:	4630      	mov	r0, r6
    *ip_2_ip4(&new_addr) = *ipaddr;
 800933a:	9201      	str	r2, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800933c:	f001 fcd6 	bl	800acec <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8009340:	a901      	add	r1, sp, #4
 8009342:	4630      	mov	r0, r6
 8009344:	f004 f9f2 	bl	800d72c <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009348:	6823      	ldr	r3, [r4, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800934a:	4628      	mov	r0, r5
 800934c:	2101      	movs	r1, #1
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800934e:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009350:	f7ff ffba 	bl	80092c8 <netif_issue_reports>
    return 1; /* address changed */
 8009354:	2001      	movs	r0, #1
}
 8009356:	b002      	add	sp, #8
 8009358:	bd70      	pop	{r4, r5, r6, pc}
 800935a:	bf00      	nop
 800935c:	080210e2 	.word	0x080210e2
 8009360:	0801fd1c 	.word	0x0801fd1c
 8009364:	0801f8bf 	.word	0x0801f8bf

08009368 <netif_init>:
}
 8009368:	4770      	bx	lr
	...

0800936c <netif_set_addr>:
{
 800936c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 800936e:	4f14      	ldr	r7, [pc, #80]	; (80093c0 <netif_set_addr+0x54>)
{
 8009370:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY4;
 8009372:	2900      	cmp	r1, #0
 8009374:	bf14      	ite	ne
 8009376:	460d      	movne	r5, r1
 8009378:	463d      	moveq	r5, r7
    netmask = IP4_ADDR_ANY4;
 800937a:	2a00      	cmp	r2, #0
 800937c:	bf14      	ite	ne
 800937e:	4616      	movne	r6, r2
 8009380:	463e      	moveq	r6, r7
    gw = IP4_ADDR_ANY4;
 8009382:	2b00      	cmp	r3, #0
 8009384:	bf18      	it	ne
 8009386:	461f      	movne	r7, r3
  remove = ip4_addr_isany(ipaddr);
 8009388:	682b      	ldr	r3, [r5, #0]
 800938a:	b9b3      	cbnz	r3, 80093ba <netif_set_addr+0x4e>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800938c:	aa01      	add	r2, sp, #4
 800938e:	4629      	mov	r1, r5
 8009390:	f7ff ffbe 	bl	8009310 <netif_do_set_ipaddr>
 8009394:	2301      	movs	r3, #1
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8009396:	6832      	ldr	r2, [r6, #0]
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8009398:	68a1      	ldr	r1, [r4, #8]
 800939a:	428a      	cmp	r2, r1
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800939c:	68e1      	ldr	r1, [r4, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800939e:	bf18      	it	ne
 80093a0:	60a2      	strne	r2, [r4, #8]
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80093a2:	683a      	ldr	r2, [r7, #0]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80093a4:	428a      	cmp	r2, r1
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80093a6:	bf18      	it	ne
 80093a8:	60e2      	strne	r2, [r4, #12]
  if (!remove) {
 80093aa:	b923      	cbnz	r3, 80093b6 <netif_set_addr+0x4a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80093ac:	aa01      	add	r2, sp, #4
 80093ae:	4629      	mov	r1, r5
 80093b0:	4620      	mov	r0, r4
 80093b2:	f7ff ffad 	bl	8009310 <netif_do_set_ipaddr>
}
 80093b6:	b003      	add	sp, #12
 80093b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 80093ba:	2300      	movs	r3, #0
 80093bc:	e7eb      	b.n	8009396 <netif_set_addr+0x2a>
 80093be:	bf00      	nop
 80093c0:	0800f6e0 	.word	0x0800f6e0

080093c4 <netif_add>:
{
 80093c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093c8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80093ca:	4698      	mov	r8, r3
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80093cc:	4604      	mov	r4, r0
 80093ce:	b948      	cbnz	r0, 80093e4 <netif_add+0x20>
 80093d0:	4b3e      	ldr	r3, [pc, #248]	; (80094cc <netif_add+0x108>)
 80093d2:	f240 1227 	movw	r2, #295	; 0x127
 80093d6:	493e      	ldr	r1, [pc, #248]	; (80094d0 <netif_add+0x10c>)
 80093d8:	483e      	ldr	r0, [pc, #248]	; (80094d4 <netif_add+0x110>)
 80093da:	f004 fbad 	bl	800db38 <iprintf>
}
 80093de:	4620      	mov	r0, r4
 80093e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80093e4:	b947      	cbnz	r7, 80093f8 <netif_add+0x34>
 80093e6:	4b39      	ldr	r3, [pc, #228]	; (80094cc <netif_add+0x108>)
 80093e8:	f44f 7294 	mov.w	r2, #296	; 0x128
 80093ec:	493a      	ldr	r1, [pc, #232]	; (80094d8 <netif_add+0x114>)
 80093ee:	463c      	mov	r4, r7
 80093f0:	4838      	ldr	r0, [pc, #224]	; (80094d4 <netif_add+0x110>)
 80093f2:	f004 fba1 	bl	800db38 <iprintf>
 80093f6:	e7f2      	b.n	80093de <netif_add+0x1a>
  netif->output = netif_null_output_ip4;
 80093f8:	4e38      	ldr	r6, [pc, #224]	; (80094dc <netif_add+0x118>)
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80093fa:	2500      	movs	r5, #0
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80093fc:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 80094e8 <netif_add+0x124>
  netif->output = netif_null_output_ip4;
 8009400:	6146      	str	r6, [r0, #20]
  netif->state = state;
 8009402:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009404:	42aa      	cmp	r2, r5
 8009406:	bf08      	it	eq
 8009408:	4662      	moveq	r2, ip
  netif->input = input;
 800940a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  netif_set_addr(netif, ipaddr, netmask, gw);
 800940c:	42a9      	cmp	r1, r5
 800940e:	bf08      	it	eq
 8009410:	4661      	moveq	r1, ip
  netif->state = state;
 8009412:	6206      	str	r6, [r0, #32]
  netif->num = netif_num;
 8009414:	4e32      	ldr	r6, [pc, #200]	; (80094e0 <netif_add+0x11c>)
  netif->input = input;
 8009416:	6103      	str	r3, [r0, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009418:	45a8      	cmp	r8, r5
 800941a:	bf14      	ite	ne
 800941c:	4643      	movne	r3, r8
 800941e:	4663      	moveq	r3, ip
  netif->num = netif_num;
 8009420:	f896 e000 	ldrb.w	lr, [r6]
  ip_addr_set_zero_ip4(&netif->gw);
 8009424:	60c5      	str	r5, [r0, #12]
  netif->mtu = 0;
 8009426:	8505      	strh	r5, [r0, #40]	; 0x28
  netif->flags = 0;
 8009428:	f880 5031 	strb.w	r5, [r0, #49]	; 0x31
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800942c:	6245      	str	r5, [r0, #36]	; 0x24
  netif->link_callback = NULL;
 800942e:	61c5      	str	r5, [r0, #28]
  netif->num = netif_num;
 8009430:	f880 e034 	strb.w	lr, [r0, #52]	; 0x34
  ip_addr_set_zero_ip4(&netif->netmask);
 8009434:	e9c0 5501 	strd	r5, r5, [r0, #4]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009438:	f7ff ff98 	bl	800936c <netif_set_addr>
  if (init(netif) != ERR_OK) {
 800943c:	4620      	mov	r0, r4
 800943e:	47b8      	blx	r7
 8009440:	2800      	cmp	r0, #0
 8009442:	d140      	bne.n	80094c6 <netif_add+0x102>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009444:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80094ec <netif_add+0x128>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009448:	4b20      	ldr	r3, [pc, #128]	; (80094cc <netif_add+0x108>)
 800944a:	46c8      	mov	r8, r9
      if (netif->num == 255) {
 800944c:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
      num_netifs = 0;
 8009450:	2700      	movs	r7, #0
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009452:	f8d9 5000 	ldr.w	r5, [r9]
      if (netif->num == 255) {
 8009456:	2aff      	cmp	r2, #255	; 0xff
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009458:	f8df b094 	ldr.w	fp, [pc, #148]	; 80094f0 <netif_add+0x12c>
 800945c:	f8df a074 	ldr.w	sl, [pc, #116]	; 80094d4 <netif_add+0x110>
        netif->num = 0;
 8009460:	bf04      	itt	eq
 8009462:	2200      	moveq	r2, #0
 8009464:	f884 2034 	strbeq.w	r2, [r4, #52]	; 0x34
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009468:	b92d      	cbnz	r5, 8009476 <netif_add+0xb2>
  if (netif->num == 254) {
 800946a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800946e:	2bfe      	cmp	r3, #254	; 0xfe
 8009470:	d120      	bne.n	80094b4 <netif_add+0xf0>
    netif_num = 0;
 8009472:	462b      	mov	r3, r5
 8009474:	e020      	b.n	80094b8 <netif_add+0xf4>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009476:	42a5      	cmp	r5, r4
 8009478:	d106      	bne.n	8009488 <netif_add+0xc4>
 800947a:	f240 128b 	movw	r2, #395	; 0x18b
 800947e:	4659      	mov	r1, fp
 8009480:	4650      	mov	r0, sl
 8009482:	f004 fb59 	bl	800db38 <iprintf>
 8009486:	4b11      	ldr	r3, [pc, #68]	; (80094cc <netif_add+0x108>)
        num_netifs++;
 8009488:	3701      	adds	r7, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800948a:	2fff      	cmp	r7, #255	; 0xff
 800948c:	dd06      	ble.n	800949c <netif_add+0xd8>
 800948e:	f240 128d 	movw	r2, #397	; 0x18d
 8009492:	4914      	ldr	r1, [pc, #80]	; (80094e4 <netif_add+0x120>)
 8009494:	4650      	mov	r0, sl
 8009496:	f004 fb4f 	bl	800db38 <iprintf>
 800949a:	4b0c      	ldr	r3, [pc, #48]	; (80094cc <netif_add+0x108>)
        if (netif2->num == netif->num) {
 800949c:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 80094a0:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
 80094a4:	428a      	cmp	r2, r1
 80094a6:	d103      	bne.n	80094b0 <netif_add+0xec>
          netif->num++;
 80094a8:	3201      	adds	r2, #1
 80094aa:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    } while (netif2 != NULL);
 80094ae:	e7cd      	b.n	800944c <netif_add+0x88>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80094b0:	682d      	ldr	r5, [r5, #0]
 80094b2:	e7d9      	b.n	8009468 <netif_add+0xa4>
    netif_num = (u8_t)(netif->num + 1);
 80094b4:	3301      	adds	r3, #1
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	7033      	strb	r3, [r6, #0]
  netif->next = netif_list;
 80094ba:	f8d8 3000 	ldr.w	r3, [r8]
 80094be:	6023      	str	r3, [r4, #0]
  netif_list = netif;
 80094c0:	f8c8 4000 	str.w	r4, [r8]
  return netif;
 80094c4:	e78b      	b.n	80093de <netif_add+0x1a>
    return NULL;
 80094c6:	462c      	mov	r4, r5
 80094c8:	e789      	b.n	80093de <netif_add+0x1a>
 80094ca:	bf00      	nop
 80094cc:	080210e2 	.word	0x080210e2
 80094d0:	080211f9 	.word	0x080211f9
 80094d4:	0801f8bf 	.word	0x0801f8bf
 80094d8:	08021212 	.word	0x08021212
 80094dc:	080092c1 	.word	0x080092c1
 80094e0:	240067a8 	.word	0x240067a8
 80094e4:	08021248 	.word	0x08021248
 80094e8:	0800f6e0 	.word	0x0800f6e0
 80094ec:	2400a784 	.word	0x2400a784
 80094f0:	08021234 	.word	0x08021234

080094f4 <netif_set_default>:
  netif_default = netif;
 80094f4:	4b01      	ldr	r3, [pc, #4]	; (80094fc <netif_set_default+0x8>)
 80094f6:	6018      	str	r0, [r3, #0]
}
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop
 80094fc:	2400a788 	.word	0x2400a788

08009500 <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8009500:	b930      	cbnz	r0, 8009510 <netif_set_up+0x10>
 8009502:	4b09      	ldr	r3, [pc, #36]	; (8009528 <netif_set_up+0x28>)
 8009504:	f44f 7254 	mov.w	r2, #848	; 0x350
 8009508:	4908      	ldr	r1, [pc, #32]	; (800952c <netif_set_up+0x2c>)
 800950a:	4809      	ldr	r0, [pc, #36]	; (8009530 <netif_set_up+0x30>)
 800950c:	f004 bb14 	b.w	800db38 <iprintf>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8009510:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
 8009514:	07d1      	lsls	r1, r2, #31
 8009516:	d406      	bmi.n	8009526 <netif_set_up+0x26>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8009518:	f042 0201 	orr.w	r2, r2, #1
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800951c:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_UP);
 800951e:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009522:	f7ff bed1 	b.w	80092c8 <netif_issue_reports>
}
 8009526:	4770      	bx	lr
 8009528:	080210e2 	.word	0x080210e2
 800952c:	08021276 	.word	0x08021276
 8009530:	0801f8bf 	.word	0x0801f8bf

08009534 <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009534:	b930      	cbnz	r0, 8009544 <netif_set_down+0x10>
 8009536:	4b0a      	ldr	r3, [pc, #40]	; (8009560 <netif_set_down+0x2c>)
 8009538:	f240 329b 	movw	r2, #923	; 0x39b
 800953c:	4909      	ldr	r1, [pc, #36]	; (8009564 <netif_set_down+0x30>)
 800953e:	480a      	ldr	r0, [pc, #40]	; (8009568 <netif_set_down+0x34>)
 8009540:	f004 bafa 	b.w	800db38 <iprintf>
  if (netif->flags & NETIF_FLAG_UP) {
 8009544:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
 8009548:	07d1      	lsls	r1, r2, #31
 800954a:	d507      	bpl.n	800955c <netif_set_down+0x28>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 800954c:	f022 0101 	bic.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8009550:	0713      	lsls	r3, r2, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8009552:	f880 1031 	strb.w	r1, [r0, #49]	; 0x31
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8009556:	d501      	bpl.n	800955c <netif_set_down+0x28>
      etharp_cleanup_netif(netif);
 8009558:	f7fe ba48 	b.w	80079ec <etharp_cleanup_netif>
}
 800955c:	4770      	bx	lr
 800955e:	bf00      	nop
 8009560:	080210e2 	.word	0x080210e2
 8009564:	08021292 	.word	0x08021292
 8009568:	0801f8bf 	.word	0x0801f8bf

0800956c <netif_set_link_up>:
{
 800956c:	b510      	push	{r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800956e:	4604      	mov	r4, r0
 8009570:	b940      	cbnz	r0, 8009584 <netif_set_link_up+0x18>
 8009572:	4b0f      	ldr	r3, [pc, #60]	; (80095b0 <netif_set_link_up+0x44>)
 8009574:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8009578:	490e      	ldr	r1, [pc, #56]	; (80095b4 <netif_set_link_up+0x48>)
 800957a:	480f      	ldr	r0, [pc, #60]	; (80095b8 <netif_set_link_up+0x4c>)
}
 800957c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8009580:	f004 bada 	b.w	800db38 <iprintf>
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8009584:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8009588:	075a      	lsls	r2, r3, #29
 800958a:	d40f      	bmi.n	80095ac <netif_set_link_up+0x40>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800958c:	f043 0304 	orr.w	r3, r3, #4
 8009590:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
    dhcp_network_changed(netif);
 8009594:	f7fd fe62 	bl	800725c <dhcp_network_changed>
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009598:	2103      	movs	r1, #3
 800959a:	4620      	mov	r0, r4
 800959c:	f7ff fe94 	bl	80092c8 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 80095a0:	69e3      	ldr	r3, [r4, #28]
 80095a2:	b11b      	cbz	r3, 80095ac <netif_set_link_up+0x40>
 80095a4:	4620      	mov	r0, r4
}
 80095a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 80095aa:	4718      	bx	r3
}
 80095ac:	bd10      	pop	{r4, pc}
 80095ae:	bf00      	nop
 80095b0:	080210e2 	.word	0x080210e2
 80095b4:	080212b0 	.word	0x080212b0
 80095b8:	0801f8bf 	.word	0x0801f8bf

080095bc <netif_set_link_down>:
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80095bc:	b930      	cbnz	r0, 80095cc <netif_set_link_down+0x10>
 80095be:	4b09      	ldr	r3, [pc, #36]	; (80095e4 <netif_set_link_down+0x28>)
 80095c0:	f240 4206 	movw	r2, #1030	; 0x406
 80095c4:	4908      	ldr	r1, [pc, #32]	; (80095e8 <netif_set_link_down+0x2c>)
 80095c6:	4809      	ldr	r0, [pc, #36]	; (80095ec <netif_set_link_down+0x30>)
 80095c8:	f004 bab6 	b.w	800db38 <iprintf>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80095cc:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
 80095d0:	0751      	lsls	r1, r2, #29
 80095d2:	d506      	bpl.n	80095e2 <netif_set_link_down+0x26>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80095d4:	f022 0204 	bic.w	r2, r2, #4
    NETIF_LINK_CALLBACK(netif);
 80095d8:	69c3      	ldr	r3, [r0, #28]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80095da:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 80095de:	b103      	cbz	r3, 80095e2 <netif_set_link_down+0x26>
 80095e0:	4718      	bx	r3
}
 80095e2:	4770      	bx	lr
 80095e4:	080210e2 	.word	0x080210e2
 80095e8:	080212d1 	.word	0x080212d1
 80095ec:	0801f8bf 	.word	0x0801f8bf

080095f0 <netif_set_link_callback>:
  if (netif) {
 80095f0:	b100      	cbz	r0, 80095f4 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 80095f2:	61c1      	str	r1, [r0, #28]
}
 80095f4:	4770      	bx	lr
	...

080095f8 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80095f8:	4603      	mov	r3, r0
 80095fa:	b158      	cbz	r0, 8009614 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 80095fc:	4a06      	ldr	r2, [pc, #24]	; (8009618 <netif_get_by_index+0x20>)
 80095fe:	6810      	ldr	r0, [r2, #0]
 8009600:	b900      	cbnz	r0, 8009604 <netif_get_by_index+0xc>
 8009602:	4770      	bx	lr
      if (idx == netif_get_index(netif)) {
 8009604:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 8009608:	3201      	adds	r2, #1
 800960a:	b2d2      	uxtb	r2, r2
 800960c:	429a      	cmp	r2, r3
 800960e:	d001      	beq.n	8009614 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 8009610:	6800      	ldr	r0, [r0, #0]
 8009612:	e7f5      	b.n	8009600 <netif_get_by_index+0x8>
      }
    }
  }

  return NULL;
}
 8009614:	4770      	bx	lr
 8009616:	bf00      	nop
 8009618:	2400a784 	.word	0x2400a784

0800961c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800961c:	b538      	push	{r3, r4, r5, lr}
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800961e:	b968      	cbnz	r0, 800963c <pbuf_add_header_impl+0x20>
 8009620:	4b14      	ldr	r3, [pc, #80]	; (8009674 <pbuf_add_header_impl+0x58>)
 8009622:	f240 12df 	movw	r2, #479	; 0x1df
 8009626:	4914      	ldr	r1, [pc, #80]	; (8009678 <pbuf_add_header_impl+0x5c>)
 8009628:	4814      	ldr	r0, [pc, #80]	; (800967c <pbuf_add_header_impl+0x60>)
 800962a:	f004 fa85 	bl	800db38 <iprintf>
  }

  increment_magnitude = (u16_t)header_size_increment;
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
    return 1;
 800962e:	2001      	movs	r0, #1
 8009630:	e01f      	b.n	8009672 <pbuf_add_header_impl+0x56>
      return 1;
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8009632:	2a00      	cmp	r2, #0
 8009634:	d0fb      	beq.n	800962e <pbuf_add_header_impl+0x12>
      payload = (u8_t *)p->payload - header_size_increment;
 8009636:	6842      	ldr	r2, [r0, #4]
 8009638:	1a51      	subs	r1, r2, r1
 800963a:	e014      	b.n	8009666 <pbuf_add_header_impl+0x4a>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800963c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8009640:	d2f5      	bcs.n	800962e <pbuf_add_header_impl+0x12>
  if (header_size_increment == 0) {
 8009642:	b1a9      	cbz	r1, 8009670 <pbuf_add_header_impl+0x54>
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8009644:	8903      	ldrh	r3, [r0, #8]
  increment_magnitude = (u16_t)header_size_increment;
 8009646:	b28c      	uxth	r4, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8009648:	fa13 f381 	uxtah	r3, r3, r1
 800964c:	b29b      	uxth	r3, r3
 800964e:	429c      	cmp	r4, r3
 8009650:	d8ed      	bhi.n	800962e <pbuf_add_header_impl+0x12>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8009652:	f990 500c 	ldrsb.w	r5, [r0, #12]
 8009656:	2d00      	cmp	r5, #0
 8009658:	daeb      	bge.n	8009632 <pbuf_add_header_impl+0x16>
    payload = (u8_t *)p->payload - header_size_increment;
 800965a:	6842      	ldr	r2, [r0, #4]
 800965c:	1a51      	subs	r1, r2, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800965e:	f100 0210 	add.w	r2, r0, #16
 8009662:	4291      	cmp	r1, r2
 8009664:	d3e3      	bcc.n	800962e <pbuf_add_header_impl+0x12>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
  p->len = (u16_t)(p->len + increment_magnitude);
 8009666:	8942      	ldrh	r2, [r0, #10]
  p->payload = payload;
 8009668:	6041      	str	r1, [r0, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800966a:	4414      	add	r4, r2
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800966c:	8103      	strh	r3, [r0, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 800966e:	8144      	strh	r4, [r0, #10]


  return 0;
 8009670:	2000      	movs	r0, #0
}
 8009672:	bd38      	pop	{r3, r4, r5, pc}
 8009674:	080212f4 	.word	0x080212f4
 8009678:	080213f7 	.word	0x080213f7
 800967c:	0801f8bf 	.word	0x0801f8bf

08009680 <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8009680:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8009684:	2b01      	cmp	r3, #1
{
 8009686:	b570      	push	{r4, r5, r6, lr}
 8009688:	4606      	mov	r6, r0
 800968a:	460d      	mov	r5, r1
 800968c:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800968e:	d006      	beq.n	800969e <pbuf_alloc_reference+0x1e>
 8009690:	4b0a      	ldr	r3, [pc, #40]	; (80096bc <pbuf_alloc_reference+0x3c>)
 8009692:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8009696:	490a      	ldr	r1, [pc, #40]	; (80096c0 <pbuf_alloc_reference+0x40>)
 8009698:	480a      	ldr	r0, [pc, #40]	; (80096c4 <pbuf_alloc_reference+0x44>)
 800969a:	f004 fa4d 	bl	800db38 <iprintf>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800969e:	200b      	movs	r0, #11
 80096a0:	f7ff fdc4 	bl	800922c <memp_malloc>
  if (p == NULL) {
 80096a4:	b140      	cbz	r0, 80096b8 <pbuf_alloc_reference+0x38>
  p->next = NULL;
 80096a6:	2300      	movs	r3, #0
  p->tot_len = tot_len;
 80096a8:	8105      	strh	r5, [r0, #8]
  p->len = len;
 80096aa:	8145      	strh	r5, [r0, #10]
  p->flags = flags;
 80096ac:	7343      	strb	r3, [r0, #13]
  p->type_internal = (u8_t)type;
 80096ae:	7304      	strb	r4, [r0, #12]
  p->payload = payload;
 80096b0:	e9c0 3600 	strd	r3, r6, [r0]
  p->ref = 1;
 80096b4:	2301      	movs	r3, #1
 80096b6:	81c3      	strh	r3, [r0, #14]
}
 80096b8:	bd70      	pop	{r4, r5, r6, pc}
 80096ba:	bf00      	nop
 80096bc:	080212f4 	.word	0x080212f4
 80096c0:	08021355 	.word	0x08021355
 80096c4:	0801f8bf 	.word	0x0801f8bf

080096c8 <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80096c8:	3003      	adds	r0, #3
 80096ca:	f020 0003 	bic.w	r0, r0, #3
{
 80096ce:	b570      	push	{r4, r5, r6, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80096d0:	180e      	adds	r6, r1, r0
 80096d2:	f8bd 5014 	ldrh.w	r5, [sp, #20]
{
 80096d6:	9c04      	ldr	r4, [sp, #16]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80096d8:	42ae      	cmp	r6, r5
 80096da:	d80d      	bhi.n	80096f8 <pbuf_alloced_custom+0x30>
  if (payload_mem != NULL) {
 80096dc:	b104      	cbz	r4, 80096e0 <pbuf_alloced_custom+0x18>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80096de:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80096e0:	4618      	mov	r0, r3
  p->next = NULL;
 80096e2:	2300      	movs	r3, #0
  p->payload = payload;
 80096e4:	e9c0 3400 	strd	r3, r4, [r0]
  p->flags = flags;
 80096e8:	2302      	movs	r3, #2
  p->tot_len = tot_len;
 80096ea:	8101      	strh	r1, [r0, #8]
  p->len = len;
 80096ec:	8141      	strh	r1, [r0, #10]
  p->flags = flags;
 80096ee:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 80096f0:	2301      	movs	r3, #1
  p->type_internal = (u8_t)type;
 80096f2:	7302      	strb	r2, [r0, #12]
  p->ref = 1;
 80096f4:	81c3      	strh	r3, [r0, #14]
}
 80096f6:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
 80096f8:	2000      	movs	r0, #0
 80096fa:	e7fc      	b.n	80096f6 <pbuf_alloced_custom+0x2e>

080096fc <pbuf_add_header>:
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80096fc:	2200      	movs	r2, #0
 80096fe:	f7ff bf8d 	b.w	800961c <pbuf_add_header_impl>
	...

08009704 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8009704:	b510      	push	{r4, lr}
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009706:	b990      	cbnz	r0, 800972e <pbuf_remove_header+0x2a>
 8009708:	4b10      	ldr	r3, [pc, #64]	; (800974c <pbuf_remove_header+0x48>)
 800970a:	f240 224b 	movw	r2, #587	; 0x24b
 800970e:	4910      	ldr	r1, [pc, #64]	; (8009750 <pbuf_remove_header+0x4c>)
    return 0;
  }

  increment_magnitude = (u16_t)header_size_decrement;
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8009710:	4810      	ldr	r0, [pc, #64]	; (8009754 <pbuf_remove_header+0x50>)
 8009712:	f004 fa11 	bl	800db38 <iprintf>
    return 1;
 8009716:	2001      	movs	r0, #1
 8009718:	e008      	b.n	800972c <pbuf_remove_header+0x28>
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800971a:	1a9b      	subs	r3, r3, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800971c:	6844      	ldr	r4, [r0, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 800971e:	8143      	strh	r3, [r0, #10]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009720:	4421      	add	r1, r4
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8009722:	8903      	ldrh	r3, [r0, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009724:	6041      	str	r1, [r0, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8009726:	1a9b      	subs	r3, r3, r2
 8009728:	8103      	strh	r3, [r0, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800972a:	2000      	movs	r0, #0
}
 800972c:	bd10      	pop	{r4, pc}
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800972e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8009732:	d2f0      	bcs.n	8009716 <pbuf_remove_header+0x12>
  if (header_size_decrement == 0) {
 8009734:	2900      	cmp	r1, #0
 8009736:	d0f8      	beq.n	800972a <pbuf_remove_header+0x26>
  increment_magnitude = (u16_t)header_size_decrement;
 8009738:	b28a      	uxth	r2, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800973a:	8943      	ldrh	r3, [r0, #10]
 800973c:	4293      	cmp	r3, r2
 800973e:	d2ec      	bcs.n	800971a <pbuf_remove_header+0x16>
 8009740:	4b02      	ldr	r3, [pc, #8]	; (800974c <pbuf_remove_header+0x48>)
 8009742:	f240 2255 	movw	r2, #597	; 0x255
 8009746:	4904      	ldr	r1, [pc, #16]	; (8009758 <pbuf_remove_header+0x54>)
 8009748:	e7e2      	b.n	8009710 <pbuf_remove_header+0xc>
 800974a:	bf00      	nop
 800974c:	080212f4 	.word	0x080212f4
 8009750:	080213f7 	.word	0x080213f7
 8009754:	0801f8bf 	.word	0x0801f8bf
 8009758:	08021367 	.word	0x08021367

0800975c <pbuf_header_force>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  if (header_size_increment < 0) {
 800975c:	1e0b      	subs	r3, r1, #0
 800975e:	da02      	bge.n	8009766 <pbuf_header_force+0xa>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8009760:	4259      	negs	r1, r3
 8009762:	f7ff bfcf 	b.w	8009704 <pbuf_remove_header>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8009766:	2201      	movs	r2, #1
 8009768:	f7ff bf58 	b.w	800961c <pbuf_add_header_impl>

0800976c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800976c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8009770:	4604      	mov	r4, r0
 8009772:	b950      	cbnz	r0, 800978a <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8009774:	4625      	mov	r5, r4
    LWIP_ASSERT("p != NULL", p != NULL);
 8009776:	4b2b      	ldr	r3, [pc, #172]	; (8009824 <pbuf_free+0xb8>)
 8009778:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800977c:	492a      	ldr	r1, [pc, #168]	; (8009828 <pbuf_free+0xbc>)
 800977e:	482b      	ldr	r0, [pc, #172]	; (800982c <pbuf_free+0xc0>)
 8009780:	f004 f9da 	bl	800db38 <iprintf>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8009784:	4628      	mov	r0, r5
 8009786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  count = 0;
 800978a:	2500      	movs	r5, #0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800978c:	4f25      	ldr	r7, [pc, #148]	; (8009824 <pbuf_free+0xb8>)
 800978e:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8009838 <pbuf_free+0xcc>
 8009792:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800982c <pbuf_free+0xc0>
    SYS_ARCH_PROTECT(old_level);
 8009796:	f004 f939 	bl	800da0c <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800979a:	7ba3      	ldrb	r3, [r4, #14]
    SYS_ARCH_PROTECT(old_level);
 800979c:	4681      	mov	r9, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800979e:	b933      	cbnz	r3, 80097ae <pbuf_free+0x42>
 80097a0:	463b      	mov	r3, r7
 80097a2:	f240 22f1 	movw	r2, #753	; 0x2f1
 80097a6:	4651      	mov	r1, sl
 80097a8:	4640      	mov	r0, r8
 80097aa:	f004 f9c5 	bl	800db38 <iprintf>
    ref = --(p->ref);
 80097ae:	7ba6      	ldrb	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 80097b0:	4648      	mov	r0, r9
    ref = --(p->ref);
 80097b2:	3e01      	subs	r6, #1
 80097b4:	b2f6      	uxtb	r6, r6
 80097b6:	73a6      	strb	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 80097b8:	f004 f934 	bl	800da24 <sys_arch_unprotect>
    if (ref == 0) {
 80097bc:	2e00      	cmp	r6, #0
 80097be:	d1e1      	bne.n	8009784 <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80097c0:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 80097c2:	6826      	ldr	r6, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80097c4:	079b      	lsls	r3, r3, #30
 80097c6:	d511      	bpl.n	80097ec <pbuf_free+0x80>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80097c8:	6923      	ldr	r3, [r4, #16]
 80097ca:	b933      	cbnz	r3, 80097da <pbuf_free+0x6e>
 80097cc:	463b      	mov	r3, r7
 80097ce:	f240 22ff 	movw	r2, #767	; 0x2ff
 80097d2:	4917      	ldr	r1, [pc, #92]	; (8009830 <pbuf_free+0xc4>)
 80097d4:	4640      	mov	r0, r8
 80097d6:	f004 f9af 	bl	800db38 <iprintf>
        pc->custom_free_function(p);
 80097da:	6923      	ldr	r3, [r4, #16]
 80097dc:	4620      	mov	r0, r4
 80097de:	4798      	blx	r3
      count++;
 80097e0:	3501      	adds	r5, #1
 80097e2:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 80097e4:	2e00      	cmp	r6, #0
 80097e6:	d0cd      	beq.n	8009784 <pbuf_free+0x18>
 80097e8:	4634      	mov	r4, r6
 80097ea:	e7d4      	b.n	8009796 <pbuf_free+0x2a>
      alloc_src = pbuf_get_allocsrc(p);
 80097ec:	7b23      	ldrb	r3, [r4, #12]
 80097ee:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80097f2:	2b02      	cmp	r3, #2
 80097f4:	d104      	bne.n	8009800 <pbuf_free+0x94>
          memp_free(MEMP_PBUF_POOL, p);
 80097f6:	4621      	mov	r1, r4
 80097f8:	200c      	movs	r0, #12
          memp_free(MEMP_PBUF, p);
 80097fa:	f7ff fd47 	bl	800928c <memp_free>
 80097fe:	e7ef      	b.n	80097e0 <pbuf_free+0x74>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8009800:	2b01      	cmp	r3, #1
 8009802:	d102      	bne.n	800980a <pbuf_free+0x9e>
          memp_free(MEMP_PBUF, p);
 8009804:	4621      	mov	r1, r4
 8009806:	200b      	movs	r0, #11
 8009808:	e7f7      	b.n	80097fa <pbuf_free+0x8e>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800980a:	b91b      	cbnz	r3, 8009814 <pbuf_free+0xa8>
          mem_free(p);
 800980c:	4620      	mov	r0, r4
 800980e:	f7ff fa6b 	bl	8008ce8 <mem_free>
 8009812:	e7e5      	b.n	80097e0 <pbuf_free+0x74>
          LWIP_ASSERT("invalid pbuf type", 0);
 8009814:	463b      	mov	r3, r7
 8009816:	f240 320f 	movw	r2, #783	; 0x30f
 800981a:	4906      	ldr	r1, [pc, #24]	; (8009834 <pbuf_free+0xc8>)
 800981c:	4640      	mov	r0, r8
 800981e:	f004 f98b 	bl	800db38 <iprintf>
 8009822:	e7dd      	b.n	80097e0 <pbuf_free+0x74>
 8009824:	080212f4 	.word	0x080212f4
 8009828:	080213f7 	.word	0x080213f7
 800982c:	0801f8bf 	.word	0x0801f8bf
 8009830:	0802139b 	.word	0x0802139b
 8009834:	080213bc 	.word	0x080213bc
 8009838:	08021385 	.word	0x08021385

0800983c <pbuf_alloc>:
  switch (type) {
 800983c:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
{
 8009840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009844:	4606      	mov	r6, r0
 8009846:	460f      	mov	r7, r1
  u16_t offset = (u16_t)layer;
 8009848:	b284      	uxth	r4, r0
  switch (type) {
 800984a:	d014      	beq.n	8009876 <pbuf_alloc+0x3a>
 800984c:	d808      	bhi.n	8009860 <pbuf_alloc+0x24>
 800984e:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8009852:	2b01      	cmp	r3, #1
 8009854:	d107      	bne.n	8009866 <pbuf_alloc+0x2a>
      p = pbuf_alloc_reference(NULL, length, type);
 8009856:	2000      	movs	r0, #0
}
 8009858:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 800985c:	f7ff bf10 	b.w	8009680 <pbuf_alloc_reference>
  switch (type) {
 8009860:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 8009864:	d03a      	beq.n	80098dc <pbuf_alloc+0xa0>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8009866:	4b2d      	ldr	r3, [pc, #180]	; (800991c <pbuf_alloc+0xe0>)
 8009868:	f240 1227 	movw	r2, #295	; 0x127
 800986c:	492c      	ldr	r1, [pc, #176]	; (8009920 <pbuf_alloc+0xe4>)
 800986e:	482d      	ldr	r0, [pc, #180]	; (8009924 <pbuf_alloc+0xe8>)
 8009870:	f004 f962 	bl	800db38 <iprintf>
 8009874:	e00b      	b.n	800988e <pbuf_alloc+0x52>
  switch (type) {
 8009876:	2600      	movs	r6, #0
  p->type_internal = (u8_t)type;
 8009878:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800992c <pbuf_alloc+0xf0>
  switch (type) {
 800987c:	4635      	mov	r5, r6
  p->next = NULL;
 800987e:	46b0      	mov	r8, r6
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8009880:	200c      	movs	r0, #12
 8009882:	46b2      	mov	sl, r6
 8009884:	f7ff fcd2 	bl	800922c <memp_malloc>
        if (q == NULL) {
 8009888:	4606      	mov	r6, r0
 800988a:	b930      	cbnz	r0, 800989a <pbuf_alloc+0x5e>
          if (p) {
 800988c:	b90d      	cbnz	r5, 8009892 <pbuf_alloc+0x56>
      return NULL;
 800988e:	2500      	movs	r5, #0
 8009890:	e01f      	b.n	80098d2 <pbuf_alloc+0x96>
            pbuf_free(p);
 8009892:	4628      	mov	r0, r5
 8009894:	f7ff ff6a 	bl	800976c <pbuf_free>
 8009898:	e7f9      	b.n	800988e <pbuf_alloc+0x52>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800989a:	1ce3      	adds	r3, r4, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800989c:	4404      	add	r4, r0
  p->next = NULL;
 800989e:	f8c0 8000 	str.w	r8, [r0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80098a2:	f023 0303 	bic.w	r3, r3, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80098a6:	3413      	adds	r4, #19
  p->tot_len = tot_len;
 80098a8:	8107      	strh	r7, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80098aa:	f5c3 63bf 	rsb	r3, r3, #1528	; 0x5f8
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80098ae:	f024 0403 	bic.w	r4, r4, #3
  p->type_internal = (u8_t)type;
 80098b2:	f8c0 900c 	str.w	r9, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80098b6:	b29b      	uxth	r3, r3
  p->payload = payload;
 80098b8:	6044      	str	r4, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80098ba:	42bb      	cmp	r3, r7
 80098bc:	bf28      	it	cs
 80098be:	463b      	movcs	r3, r7
  p->len = len;
 80098c0:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 80098c2:	b14d      	cbz	r5, 80098d8 <pbuf_alloc+0x9c>
          last->next = q;
 80098c4:	f8ca 0000 	str.w	r0, [sl]
        rem_len = (u16_t)(rem_len - qlen);
 80098c8:	1afb      	subs	r3, r7, r3
        offset = 0;
 80098ca:	2400      	movs	r4, #0
        rem_len = (u16_t)(rem_len - qlen);
 80098cc:	b29f      	uxth	r7, r3
      } while (rem_len > 0);
 80098ce:	2f00      	cmp	r7, #0
 80098d0:	d1d6      	bne.n	8009880 <pbuf_alloc+0x44>
}
 80098d2:	4628      	mov	r0, r5
 80098d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098d8:	4605      	mov	r5, r0
 80098da:	e7f5      	b.n	80098c8 <pbuf_alloc+0x8c>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80098dc:	3403      	adds	r4, #3
 80098de:	1ccb      	adds	r3, r1, #3
 80098e0:	f024 0403 	bic.w	r4, r4, #3
 80098e4:	f023 0303 	bic.w	r3, r3, #3
 80098e8:	441c      	add	r4, r3
 80098ea:	b2a4      	uxth	r4, r4
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80098ec:	f104 0010 	add.w	r0, r4, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80098f0:	429c      	cmp	r4, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80098f2:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80098f4:	d3cb      	bcc.n	800988e <pbuf_alloc+0x52>
 80098f6:	4283      	cmp	r3, r0
 80098f8:	d8c9      	bhi.n	800988e <pbuf_alloc+0x52>
      p = (struct pbuf *)mem_malloc(alloc_len);
 80098fa:	f7ff fb79 	bl	8008ff0 <mem_malloc>
      if (p == NULL) {
 80098fe:	4605      	mov	r5, r0
 8009900:	2800      	cmp	r0, #0
 8009902:	d0e6      	beq.n	80098d2 <pbuf_alloc+0x96>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8009904:	4406      	add	r6, r0
  p->next = NULL;
 8009906:	2300      	movs	r3, #0
  p->tot_len = tot_len;
 8009908:	8107      	strh	r7, [r0, #8]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800990a:	3613      	adds	r6, #19
  p->next = NULL;
 800990c:	6003      	str	r3, [r0, #0]
  p->type_internal = (u8_t)type;
 800990e:	4b06      	ldr	r3, [pc, #24]	; (8009928 <pbuf_alloc+0xec>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8009910:	f026 0603 	bic.w	r6, r6, #3
  p->len = len;
 8009914:	8147      	strh	r7, [r0, #10]
  p->type_internal = (u8_t)type;
 8009916:	60c3      	str	r3, [r0, #12]
  p->payload = payload;
 8009918:	6046      	str	r6, [r0, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800991a:	e7da      	b.n	80098d2 <pbuf_alloc+0x96>
 800991c:	080212f4 	.word	0x080212f4
 8009920:	080213ce 	.word	0x080213ce
 8009924:	0801f8bf 	.word	0x0801f8bf
 8009928:	00010080 	.word	0x00010080
 800992c:	00010082 	.word	0x00010082

08009930 <pbuf_realloc>:
{
 8009930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009934:	460e      	mov	r6, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8009936:	4604      	mov	r4, r0
 8009938:	b930      	cbnz	r0, 8009948 <pbuf_realloc+0x18>
 800993a:	4b24      	ldr	r3, [pc, #144]	; (80099cc <pbuf_realloc+0x9c>)
 800993c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8009940:	4923      	ldr	r1, [pc, #140]	; (80099d0 <pbuf_realloc+0xa0>)
 8009942:	4824      	ldr	r0, [pc, #144]	; (80099d4 <pbuf_realloc+0xa4>)
 8009944:	f004 f8f8 	bl	800db38 <iprintf>
  if (new_len >= p->tot_len) {
 8009948:	8927      	ldrh	r7, [r4, #8]
 800994a:	42b7      	cmp	r7, r6
 800994c:	d93c      	bls.n	80099c8 <pbuf_realloc+0x98>
 800994e:	4635      	mov	r5, r6
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8009950:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80099cc <pbuf_realloc+0x9c>
 8009954:	f8df a084 	ldr.w	sl, [pc, #132]	; 80099dc <pbuf_realloc+0xac>
 8009958:	f8df 9078 	ldr.w	r9, [pc, #120]	; 80099d4 <pbuf_realloc+0xa4>
  while (rem_len > q->len) {
 800995c:	8962      	ldrh	r2, [r4, #10]
 800995e:	42aa      	cmp	r2, r5
 8009960:	d319      	bcc.n	8009996 <pbuf_realloc+0x66>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8009962:	7b23      	ldrb	r3, [r4, #12]
 8009964:	0719      	lsls	r1, r3, #28
 8009966:	d127      	bne.n	80099b8 <pbuf_realloc+0x88>
 8009968:	42aa      	cmp	r2, r5
 800996a:	d025      	beq.n	80099b8 <pbuf_realloc+0x88>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800996c:	7b63      	ldrb	r3, [r4, #13]
 800996e:	079b      	lsls	r3, r3, #30
 8009970:	d422      	bmi.n	80099b8 <pbuf_realloc+0x88>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8009972:	6861      	ldr	r1, [r4, #4]
 8009974:	4620      	mov	r0, r4
 8009976:	1b09      	subs	r1, r1, r4
 8009978:	4429      	add	r1, r5
 800997a:	b289      	uxth	r1, r1
 800997c:	f7ff fa8a 	bl	8008e94 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8009980:	4604      	mov	r4, r0
 8009982:	b9c8      	cbnz	r0, 80099b8 <pbuf_realloc+0x88>
 8009984:	4b11      	ldr	r3, [pc, #68]	; (80099cc <pbuf_realloc+0x9c>)
 8009986:	f240 12bd 	movw	r2, #445	; 0x1bd
 800998a:	4913      	ldr	r1, [pc, #76]	; (80099d8 <pbuf_realloc+0xa8>)
 800998c:	4811      	ldr	r0, [pc, #68]	; (80099d4 <pbuf_realloc+0xa4>)
 800998e:	f004 f8d3 	bl	800db38 <iprintf>
  q->len = rem_len;
 8009992:	8164      	strh	r4, [r4, #10]
 8009994:	deff      	udf	#255	; 0xff
    rem_len = (u16_t)(rem_len - q->len);
 8009996:	1aad      	subs	r5, r5, r2
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8009998:	1bf3      	subs	r3, r6, r7
 800999a:	8922      	ldrh	r2, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 800999c:	b2ad      	uxth	r5, r5
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800999e:	4413      	add	r3, r2
 80099a0:	8123      	strh	r3, [r4, #8]
    q = q->next;
 80099a2:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80099a4:	2c00      	cmp	r4, #0
 80099a6:	d1d9      	bne.n	800995c <pbuf_realloc+0x2c>
 80099a8:	4643      	mov	r3, r8
 80099aa:	f240 12af 	movw	r2, #431	; 0x1af
 80099ae:	4651      	mov	r1, sl
 80099b0:	4648      	mov	r0, r9
 80099b2:	f004 f8c1 	bl	800db38 <iprintf>
 80099b6:	e7d1      	b.n	800995c <pbuf_realloc+0x2c>
  if (q->next != NULL) {
 80099b8:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 80099ba:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 80099bc:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 80099be:	b108      	cbz	r0, 80099c4 <pbuf_realloc+0x94>
    pbuf_free(q->next);
 80099c0:	f7ff fed4 	bl	800976c <pbuf_free>
  q->next = NULL;
 80099c4:	2300      	movs	r3, #0
 80099c6:	6023      	str	r3, [r4, #0]
}
 80099c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099cc:	080212f4 	.word	0x080212f4
 80099d0:	080213e9 	.word	0x080213e9
 80099d4:	0801f8bf 	.word	0x0801f8bf
 80099d8:	08021419 	.word	0x08021419
 80099dc:	08021401 	.word	0x08021401

080099e0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80099e0:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
  while (p != NULL) {
 80099e2:	2200      	movs	r2, #0
 80099e4:	b290      	uxth	r0, r2
 80099e6:	3201      	adds	r2, #1
 80099e8:	b903      	cbnz	r3, 80099ec <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 80099ea:	4770      	bx	lr
    p = p->next;
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	e7f9      	b.n	80099e4 <pbuf_clen+0x4>

080099f0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80099f0:	b510      	push	{r4, lr}
  /* pbuf given? */
  if (p != NULL) {
 80099f2:	4604      	mov	r4, r0
 80099f4:	b188      	cbz	r0, 8009a1a <pbuf_ref+0x2a>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80099f6:	f004 f809 	bl	800da0c <sys_arch_protect>
 80099fa:	7ba3      	ldrb	r3, [r4, #14]
 80099fc:	3301      	adds	r3, #1
 80099fe:	73a3      	strb	r3, [r4, #14]
 8009a00:	f004 f810 	bl	800da24 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8009a04:	7ba3      	ldrb	r3, [r4, #14]
 8009a06:	b943      	cbnz	r3, 8009a1a <pbuf_ref+0x2a>
 8009a08:	4b04      	ldr	r3, [pc, #16]	; (8009a1c <pbuf_ref+0x2c>)
 8009a0a:	f240 3242 	movw	r2, #834	; 0x342
 8009a0e:	4904      	ldr	r1, [pc, #16]	; (8009a20 <pbuf_ref+0x30>)
 8009a10:	4804      	ldr	r0, [pc, #16]	; (8009a24 <pbuf_ref+0x34>)
  }
}
 8009a12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8009a16:	f004 b88f 	b.w	800db38 <iprintf>
}
 8009a1a:	bd10      	pop	{r4, pc}
 8009a1c:	080212f4 	.word	0x080212f4
 8009a20:	08021435 	.word	0x08021435
 8009a24:	0801f8bf 	.word	0x0801f8bf

08009a28 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009a28:	b570      	push	{r4, r5, r6, lr}
 8009a2a:	460d      	mov	r5, r1
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009a2c:	4604      	mov	r4, r0
 8009a2e:	b100      	cbz	r0, 8009a32 <pbuf_cat+0xa>
 8009a30:	b961      	cbnz	r1, 8009a4c <pbuf_cat+0x24>
 8009a32:	4b15      	ldr	r3, [pc, #84]	; (8009a88 <pbuf_cat+0x60>)
 8009a34:	f240 3259 	movw	r2, #857	; 0x359
 8009a38:	4914      	ldr	r1, [pc, #80]	; (8009a8c <pbuf_cat+0x64>)
 8009a3a:	4815      	ldr	r0, [pc, #84]	; (8009a90 <pbuf_cat+0x68>)
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8009a3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009a40:	f004 b87a 	b.w	800db38 <iprintf>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009a44:	8929      	ldrh	r1, [r5, #8]
 8009a46:	440b      	add	r3, r1
 8009a48:	8123      	strh	r3, [r4, #8]
 8009a4a:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 8009a4c:	6822      	ldr	r2, [r4, #0]
 8009a4e:	8923      	ldrh	r3, [r4, #8]
 8009a50:	2a00      	cmp	r2, #0
 8009a52:	d1f7      	bne.n	8009a44 <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8009a54:	8962      	ldrh	r2, [r4, #10]
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d00f      	beq.n	8009a7a <pbuf_cat+0x52>
 8009a5a:	4b0b      	ldr	r3, [pc, #44]	; (8009a88 <pbuf_cat+0x60>)
 8009a5c:	f240 3262 	movw	r2, #866	; 0x362
 8009a60:	490c      	ldr	r1, [pc, #48]	; (8009a94 <pbuf_cat+0x6c>)
 8009a62:	480b      	ldr	r0, [pc, #44]	; (8009a90 <pbuf_cat+0x68>)
 8009a64:	f004 f868 	bl	800db38 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8009a68:	6823      	ldr	r3, [r4, #0]
 8009a6a:	b133      	cbz	r3, 8009a7a <pbuf_cat+0x52>
 8009a6c:	4b06      	ldr	r3, [pc, #24]	; (8009a88 <pbuf_cat+0x60>)
 8009a6e:	f240 3263 	movw	r2, #867	; 0x363
 8009a72:	4909      	ldr	r1, [pc, #36]	; (8009a98 <pbuf_cat+0x70>)
 8009a74:	4806      	ldr	r0, [pc, #24]	; (8009a90 <pbuf_cat+0x68>)
 8009a76:	f004 f85f 	bl	800db38 <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009a7a:	892a      	ldrh	r2, [r5, #8]
 8009a7c:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 8009a7e:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009a80:	4413      	add	r3, r2
 8009a82:	8123      	strh	r3, [r4, #8]
}
 8009a84:	bd70      	pop	{r4, r5, r6, pc}
 8009a86:	bf00      	nop
 8009a88:	080212f4 	.word	0x080212f4
 8009a8c:	08021447 	.word	0x08021447
 8009a90:	0801f8bf 	.word	0x0801f8bf
 8009a94:	0802147c 	.word	0x0802147c
 8009a98:	080214a9 	.word	0x080214a9

08009a9c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8009a9c:	b510      	push	{r4, lr}
 8009a9e:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 8009aa0:	f7ff ffc2 	bl	8009a28 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8009aa4:	4620      	mov	r0, r4
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8009aa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pbuf_ref(t);
 8009aaa:	f7ff bfa1 	b.w	80099f0 <pbuf_ref>
	...

08009ab0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009ab0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ab4:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8009ab6:	4605      	mov	r5, r0
 8009ab8:	b120      	cbz	r0, 8009ac4 <pbuf_copy+0x14>
 8009aba:	b119      	cbz	r1, 8009ac4 <pbuf_copy+0x14>
 8009abc:	8902      	ldrh	r2, [r0, #8]
 8009abe:	890b      	ldrh	r3, [r1, #8]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d20a      	bcs.n	8009ada <pbuf_copy+0x2a>
 8009ac4:	4b34      	ldr	r3, [pc, #208]	; (8009b98 <pbuf_copy+0xe8>)
 8009ac6:	f240 32c9 	movw	r2, #969	; 0x3c9
 8009aca:	4934      	ldr	r1, [pc, #208]	; (8009b9c <pbuf_copy+0xec>)
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009acc:	4834      	ldr	r0, [pc, #208]	; (8009ba0 <pbuf_copy+0xf0>)
 8009ace:	f004 f833 	bl	800db38 <iprintf>
 8009ad2:	f06f 000f 	mvn.w	r0, #15
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 8009ad6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t offset_to = 0, offset_from = 0, len;
 8009ada:	2600      	movs	r6, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009adc:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8009b98 <pbuf_copy+0xe8>
 8009ae0:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8009bb0 <pbuf_copy+0x100>
  size_t offset_to = 0, offset_from = 0, len;
 8009ae4:	4637      	mov	r7, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009ae6:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8009ba0 <pbuf_copy+0xf0>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8009aea:	f8b5 800a 	ldrh.w	r8, [r5, #10]
 8009aee:	8962      	ldrh	r2, [r4, #10]
 8009af0:	eba8 0807 	sub.w	r8, r8, r7
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009af4:	6868      	ldr	r0, [r5, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8009af6:	1b92      	subs	r2, r2, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009af8:	6861      	ldr	r1, [r4, #4]
 8009afa:	4438      	add	r0, r7
 8009afc:	4590      	cmp	r8, r2
 8009afe:	4431      	add	r1, r6
 8009b00:	bf28      	it	cs
 8009b02:	4690      	movcs	r8, r2
 8009b04:	4642      	mov	r2, r8
    offset_to += len;
 8009b06:	4447      	add	r7, r8
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009b08:	f003 ffe6 	bl	800dad8 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009b0c:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 8009b0e:	4446      	add	r6, r8
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009b10:	429f      	cmp	r7, r3
 8009b12:	d906      	bls.n	8009b22 <pbuf_copy+0x72>
 8009b14:	465b      	mov	r3, fp
 8009b16:	f240 32d9 	movw	r2, #985	; 0x3d9
 8009b1a:	4651      	mov	r1, sl
 8009b1c:	4648      	mov	r0, r9
 8009b1e:	f004 f80b 	bl	800db38 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8009b22:	8963      	ldrh	r3, [r4, #10]
 8009b24:	429e      	cmp	r6, r3
 8009b26:	d906      	bls.n	8009b36 <pbuf_copy+0x86>
 8009b28:	465b      	mov	r3, fp
 8009b2a:	f240 32da 	movw	r2, #986	; 0x3da
 8009b2e:	491d      	ldr	r1, [pc, #116]	; (8009ba4 <pbuf_copy+0xf4>)
 8009b30:	4648      	mov	r0, r9
 8009b32:	f004 f801 	bl	800db38 <iprintf>
    if (offset_from >= p_from->len) {
 8009b36:	8963      	ldrh	r3, [r4, #10]
 8009b38:	429e      	cmp	r6, r3
    if (offset_to == p_to->len) {
 8009b3a:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 8009b3c:	bf24      	itt	cs
 8009b3e:	6824      	ldrcs	r4, [r4, #0]
      offset_from = 0;
 8009b40:	2600      	movcs	r6, #0
    if (offset_to == p_to->len) {
 8009b42:	429f      	cmp	r7, r3
 8009b44:	d108      	bne.n	8009b58 <pbuf_copy+0xa8>
      p_to = p_to->next;
 8009b46:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009b48:	b92d      	cbnz	r5, 8009b56 <pbuf_copy+0xa6>
 8009b4a:	b314      	cbz	r4, 8009b92 <pbuf_copy+0xe2>
 8009b4c:	4b12      	ldr	r3, [pc, #72]	; (8009b98 <pbuf_copy+0xe8>)
 8009b4e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8009b52:	4915      	ldr	r1, [pc, #84]	; (8009ba8 <pbuf_copy+0xf8>)
 8009b54:	e7ba      	b.n	8009acc <pbuf_copy+0x1c>
      offset_to = 0;
 8009b56:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009b58:	b17c      	cbz	r4, 8009b7a <pbuf_copy+0xca>
 8009b5a:	8962      	ldrh	r2, [r4, #10]
 8009b5c:	8923      	ldrh	r3, [r4, #8]
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d10b      	bne.n	8009b7a <pbuf_copy+0xca>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009b62:	6823      	ldr	r3, [r4, #0]
 8009b64:	b14b      	cbz	r3, 8009b7a <pbuf_copy+0xca>
 8009b66:	4b0c      	ldr	r3, [pc, #48]	; (8009b98 <pbuf_copy+0xe8>)
 8009b68:	f240 32e9 	movw	r2, #1001	; 0x3e9
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009b6c:	490f      	ldr	r1, [pc, #60]	; (8009bac <pbuf_copy+0xfc>)
 8009b6e:	480c      	ldr	r0, [pc, #48]	; (8009ba0 <pbuf_copy+0xf0>)
 8009b70:	f003 ffe2 	bl	800db38 <iprintf>
 8009b74:	f06f 0005 	mvn.w	r0, #5
 8009b78:	e7ad      	b.n	8009ad6 <pbuf_copy+0x26>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8009b7a:	896a      	ldrh	r2, [r5, #10]
 8009b7c:	892b      	ldrh	r3, [r5, #8]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d105      	bne.n	8009b8e <pbuf_copy+0xde>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009b82:	682b      	ldr	r3, [r5, #0]
 8009b84:	b11b      	cbz	r3, 8009b8e <pbuf_copy+0xde>
 8009b86:	4b04      	ldr	r3, [pc, #16]	; (8009b98 <pbuf_copy+0xe8>)
 8009b88:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8009b8c:	e7ee      	b.n	8009b6c <pbuf_copy+0xbc>
  } while (p_from);
 8009b8e:	2c00      	cmp	r4, #0
 8009b90:	d1ab      	bne.n	8009aea <pbuf_copy+0x3a>
  return ERR_OK;
 8009b92:	4620      	mov	r0, r4
 8009b94:	e79f      	b.n	8009ad6 <pbuf_copy+0x26>
 8009b96:	bf00      	nop
 8009b98:	080212f4 	.word	0x080212f4
 8009b9c:	080214f0 	.word	0x080214f0
 8009ba0:	0801f8bf 	.word	0x0801f8bf
 8009ba4:	08021537 	.word	0x08021537
 8009ba8:	08021552 	.word	0x08021552
 8009bac:	0802155f 	.word	0x0802155f
 8009bb0:	08021520 	.word	0x08021520

08009bb4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8009bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bb8:	4688      	mov	r8, r1
 8009bba:	4691      	mov	r9, r2
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8009bbc:	4606      	mov	r6, r0
 8009bbe:	b950      	cbnz	r0, 8009bd6 <pbuf_copy_partial+0x22>
 8009bc0:	4637      	mov	r7, r6
 8009bc2:	4b1b      	ldr	r3, [pc, #108]	; (8009c30 <pbuf_copy_partial+0x7c>)
 8009bc4:	f240 420a 	movw	r2, #1034	; 0x40a
 8009bc8:	491a      	ldr	r1, [pc, #104]	; (8009c34 <pbuf_copy_partial+0x80>)
 8009bca:	481b      	ldr	r0, [pc, #108]	; (8009c38 <pbuf_copy_partial+0x84>)
 8009bcc:	f003 ffb4 	bl	800db38 <iprintf>
      len = (u16_t)(len - buf_copy_len);
      offset = 0;
    }
  }
  return copied_total;
}
 8009bd0:	4638      	mov	r0, r7
 8009bd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8009bd6:	bb49      	cbnz	r1, 8009c2c <pbuf_copy_partial+0x78>
 8009bd8:	4b15      	ldr	r3, [pc, #84]	; (8009c30 <pbuf_copy_partial+0x7c>)
 8009bda:	f240 420b 	movw	r2, #1035	; 0x40b
 8009bde:	4917      	ldr	r1, [pc, #92]	; (8009c3c <pbuf_copy_partial+0x88>)
 8009be0:	4647      	mov	r7, r8
 8009be2:	4815      	ldr	r0, [pc, #84]	; (8009c38 <pbuf_copy_partial+0x84>)
 8009be4:	f003 ffa8 	bl	800db38 <iprintf>
 8009be8:	e7f2      	b.n	8009bd0 <pbuf_copy_partial+0x1c>
    if ((offset != 0) && (offset >= p->len)) {
 8009bea:	8975      	ldrh	r5, [r6, #10]
 8009bec:	b153      	cbz	r3, 8009c04 <pbuf_copy_partial+0x50>
 8009bee:	42ab      	cmp	r3, r5
 8009bf0:	d308      	bcc.n	8009c04 <pbuf_copy_partial+0x50>
      offset = (u16_t)(offset - p->len);
 8009bf2:	1b5b      	subs	r3, r3, r5
 8009bf4:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009bf6:	6836      	ldr	r6, [r6, #0]
 8009bf8:	f1b9 0f00 	cmp.w	r9, #0
 8009bfc:	d0e8      	beq.n	8009bd0 <pbuf_copy_partial+0x1c>
 8009bfe:	2e00      	cmp	r6, #0
 8009c00:	d1f3      	bne.n	8009bea <pbuf_copy_partial+0x36>
 8009c02:	e7e5      	b.n	8009bd0 <pbuf_copy_partial+0x1c>
      buf_copy_len = (u16_t)(p->len - offset);
 8009c04:	1aec      	subs	r4, r5, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8009c06:	6871      	ldr	r1, [r6, #4]
 8009c08:	eb08 0007 	add.w	r0, r8, r7
      buf_copy_len = (u16_t)(p->len - offset);
 8009c0c:	b2a4      	uxth	r4, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8009c0e:	4419      	add	r1, r3
 8009c10:	454c      	cmp	r4, r9
 8009c12:	bf28      	it	cs
 8009c14:	464c      	movcs	r4, r9
 8009c16:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8009c18:	4427      	add	r7, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8009c1a:	f003 ff5d 	bl	800dad8 <memcpy>
      len = (u16_t)(len - buf_copy_len);
 8009c1e:	eba9 0204 	sub.w	r2, r9, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8009c22:	b2bf      	uxth	r7, r7
      offset = 0;
 8009c24:	2300      	movs	r3, #0
      len = (u16_t)(len - buf_copy_len);
 8009c26:	fa1f f982 	uxth.w	r9, r2
      offset = 0;
 8009c2a:	e7e4      	b.n	8009bf6 <pbuf_copy_partial+0x42>
  u16_t left = 0;
 8009c2c:	2700      	movs	r7, #0
 8009c2e:	e7e3      	b.n	8009bf8 <pbuf_copy_partial+0x44>
 8009c30:	080212f4 	.word	0x080212f4
 8009c34:	08021589 	.word	0x08021589
 8009c38:	0801f8bf 	.word	0x0801f8bf
 8009c3c:	080215a8 	.word	0x080215a8

08009c40 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8009c40:	b538      	push	{r3, r4, r5, lr}
 8009c42:	4615      	mov	r5, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8009c44:	460a      	mov	r2, r1
 8009c46:	8929      	ldrh	r1, [r5, #8]
 8009c48:	f7ff fdf8 	bl	800983c <pbuf_alloc>
  if (q == NULL) {
 8009c4c:	4604      	mov	r4, r0
 8009c4e:	b150      	cbz	r0, 8009c66 <pbuf_clone+0x26>
    return NULL;
  }
  err = pbuf_copy(q, p);
 8009c50:	4629      	mov	r1, r5
 8009c52:	f7ff ff2d 	bl	8009ab0 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8009c56:	b130      	cbz	r0, 8009c66 <pbuf_clone+0x26>
 8009c58:	4b04      	ldr	r3, [pc, #16]	; (8009c6c <pbuf_clone+0x2c>)
 8009c5a:	f240 5224 	movw	r2, #1316	; 0x524
 8009c5e:	4904      	ldr	r1, [pc, #16]	; (8009c70 <pbuf_clone+0x30>)
 8009c60:	4804      	ldr	r0, [pc, #16]	; (8009c74 <pbuf_clone+0x34>)
 8009c62:	f003 ff69 	bl	800db38 <iprintf>
  return q;
}
 8009c66:	4620      	mov	r0, r4
 8009c68:	bd38      	pop	{r3, r4, r5, pc}
 8009c6a:	bf00      	nop
 8009c6c:	080212f4 	.word	0x080212f4
 8009c70:	080216a8 	.word	0x080216a8
 8009c74:	0801f8bf 	.word	0x0801f8bf

08009c78 <tcp_new_port>:
 */
static u16_t
tcp_new_port(void)
{
  u8_t i;
  u16_t n = 0;
 8009c78:	4a12      	ldr	r2, [pc, #72]	; (8009cc4 <tcp_new_port+0x4c>)
{
 8009c7a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8009c7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c80:	8813      	ldrh	r3, [r2, #0]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8009c82:	f64f 76ff 	movw	r6, #65535	; 0xffff
  tcp_port++;
 8009c86:	3301      	adds	r3, #1
 8009c88:	4d0f      	ldr	r5, [pc, #60]	; (8009cc8 <tcp_new_port+0x50>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8009c8a:	2104      	movs	r1, #4
  tcp_port++;
 8009c8c:	b29b      	uxth	r3, r3
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8009c8e:	42b3      	cmp	r3, r6
 8009c90:	bf08      	it	eq
 8009c92:	f44f 4340 	moveq.w	r3, #49152	; 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009c96:	f855 4b04 	ldr.w	r4, [r5], #4
 8009c9a:	6824      	ldr	r4, [r4, #0]
 8009c9c:	b934      	cbnz	r4, 8009cac <tcp_new_port+0x34>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8009c9e:	3901      	subs	r1, #1
 8009ca0:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8009ca4:	d1f7      	bne.n	8009c96 <tcp_new_port+0x1e>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	8013      	strh	r3, [r2, #0]
 8009caa:	e007      	b.n	8009cbc <tcp_new_port+0x44>
      if (pcb->local_port == tcp_port) {
 8009cac:	8ae7      	ldrh	r7, [r4, #22]
 8009cae:	429f      	cmp	r7, r3
 8009cb0:	d105      	bne.n	8009cbe <tcp_new_port+0x46>
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8009cb2:	3801      	subs	r0, #1
 8009cb4:	b280      	uxth	r0, r0
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	d1e5      	bne.n	8009c86 <tcp_new_port+0xe>
 8009cba:	8013      	strh	r3, [r2, #0]
}
 8009cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009cbe:	68e4      	ldr	r4, [r4, #12]
 8009cc0:	e7ec      	b.n	8009c9c <tcp_new_port+0x24>
 8009cc2:	bf00      	nop
 8009cc4:	24000028 	.word	0x24000028
 8009cc8:	0800f7b4 	.word	0x0800f7b4

08009ccc <tcp_close_shutdown_fin>:
{
 8009ccc:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009cce:	4604      	mov	r4, r0
 8009cd0:	b930      	cbnz	r0, 8009ce0 <tcp_close_shutdown_fin+0x14>
 8009cd2:	4b13      	ldr	r3, [pc, #76]	; (8009d20 <tcp_close_shutdown_fin+0x54>)
 8009cd4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8009cd8:	4912      	ldr	r1, [pc, #72]	; (8009d24 <tcp_close_shutdown_fin+0x58>)
 8009cda:	4813      	ldr	r0, [pc, #76]	; (8009d28 <tcp_close_shutdown_fin+0x5c>)
 8009cdc:	f003 ff2c 	bl	800db38 <iprintf>
  switch (pcb->state) {
 8009ce0:	7d23      	ldrb	r3, [r4, #20]
 8009ce2:	2b04      	cmp	r3, #4
 8009ce4:	d003      	beq.n	8009cee <tcp_close_shutdown_fin+0x22>
 8009ce6:	2b07      	cmp	r3, #7
 8009ce8:	d00c      	beq.n	8009d04 <tcp_close_shutdown_fin+0x38>
 8009cea:	2b03      	cmp	r3, #3
 8009cec:	d108      	bne.n	8009d00 <tcp_close_shutdown_fin+0x34>
      err = tcp_send_fin(pcb);
 8009cee:	4620      	mov	r0, r4
 8009cf0:	f002 fdb6 	bl	800c860 <tcp_send_fin>
      if (err == ERR_OK) {
 8009cf4:	b960      	cbnz	r0, 8009d10 <tcp_close_shutdown_fin+0x44>
        pcb->state = FIN_WAIT_1;
 8009cf6:	2305      	movs	r3, #5
    tcp_output(pcb);
 8009cf8:	4620      	mov	r0, r4
        pcb->state = LAST_ACK;
 8009cfa:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 8009cfc:	f002 ff10 	bl	800cb20 <tcp_output>
  switch (pcb->state) {
 8009d00:	2000      	movs	r0, #0
}
 8009d02:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 8009d04:	4620      	mov	r0, r4
 8009d06:	f002 fdab 	bl	800c860 <tcp_send_fin>
      if (err == ERR_OK) {
 8009d0a:	b908      	cbnz	r0, 8009d10 <tcp_close_shutdown_fin+0x44>
        pcb->state = LAST_ACK;
 8009d0c:	2309      	movs	r3, #9
 8009d0e:	e7f3      	b.n	8009cf8 <tcp_close_shutdown_fin+0x2c>
  } else if (err == ERR_MEM) {
 8009d10:	1c43      	adds	r3, r0, #1
 8009d12:	d1f6      	bne.n	8009d02 <tcp_close_shutdown_fin+0x36>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8009d14:	8b63      	ldrh	r3, [r4, #26]
 8009d16:	f043 0308 	orr.w	r3, r3, #8
 8009d1a:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 8009d1c:	e7f0      	b.n	8009d00 <tcp_close_shutdown_fin+0x34>
 8009d1e:	bf00      	nop
 8009d20:	080216b9 	.word	0x080216b9
 8009d24:	08021719 	.word	0x08021719
 8009d28:	0801f8bf 	.word	0x0801f8bf

08009d2c <tcp_init>:
{
 8009d2c:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8009d2e:	f003 ff1b 	bl	800db68 <rand>
 8009d32:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 8009d36:	4b02      	ldr	r3, [pc, #8]	; (8009d40 <tcp_init+0x14>)
 8009d38:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 8009d3c:	8018      	strh	r0, [r3, #0]
}
 8009d3e:	bd08      	pop	{r3, pc}
 8009d40:	24000028 	.word	0x24000028

08009d44 <tcp_free>:
{
 8009d44:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8009d46:	7d03      	ldrb	r3, [r0, #20]
{
 8009d48:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d105      	bne.n	8009d5a <tcp_free+0x16>
 8009d4e:	4b06      	ldr	r3, [pc, #24]	; (8009d68 <tcp_free+0x24>)
 8009d50:	22d4      	movs	r2, #212	; 0xd4
 8009d52:	4906      	ldr	r1, [pc, #24]	; (8009d6c <tcp_free+0x28>)
 8009d54:	4806      	ldr	r0, [pc, #24]	; (8009d70 <tcp_free+0x2c>)
 8009d56:	f003 feef 	bl	800db38 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 8009d5a:	4621      	mov	r1, r4
 8009d5c:	2001      	movs	r0, #1
}
 8009d5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 8009d62:	f7ff ba93 	b.w	800928c <memp_free>
 8009d66:	bf00      	nop
 8009d68:	080216b9 	.word	0x080216b9
 8009d6c:	08021725 	.word	0x08021725
 8009d70:	0801f8bf 	.word	0x0801f8bf

08009d74 <tcp_bind>:
{
 8009d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 8009d76:	4d23      	ldr	r5, [pc, #140]	; (8009e04 <tcp_bind+0x90>)
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8009d78:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY;
 8009d7a:	2900      	cmp	r1, #0
 8009d7c:	bf18      	it	ne
 8009d7e:	460d      	movne	r5, r1
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8009d80:	b948      	cbnz	r0, 8009d96 <tcp_bind+0x22>
 8009d82:	4b21      	ldr	r3, [pc, #132]	; (8009e08 <tcp_bind+0x94>)
 8009d84:	f240 22a9 	movw	r2, #681	; 0x2a9
 8009d88:	4920      	ldr	r1, [pc, #128]	; (8009e0c <tcp_bind+0x98>)
 8009d8a:	4821      	ldr	r0, [pc, #132]	; (8009e10 <tcp_bind+0x9c>)
 8009d8c:	f003 fed4 	bl	800db38 <iprintf>
 8009d90:	f06f 000f 	mvn.w	r0, #15
}
 8009d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8009d96:	7d03      	ldrb	r3, [r0, #20]
 8009d98:	b14b      	cbz	r3, 8009dae <tcp_bind+0x3a>
 8009d9a:	4b1b      	ldr	r3, [pc, #108]	; (8009e08 <tcp_bind+0x94>)
 8009d9c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8009da0:	491c      	ldr	r1, [pc, #112]	; (8009e14 <tcp_bind+0xa0>)
 8009da2:	481b      	ldr	r0, [pc, #108]	; (8009e10 <tcp_bind+0x9c>)
 8009da4:	f003 fec8 	bl	800db38 <iprintf>
 8009da8:	f06f 0005 	mvn.w	r0, #5
 8009dac:	e7f2      	b.n	8009d94 <tcp_bind+0x20>
  if (port == 0) {
 8009dae:	b932      	cbnz	r2, 8009dbe <tcp_bind+0x4a>
    port = tcp_new_port();
 8009db0:	f7ff ff62 	bl	8009c78 <tcp_new_port>
    if (port == 0) {
 8009db4:	4602      	mov	r2, r0
 8009db6:	b950      	cbnz	r0, 8009dce <tcp_bind+0x5a>
      return ERR_BUF;
 8009db8:	f06f 0001 	mvn.w	r0, #1
 8009dbc:	e7ea      	b.n	8009d94 <tcp_bind+0x20>
 8009dbe:	4816      	ldr	r0, [pc, #88]	; (8009e18 <tcp_bind+0xa4>)
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8009dc0:	f850 1b04 	ldr.w	r1, [r0], #4
 8009dc4:	6809      	ldr	r1, [r1, #0]
 8009dc6:	b971      	cbnz	r1, 8009de6 <tcp_bind+0x72>
    for (i = 0; i < max_pcb_list; i++) {
 8009dc8:	3301      	adds	r3, #1
 8009dca:	2b04      	cmp	r3, #4
 8009dcc:	d1f8      	bne.n	8009dc0 <tcp_bind+0x4c>
  if (!ip_addr_isany(ipaddr)
 8009dce:	682b      	ldr	r3, [r5, #0]
 8009dd0:	b103      	cbz	r3, 8009dd4 <tcp_bind+0x60>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8009dd2:	6023      	str	r3, [r4, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8009dd4:	4b11      	ldr	r3, [pc, #68]	; (8009e1c <tcp_bind+0xa8>)
  pcb->local_port = port;
 8009dd6:	82e2      	strh	r2, [r4, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	601c      	str	r4, [r3, #0]
 8009ddc:	60e2      	str	r2, [r4, #12]
 8009dde:	f003 f975 	bl	800d0cc <tcp_timer_needed>
  return ERR_OK;
 8009de2:	2000      	movs	r0, #0
 8009de4:	e7d6      	b.n	8009d94 <tcp_bind+0x20>
        if (cpcb->local_port == port) {
 8009de6:	8ace      	ldrh	r6, [r1, #22]
 8009de8:	4296      	cmp	r6, r2
 8009dea:	d105      	bne.n	8009df8 <tcp_bind+0x84>
                (ip_addr_isany(&cpcb->local_ip) ||
 8009dec:	680f      	ldr	r7, [r1, #0]
 8009dee:	b12f      	cbz	r7, 8009dfc <tcp_bind+0x88>
                 ip_addr_isany(ipaddr) ||
 8009df0:	682e      	ldr	r6, [r5, #0]
 8009df2:	b11e      	cbz	r6, 8009dfc <tcp_bind+0x88>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8009df4:	42b7      	cmp	r7, r6
 8009df6:	d001      	beq.n	8009dfc <tcp_bind+0x88>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8009df8:	68c9      	ldr	r1, [r1, #12]
 8009dfa:	e7e4      	b.n	8009dc6 <tcp_bind+0x52>
              return ERR_USE;
 8009dfc:	f06f 0007 	mvn.w	r0, #7
 8009e00:	e7c8      	b.n	8009d94 <tcp_bind+0x20>
 8009e02:	bf00      	nop
 8009e04:	0800f6e0 	.word	0x0800f6e0
 8009e08:	080216b9 	.word	0x080216b9
 8009e0c:	08021736 	.word	0x08021736
 8009e10:	0801f8bf 	.word	0x0801f8bf
 8009e14:	0802174c 	.word	0x0802174c
 8009e18:	0800f7b4 	.word	0x0800f7b4
 8009e1c:	2400a79c 	.word	0x2400a79c

08009e20 <tcp_listen_with_backlog_and_err>:
{
 8009e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e22:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8009e24:	4605      	mov	r5, r0
 8009e26:	b968      	cbnz	r0, 8009e44 <tcp_listen_with_backlog_and_err+0x24>
 8009e28:	4b29      	ldr	r3, [pc, #164]	; (8009ed0 <tcp_listen_with_backlog_and_err+0xb0>)
 8009e2a:	f240 3259 	movw	r2, #857	; 0x359
 8009e2e:	4929      	ldr	r1, [pc, #164]	; (8009ed4 <tcp_listen_with_backlog_and_err+0xb4>)
  struct tcp_pcb_listen *lpcb = NULL;
 8009e30:	462c      	mov	r4, r5
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8009e32:	4829      	ldr	r0, [pc, #164]	; (8009ed8 <tcp_listen_with_backlog_and_err+0xb8>)
 8009e34:	f003 fe80 	bl	800db38 <iprintf>
 8009e38:	f06f 030f 	mvn.w	r3, #15
  if (err != NULL) {
 8009e3c:	b106      	cbz	r6, 8009e40 <tcp_listen_with_backlog_and_err+0x20>
    *err = res;
 8009e3e:	7033      	strb	r3, [r6, #0]
}
 8009e40:	4620      	mov	r0, r4
 8009e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8009e44:	7d07      	ldrb	r7, [r0, #20]
 8009e46:	b157      	cbz	r7, 8009e5e <tcp_listen_with_backlog_and_err+0x3e>
 8009e48:	4b21      	ldr	r3, [pc, #132]	; (8009ed0 <tcp_listen_with_backlog_and_err+0xb0>)
 8009e4a:	f240 325a 	movw	r2, #858	; 0x35a
 8009e4e:	4923      	ldr	r1, [pc, #140]	; (8009edc <tcp_listen_with_backlog_and_err+0xbc>)
  struct tcp_pcb_listen *lpcb = NULL;
 8009e50:	2400      	movs	r4, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8009e52:	4821      	ldr	r0, [pc, #132]	; (8009ed8 <tcp_listen_with_backlog_and_err+0xb8>)
 8009e54:	f003 fe70 	bl	800db38 <iprintf>
 8009e58:	f06f 030e 	mvn.w	r3, #14
 8009e5c:	e7ee      	b.n	8009e3c <tcp_listen_with_backlog_and_err+0x1c>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8009e5e:	2002      	movs	r0, #2
 8009e60:	f7ff f9e4 	bl	800922c <memp_malloc>
  if (lpcb == NULL) {
 8009e64:	4604      	mov	r4, r0
 8009e66:	2800      	cmp	r0, #0
 8009e68:	d02f      	beq.n	8009eca <tcp_listen_with_backlog_and_err+0xaa>
  lpcb->callback_arg = pcb->callback_arg;
 8009e6a:	692b      	ldr	r3, [r5, #16]
  lpcb->state = LISTEN;
 8009e6c:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 8009e6e:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 8009e70:	8aeb      	ldrh	r3, [r5, #22]
  lpcb->state = LISTEN;
 8009e72:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 8009e74:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 8009e76:	7d6a      	ldrb	r2, [r5, #21]
 8009e78:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 8009e7a:	7a6a      	ldrb	r2, [r5, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8009e7c:	7207      	strb	r7, [r0, #8]
  lpcb->so_options = pcb->so_options;
 8009e7e:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 8009e80:	7aea      	ldrb	r2, [r5, #11]
 8009e82:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 8009e84:	7aaa      	ldrb	r2, [r5, #10]
 8009e86:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8009e88:	682a      	ldr	r2, [r5, #0]
 8009e8a:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 8009e8c:	b13b      	cbz	r3, 8009e9e <tcp_listen_with_backlog_and_err+0x7e>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8009e8e:	4a14      	ldr	r2, [pc, #80]	; (8009ee0 <tcp_listen_with_backlog_and_err+0xc0>)
 8009e90:	6813      	ldr	r3, [r2, #0]
 8009e92:	42ab      	cmp	r3, r5
 8009e94:	d111      	bne.n	8009eba <tcp_listen_with_backlog_and_err+0x9a>
 8009e96:	68eb      	ldr	r3, [r5, #12]
 8009e98:	6013      	str	r3, [r2, #0]
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	60eb      	str	r3, [r5, #12]
  tcp_free(pcb);
 8009e9e:	4628      	mov	r0, r5
 8009ea0:	f7ff ff50 	bl	8009d44 <tcp_free>
  lpcb->accept = tcp_accept_null;
 8009ea4:	4b0f      	ldr	r3, [pc, #60]	; (8009ee4 <tcp_listen_with_backlog_and_err+0xc4>)
 8009ea6:	61a3      	str	r3, [r4, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8009ea8:	4b0f      	ldr	r3, [pc, #60]	; (8009ee8 <tcp_listen_with_backlog_and_err+0xc8>)
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	601c      	str	r4, [r3, #0]
 8009eae:	60e2      	str	r2, [r4, #12]
 8009eb0:	f003 f90c 	bl	800d0cc <tcp_timer_needed>
  res = ERR_OK;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	e7c1      	b.n	8009e3c <tcp_listen_with_backlog_and_err+0x1c>
 8009eb8:	4613      	mov	r3, r2
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d0ed      	beq.n	8009e9a <tcp_listen_with_backlog_and_err+0x7a>
 8009ebe:	68da      	ldr	r2, [r3, #12]
 8009ec0:	42aa      	cmp	r2, r5
 8009ec2:	d1f9      	bne.n	8009eb8 <tcp_listen_with_backlog_and_err+0x98>
 8009ec4:	68ea      	ldr	r2, [r5, #12]
 8009ec6:	60da      	str	r2, [r3, #12]
 8009ec8:	e7e7      	b.n	8009e9a <tcp_listen_with_backlog_and_err+0x7a>
    res = ERR_MEM;
 8009eca:	f04f 33ff 	mov.w	r3, #4294967295
 8009ece:	e7b5      	b.n	8009e3c <tcp_listen_with_backlog_and_err+0x1c>
 8009ed0:	080216b9 	.word	0x080216b9
 8009ed4:	08021774 	.word	0x08021774
 8009ed8:	0801f8bf 	.word	0x0801f8bf
 8009edc:	080217a1 	.word	0x080217a1
 8009ee0:	2400a79c 	.word	0x2400a79c
 8009ee4:	0800aa9d 	.word	0x0800aa9d
 8009ee8:	2400a798 	.word	0x2400a798

08009eec <tcp_update_rcv_ann_wnd>:
{
 8009eec:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009eee:	4604      	mov	r4, r0
 8009ef0:	b930      	cbnz	r0, 8009f00 <tcp_update_rcv_ann_wnd+0x14>
 8009ef2:	4b15      	ldr	r3, [pc, #84]	; (8009f48 <tcp_update_rcv_ann_wnd+0x5c>)
 8009ef4:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009ef8:	4914      	ldr	r1, [pc, #80]	; (8009f4c <tcp_update_rcv_ann_wnd+0x60>)
 8009efa:	4815      	ldr	r0, [pc, #84]	; (8009f50 <tcp_update_rcv_ann_wnd+0x64>)
 8009efc:	f003 fe1c 	bl	800db38 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009f00:	8d21      	ldrh	r1, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009f02:	f240 56b4 	movw	r6, #1460	; 0x5b4
 8009f06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009f08:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009f0a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009f0c:	1ac8      	subs	r0, r1, r3
 8009f0e:	42b2      	cmp	r2, r6
 8009f10:	4428      	add	r0, r5
 8009f12:	bf94      	ite	ls
 8009f14:	1a82      	subls	r2, r0, r2
 8009f16:	1b82      	subhi	r2, r0, r6
 8009f18:	2a00      	cmp	r2, #0
 8009f1a:	db01      	blt.n	8009f20 <tcp_update_rcv_ann_wnd+0x34>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009f1c:	8561      	strh	r1, [r4, #42]	; 0x2a
}
 8009f1e:	bd70      	pop	{r4, r5, r6, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009f20:	1aea      	subs	r2, r5, r3
 8009f22:	2a00      	cmp	r2, #0
 8009f24:	dd02      	ble.n	8009f2c <tcp_update_rcv_ann_wnd+0x40>
      pcb->rcv_ann_wnd = 0;
 8009f26:	2000      	movs	r0, #0
 8009f28:	8560      	strh	r0, [r4, #42]	; 0x2a
 8009f2a:	e7f8      	b.n	8009f1e <tcp_update_rcv_ann_wnd+0x32>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8009f2c:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009f2e:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8009f32:	d306      	bcc.n	8009f42 <tcp_update_rcv_ann_wnd+0x56>
 8009f34:	4b04      	ldr	r3, [pc, #16]	; (8009f48 <tcp_update_rcv_ann_wnd+0x5c>)
 8009f36:	f240 32b6 	movw	r2, #950	; 0x3b6
 8009f3a:	4906      	ldr	r1, [pc, #24]	; (8009f54 <tcp_update_rcv_ann_wnd+0x68>)
 8009f3c:	4804      	ldr	r0, [pc, #16]	; (8009f50 <tcp_update_rcv_ann_wnd+0x64>)
 8009f3e:	f003 fdfb 	bl	800db38 <iprintf>
    return 0;
 8009f42:	2000      	movs	r0, #0
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009f44:	8565      	strh	r5, [r4, #42]	; 0x2a
 8009f46:	e7ea      	b.n	8009f1e <tcp_update_rcv_ann_wnd+0x32>
 8009f48:	080216b9 	.word	0x080216b9
 8009f4c:	080217d8 	.word	0x080217d8
 8009f50:	0801f8bf 	.word	0x0801f8bf
 8009f54:	080217fc 	.word	0x080217fc

08009f58 <tcp_recved>:
{
 8009f58:	b570      	push	{r4, r5, r6, lr}
 8009f5a:	460c      	mov	r4, r1
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009f5c:	4605      	mov	r5, r0
 8009f5e:	b940      	cbnz	r0, 8009f72 <tcp_recved+0x1a>
 8009f60:	4b18      	ldr	r3, [pc, #96]	; (8009fc4 <tcp_recved+0x6c>)
 8009f62:	f240 32cf 	movw	r2, #975	; 0x3cf
 8009f66:	4918      	ldr	r1, [pc, #96]	; (8009fc8 <tcp_recved+0x70>)
 8009f68:	4818      	ldr	r0, [pc, #96]	; (8009fcc <tcp_recved+0x74>)
}
 8009f6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009f6e:	f003 bde3 	b.w	800db38 <iprintf>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009f72:	7d03      	ldrb	r3, [r0, #20]
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d106      	bne.n	8009f86 <tcp_recved+0x2e>
 8009f78:	4b12      	ldr	r3, [pc, #72]	; (8009fc4 <tcp_recved+0x6c>)
 8009f7a:	f240 32d2 	movw	r2, #978	; 0x3d2
 8009f7e:	4914      	ldr	r1, [pc, #80]	; (8009fd0 <tcp_recved+0x78>)
 8009f80:	4812      	ldr	r0, [pc, #72]	; (8009fcc <tcp_recved+0x74>)
 8009f82:	f003 fdd9 	bl	800db38 <iprintf>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009f86:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009f88:	f640 3368 	movw	r3, #2920	; 0xb68
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009f8c:	1911      	adds	r1, r2, r4
 8009f8e:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009f90:	4299      	cmp	r1, r3
 8009f92:	d813      	bhi.n	8009fbc <tcp_recved+0x64>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009f94:	428a      	cmp	r2, r1
 8009f96:	bf88      	it	hi
 8009f98:	4619      	movhi	r1, r3
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009f9a:	4628      	mov	r0, r5
 8009f9c:	8529      	strh	r1, [r5, #40]	; 0x28
 8009f9e:	f7ff ffa5 	bl	8009eec <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009fa2:	f240 23d9 	movw	r3, #729	; 0x2d9
 8009fa6:	4298      	cmp	r0, r3
 8009fa8:	d90a      	bls.n	8009fc0 <tcp_recved+0x68>
    tcp_ack_now(pcb);
 8009faa:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 8009fac:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 8009fae:	f043 0302 	orr.w	r3, r3, #2
 8009fb2:	836b      	strh	r3, [r5, #26]
}
 8009fb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 8009fb8:	f002 bdb2 	b.w	800cb20 <tcp_output>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	e7ec      	b.n	8009f9a <tcp_recved+0x42>
}
 8009fc0:	bd70      	pop	{r4, r5, r6, pc}
 8009fc2:	bf00      	nop
 8009fc4:	080216b9 	.word	0x080216b9
 8009fc8:	08021816 	.word	0x08021816
 8009fcc:	0801f8bf 	.word	0x0801f8bf
 8009fd0:	0802182e 	.word	0x0802182e

08009fd4 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009fd4:	b510      	push	{r4, lr}
  if (seg != NULL) {
 8009fd6:	4604      	mov	r4, r0
 8009fd8:	b148      	cbz	r0, 8009fee <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 8009fda:	6840      	ldr	r0, [r0, #4]
 8009fdc:	b108      	cbz	r0, 8009fe2 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8009fde:	f7ff fbc5 	bl	800976c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009fe2:	4621      	mov	r1, r4
 8009fe4:	2003      	movs	r0, #3
  }
}
 8009fe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 8009fea:	f7ff b94f 	b.w	800928c <memp_free>
}
 8009fee:	bd10      	pop	{r4, pc}

08009ff0 <tcp_segs_free>:
{
 8009ff0:	b510      	push	{r4, lr}
  while (seg != NULL) {
 8009ff2:	b900      	cbnz	r0, 8009ff6 <tcp_segs_free+0x6>
}
 8009ff4:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 8009ff6:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8009ff8:	f7ff ffec 	bl	8009fd4 <tcp_seg_free>
    seg = next;
 8009ffc:	4620      	mov	r0, r4
 8009ffe:	e7f8      	b.n	8009ff2 <tcp_segs_free+0x2>

0800a000 <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800a000:	b100      	cbz	r0, 800a004 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 800a002:	6101      	str	r1, [r0, #16]
  }
}
 800a004:	4770      	bx	lr
	...

0800a008 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800a008:	b538      	push	{r3, r4, r5, lr}
 800a00a:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a00c:	4604      	mov	r4, r0
 800a00e:	b158      	cbz	r0, 800a028 <tcp_recv+0x20>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800a010:	7d03      	ldrb	r3, [r0, #20]
 800a012:	2b01      	cmp	r3, #1
 800a014:	d106      	bne.n	800a024 <tcp_recv+0x1c>
 800a016:	4b05      	ldr	r3, [pc, #20]	; (800a02c <tcp_recv+0x24>)
 800a018:	f240 72df 	movw	r2, #2015	; 0x7df
 800a01c:	4904      	ldr	r1, [pc, #16]	; (800a030 <tcp_recv+0x28>)
 800a01e:	4805      	ldr	r0, [pc, #20]	; (800a034 <tcp_recv+0x2c>)
 800a020:	f003 fd8a 	bl	800db38 <iprintf>
    pcb->recv = recv;
 800a024:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  }
}
 800a028:	bd38      	pop	{r3, r4, r5, pc}
 800a02a:	bf00      	nop
 800a02c:	080216b9 	.word	0x080216b9
 800a030:	0802186d 	.word	0x0802186d
 800a034:	0801f8bf 	.word	0x0801f8bf

0800a038 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800a038:	b538      	push	{r3, r4, r5, lr}
 800a03a:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a03c:	4604      	mov	r4, r0
 800a03e:	b150      	cbz	r0, 800a056 <tcp_sent+0x1e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800a040:	7d03      	ldrb	r3, [r0, #20]
 800a042:	2b01      	cmp	r3, #1
 800a044:	d106      	bne.n	800a054 <tcp_sent+0x1c>
 800a046:	4b04      	ldr	r3, [pc, #16]	; (800a058 <tcp_sent+0x20>)
 800a048:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800a04c:	4903      	ldr	r1, [pc, #12]	; (800a05c <tcp_sent+0x24>)
 800a04e:	4804      	ldr	r0, [pc, #16]	; (800a060 <tcp_sent+0x28>)
 800a050:	f003 fd72 	bl	800db38 <iprintf>
    pcb->sent = sent;
 800a054:	67e5      	str	r5, [r4, #124]	; 0x7c
  }
}
 800a056:	bd38      	pop	{r3, r4, r5, pc}
 800a058:	080216b9 	.word	0x080216b9
 800a05c:	08021894 	.word	0x08021894
 800a060:	0801f8bf 	.word	0x0801f8bf

0800a064 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800a064:	b538      	push	{r3, r4, r5, lr}
 800a066:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a068:	4604      	mov	r4, r0
 800a06a:	b158      	cbz	r0, 800a084 <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800a06c:	7d03      	ldrb	r3, [r0, #20]
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d106      	bne.n	800a080 <tcp_err+0x1c>
 800a072:	4b05      	ldr	r3, [pc, #20]	; (800a088 <tcp_err+0x24>)
 800a074:	f640 020d 	movw	r2, #2061	; 0x80d
 800a078:	4904      	ldr	r1, [pc, #16]	; (800a08c <tcp_err+0x28>)
 800a07a:	4805      	ldr	r0, [pc, #20]	; (800a090 <tcp_err+0x2c>)
 800a07c:	f003 fd5c 	bl	800db38 <iprintf>
    pcb->errf = err;
 800a080:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  }
}
 800a084:	bd38      	pop	{r3, r4, r5, pc}
 800a086:	bf00      	nop
 800a088:	080216b9 	.word	0x080216b9
 800a08c:	080218bb 	.word	0x080218bb
 800a090:	0801f8bf 	.word	0x0801f8bf

0800a094 <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800a094:	b118      	cbz	r0, 800a09e <tcp_accept+0xa>
 800a096:	7d03      	ldrb	r3, [r0, #20]
 800a098:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 800a09a:	bf08      	it	eq
 800a09c:	6181      	streq	r1, [r0, #24]
  }
}
 800a09e:	4770      	bx	lr

0800a0a0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800a0a0:	b570      	push	{r4, r5, r6, lr}
 800a0a2:	460e      	mov	r6, r1
 800a0a4:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800a0a6:	4604      	mov	r4, r0
 800a0a8:	b940      	cbnz	r0, 800a0bc <tcp_poll+0x1c>
 800a0aa:	4b0b      	ldr	r3, [pc, #44]	; (800a0d8 <tcp_poll+0x38>)
 800a0ac:	f640 023d 	movw	r2, #2109	; 0x83d
 800a0b0:	490a      	ldr	r1, [pc, #40]	; (800a0dc <tcp_poll+0x3c>)
 800a0b2:	480b      	ldr	r0, [pc, #44]	; (800a0e0 <tcp_poll+0x40>)
  pcb->poll = poll;
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
}
 800a0b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800a0b8:	f003 bd3e 	b.w	800db38 <iprintf>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800a0bc:	7d03      	ldrb	r3, [r0, #20]
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d106      	bne.n	800a0d0 <tcp_poll+0x30>
 800a0c2:	4b05      	ldr	r3, [pc, #20]	; (800a0d8 <tcp_poll+0x38>)
 800a0c4:	f640 023e 	movw	r2, #2110	; 0x83e
 800a0c8:	4906      	ldr	r1, [pc, #24]	; (800a0e4 <tcp_poll+0x44>)
 800a0ca:	4805      	ldr	r0, [pc, #20]	; (800a0e0 <tcp_poll+0x40>)
 800a0cc:	f003 fd34 	bl	800db38 <iprintf>
  pcb->poll = poll;
 800a0d0:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->pollinterval = interval;
 800a0d4:	7765      	strb	r5, [r4, #29]
}
 800a0d6:	bd70      	pop	{r4, r5, r6, pc}
 800a0d8:	080216b9 	.word	0x080216b9
 800a0dc:	080218e1 	.word	0x080218e1
 800a0e0:	0801f8bf 	.word	0x0801f8bf
 800a0e4:	080218f7 	.word	0x080218f7

0800a0e8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800a0e8:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800a0ea:	4604      	mov	r4, r0
 800a0ec:	b940      	cbnz	r0, 800a100 <tcp_pcb_purge+0x18>
 800a0ee:	4b11      	ldr	r3, [pc, #68]	; (800a134 <tcp_pcb_purge+0x4c>)
 800a0f0:	f640 0251 	movw	r2, #2129	; 0x851
 800a0f4:	4910      	ldr	r1, [pc, #64]	; (800a138 <tcp_pcb_purge+0x50>)
 800a0f6:	4811      	ldr	r0, [pc, #68]	; (800a13c <tcp_pcb_purge+0x54>)
    pcb->unacked = pcb->unsent = NULL;
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
#endif /* TCP_OVERSIZE */
  }
}
 800a0f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800a0fc:	f003 bd1c 	b.w	800db38 <iprintf>
  if (pcb->state != CLOSED &&
 800a100:	7d03      	ldrb	r3, [r0, #20]
 800a102:	2b01      	cmp	r3, #1
 800a104:	d915      	bls.n	800a132 <tcp_pcb_purge+0x4a>
 800a106:	2b0a      	cmp	r3, #10
 800a108:	d013      	beq.n	800a132 <tcp_pcb_purge+0x4a>
    if (pcb->refused_data != NULL) {
 800a10a:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800a10c:	b118      	cbz	r0, 800a116 <tcp_pcb_purge+0x2e>
      pbuf_free(pcb->refused_data);
 800a10e:	f7ff fb2d 	bl	800976c <pbuf_free>
      pcb->refused_data = NULL;
 800a112:	2300      	movs	r3, #0
 800a114:	6763      	str	r3, [r4, #116]	; 0x74
    pcb->rtime = -1;
 800a116:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 800a11a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    pcb->rtime = -1;
 800a11c:	8623      	strh	r3, [r4, #48]	; 0x30
    tcp_segs_free(pcb->unsent);
 800a11e:	f7ff ff67 	bl	8009ff0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800a122:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800a124:	f7ff ff64 	bl	8009ff0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800a128:	2300      	movs	r3, #0
 800a12a:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 800a12e:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}
 800a132:	bd10      	pop	{r4, pc}
 800a134:	080216b9 	.word	0x080216b9
 800a138:	08021915 	.word	0x08021915
 800a13c:	0801f8bf 	.word	0x0801f8bf

0800a140 <tcp_slowtmr>:
{
 800a140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 800a144:	4eaf      	ldr	r6, [pc, #700]	; (800a404 <tcp_slowtmr+0x2c4>)
{
 800a146:	b087      	sub	sp, #28
 800a148:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 800a410 <tcp_slowtmr+0x2d0>
  ++tcp_ticks;
 800a14c:	6833      	ldr	r3, [r6, #0]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a14e:	4fae      	ldr	r7, [pc, #696]	; (800a408 <tcp_slowtmr+0x2c8>)
  ++tcp_ticks;
 800a150:	3301      	adds	r3, #1
 800a152:	6033      	str	r3, [r6, #0]
  ++tcp_timer_ctr;
 800a154:	4bad      	ldr	r3, [pc, #692]	; (800a40c <tcp_slowtmr+0x2cc>)
 800a156:	781a      	ldrb	r2, [r3, #0]
 800a158:	9304      	str	r3, [sp, #16]
 800a15a:	3201      	adds	r2, #1
 800a15c:	701a      	strb	r2, [r3, #0]
  pcb = tcp_active_pcbs;
 800a15e:	4bac      	ldr	r3, [pc, #688]	; (800a410 <tcp_slowtmr+0x2d0>)
  prev = NULL;
 800a160:	f04f 0900 	mov.w	r9, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a164:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 800a438 <tcp_slowtmr+0x2f8>
  pcb = tcp_active_pcbs;
 800a168:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 800a16a:	b96c      	cbnz	r4, 800a188 <tcp_slowtmr+0x48>
  pcb = tcp_tw_pcbs;
 800a16c:	4fa9      	ldr	r7, [pc, #676]	; (800a414 <tcp_slowtmr+0x2d4>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a16e:	f8df 8298 	ldr.w	r8, [pc, #664]	; 800a408 <tcp_slowtmr+0x2c8>
  pcb = tcp_tw_pcbs;
 800a172:	683d      	ldr	r5, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a174:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 800a43c <tcp_slowtmr+0x2fc>
 800a178:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 800a438 <tcp_slowtmr+0x2f8>
  while (pcb != NULL) {
 800a17c:	2d00      	cmp	r5, #0
 800a17e:	f040 81aa 	bne.w	800a4d6 <tcp_slowtmr+0x396>
}
 800a182:	b007      	add	sp, #28
 800a184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a188:	7d23      	ldrb	r3, [r4, #20]
 800a18a:	b933      	cbnz	r3, 800a19a <tcp_slowtmr+0x5a>
 800a18c:	463b      	mov	r3, r7
 800a18e:	f240 42be 	movw	r2, #1214	; 0x4be
 800a192:	49a1      	ldr	r1, [pc, #644]	; (800a418 <tcp_slowtmr+0x2d8>)
 800a194:	4640      	mov	r0, r8
 800a196:	f003 fccf 	bl	800db38 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a19a:	7d23      	ldrb	r3, [r4, #20]
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d106      	bne.n	800a1ae <tcp_slowtmr+0x6e>
 800a1a0:	463b      	mov	r3, r7
 800a1a2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800a1a6:	499d      	ldr	r1, [pc, #628]	; (800a41c <tcp_slowtmr+0x2dc>)
 800a1a8:	4640      	mov	r0, r8
 800a1aa:	f003 fcc5 	bl	800db38 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a1ae:	7d23      	ldrb	r3, [r4, #20]
 800a1b0:	2b0a      	cmp	r3, #10
 800a1b2:	d106      	bne.n	800a1c2 <tcp_slowtmr+0x82>
 800a1b4:	463b      	mov	r3, r7
 800a1b6:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800a1ba:	4999      	ldr	r1, [pc, #612]	; (800a420 <tcp_slowtmr+0x2e0>)
 800a1bc:	4640      	mov	r0, r8
 800a1be:	f003 fcbb 	bl	800db38 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a1c2:	9b04      	ldr	r3, [sp, #16]
 800a1c4:	7fa2      	ldrb	r2, [r4, #30]
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d103      	bne.n	800a1d4 <tcp_slowtmr+0x94>
      pcb = pcb->next;
 800a1cc:	68e5      	ldr	r5, [r4, #12]
      continue;
 800a1ce:	46a1      	mov	r9, r4
 800a1d0:	462c      	mov	r4, r5
 800a1d2:	e7ca      	b.n	800a16a <tcp_slowtmr+0x2a>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a1d4:	7d22      	ldrb	r2, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 800a1d6:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a1d8:	2a02      	cmp	r2, #2
 800a1da:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800a1de:	d178      	bne.n	800a2d2 <tcp_slowtmr+0x192>
 800a1e0:	2b05      	cmp	r3, #5
 800a1e2:	d978      	bls.n	800a2d6 <tcp_slowtmr+0x196>
      ++pcb_remove;
 800a1e4:	f04f 0b01 	mov.w	fp, #1
    if (pcb->state == FIN_WAIT_2) {
 800a1e8:	7d23      	ldrb	r3, [r4, #20]
 800a1ea:	2b06      	cmp	r3, #6
 800a1ec:	d10b      	bne.n	800a206 <tcp_slowtmr+0xc6>
      if (pcb->flags & TF_RXCLOSED) {
 800a1ee:	8b62      	ldrh	r2, [r4, #26]
 800a1f0:	06d2      	lsls	r2, r2, #27
 800a1f2:	d508      	bpl.n	800a206 <tcp_slowtmr+0xc6>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a1f4:	6832      	ldr	r2, [r6, #0]
 800a1f6:	6a21      	ldr	r1, [r4, #32]
 800a1f8:	1a52      	subs	r2, r2, r1
 800a1fa:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 800a1fc:	bf84      	itt	hi
 800a1fe:	f10b 0b01 	addhi.w	fp, fp, #1
 800a202:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a206:	7a65      	ldrb	r5, [r4, #9]
 800a208:	f015 0508 	ands.w	r5, r5, #8
 800a20c:	d019      	beq.n	800a242 <tcp_slowtmr+0x102>
 800a20e:	2b04      	cmp	r3, #4
 800a210:	d002      	beq.n	800a218 <tcp_slowtmr+0xd8>
        ((pcb->state == ESTABLISHED) ||
 800a212:	2b07      	cmp	r3, #7
 800a214:	f040 8126 	bne.w	800a464 <tcp_slowtmr+0x324>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a218:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 800a21c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a220:	6831      	ldr	r1, [r6, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a222:	f505 2224 	add.w	r2, r5, #671744	; 0xa4000
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a226:	6a23      	ldr	r3, [r4, #32]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a228:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a22c:	1ac9      	subs	r1, r1, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a22e:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a232:	4291      	cmp	r1, r2
 800a234:	f240 8104 	bls.w	800a440 <tcp_slowtmr+0x300>
        ++pcb_remove;
 800a238:	f10b 0b01 	add.w	fp, fp, #1
        ++pcb_reset;
 800a23c:	2501      	movs	r5, #1
        ++pcb_remove;
 800a23e:	fa5f fb8b 	uxtb.w	fp, fp
    if (pcb->state == SYN_RCVD) {
 800a242:	7d23      	ldrb	r3, [r4, #20]
 800a244:	2b03      	cmp	r3, #3
 800a246:	f040 810f 	bne.w	800a468 <tcp_slowtmr+0x328>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a24a:	6833      	ldr	r3, [r6, #0]
 800a24c:	6a22      	ldr	r2, [r4, #32]
 800a24e:	1a9b      	subs	r3, r3, r2
 800a250:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a252:	d803      	bhi.n	800a25c <tcp_slowtmr+0x11c>
    if (pcb_remove) {
 800a254:	f1bb 0f00 	cmp.w	fp, #0
 800a258:	f000 811b 	beq.w	800a492 <tcp_slowtmr+0x352>
      tcp_pcb_purge(pcb);
 800a25c:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 800a25e:	f8d4 b08c 	ldr.w	fp, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 800a262:	f7ff ff41 	bl	800a0e8 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a266:	f8da 3000 	ldr.w	r3, [sl]
      if (prev != NULL) {
 800a26a:	f1b9 0f00 	cmp.w	r9, #0
 800a26e:	f000 8103 	beq.w	800a478 <tcp_slowtmr+0x338>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a272:	42a3      	cmp	r3, r4
 800a274:	d106      	bne.n	800a284 <tcp_slowtmr+0x144>
 800a276:	463b      	mov	r3, r7
 800a278:	f240 526d 	movw	r2, #1389	; 0x56d
 800a27c:	4969      	ldr	r1, [pc, #420]	; (800a424 <tcp_slowtmr+0x2e4>)
 800a27e:	4640      	mov	r0, r8
 800a280:	f003 fc5a 	bl	800db38 <iprintf>
        prev->next = pcb->next;
 800a284:	68e3      	ldr	r3, [r4, #12]
 800a286:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 800a28a:	b15d      	cbz	r5, 800a2a4 <tcp_slowtmr+0x164>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a28c:	8b23      	ldrh	r3, [r4, #24]
 800a28e:	4620      	mov	r0, r4
 800a290:	9302      	str	r3, [sp, #8]
 800a292:	8ae3      	ldrh	r3, [r4, #22]
 800a294:	9301      	str	r3, [sp, #4]
 800a296:	1d23      	adds	r3, r4, #4
 800a298:	9300      	str	r3, [sp, #0]
 800a29a:	4623      	mov	r3, r4
 800a29c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a29e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800a2a0:	f002 fbc6 	bl	800ca30 <tcp_rst>
      err_arg = pcb->callback_arg;
 800a2a4:	6923      	ldr	r3, [r4, #16]
      tcp_free(pcb2);
 800a2a6:	4620      	mov	r0, r4
      pcb = pcb->next;
 800a2a8:	68e5      	ldr	r5, [r4, #12]
      err_arg = pcb->callback_arg;
 800a2aa:	9305      	str	r3, [sp, #20]
      tcp_free(pcb2);
 800a2ac:	f7ff fd4a 	bl	8009d44 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800a2b0:	4c5d      	ldr	r4, [pc, #372]	; (800a428 <tcp_slowtmr+0x2e8>)
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	7022      	strb	r2, [r4, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800a2b6:	f1bb 0f00 	cmp.w	fp, #0
 800a2ba:	d008      	beq.n	800a2ce <tcp_slowtmr+0x18e>
 800a2bc:	9b05      	ldr	r3, [sp, #20]
 800a2be:	f06f 010c 	mvn.w	r1, #12
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 800a2c6:	7823      	ldrb	r3, [r4, #0]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	f47f af48 	bne.w	800a15e <tcp_slowtmr+0x1e>
 800a2ce:	464c      	mov	r4, r9
 800a2d0:	e77d      	b.n	800a1ce <tcp_slowtmr+0x8e>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800a2d2:	2b0b      	cmp	r3, #11
 800a2d4:	e785      	b.n	800a1e2 <tcp_slowtmr+0xa2>
      if (pcb->persist_backoff > 0) {
 800a2d6:	f894 b095 	ldrb.w	fp, [r4, #149]	; 0x95
 800a2da:	f1bb 0f00 	cmp.w	fp, #0
 800a2de:	d045      	beq.n	800a36c <tcp_slowtmr+0x22c>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800a2e0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a2e2:	b133      	cbz	r3, 800a2f2 <tcp_slowtmr+0x1b2>
 800a2e4:	463b      	mov	r3, r7
 800a2e6:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800a2ea:	4950      	ldr	r1, [pc, #320]	; (800a42c <tcp_slowtmr+0x2ec>)
 800a2ec:	4640      	mov	r0, r8
 800a2ee:	f003 fc23 	bl	800db38 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800a2f2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a2f4:	b933      	cbnz	r3, 800a304 <tcp_slowtmr+0x1c4>
 800a2f6:	463b      	mov	r3, r7
 800a2f8:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800a2fc:	494c      	ldr	r1, [pc, #304]	; (800a430 <tcp_slowtmr+0x2f0>)
 800a2fe:	4640      	mov	r0, r8
 800a300:	f003 fc1a 	bl	800db38 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800a304:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800a308:	2b0b      	cmp	r3, #11
 800a30a:	f63f af6b 	bhi.w	800a1e4 <tcp_slowtmr+0xa4>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800a30e:	f894 2095 	ldrb.w	r2, [r4, #149]	; 0x95
 800a312:	4b48      	ldr	r3, [pc, #288]	; (800a434 <tcp_slowtmr+0x2f4>)
 800a314:	4413      	add	r3, r2
 800a316:	7bda      	ldrb	r2, [r3, #15]
          if (pcb->persist_cnt < backoff_cnt) {
 800a318:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d30b      	bcc.n	800a338 <tcp_slowtmr+0x1f8>
            if (pcb->snd_wnd == 0) {
 800a320:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 800a324:	b189      	cbz	r1, 800a34a <tcp_slowtmr+0x20a>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800a326:	4620      	mov	r0, r4
 800a328:	f002 f93a 	bl	800c5a0 <tcp_split_unsent_seg>
 800a32c:	b990      	cbnz	r0, 800a354 <tcp_slowtmr+0x214>
                if (tcp_output(pcb) == ERR_OK) {
 800a32e:	4620      	mov	r0, r4
 800a330:	f002 fbf6 	bl	800cb20 <tcp_output>
 800a334:	b130      	cbz	r0, 800a344 <tcp_slowtmr+0x204>
 800a336:	e00d      	b.n	800a354 <tcp_slowtmr+0x214>
            pcb->persist_cnt++;
 800a338:	3301      	adds	r3, #1
 800a33a:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 800a33c:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 800a33e:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
          if (pcb->persist_cnt >= backoff_cnt) {
 800a342:	d2ed      	bcs.n	800a320 <tcp_slowtmr+0x1e0>
    pcb_remove = 0;
 800a344:	f04f 0b00 	mov.w	fp, #0
 800a348:	e74e      	b.n	800a1e8 <tcp_slowtmr+0xa8>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800a34a:	4620      	mov	r0, r4
 800a34c:	f002 fdf0 	bl	800cf30 <tcp_zero_window_probe>
 800a350:	2800      	cmp	r0, #0
 800a352:	d1f7      	bne.n	800a344 <tcp_slowtmr+0x204>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a354:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
              pcb->persist_cnt = 0;
 800a358:	f04f 0b00 	mov.w	fp, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a35c:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 800a35e:	f884 b094 	strb.w	fp, [r4, #148]	; 0x94
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a362:	d8ef      	bhi.n	800a344 <tcp_slowtmr+0x204>
                pcb->persist_backoff++;
 800a364:	3301      	adds	r3, #1
 800a366:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 800a36a:	e73d      	b.n	800a1e8 <tcp_slowtmr+0xa8>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800a36c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800a36e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800a372:	4293      	cmp	r3, r2
          ++pcb->rtime;
 800a374:	bf9c      	itt	ls
 800a376:	3301      	addls	r3, #1
 800a378:	8623      	strhls	r3, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 800a37a:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800a37e:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 800a382:	429a      	cmp	r2, r3
 800a384:	dbde      	blt.n	800a344 <tcp_slowtmr+0x204>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800a386:	4620      	mov	r0, r4
 800a388:	f002 fa9a 	bl	800c8c0 <tcp_rexmit_rto_prepare>
 800a38c:	b128      	cbz	r0, 800a39a <tcp_slowtmr+0x25a>
 800a38e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a390:	2b00      	cmp	r3, #0
 800a392:	d1d7      	bne.n	800a344 <tcp_slowtmr+0x204>
 800a394:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a396:	2b00      	cmp	r3, #0
 800a398:	d0d4      	beq.n	800a344 <tcp_slowtmr+0x204>
            if (pcb->state != SYN_SENT) {
 800a39a:	7d23      	ldrb	r3, [r4, #20]
 800a39c:	2b02      	cmp	r3, #2
 800a39e:	d015      	beq.n	800a3cc <tcp_slowtmr+0x28c>
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a3a0:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
 800a3a4:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800a3a8:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a3ac:	eb03 03e2 	add.w	r3, r3, r2, asr #3
 800a3b0:	4a20      	ldr	r2, [pc, #128]	; (800a434 <tcp_slowtmr+0x2f4>)
 800a3b2:	290c      	cmp	r1, #12
 800a3b4:	bf94      	ite	ls
 800a3b6:	1852      	addls	r2, r2, r1
 800a3b8:	320c      	addhi	r2, #12
 800a3ba:	7dd2      	ldrb	r2, [r2, #23]
 800a3bc:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800a3be:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	bfa8      	it	ge
 800a3c6:	4613      	movge	r3, r2
 800a3c8:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a3cc:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
            pcb->rtime = 0;
 800a3d0:	2000      	movs	r0, #0
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a3d2:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a3d6:	8e65      	ldrh	r5, [r4, #50]	; 0x32
            pcb->ssthresh = eff_wnd >> 1;
 800a3d8:	429a      	cmp	r2, r3
            pcb->rtime = 0;
 800a3da:	8620      	strh	r0, [r4, #48]	; 0x30
            pcb->bytes_acked = 0;
 800a3dc:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 800a3e0:	4620      	mov	r0, r4
            pcb->ssthresh = eff_wnd >> 1;
 800a3e2:	bf28      	it	cs
 800a3e4:	461a      	movcs	r2, r3
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a3e6:	006b      	lsls	r3, r5, #1
            pcb->cwnd = pcb->mss;
 800a3e8:	f8a4 5048 	strh.w	r5, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a3ec:	b29b      	uxth	r3, r3
            pcb->ssthresh = eff_wnd >> 1;
 800a3ee:	0851      	lsrs	r1, r2, #1
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800a3f0:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 800a3f4:	bf98      	it	ls
 800a3f6:	460b      	movls	r3, r1
 800a3f8:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            tcp_rexmit_rto_commit(pcb);
 800a3fc:	f002 fd3a 	bl	800ce74 <tcp_rexmit_rto_commit>
 800a400:	e6f2      	b.n	800a1e8 <tcp_slowtmr+0xa8>
 800a402:	bf00      	nop
 800a404:	2400a794 	.word	0x2400a794
 800a408:	080216b9 	.word	0x080216b9
 800a40c:	240067a9 	.word	0x240067a9
 800a410:	2400a790 	.word	0x2400a790
 800a414:	2400a7a0 	.word	0x2400a7a0
 800a418:	08021930 	.word	0x08021930
 800a41c:	0802195a 	.word	0x0802195a
 800a420:	08021984 	.word	0x08021984
 800a424:	08021a18 	.word	0x08021a18
 800a428:	2400a78c 	.word	0x2400a78c
 800a42c:	080219b1 	.word	0x080219b1
 800a430:	080219e3 	.word	0x080219e3
 800a434:	0800f7b4 	.word	0x0800f7b4
 800a438:	0801f8bf 	.word	0x0801f8bf
 800a43c:	08021a6d 	.word	0x08021a6d
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800a440:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
 800a444:	4a3f      	ldr	r2, [pc, #252]	; (800a544 <tcp_slowtmr+0x404>)
 800a446:	fb02 5303 	mla	r3, r2, r3, r5
                 / TCP_SLOW_INTERVAL) {
 800a44a:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a44e:	4299      	cmp	r1, r3
 800a450:	d908      	bls.n	800a464 <tcp_slowtmr+0x324>
        err = tcp_keepalive(pcb);
 800a452:	4620      	mov	r0, r4
 800a454:	f002 fd44 	bl	800cee0 <tcp_keepalive>
        if (err == ERR_OK) {
 800a458:	b920      	cbnz	r0, 800a464 <tcp_slowtmr+0x324>
          pcb->keep_cnt_sent++;
 800a45a:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
 800a45e:	3301      	adds	r3, #1
 800a460:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
    pcb_reset = 0;
 800a464:	2500      	movs	r5, #0
 800a466:	e6ec      	b.n	800a242 <tcp_slowtmr+0x102>
    if (pcb->state == LAST_ACK) {
 800a468:	2b09      	cmp	r3, #9
 800a46a:	f47f aef3 	bne.w	800a254 <tcp_slowtmr+0x114>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a46e:	6833      	ldr	r3, [r6, #0]
 800a470:	6a22      	ldr	r2, [r4, #32]
 800a472:	1a9b      	subs	r3, r3, r2
 800a474:	2bf0      	cmp	r3, #240	; 0xf0
 800a476:	e6ec      	b.n	800a252 <tcp_slowtmr+0x112>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800a478:	42a3      	cmp	r3, r4
 800a47a:	d006      	beq.n	800a48a <tcp_slowtmr+0x34a>
 800a47c:	463b      	mov	r3, r7
 800a47e:	f240 5271 	movw	r2, #1393	; 0x571
 800a482:	4931      	ldr	r1, [pc, #196]	; (800a548 <tcp_slowtmr+0x408>)
 800a484:	4640      	mov	r0, r8
 800a486:	f003 fb57 	bl	800db38 <iprintf>
        tcp_active_pcbs = pcb->next;
 800a48a:	68e3      	ldr	r3, [r4, #12]
 800a48c:	f8ca 3000 	str.w	r3, [sl]
 800a490:	e6fb      	b.n	800a28a <tcp_slowtmr+0x14a>
      ++prev->polltmr;
 800a492:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800a494:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 800a496:	3301      	adds	r3, #1
      pcb = pcb->next;
 800a498:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 800a49a:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 800a49c:	429a      	cmp	r2, r3
      ++prev->polltmr;
 800a49e:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800a4a0:	f63f ae95 	bhi.w	800a1ce <tcp_slowtmr+0x8e>
        tcp_active_pcbs_changed = 0;
 800a4a4:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800a554 <tcp_slowtmr+0x414>
        TCP_EVENT_POLL(prev, err);
 800a4a8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 800a4ac:	f884 b01c 	strb.w	fp, [r4, #28]
        tcp_active_pcbs_changed = 0;
 800a4b0:	f889 b000 	strb.w	fp, [r9]
        TCP_EVENT_POLL(prev, err);
 800a4b4:	b91b      	cbnz	r3, 800a4be <tcp_slowtmr+0x37e>
          tcp_output(prev);
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	f002 fb32 	bl	800cb20 <tcp_output>
 800a4bc:	e687      	b.n	800a1ce <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 800a4be:	4621      	mov	r1, r4
 800a4c0:	6920      	ldr	r0, [r4, #16]
 800a4c2:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 800a4c4:	f899 3000 	ldrb.w	r3, [r9]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	f47f ae48 	bne.w	800a15e <tcp_slowtmr+0x1e>
        if (err == ERR_OK) {
 800a4ce:	2800      	cmp	r0, #0
 800a4d0:	f47f ae7d 	bne.w	800a1ce <tcp_slowtmr+0x8e>
 800a4d4:	e7ef      	b.n	800a4b6 <tcp_slowtmr+0x376>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a4d6:	7d2b      	ldrb	r3, [r5, #20]
 800a4d8:	2b0a      	cmp	r3, #10
 800a4da:	d006      	beq.n	800a4ea <tcp_slowtmr+0x3aa>
 800a4dc:	4643      	mov	r3, r8
 800a4de:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800a4e2:	4651      	mov	r1, sl
 800a4e4:	4648      	mov	r0, r9
 800a4e6:	f003 fb27 	bl	800db38 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a4ea:	6833      	ldr	r3, [r6, #0]
 800a4ec:	6a2a      	ldr	r2, [r5, #32]
 800a4ee:	1a9b      	subs	r3, r3, r2
 800a4f0:	2bf0      	cmp	r3, #240	; 0xf0
 800a4f2:	d910      	bls.n	800a516 <tcp_slowtmr+0x3d6>
      tcp_pcb_purge(pcb);
 800a4f4:	4628      	mov	r0, r5
 800a4f6:	f7ff fdf7 	bl	800a0e8 <tcp_pcb_purge>
      if (prev != NULL) {
 800a4fa:	b97c      	cbnz	r4, 800a51c <tcp_slowtmr+0x3dc>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	42ab      	cmp	r3, r5
 800a500:	d006      	beq.n	800a510 <tcp_slowtmr+0x3d0>
 800a502:	4643      	mov	r3, r8
 800a504:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800a508:	4910      	ldr	r1, [pc, #64]	; (800a54c <tcp_slowtmr+0x40c>)
 800a50a:	4648      	mov	r0, r9
 800a50c:	f003 fb14 	bl	800db38 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800a510:	68eb      	ldr	r3, [r5, #12]
 800a512:	603b      	str	r3, [r7, #0]
 800a514:	e00e      	b.n	800a534 <tcp_slowtmr+0x3f4>
      pcb = pcb->next;
 800a516:	462c      	mov	r4, r5
 800a518:	68ed      	ldr	r5, [r5, #12]
 800a51a:	e62f      	b.n	800a17c <tcp_slowtmr+0x3c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	42ab      	cmp	r3, r5
 800a520:	d106      	bne.n	800a530 <tcp_slowtmr+0x3f0>
 800a522:	4643      	mov	r3, r8
 800a524:	f240 52af 	movw	r2, #1455	; 0x5af
 800a528:	4909      	ldr	r1, [pc, #36]	; (800a550 <tcp_slowtmr+0x410>)
 800a52a:	4648      	mov	r0, r9
 800a52c:	f003 fb04 	bl	800db38 <iprintf>
        prev->next = pcb->next;
 800a530:	68eb      	ldr	r3, [r5, #12]
 800a532:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 800a534:	f8d5 b00c 	ldr.w	fp, [r5, #12]
      tcp_free(pcb2);
 800a538:	4628      	mov	r0, r5
 800a53a:	f7ff fc03 	bl	8009d44 <tcp_free>
      pcb = pcb->next;
 800a53e:	465d      	mov	r5, fp
 800a540:	e61c      	b.n	800a17c <tcp_slowtmr+0x3c>
 800a542:	bf00      	nop
 800a544:	000124f8 	.word	0x000124f8
 800a548:	08021a43 	.word	0x08021a43
 800a54c:	08021ac3 	.word	0x08021ac3
 800a550:	08021a9c 	.word	0x08021a9c
 800a554:	2400a78c 	.word	0x2400a78c

0800a558 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800a558:	b538      	push	{r3, r4, r5, lr}
 800a55a:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800a55c:	460c      	mov	r4, r1
 800a55e:	b931      	cbnz	r1, 800a56e <tcp_pcb_remove+0x16>
 800a560:	4b25      	ldr	r3, [pc, #148]	; (800a5f8 <tcp_pcb_remove+0xa0>)
 800a562:	f640 0283 	movw	r2, #2179	; 0x883
 800a566:	4925      	ldr	r1, [pc, #148]	; (800a5fc <tcp_pcb_remove+0xa4>)
 800a568:	4825      	ldr	r0, [pc, #148]	; (800a600 <tcp_pcb_remove+0xa8>)
 800a56a:	f003 fae5 	bl	800db38 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800a56e:	b935      	cbnz	r5, 800a57e <tcp_pcb_remove+0x26>
 800a570:	4b21      	ldr	r3, [pc, #132]	; (800a5f8 <tcp_pcb_remove+0xa0>)
 800a572:	f640 0284 	movw	r2, #2180	; 0x884
 800a576:	4923      	ldr	r1, [pc, #140]	; (800a604 <tcp_pcb_remove+0xac>)
 800a578:	4821      	ldr	r0, [pc, #132]	; (800a600 <tcp_pcb_remove+0xa8>)
 800a57a:	f003 fadd 	bl	800db38 <iprintf>

  TCP_RMV(pcblist, pcb);
 800a57e:	682b      	ldr	r3, [r5, #0]
 800a580:	42a3      	cmp	r3, r4
 800a582:	d116      	bne.n	800a5b2 <tcp_pcb_remove+0x5a>
 800a584:	68e3      	ldr	r3, [r4, #12]
 800a586:	602b      	str	r3, [r5, #0]
 800a588:	2300      	movs	r3, #0

  tcp_pcb_purge(pcb);
 800a58a:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 800a58c:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 800a58e:	f7ff fdab 	bl	800a0e8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800a592:	7d23      	ldrb	r3, [r4, #20]
 800a594:	2b0a      	cmp	r3, #10
 800a596:	d114      	bne.n	800a5c2 <tcp_pcb_remove+0x6a>
    tcp_ack_now(pcb);
    tcp_output(pcb);
  }

  if (pcb->state != LISTEN) {
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a598:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a59a:	bb23      	cbnz	r3, 800a5e6 <tcp_pcb_remove+0x8e>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a59c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a59e:	b1f3      	cbz	r3, 800a5de <tcp_pcb_remove+0x86>
 800a5a0:	4b15      	ldr	r3, [pc, #84]	; (800a5f8 <tcp_pcb_remove+0xa0>)
 800a5a2:	f640 0294 	movw	r2, #2196	; 0x894
 800a5a6:	4918      	ldr	r1, [pc, #96]	; (800a608 <tcp_pcb_remove+0xb0>)
 800a5a8:	4815      	ldr	r0, [pc, #84]	; (800a600 <tcp_pcb_remove+0xa8>)
 800a5aa:	f003 fac5 	bl	800db38 <iprintf>
 800a5ae:	e016      	b.n	800a5de <tcp_pcb_remove+0x86>
 800a5b0:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d0e8      	beq.n	800a588 <tcp_pcb_remove+0x30>
 800a5b6:	68da      	ldr	r2, [r3, #12]
 800a5b8:	42a2      	cmp	r2, r4
 800a5ba:	d1f9      	bne.n	800a5b0 <tcp_pcb_remove+0x58>
 800a5bc:	68e2      	ldr	r2, [r4, #12]
 800a5be:	60da      	str	r2, [r3, #12]
 800a5c0:	e7e2      	b.n	800a588 <tcp_pcb_remove+0x30>
  if ((pcb->state != TIME_WAIT) &&
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d00b      	beq.n	800a5de <tcp_pcb_remove+0x86>
      (pcb->flags & TF_ACK_DELAY)) {
 800a5c6:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 800a5c8:	07da      	lsls	r2, r3, #31
 800a5ca:	d5e5      	bpl.n	800a598 <tcp_pcb_remove+0x40>
    tcp_ack_now(pcb);
 800a5cc:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 800a5d0:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 800a5d2:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800a5d4:	f002 faa4 	bl	800cb20 <tcp_output>
  if (pcb->state != LISTEN) {
 800a5d8:	7d23      	ldrb	r3, [r4, #20]
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	d1dc      	bne.n	800a598 <tcp_pcb_remove+0x40>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a5e2:	82e3      	strh	r3, [r4, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800a5e4:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a5e6:	4b04      	ldr	r3, [pc, #16]	; (800a5f8 <tcp_pcb_remove+0xa0>)
 800a5e8:	f640 0293 	movw	r2, #2195	; 0x893
 800a5ec:	4907      	ldr	r1, [pc, #28]	; (800a60c <tcp_pcb_remove+0xb4>)
 800a5ee:	4804      	ldr	r0, [pc, #16]	; (800a600 <tcp_pcb_remove+0xa8>)
 800a5f0:	f003 faa2 	bl	800db38 <iprintf>
 800a5f4:	e7d2      	b.n	800a59c <tcp_pcb_remove+0x44>
 800a5f6:	bf00      	nop
 800a5f8:	080216b9 	.word	0x080216b9
 800a5fc:	08021ae9 	.word	0x08021ae9
 800a600:	0801f8bf 	.word	0x0801f8bf
 800a604:	08021b05 	.word	0x08021b05
 800a608:	08021b3d 	.word	0x08021b3d
 800a60c:	08021b25 	.word	0x08021b25

0800a610 <tcp_close_shutdown>:
{
 800a610:	b530      	push	{r4, r5, lr}
 800a612:	460d      	mov	r5, r1
 800a614:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800a616:	4604      	mov	r4, r0
 800a618:	b930      	cbnz	r0, 800a628 <tcp_close_shutdown+0x18>
 800a61a:	4b4b      	ldr	r3, [pc, #300]	; (800a748 <tcp_close_shutdown+0x138>)
 800a61c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800a620:	494a      	ldr	r1, [pc, #296]	; (800a74c <tcp_close_shutdown+0x13c>)
 800a622:	484b      	ldr	r0, [pc, #300]	; (800a750 <tcp_close_shutdown+0x140>)
 800a624:	f003 fa88 	bl	800db38 <iprintf>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800a628:	7d23      	ldrb	r3, [r4, #20]
 800a62a:	2d00      	cmp	r5, #0
 800a62c:	d040      	beq.n	800a6b0 <tcp_close_shutdown+0xa0>
 800a62e:	2b04      	cmp	r3, #4
 800a630:	d001      	beq.n	800a636 <tcp_close_shutdown+0x26>
 800a632:	2b07      	cmp	r3, #7
 800a634:	d13c      	bne.n	800a6b0 <tcp_close_shutdown+0xa0>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800a636:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800a638:	b922      	cbnz	r2, 800a644 <tcp_close_shutdown+0x34>
 800a63a:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800a63c:	f640 3268 	movw	r2, #2920	; 0xb68
 800a640:	4291      	cmp	r1, r2
 800a642:	d035      	beq.n	800a6b0 <tcp_close_shutdown+0xa0>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800a644:	8b63      	ldrh	r3, [r4, #26]
 800a646:	06db      	lsls	r3, r3, #27
 800a648:	d406      	bmi.n	800a658 <tcp_close_shutdown+0x48>
 800a64a:	4b3f      	ldr	r3, [pc, #252]	; (800a748 <tcp_close_shutdown+0x138>)
 800a64c:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800a650:	4940      	ldr	r1, [pc, #256]	; (800a754 <tcp_close_shutdown+0x144>)
 800a652:	483f      	ldr	r0, [pc, #252]	; (800a750 <tcp_close_shutdown+0x140>)
 800a654:	f003 fa70 	bl	800db38 <iprintf>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a658:	8b23      	ldrh	r3, [r4, #24]
 800a65a:	4620      	mov	r0, r4
 800a65c:	9302      	str	r3, [sp, #8]
 800a65e:	8ae3      	ldrh	r3, [r4, #22]
 800a660:	9301      	str	r3, [sp, #4]
 800a662:	1d23      	adds	r3, r4, #4
 800a664:	9300      	str	r3, [sp, #0]
 800a666:	4623      	mov	r3, r4
 800a668:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a66a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800a66c:	f002 f9e0 	bl	800ca30 <tcp_rst>
      tcp_pcb_purge(pcb);
 800a670:	4620      	mov	r0, r4
 800a672:	f7ff fd39 	bl	800a0e8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a676:	4a38      	ldr	r2, [pc, #224]	; (800a758 <tcp_close_shutdown+0x148>)
 800a678:	6813      	ldr	r3, [r2, #0]
 800a67a:	42a3      	cmp	r3, r4
 800a67c:	d110      	bne.n	800a6a0 <tcp_close_shutdown+0x90>
 800a67e:	68e3      	ldr	r3, [r4, #12]
 800a680:	6013      	str	r3, [r2, #0]
 800a682:	2300      	movs	r3, #0
 800a684:	2201      	movs	r2, #1
 800a686:	60e3      	str	r3, [r4, #12]
 800a688:	4b34      	ldr	r3, [pc, #208]	; (800a75c <tcp_close_shutdown+0x14c>)
 800a68a:	701a      	strb	r2, [r3, #0]
      if (tcp_input_pcb == pcb) {
 800a68c:	4b34      	ldr	r3, [pc, #208]	; (800a760 <tcp_close_shutdown+0x150>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	42a3      	cmp	r3, r4
 800a692:	d11d      	bne.n	800a6d0 <tcp_close_shutdown+0xc0>
        tcp_trigger_input_pcb_close();
 800a694:	f001 fb5a 	bl	800bd4c <tcp_trigger_input_pcb_close>
}
 800a698:	2000      	movs	r0, #0
 800a69a:	b005      	add	sp, #20
 800a69c:	bd30      	pop	{r4, r5, pc}
 800a69e:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d0ee      	beq.n	800a682 <tcp_close_shutdown+0x72>
 800a6a4:	68da      	ldr	r2, [r3, #12]
 800a6a6:	42a2      	cmp	r2, r4
 800a6a8:	d1f9      	bne.n	800a69e <tcp_close_shutdown+0x8e>
 800a6aa:	68e2      	ldr	r2, [r4, #12]
 800a6ac:	60da      	str	r2, [r3, #12]
 800a6ae:	e7e8      	b.n	800a682 <tcp_close_shutdown+0x72>
  switch (pcb->state) {
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	d01a      	beq.n	800a6ea <tcp_close_shutdown+0xda>
 800a6b4:	2b02      	cmp	r3, #2
 800a6b6:	d039      	beq.n	800a72c <tcp_close_shutdown+0x11c>
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d13f      	bne.n	800a73c <tcp_close_shutdown+0x12c>
      if (pcb->local_port != 0) {
 800a6bc:	8ae3      	ldrh	r3, [r4, #22]
 800a6be:	b13b      	cbz	r3, 800a6d0 <tcp_close_shutdown+0xc0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a6c0:	4a28      	ldr	r2, [pc, #160]	; (800a764 <tcp_close_shutdown+0x154>)
 800a6c2:	6813      	ldr	r3, [r2, #0]
 800a6c4:	42a3      	cmp	r3, r4
 800a6c6:	d108      	bne.n	800a6da <tcp_close_shutdown+0xca>
 800a6c8:	68e3      	ldr	r3, [r4, #12]
 800a6ca:	6013      	str	r3, [r2, #0]
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	f7ff fb37 	bl	8009d44 <tcp_free>
      break;
 800a6d6:	e7df      	b.n	800a698 <tcp_close_shutdown+0x88>
 800a6d8:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d0f6      	beq.n	800a6cc <tcp_close_shutdown+0xbc>
 800a6de:	68da      	ldr	r2, [r3, #12]
 800a6e0:	42a2      	cmp	r2, r4
 800a6e2:	d1f9      	bne.n	800a6d8 <tcp_close_shutdown+0xc8>
 800a6e4:	68e2      	ldr	r2, [r4, #12]
 800a6e6:	60da      	str	r2, [r3, #12]
 800a6e8:	e7f0      	b.n	800a6cc <tcp_close_shutdown+0xbc>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800a6ea:	491f      	ldr	r1, [pc, #124]	; (800a768 <tcp_close_shutdown+0x158>)
      pcb->listener = NULL;
 800a6ec:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800a6ee:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800a6f2:	6812      	ldr	r2, [r2, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a6f4:	b9a2      	cbnz	r2, 800a720 <tcp_close_shutdown+0x110>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	2b04      	cmp	r3, #4
 800a6fa:	d1f8      	bne.n	800a6ee <tcp_close_shutdown+0xde>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800a6fc:	4621      	mov	r1, r4
 800a6fe:	481b      	ldr	r0, [pc, #108]	; (800a76c <tcp_close_shutdown+0x15c>)
 800a700:	f7ff ff2a 	bl	800a558 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800a704:	7d23      	ldrb	r3, [r4, #20]
 800a706:	2b01      	cmp	r3, #1
 800a708:	d105      	bne.n	800a716 <tcp_close_shutdown+0x106>
 800a70a:	4b0f      	ldr	r3, [pc, #60]	; (800a748 <tcp_close_shutdown+0x138>)
 800a70c:	22df      	movs	r2, #223	; 0xdf
 800a70e:	4918      	ldr	r1, [pc, #96]	; (800a770 <tcp_close_shutdown+0x160>)
 800a710:	480f      	ldr	r0, [pc, #60]	; (800a750 <tcp_close_shutdown+0x140>)
 800a712:	f003 fa11 	bl	800db38 <iprintf>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800a716:	4621      	mov	r1, r4
 800a718:	2002      	movs	r0, #2
 800a71a:	f7fe fdb7 	bl	800928c <memp_free>
}
 800a71e:	e7bb      	b.n	800a698 <tcp_close_shutdown+0x88>
    if (pcb->listener == lpcb) {
 800a720:	6f95      	ldr	r5, [r2, #120]	; 0x78
 800a722:	42ac      	cmp	r4, r5
      pcb->listener = NULL;
 800a724:	bf08      	it	eq
 800a726:	6790      	streq	r0, [r2, #120]	; 0x78
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a728:	68d2      	ldr	r2, [r2, #12]
 800a72a:	e7e3      	b.n	800a6f4 <tcp_close_shutdown+0xe4>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a72c:	4621      	mov	r1, r4
 800a72e:	480a      	ldr	r0, [pc, #40]	; (800a758 <tcp_close_shutdown+0x148>)
 800a730:	f7ff ff12 	bl	800a558 <tcp_pcb_remove>
 800a734:	4b09      	ldr	r3, [pc, #36]	; (800a75c <tcp_close_shutdown+0x14c>)
 800a736:	2201      	movs	r2, #1
 800a738:	701a      	strb	r2, [r3, #0]
 800a73a:	e7c9      	b.n	800a6d0 <tcp_close_shutdown+0xc0>
      return tcp_close_shutdown_fin(pcb);
 800a73c:	4620      	mov	r0, r4
}
 800a73e:	b005      	add	sp, #20
 800a740:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 800a744:	f7ff bac2 	b.w	8009ccc <tcp_close_shutdown_fin>
 800a748:	080216b9 	.word	0x080216b9
 800a74c:	08021b56 	.word	0x08021b56
 800a750:	0801f8bf 	.word	0x0801f8bf
 800a754:	08021b76 	.word	0x08021b76
 800a758:	2400a790 	.word	0x2400a790
 800a75c:	2400a78c 	.word	0x2400a78c
 800a760:	2400a7a4 	.word	0x2400a7a4
 800a764:	2400a79c 	.word	0x2400a79c
 800a768:	0800f7b4 	.word	0x0800f7b4
 800a76c:	2400a798 	.word	0x2400a798
 800a770:	08021b8f 	.word	0x08021b8f

0800a774 <tcp_close>:
{
 800a774:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800a776:	b158      	cbz	r0, 800a790 <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 800a778:	7d03      	ldrb	r3, [r0, #20]
  return tcp_close_shutdown(pcb, 1);
 800a77a:	2101      	movs	r1, #1
  if (pcb->state != LISTEN) {
 800a77c:	2b01      	cmp	r3, #1
    tcp_set_flags(pcb, TF_RXCLOSED);
 800a77e:	bf1e      	ittt	ne
 800a780:	8b43      	ldrhne	r3, [r0, #26]
 800a782:	f043 0310 	orrne.w	r3, r3, #16
 800a786:	8343      	strhne	r3, [r0, #26]
}
 800a788:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 800a78c:	f7ff bf40 	b.w	800a610 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800a790:	4b04      	ldr	r3, [pc, #16]	; (800a7a4 <tcp_close+0x30>)
 800a792:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800a796:	4904      	ldr	r1, [pc, #16]	; (800a7a8 <tcp_close+0x34>)
 800a798:	4804      	ldr	r0, [pc, #16]	; (800a7ac <tcp_close+0x38>)
 800a79a:	f003 f9cd 	bl	800db38 <iprintf>
}
 800a79e:	f06f 000f 	mvn.w	r0, #15
 800a7a2:	bd08      	pop	{r3, pc}
 800a7a4:	080216b9 	.word	0x080216b9
 800a7a8:	08021ba8 	.word	0x08021ba8
 800a7ac:	0801f8bf 	.word	0x0801f8bf

0800a7b0 <tcp_recv_null>:
{
 800a7b0:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800a7b2:	4608      	mov	r0, r1
{
 800a7b4:	4614      	mov	r4, r2
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800a7b6:	b949      	cbnz	r1, 800a7cc <tcp_recv_null+0x1c>
 800a7b8:	4b0c      	ldr	r3, [pc, #48]	; (800a7ec <tcp_recv_null+0x3c>)
 800a7ba:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a7be:	490c      	ldr	r1, [pc, #48]	; (800a7f0 <tcp_recv_null+0x40>)
 800a7c0:	480c      	ldr	r0, [pc, #48]	; (800a7f4 <tcp_recv_null+0x44>)
 800a7c2:	f003 f9b9 	bl	800db38 <iprintf>
 800a7c6:	f06f 000f 	mvn.w	r0, #15
}
 800a7ca:	bd10      	pop	{r4, pc}
  if (p != NULL) {
 800a7cc:	b13a      	cbz	r2, 800a7de <tcp_recv_null+0x2e>
    tcp_recved(pcb, p->tot_len);
 800a7ce:	8911      	ldrh	r1, [r2, #8]
 800a7d0:	f7ff fbc2 	bl	8009f58 <tcp_recved>
    pbuf_free(p);
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	f7fe ffc9 	bl	800976c <pbuf_free>
  return ERR_OK;
 800a7da:	2000      	movs	r0, #0
 800a7dc:	e7f5      	b.n	800a7ca <tcp_recv_null+0x1a>
  } else if (err == ERR_OK) {
 800a7de:	b91b      	cbnz	r3, 800a7e8 <tcp_recv_null+0x38>
}
 800a7e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 800a7e4:	f7ff bfc6 	b.w	800a774 <tcp_close>
  return ERR_OK;
 800a7e8:	4610      	mov	r0, r2
 800a7ea:	e7ee      	b.n	800a7ca <tcp_recv_null+0x1a>
 800a7ec:	080216b9 	.word	0x080216b9
 800a7f0:	08021bbf 	.word	0x08021bbf
 800a7f4:	0801f8bf 	.word	0x0801f8bf

0800a7f8 <tcp_process_refused_data>:
{
 800a7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800a7fa:	4604      	mov	r4, r0
 800a7fc:	b950      	cbnz	r0, 800a814 <tcp_process_refused_data+0x1c>
 800a7fe:	f06f 050f 	mvn.w	r5, #15
 800a802:	4b1d      	ldr	r3, [pc, #116]	; (800a878 <tcp_process_refused_data+0x80>)
 800a804:	f240 6209 	movw	r2, #1545	; 0x609
 800a808:	491c      	ldr	r1, [pc, #112]	; (800a87c <tcp_process_refused_data+0x84>)
 800a80a:	481d      	ldr	r0, [pc, #116]	; (800a880 <tcp_process_refused_data+0x88>)
 800a80c:	f003 f994 	bl	800db38 <iprintf>
}
 800a810:	4628      	mov	r0, r5
 800a812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    u8_t refused_flags = pcb->refused_data->flags;
 800a814:	6f46      	ldr	r6, [r0, #116]	; 0x74
    pcb->refused_data = NULL;
 800a816:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800a818:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
    u8_t refused_flags = pcb->refused_data->flags;
 800a81c:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 800a81e:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800a820:	b1e5      	cbz	r5, 800a85c <tcp_process_refused_data+0x64>
 800a822:	4601      	mov	r1, r0
 800a824:	4632      	mov	r2, r6
 800a826:	6900      	ldr	r0, [r0, #16]
 800a828:	47a8      	blx	r5
 800a82a:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 800a82c:	b9e8      	cbnz	r0, 800a86a <tcp_process_refused_data+0x72>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800a82e:	06bb      	lsls	r3, r7, #26
 800a830:	d5ee      	bpl.n	800a810 <tcp_process_refused_data+0x18>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a832:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a834:	f640 3268 	movw	r2, #2920	; 0xb68
        TCP_EVENT_CLOSED(pcb, err);
 800a838:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a83c:	4293      	cmp	r3, r2
          pcb->rcv_wnd++;
 800a83e:	bf1c      	itt	ne
 800a840:	3301      	addne	r3, #1
 800a842:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800a844:	2e00      	cmp	r6, #0
 800a846:	d0e3      	beq.n	800a810 <tcp_process_refused_data+0x18>
 800a848:	2300      	movs	r3, #0
 800a84a:	4621      	mov	r1, r4
 800a84c:	6920      	ldr	r0, [r4, #16]
 800a84e:	461a      	mov	r2, r3
 800a850:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 800a852:	300d      	adds	r0, #13
 800a854:	d1dc      	bne.n	800a810 <tcp_process_refused_data+0x18>
          return ERR_ABRT;
 800a856:	f06f 050c 	mvn.w	r5, #12
 800a85a:	e7d9      	b.n	800a810 <tcp_process_refused_data+0x18>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800a85c:	4601      	mov	r1, r0
 800a85e:	462b      	mov	r3, r5
 800a860:	4632      	mov	r2, r6
 800a862:	4628      	mov	r0, r5
 800a864:	f7ff ffa4 	bl	800a7b0 <tcp_recv_null>
 800a868:	e7df      	b.n	800a82a <tcp_process_refused_data+0x32>
    } else if (err == ERR_ABRT) {
 800a86a:	350d      	adds	r5, #13
 800a86c:	d0f3      	beq.n	800a856 <tcp_process_refused_data+0x5e>
      return ERR_INPROGRESS;
 800a86e:	f06f 0504 	mvn.w	r5, #4
      pcb->refused_data = refused_data;
 800a872:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 800a874:	e7cc      	b.n	800a810 <tcp_process_refused_data+0x18>
 800a876:	bf00      	nop
 800a878:	080216b9 	.word	0x080216b9
 800a87c:	08021bda 	.word	0x08021bda
 800a880:	0801f8bf 	.word	0x0801f8bf

0800a884 <tcp_fasttmr>:
{
 800a884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 800a888:	4d1b      	ldr	r5, [pc, #108]	; (800a8f8 <tcp_fasttmr+0x74>)
  pcb = tcp_active_pcbs;
 800a88a:	4f1c      	ldr	r7, [pc, #112]	; (800a8fc <tcp_fasttmr+0x78>)
  ++tcp_timer_ctr;
 800a88c:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 800a88e:	4e1c      	ldr	r6, [pc, #112]	; (800a900 <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 800a890:	3301      	adds	r3, #1
 800a892:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 800a894:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 800a896:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 800a89a:	b90c      	cbnz	r4, 800a8a0 <tcp_fasttmr+0x1c>
}
 800a89c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 800a8a0:	782b      	ldrb	r3, [r5, #0]
 800a8a2:	7fa2      	ldrb	r2, [r4, #30]
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d024      	beq.n	800a8f2 <tcp_fasttmr+0x6e>
      pcb->last_timer = tcp_timer_ctr;
 800a8a8:	77a3      	strb	r3, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 800a8aa:	8b63      	ldrh	r3, [r4, #26]
 800a8ac:	07d9      	lsls	r1, r3, #31
 800a8ae:	d509      	bpl.n	800a8c4 <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 800a8b0:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 800a8b4:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800a8b6:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 800a8b8:	f002 f932 	bl	800cb20 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a8bc:	8b63      	ldrh	r3, [r4, #26]
 800a8be:	f023 0303 	bic.w	r3, r3, #3
 800a8c2:	8363      	strh	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 800a8c4:	8b63      	ldrh	r3, [r4, #26]
 800a8c6:	071a      	lsls	r2, r3, #28
 800a8c8:	d505      	bpl.n	800a8d6 <tcp_fasttmr+0x52>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a8ca:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 800a8ce:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a8d0:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 800a8d2:	f7ff f9fb 	bl	8009ccc <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 800a8d6:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 800a8d8:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 800a8dc:	b13b      	cbz	r3, 800a8ee <tcp_fasttmr+0x6a>
        tcp_process_refused_data(pcb);
 800a8de:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 800a8e0:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 800a8e4:	f7ff ff88 	bl	800a7f8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800a8e8:	7833      	ldrb	r3, [r6, #0]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d1d2      	bne.n	800a894 <tcp_fasttmr+0x10>
{
 800a8ee:	464c      	mov	r4, r9
 800a8f0:	e7d3      	b.n	800a89a <tcp_fasttmr+0x16>
      pcb = pcb->next;
 800a8f2:	f8d4 900c 	ldr.w	r9, [r4, #12]
 800a8f6:	e7fa      	b.n	800a8ee <tcp_fasttmr+0x6a>
 800a8f8:	240067a9 	.word	0x240067a9
 800a8fc:	2400a790 	.word	0x2400a790
 800a900:	2400a78c 	.word	0x2400a78c

0800a904 <tcp_tmr>:
{
 800a904:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800a906:	f7ff ffbd 	bl	800a884 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800a90a:	4a06      	ldr	r2, [pc, #24]	; (800a924 <tcp_tmr+0x20>)
 800a90c:	7853      	ldrb	r3, [r2, #1]
 800a90e:	3301      	adds	r3, #1
 800a910:	b2db      	uxtb	r3, r3
 800a912:	7053      	strb	r3, [r2, #1]
 800a914:	07db      	lsls	r3, r3, #31
 800a916:	d503      	bpl.n	800a920 <tcp_tmr+0x1c>
}
 800a918:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 800a91c:	f7ff bc10 	b.w	800a140 <tcp_slowtmr>
}
 800a920:	bd08      	pop	{r3, pc}
 800a922:	bf00      	nop
 800a924:	240067a9 	.word	0x240067a9

0800a928 <tcp_shutdown>:
{
 800a928:	b538      	push	{r3, r4, r5, lr}
 800a92a:	4614      	mov	r4, r2
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800a92c:	4605      	mov	r5, r0
 800a92e:	b948      	cbnz	r0, 800a944 <tcp_shutdown+0x1c>
 800a930:	4b16      	ldr	r3, [pc, #88]	; (800a98c <tcp_shutdown+0x64>)
 800a932:	f240 2207 	movw	r2, #519	; 0x207
 800a936:	4916      	ldr	r1, [pc, #88]	; (800a990 <tcp_shutdown+0x68>)
 800a938:	4816      	ldr	r0, [pc, #88]	; (800a994 <tcp_shutdown+0x6c>)
 800a93a:	f003 f8fd 	bl	800db38 <iprintf>
 800a93e:	f06f 000f 	mvn.w	r0, #15
}
 800a942:	bd38      	pop	{r3, r4, r5, pc}
  if (pcb->state == LISTEN) {
 800a944:	7d03      	ldrb	r3, [r0, #20]
 800a946:	2b01      	cmp	r3, #1
 800a948:	d018      	beq.n	800a97c <tcp_shutdown+0x54>
  if (shut_rx) {
 800a94a:	b189      	cbz	r1, 800a970 <tcp_shutdown+0x48>
    tcp_set_flags(pcb, TF_RXCLOSED);
 800a94c:	8b43      	ldrh	r3, [r0, #26]
 800a94e:	f043 0310 	orr.w	r3, r3, #16
 800a952:	8343      	strh	r3, [r0, #26]
    if (shut_tx) {
 800a954:	b122      	cbz	r2, 800a960 <tcp_shutdown+0x38>
      return tcp_close_shutdown(pcb, 1);
 800a956:	2101      	movs	r1, #1
}
 800a958:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800a95c:	f7ff be58 	b.w	800a610 <tcp_close_shutdown>
    if (pcb->refused_data != NULL) {
 800a960:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800a962:	b908      	cbnz	r0, 800a968 <tcp_shutdown+0x40>
  return ERR_OK;
 800a964:	2000      	movs	r0, #0
 800a966:	e7ec      	b.n	800a942 <tcp_shutdown+0x1a>
      pbuf_free(pcb->refused_data);
 800a968:	f7fe ff00 	bl	800976c <pbuf_free>
      pcb->refused_data = NULL;
 800a96c:	676c      	str	r4, [r5, #116]	; 0x74
 800a96e:	e7f9      	b.n	800a964 <tcp_shutdown+0x3c>
  if (shut_tx) {
 800a970:	2a00      	cmp	r2, #0
 800a972:	d0f7      	beq.n	800a964 <tcp_shutdown+0x3c>
    switch (pcb->state) {
 800a974:	2b04      	cmp	r3, #4
 800a976:	d804      	bhi.n	800a982 <tcp_shutdown+0x5a>
 800a978:	2b02      	cmp	r3, #2
 800a97a:	d804      	bhi.n	800a986 <tcp_shutdown+0x5e>
 800a97c:	f06f 000a 	mvn.w	r0, #10
 800a980:	e7df      	b.n	800a942 <tcp_shutdown+0x1a>
 800a982:	2b07      	cmp	r3, #7
 800a984:	d1fa      	bne.n	800a97c <tcp_shutdown+0x54>
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800a986:	2100      	movs	r1, #0
 800a988:	4628      	mov	r0, r5
 800a98a:	e7e5      	b.n	800a958 <tcp_shutdown+0x30>
 800a98c:	080216b9 	.word	0x080216b9
 800a990:	08021c00 	.word	0x08021c00
 800a994:	0801f8bf 	.word	0x0801f8bf

0800a998 <tcp_abandon>:
{
 800a998:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a99c:	460e      	mov	r6, r1
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800a99e:	4604      	mov	r4, r0
 800a9a0:	b948      	cbnz	r0, 800a9b6 <tcp_abandon+0x1e>
 800a9a2:	4b34      	ldr	r3, [pc, #208]	; (800aa74 <tcp_abandon+0xdc>)
 800a9a4:	f240 223d 	movw	r2, #573	; 0x23d
 800a9a8:	4933      	ldr	r1, [pc, #204]	; (800aa78 <tcp_abandon+0xe0>)
 800a9aa:	4834      	ldr	r0, [pc, #208]	; (800aa7c <tcp_abandon+0xe4>)
}
 800a9ac:	b004      	add	sp, #16
 800a9ae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800a9b2:	f003 b8c1 	b.w	800db38 <iprintf>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800a9b6:	7d03      	ldrb	r3, [r0, #20]
 800a9b8:	2b01      	cmp	r3, #1
 800a9ba:	d106      	bne.n	800a9ca <tcp_abandon+0x32>
 800a9bc:	4b2d      	ldr	r3, [pc, #180]	; (800aa74 <tcp_abandon+0xdc>)
 800a9be:	f44f 7210 	mov.w	r2, #576	; 0x240
 800a9c2:	492f      	ldr	r1, [pc, #188]	; (800aa80 <tcp_abandon+0xe8>)
 800a9c4:	482d      	ldr	r0, [pc, #180]	; (800aa7c <tcp_abandon+0xe4>)
 800a9c6:	f003 f8b7 	bl	800db38 <iprintf>
  if (pcb->state == TIME_WAIT) {
 800a9ca:	7d23      	ldrb	r3, [r4, #20]
 800a9cc:	2b0a      	cmp	r3, #10
 800a9ce:	d109      	bne.n	800a9e4 <tcp_abandon+0x4c>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800a9d0:	4621      	mov	r1, r4
 800a9d2:	482c      	ldr	r0, [pc, #176]	; (800aa84 <tcp_abandon+0xec>)
 800a9d4:	f7ff fdc0 	bl	800a558 <tcp_pcb_remove>
    tcp_free(pcb);
 800a9d8:	4620      	mov	r0, r4
}
 800a9da:	b004      	add	sp, #16
 800a9dc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    tcp_free(pcb);
 800a9e0:	f7ff b9b0 	b.w	8009d44 <tcp_free>
    seqno = pcb->snd_nxt;
 800a9e4:	f8d4 9050 	ldr.w	r9, [r4, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 800a9e8:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 800a9ec:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 800a9f0:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (pcb->state == CLOSED) {
 800a9f4:	8ae5      	ldrh	r5, [r4, #22]
 800a9f6:	b99b      	cbnz	r3, 800aa20 <tcp_abandon+0x88>
      if (pcb->local_port != 0) {
 800a9f8:	b13d      	cbz	r5, 800aa0a <tcp_abandon+0x72>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a9fa:	4a23      	ldr	r2, [pc, #140]	; (800aa88 <tcp_abandon+0xf0>)
 800a9fc:	6813      	ldr	r3, [r2, #0]
 800a9fe:	42a3      	cmp	r3, r4
 800aa00:	d106      	bne.n	800aa10 <tcp_abandon+0x78>
 800aa02:	68e3      	ldr	r3, [r4, #12]
 800aa04:	6013      	str	r3, [r2, #0]
 800aa06:	2500      	movs	r5, #0
 800aa08:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 800aa0a:	462e      	mov	r6, r5
 800aa0c:	e00f      	b.n	800aa2e <tcp_abandon+0x96>
 800aa0e:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d0f8      	beq.n	800aa06 <tcp_abandon+0x6e>
 800aa14:	68da      	ldr	r2, [r3, #12]
 800aa16:	42a2      	cmp	r2, r4
 800aa18:	d1f9      	bne.n	800aa0e <tcp_abandon+0x76>
 800aa1a:	68e2      	ldr	r2, [r4, #12]
 800aa1c:	60da      	str	r2, [r3, #12]
 800aa1e:	e7f2      	b.n	800aa06 <tcp_abandon+0x6e>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800aa20:	4621      	mov	r1, r4
 800aa22:	481a      	ldr	r0, [pc, #104]	; (800aa8c <tcp_abandon+0xf4>)
 800aa24:	f7ff fd98 	bl	800a558 <tcp_pcb_remove>
 800aa28:	4b19      	ldr	r3, [pc, #100]	; (800aa90 <tcp_abandon+0xf8>)
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800aa2e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800aa30:	b108      	cbz	r0, 800aa36 <tcp_abandon+0x9e>
      tcp_segs_free(pcb->unacked);
 800aa32:	f7ff fadd 	bl	8009ff0 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800aa36:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800aa38:	b108      	cbz	r0, 800aa3e <tcp_abandon+0xa6>
      tcp_segs_free(pcb->unsent);
 800aa3a:	f7ff fad9 	bl	8009ff0 <tcp_segs_free>
    if (send_rst) {
 800aa3e:	b156      	cbz	r6, 800aa56 <tcp_abandon+0xbe>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800aa40:	8b23      	ldrh	r3, [r4, #24]
 800aa42:	4652      	mov	r2, sl
 800aa44:	4649      	mov	r1, r9
 800aa46:	4620      	mov	r0, r4
 800aa48:	e9cd 5301 	strd	r5, r3, [sp, #4]
 800aa4c:	1d23      	adds	r3, r4, #4
 800aa4e:	9300      	str	r3, [sp, #0]
 800aa50:	4623      	mov	r3, r4
 800aa52:	f001 ffed 	bl	800ca30 <tcp_rst>
    tcp_free(pcb);
 800aa56:	4620      	mov	r0, r4
 800aa58:	f7ff f974 	bl	8009d44 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800aa5c:	b13f      	cbz	r7, 800aa6e <tcp_abandon+0xd6>
 800aa5e:	f06f 010c 	mvn.w	r1, #12
 800aa62:	4640      	mov	r0, r8
 800aa64:	463b      	mov	r3, r7
}
 800aa66:	b004      	add	sp, #16
 800aa68:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800aa6c:	4718      	bx	r3
}
 800aa6e:	b004      	add	sp, #16
 800aa70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa74:	080216b9 	.word	0x080216b9
 800aa78:	08021c1a 	.word	0x08021c1a
 800aa7c:	0801f8bf 	.word	0x0801f8bf
 800aa80:	08021c33 	.word	0x08021c33
 800aa84:	2400a7a0 	.word	0x2400a7a0
 800aa88:	2400a79c 	.word	0x2400a79c
 800aa8c:	2400a790 	.word	0x2400a790
 800aa90:	2400a78c 	.word	0x2400a78c

0800aa94 <tcp_abort>:
  tcp_abandon(pcb, 1);
 800aa94:	2101      	movs	r1, #1
 800aa96:	f7ff bf7f 	b.w	800a998 <tcp_abandon>
	...

0800aa9c <tcp_accept_null>:
{
 800aa9c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800aa9e:	460c      	mov	r4, r1
 800aaa0:	b931      	cbnz	r1, 800aab0 <tcp_accept_null+0x14>
 800aaa2:	4b06      	ldr	r3, [pc, #24]	; (800aabc <tcp_accept_null+0x20>)
 800aaa4:	f240 320f 	movw	r2, #783	; 0x30f
 800aaa8:	4905      	ldr	r1, [pc, #20]	; (800aac0 <tcp_accept_null+0x24>)
 800aaaa:	4806      	ldr	r0, [pc, #24]	; (800aac4 <tcp_accept_null+0x28>)
 800aaac:	f003 f844 	bl	800db38 <iprintf>
  tcp_abort(pcb);
 800aab0:	4620      	mov	r0, r4
 800aab2:	f7ff ffef 	bl	800aa94 <tcp_abort>
}
 800aab6:	f06f 000c 	mvn.w	r0, #12
 800aaba:	bd10      	pop	{r4, pc}
 800aabc:	080216b9 	.word	0x080216b9
 800aac0:	08021c64 	.word	0x08021c64
 800aac4:	0801f8bf 	.word	0x0801f8bf

0800aac8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800aac8:	b570      	push	{r4, r5, r6, lr}
 800aaca:	460c      	mov	r4, r1
  struct tcp_pcb *pcb;
  pcb = pcb_list;

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800aacc:	4605      	mov	r5, r0
 800aace:	b930      	cbnz	r0, 800aade <tcp_netif_ip_addr_changed_pcblist+0x16>
 800aad0:	4b09      	ldr	r3, [pc, #36]	; (800aaf8 <tcp_netif_ip_addr_changed_pcblist+0x30>)
 800aad2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800aad6:	4909      	ldr	r1, [pc, #36]	; (800aafc <tcp_netif_ip_addr_changed_pcblist+0x34>)
 800aad8:	4809      	ldr	r0, [pc, #36]	; (800ab00 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 800aada:	f003 f82d 	bl	800db38 <iprintf>

  while (pcb != NULL) {
 800aade:	b904      	cbnz	r4, 800aae2 <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 800aae0:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800aae2:	6822      	ldr	r2, [r4, #0]
 800aae4:	682b      	ldr	r3, [r5, #0]
 800aae6:	68e6      	ldr	r6, [r4, #12]
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d102      	bne.n	800aaf2 <tcp_netif_ip_addr_changed_pcblist+0x2a>
      tcp_abort(pcb);
 800aaec:	4620      	mov	r0, r4
 800aaee:	f7ff ffd1 	bl	800aa94 <tcp_abort>
{
 800aaf2:	4634      	mov	r4, r6
 800aaf4:	e7f3      	b.n	800aade <tcp_netif_ip_addr_changed_pcblist+0x16>
 800aaf6:	bf00      	nop
 800aaf8:	080216b9 	.word	0x080216b9
 800aafc:	08021c81 	.word	0x08021c81
 800ab00:	0801f8bf 	.word	0x0801f8bf

0800ab04 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ab04:	4b0c      	ldr	r3, [pc, #48]	; (800ab38 <tcp_kill_state+0x34>)
  inactivity = 0;
 800ab06:	2200      	movs	r2, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ab08:	6819      	ldr	r1, [r3, #0]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ab0a:	4b0c      	ldr	r3, [pc, #48]	; (800ab3c <tcp_kill_state+0x38>)
{
 800ab0c:	b430      	push	{r4, r5}
 800ab0e:	4604      	mov	r4, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ab10:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 800ab12:	4610      	mov	r0, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ab14:	b919      	cbnz	r1, 800ab1e <tcp_kill_state+0x1a>
  if (inactive != NULL) {
 800ab16:	b168      	cbz	r0, 800ab34 <tcp_kill_state+0x30>
}
 800ab18:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 800ab1a:	f7ff bf3d 	b.w	800a998 <tcp_abandon>
    if (pcb->state == state) {
 800ab1e:	7d0b      	ldrb	r3, [r1, #20]
 800ab20:	42a3      	cmp	r3, r4
 800ab22:	d105      	bne.n	800ab30 <tcp_kill_state+0x2c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ab24:	6a0b      	ldr	r3, [r1, #32]
 800ab26:	1aeb      	subs	r3, r5, r3
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	bf24      	itt	cs
 800ab2c:	461a      	movcs	r2, r3
 800ab2e:	4608      	movcs	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ab30:	68c9      	ldr	r1, [r1, #12]
 800ab32:	e7ef      	b.n	800ab14 <tcp_kill_state+0x10>
}
 800ab34:	bc30      	pop	{r4, r5}
 800ab36:	4770      	bx	lr
 800ab38:	2400a790 	.word	0x2400a790
 800ab3c:	2400a794 	.word	0x2400a794

0800ab40 <tcp_alloc>:
{
 800ab40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab42:	4604      	mov	r4, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ab44:	2001      	movs	r0, #1
 800ab46:	f7fe fb71 	bl	800922c <memp_malloc>
  if (pcb == NULL) {
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	2800      	cmp	r0, #0
 800ab4e:	d136      	bne.n	800abbe <tcp_alloc+0x7e>
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ab50:	4e3f      	ldr	r6, [pc, #252]	; (800ac50 <tcp_alloc+0x110>)
 800ab52:	6830      	ldr	r0, [r6, #0]
  while (pcb != NULL) {
 800ab54:	2800      	cmp	r0, #0
 800ab56:	d157      	bne.n	800ac08 <tcp_alloc+0xc8>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ab58:	4b3e      	ldr	r3, [pc, #248]	; (800ac54 <tcp_alloc+0x114>)
  inactivity = 0;
 800ab5a:	4601      	mov	r1, r0
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ab5c:	4d3e      	ldr	r5, [pc, #248]	; (800ac58 <tcp_alloc+0x118>)
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ab5e:	681b      	ldr	r3, [r3, #0]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ab60:	682f      	ldr	r7, [r5, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d15b      	bne.n	800ac1e <tcp_alloc+0xde>
  if (inactive != NULL) {
 800ab66:	b108      	cbz	r0, 800ab6c <tcp_alloc+0x2c>
    tcp_abort(inactive);
 800ab68:	f7ff ff94 	bl	800aa94 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ab6c:	2001      	movs	r0, #1
 800ab6e:	f7fe fb5d 	bl	800922c <memp_malloc>
    if (pcb == NULL) {
 800ab72:	4603      	mov	r3, r0
 800ab74:	bb18      	cbnz	r0, 800abbe <tcp_alloc+0x7e>
      tcp_kill_state(LAST_ACK);
 800ab76:	2009      	movs	r0, #9
 800ab78:	f7ff ffc4 	bl	800ab04 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ab7c:	2001      	movs	r0, #1
 800ab7e:	f7fe fb55 	bl	800922c <memp_malloc>
      if (pcb == NULL) {
 800ab82:	4603      	mov	r3, r0
 800ab84:	b9d8      	cbnz	r0, 800abbe <tcp_alloc+0x7e>
        tcp_kill_state(CLOSING);
 800ab86:	2008      	movs	r0, #8
 800ab88:	f7ff ffbc 	bl	800ab04 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ab8c:	2001      	movs	r0, #1
 800ab8e:	f7fe fb4d 	bl	800922c <memp_malloc>
        if (pcb == NULL) {
 800ab92:	4603      	mov	r3, r0
 800ab94:	b998      	cbnz	r0, 800abbe <tcp_alloc+0x7e>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ab96:	0622      	lsls	r2, r4, #24
 800ab98:	d449      	bmi.n	800ac2e <tcp_alloc+0xee>
  if (mprio == 0) {
 800ab9a:	b15c      	cbz	r4, 800abb4 <tcp_alloc+0x74>
 800ab9c:	4621      	mov	r1, r4
  mprio--;
 800ab9e:	3901      	subs	r1, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aba0:	6832      	ldr	r2, [r6, #0]
  inactivity = 0;
 800aba2:	2000      	movs	r0, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800aba4:	682e      	ldr	r6, [r5, #0]
  mprio--;
 800aba6:	b2c9      	uxtb	r1, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aba8:	2a00      	cmp	r2, #0
 800abaa:	d142      	bne.n	800ac32 <tcp_alloc+0xf2>
  if (inactive != NULL) {
 800abac:	b113      	cbz	r3, 800abb4 <tcp_alloc+0x74>
    tcp_abort(inactive);
 800abae:	4618      	mov	r0, r3
 800abb0:	f7ff ff70 	bl	800aa94 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800abb4:	2001      	movs	r0, #1
 800abb6:	f7fe fb39 	bl	800922c <memp_malloc>
  if (pcb != NULL) {
 800abba:	4603      	mov	r3, r0
 800abbc:	b310      	cbz	r0, 800ac04 <tcp_alloc+0xc4>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800abbe:	2298      	movs	r2, #152	; 0x98
 800abc0:	4618      	mov	r0, r3
 800abc2:	2100      	movs	r1, #0
 800abc4:	f002 ffb0 	bl	800db28 <memset>
    pcb->snd_buf = TCP_SND_BUF;
 800abc8:	f241 62d0 	movw	r2, #5840	; 0x16d0
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800abcc:	4603      	mov	r3, r0
    pcb->prio = prio;
 800abce:	7544      	strb	r4, [r0, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800abd0:	f8a0 2064 	strh.w	r2, [r0, #100]	; 0x64
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800abd4:	4a21      	ldr	r2, [pc, #132]	; (800ac5c <tcp_alloc+0x11c>)
 800abd6:	6282      	str	r2, [r0, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800abd8:	22ff      	movs	r2, #255	; 0xff
 800abda:	72c2      	strb	r2, [r0, #11]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800abdc:	2206      	movs	r2, #6
 800abde:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800abe2:	87c2      	strh	r2, [r0, #62]	; 0x3e
    pcb->rtime = -1;
 800abe4:	4a1e      	ldr	r2, [pc, #120]	; (800ac60 <tcp_alloc+0x120>)
 800abe6:	6302      	str	r2, [r0, #48]	; 0x30
    pcb->tmr = tcp_ticks;
 800abe8:	4a1b      	ldr	r2, [pc, #108]	; (800ac58 <tcp_alloc+0x118>)
 800abea:	6812      	ldr	r2, [r2, #0]
 800abec:	6202      	str	r2, [r0, #32]
    pcb->last_timer = tcp_timer_ctr;
 800abee:	4a1d      	ldr	r2, [pc, #116]	; (800ac64 <tcp_alloc+0x124>)
 800abf0:	7812      	ldrb	r2, [r2, #0]
 800abf2:	7782      	strb	r2, [r0, #30]
    pcb->cwnd = 1;
 800abf4:	4a1c      	ldr	r2, [pc, #112]	; (800ac68 <tcp_alloc+0x128>)
 800abf6:	6482      	str	r2, [r0, #72]	; 0x48
    pcb->recv = tcp_recv_null;
 800abf8:	4a1c      	ldr	r2, [pc, #112]	; (800ac6c <tcp_alloc+0x12c>)
 800abfa:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800abfe:	4a1c      	ldr	r2, [pc, #112]	; (800ac70 <tcp_alloc+0x130>)
 800ac00:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pcb->flags & TF_CLOSEPEND) {
 800ac08:	8b43      	ldrh	r3, [r0, #26]
    struct tcp_pcb *next = pcb->next;
 800ac0a:	68c5      	ldr	r5, [r0, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 800ac0c:	0719      	lsls	r1, r3, #28
 800ac0e:	d504      	bpl.n	800ac1a <tcp_alloc+0xda>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ac10:	f023 0308 	bic.w	r3, r3, #8
 800ac14:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 800ac16:	f7ff f859 	bl	8009ccc <tcp_close_shutdown_fin>
{
 800ac1a:	4628      	mov	r0, r5
 800ac1c:	e79a      	b.n	800ab54 <tcp_alloc+0x14>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ac1e:	6a1a      	ldr	r2, [r3, #32]
 800ac20:	1aba      	subs	r2, r7, r2
 800ac22:	428a      	cmp	r2, r1
 800ac24:	bf24      	itt	cs
 800ac26:	4618      	movcs	r0, r3
 800ac28:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	e799      	b.n	800ab62 <tcp_alloc+0x22>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ac2e:	217f      	movs	r1, #127	; 0x7f
 800ac30:	e7b5      	b.n	800ab9e <tcp_alloc+0x5e>
    if ((pcb->prio < mprio) ||
 800ac32:	7d57      	ldrb	r7, [r2, #21]
 800ac34:	428f      	cmp	r7, r1
 800ac36:	d304      	bcc.n	800ac42 <tcp_alloc+0x102>
 800ac38:	d107      	bne.n	800ac4a <tcp_alloc+0x10a>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ac3a:	6a15      	ldr	r5, [r2, #32]
 800ac3c:	1b75      	subs	r5, r6, r5
 800ac3e:	4285      	cmp	r5, r0
 800ac40:	d303      	bcc.n	800ac4a <tcp_alloc+0x10a>
      inactivity = tcp_ticks - pcb->tmr;
 800ac42:	6a10      	ldr	r0, [r2, #32]
    if ((pcb->prio < mprio) ||
 800ac44:	4639      	mov	r1, r7
      inactivity = tcp_ticks - pcb->tmr;
 800ac46:	4613      	mov	r3, r2
 800ac48:	1a30      	subs	r0, r6, r0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ac4a:	68d2      	ldr	r2, [r2, #12]
 800ac4c:	e7ac      	b.n	800aba8 <tcp_alloc+0x68>
 800ac4e:	bf00      	nop
 800ac50:	2400a790 	.word	0x2400a790
 800ac54:	2400a7a0 	.word	0x2400a7a0
 800ac58:	2400a794 	.word	0x2400a794
 800ac5c:	0b680b68 	.word	0x0b680b68
 800ac60:	0218ffff 	.word	0x0218ffff
 800ac64:	240067a9 	.word	0x240067a9
 800ac68:	16d00001 	.word	0x16d00001
 800ac6c:	0800a7b1 	.word	0x0800a7b1
 800ac70:	006ddd00 	.word	0x006ddd00

0800ac74 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800ac74:	2040      	movs	r0, #64	; 0x40
 800ac76:	f7ff bf63 	b.w	800ab40 <tcp_alloc>
	...

0800ac7c <tcp_next_iss>:
{
 800ac7c:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ac7e:	b930      	cbnz	r0, 800ac8e <tcp_next_iss+0x12>
 800ac80:	4b06      	ldr	r3, [pc, #24]	; (800ac9c <tcp_next_iss+0x20>)
 800ac82:	f640 02af 	movw	r2, #2223	; 0x8af
 800ac86:	4906      	ldr	r1, [pc, #24]	; (800aca0 <tcp_next_iss+0x24>)
 800ac88:	4806      	ldr	r0, [pc, #24]	; (800aca4 <tcp_next_iss+0x28>)
 800ac8a:	f002 ff55 	bl	800db38 <iprintf>
  iss += tcp_ticks;       /* XXX */
 800ac8e:	4b06      	ldr	r3, [pc, #24]	; (800aca8 <tcp_next_iss+0x2c>)
 800ac90:	4a06      	ldr	r2, [pc, #24]	; (800acac <tcp_next_iss+0x30>)
 800ac92:	6858      	ldr	r0, [r3, #4]
 800ac94:	6812      	ldr	r2, [r2, #0]
 800ac96:	4410      	add	r0, r2
 800ac98:	6058      	str	r0, [r3, #4]
}
 800ac9a:	bd08      	pop	{r3, pc}
 800ac9c:	080216b9 	.word	0x080216b9
 800aca0:	08021cb5 	.word	0x08021cb5
 800aca4:	0801f8bf 	.word	0x0801f8bf
 800aca8:	24000028 	.word	0x24000028
 800acac:	2400a794 	.word	0x2400a794

0800acb0 <tcp_eff_send_mss_netif>:
{
 800acb0:	b538      	push	{r3, r4, r5, lr}
 800acb2:	4604      	mov	r4, r0
 800acb4:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800acb6:	b932      	cbnz	r2, 800acc6 <tcp_eff_send_mss_netif+0x16>
 800acb8:	4b09      	ldr	r3, [pc, #36]	; (800ace0 <tcp_eff_send_mss_netif+0x30>)
 800acba:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800acbe:	4909      	ldr	r1, [pc, #36]	; (800ace4 <tcp_eff_send_mss_netif+0x34>)
 800acc0:	4809      	ldr	r0, [pc, #36]	; (800ace8 <tcp_eff_send_mss_netif+0x38>)
 800acc2:	f002 ff39 	bl	800db38 <iprintf>
    if (outif == NULL) {
 800acc6:	b14d      	cbz	r5, 800acdc <tcp_eff_send_mss_netif+0x2c>
    mtu = outif->mtu;
 800acc8:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
  if (mtu != 0) {
 800acca:	b13b      	cbz	r3, 800acdc <tcp_eff_send_mss_netif+0x2c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800accc:	2b28      	cmp	r3, #40	; 0x28
 800acce:	bf8a      	itet	hi
 800acd0:	3b28      	subhi	r3, #40	; 0x28
 800acd2:	2300      	movls	r3, #0
 800acd4:	b29b      	uxthhi	r3, r3
    sendmss = LWIP_MIN(sendmss, mss_s);
 800acd6:	429c      	cmp	r4, r3
 800acd8:	bf28      	it	cs
 800acda:	461c      	movcs	r4, r3
}
 800acdc:	4620      	mov	r0, r4
 800acde:	bd38      	pop	{r3, r4, r5, pc}
 800ace0:	080216b9 	.word	0x080216b9
 800ace4:	08021ccf 	.word	0x08021ccf
 800ace8:	0801f8bf 	.word	0x0801f8bf

0800acec <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800acec:	b538      	push	{r3, r4, r5, lr}
 800acee:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800acf0:	4604      	mov	r4, r0
 800acf2:	b180      	cbz	r0, 800ad16 <tcp_netif_ip_addr_changed+0x2a>
 800acf4:	6803      	ldr	r3, [r0, #0]
 800acf6:	b173      	cbz	r3, 800ad16 <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800acf8:	4b0b      	ldr	r3, [pc, #44]	; (800ad28 <tcp_netif_ip_addr_changed+0x3c>)
 800acfa:	6819      	ldr	r1, [r3, #0]
 800acfc:	f7ff fee4 	bl	800aac8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ad00:	4b0a      	ldr	r3, [pc, #40]	; (800ad2c <tcp_netif_ip_addr_changed+0x40>)
 800ad02:	4620      	mov	r0, r4
 800ad04:	6819      	ldr	r1, [r3, #0]
 800ad06:	f7ff fedf 	bl	800aac8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ad0a:	b125      	cbz	r5, 800ad16 <tcp_netif_ip_addr_changed+0x2a>
 800ad0c:	682b      	ldr	r3, [r5, #0]
 800ad0e:	b113      	cbz	r3, 800ad16 <tcp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ad10:	4b07      	ldr	r3, [pc, #28]	; (800ad30 <tcp_netif_ip_addr_changed+0x44>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	b903      	cbnz	r3, 800ad18 <tcp_netif_ip_addr_changed+0x2c>
          ip_addr_copy(lpcb->local_ip, *new_addr);
        }
      }
    }
  }
}
 800ad16:	bd38      	pop	{r3, r4, r5, pc}
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ad18:	6819      	ldr	r1, [r3, #0]
 800ad1a:	6822      	ldr	r2, [r4, #0]
 800ad1c:	4291      	cmp	r1, r2
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ad1e:	bf04      	itt	eq
 800ad20:	682a      	ldreq	r2, [r5, #0]
 800ad22:	601a      	streq	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ad24:	68db      	ldr	r3, [r3, #12]
 800ad26:	e7f5      	b.n	800ad14 <tcp_netif_ip_addr_changed+0x28>
 800ad28:	2400a790 	.word	0x2400a790
 800ad2c:	2400a79c 	.word	0x2400a79c
 800ad30:	2400a798 	.word	0x2400a798

0800ad34 <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 800ad34:	4a08      	ldr	r2, [pc, #32]	; (800ad58 <tcp_get_next_optbyte+0x24>)
 800ad36:	8813      	ldrh	r3, [r2, #0]
 800ad38:	4610      	mov	r0, r2
 800ad3a:	1c59      	adds	r1, r3, #1
 800ad3c:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ad3e:	6851      	ldr	r1, [r2, #4]
 800ad40:	b111      	cbz	r1, 800ad48 <tcp_get_next_optbyte+0x14>
 800ad42:	8912      	ldrh	r2, [r2, #8]
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d203      	bcs.n	800ad50 <tcp_get_next_optbyte+0x1c>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
    return opts[optidx];
 800ad48:	68c2      	ldr	r2, [r0, #12]
 800ad4a:	4413      	add	r3, r2
 800ad4c:	7d18      	ldrb	r0, [r3, #20]
 800ad4e:	4770      	bx	lr
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ad50:	1a9b      	subs	r3, r3, r2
    return tcphdr_opt2[idx];
 800ad52:	b2db      	uxtb	r3, r3
 800ad54:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 800ad56:	4770      	bx	lr
 800ad58:	240067ac 	.word	0x240067ac

0800ad5c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800ad5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800ad60:	4606      	mov	r6, r0
 800ad62:	b930      	cbnz	r0, 800ad72 <tcp_parseopt+0x16>
 800ad64:	4b1e      	ldr	r3, [pc, #120]	; (800ade0 <tcp_parseopt+0x84>)
 800ad66:	f240 727d 	movw	r2, #1917	; 0x77d
 800ad6a:	491e      	ldr	r1, [pc, #120]	; (800ade4 <tcp_parseopt+0x88>)
 800ad6c:	481e      	ldr	r0, [pc, #120]	; (800ade8 <tcp_parseopt+0x8c>)
 800ad6e:	f002 fee3 	bl	800db38 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800ad72:	4d1e      	ldr	r5, [pc, #120]	; (800adec <tcp_parseopt+0x90>)
 800ad74:	8a2f      	ldrh	r7, [r5, #16]
 800ad76:	b17f      	cbz	r7, 800ad98 <tcp_parseopt+0x3c>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ad78:	2300      	movs	r3, #0
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
          mss |= tcp_get_next_optbyte();
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ad7a:	f240 58b3 	movw	r8, #1459	; 0x5b3
 800ad7e:	f240 59b4 	movw	r9, #1460	; 0x5b4
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ad82:	802b      	strh	r3, [r5, #0]
 800ad84:	882b      	ldrh	r3, [r5, #0]
 800ad86:	42bb      	cmp	r3, r7
 800ad88:	d206      	bcs.n	800ad98 <tcp_parseopt+0x3c>
      u8_t opt = tcp_get_next_optbyte();
 800ad8a:	f7ff ffd3 	bl	800ad34 <tcp_get_next_optbyte>
      switch (opt) {
 800ad8e:	2801      	cmp	r0, #1
 800ad90:	d0f8      	beq.n	800ad84 <tcp_parseopt+0x28>
 800ad92:	2802      	cmp	r0, #2
 800ad94:	d002      	beq.n	800ad9c <tcp_parseopt+0x40>
 800ad96:	b9c8      	cbnz	r0, 800adcc <tcp_parseopt+0x70>
             can skip past them. */
          tcp_optidx += data - 2;
      }
    }
  }
}
 800ad98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800ad9c:	f7ff ffca 	bl	800ad34 <tcp_get_next_optbyte>
 800ada0:	2804      	cmp	r0, #4
 800ada2:	d1f9      	bne.n	800ad98 <tcp_parseopt+0x3c>
 800ada4:	882b      	ldrh	r3, [r5, #0]
 800ada6:	3301      	adds	r3, #1
 800ada8:	42bb      	cmp	r3, r7
 800adaa:	daf5      	bge.n	800ad98 <tcp_parseopt+0x3c>
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800adac:	f7ff ffc2 	bl	800ad34 <tcp_get_next_optbyte>
 800adb0:	0200      	lsls	r0, r0, #8
 800adb2:	b284      	uxth	r4, r0
          mss |= tcp_get_next_optbyte();
 800adb4:	f7ff ffbe 	bl	800ad34 <tcp_get_next_optbyte>
 800adb8:	ea44 0300 	orr.w	r3, r4, r0
 800adbc:	b29b      	uxth	r3, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800adbe:	1e5a      	subs	r2, r3, #1
 800adc0:	b292      	uxth	r2, r2
 800adc2:	4542      	cmp	r2, r8
 800adc4:	bf88      	it	hi
 800adc6:	464b      	movhi	r3, r9
 800adc8:	8673      	strh	r3, [r6, #50]	; 0x32
          break;
 800adca:	e7db      	b.n	800ad84 <tcp_parseopt+0x28>
          data = tcp_get_next_optbyte();
 800adcc:	f7ff ffb2 	bl	800ad34 <tcp_get_next_optbyte>
          if (data < 2) {
 800add0:	2801      	cmp	r0, #1
 800add2:	d9e1      	bls.n	800ad98 <tcp_parseopt+0x3c>
          tcp_optidx += data - 2;
 800add4:	882b      	ldrh	r3, [r5, #0]
 800add6:	3b02      	subs	r3, #2
 800add8:	4418      	add	r0, r3
 800adda:	8028      	strh	r0, [r5, #0]
 800addc:	e7d2      	b.n	800ad84 <tcp_parseopt+0x28>
 800adde:	bf00      	nop
 800ade0:	08021db5 	.word	0x08021db5
 800ade4:	08021e18 	.word	0x08021e18
 800ade8:	0801f8bf 	.word	0x0801f8bf
 800adec:	240067ac 	.word	0x240067ac

0800adf0 <tcp_input_delayed_close>:
{
 800adf0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800adf2:	4604      	mov	r4, r0
 800adf4:	b930      	cbnz	r0, 800ae04 <tcp_input_delayed_close+0x14>
 800adf6:	4b0f      	ldr	r3, [pc, #60]	; (800ae34 <tcp_input_delayed_close+0x44>)
 800adf8:	f240 225a 	movw	r2, #602	; 0x25a
 800adfc:	490e      	ldr	r1, [pc, #56]	; (800ae38 <tcp_input_delayed_close+0x48>)
 800adfe:	480f      	ldr	r0, [pc, #60]	; (800ae3c <tcp_input_delayed_close+0x4c>)
 800ae00:	f002 fe9a 	bl	800db38 <iprintf>
  if (recv_flags & TF_CLOSED) {
 800ae04:	4b0e      	ldr	r3, [pc, #56]	; (800ae40 <tcp_input_delayed_close+0x50>)
 800ae06:	7c98      	ldrb	r0, [r3, #18]
 800ae08:	f010 0010 	ands.w	r0, r0, #16
 800ae0c:	d011      	beq.n	800ae32 <tcp_input_delayed_close+0x42>
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ae0e:	8b63      	ldrh	r3, [r4, #26]
 800ae10:	06db      	lsls	r3, r3, #27
 800ae12:	d406      	bmi.n	800ae22 <tcp_input_delayed_close+0x32>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ae14:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800ae18:	b11b      	cbz	r3, 800ae22 <tcp_input_delayed_close+0x32>
 800ae1a:	f06f 010e 	mvn.w	r1, #14
 800ae1e:	6920      	ldr	r0, [r4, #16]
 800ae20:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ae22:	4621      	mov	r1, r4
 800ae24:	4807      	ldr	r0, [pc, #28]	; (800ae44 <tcp_input_delayed_close+0x54>)
 800ae26:	f7ff fb97 	bl	800a558 <tcp_pcb_remove>
    tcp_free(pcb);
 800ae2a:	4620      	mov	r0, r4
 800ae2c:	f7fe ff8a 	bl	8009d44 <tcp_free>
 800ae30:	2001      	movs	r0, #1
}
 800ae32:	bd10      	pop	{r4, pc}
 800ae34:	08021db5 	.word	0x08021db5
 800ae38:	08021e32 	.word	0x08021e32
 800ae3c:	0801f8bf 	.word	0x0801f8bf
 800ae40:	240067ac 	.word	0x240067ac
 800ae44:	2400a790 	.word	0x2400a790

0800ae48 <tcp_free_acked_segments.isra.0>:
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 800ae48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae4c:	4606      	mov	r6, r0
 800ae4e:	4617      	mov	r7, r2
    seg_list = seg_list->next;
 800ae50:	460c      	mov	r4, r1
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ae52:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 800aefc <tcp_free_acked_segments.isra.0+0xb4>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ae56:	f8df 909c 	ldr.w	r9, [pc, #156]	; 800aef4 <tcp_free_acked_segments.isra.0+0xac>
  while (seg_list != NULL &&
 800ae5a:	2c00      	cmp	r4, #0
 800ae5c:	d037      	beq.n	800aece <tcp_free_acked_segments.isra.0+0x86>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ae5e:	68e3      	ldr	r3, [r4, #12]
 800ae60:	6858      	ldr	r0, [r3, #4]
 800ae62:	f7fd fecc 	bl	8008bfe <lwip_htonl>
 800ae66:	68e3      	ldr	r3, [r4, #12]
 800ae68:	4682      	mov	sl, r0
 800ae6a:	8925      	ldrh	r5, [r4, #8]
 800ae6c:	8998      	ldrh	r0, [r3, #12]
 800ae6e:	f7fd fec3 	bl	8008bf8 <lwip_htons>
 800ae72:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800ae76:	f010 0003 	ands.w	r0, r0, #3
 800ae7a:	eba5 0303 	sub.w	r3, r5, r3
 800ae7e:	bf18      	it	ne
 800ae80:	2001      	movne	r0, #1
 800ae82:	eb03 050a 	add.w	r5, r3, sl
 800ae86:	4405      	add	r5, r0
  while (seg_list != NULL &&
 800ae88:	2d00      	cmp	r5, #0
 800ae8a:	dc21      	bgt.n	800aed0 <tcp_free_acked_segments.isra.0+0x88>
    clen = pbuf_clen(next->p);
 800ae8c:	e9d4 a000 	ldrd	sl, r0, [r4]
 800ae90:	f7fe fda6 	bl	80099e0 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ae94:	8833      	ldrh	r3, [r6, #0]
    clen = pbuf_clen(next->p);
 800ae96:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ae98:	4283      	cmp	r3, r0
 800ae9a:	d206      	bcs.n	800aeaa <tcp_free_acked_segments.isra.0+0x62>
 800ae9c:	464b      	mov	r3, r9
 800ae9e:	f240 4257 	movw	r2, #1111	; 0x457
 800aea2:	4912      	ldr	r1, [pc, #72]	; (800aeec <tcp_free_acked_segments.isra.0+0xa4>)
 800aea4:	4812      	ldr	r0, [pc, #72]	; (800aef0 <tcp_free_acked_segments.isra.0+0xa8>)
 800aea6:	f002 fe47 	bl	800db38 <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800aeaa:	8830      	ldrh	r0, [r6, #0]
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800aeac:	f8b8 2014 	ldrh.w	r2, [r8, #20]
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800aeb0:	1b45      	subs	r5, r0, r5
    tcp_seg_free(next);
 800aeb2:	4620      	mov	r0, r4
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800aeb4:	8035      	strh	r5, [r6, #0]
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800aeb6:	8923      	ldrh	r3, [r4, #8]
 800aeb8:	4413      	add	r3, r2
 800aeba:	f8a8 3014 	strh.w	r3, [r8, #20]
    tcp_seg_free(next);
 800aebe:	f7ff f889 	bl	8009fd4 <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 800aec2:	8833      	ldrh	r3, [r6, #0]
 800aec4:	b17b      	cbz	r3, 800aee6 <tcp_free_acked_segments.isra.0+0x9e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800aec6:	f1ba 0f00 	cmp.w	sl, #0
 800aeca:	d10c      	bne.n	800aee6 <tcp_free_acked_segments.isra.0+0x9e>
 800aecc:	b11f      	cbz	r7, 800aed6 <tcp_free_acked_segments.isra.0+0x8e>
    seg_list = seg_list->next;
 800aece:	2400      	movs	r4, #0
}
 800aed0:	4620      	mov	r0, r4
 800aed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 800aed6:	4b07      	ldr	r3, [pc, #28]	; (800aef4 <tcp_free_acked_segments.isra.0+0xac>)
 800aed8:	f240 4261 	movw	r2, #1121	; 0x461
 800aedc:	4906      	ldr	r1, [pc, #24]	; (800aef8 <tcp_free_acked_segments.isra.0+0xb0>)
 800aede:	4804      	ldr	r0, [pc, #16]	; (800aef0 <tcp_free_acked_segments.isra.0+0xa8>)
 800aee0:	f002 fe2a 	bl	800db38 <iprintf>
  while (seg_list != NULL &&
 800aee4:	e7f3      	b.n	800aece <tcp_free_acked_segments.isra.0+0x86>
    seg_list = seg_list->next;
 800aee6:	4654      	mov	r4, sl
 800aee8:	e7b7      	b.n	800ae5a <tcp_free_acked_segments.isra.0+0x12>
 800aeea:	bf00      	nop
 800aeec:	08021e57 	.word	0x08021e57
 800aef0:	0801f8bf 	.word	0x0801f8bf
 800aef4:	08021db5 	.word	0x08021db5
 800aef8:	08021e7f 	.word	0x08021e7f
 800aefc:	240067ac 	.word	0x240067ac

0800af00 <tcp_receive>:
{
 800af00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800af02:	4604      	mov	r4, r0
 800af04:	b930      	cbnz	r0, 800af14 <tcp_receive+0x14>
 800af06:	4bb4      	ldr	r3, [pc, #720]	; (800b1d8 <tcp_receive+0x2d8>)
 800af08:	f240 427b 	movw	r2, #1147	; 0x47b
 800af0c:	49b3      	ldr	r1, [pc, #716]	; (800b1dc <tcp_receive+0x2dc>)
 800af0e:	48b4      	ldr	r0, [pc, #720]	; (800b1e0 <tcp_receive+0x2e0>)
 800af10:	f002 fe12 	bl	800db38 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800af14:	7d23      	ldrb	r3, [r4, #20]
 800af16:	2b03      	cmp	r3, #3
 800af18:	d806      	bhi.n	800af28 <tcp_receive+0x28>
 800af1a:	4baf      	ldr	r3, [pc, #700]	; (800b1d8 <tcp_receive+0x2d8>)
 800af1c:	f240 427c 	movw	r2, #1148	; 0x47c
 800af20:	49b0      	ldr	r1, [pc, #704]	; (800b1e4 <tcp_receive+0x2e4>)
 800af22:	48af      	ldr	r0, [pc, #700]	; (800b1e0 <tcp_receive+0x2e0>)
 800af24:	f002 fe08 	bl	800db38 <iprintf>
  if (flags & TCP_ACK) {
 800af28:	4daf      	ldr	r5, [pc, #700]	; (800b1e8 <tcp_receive+0x2e8>)
 800af2a:	7f2b      	ldrb	r3, [r5, #28]
 800af2c:	06de      	lsls	r6, r3, #27
 800af2e:	d57e      	bpl.n	800b02e <tcp_receive+0x12e>
 800af30:	6a2b      	ldr	r3, [r5, #32]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800af32:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 800af36:	69aa      	ldr	r2, [r5, #24]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800af38:	e9d4 6015 	ldrd	r6, r0, [r4, #84]	; 0x54
 800af3c:	1af7      	subs	r7, r6, r3
 800af3e:	2f00      	cmp	r7, #0
 800af40:	db0a      	blt.n	800af58 <tcp_receive+0x58>
 800af42:	429e      	cmp	r6, r3
 800af44:	d102      	bne.n	800af4c <tcp_receive+0x4c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800af46:	1a86      	subs	r6, r0, r2
 800af48:	2e00      	cmp	r6, #0
 800af4a:	db05      	blt.n	800af58 <tcp_receive+0x58>
 800af4c:	4290      	cmp	r0, r2
 800af4e:	d110      	bne.n	800af72 <tcp_receive+0x72>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800af50:	68ee      	ldr	r6, [r5, #12]
 800af52:	89f6      	ldrh	r6, [r6, #14]
 800af54:	428e      	cmp	r6, r1
 800af56:	d90c      	bls.n	800af72 <tcp_receive+0x72>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800af58:	68ee      	ldr	r6, [r5, #12]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800af5a:	f8b4 c062 	ldrh.w	ip, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800af5e:	89f6      	ldrh	r6, [r6, #14]
 800af60:	b2b7      	uxth	r7, r6
 800af62:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800af66:	45bc      	cmp	ip, r7
      pcb->snd_wl2 = ackno;
 800af68:	e9c4 3215 	strd	r3, r2, [r4, #84]	; 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 800af6c:	bf38      	it	cc
 800af6e:	f8a4 6062 	strhcc.w	r6, [r4, #98]	; 0x62
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800af72:	6c66      	ldr	r6, [r4, #68]	; 0x44
 800af74:	1b93      	subs	r3, r2, r6
 800af76:	2b00      	cmp	r3, #0
 800af78:	f300 8148 	bgt.w	800b20c <tcp_receive+0x30c>
      if (tcplen == 0) {
 800af7c:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 800af7e:	2b00      	cmp	r3, #0
 800af80:	f040 8140 	bne.w	800b204 <tcp_receive+0x304>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800af84:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800af88:	4401      	add	r1, r0
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800af8a:	6da7      	ldr	r7, [r4, #88]	; 0x58
 800af8c:	443b      	add	r3, r7
 800af8e:	428b      	cmp	r3, r1
 800af90:	f040 8138 	bne.w	800b204 <tcp_receive+0x304>
          if (pcb->rtime >= 0) {
 800af94:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800af98:	2b00      	cmp	r3, #0
 800af9a:	f2c0 8133 	blt.w	800b204 <tcp_receive+0x304>
            if (pcb->lastack == ackno) {
 800af9e:	4296      	cmp	r6, r2
 800afa0:	f040 8130 	bne.w	800b204 <tcp_receive+0x304>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800afa4:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800afa8:	2bff      	cmp	r3, #255	; 0xff
                ++pcb->dupacks;
 800afaa:	bf1c      	itt	ne
 800afac:	3301      	addne	r3, #1
 800afae:	f884 3043 	strbne.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 800afb2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800afb6:	2b03      	cmp	r3, #3
 800afb8:	d90f      	bls.n	800afda <tcp_receive+0xda>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800afba:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800afbe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800afc2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800afc4:	4413      	add	r3, r2
 800afc6:	b29b      	uxth	r3, r3
 800afc8:	429a      	cmp	r2, r3
 800afca:	bf88      	it	hi
 800afcc:	460b      	movhi	r3, r1
 800afce:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 800afd2:	4620      	mov	r0, r4
 800afd4:	f001 fcf8 	bl	800c9c8 <tcp_rexmit_fast>
      if (!found_dupack) {
 800afd8:	e000      	b.n	800afdc <tcp_receive+0xdc>
              if (pcb->dupacks >= 3) {
 800afda:	d0fa      	beq.n	800afd2 <tcp_receive+0xd2>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800afdc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800afde:	b330      	cbz	r0, 800b02e <tcp_receive+0x12e>
 800afe0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800afe2:	69aa      	ldr	r2, [r5, #24]
 800afe4:	1a9b      	subs	r3, r3, r2
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	da21      	bge.n	800b02e <tcp_receive+0x12e>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800afea:	4b80      	ldr	r3, [pc, #512]	; (800b1ec <tcp_receive+0x2ec>)
 800afec:	b280      	uxth	r0, r0
      m = (s16_t)(m - (pcb->sa >> 3));
 800afee:	f9b4 703c 	ldrsh.w	r7, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800aff2:	881a      	ldrh	r2, [r3, #0]
      m = (s16_t)(m - (pcb->sa >> 3));
 800aff4:	f3c7 06cf 	ubfx	r6, r7, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800aff8:	1a11      	subs	r1, r2, r0
      m = (s16_t)(m - (pcb->sa >> 3));
 800affa:	1b89      	subs	r1, r1, r6
 800affc:	b20b      	sxth	r3, r1
      pcb->sa = (s16_t)(pcb->sa + m);
 800affe:	fa17 f181 	uxtah	r1, r7, r1
      if (m < 0) {
 800b002:	2b00      	cmp	r3, #0
      pcb->sa = (s16_t)(pcb->sa + m);
 800b004:	b209      	sxth	r1, r1
        m = (s16_t) - m;
 800b006:	bfb8      	it	lt
 800b008:	1a80      	sublt	r0, r0, r2
      m = (s16_t)(m - (pcb->sv >> 2));
 800b00a:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      pcb->sa = (s16_t)(pcb->sa + m);
 800b00e:	87a1      	strh	r1, [r4, #60]	; 0x3c
        m = (s16_t) - m;
 800b010:	bfb8      	it	lt
 800b012:	1980      	addlt	r0, r0, r6
      pcb->sv = (s16_t)(pcb->sv + m);
 800b014:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
        m = (s16_t) - m;
 800b018:	bfb8      	it	lt
 800b01a:	b203      	sxthlt	r3, r0
      pcb->sv = (s16_t)(pcb->sv + m);
 800b01c:	4413      	add	r3, r2
 800b01e:	b29b      	uxth	r3, r3
 800b020:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b022:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800b026:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 800b02a:	2300      	movs	r3, #0
 800b02c:	6363      	str	r3, [r4, #52]	; 0x34
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b02e:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 800b030:	6a2b      	ldr	r3, [r5, #32]
 800b032:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b034:	2800      	cmp	r0, #0
 800b036:	f000 818b 	beq.w	800b350 <tcp_receive+0x450>
 800b03a:	7d21      	ldrb	r1, [r4, #20]
 800b03c:	2906      	cmp	r1, #6
 800b03e:	f200 8187 	bhi.w	800b350 <tcp_receive+0x450>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b042:	1ad7      	subs	r7, r2, r3
 800b044:	2f01      	cmp	r7, #1
 800b046:	f100 8172 	bmi.w	800b32e <tcp_receive+0x42e>
 800b04a:	f1c3 0101 	rsb	r1, r3, #1
 800b04e:	1a09      	subs	r1, r1, r0
 800b050:	4411      	add	r1, r2
 800b052:	2900      	cmp	r1, #0
 800b054:	f300 816b 	bgt.w	800b32e <tcp_receive+0x42e>
      struct pbuf *p = inseg.p;
 800b058:	6aee      	ldr	r6, [r5, #44]	; 0x2c
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b05a:	b936      	cbnz	r6, 800b06a <tcp_receive+0x16a>
 800b05c:	4b5e      	ldr	r3, [pc, #376]	; (800b1d8 <tcp_receive+0x2d8>)
 800b05e:	f240 5294 	movw	r2, #1428	; 0x594
 800b062:	4963      	ldr	r1, [pc, #396]	; (800b1f0 <tcp_receive+0x2f0>)
 800b064:	485e      	ldr	r0, [pc, #376]	; (800b1e0 <tcp_receive+0x2e0>)
 800b066:	f002 fd67 	bl	800db38 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b06a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800b06e:	429f      	cmp	r7, r3
 800b070:	d906      	bls.n	800b080 <tcp_receive+0x180>
 800b072:	4b59      	ldr	r3, [pc, #356]	; (800b1d8 <tcp_receive+0x2d8>)
 800b074:	f240 5295 	movw	r2, #1429	; 0x595
 800b078:	495e      	ldr	r1, [pc, #376]	; (800b1f4 <tcp_receive+0x2f4>)
 800b07a:	4859      	ldr	r0, [pc, #356]	; (800b1e0 <tcp_receive+0x2e0>)
 800b07c:	f002 fd5c 	bl	800db38 <iprintf>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b080:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
      off = (u16_t)off32;
 800b082:	b2bf      	uxth	r7, r7
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b084:	891b      	ldrh	r3, [r3, #8]
 800b086:	42bb      	cmp	r3, r7
 800b088:	d206      	bcs.n	800b098 <tcp_receive+0x198>
 800b08a:	4b53      	ldr	r3, [pc, #332]	; (800b1d8 <tcp_receive+0x2d8>)
 800b08c:	f240 5297 	movw	r2, #1431	; 0x597
 800b090:	4959      	ldr	r1, [pc, #356]	; (800b1f8 <tcp_receive+0x2f8>)
 800b092:	4853      	ldr	r0, [pc, #332]	; (800b1e0 <tcp_receive+0x2e0>)
 800b094:	f002 fd50 	bl	800db38 <iprintf>
      inseg.len -= off;
 800b098:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
        p->len = 0;
 800b09a:	2100      	movs	r1, #0
      inseg.len -= off;
 800b09c:	1bdb      	subs	r3, r3, r7
 800b09e:	862b      	strh	r3, [r5, #48]	; 0x30
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b0a0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b0a2:	891b      	ldrh	r3, [r3, #8]
 800b0a4:	1bdb      	subs	r3, r3, r7
 800b0a6:	b29b      	uxth	r3, r3
      while (p->len < off) {
 800b0a8:	8972      	ldrh	r2, [r6, #10]
 800b0aa:	42ba      	cmp	r2, r7
 800b0ac:	f0c0 8139 	bcc.w	800b322 <tcp_receive+0x422>
      pbuf_remove_header(p, off);
 800b0b0:	4639      	mov	r1, r7
 800b0b2:	4630      	mov	r0, r6
 800b0b4:	f7fe fb26 	bl	8009704 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b0b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0ba:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800b0bc:	622b      	str	r3, [r5, #32]
 800b0be:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b0c0:	6a29      	ldr	r1, [r5, #32]
 800b0c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b0c4:	1a8b      	subs	r3, r1, r2
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	f2c0 813d 	blt.w	800b346 <tcp_receive+0x446>
 800b0cc:	1c4b      	adds	r3, r1, #1
 800b0ce:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 800b0d0:	1a9b      	subs	r3, r3, r2
 800b0d2:	1a1b      	subs	r3, r3, r0
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	f300 8136 	bgt.w	800b346 <tcp_receive+0x446>
      if (pcb->rcv_nxt == seqno) {
 800b0da:	4291      	cmp	r1, r2
 800b0dc:	f040 8133 	bne.w	800b346 <tcp_receive+0x446>
        tcplen = TCP_TCPLEN(&inseg);
 800b0e0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b0e2:	8e2e      	ldrh	r6, [r5, #48]	; 0x30
 800b0e4:	8998      	ldrh	r0, [r3, #12]
 800b0e6:	f7fd fd87 	bl	8008bf8 <lwip_htons>
 800b0ea:	f010 0003 	ands.w	r0, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 800b0ee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 800b0f0:	bf18      	it	ne
 800b0f2:	2001      	movne	r0, #1
 800b0f4:	4430      	add	r0, r6
 800b0f6:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 800b0f8:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 800b0fa:	84a8      	strh	r0, [r5, #36]	; 0x24
        if (tcplen > pcb->rcv_wnd) {
 800b0fc:	d23d      	bcs.n	800b17a <tcp_receive+0x27a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b0fe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b100:	8998      	ldrh	r0, [r3, #12]
 800b102:	f7fd fd79 	bl	8008bf8 <lwip_htons>
 800b106:	07c6      	lsls	r6, r0, #31
 800b108:	d50d      	bpl.n	800b126 <tcp_receive+0x226>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b10a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b10c:	899e      	ldrh	r6, [r3, #12]
 800b10e:	4630      	mov	r0, r6
 800b110:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 800b114:	f7fd fd70 	bl	8008bf8 <lwip_htons>
 800b118:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800b11c:	f7fd fd6c 	bl	8008bf8 <lwip_htons>
 800b120:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b122:	4306      	orrs	r6, r0
 800b124:	819e      	strh	r6, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b126:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800b128:	862b      	strh	r3, [r5, #48]	; 0x30
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b12a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b12c:	8998      	ldrh	r0, [r3, #12]
 800b12e:	f7fd fd63 	bl	8008bf8 <lwip_htons>
 800b132:	0780      	lsls	r0, r0, #30
          pbuf_realloc(inseg.p, inseg.len);
 800b134:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
            inseg.len -= 1;
 800b136:	bf42      	ittt	mi
 800b138:	8e2b      	ldrhmi	r3, [r5, #48]	; 0x30
 800b13a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800b13e:	862b      	strhmi	r3, [r5, #48]	; 0x30
          pbuf_realloc(inseg.p, inseg.len);
 800b140:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 800b142:	f7fe fbf5 	bl	8009930 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800b146:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b148:	8e2e      	ldrh	r6, [r5, #48]	; 0x30
 800b14a:	8998      	ldrh	r0, [r3, #12]
 800b14c:	f7fd fd54 	bl	8008bf8 <lwip_htons>
 800b150:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b154:	6a2b      	ldr	r3, [r5, #32]
          tcplen = TCP_TCPLEN(&inseg);
 800b156:	bf18      	it	ne
 800b158:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b15a:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 800b15c:	4430      	add	r0, r6
 800b15e:	b280      	uxth	r0, r0
 800b160:	84a8      	strh	r0, [r5, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b162:	4418      	add	r0, r3
 800b164:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800b166:	4413      	add	r3, r2
 800b168:	4298      	cmp	r0, r3
 800b16a:	d006      	beq.n	800b17a <tcp_receive+0x27a>
 800b16c:	4b1a      	ldr	r3, [pc, #104]	; (800b1d8 <tcp_receive+0x2d8>)
 800b16e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800b172:	4922      	ldr	r1, [pc, #136]	; (800b1fc <tcp_receive+0x2fc>)
 800b174:	481a      	ldr	r0, [pc, #104]	; (800b1e0 <tcp_receive+0x2e0>)
 800b176:	f002 fcdf 	bl	800db38 <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 800b17a:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 800b17c:	6a2b      	ldr	r3, [r5, #32]
 800b17e:	4413      	add	r3, r2
 800b180:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b182:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800b184:	4293      	cmp	r3, r2
 800b186:	d206      	bcs.n	800b196 <tcp_receive+0x296>
 800b188:	4b13      	ldr	r3, [pc, #76]	; (800b1d8 <tcp_receive+0x2d8>)
 800b18a:	f240 6207 	movw	r2, #1543	; 0x607
 800b18e:	491c      	ldr	r1, [pc, #112]	; (800b200 <tcp_receive+0x300>)
 800b190:	4813      	ldr	r0, [pc, #76]	; (800b1e0 <tcp_receive+0x2e0>)
 800b192:	f002 fcd1 	bl	800db38 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800b196:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800b198:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 800b19a:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 800b19c:	1a9b      	subs	r3, r3, r2
 800b19e:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800b1a0:	f7fe fea4 	bl	8009eec <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800b1a4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b1a6:	891a      	ldrh	r2, [r3, #8]
 800b1a8:	b112      	cbz	r2, 800b1b0 <tcp_receive+0x2b0>
          recv_data = inseg.p;
 800b1aa:	63ab      	str	r3, [r5, #56]	; 0x38
          inseg.p = NULL;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	62eb      	str	r3, [r5, #44]	; 0x2c
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b1b0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b1b2:	8998      	ldrh	r0, [r3, #12]
 800b1b4:	f7fd fd20 	bl	8008bf8 <lwip_htons>
 800b1b8:	07c1      	lsls	r1, r0, #31
          recv_flags |= TF_GOT_FIN;
 800b1ba:	bf42      	ittt	mi
 800b1bc:	7cab      	ldrbmi	r3, [r5, #18]
 800b1be:	f043 0320 	orrmi.w	r3, r3, #32
 800b1c2:	74ab      	strbmi	r3, [r5, #18]
        tcp_ack(pcb);
 800b1c4:	8b63      	ldrh	r3, [r4, #26]
 800b1c6:	07da      	lsls	r2, r3, #31
 800b1c8:	f140 80b9 	bpl.w	800b33e <tcp_receive+0x43e>
 800b1cc:	f023 0301 	bic.w	r3, r3, #1
      tcp_ack_now(pcb);
 800b1d0:	f043 0302 	orr.w	r3, r3, #2
 800b1d4:	e0b5      	b.n	800b342 <tcp_receive+0x442>
 800b1d6:	bf00      	nop
 800b1d8:	08021db5 	.word	0x08021db5
 800b1dc:	08021e9f 	.word	0x08021e9f
 800b1e0:	0801f8bf 	.word	0x0801f8bf
 800b1e4:	08021eb8 	.word	0x08021eb8
 800b1e8:	240067ac 	.word	0x240067ac
 800b1ec:	2400a794 	.word	0x2400a794
 800b1f0:	08021ed1 	.word	0x08021ed1
 800b1f4:	08021ee1 	.word	0x08021ee1
 800b1f8:	08021ef0 	.word	0x08021ef0
 800b1fc:	08021f00 	.word	0x08021f00
 800b200:	08021f37 	.word	0x08021f37
        pcb->dupacks = 0;
 800b204:	2300      	movs	r3, #0
 800b206:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b20a:	e6e7      	b.n	800afdc <tcp_receive+0xdc>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b20c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800b20e:	1a51      	subs	r1, r2, r1
 800b210:	2900      	cmp	r1, #0
 800b212:	f300 8082 	bgt.w	800b31a <tcp_receive+0x41a>
      if (pcb->flags & TF_INFR) {
 800b216:	8b61      	ldrh	r1, [r4, #26]
 800b218:	0748      	lsls	r0, r1, #29
 800b21a:	d509      	bpl.n	800b230 <tcp_receive+0x330>
        tcp_clear_flags(pcb, TF_INFR);
 800b21c:	f021 0104 	bic.w	r1, r1, #4
 800b220:	8361      	strh	r1, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800b222:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 800b226:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 800b22a:	2100      	movs	r1, #0
 800b22c:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b230:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 800b234:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
      pcb->lastack = ackno;
 800b236:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b238:	eb01 01e0 	add.w	r1, r1, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 800b23c:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b23e:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
      if (pcb->state >= ESTABLISHED) {
 800b242:	2a03      	cmp	r2, #3
      pcb->nrtx = 0;
 800b244:	f04f 0100 	mov.w	r1, #0
 800b248:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 800b24c:	d926      	bls.n	800b29c <tcp_receive+0x39c>
        if (pcb->cwnd < pcb->ssthresh) {
 800b24e:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800b252:	b29b      	uxth	r3, r3
        if (pcb->cwnd < pcb->ssthresh) {
 800b254:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800b258:	428a      	cmp	r2, r1
 800b25a:	d915      	bls.n	800b288 <tcp_receive+0x388>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800b25c:	8b62      	ldrh	r2, [r4, #26]
 800b25e:	f412 6f00 	tst.w	r2, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800b262:	8e62      	ldrh	r2, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800b264:	bf14      	ite	ne
 800b266:	2001      	movne	r0, #1
 800b268:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800b26a:	fb12 f200 	smulbb	r2, r2, r0
 800b26e:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 800b270:	429a      	cmp	r2, r3
 800b272:	bf94      	ite	ls
 800b274:	188b      	addls	r3, r1, r2
 800b276:	18cb      	addhi	r3, r1, r3
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b278:	b29b      	uxth	r3, r3
 800b27a:	4299      	cmp	r1, r3
 800b27c:	d901      	bls.n	800b282 <tcp_receive+0x382>
          TCP_WND_INC(pcb->cwnd, increase);
 800b27e:	f64f 73ff 	movw	r3, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b282:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800b286:	e009      	b.n	800b29c <tcp_receive+0x39c>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b288:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800b28c:	4413      	add	r3, r2
 800b28e:	b29b      	uxth	r3, r3
 800b290:	429a      	cmp	r2, r3
 800b292:	d82d      	bhi.n	800b2f0 <tcp_receive+0x3f0>
          if (pcb->bytes_acked >= pcb->cwnd) {
 800b294:	4299      	cmp	r1, r3
 800b296:	d92d      	bls.n	800b2f4 <tcp_receive+0x3f4>
 800b298:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b29c:	f104 0666 	add.w	r6, r4, #102	; 0x66
 800b2a0:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 800b2a4:	4630      	mov	r0, r6
 800b2a6:	f7ff fdcf 	bl	800ae48 <tcp_free_acked_segments.isra.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b2aa:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b2ac:	4602      	mov	r2, r0
 800b2ae:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b2b0:	4630      	mov	r0, r6
 800b2b2:	f7ff fdc9 	bl	800ae48 <tcp_free_acked_segments.isra.0>
      if (pcb->unacked == NULL) {
 800b2b6:	6f22      	ldr	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b2b8:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 800b2ba:	fab2 f382 	clz	r3, r2
 800b2be:	095b      	lsrs	r3, r3, #5
 800b2c0:	425b      	negs	r3, r3
 800b2c2:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 800b2c8:	b908      	cbnz	r0, 800b2ce <tcp_receive+0x3ce>
        pcb->unsent_oversize = 0;
 800b2ca:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800b2ce:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800b2d2:	8aa9      	ldrh	r1, [r5, #20]
 800b2d4:	440b      	add	r3, r1
 800b2d6:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 800b2da:	8b63      	ldrh	r3, [r4, #26]
 800b2dc:	051f      	lsls	r7, r3, #20
 800b2de:	f57f ae7d 	bpl.w	800afdc <tcp_receive+0xdc>
        if (pcb->unacked == NULL) {
 800b2e2:	b9ba      	cbnz	r2, 800b314 <tcp_receive+0x414>
          if ((pcb->unsent == NULL) ||
 800b2e4:	b960      	cbnz	r0, 800b300 <tcp_receive+0x400>
          tcp_clear_flags(pcb, TF_RTO);
 800b2e6:	8b63      	ldrh	r3, [r4, #26]
 800b2e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b2ec:	8363      	strh	r3, [r4, #26]
 800b2ee:	e675      	b.n	800afdc <tcp_receive+0xdc>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b2f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800b2f4:	1a5b      	subs	r3, r3, r1
 800b2f6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b2fa:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800b2fc:	440b      	add	r3, r1
 800b2fe:	e7bb      	b.n	800b278 <tcp_receive+0x378>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800b300:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 800b302:	68c3      	ldr	r3, [r0, #12]
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800b304:	6858      	ldr	r0, [r3, #4]
 800b306:	f7fd fc7a 	bl	8008bfe <lwip_htonl>
 800b30a:	1a30      	subs	r0, r6, r0
 800b30c:	2800      	cmp	r0, #0
 800b30e:	f73f ae65 	bgt.w	800afdc <tcp_receive+0xdc>
 800b312:	e7e8      	b.n	800b2e6 <tcp_receive+0x3e6>
 800b314:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 800b316:	68d3      	ldr	r3, [r2, #12]
 800b318:	e7f4      	b.n	800b304 <tcp_receive+0x404>
      tcp_send_empty_ack(pcb);
 800b31a:	4620      	mov	r0, r4
 800b31c:	f001 fbce 	bl	800cabc <tcp_send_empty_ack>
 800b320:	e65c      	b.n	800afdc <tcp_receive+0xdc>
        off -= p->len;
 800b322:	1abf      	subs	r7, r7, r2
        p->tot_len = new_tot_len;
 800b324:	8133      	strh	r3, [r6, #8]
        p->len = 0;
 800b326:	8171      	strh	r1, [r6, #10]
        off -= p->len;
 800b328:	b2bf      	uxth	r7, r7
        p = p->next;
 800b32a:	6836      	ldr	r6, [r6, #0]
 800b32c:	e6bc      	b.n	800b0a8 <tcp_receive+0x1a8>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b32e:	1a9b      	subs	r3, r3, r2
 800b330:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 800b332:	bfbe      	ittt	lt
 800b334:	8b63      	ldrhlt	r3, [r4, #26]
 800b336:	f043 0302 	orrlt.w	r3, r3, #2
 800b33a:	8363      	strhlt	r3, [r4, #26]
 800b33c:	e6c0      	b.n	800b0c0 <tcp_receive+0x1c0>
        tcp_ack(pcb);
 800b33e:	f043 0301 	orr.w	r3, r3, #1
      tcp_ack_now(pcb);
 800b342:	8363      	strh	r3, [r4, #26]
}
 800b344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tcp_send_empty_ack(pcb);
 800b346:	4620      	mov	r0, r4
}
 800b348:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        tcp_send_empty_ack(pcb);
 800b34c:	f001 bbb6 	b.w	800cabc <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800b350:	1a99      	subs	r1, r3, r2
 800b352:	2900      	cmp	r1, #0
 800b354:	db05      	blt.n	800b362 <tcp_receive+0x462>
 800b356:	3301      	adds	r3, #1
 800b358:	1a9b      	subs	r3, r3, r2
 800b35a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800b35c:	1a9b      	subs	r3, r3, r2
 800b35e:	2b00      	cmp	r3, #0
 800b360:	ddf0      	ble.n	800b344 <tcp_receive+0x444>
      tcp_ack_now(pcb);
 800b362:	8b63      	ldrh	r3, [r4, #26]
 800b364:	e734      	b.n	800b1d0 <tcp_receive+0x2d0>
 800b366:	bf00      	nop

0800b368 <tcp_input>:
{
 800b368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b36c:	4606      	mov	r6, r0
{
 800b36e:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b370:	b928      	cbnz	r0, 800b37e <tcp_input+0x16>
 800b372:	4ba0      	ldr	r3, [pc, #640]	; (800b5f4 <tcp_input+0x28c>)
 800b374:	2283      	movs	r2, #131	; 0x83
 800b376:	49a0      	ldr	r1, [pc, #640]	; (800b5f8 <tcp_input+0x290>)
 800b378:	48a0      	ldr	r0, [pc, #640]	; (800b5fc <tcp_input+0x294>)
 800b37a:	f002 fbdd 	bl	800db38 <iprintf>
  tcphdr = (struct tcp_hdr *)p->payload;
 800b37e:	6873      	ldr	r3, [r6, #4]
 800b380:	4d9f      	ldr	r5, [pc, #636]	; (800b600 <tcp_input+0x298>)
 800b382:	60eb      	str	r3, [r5, #12]
  if (p->len < TCP_HLEN) {
 800b384:	8973      	ldrh	r3, [r6, #10]
 800b386:	2b13      	cmp	r3, #19
 800b388:	f240 80a2 	bls.w	800b4d0 <tcp_input+0x168>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b38c:	4f9d      	ldr	r7, [pc, #628]	; (800b604 <tcp_input+0x29c>)
 800b38e:	6839      	ldr	r1, [r7, #0]
 800b390:	46b8      	mov	r8, r7
 800b392:	6978      	ldr	r0, [r7, #20]
 800b394:	f7fd f83f 	bl	8008416 <ip4_addr_isbroadcast_u32>
 800b398:	4604      	mov	r4, r0
 800b39a:	2800      	cmp	r0, #0
 800b39c:	f040 8098 	bne.w	800b4d0 <tcp_input+0x168>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b3a6:	2be0      	cmp	r3, #224	; 0xe0
 800b3a8:	f000 8092 	beq.w	800b4d0 <tcp_input+0x168>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800b3ac:	68eb      	ldr	r3, [r5, #12]
 800b3ae:	8998      	ldrh	r0, [r3, #12]
 800b3b0:	f7fd fc22 	bl	8008bf8 <lwip_htons>
 800b3b4:	0a81      	lsrs	r1, r0, #10
 800b3b6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b3ba:	2913      	cmp	r1, #19
 800b3bc:	f240 8088 	bls.w	800b4d0 <tcp_input+0x168>
 800b3c0:	8933      	ldrh	r3, [r6, #8]
 800b3c2:	b28a      	uxth	r2, r1
 800b3c4:	428b      	cmp	r3, r1
 800b3c6:	f0c0 8083 	bcc.w	800b4d0 <tcp_input+0x168>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b3ca:	f1a2 0314 	sub.w	r3, r2, #20
  if (p->len >= hdrlen_bytes) {
 800b3ce:	8970      	ldrh	r0, [r6, #10]
  tcphdr_opt2 = NULL;
 800b3d0:	606c      	str	r4, [r5, #4]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b3d2:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
 800b3d4:	4290      	cmp	r0, r2
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b3d6:	822b      	strh	r3, [r5, #16]
  if (p->len >= hdrlen_bytes) {
 800b3d8:	d33c      	bcc.n	800b454 <tcp_input+0xec>
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b3da:	4630      	mov	r0, r6
    tcphdr_opt1len = tcphdr_optlen;
 800b3dc:	812b      	strh	r3, [r5, #8]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b3de:	f7fe f991 	bl	8009704 <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b3e2:	68ec      	ldr	r4, [r5, #12]
 800b3e4:	8820      	ldrh	r0, [r4, #0]
 800b3e6:	f7fd fc07 	bl	8008bf8 <lwip_htons>
 800b3ea:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b3ec:	68ec      	ldr	r4, [r5, #12]
 800b3ee:	8860      	ldrh	r0, [r4, #2]
 800b3f0:	f7fd fc02 	bl	8008bf8 <lwip_htons>
 800b3f4:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b3f6:	68ec      	ldr	r4, [r5, #12]
 800b3f8:	6860      	ldr	r0, [r4, #4]
 800b3fa:	f7fd fc00 	bl	8008bfe <lwip_htonl>
 800b3fe:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b400:	68ec      	ldr	r4, [r5, #12]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b402:	6228      	str	r0, [r5, #32]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b404:	68a0      	ldr	r0, [r4, #8]
 800b406:	f7fd fbfa 	bl	8008bfe <lwip_htonl>
 800b40a:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b40c:	68ec      	ldr	r4, [r5, #12]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b40e:	61a8      	str	r0, [r5, #24]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b410:	89e0      	ldrh	r0, [r4, #14]
 800b412:	f7fd fbf1 	bl	8008bf8 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 800b416:	68eb      	ldr	r3, [r5, #12]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b418:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 800b41a:	8998      	ldrh	r0, [r3, #12]
 800b41c:	f7fd fbec 	bl	8008bf8 <lwip_htons>
 800b420:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  tcplen = p->tot_len;
 800b424:	8932      	ldrh	r2, [r6, #8]
  flags = TCPH_FLAGS(tcphdr);
 800b426:	772b      	strb	r3, [r5, #28]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800b428:	0783      	lsls	r3, r0, #30
 800b42a:	d14c      	bne.n	800b4c6 <tcp_input+0x15e>
  tcplen = p->tot_len;
 800b42c:	84aa      	strh	r2, [r5, #36]	; 0x24
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b42e:	4b76      	ldr	r3, [pc, #472]	; (800b608 <tcp_input+0x2a0>)
  prev = NULL;
 800b430:	2700      	movs	r7, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b432:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800b630 <tcp_input+0x2c8>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b436:	681c      	ldr	r4, [r3, #0]
 800b438:	4699      	mov	r9, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b43a:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 800b5fc <tcp_input+0x294>
 800b43e:	4b6d      	ldr	r3, [pc, #436]	; (800b5f4 <tcp_input+0x28c>)
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b440:	2c00      	cmp	r4, #0
 800b442:	d14b      	bne.n	800b4dc <tcp_input+0x174>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b444:	4b71      	ldr	r3, [pc, #452]	; (800b60c <tcp_input+0x2a4>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b446:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 800b5f4 <tcp_input+0x28c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b44a:	681c      	ldr	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b44c:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 800b634 <tcp_input+0x2cc>
 800b450:	4f6a      	ldr	r7, [pc, #424]	; (800b5fc <tcp_input+0x294>)
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b452:	e145      	b.n	800b6e0 <tcp_input+0x378>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b454:	6833      	ldr	r3, [r6, #0]
 800b456:	b92b      	cbnz	r3, 800b464 <tcp_input+0xfc>
 800b458:	4b66      	ldr	r3, [pc, #408]	; (800b5f4 <tcp_input+0x28c>)
 800b45a:	22c2      	movs	r2, #194	; 0xc2
 800b45c:	496c      	ldr	r1, [pc, #432]	; (800b610 <tcp_input+0x2a8>)
 800b45e:	4867      	ldr	r0, [pc, #412]	; (800b5fc <tcp_input+0x294>)
 800b460:	f002 fb6a 	bl	800db38 <iprintf>
    pbuf_remove_header(p, TCP_HLEN);
 800b464:	2114      	movs	r1, #20
 800b466:	4630      	mov	r0, r6
 800b468:	f7fe f94c 	bl	8009704 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800b46c:	8974      	ldrh	r4, [r6, #10]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b46e:	f8b5 9010 	ldrh.w	r9, [r5, #16]
    pbuf_remove_header(p, tcphdr_opt1len);
 800b472:	4630      	mov	r0, r6
 800b474:	4621      	mov	r1, r4
    tcphdr_opt1len = p->len;
 800b476:	812c      	strh	r4, [r5, #8]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b478:	eba9 0704 	sub.w	r7, r9, r4
    pbuf_remove_header(p, tcphdr_opt1len);
 800b47c:	f7fe f942 	bl	8009704 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 800b480:	6830      	ldr	r0, [r6, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b482:	b2bf      	uxth	r7, r7
    if (opt2len > p->next->len) {
 800b484:	8943      	ldrh	r3, [r0, #10]
 800b486:	42bb      	cmp	r3, r7
 800b488:	d322      	bcc.n	800b4d0 <tcp_input+0x168>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800b48a:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 800b48c:	4639      	mov	r1, r7
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800b48e:	606b      	str	r3, [r5, #4]
    pbuf_remove_header(p->next, opt2len);
 800b490:	f7fe f938 	bl	8009704 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800b494:	8933      	ldrh	r3, [r6, #8]
 800b496:	441c      	add	r4, r3
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b498:	8973      	ldrh	r3, [r6, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800b49a:	eba4 0409 	sub.w	r4, r4, r9
 800b49e:	8134      	strh	r4, [r6, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b4a0:	b12b      	cbz	r3, 800b4ae <tcp_input+0x146>
 800b4a2:	4b54      	ldr	r3, [pc, #336]	; (800b5f4 <tcp_input+0x28c>)
 800b4a4:	22df      	movs	r2, #223	; 0xdf
 800b4a6:	495b      	ldr	r1, [pc, #364]	; (800b614 <tcp_input+0x2ac>)
 800b4a8:	4854      	ldr	r0, [pc, #336]	; (800b5fc <tcp_input+0x294>)
 800b4aa:	f002 fb45 	bl	800db38 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b4ae:	6833      	ldr	r3, [r6, #0]
 800b4b0:	8932      	ldrh	r2, [r6, #8]
 800b4b2:	891b      	ldrh	r3, [r3, #8]
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d094      	beq.n	800b3e2 <tcp_input+0x7a>
 800b4b8:	4b4e      	ldr	r3, [pc, #312]	; (800b5f4 <tcp_input+0x28c>)
 800b4ba:	22e0      	movs	r2, #224	; 0xe0
 800b4bc:	4956      	ldr	r1, [pc, #344]	; (800b618 <tcp_input+0x2b0>)
 800b4be:	484f      	ldr	r0, [pc, #316]	; (800b5fc <tcp_input+0x294>)
 800b4c0:	f002 fb3a 	bl	800db38 <iprintf>
 800b4c4:	e78d      	b.n	800b3e2 <tcp_input+0x7a>
    tcplen++;
 800b4c6:	1c53      	adds	r3, r2, #1
 800b4c8:	b29b      	uxth	r3, r3
    if (tcplen < p->tot_len) {
 800b4ca:	429a      	cmp	r2, r3
    tcplen++;
 800b4cc:	84ab      	strh	r3, [r5, #36]	; 0x24
    if (tcplen < p->tot_len) {
 800b4ce:	d9ae      	bls.n	800b42e <tcp_input+0xc6>
  pbuf_free(p);
 800b4d0:	4630      	mov	r0, r6
}
 800b4d2:	b007      	add	sp, #28
 800b4d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800b4d8:	f7fe b948 	b.w	800976c <pbuf_free>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b4dc:	7d22      	ldrb	r2, [r4, #20]
 800b4de:	b92a      	cbnz	r2, 800b4ec <tcp_input+0x184>
 800b4e0:	22fb      	movs	r2, #251	; 0xfb
 800b4e2:	4659      	mov	r1, fp
 800b4e4:	4650      	mov	r0, sl
 800b4e6:	f002 fb27 	bl	800db38 <iprintf>
 800b4ea:	4b42      	ldr	r3, [pc, #264]	; (800b5f4 <tcp_input+0x28c>)
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b4ec:	7d22      	ldrb	r2, [r4, #20]
 800b4ee:	2a0a      	cmp	r2, #10
 800b4f0:	d105      	bne.n	800b4fe <tcp_input+0x196>
 800b4f2:	22fc      	movs	r2, #252	; 0xfc
 800b4f4:	4949      	ldr	r1, [pc, #292]	; (800b61c <tcp_input+0x2b4>)
 800b4f6:	4650      	mov	r0, sl
 800b4f8:	f002 fb1e 	bl	800db38 <iprintf>
 800b4fc:	4b3d      	ldr	r3, [pc, #244]	; (800b5f4 <tcp_input+0x28c>)
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b4fe:	7d22      	ldrb	r2, [r4, #20]
 800b500:	2a01      	cmp	r2, #1
 800b502:	d105      	bne.n	800b510 <tcp_input+0x1a8>
 800b504:	22fd      	movs	r2, #253	; 0xfd
 800b506:	4946      	ldr	r1, [pc, #280]	; (800b620 <tcp_input+0x2b8>)
 800b508:	4650      	mov	r0, sl
 800b50a:	f002 fb15 	bl	800db38 <iprintf>
 800b50e:	4b39      	ldr	r3, [pc, #228]	; (800b5f4 <tcp_input+0x28c>)
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b510:	7a20      	ldrb	r0, [r4, #8]
 800b512:	68e1      	ldr	r1, [r4, #12]
 800b514:	b138      	cbz	r0, 800b526 <tcp_input+0x1be>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b516:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800b51a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800b51e:	3201      	adds	r2, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b520:	b2d2      	uxtb	r2, r2
 800b522:	4290      	cmp	r0, r2
 800b524:	d162      	bne.n	800b5ec <tcp_input+0x284>
    if (pcb->remote_port == tcphdr->src &&
 800b526:	68ea      	ldr	r2, [r5, #12]
 800b528:	f8b4 c018 	ldrh.w	ip, [r4, #24]
 800b52c:	8810      	ldrh	r0, [r2, #0]
 800b52e:	4584      	cmp	ip, r0
 800b530:	d15c      	bne.n	800b5ec <tcp_input+0x284>
 800b532:	8ae0      	ldrh	r0, [r4, #22]
 800b534:	8852      	ldrh	r2, [r2, #2]
 800b536:	4290      	cmp	r0, r2
 800b538:	d158      	bne.n	800b5ec <tcp_input+0x284>
        pcb->local_port == tcphdr->dest &&
 800b53a:	6860      	ldr	r0, [r4, #4]
 800b53c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b540:	4290      	cmp	r0, r2
 800b542:	d153      	bne.n	800b5ec <tcp_input+0x284>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b544:	6820      	ldr	r0, [r4, #0]
 800b546:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800b54a:	4290      	cmp	r0, r2
 800b54c:	d14e      	bne.n	800b5ec <tcp_input+0x284>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b54e:	42a1      	cmp	r1, r4
 800b550:	f040 83ef 	bne.w	800bd32 <tcp_input+0x9ca>
 800b554:	4b27      	ldr	r3, [pc, #156]	; (800b5f4 <tcp_input+0x28c>)
 800b556:	f240 120d 	movw	r2, #269	; 0x10d
 800b55a:	4932      	ldr	r1, [pc, #200]	; (800b624 <tcp_input+0x2bc>)
 800b55c:	4827      	ldr	r0, [pc, #156]	; (800b5fc <tcp_input+0x294>)
 800b55e:	f002 faeb 	bl	800db38 <iprintf>
      if (prev != NULL) {
 800b562:	b137      	cbz	r7, 800b572 <tcp_input+0x20a>
        prev->next = pcb->next;
 800b564:	68e3      	ldr	r3, [r4, #12]
 800b566:	60fb      	str	r3, [r7, #12]
        pcb->next = tcp_active_pcbs;
 800b568:	f8d9 3000 	ldr.w	r3, [r9]
        tcp_active_pcbs = pcb;
 800b56c:	f8c9 4000 	str.w	r4, [r9]
        pcb->next = tcp_active_pcbs;
 800b570:	60e3      	str	r3, [r4, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b572:	68e3      	ldr	r3, [r4, #12]
 800b574:	42a3      	cmp	r3, r4
 800b576:	d106      	bne.n	800b586 <tcp_input+0x21e>
 800b578:	4b1e      	ldr	r3, [pc, #120]	; (800b5f4 <tcp_input+0x28c>)
 800b57a:	f240 1215 	movw	r2, #277	; 0x115
 800b57e:	492a      	ldr	r1, [pc, #168]	; (800b628 <tcp_input+0x2c0>)
 800b580:	481e      	ldr	r0, [pc, #120]	; (800b5fc <tcp_input+0x294>)
 800b582:	f002 fad9 	bl	800db38 <iprintf>
    inseg.len = p->tot_len;
 800b586:	8932      	ldrh	r2, [r6, #8]
    inseg.next = NULL;
 800b588:	2300      	movs	r3, #0
    inseg.p = p;
 800b58a:	62ee      	str	r6, [r5, #44]	; 0x2c
    inseg.len = p->tot_len;
 800b58c:	862a      	strh	r2, [r5, #48]	; 0x30
    inseg.tcphdr = tcphdr;
 800b58e:	68ea      	ldr	r2, [r5, #12]
    inseg.next = NULL;
 800b590:	62ab      	str	r3, [r5, #40]	; 0x28
    recv_flags = 0;
 800b592:	74ab      	strb	r3, [r5, #18]
    recv_acked = 0;
 800b594:	82ab      	strh	r3, [r5, #20]
    recv_data = NULL;
 800b596:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
    if (flags & TCP_PSH) {
 800b59a:	7f2b      	ldrb	r3, [r5, #28]
 800b59c:	071b      	lsls	r3, r3, #28
 800b59e:	d503      	bpl.n	800b5a8 <tcp_input+0x240>
      p->flags |= PBUF_FLAG_PUSH;
 800b5a0:	7b73      	ldrb	r3, [r6, #13]
 800b5a2:	f043 0301 	orr.w	r3, r3, #1
 800b5a6:	7373      	strb	r3, [r6, #13]
    if (pcb->refused_data != NULL) {
 800b5a8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800b5aa:	4e20      	ldr	r6, [pc, #128]	; (800b62c <tcp_input+0x2c4>)
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	f000 8131 	beq.w	800b814 <tcp_input+0x4ac>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b5b2:	4620      	mov	r0, r4
 800b5b4:	f7ff f920 	bl	800a7f8 <tcp_process_refused_data>
 800b5b8:	300d      	adds	r0, #13
 800b5ba:	d007      	beq.n	800b5cc <tcp_input+0x264>
 800b5bc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	f000 8128 	beq.w	800b814 <tcp_input+0x4ac>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b5c4:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	f000 8124 	beq.w	800b814 <tcp_input+0x4ac>
        if (pcb->rcv_ann_wnd == 0) {
 800b5cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b5ce:	b913      	cbnz	r3, 800b5d6 <tcp_input+0x26e>
          tcp_send_empty_ack(pcb);
 800b5d0:	4620      	mov	r0, r4
 800b5d2:	f001 fa73 	bl	800cabc <tcp_send_empty_ack>
    tcp_input_pcb = NULL;
 800b5d6:	2400      	movs	r4, #0
    if (inseg.p != NULL) {
 800b5d8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    tcp_input_pcb = NULL;
 800b5da:	6034      	str	r4, [r6, #0]
    recv_data = NULL;
 800b5dc:	63ac      	str	r4, [r5, #56]	; 0x38
    if (inseg.p != NULL) {
 800b5de:	b110      	cbz	r0, 800b5e6 <tcp_input+0x27e>
      pbuf_free(inseg.p);
 800b5e0:	f7fe f8c4 	bl	800976c <pbuf_free>
      inseg.p = NULL;
 800b5e4:	62ec      	str	r4, [r5, #44]	; 0x2c
}
 800b5e6:	b007      	add	sp, #28
 800b5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b5ec:	4627      	mov	r7, r4
 800b5ee:	460c      	mov	r4, r1
 800b5f0:	e726      	b.n	800b440 <tcp_input+0xd8>
 800b5f2:	bf00      	nop
 800b5f4:	08021db5 	.word	0x08021db5
 800b5f8:	08021f56 	.word	0x08021f56
 800b5fc:	0801f8bf 	.word	0x0801f8bf
 800b600:	240067ac 	.word	0x240067ac
 800b604:	24006a50 	.word	0x24006a50
 800b608:	2400a790 	.word	0x2400a790
 800b60c:	2400a7a0 	.word	0x2400a7a0
 800b610:	08021f6e 	.word	0x08021f6e
 800b614:	08021f7e 	.word	0x08021f7e
 800b618:	08021f8a 	.word	0x08021f8a
 800b61c:	08021fd0 	.word	0x08021fd0
 800b620:	08021ffa 	.word	0x08021ffa
 800b624:	08022021 	.word	0x08022021
 800b628:	0802204c 	.word	0x0802204c
 800b62c:	2400a7a4 	.word	0x2400a7a4
 800b630:	08021fa9 	.word	0x08021fa9
 800b634:	08022076 	.word	0x08022076
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b638:	7d23      	ldrb	r3, [r4, #20]
 800b63a:	2b0a      	cmp	r3, #10
 800b63c:	d006      	beq.n	800b64c <tcp_input+0x2e4>
 800b63e:	465b      	mov	r3, fp
 800b640:	f240 121f 	movw	r2, #287	; 0x11f
 800b644:	4651      	mov	r1, sl
 800b646:	4638      	mov	r0, r7
 800b648:	f002 fa76 	bl	800db38 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b64c:	7a22      	ldrb	r2, [r4, #8]
 800b64e:	b13a      	cbz	r2, 800b660 <tcp_input+0x2f8>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b650:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b654:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b658:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b65a:	b2db      	uxtb	r3, r3
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d13e      	bne.n	800b6de <tcp_input+0x376>
      if (pcb->remote_port == tcphdr->src &&
 800b660:	68eb      	ldr	r3, [r5, #12]
 800b662:	8b20      	ldrh	r0, [r4, #24]
 800b664:	881a      	ldrh	r2, [r3, #0]
 800b666:	4290      	cmp	r0, r2
 800b668:	d139      	bne.n	800b6de <tcp_input+0x376>
          pcb->local_port == tcphdr->dest &&
 800b66a:	885b      	ldrh	r3, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 800b66c:	8ae1      	ldrh	r1, [r4, #22]
 800b66e:	4299      	cmp	r1, r3
 800b670:	d135      	bne.n	800b6de <tcp_input+0x376>
          pcb->local_port == tcphdr->dest &&
 800b672:	6862      	ldr	r2, [r4, #4]
 800b674:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b678:	429a      	cmp	r2, r3
 800b67a:	d130      	bne.n	800b6de <tcp_input+0x376>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b67c:	6822      	ldr	r2, [r4, #0]
 800b67e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800b682:	429a      	cmp	r2, r3
 800b684:	d12b      	bne.n	800b6de <tcp_input+0x376>
  if (flags & TCP_RST) {
 800b686:	7f2b      	ldrb	r3, [r5, #28]
 800b688:	075f      	lsls	r7, r3, #29
 800b68a:	f53f af21 	bmi.w	800b4d0 <tcp_input+0x168>
  if (flags & TCP_SYN) {
 800b68e:	079a      	lsls	r2, r3, #30
 800b690:	8caf      	ldrh	r7, [r5, #36]	; 0x24
 800b692:	d514      	bpl.n	800b6be <tcp_input+0x356>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800b694:	6a2a      	ldr	r2, [r5, #32]
 800b696:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b698:	1ad3      	subs	r3, r2, r3
 800b69a:	d415      	bmi.n	800b6c8 <tcp_input+0x360>
 800b69c:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
 800b6a0:	eba3 030c 	sub.w	r3, r3, ip
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	dc0f      	bgt.n	800b6c8 <tcp_input+0x360>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b6a8:	4b8a      	ldr	r3, [pc, #552]	; (800b8d4 <tcp_input+0x56c>)
 800b6aa:	443a      	add	r2, r7
 800b6ac:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800b6b0:	9300      	str	r3, [sp, #0]
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	3304      	adds	r3, #4
 800b6b6:	69a9      	ldr	r1, [r5, #24]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b6b8:	f001 f9ba 	bl	800ca30 <tcp_rst>
 800b6bc:	e708      	b.n	800b4d0 <tcp_input+0x168>
  } else if (flags & TCP_FIN) {
 800b6be:	07dd      	lsls	r5, r3, #31
    pcb->tmr = tcp_ticks;
 800b6c0:	bf42      	ittt	mi
 800b6c2:	4b85      	ldrmi	r3, [pc, #532]	; (800b8d8 <tcp_input+0x570>)
 800b6c4:	681b      	ldrmi	r3, [r3, #0]
 800b6c6:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
 800b6c8:	2f00      	cmp	r7, #0
 800b6ca:	f43f af01 	beq.w	800b4d0 <tcp_input+0x168>
    tcp_ack_now(pcb);
 800b6ce:	8b63      	ldrh	r3, [r4, #26]
 800b6d0:	f043 0302 	orr.w	r3, r3, #2
 800b6d4:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800b6d6:	4620      	mov	r0, r4
 800b6d8:	f001 fa22 	bl	800cb20 <tcp_output>
        pbuf_free(p);
 800b6dc:	e6f8      	b.n	800b4d0 <tcp_input+0x168>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b6de:	68e4      	ldr	r4, [r4, #12]
 800b6e0:	2c00      	cmp	r4, #0
 800b6e2:	d1a9      	bne.n	800b638 <tcp_input+0x2d0>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b6e4:	4a7d      	ldr	r2, [pc, #500]	; (800b8dc <tcp_input+0x574>)
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b6e6:	f8d8 e004 	ldr.w	lr, [r8, #4]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b6ea:	6810      	ldr	r0, [r2, #0]
      if (lpcb->local_port == tcphdr->dest) {
 800b6ec:	68e9      	ldr	r1, [r5, #12]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b6ee:	f8d8 a014 	ldr.w	sl, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b6f2:	4607      	mov	r7, r0
 800b6f4:	b98f      	cbnz	r7, 800b71a <tcp_input+0x3b2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b6f6:	8988      	ldrh	r0, [r1, #12]
 800b6f8:	f7fd fa7e 	bl	8008bf8 <lwip_htons>
 800b6fc:	0742      	lsls	r2, r0, #29
 800b6fe:	f53f aee7 	bmi.w	800b4d0 <tcp_input+0x168>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b702:	68eb      	ldr	r3, [r5, #12]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b704:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
 800b706:	8818      	ldrh	r0, [r3, #0]
 800b708:	6a2a      	ldr	r2, [r5, #32]
 800b70a:	9002      	str	r0, [sp, #8]
 800b70c:	885b      	ldrh	r3, [r3, #2]
 800b70e:	440a      	add	r2, r1
 800b710:	9301      	str	r3, [sp, #4]
 800b712:	4b70      	ldr	r3, [pc, #448]	; (800b8d4 <tcp_input+0x56c>)
 800b714:	9300      	str	r3, [sp, #0]
 800b716:	3304      	adds	r3, #4
 800b718:	e308      	b.n	800bd2c <tcp_input+0x9c4>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b71a:	f897 c008 	ldrb.w	ip, [r7, #8]
 800b71e:	f1bc 0f00 	cmp.w	ip, #0
 800b722:	d005      	beq.n	800b730 <tcp_input+0x3c8>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b724:	f89e 3034 	ldrb.w	r3, [lr, #52]	; 0x34
 800b728:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b72a:	b2db      	uxtb	r3, r3
 800b72c:	459c      	cmp	ip, r3
 800b72e:	d10b      	bne.n	800b748 <tcp_input+0x3e0>
      if (lpcb->local_port == tcphdr->dest) {
 800b730:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 800b734:	8afb      	ldrh	r3, [r7, #22]
 800b736:	4563      	cmp	r3, ip
 800b738:	d106      	bne.n	800b748 <tcp_input+0x3e0>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	4553      	cmp	r3, sl
 800b73e:	f000 82df 	beq.w	800bd00 <tcp_input+0x998>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800b742:	2b00      	cmp	r3, #0
 800b744:	f000 82dc 	beq.w	800bd00 <tcp_input+0x998>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b748:	463c      	mov	r4, r7
 800b74a:	68ff      	ldr	r7, [r7, #12]
 800b74c:	e7d2      	b.n	800b6f4 <tcp_input+0x38c>
  } else if (flags & TCP_SYN) {
 800b74e:	079a      	lsls	r2, r3, #30
 800b750:	f57f aebe 	bpl.w	800b4d0 <tcp_input+0x168>
    npcb = tcp_alloc(pcb->prio);
 800b754:	7d78      	ldrb	r0, [r7, #21]
 800b756:	f7ff f9f3 	bl	800ab40 <tcp_alloc>
    if (npcb == NULL) {
 800b75a:	4604      	mov	r4, r0
 800b75c:	b948      	cbnz	r0, 800b772 <tcp_input+0x40a>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b75e:	69bb      	ldr	r3, [r7, #24]
 800b760:	2b00      	cmp	r3, #0
 800b762:	f43f aeb5 	beq.w	800b4d0 <tcp_input+0x168>
 800b766:	4601      	mov	r1, r0
 800b768:	f04f 32ff 	mov.w	r2, #4294967295
 800b76c:	6938      	ldr	r0, [r7, #16]
 800b76e:	4798      	blx	r3
 800b770:	e6ae      	b.n	800b4d0 <tcp_input+0x168>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800b772:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 800b776:	68ea      	ldr	r2, [r5, #12]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800b778:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800b77a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b77e:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 800b780:	8afb      	ldrh	r3, [r7, #22]
 800b782:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 800b784:	7813      	ldrb	r3, [r2, #0]
 800b786:	7852      	ldrb	r2, [r2, #1]
 800b788:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b78c:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 800b78e:	2303      	movs	r3, #3
 800b790:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 800b792:	6a2b      	ldr	r3, [r5, #32]
 800b794:	3301      	adds	r3, #1
 800b796:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800b798:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800b79a:	f7ff fa6f 	bl	800ac7c <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b79e:	6a2b      	ldr	r3, [r5, #32]
    npcb->snd_wl2 = iss;
 800b7a0:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b7a2:	3b01      	subs	r3, #1
    npcb->snd_nxt = iss;
 800b7a4:	6520      	str	r0, [r4, #80]	; 0x50
    npcb->lastack = iss;
 800b7a6:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b7a8:	6563      	str	r3, [r4, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800b7aa:	693b      	ldr	r3, [r7, #16]
    npcb->snd_lbb = iss;
 800b7ac:	65e0      	str	r0, [r4, #92]	; 0x5c
    npcb->callback_arg = pcb->callback_arg;
 800b7ae:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 800b7b0:	67a7      	str	r7, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800b7b2:	7a7b      	ldrb	r3, [r7, #9]
 800b7b4:	f003 030c 	and.w	r3, r3, #12
 800b7b8:	7263      	strb	r3, [r4, #9]
    npcb->netif_idx = pcb->netif_idx;
 800b7ba:	7a3b      	ldrb	r3, [r7, #8]
 800b7bc:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 800b7be:	f8d9 3000 	ldr.w	r3, [r9]
 800b7c2:	f8c9 4000 	str.w	r4, [r9]
 800b7c6:	60e3      	str	r3, [r4, #12]
 800b7c8:	f001 fc80 	bl	800d0cc <tcp_timer_needed>
 800b7cc:	4b44      	ldr	r3, [pc, #272]	; (800b8e0 <tcp_input+0x578>)
 800b7ce:	2201      	movs	r2, #1
    tcp_parseopt(npcb);
 800b7d0:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(npcb);
 800b7d2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800b7d4:	f7ff fac2 	bl	800ad5c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800b7d8:	68eb      	ldr	r3, [r5, #12]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b7da:	1d22      	adds	r2, r4, #4
 800b7dc:	8e65      	ldrh	r5, [r4, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 800b7de:	89db      	ldrh	r3, [r3, #14]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b7e0:	4610      	mov	r0, r2
 800b7e2:	9205      	str	r2, [sp, #20]
    npcb->snd_wnd = tcphdr->wnd;
 800b7e4:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800b7e8:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b7ec:	f7fc fc96 	bl	800811c <ip4_route>
 800b7f0:	9a05      	ldr	r2, [sp, #20]
 800b7f2:	4601      	mov	r1, r0
 800b7f4:	4628      	mov	r0, r5
 800b7f6:	f7ff fa5b 	bl	800acb0 <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800b7fa:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b7fc:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800b7fe:	4620      	mov	r0, r4
 800b800:	f000 ff9a 	bl	800c738 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800b804:	2800      	cmp	r0, #0
 800b806:	f43f af66 	beq.w	800b6d6 <tcp_input+0x36e>
      tcp_abandon(npcb, 0);
 800b80a:	4651      	mov	r1, sl
 800b80c:	4620      	mov	r0, r4
 800b80e:	f7ff f8c3 	bl	800a998 <tcp_abandon>
      return;
 800b812:	e65d      	b.n	800b4d0 <tcp_input+0x168>
  if (flags & TCP_RST) {
 800b814:	7f2a      	ldrb	r2, [r5, #28]
    tcp_input_pcb = pcb;
 800b816:	6034      	str	r4, [r6, #0]
  if (flags & TCP_RST) {
 800b818:	0753      	lsls	r3, r2, #29
 800b81a:	d537      	bpl.n	800b88c <tcp_input+0x524>
    if (pcb->state == SYN_SENT) {
 800b81c:	7d21      	ldrb	r1, [r4, #20]
 800b81e:	2902      	cmp	r1, #2
 800b820:	d11e      	bne.n	800b860 <tcp_input+0x4f8>
      if (ackno == pcb->snd_nxt) {
 800b822:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b824:	69ab      	ldr	r3, [r5, #24]
 800b826:	429a      	cmp	r2, r3
 800b828:	d107      	bne.n	800b83a <tcp_input+0x4d2>
      recv_flags |= TF_RESET;
 800b82a:	7cab      	ldrb	r3, [r5, #18]
 800b82c:	f043 0308 	orr.w	r3, r3, #8
 800b830:	74ab      	strb	r3, [r5, #18]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800b832:	8b63      	ldrh	r3, [r4, #26]
 800b834:	f023 0301 	bic.w	r3, r3, #1
        tcp_ack_now(pcb);
 800b838:	8363      	strh	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 800b83a:	7cab      	ldrb	r3, [r5, #18]
 800b83c:	0718      	lsls	r0, r3, #28
 800b83e:	f140 81fe 	bpl.w	800bc3e <tcp_input+0x8d6>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800b842:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800b846:	b11b      	cbz	r3, 800b850 <tcp_input+0x4e8>
 800b848:	f06f 010d 	mvn.w	r1, #13
 800b84c:	6920      	ldr	r0, [r4, #16]
 800b84e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b850:	4621      	mov	r1, r4
 800b852:	4824      	ldr	r0, [pc, #144]	; (800b8e4 <tcp_input+0x57c>)
 800b854:	f7fe fe80 	bl	800a558 <tcp_pcb_remove>
        tcp_free(pcb);
 800b858:	4620      	mov	r0, r4
 800b85a:	f7fe fa73 	bl	8009d44 <tcp_free>
 800b85e:	e6ba      	b.n	800b5d6 <tcp_input+0x26e>
      if (seqno == pcb->rcv_nxt) {
 800b860:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b862:	6a2b      	ldr	r3, [r5, #32]
 800b864:	429a      	cmp	r2, r3
 800b866:	d007      	beq.n	800b878 <tcp_input+0x510>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b868:	1a9b      	subs	r3, r3, r2
 800b86a:	d4e6      	bmi.n	800b83a <tcp_input+0x4d2>
 800b86c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800b86e:	1a9b      	subs	r3, r3, r2
 800b870:	2b00      	cmp	r3, #0
 800b872:	dce2      	bgt.n	800b83a <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 800b874:	8b63      	ldrh	r3, [r4, #26]
 800b876:	e010      	b.n	800b89a <tcp_input+0x532>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b878:	2900      	cmp	r1, #0
 800b87a:	d1d6      	bne.n	800b82a <tcp_input+0x4c2>
 800b87c:	4b1a      	ldr	r3, [pc, #104]	; (800b8e8 <tcp_input+0x580>)
 800b87e:	f44f 724e 	mov.w	r2, #824	; 0x338
 800b882:	491a      	ldr	r1, [pc, #104]	; (800b8ec <tcp_input+0x584>)
 800b884:	481a      	ldr	r0, [pc, #104]	; (800b8f0 <tcp_input+0x588>)
 800b886:	f002 f957 	bl	800db38 <iprintf>
 800b88a:	e7ce      	b.n	800b82a <tcp_input+0x4c2>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b88c:	0797      	lsls	r7, r2, #30
 800b88e:	8b63      	ldrh	r3, [r4, #26]
 800b890:	d506      	bpl.n	800b8a0 <tcp_input+0x538>
 800b892:	7d22      	ldrb	r2, [r4, #20]
 800b894:	3a02      	subs	r2, #2
 800b896:	2a01      	cmp	r2, #1
 800b898:	d902      	bls.n	800b8a0 <tcp_input+0x538>
        tcp_ack_now(pcb);
 800b89a:	f043 0302 	orr.w	r3, r3, #2
 800b89e:	e7cb      	b.n	800b838 <tcp_input+0x4d0>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b8a0:	06d8      	lsls	r0, r3, #27
  tcp_parseopt(pcb);
 800b8a2:	4620      	mov	r0, r4
    pcb->tmr = tcp_ticks;
 800b8a4:	bf5e      	ittt	pl
 800b8a6:	4b0c      	ldrpl	r3, [pc, #48]	; (800b8d8 <tcp_input+0x570>)
 800b8a8:	681b      	ldrpl	r3, [r3, #0]
 800b8aa:	6223      	strpl	r3, [r4, #32]
  pcb->persist_probe = 0;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
  tcp_parseopt(pcb);
 800b8b2:	f7ff fa53 	bl	800ad5c <tcp_parseopt>
  switch (pcb->state) {
 800b8b6:	7d23      	ldrb	r3, [r4, #20]
 800b8b8:	3b02      	subs	r3, #2
 800b8ba:	2b07      	cmp	r3, #7
 800b8bc:	d8bd      	bhi.n	800b83a <tcp_input+0x4d2>
 800b8be:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b8c2:	0019      	.short	0x0019
 800b8c4:	011200a6 	.word	0x011200a6
 800b8c8:	015f0117 	.word	0x015f0117
 800b8cc:	01780112 	.word	0x01780112
 800b8d0:	01a9      	.short	0x01a9
 800b8d2:	bf00      	nop
 800b8d4:	24006a60 	.word	0x24006a60
 800b8d8:	2400a794 	.word	0x2400a794
 800b8dc:	2400a798 	.word	0x2400a798
 800b8e0:	2400a78c 	.word	0x2400a78c
 800b8e4:	2400a790 	.word	0x2400a790
 800b8e8:	08021db5 	.word	0x08021db5
 800b8ec:	080220a3 	.word	0x080220a3
 800b8f0:	0801f8bf 	.word	0x0801f8bf
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b8f4:	7f2b      	ldrb	r3, [r5, #28]
 800b8f6:	f003 0212 	and.w	r2, r3, #18
 800b8fa:	2a12      	cmp	r2, #18
 800b8fc:	d16a      	bne.n	800b9d4 <tcp_input+0x66c>
          && (ackno == pcb->lastack + 1)) {
 800b8fe:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800b900:	69a9      	ldr	r1, [r5, #24]
 800b902:	3201      	adds	r2, #1
 800b904:	428a      	cmp	r2, r1
 800b906:	d165      	bne.n	800b9d4 <tcp_input+0x66c>
        pcb->rcv_nxt = seqno + 1;
 800b908:	6a2b      	ldr	r3, [r5, #32]
        pcb->lastack = ackno;
 800b90a:	6462      	str	r2, [r4, #68]	; 0x44
        pcb->rcv_nxt = seqno + 1;
 800b90c:	1c59      	adds	r1, r3, #1
        pcb->snd_wnd = tcphdr->wnd;
 800b90e:	68ea      	ldr	r2, [r5, #12]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b910:	3b01      	subs	r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b912:	8e67      	ldrh	r7, [r4, #50]	; 0x32
        pcb->rcv_nxt = seqno + 1;
 800b914:	6261      	str	r1, [r4, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b916:	62e1      	str	r1, [r4, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 800b918:	89d2      	ldrh	r2, [r2, #14]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b91a:	6563      	str	r3, [r4, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800b91c:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 800b91e:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b922:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b926:	18e2      	adds	r2, r4, r3
        pcb->state = ESTABLISHED;
 800b928:	7523      	strb	r3, [r4, #20]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b92a:	4610      	mov	r0, r2
 800b92c:	9205      	str	r2, [sp, #20]
 800b92e:	f7fc fbf5 	bl	800811c <ip4_route>
 800b932:	9a05      	ldr	r2, [sp, #20]
 800b934:	4601      	mov	r1, r0
 800b936:	4638      	mov	r0, r7
 800b938:	f7ff f9ba 	bl	800acb0 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b93c:	f241 131c 	movw	r3, #4380	; 0x111c
 800b940:	0042      	lsls	r2, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b942:	8660      	strh	r0, [r4, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b944:	0081      	lsls	r1, r0, #2
 800b946:	429a      	cmp	r2, r3
 800b948:	4617      	mov	r7, r2
 800b94a:	bf38      	it	cc
 800b94c:	461f      	movcc	r7, r3
 800b94e:	ebb7 0f80 	cmp.w	r7, r0, lsl #2
 800b952:	d933      	bls.n	800b9bc <tcp_input+0x654>
 800b954:	b28b      	uxth	r3, r1
 800b956:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b95a:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800b95e:	b933      	cbnz	r3, 800b96e <tcp_input+0x606>
 800b960:	4ba3      	ldr	r3, [pc, #652]	; (800bbf0 <tcp_input+0x888>)
 800b962:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800b966:	49a3      	ldr	r1, [pc, #652]	; (800bbf4 <tcp_input+0x88c>)
 800b968:	48a3      	ldr	r0, [pc, #652]	; (800bbf8 <tcp_input+0x890>)
 800b96a:	f002 f8e5 	bl	800db38 <iprintf>
        --pcb->snd_queuelen;
 800b96e:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
        rseg = pcb->unacked;
 800b972:	6f27      	ldr	r7, [r4, #112]	; 0x70
        --pcb->snd_queuelen;
 800b974:	3b01      	subs	r3, #1
 800b976:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
        if (rseg == NULL) {
 800b97a:	bb1f      	cbnz	r7, 800b9c4 <tcp_input+0x65c>
          rseg = pcb->unsent;
 800b97c:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b97e:	b937      	cbnz	r7, 800b98e <tcp_input+0x626>
 800b980:	4b9b      	ldr	r3, [pc, #620]	; (800bbf0 <tcp_input+0x888>)
 800b982:	f44f 725d 	mov.w	r2, #884	; 0x374
 800b986:	499d      	ldr	r1, [pc, #628]	; (800bbfc <tcp_input+0x894>)
 800b988:	489b      	ldr	r0, [pc, #620]	; (800bbf8 <tcp_input+0x890>)
 800b98a:	f002 f8d5 	bl	800db38 <iprintf>
          pcb->unsent = rseg->next;
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	66e3      	str	r3, [r4, #108]	; 0x6c
        tcp_seg_free(rseg);
 800b992:	4638      	mov	r0, r7
 800b994:	f7fe fb1e 	bl	8009fd4 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800b998:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b99a:	b9b3      	cbnz	r3, 800b9ca <tcp_input+0x662>
          pcb->rtime = -1;
 800b99c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b9a0:	8623      	strh	r3, [r4, #48]	; 0x30
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b9a2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	f43f af64 	beq.w	800b874 <tcp_input+0x50c>
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	4621      	mov	r1, r4
 800b9b0:	6920      	ldr	r0, [r4, #16]
 800b9b2:	4798      	blx	r3
        if (err == ERR_ABRT) {
 800b9b4:	300d      	adds	r0, #13
 800b9b6:	f47f af5d 	bne.w	800b874 <tcp_input+0x50c>
 800b9ba:	e60c      	b.n	800b5d6 <tcp_input+0x26e>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	bf88      	it	hi
 800b9c0:	b293      	uxthhi	r3, r2
 800b9c2:	e7c8      	b.n	800b956 <tcp_input+0x5ee>
          pcb->unacked = rseg->next;
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	6723      	str	r3, [r4, #112]	; 0x70
 800b9c8:	e7e3      	b.n	800b992 <tcp_input+0x62a>
          pcb->rtime = 0;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	8623      	strh	r3, [r4, #48]	; 0x30
          pcb->nrtx = 0;
 800b9ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b9d2:	e7e6      	b.n	800b9a2 <tcp_input+0x63a>
      else if (flags & TCP_ACK) {
 800b9d4:	06d9      	lsls	r1, r3, #27
 800b9d6:	f57f af30 	bpl.w	800b83a <tcp_input+0x4d2>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b9da:	68eb      	ldr	r3, [r5, #12]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b9dc:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
 800b9de:	8818      	ldrh	r0, [r3, #0]
 800b9e0:	6a2a      	ldr	r2, [r5, #32]
 800b9e2:	9002      	str	r0, [sp, #8]
 800b9e4:	4620      	mov	r0, r4
 800b9e6:	885b      	ldrh	r3, [r3, #2]
 800b9e8:	440a      	add	r2, r1
 800b9ea:	9301      	str	r3, [sp, #4]
 800b9ec:	4b84      	ldr	r3, [pc, #528]	; (800bc00 <tcp_input+0x898>)
 800b9ee:	9300      	str	r3, [sp, #0]
 800b9f0:	3304      	adds	r3, #4
 800b9f2:	69a9      	ldr	r1, [r5, #24]
 800b9f4:	f001 f81c 	bl	800ca30 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b9f8:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800b9fc:	2b05      	cmp	r3, #5
 800b9fe:	f63f af1c 	bhi.w	800b83a <tcp_input+0x4d2>
          pcb->rtime = 0;
 800ba02:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 800ba04:	4620      	mov	r0, r4
          pcb->rtime = 0;
 800ba06:	8623      	strh	r3, [r4, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800ba08:	f001 fa50 	bl	800ceac <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 800ba0c:	e715      	b.n	800b83a <tcp_input+0x4d2>
      if (flags & TCP_ACK) {
 800ba0e:	7f2b      	ldrb	r3, [r5, #28]
 800ba10:	06da      	lsls	r2, r3, #27
 800ba12:	d55b      	bpl.n	800bacc <tcp_input+0x764>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ba14:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ba16:	69a9      	ldr	r1, [r5, #24]
 800ba18:	43db      	mvns	r3, r3
 800ba1a:	42cb      	cmn	r3, r1
 800ba1c:	d447      	bmi.n	800baae <tcp_input+0x746>
 800ba1e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ba20:	1acb      	subs	r3, r1, r3
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	dc43      	bgt.n	800baae <tcp_input+0x746>
          pcb->state = ESTABLISHED;
 800ba26:	2304      	movs	r3, #4
 800ba28:	7523      	strb	r3, [r4, #20]
          if (pcb->listener == NULL) {
 800ba2a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ba2c:	b91b      	cbnz	r3, 800ba36 <tcp_input+0x6ce>
            tcp_abort(pcb);
 800ba2e:	4620      	mov	r0, r4
 800ba30:	f7ff f830 	bl	800aa94 <tcp_abort>
            goto aborted;
 800ba34:	e5cf      	b.n	800b5d6 <tcp_input+0x26e>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ba36:	699b      	ldr	r3, [r3, #24]
 800ba38:	b933      	cbnz	r3, 800ba48 <tcp_input+0x6e0>
 800ba3a:	4b6d      	ldr	r3, [pc, #436]	; (800bbf0 <tcp_input+0x888>)
 800ba3c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ba40:	4970      	ldr	r1, [pc, #448]	; (800bc04 <tcp_input+0x89c>)
 800ba42:	486d      	ldr	r0, [pc, #436]	; (800bbf8 <tcp_input+0x890>)
 800ba44:	f002 f878 	bl	800db38 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ba48:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ba4a:	699b      	ldr	r3, [r3, #24]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d0ee      	beq.n	800ba2e <tcp_input+0x6c6>
 800ba50:	2200      	movs	r2, #0
 800ba52:	4621      	mov	r1, r4
 800ba54:	6920      	ldr	r0, [r4, #16]
 800ba56:	4798      	blx	r3
          if (err != ERR_OK) {
 800ba58:	b118      	cbz	r0, 800ba62 <tcp_input+0x6fa>
            if (err != ERR_ABRT) {
 800ba5a:	300d      	adds	r0, #13
 800ba5c:	f43f adbb 	beq.w	800b5d6 <tcp_input+0x26e>
 800ba60:	e7e5      	b.n	800ba2e <tcp_input+0x6c6>
          tcp_receive(pcb);
 800ba62:	4620      	mov	r0, r4
 800ba64:	f7ff fa4c 	bl	800af00 <tcp_receive>
          if (recv_acked != 0) {
 800ba68:	4a67      	ldr	r2, [pc, #412]	; (800bc08 <tcp_input+0x8a0>)
 800ba6a:	8a93      	ldrh	r3, [r2, #20]
 800ba6c:	b10b      	cbz	r3, 800ba72 <tcp_input+0x70a>
            recv_acked--;
 800ba6e:	3b01      	subs	r3, #1
 800ba70:	8293      	strh	r3, [r2, #20]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ba72:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 800ba74:	f241 131c 	movw	r3, #4380	; 0x111c
 800ba78:	0041      	lsls	r1, r0, #1
 800ba7a:	0087      	lsls	r7, r0, #2
 800ba7c:	4299      	cmp	r1, r3
 800ba7e:	468c      	mov	ip, r1
 800ba80:	bf38      	it	cc
 800ba82:	469c      	movcc	ip, r3
 800ba84:	ebbc 0f80 	cmp.w	ip, r0, lsl #2
 800ba88:	d90d      	bls.n	800baa6 <tcp_input+0x73e>
 800ba8a:	b2bb      	uxth	r3, r7
 800ba8c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 800ba90:	7c93      	ldrb	r3, [r2, #18]
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ba92:	0698      	lsls	r0, r3, #26
 800ba94:	f57f aed1 	bpl.w	800b83a <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 800ba98:	8b63      	ldrh	r3, [r4, #26]
 800ba9a:	f043 0302 	orr.w	r3, r3, #2
 800ba9e:	8363      	strh	r3, [r4, #26]
        pcb->state = CLOSE_WAIT;
 800baa0:	2307      	movs	r3, #7
        pcb->state = FIN_WAIT_2;
 800baa2:	7523      	strb	r3, [r4, #20]
    if (err != ERR_ABRT) {
 800baa4:	e6c9      	b.n	800b83a <tcp_input+0x4d2>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800baa6:	4299      	cmp	r1, r3
 800baa8:	bf88      	it	hi
 800baaa:	b28b      	uxthhi	r3, r1
 800baac:	e7ee      	b.n	800ba8c <tcp_input+0x724>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800baae:	68eb      	ldr	r3, [r5, #12]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bab0:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 800bab2:	881f      	ldrh	r7, [r3, #0]
 800bab4:	6a2a      	ldr	r2, [r5, #32]
 800bab6:	9702      	str	r7, [sp, #8]
 800bab8:	885b      	ldrh	r3, [r3, #2]
 800baba:	4402      	add	r2, r0
 800babc:	4620      	mov	r0, r4
 800babe:	9301      	str	r3, [sp, #4]
 800bac0:	4b4f      	ldr	r3, [pc, #316]	; (800bc00 <tcp_input+0x898>)
 800bac2:	9300      	str	r3, [sp, #0]
 800bac4:	3304      	adds	r3, #4
 800bac6:	f000 ffb3 	bl	800ca30 <tcp_rst>
    if (err != ERR_ABRT) {
 800baca:	e6b6      	b.n	800b83a <tcp_input+0x4d2>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800bacc:	079f      	lsls	r7, r3, #30
 800bace:	f57f aeb4 	bpl.w	800b83a <tcp_input+0x4d2>
 800bad2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bad4:	6a2a      	ldr	r2, [r5, #32]
 800bad6:	3b01      	subs	r3, #1
 800bad8:	4293      	cmp	r3, r2
 800bada:	f47f aeae 	bne.w	800b83a <tcp_input+0x4d2>
        tcp_rexmit(pcb);
 800bade:	4620      	mov	r0, r4
 800bae0:	f000 ff32 	bl	800c948 <tcp_rexmit>
    if (err != ERR_ABRT) {
 800bae4:	e6a9      	b.n	800b83a <tcp_input+0x4d2>
      tcp_receive(pcb);
 800bae6:	4620      	mov	r0, r4
 800bae8:	f7ff fa0a 	bl	800af00 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800baec:	7cab      	ldrb	r3, [r5, #18]
 800baee:	e7d0      	b.n	800ba92 <tcp_input+0x72a>
      tcp_receive(pcb);
 800baf0:	4620      	mov	r0, r4
 800baf2:	f7ff fa05 	bl	800af00 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800baf6:	7cab      	ldrb	r3, [r5, #18]
 800baf8:	f013 0f20 	tst.w	r3, #32
 800bafc:	7f2b      	ldrb	r3, [r5, #28]
 800bafe:	d031      	beq.n	800bb64 <tcp_input+0x7fc>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bb00:	f013 0f10 	tst.w	r3, #16
 800bb04:	8b63      	ldrh	r3, [r4, #26]
 800bb06:	d028      	beq.n	800bb5a <tcp_input+0x7f2>
 800bb08:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800bb0a:	69aa      	ldr	r2, [r5, #24]
 800bb0c:	4291      	cmp	r1, r2
 800bb0e:	d124      	bne.n	800bb5a <tcp_input+0x7f2>
 800bb10:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800bb12:	bb12      	cbnz	r2, 800bb5a <tcp_input+0x7f2>
          tcp_ack_now(pcb);
 800bb14:	f043 0302 	orr.w	r3, r3, #2
          tcp_pcb_purge(pcb);
 800bb18:	4620      	mov	r0, r4
          tcp_ack_now(pcb);
 800bb1a:	8363      	strh	r3, [r4, #26]
          tcp_pcb_purge(pcb);
 800bb1c:	f7fe fae4 	bl	800a0e8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800bb20:	f8d9 3000 	ldr.w	r3, [r9]
 800bb24:	429c      	cmp	r4, r3
 800bb26:	d10a      	bne.n	800bb3e <tcp_input+0x7d6>
        TCP_RMV_ACTIVE(pcb);
 800bb28:	68e3      	ldr	r3, [r4, #12]
 800bb2a:	f8c9 3000 	str.w	r3, [r9]
 800bb2e:	e008      	b.n	800bb42 <tcp_input+0x7da>
          TCP_RMV_ACTIVE(pcb);
 800bb30:	68da      	ldr	r2, [r3, #12]
 800bb32:	4294      	cmp	r4, r2
 800bb34:	d102      	bne.n	800bb3c <tcp_input+0x7d4>
        TCP_RMV_ACTIVE(pcb);
 800bb36:	68e2      	ldr	r2, [r4, #12]
 800bb38:	60da      	str	r2, [r3, #12]
 800bb3a:	e002      	b.n	800bb42 <tcp_input+0x7da>
 800bb3c:	4613      	mov	r3, r2
          TCP_RMV_ACTIVE(pcb);
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d1f6      	bne.n	800bb30 <tcp_input+0x7c8>
        TCP_RMV_ACTIVE(pcb);
 800bb42:	4b32      	ldr	r3, [pc, #200]	; (800bc0c <tcp_input+0x8a4>)
 800bb44:	2201      	movs	r2, #1
 800bb46:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800bb48:	230a      	movs	r3, #10
 800bb4a:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800bb4c:	4b30      	ldr	r3, [pc, #192]	; (800bc10 <tcp_input+0x8a8>)
 800bb4e:	681a      	ldr	r2, [r3, #0]
 800bb50:	601c      	str	r4, [r3, #0]
 800bb52:	60e2      	str	r2, [r4, #12]
 800bb54:	f001 faba 	bl	800d0cc <tcp_timer_needed>
    if (err != ERR_ABRT) {
 800bb58:	e66f      	b.n	800b83a <tcp_input+0x4d2>
          tcp_ack_now(pcb);
 800bb5a:	f043 0302 	orr.w	r3, r3, #2
 800bb5e:	8363      	strh	r3, [r4, #26]
          pcb->state = CLOSING;
 800bb60:	2308      	movs	r3, #8
 800bb62:	e79e      	b.n	800baa2 <tcp_input+0x73a>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bb64:	06d9      	lsls	r1, r3, #27
 800bb66:	f57f ae68 	bpl.w	800b83a <tcp_input+0x4d2>
 800bb6a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800bb6c:	69ab      	ldr	r3, [r5, #24]
 800bb6e:	429a      	cmp	r2, r3
 800bb70:	f47f ae63 	bne.w	800b83a <tcp_input+0x4d2>
 800bb74:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	f47f ae5f 	bne.w	800b83a <tcp_input+0x4d2>
        pcb->state = FIN_WAIT_2;
 800bb7c:	2306      	movs	r3, #6
 800bb7e:	e790      	b.n	800baa2 <tcp_input+0x73a>
      tcp_receive(pcb);
 800bb80:	4620      	mov	r0, r4
 800bb82:	f7ff f9bd 	bl	800af00 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800bb86:	7cab      	ldrb	r3, [r5, #18]
 800bb88:	069a      	lsls	r2, r3, #26
 800bb8a:	f57f ae56 	bpl.w	800b83a <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 800bb8e:	8b63      	ldrh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800bb90:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800bb92:	f043 0302 	orr.w	r3, r3, #2
 800bb96:	8363      	strh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800bb98:	f7fe faa6 	bl	800a0e8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800bb9c:	f8d9 3000 	ldr.w	r3, [r9]
 800bba0:	429c      	cmp	r4, r3
 800bba2:	d0c1      	beq.n	800bb28 <tcp_input+0x7c0>
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d0cc      	beq.n	800bb42 <tcp_input+0x7da>
 800bba8:	68da      	ldr	r2, [r3, #12]
 800bbaa:	4294      	cmp	r4, r2
 800bbac:	d0c3      	beq.n	800bb36 <tcp_input+0x7ce>
 800bbae:	4613      	mov	r3, r2
 800bbb0:	e7f8      	b.n	800bba4 <tcp_input+0x83c>
      tcp_receive(pcb);
 800bbb2:	4620      	mov	r0, r4
 800bbb4:	f7ff f9a4 	bl	800af00 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800bbb8:	7f2b      	ldrb	r3, [r5, #28]
 800bbba:	06db      	lsls	r3, r3, #27
 800bbbc:	f57f ae3d 	bpl.w	800b83a <tcp_input+0x4d2>
 800bbc0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800bbc2:	69ab      	ldr	r3, [r5, #24]
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	f47f ae38 	bne.w	800b83a <tcp_input+0x4d2>
 800bbca:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	f47f ae34 	bne.w	800b83a <tcp_input+0x4d2>
        tcp_pcb_purge(pcb);
 800bbd2:	4620      	mov	r0, r4
 800bbd4:	f7fe fa88 	bl	800a0e8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800bbd8:	f8d9 3000 	ldr.w	r3, [r9]
 800bbdc:	429c      	cmp	r4, r3
 800bbde:	d0a3      	beq.n	800bb28 <tcp_input+0x7c0>
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d0ae      	beq.n	800bb42 <tcp_input+0x7da>
 800bbe4:	68da      	ldr	r2, [r3, #12]
 800bbe6:	4294      	cmp	r4, r2
 800bbe8:	d0a5      	beq.n	800bb36 <tcp_input+0x7ce>
 800bbea:	4613      	mov	r3, r2
 800bbec:	e7f8      	b.n	800bbe0 <tcp_input+0x878>
 800bbee:	bf00      	nop
 800bbf0:	08021db5 	.word	0x08021db5
 800bbf4:	080220c3 	.word	0x080220c3
 800bbf8:	0801f8bf 	.word	0x0801f8bf
 800bbfc:	080220d9 	.word	0x080220d9
 800bc00:	24006a60 	.word	0x24006a60
 800bc04:	080220ec 	.word	0x080220ec
 800bc08:	240067ac 	.word	0x240067ac
 800bc0c:	2400a78c 	.word	0x2400a78c
 800bc10:	2400a7a0 	.word	0x2400a7a0
      tcp_receive(pcb);
 800bc14:	4620      	mov	r0, r4
 800bc16:	f7ff f973 	bl	800af00 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800bc1a:	7f2b      	ldrb	r3, [r5, #28]
 800bc1c:	06df      	lsls	r7, r3, #27
 800bc1e:	f57f ae0c 	bpl.w	800b83a <tcp_input+0x4d2>
 800bc22:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800bc24:	69ab      	ldr	r3, [r5, #24]
 800bc26:	429a      	cmp	r2, r3
 800bc28:	f47f ae07 	bne.w	800b83a <tcp_input+0x4d2>
 800bc2c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	f47f ae03 	bne.w	800b83a <tcp_input+0x4d2>
        recv_flags |= TF_CLOSED;
 800bc34:	7cab      	ldrb	r3, [r5, #18]
 800bc36:	f043 0310 	orr.w	r3, r3, #16
 800bc3a:	74ab      	strb	r3, [r5, #18]
    if (err != ERR_ABRT) {
 800bc3c:	e5fd      	b.n	800b83a <tcp_input+0x4d2>
        if (recv_acked > 0) {
 800bc3e:	8aaa      	ldrh	r2, [r5, #20]
 800bc40:	b11a      	cbz	r2, 800bc4a <tcp_input+0x8e2>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800bc42:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800bc44:	b9db      	cbnz	r3, 800bc7e <tcp_input+0x916>
          recv_acked = 0;
 800bc46:	2300      	movs	r3, #0
 800bc48:	82ab      	strh	r3, [r5, #20]
        if (tcp_input_delayed_close(pcb)) {
 800bc4a:	4620      	mov	r0, r4
 800bc4c:	f7ff f8d0 	bl	800adf0 <tcp_input_delayed_close>
 800bc50:	2800      	cmp	r0, #0
 800bc52:	f47f acc0 	bne.w	800b5d6 <tcp_input+0x26e>
        if (recv_data != NULL) {
 800bc56:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800bc58:	b323      	cbz	r3, 800bca4 <tcp_input+0x93c>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800bc5a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800bc5c:	b133      	cbz	r3, 800bc6c <tcp_input+0x904>
 800bc5e:	4b37      	ldr	r3, [pc, #220]	; (800bd3c <tcp_input+0x9d4>)
 800bc60:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800bc64:	4936      	ldr	r1, [pc, #216]	; (800bd40 <tcp_input+0x9d8>)
 800bc66:	4837      	ldr	r0, [pc, #220]	; (800bd44 <tcp_input+0x9dc>)
 800bc68:	f001 ff66 	bl	800db38 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800bc6c:	8b63      	ldrh	r3, [r4, #26]
 800bc6e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800bc70:	f013 0310 	ands.w	r3, r3, #16
 800bc74:	d009      	beq.n	800bc8a <tcp_input+0x922>
            pbuf_free(recv_data);
 800bc76:	4610      	mov	r0, r2
 800bc78:	f7fd fd78 	bl	800976c <pbuf_free>
 800bc7c:	e6d7      	b.n	800ba2e <tcp_input+0x6c6>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800bc7e:	4621      	mov	r1, r4
 800bc80:	6920      	ldr	r0, [r4, #16]
 800bc82:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800bc84:	300d      	adds	r0, #13
 800bc86:	d1de      	bne.n	800bc46 <tcp_input+0x8de>
 800bc88:	e4a5      	b.n	800b5d6 <tcp_input+0x26e>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800bc8a:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800bc8e:	b1f7      	cbz	r7, 800bcce <tcp_input+0x966>
 800bc90:	4621      	mov	r1, r4
 800bc92:	6920      	ldr	r0, [r4, #16]
 800bc94:	47b8      	blx	r7
          if (err == ERR_ABRT) {
 800bc96:	f110 0f0d 	cmn.w	r0, #13
 800bc9a:	f43f ac9c 	beq.w	800b5d6 <tcp_input+0x26e>
          if (err != ERR_OK) {
 800bc9e:	b108      	cbz	r0, 800bca4 <tcp_input+0x93c>
            pcb->refused_data = recv_data;
 800bca0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800bca2:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 800bca4:	7cab      	ldrb	r3, [r5, #18]
 800bca6:	0699      	lsls	r1, r3, #26
 800bca8:	d505      	bpl.n	800bcb6 <tcp_input+0x94e>
          if (pcb->refused_data != NULL) {
 800bcaa:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800bcac:	b1ab      	cbz	r3, 800bcda <tcp_input+0x972>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800bcae:	7b5a      	ldrb	r2, [r3, #13]
 800bcb0:	f042 0220 	orr.w	r2, r2, #32
 800bcb4:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800bcb6:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 800bcb8:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 800bcba:	6033      	str	r3, [r6, #0]
        if (tcp_input_delayed_close(pcb)) {
 800bcbc:	f7ff f898 	bl	800adf0 <tcp_input_delayed_close>
 800bcc0:	2800      	cmp	r0, #0
 800bcc2:	f47f ac88 	bne.w	800b5d6 <tcp_input+0x26e>
        tcp_output(pcb);
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	f000 ff2a 	bl	800cb20 <tcp_output>
 800bccc:	e483      	b.n	800b5d6 <tcp_input+0x26e>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800bcce:	463b      	mov	r3, r7
 800bcd0:	4621      	mov	r1, r4
 800bcd2:	4638      	mov	r0, r7
 800bcd4:	f7fe fd6c 	bl	800a7b0 <tcp_recv_null>
 800bcd8:	e7dd      	b.n	800bc96 <tcp_input+0x92e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800bcda:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800bcdc:	f640 3268 	movw	r2, #2920	; 0xb68
            TCP_EVENT_CLOSED(pcb, err);
 800bce0:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800bce4:	4293      	cmp	r3, r2
              pcb->rcv_wnd++;
 800bce6:	bf1c      	itt	ne
 800bce8:	3301      	addne	r3, #1
 800bcea:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800bcec:	2f00      	cmp	r7, #0
 800bcee:	d0e2      	beq.n	800bcb6 <tcp_input+0x94e>
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	4621      	mov	r1, r4
 800bcf4:	6920      	ldr	r0, [r4, #16]
 800bcf6:	461a      	mov	r2, r3
 800bcf8:	47b8      	blx	r7
            if (err == ERR_ABRT) {
 800bcfa:	300d      	adds	r0, #13
 800bcfc:	d1db      	bne.n	800bcb6 <tcp_input+0x94e>
 800bcfe:	e46a      	b.n	800b5d6 <tcp_input+0x26e>
      if (prev != NULL) {
 800bd00:	b11c      	cbz	r4, 800bd0a <tcp_input+0x9a2>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800bd02:	68fb      	ldr	r3, [r7, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800bd04:	6017      	str	r7, [r2, #0]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800bd06:	60e3      	str	r3, [r4, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800bd08:	60f8      	str	r0, [r7, #12]
  if (flags & TCP_RST) {
 800bd0a:	7f2b      	ldrb	r3, [r5, #28]
 800bd0c:	0758      	lsls	r0, r3, #29
 800bd0e:	f53f abdf 	bmi.w	800b4d0 <tcp_input+0x168>
  if (flags & TCP_ACK) {
 800bd12:	f013 0a10 	ands.w	sl, r3, #16
 800bd16:	f43f ad1a 	beq.w	800b74e <tcp_input+0x3e6>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bd1a:	880b      	ldrh	r3, [r1, #0]
 800bd1c:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 800bd1e:	6a2a      	ldr	r2, [r5, #32]
 800bd20:	e9cd c301 	strd	ip, r3, [sp, #4]
 800bd24:	4b08      	ldr	r3, [pc, #32]	; (800bd48 <tcp_input+0x9e0>)
 800bd26:	4402      	add	r2, r0
 800bd28:	9300      	str	r3, [sp, #0]
 800bd2a:	3304      	adds	r3, #4
 800bd2c:	69a9      	ldr	r1, [r5, #24]
 800bd2e:	4638      	mov	r0, r7
 800bd30:	e4c2      	b.n	800b6b8 <tcp_input+0x350>
      if (prev != NULL) {
 800bd32:	2f00      	cmp	r7, #0
 800bd34:	f47f ac16 	bne.w	800b564 <tcp_input+0x1fc>
 800bd38:	e425      	b.n	800b586 <tcp_input+0x21e>
 800bd3a:	bf00      	nop
 800bd3c:	08021db5 	.word	0x08021db5
 800bd40:	0802210a 	.word	0x0802210a
 800bd44:	0801f8bf 	.word	0x0801f8bf
 800bd48:	24006a60 	.word	0x24006a60

0800bd4c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800bd4c:	4a02      	ldr	r2, [pc, #8]	; (800bd58 <tcp_trigger_input_pcb_close+0xc>)
 800bd4e:	7c93      	ldrb	r3, [r2, #18]
 800bd50:	f043 0310 	orr.w	r3, r3, #16
 800bd54:	7493      	strb	r3, [r2, #18]
}
 800bd56:	4770      	bx	lr
 800bd58:	240067ac 	.word	0x240067ac

0800bd5c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800bd5c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800bd5e:	4604      	mov	r4, r0
 800bd60:	b930      	cbnz	r0, 800bd70 <tcp_output_segment_busy+0x14>
 800bd62:	4b06      	ldr	r3, [pc, #24]	; (800bd7c <tcp_output_segment_busy+0x20>)
 800bd64:	f240 529a 	movw	r2, #1434	; 0x59a
 800bd68:	4905      	ldr	r1, [pc, #20]	; (800bd80 <tcp_output_segment_busy+0x24>)
 800bd6a:	4806      	ldr	r0, [pc, #24]	; (800bd84 <tcp_output_segment_busy+0x28>)
 800bd6c:	f001 fee4 	bl	800db38 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800bd70:	6863      	ldr	r3, [r4, #4]
 800bd72:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 800bd74:	3801      	subs	r0, #1
 800bd76:	bf18      	it	ne
 800bd78:	2001      	movne	r0, #1
 800bd7a:	bd10      	pop	{r4, pc}
 800bd7c:	08022124 	.word	0x08022124
 800bd80:	08022188 	.word	0x08022188
 800bd84:	0801f8bf 	.word	0x0801f8bf

0800bd88 <tcp_pbuf_prealloc>:
{
 800bd88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd8c:	9d08      	ldr	r5, [sp, #32]
 800bd8e:	4680      	mov	r8, r0
 800bd90:	460c      	mov	r4, r1
 800bd92:	4617      	mov	r7, r2
 800bd94:	461e      	mov	r6, r3
 800bd96:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800bd9a:	b92d      	cbnz	r5, 800bda8 <tcp_pbuf_prealloc+0x20>
 800bd9c:	4b1c      	ldr	r3, [pc, #112]	; (800be10 <tcp_pbuf_prealloc+0x88>)
 800bd9e:	22e9      	movs	r2, #233	; 0xe9
 800bda0:	491c      	ldr	r1, [pc, #112]	; (800be14 <tcp_pbuf_prealloc+0x8c>)
 800bda2:	481d      	ldr	r0, [pc, #116]	; (800be18 <tcp_pbuf_prealloc+0x90>)
 800bda4:	f001 fec8 	bl	800db38 <iprintf>
  if (length < max_length) {
 800bda8:	42bc      	cmp	r4, r7
 800bdaa:	d22e      	bcs.n	800be0a <tcp_pbuf_prealloc+0x82>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800bdac:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800bdb0:	079a      	lsls	r2, r3, #30
 800bdb2:	d409      	bmi.n	800bdc8 <tcp_pbuf_prealloc+0x40>
 800bdb4:	8b6b      	ldrh	r3, [r5, #26]
 800bdb6:	065b      	lsls	r3, r3, #25
 800bdb8:	d427      	bmi.n	800be0a <tcp_pbuf_prealloc+0x82>
        (!(pcb->flags & TF_NODELAY) &&
 800bdba:	f1b9 0f00 	cmp.w	r9, #0
 800bdbe:	d003      	beq.n	800bdc8 <tcp_pbuf_prealloc+0x40>
         (!first_seg ||
 800bdc0:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800bdc2:	b90b      	cbnz	r3, 800bdc8 <tcp_pbuf_prealloc+0x40>
          pcb->unsent != NULL ||
 800bdc4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800bdc6:	b303      	cbz	r3, 800be0a <tcp_pbuf_prealloc+0x82>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800bdc8:	f204 55b7 	addw	r5, r4, #1463	; 0x5b7
 800bdcc:	f025 0103 	bic.w	r1, r5, #3
 800bdd0:	42b9      	cmp	r1, r7
 800bdd2:	460a      	mov	r2, r1
 800bdd4:	bf28      	it	cs
 800bdd6:	463a      	movcs	r2, r7
 800bdd8:	b291      	uxth	r1, r2
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800bdda:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bdde:	4640      	mov	r0, r8
 800bde0:	f7fd fd2c 	bl	800983c <pbuf_alloc>
  if (p == NULL) {
 800bde4:	4605      	mov	r5, r0
 800bde6:	b168      	cbz	r0, 800be04 <tcp_pbuf_prealloc+0x7c>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800bde8:	6803      	ldr	r3, [r0, #0]
 800bdea:	b133      	cbz	r3, 800bdfa <tcp_pbuf_prealloc+0x72>
 800bdec:	4b08      	ldr	r3, [pc, #32]	; (800be10 <tcp_pbuf_prealloc+0x88>)
 800bdee:	f240 120b 	movw	r2, #267	; 0x10b
 800bdf2:	490a      	ldr	r1, [pc, #40]	; (800be1c <tcp_pbuf_prealloc+0x94>)
 800bdf4:	4808      	ldr	r0, [pc, #32]	; (800be18 <tcp_pbuf_prealloc+0x90>)
 800bdf6:	f001 fe9f 	bl	800db38 <iprintf>
  *oversize = p->len - length;
 800bdfa:	896b      	ldrh	r3, [r5, #10]
 800bdfc:	1b1b      	subs	r3, r3, r4
 800bdfe:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 800be00:	812c      	strh	r4, [r5, #8]
 800be02:	816c      	strh	r4, [r5, #10]
}
 800be04:	4628      	mov	r0, r5
 800be06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be0a:	4621      	mov	r1, r4
 800be0c:	e7e5      	b.n	800bdda <tcp_pbuf_prealloc+0x52>
 800be0e:	bf00      	nop
 800be10:	08022124 	.word	0x08022124
 800be14:	080221ad 	.word	0x080221ad
 800be18:	0801f8bf 	.word	0x0801f8bf
 800be1c:	080221cc 	.word	0x080221cc

0800be20 <tcp_create_segment>:
{
 800be20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be24:	460e      	mov	r6, r1
 800be26:	4690      	mov	r8, r2
 800be28:	4699      	mov	r9, r3
 800be2a:	f89d a020 	ldrb.w	sl, [sp, #32]
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800be2e:	4607      	mov	r7, r0
 800be30:	b928      	cbnz	r0, 800be3e <tcp_create_segment+0x1e>
 800be32:	4b2e      	ldr	r3, [pc, #184]	; (800beec <tcp_create_segment+0xcc>)
 800be34:	22a3      	movs	r2, #163	; 0xa3
 800be36:	492e      	ldr	r1, [pc, #184]	; (800bef0 <tcp_create_segment+0xd0>)
 800be38:	482e      	ldr	r0, [pc, #184]	; (800bef4 <tcp_create_segment+0xd4>)
 800be3a:	f001 fe7d 	bl	800db38 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800be3e:	b92e      	cbnz	r6, 800be4c <tcp_create_segment+0x2c>
 800be40:	4b2a      	ldr	r3, [pc, #168]	; (800beec <tcp_create_segment+0xcc>)
 800be42:	22a4      	movs	r2, #164	; 0xa4
 800be44:	492c      	ldr	r1, [pc, #176]	; (800bef8 <tcp_create_segment+0xd8>)
 800be46:	482b      	ldr	r0, [pc, #172]	; (800bef4 <tcp_create_segment+0xd4>)
 800be48:	f001 fe76 	bl	800db38 <iprintf>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800be4c:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800be50:	2003      	movs	r0, #3
 800be52:	f7fd f9eb 	bl	800922c <memp_malloc>
 800be56:	4604      	mov	r4, r0
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800be58:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800be5c:	b928      	cbnz	r0, 800be6a <tcp_create_segment+0x4a>
    pbuf_free(p);
 800be5e:	4630      	mov	r0, r6
 800be60:	f7fd fc84 	bl	800976c <pbuf_free>
}
 800be64:	4620      	mov	r0, r4
 800be66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->next = NULL;
 800be6a:	2300      	movs	r3, #0
  seg->flags = optflags;
 800be6c:	f880 a00a 	strb.w	sl, [r0, #10]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800be70:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 800be74:	e9c0 3600 	strd	r3, r6, [r0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800be78:	8933      	ldrh	r3, [r6, #8]
 800be7a:	42ab      	cmp	r3, r5
 800be7c:	d205      	bcs.n	800be8a <tcp_create_segment+0x6a>
 800be7e:	4b1b      	ldr	r3, [pc, #108]	; (800beec <tcp_create_segment+0xcc>)
 800be80:	22b0      	movs	r2, #176	; 0xb0
 800be82:	491e      	ldr	r1, [pc, #120]	; (800befc <tcp_create_segment+0xdc>)
 800be84:	481b      	ldr	r0, [pc, #108]	; (800bef4 <tcp_create_segment+0xd4>)
 800be86:	f001 fe57 	bl	800db38 <iprintf>
  seg->len = p->tot_len - optlen;
 800be8a:	8933      	ldrh	r3, [r6, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800be8c:	4630      	mov	r0, r6
 800be8e:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 800be90:	eba3 030a 	sub.w	r3, r3, sl
 800be94:	8123      	strh	r3, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800be96:	f7fd fc31 	bl	80096fc <pbuf_add_header>
 800be9a:	4606      	mov	r6, r0
 800be9c:	b120      	cbz	r0, 800bea8 <tcp_create_segment+0x88>
    tcp_seg_free(seg);
 800be9e:	4620      	mov	r0, r4
    return NULL;
 800bea0:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 800bea2:	f7fe f897 	bl	8009fd4 <tcp_seg_free>
    return NULL;
 800bea6:	e7dd      	b.n	800be64 <tcp_create_segment+0x44>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800bea8:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800beaa:	08ad      	lsrs	r5, r5, #2
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800beac:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800beae:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800beb2:	3505      	adds	r5, #5
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800beb4:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800beb8:	f7fc fe9e 	bl	8008bf8 <lwip_htons>
 800bebc:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800bec0:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800bec4:	8b38      	ldrh	r0, [r7, #24]
 800bec6:	f7fc fe97 	bl	8008bf8 <lwip_htons>
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800beca:	68e7      	ldr	r7, [r4, #12]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800becc:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800bed0:	4648      	mov	r0, r9
 800bed2:	f7fc fe94 	bl	8008bfe <lwip_htonl>
 800bed6:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800bed8:	ea48 3005 	orr.w	r0, r8, r5, lsl #12
 800bedc:	68e7      	ldr	r7, [r4, #12]
 800bede:	f7fc fe8b 	bl	8008bf8 <lwip_htons>
  seg->tcphdr->urgp = 0;
 800bee2:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800bee4:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 800bee6:	749e      	strb	r6, [r3, #18]
 800bee8:	74de      	strb	r6, [r3, #19]
  return seg;
 800beea:	e7bb      	b.n	800be64 <tcp_create_segment+0x44>
 800beec:	08022124 	.word	0x08022124
 800bef0:	080221e0 	.word	0x080221e0
 800bef4:	0801f8bf 	.word	0x0801f8bf
 800bef8:	08022200 	.word	0x08022200
 800befc:	08022221 	.word	0x08022221

0800bf00 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800bf00:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800bf02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800bf06:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800bf08:	4606      	mov	r6, r0
 800bf0a:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800bf0c:	2022      	movs	r0, #34	; 0x22
 800bf0e:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800bf12:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800bf14:	f7fd fc92 	bl	800983c <pbuf_alloc>
  if (p != NULL) {
 800bf18:	4605      	mov	r5, r0
 800bf1a:	b348      	cbz	r0, 800bf70 <tcp_output_alloc_header_common.constprop.0+0x70>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800bf1c:	8943      	ldrh	r3, [r0, #10]
 800bf1e:	2b13      	cmp	r3, #19
 800bf20:	d806      	bhi.n	800bf30 <tcp_output_alloc_header_common.constprop.0+0x30>
 800bf22:	4b15      	ldr	r3, [pc, #84]	; (800bf78 <tcp_output_alloc_header_common.constprop.0+0x78>)
 800bf24:	f240 7223 	movw	r2, #1827	; 0x723
 800bf28:	4914      	ldr	r1, [pc, #80]	; (800bf7c <tcp_output_alloc_header_common.constprop.0+0x7c>)
 800bf2a:	4815      	ldr	r0, [pc, #84]	; (800bf80 <tcp_output_alloc_header_common.constprop.0+0x80>)
 800bf2c:	f001 fe04 	bl	800db38 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800bf30:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 800bf32:	4640      	mov	r0, r8
 800bf34:	f7fc fe60 	bl	8008bf8 <lwip_htons>
 800bf38:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800bf3a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800bf3e:	f7fc fe5b 	bl	8008bf8 <lwip_htons>
    tcphdr->seqno = seqno_be;
 800bf42:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 800bf44:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 800bf46:	4630      	mov	r0, r6
 800bf48:	f7fc fe59 	bl	8008bfe <lwip_htonl>
 800bf4c:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800bf4e:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800bf52:	f440 40a0 	orr.w	r0, r0, #20480	; 0x5000
 800bf56:	f7fc fe4f 	bl	8008bf8 <lwip_htons>
 800bf5a:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800bf5c:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 800bf60:	f7fc fe4a 	bl	8008bf8 <lwip_htons>
    tcphdr->chksum = 0;
 800bf64:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 800bf66:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 800bf68:	7423      	strb	r3, [r4, #16]
 800bf6a:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800bf6c:	74a3      	strb	r3, [r4, #18]
 800bf6e:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 800bf70:	4628      	mov	r0, r5
 800bf72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf76:	bf00      	nop
 800bf78:	08022124 	.word	0x08022124
 800bf7c:	08022236 	.word	0x08022236
 800bf80:	0801f8bf 	.word	0x0801f8bf

0800bf84 <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800bf84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800bf86:	460d      	mov	r5, r1
 800bf88:	4616      	mov	r6, r2
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800bf8a:	4604      	mov	r4, r0
 800bf8c:	b930      	cbnz	r0, 800bf9c <tcp_output_alloc_header.constprop.0+0x18>
 800bf8e:	4b0d      	ldr	r3, [pc, #52]	; (800bfc4 <tcp_output_alloc_header.constprop.0+0x40>)
 800bf90:	f240 7242 	movw	r2, #1858	; 0x742
 800bf94:	490c      	ldr	r1, [pc, #48]	; (800bfc8 <tcp_output_alloc_header.constprop.0+0x44>)
 800bf96:	480d      	ldr	r0, [pc, #52]	; (800bfcc <tcp_output_alloc_header.constprop.0+0x48>)
 800bf98:	f001 fdce 	bl	800db38 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800bf9c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800bf9e:	4632      	mov	r2, r6
 800bfa0:	4629      	mov	r1, r5
 800bfa2:	9302      	str	r3, [sp, #8]
 800bfa4:	2310      	movs	r3, #16
 800bfa6:	9301      	str	r3, [sp, #4]
 800bfa8:	8b23      	ldrh	r3, [r4, #24]
 800bfaa:	9300      	str	r3, [sp, #0]
 800bfac:	8ae3      	ldrh	r3, [r4, #22]
 800bfae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bfb0:	f7ff ffa6 	bl	800bf00 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800bfb4:	b118      	cbz	r0, 800bfbe <tcp_output_alloc_header.constprop.0+0x3a>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bfb6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800bfb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfba:	4413      	add	r3, r2
 800bfbc:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 800bfbe:	b004      	add	sp, #16
 800bfc0:	bd70      	pop	{r4, r5, r6, pc}
 800bfc2:	bf00      	nop
 800bfc4:	08022124 	.word	0x08022124
 800bfc8:	08022264 	.word	0x08022264
 800bfcc:	0801f8bf 	.word	0x0801f8bf

0800bfd0 <tcp_output_fill_options.isra.0.constprop.0>:
{
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800bfd0:	b930      	cbnz	r0, 800bfe0 <tcp_output_fill_options.isra.0.constprop.0+0x10>
 800bfd2:	4b04      	ldr	r3, [pc, #16]	; (800bfe4 <tcp_output_fill_options.isra.0.constprop.0+0x14>)
 800bfd4:	f240 7256 	movw	r2, #1878	; 0x756
 800bfd8:	4903      	ldr	r1, [pc, #12]	; (800bfe8 <tcp_output_fill_options.isra.0.constprop.0+0x18>)
 800bfda:	4804      	ldr	r0, [pc, #16]	; (800bfec <tcp_output_fill_options.isra.0.constprop.0+0x1c>)
 800bfdc:	f001 bdac 	b.w	800db38 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800bfe0:	4770      	bx	lr
 800bfe2:	bf00      	nop
 800bfe4:	08022124 	.word	0x08022124
 800bfe8:	08022289 	.word	0x08022289
 800bfec:	0801f8bf 	.word	0x0801f8bf

0800bff0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800bff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bff2:	4604      	mov	r4, r0
 800bff4:	b085      	sub	sp, #20
 800bff6:	4617      	mov	r7, r2
 800bff8:	461e      	mov	r6, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800bffa:	460d      	mov	r5, r1
 800bffc:	b931      	cbnz	r1, 800c00c <tcp_output_control_segment+0x1c>
 800bffe:	4b15      	ldr	r3, [pc, #84]	; (800c054 <tcp_output_control_segment+0x64>)
 800c000:	f240 7287 	movw	r2, #1927	; 0x787
 800c004:	4914      	ldr	r1, [pc, #80]	; (800c058 <tcp_output_control_segment+0x68>)
 800c006:	4815      	ldr	r0, [pc, #84]	; (800c05c <tcp_output_control_segment+0x6c>)
 800c008:	f001 fd96 	bl	800db38 <iprintf>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c00c:	b164      	cbz	r4, 800c028 <tcp_output_control_segment+0x38>
 800c00e:	7a20      	ldrb	r0, [r4, #8]
 800c010:	b150      	cbz	r0, 800c028 <tcp_output_control_segment+0x38>
    return netif_get_by_index(pcb->netif_idx);
 800c012:	f7fd faf1 	bl	80095f8 <netif_get_by_index>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 800c016:	b968      	cbnz	r0, 800c034 <tcp_output_control_segment+0x44>
    err = ERR_RTE;
 800c018:	f06f 0403 	mvn.w	r4, #3
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800c01c:	4628      	mov	r0, r5
 800c01e:	f7fd fba5 	bl	800976c <pbuf_free>
  return err;
}
 800c022:	4620      	mov	r0, r4
 800c024:	b005      	add	sp, #20
 800c026:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ip_route(src, dst);
 800c028:	4630      	mov	r0, r6
 800c02a:	f7fc f877 	bl	800811c <ip4_route>
  if (netif == NULL) {
 800c02e:	2800      	cmp	r0, #0
 800c030:	d0f2      	beq.n	800c018 <tcp_output_control_segment+0x28>
    if (pcb != NULL) {
 800c032:	b164      	cbz	r4, 800c04e <tcp_output_control_segment+0x5e>
      ttl = pcb->ttl;
 800c034:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 800c036:	7aa4      	ldrb	r4, [r4, #10]
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c038:	2206      	movs	r2, #6
 800c03a:	9002      	str	r0, [sp, #8]
 800c03c:	4639      	mov	r1, r7
 800c03e:	4628      	mov	r0, r5
 800c040:	e9cd 4200 	strd	r4, r2, [sp]
 800c044:	4632      	mov	r2, r6
 800c046:	f7fc f9d5 	bl	80083f4 <ip4_output_if>
 800c04a:	4604      	mov	r4, r0
 800c04c:	e7e6      	b.n	800c01c <tcp_output_control_segment+0x2c>
      ttl = TCP_TTL;
 800c04e:	23ff      	movs	r3, #255	; 0xff
 800c050:	e7f2      	b.n	800c038 <tcp_output_control_segment+0x48>
 800c052:	bf00      	nop
 800c054:	08022124 	.word	0x08022124
 800c058:	080222af 	.word	0x080222af
 800c05c:	0801f8bf 	.word	0x0801f8bf

0800c060 <tcp_write>:
{
 800c060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c064:	ed2d 8b02 	vpush	{d8}
 800c068:	b08f      	sub	sp, #60	; 0x3c
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800c06a:	4604      	mov	r4, r0
{
 800c06c:	9308      	str	r3, [sp, #32]
  u16_t oversize = 0;
 800c06e:	2300      	movs	r3, #0
{
 800c070:	9107      	str	r1, [sp, #28]
 800c072:	9204      	str	r2, [sp, #16]
  u16_t oversize = 0;
 800c074:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800c078:	b968      	cbnz	r0, 800c096 <tcp_write+0x36>
 800c07a:	4bab      	ldr	r3, [pc, #684]	; (800c328 <tcp_write+0x2c8>)
 800c07c:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800c080:	49aa      	ldr	r1, [pc, #680]	; (800c32c <tcp_write+0x2cc>)
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800c082:	48ab      	ldr	r0, [pc, #684]	; (800c330 <tcp_write+0x2d0>)
 800c084:	f001 fd58 	bl	800db38 <iprintf>
 800c088:	f06f 000f 	mvn.w	r0, #15
}
 800c08c:	b00f      	add	sp, #60	; 0x3c
 800c08e:	ecbd 8b02 	vpop	{d8}
 800c092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800c096:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800c09a:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800c09c:	085b      	lsrs	r3, r3, #1
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	bf28      	it	cs
 800c0a2:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	bf08      	it	eq
 800c0a8:	4613      	moveq	r3, r2
 800c0aa:	9306      	str	r3, [sp, #24]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800c0ac:	9b07      	ldr	r3, [sp, #28]
 800c0ae:	b923      	cbnz	r3, 800c0ba <tcp_write+0x5a>
 800c0b0:	4b9d      	ldr	r3, [pc, #628]	; (800c328 <tcp_write+0x2c8>)
 800c0b2:	f240 12ad 	movw	r2, #429	; 0x1ad
 800c0b6:	499f      	ldr	r1, [pc, #636]	; (800c334 <tcp_write+0x2d4>)
 800c0b8:	e7e3      	b.n	800c082 <tcp_write+0x22>
  if ((pcb->state != ESTABLISHED) &&
 800c0ba:	7d03      	ldrb	r3, [r0, #20]
 800c0bc:	2b07      	cmp	r3, #7
 800c0be:	d003      	beq.n	800c0c8 <tcp_write+0x68>
      (pcb->state != CLOSE_WAIT) &&
 800c0c0:	3b02      	subs	r3, #2
 800c0c2:	2b02      	cmp	r3, #2
 800c0c4:	f200 825b 	bhi.w	800c57e <tcp_write+0x51e>
  } else if (len == 0) {
 800c0c8:	9b04      	ldr	r3, [sp, #16]
 800c0ca:	b1db      	cbz	r3, 800c104 <tcp_write+0xa4>
  if (len > pcb->snd_buf) {
 800c0cc:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800c0d0:	9a04      	ldr	r2, [sp, #16]
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	d206      	bcs.n	800c0e4 <tcp_write+0x84>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c0d6:	8b63      	ldrh	r3, [r4, #26]
 800c0d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0dc:	8363      	strh	r3, [r4, #26]
  return ERR_MEM;
 800c0de:	f04f 30ff 	mov.w	r0, #4294967295
 800c0e2:	e7d3      	b.n	800c08c <tcp_write+0x2c>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800c0e4:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
 800c0e8:	2a07      	cmp	r2, #7
 800c0ea:	d8f4      	bhi.n	800c0d6 <tcp_write+0x76>
  if (pcb->snd_queuelen != 0) {
 800c0ec:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c0ee:	b302      	cbz	r2, 800c132 <tcp_write+0xd2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800c0f0:	b943      	cbnz	r3, 800c104 <tcp_write+0xa4>
 800c0f2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c0f4:	b933      	cbnz	r3, 800c104 <tcp_write+0xa4>
 800c0f6:	4b8c      	ldr	r3, [pc, #560]	; (800c328 <tcp_write+0x2c8>)
 800c0f8:	f240 1255 	movw	r2, #341	; 0x155
 800c0fc:	498e      	ldr	r1, [pc, #568]	; (800c338 <tcp_write+0x2d8>)
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800c0fe:	488c      	ldr	r0, [pc, #560]	; (800c330 <tcp_write+0x2d0>)
 800c100:	f001 fd1a 	bl	800db38 <iprintf>
  queuelen = pcb->snd_queuelen;
 800c104:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
  if (pcb->unsent != NULL) {
 800c108:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  queuelen = pcb->snd_queuelen;
 800c10a:	9305      	str	r3, [sp, #20]
  if (pcb->unsent != NULL) {
 800c10c:	b9de      	cbnz	r6, 800c146 <tcp_write+0xe6>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800c10e:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
 800c112:	2f00      	cmp	r7, #0
 800c114:	f000 81bc 	beq.w	800c490 <tcp_write+0x430>
 800c118:	4b83      	ldr	r3, [pc, #524]	; (800c328 <tcp_write+0x2c8>)
 800c11a:	f240 224a 	movw	r2, #586	; 0x24a
 800c11e:	4987      	ldr	r1, [pc, #540]	; (800c33c <tcp_write+0x2dc>)
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800c120:	46b0      	mov	r8, r6
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800c122:	4883      	ldr	r0, [pc, #524]	; (800c330 <tcp_write+0x2d0>)
  struct pbuf *concat_p = NULL;
 800c124:	46b2      	mov	sl, r6
  u16_t extendlen = 0;
 800c126:	46b1      	mov	r9, r6
  u16_t oversize_used = 0;
 800c128:	4635      	mov	r5, r6
  u16_t pos = 0; /* position in 'arg' data */
 800c12a:	4637      	mov	r7, r6
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800c12c:	f001 fd04 	bl	800db38 <iprintf>
 800c130:	e089      	b.n	800c246 <tcp_write+0x1e6>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800c132:	b913      	cbnz	r3, 800c13a <tcp_write+0xda>
 800c134:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c136:	2b00      	cmp	r3, #0
 800c138:	d0e4      	beq.n	800c104 <tcp_write+0xa4>
 800c13a:	4b7b      	ldr	r3, [pc, #492]	; (800c328 <tcp_write+0x2c8>)
 800c13c:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800c140:	497f      	ldr	r1, [pc, #508]	; (800c340 <tcp_write+0x2e0>)
 800c142:	e7dc      	b.n	800c0fe <tcp_write+0x9e>
 800c144:	4656      	mov	r6, sl
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c146:	f8d6 a000 	ldr.w	sl, [r6]
 800c14a:	46b0      	mov	r8, r6
 800c14c:	f1ba 0f00 	cmp.w	sl, #0
 800c150:	d1f8      	bne.n	800c144 <tcp_write+0xe4>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800c152:	7ab5      	ldrb	r5, [r6, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800c154:	8933      	ldrh	r3, [r6, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800c156:	00ad      	lsls	r5, r5, #2
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800c158:	9a06      	ldr	r2, [sp, #24]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800c15a:	f005 0504 	and.w	r5, r5, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800c15e:	442b      	add	r3, r5
 800c160:	429a      	cmp	r2, r3
 800c162:	da06      	bge.n	800c172 <tcp_write+0x112>
 800c164:	4b70      	ldr	r3, [pc, #448]	; (800c328 <tcp_write+0x2c8>)
 800c166:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800c16a:	4976      	ldr	r1, [pc, #472]	; (800c344 <tcp_write+0x2e4>)
 800c16c:	4870      	ldr	r0, [pc, #448]	; (800c330 <tcp_write+0x2d0>)
 800c16e:	f001 fce3 	bl	800db38 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800c172:	8937      	ldrh	r7, [r6, #8]
 800c174:	9b06      	ldr	r3, [sp, #24]
 800c176:	1bdf      	subs	r7, r3, r7
 800c178:	1b7f      	subs	r7, r7, r5
    oversize = pcb->unsent_oversize;
 800c17a:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 800c17e:	b2bf      	uxth	r7, r7
    oversize = pcb->unsent_oversize;
 800c180:	f8ad 5036 	strh.w	r5, [sp, #54]	; 0x36
    if (oversize > 0) {
 800c184:	2d00      	cmp	r5, #0
 800c186:	d067      	beq.n	800c258 <tcp_write+0x1f8>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800c188:	42bd      	cmp	r5, r7
 800c18a:	d906      	bls.n	800c19a <tcp_write+0x13a>
 800c18c:	4b66      	ldr	r3, [pc, #408]	; (800c328 <tcp_write+0x2c8>)
 800c18e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800c192:	496d      	ldr	r1, [pc, #436]	; (800c348 <tcp_write+0x2e8>)
 800c194:	4866      	ldr	r0, [pc, #408]	; (800c330 <tcp_write+0x2d0>)
 800c196:	f001 fccf 	bl	800db38 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800c19a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800c19e:	9a04      	ldr	r2, [sp, #16]
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	bf28      	it	cs
 800c1a4:	461a      	movcs	r2, r3
 800c1a6:	42ba      	cmp	r2, r7
 800c1a8:	4615      	mov	r5, r2
 800c1aa:	bf28      	it	cs
 800c1ac:	463d      	movcs	r5, r7
      oversize -= oversize_used;
 800c1ae:	1b5b      	subs	r3, r3, r5
      space -= oversize_used;
 800c1b0:	1b7f      	subs	r7, r7, r5
      oversize -= oversize_used;
 800c1b2:	b29b      	uxth	r3, r3
      space -= oversize_used;
 800c1b4:	b2bf      	uxth	r7, r7
      oversize -= oversize_used;
 800c1b6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800c1ba:	b153      	cbz	r3, 800c1d2 <tcp_write+0x172>
 800c1bc:	9b04      	ldr	r3, [sp, #16]
 800c1be:	42ab      	cmp	r3, r5
 800c1c0:	f000 816b 	beq.w	800c49a <tcp_write+0x43a>
 800c1c4:	4b58      	ldr	r3, [pc, #352]	; (800c328 <tcp_write+0x2c8>)
 800c1c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c1ca:	4960      	ldr	r1, [pc, #384]	; (800c34c <tcp_write+0x2ec>)
 800c1cc:	4858      	ldr	r0, [pc, #352]	; (800c330 <tcp_write+0x2d0>)
 800c1ce:	f001 fcb3 	bl	800db38 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800c1d2:	9b04      	ldr	r3, [sp, #16]
 800c1d4:	429d      	cmp	r5, r3
 800c1d6:	f080 8160 	bcs.w	800c49a <tcp_write+0x43a>
 800c1da:	2f00      	cmp	r7, #0
 800c1dc:	f000 8155 	beq.w	800c48a <tcp_write+0x42a>
 800c1e0:	f8b8 9008 	ldrh.w	r9, [r8, #8]
 800c1e4:	f1b9 0f00 	cmp.w	r9, #0
 800c1e8:	f000 8150 	beq.w	800c48c <tcp_write+0x42c>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800c1ec:	eba3 0905 	sub.w	r9, r3, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c1f0:	9b08      	ldr	r3, [sp, #32]
      u16_t seglen = LWIP_MIN(space, len - pos);
 800c1f2:	45b9      	cmp	r9, r7
 800c1f4:	bfa8      	it	ge
 800c1f6:	46b9      	movge	r9, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c1f8:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 800c1fa:	fa1f f689 	uxth.w	r6, r9
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c1fe:	d52d      	bpl.n	800c25c <tcp_write+0x1fc>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800c200:	2301      	movs	r3, #1
 800c202:	463a      	mov	r2, r7
 800c204:	4631      	mov	r1, r6
 800c206:	2000      	movs	r0, #0
 800c208:	9302      	str	r3, [sp, #8]
 800c20a:	9b08      	ldr	r3, [sp, #32]
 800c20c:	e9cd 4300 	strd	r4, r3, [sp]
 800c210:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800c214:	f7ff fdb8 	bl	800bd88 <tcp_pbuf_prealloc>
 800c218:	4683      	mov	fp, r0
 800c21a:	2800      	cmp	r0, #0
 800c21c:	f000 81ac 	beq.w	800c578 <tcp_write+0x518>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800c220:	9b07      	ldr	r3, [sp, #28]
 800c222:	4632      	mov	r2, r6
 800c224:	6840      	ldr	r0, [r0, #4]
 800c226:	1959      	adds	r1, r3, r5
 800c228:	f001 fc56 	bl	800dad8 <memcpy>
        queuelen += pbuf_clen(concat_p);
 800c22c:	4658      	mov	r0, fp
          queuelen += pbuf_clen(concat_p);
 800c22e:	f7fd fbd7 	bl	80099e0 <pbuf_clen>
 800c232:	9b05      	ldr	r3, [sp, #20]
  u16_t extendlen = 0;
 800c234:	f04f 0900 	mov.w	r9, #0
          queuelen += pbuf_clen(concat_p);
 800c238:	4403      	add	r3, r0
 800c23a:	b29b      	uxth	r3, r3
 800c23c:	9305      	str	r3, [sp, #20]
      pos += seglen;
 800c23e:	19af      	adds	r7, r5, r6
 800c240:	46da      	mov	sl, fp
 800c242:	4646      	mov	r6, r8
 800c244:	b2bf      	uxth	r7, r7
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c246:	9b08      	ldr	r3, [sp, #32]
  struct pbuf *concat_p = NULL;
 800c248:	f04f 0b00 	mov.w	fp, #0
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c24c:	f003 0301 	and.w	r3, r3, #1
  struct pbuf *concat_p = NULL;
 800c250:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c254:	930a      	str	r3, [sp, #40]	; 0x28
 800c256:	e0e7      	b.n	800c428 <tcp_write+0x3c8>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800c258:	462e      	mov	r6, r5
 800c25a:	e7ba      	b.n	800c1d2 <tcp_write+0x172>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800c25c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800c260:	465a      	mov	r2, fp
 800c262:	f8db b000 	ldr.w	fp, [fp]
 800c266:	f1bb 0f00 	cmp.w	fp, #0
 800c26a:	d1f9      	bne.n	800c260 <tcp_write+0x200>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c26c:	7b13      	ldrb	r3, [r2, #12]
 800c26e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 800c272:	d10f      	bne.n	800c294 <tcp_write+0x234>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800c274:	8951      	ldrh	r1, [r2, #10]
 800c276:	6853      	ldr	r3, [r2, #4]
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c278:	9a07      	ldr	r2, [sp, #28]
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800c27a:	440b      	add	r3, r1
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c27c:	429a      	cmp	r2, r3
 800c27e:	d109      	bne.n	800c294 <tcp_write+0x234>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800c280:	b135      	cbz	r5, 800c290 <tcp_write+0x230>
 800c282:	4b29      	ldr	r3, [pc, #164]	; (800c328 <tcp_write+0x2c8>)
 800c284:	f240 2231 	movw	r2, #561	; 0x231
 800c288:	4931      	ldr	r1, [pc, #196]	; (800c350 <tcp_write+0x2f0>)
 800c28a:	4829      	ldr	r0, [pc, #164]	; (800c330 <tcp_write+0x2d0>)
 800c28c:	f001 fc54 	bl	800db38 <iprintf>
          extendlen = seglen;
 800c290:	46b1      	mov	r9, r6
 800c292:	e7d4      	b.n	800c23e <tcp_write+0x1de>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800c294:	2201      	movs	r2, #1
 800c296:	4631      	mov	r1, r6
 800c298:	2000      	movs	r0, #0
 800c29a:	f7fd facf 	bl	800983c <pbuf_alloc>
 800c29e:	4683      	mov	fp, r0
 800c2a0:	2800      	cmp	r0, #0
 800c2a2:	f000 8169 	beq.w	800c578 <tcp_write+0x518>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800c2a6:	9b07      	ldr	r3, [sp, #28]
 800c2a8:	442b      	add	r3, r5
 800c2aa:	6043      	str	r3, [r0, #4]
 800c2ac:	e7bf      	b.n	800c22e <tcp_write+0x1ce>
    u16_t left = len - pos;
 800c2ae:	9b04      	ldr	r3, [sp, #16]
    u16_t seglen = LWIP_MIN(left, max_len);
 800c2b0:	9a06      	ldr	r2, [sp, #24]
    u16_t left = len - pos;
 800c2b2:	1bdb      	subs	r3, r3, r7
    u16_t seglen = LWIP_MIN(left, max_len);
 800c2b4:	b29b      	uxth	r3, r3
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	bf28      	it	cs
 800c2ba:	4613      	movcs	r3, r2
 800c2bc:	b29b      	uxth	r3, r3
 800c2be:	ee08 3a10 	vmov	s16, r3
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c2c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d047      	beq.n	800c358 <tcp_write+0x2f8>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800c2c8:	fabb f38b 	clz	r3, fp
 800c2cc:	ee18 1a10 	vmov	r1, s16
 800c2d0:	2036      	movs	r0, #54	; 0x36
 800c2d2:	095b      	lsrs	r3, r3, #5
 800c2d4:	9302      	str	r3, [sp, #8]
 800c2d6:	9b08      	ldr	r3, [sp, #32]
 800c2d8:	e9cd 4300 	strd	r4, r3, [sp]
 800c2dc:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800c2e0:	f7ff fd52 	bl	800bd88 <tcp_pbuf_prealloc>
 800c2e4:	4606      	mov	r6, r0
 800c2e6:	2800      	cmp	r0, #0
 800c2e8:	d057      	beq.n	800c39a <tcp_write+0x33a>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800c2ea:	8943      	ldrh	r3, [r0, #10]
 800c2ec:	ee18 2a10 	vmov	r2, s16
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	d206      	bcs.n	800c302 <tcp_write+0x2a2>
 800c2f4:	4b0c      	ldr	r3, [pc, #48]	; (800c328 <tcp_write+0x2c8>)
 800c2f6:	f240 2266 	movw	r2, #614	; 0x266
 800c2fa:	4916      	ldr	r1, [pc, #88]	; (800c354 <tcp_write+0x2f4>)
 800c2fc:	480c      	ldr	r0, [pc, #48]	; (800c330 <tcp_write+0x2d0>)
 800c2fe:	f001 fc1b 	bl	800db38 <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800c302:	9b07      	ldr	r3, [sp, #28]
 800c304:	ee18 2a10 	vmov	r2, s16
 800c308:	6870      	ldr	r0, [r6, #4]
 800c30a:	19d9      	adds	r1, r3, r7
 800c30c:	f001 fbe4 	bl	800dad8 <memcpy>
    queuelen += pbuf_clen(p);
 800c310:	4630      	mov	r0, r6
 800c312:	f7fd fb65 	bl	80099e0 <pbuf_clen>
 800c316:	9b05      	ldr	r3, [sp, #20]
 800c318:	4403      	add	r3, r0
 800c31a:	b29b      	uxth	r3, r3
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800c31c:	2b08      	cmp	r3, #8
    queuelen += pbuf_clen(p);
 800c31e:	9305      	str	r3, [sp, #20]
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800c320:	d964      	bls.n	800c3ec <tcp_write+0x38c>
      pbuf_free(p);
 800c322:	4630      	mov	r0, r6
 800c324:	e037      	b.n	800c396 <tcp_write+0x336>
 800c326:	bf00      	nop
 800c328:	08022124 	.word	0x08022124
 800c32c:	080222d8 	.word	0x080222d8
 800c330:	0801f8bf 	.word	0x0801f8bf
 800c334:	080222ef 	.word	0x080222ef
 800c338:	08022320 	.word	0x08022320
 800c33c:	0802240a 	.word	0x0802240a
 800c340:	0802235a 	.word	0x0802235a
 800c344:	0802238c 	.word	0x0802238c
 800c348:	080223a3 	.word	0x080223a3
 800c34c:	080223c3 	.word	0x080223c3
 800c350:	080223e1 	.word	0x080223e1
 800c354:	08022439 	.word	0x08022439
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800c358:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800c35c:	b133      	cbz	r3, 800c36c <tcp_write+0x30c>
 800c35e:	4b89      	ldr	r3, [pc, #548]	; (800c584 <tcp_write+0x524>)
 800c360:	f240 2271 	movw	r2, #625	; 0x271
 800c364:	4988      	ldr	r1, [pc, #544]	; (800c588 <tcp_write+0x528>)
 800c366:	4889      	ldr	r0, [pc, #548]	; (800c58c <tcp_write+0x52c>)
 800c368:	f001 fbe6 	bl	800db38 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800c36c:	2201      	movs	r2, #1
 800c36e:	ee18 1a10 	vmov	r1, s16
 800c372:	2036      	movs	r0, #54	; 0x36
 800c374:	f7fd fa62 	bl	800983c <pbuf_alloc>
 800c378:	b178      	cbz	r0, 800c39a <tcp_write+0x33a>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800c37a:	9a07      	ldr	r2, [sp, #28]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c37c:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800c37e:	900b      	str	r0, [sp, #44]	; 0x2c
 800c380:	443a      	add	r2, r7
 800c382:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c384:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c388:	2036      	movs	r0, #54	; 0x36
 800c38a:	f7fd fa57 	bl	800983c <pbuf_alloc>
 800c38e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c390:	4606      	mov	r6, r0
 800c392:	bb38      	cbnz	r0, 800c3e4 <tcp_write+0x384>
        pbuf_free(p2);
 800c394:	4618      	mov	r0, r3
      pbuf_free(p);
 800c396:	f7fd f9e9 	bl	800976c <pbuf_free>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c39a:	8b63      	ldrh	r3, [r4, #26]
 800c39c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3a0:	8363      	strh	r3, [r4, #26]
  if (concat_p != NULL) {
 800c3a2:	f1ba 0f00 	cmp.w	sl, #0
 800c3a6:	d002      	beq.n	800c3ae <tcp_write+0x34e>
    pbuf_free(concat_p);
 800c3a8:	4650      	mov	r0, sl
 800c3aa:	f7fd f9df 	bl	800976c <pbuf_free>
  if (queue != NULL) {
 800c3ae:	f1bb 0f00 	cmp.w	fp, #0
 800c3b2:	d002      	beq.n	800c3ba <tcp_write+0x35a>
    tcp_segs_free(queue);
 800c3b4:	4658      	mov	r0, fp
 800c3b6:	f7fd fe1b 	bl	8009ff0 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800c3ba:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	f43f ae8d 	beq.w	800c0de <tcp_write+0x7e>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800c3c4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	f47f ae89 	bne.w	800c0de <tcp_write+0x7e>
 800c3cc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	f47f ae85 	bne.w	800c0de <tcp_write+0x7e>
 800c3d4:	4b6b      	ldr	r3, [pc, #428]	; (800c584 <tcp_write+0x524>)
 800c3d6:	f240 3227 	movw	r2, #807	; 0x327
 800c3da:	496d      	ldr	r1, [pc, #436]	; (800c590 <tcp_write+0x530>)
 800c3dc:	486b      	ldr	r0, [pc, #428]	; (800c58c <tcp_write+0x52c>)
 800c3de:	f001 fbab 	bl	800db38 <iprintf>
 800c3e2:	e67c      	b.n	800c0de <tcp_write+0x7e>
      pbuf_cat(p/*header*/, p2/*data*/);
 800c3e4:	4619      	mov	r1, r3
 800c3e6:	f7fd fb1f 	bl	8009a28 <pbuf_cat>
 800c3ea:	e791      	b.n	800c310 <tcp_write+0x2b0>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800c3ec:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	4631      	mov	r1, r6
 800c3f2:	4620      	mov	r0, r4
 800c3f4:	443b      	add	r3, r7
 800c3f6:	9200      	str	r2, [sp, #0]
 800c3f8:	f7ff fd12 	bl	800be20 <tcp_create_segment>
 800c3fc:	4606      	mov	r6, r0
 800c3fe:	2800      	cmp	r0, #0
 800c400:	d0cb      	beq.n	800c39a <tcp_write+0x33a>
    if (queue == NULL) {
 800c402:	f1bb 0f00 	cmp.w	fp, #0
 800c406:	d03e      	beq.n	800c486 <tcp_write+0x426>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800c408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c40a:	b933      	cbnz	r3, 800c41a <tcp_write+0x3ba>
 800c40c:	4b5d      	ldr	r3, [pc, #372]	; (800c584 <tcp_write+0x524>)
 800c40e:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c412:	4960      	ldr	r1, [pc, #384]	; (800c594 <tcp_write+0x534>)
 800c414:	485d      	ldr	r0, [pc, #372]	; (800c58c <tcp_write+0x52c>)
 800c416:	f001 fb8f 	bl	800db38 <iprintf>
      prev_seg->next = seg;
 800c41a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c41c:	601e      	str	r6, [r3, #0]
    pos += seglen;
 800c41e:	ee18 3a10 	vmov	r3, s16
 800c422:	9609      	str	r6, [sp, #36]	; 0x24
 800c424:	441f      	add	r7, r3
 800c426:	b2bf      	uxth	r7, r7
  while (pos < len) {
 800c428:	9b04      	ldr	r3, [sp, #16]
 800c42a:	429f      	cmp	r7, r3
 800c42c:	f4ff af3f 	bcc.w	800c2ae <tcp_write+0x24e>
 800c430:	4657      	mov	r7, sl
 800c432:	46da      	mov	sl, fp
  if (oversize_used > 0) {
 800c434:	b14d      	cbz	r5, 800c44a <tcp_write+0x3ea>
    for (p = last_unsent->p; p; p = p->next) {
 800c436:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800c43a:	f1bb 0f00 	cmp.w	fp, #0
 800c43e:	d12f      	bne.n	800c4a0 <tcp_write+0x440>
    last_unsent->len += oversize_used;
 800c440:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800c444:	441d      	add	r5, r3
 800c446:	f8a8 5008 	strh.w	r5, [r8, #8]
  pcb->unsent_oversize = oversize;
 800c44a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800c44e:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if (concat_p != NULL) {
 800c452:	2f00      	cmp	r7, #0
 800c454:	d03d      	beq.n	800c4d2 <tcp_write+0x472>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800c456:	f1b8 0f00 	cmp.w	r8, #0
 800c45a:	d106      	bne.n	800c46a <tcp_write+0x40a>
 800c45c:	4b49      	ldr	r3, [pc, #292]	; (800c584 <tcp_write+0x524>)
 800c45e:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800c462:	494d      	ldr	r1, [pc, #308]	; (800c598 <tcp_write+0x538>)
 800c464:	4849      	ldr	r0, [pc, #292]	; (800c58c <tcp_write+0x52c>)
 800c466:	f001 fb67 	bl	800db38 <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 800c46a:	4639      	mov	r1, r7
 800c46c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c470:	f7fd fada 	bl	8009a28 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800c474:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800c478:	893a      	ldrh	r2, [r7, #8]
 800c47a:	4413      	add	r3, r2
 800c47c:	f8a8 3008 	strh.w	r3, [r8, #8]
    last_unsent->next = queue;
 800c480:	f8c8 a000 	str.w	sl, [r8]
 800c484:	e04d      	b.n	800c522 <tcp_write+0x4c2>
 800c486:	4683      	mov	fp, r0
 800c488:	e7c9      	b.n	800c41e <tcp_write+0x3be>
  u16_t extendlen = 0;
 800c48a:	46b9      	mov	r9, r7
 800c48c:	462f      	mov	r7, r5
 800c48e:	e6da      	b.n	800c246 <tcp_write+0x1e6>
 800c490:	46b9      	mov	r9, r7
  u16_t oversize_used = 0;
 800c492:	463d      	mov	r5, r7
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800c494:	46b8      	mov	r8, r7
  struct pbuf *concat_p = NULL;
 800c496:	46ba      	mov	sl, r7
 800c498:	e6d5      	b.n	800c246 <tcp_write+0x1e6>
 800c49a:	2700      	movs	r7, #0
  u16_t extendlen = 0;
 800c49c:	46b9      	mov	r9, r7
 800c49e:	e7c9      	b.n	800c434 <tcp_write+0x3d4>
      p->tot_len += oversize_used;
 800c4a0:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800c4a4:	442b      	add	r3, r5
 800c4a6:	f8ab 3008 	strh.w	r3, [fp, #8]
      if (p->next == NULL) {
 800c4aa:	f8db 3000 	ldr.w	r3, [fp]
 800c4ae:	b96b      	cbnz	r3, 800c4cc <tcp_write+0x46c>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800c4b0:	f8db 3004 	ldr.w	r3, [fp, #4]
 800c4b4:	462a      	mov	r2, r5
 800c4b6:	f8bb 000a 	ldrh.w	r0, [fp, #10]
 800c4ba:	9907      	ldr	r1, [sp, #28]
 800c4bc:	4418      	add	r0, r3
 800c4be:	f001 fb0b 	bl	800dad8 <memcpy>
        p->len += oversize_used;
 800c4c2:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 800c4c6:	442b      	add	r3, r5
 800c4c8:	f8ab 300a 	strh.w	r3, [fp, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800c4cc:	f8db b000 	ldr.w	fp, [fp]
 800c4d0:	e7b3      	b.n	800c43a <tcp_write+0x3da>
  } else if (extendlen > 0) {
 800c4d2:	f1b9 0f00 	cmp.w	r9, #0
 800c4d6:	d01f      	beq.n	800c518 <tcp_write+0x4b8>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800c4d8:	f1b8 0f00 	cmp.w	r8, #0
 800c4dc:	d002      	beq.n	800c4e4 <tcp_write+0x484>
 800c4de:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c4e2:	b933      	cbnz	r3, 800c4f2 <tcp_write+0x492>
 800c4e4:	4b27      	ldr	r3, [pc, #156]	; (800c584 <tcp_write+0x524>)
 800c4e6:	f240 22e6 	movw	r2, #742	; 0x2e6
 800c4ea:	492c      	ldr	r1, [pc, #176]	; (800c59c <tcp_write+0x53c>)
 800c4ec:	4827      	ldr	r0, [pc, #156]	; (800c58c <tcp_write+0x52c>)
 800c4ee:	f001 fb23 	bl	800db38 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c4f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c4f6:	891a      	ldrh	r2, [r3, #8]
 800c4f8:	6819      	ldr	r1, [r3, #0]
 800c4fa:	444a      	add	r2, r9
 800c4fc:	b292      	uxth	r2, r2
      p->tot_len += extendlen;
 800c4fe:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c500:	b941      	cbnz	r1, 800c514 <tcp_write+0x4b4>
    p->len += extendlen;
 800c502:	895a      	ldrh	r2, [r3, #10]
 800c504:	444a      	add	r2, r9
 800c506:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800c508:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800c50c:	4499      	add	r9, r3
 800c50e:	f8a8 9008 	strh.w	r9, [r8, #8]
 800c512:	e7b5      	b.n	800c480 <tcp_write+0x420>
      p->tot_len += extendlen;
 800c514:	460b      	mov	r3, r1
 800c516:	e7ee      	b.n	800c4f6 <tcp_write+0x496>
  if (last_unsent == NULL) {
 800c518:	f1b8 0f00 	cmp.w	r8, #0
 800c51c:	d1b0      	bne.n	800c480 <tcp_write+0x420>
    pcb->unsent = queue;
 800c51e:	f8c4 a06c 	str.w	sl, [r4, #108]	; 0x6c
  pcb->snd_lbb += len;
 800c522:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800c524:	9a04      	ldr	r2, [sp, #16]
 800c526:	4413      	add	r3, r2
  pcb->snd_buf -= len;
 800c528:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
  pcb->snd_lbb += len;
 800c52c:	65e3      	str	r3, [r4, #92]	; 0x5c
  pcb->snd_buf -= len;
 800c52e:	9b04      	ldr	r3, [sp, #16]
 800c530:	1ad2      	subs	r2, r2, r3
  pcb->snd_queuelen = queuelen;
 800c532:	9b05      	ldr	r3, [sp, #20]
  pcb->snd_buf -= len;
 800c534:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800c538:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800c53c:	b153      	cbz	r3, 800c554 <tcp_write+0x4f4>
    LWIP_ASSERT("tcp_write: valid queue length",
 800c53e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c540:	b943      	cbnz	r3, 800c554 <tcp_write+0x4f4>
 800c542:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c544:	b933      	cbnz	r3, 800c554 <tcp_write+0x4f4>
 800c546:	4b0f      	ldr	r3, [pc, #60]	; (800c584 <tcp_write+0x524>)
 800c548:	f240 3212 	movw	r2, #786	; 0x312
 800c54c:	4910      	ldr	r1, [pc, #64]	; (800c590 <tcp_write+0x530>)
 800c54e:	480f      	ldr	r0, [pc, #60]	; (800c58c <tcp_write+0x52c>)
 800c550:	f001 faf2 	bl	800db38 <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800c554:	b176      	cbz	r6, 800c574 <tcp_write+0x514>
 800c556:	68f0      	ldr	r0, [r6, #12]
 800c558:	2800      	cmp	r0, #0
 800c55a:	f43f ad97 	beq.w	800c08c <tcp_write+0x2c>
 800c55e:	9b08      	ldr	r3, [sp, #32]
 800c560:	f013 0402 	ands.w	r4, r3, #2
 800c564:	d106      	bne.n	800c574 <tcp_write+0x514>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800c566:	8985      	ldrh	r5, [r0, #12]
 800c568:	2008      	movs	r0, #8
 800c56a:	f7fc fb45 	bl	8008bf8 <lwip_htons>
 800c56e:	68f3      	ldr	r3, [r6, #12]
 800c570:	4328      	orrs	r0, r5
 800c572:	8198      	strh	r0, [r3, #12]
  return ERR_OK;
 800c574:	2000      	movs	r0, #0
 800c576:	e589      	b.n	800c08c <tcp_write+0x2c>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800c578:	f04f 0b00 	mov.w	fp, #0
 800c57c:	e70d      	b.n	800c39a <tcp_write+0x33a>
    return ERR_CONN;
 800c57e:	f06f 000a 	mvn.w	r0, #10
 800c582:	e583      	b.n	800c08c <tcp_write+0x2c>
 800c584:	08022124 	.word	0x08022124
 800c588:	08022477 	.word	0x08022477
 800c58c:	0801f8bf 	.word	0x0801f8bf
 800c590:	08022503 	.word	0x08022503
 800c594:	08022485 	.word	0x08022485
 800c598:	08022496 	.word	0x08022496
 800c59c:	080224ce 	.word	0x080224ce

0800c5a0 <tcp_split_unsent_seg>:
{
 800c5a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5a4:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c5a6:	4606      	mov	r6, r0
 800c5a8:	b930      	cbnz	r0, 800c5b8 <tcp_split_unsent_seg+0x18>
 800c5aa:	4b5d      	ldr	r3, [pc, #372]	; (800c720 <tcp_split_unsent_seg+0x180>)
 800c5ac:	f240 324b 	movw	r2, #843	; 0x34b
 800c5b0:	495c      	ldr	r1, [pc, #368]	; (800c724 <tcp_split_unsent_seg+0x184>)
 800c5b2:	485d      	ldr	r0, [pc, #372]	; (800c728 <tcp_split_unsent_seg+0x188>)
 800c5b4:	f001 fac0 	bl	800db38 <iprintf>
  useg = pcb->unsent;
 800c5b8:	6ef4      	ldr	r4, [r6, #108]	; 0x6c
  if (useg == NULL) {
 800c5ba:	b914      	cbnz	r4, 800c5c2 <tcp_split_unsent_seg+0x22>
  return ERR_MEM;
 800c5bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c5c0:	e009      	b.n	800c5d6 <tcp_split_unsent_seg+0x36>
  if (split == 0) {
 800c5c2:	b95d      	cbnz	r5, 800c5dc <tcp_split_unsent_seg+0x3c>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800c5c4:	4b56      	ldr	r3, [pc, #344]	; (800c720 <tcp_split_unsent_seg+0x180>)
 800c5c6:	f240 3253 	movw	r2, #851	; 0x353
 800c5ca:	4958      	ldr	r1, [pc, #352]	; (800c72c <tcp_split_unsent_seg+0x18c>)
 800c5cc:	4856      	ldr	r0, [pc, #344]	; (800c728 <tcp_split_unsent_seg+0x188>)
 800c5ce:	f001 fab3 	bl	800db38 <iprintf>
    return ERR_VAL;
 800c5d2:	f06f 0005 	mvn.w	r0, #5
}
 800c5d6:	b003      	add	sp, #12
 800c5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (useg->len <= split) {
 800c5dc:	8923      	ldrh	r3, [r4, #8]
 800c5de:	42ab      	cmp	r3, r5
 800c5e0:	d801      	bhi.n	800c5e6 <tcp_split_unsent_seg+0x46>
    return ERR_OK;
 800c5e2:	2000      	movs	r0, #0
 800c5e4:	e7f7      	b.n	800c5d6 <tcp_split_unsent_seg+0x36>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c5e6:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 800c5e8:	42ab      	cmp	r3, r5
 800c5ea:	d206      	bcs.n	800c5fa <tcp_split_unsent_seg+0x5a>
 800c5ec:	4b4c      	ldr	r3, [pc, #304]	; (800c720 <tcp_split_unsent_seg+0x180>)
 800c5ee:	f240 325b 	movw	r2, #859	; 0x35b
 800c5f2:	494f      	ldr	r1, [pc, #316]	; (800c730 <tcp_split_unsent_seg+0x190>)
 800c5f4:	484c      	ldr	r0, [pc, #304]	; (800c728 <tcp_split_unsent_seg+0x188>)
 800c5f6:	f001 fa9f 	bl	800db38 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c5fa:	8923      	ldrh	r3, [r4, #8]
 800c5fc:	b933      	cbnz	r3, 800c60c <tcp_split_unsent_seg+0x6c>
 800c5fe:	4b48      	ldr	r3, [pc, #288]	; (800c720 <tcp_split_unsent_seg+0x180>)
 800c600:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800c604:	494b      	ldr	r1, [pc, #300]	; (800c734 <tcp_split_unsent_seg+0x194>)
 800c606:	4848      	ldr	r0, [pc, #288]	; (800c728 <tcp_split_unsent_seg+0x188>)
 800c608:	f001 fa96 	bl	800db38 <iprintf>
  optflags = useg->flags;
 800c60c:	f894 b00a 	ldrb.w	fp, [r4, #10]
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c610:	f44f 7220 	mov.w	r2, #640	; 0x280
  remainder = useg->len - split;
 800c614:	f8b4 a008 	ldrh.w	sl, [r4, #8]
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c618:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c61a:	ea4f 078b 	mov.w	r7, fp, lsl #2
  remainder = useg->len - split;
 800c61e:	ebaa 0105 	sub.w	r1, sl, r5
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c622:	f007 0704 	and.w	r7, r7, #4
  remainder = useg->len - split;
 800c626:	fa1f f881 	uxth.w	r8, r1
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c62a:	fa17 f181 	uxtah	r1, r7, r1
 800c62e:	b289      	uxth	r1, r1
 800c630:	f7fd f904 	bl	800983c <pbuf_alloc>
  if (p == NULL) {
 800c634:	4681      	mov	r9, r0
 800c636:	2800      	cmp	r0, #0
 800c638:	d0c0      	beq.n	800c5bc <tcp_split_unsent_seg+0x1c>
  offset = useg->p->tot_len - useg->len + split;
 800c63a:	6860      	ldr	r0, [r4, #4]
 800c63c:	8922      	ldrh	r2, [r4, #8]
 800c63e:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c640:	f8d9 1004 	ldr.w	r1, [r9, #4]
  offset = useg->p->tot_len - useg->len + split;
 800c644:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c646:	4642      	mov	r2, r8
 800c648:	4439      	add	r1, r7
  offset = useg->p->tot_len - useg->len + split;
 800c64a:	442b      	add	r3, r5
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c64c:	b29b      	uxth	r3, r3
 800c64e:	f7fd fab1 	bl	8009bb4 <pbuf_copy_partial>
 800c652:	4540      	cmp	r0, r8
 800c654:	d160      	bne.n	800c718 <tcp_split_unsent_seg+0x178>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c656:	68e3      	ldr	r3, [r4, #12]
 800c658:	8998      	ldrh	r0, [r3, #12]
 800c65a:	f7fc facd 	bl	8008bf8 <lwip_htons>
  if (split_flags & TCP_PSH) {
 800c65e:	f010 0808 	ands.w	r8, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c662:	b2c7      	uxtb	r7, r0
    remainder_flags |= TCP_PSH;
 800c664:	bf16      	itet	ne
 800c666:	f04f 0808 	movne.w	r8, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c66a:	f007 073f 	andeq.w	r7, r7, #63	; 0x3f
    split_flags &= ~TCP_PSH;
 800c66e:	f007 0737 	andne.w	r7, r7, #55	; 0x37
  if (split_flags & TCP_FIN) {
 800c672:	07fb      	lsls	r3, r7, #31
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c674:	68e3      	ldr	r3, [r4, #12]
    remainder_flags |= TCP_FIN;
 800c676:	bf48      	it	mi
 800c678:	f048 0801 	orrmi.w	r8, r8, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c67c:	6858      	ldr	r0, [r3, #4]
    split_flags &= ~TCP_FIN;
 800c67e:	bf48      	it	mi
 800c680:	f007 07fe 	andmi.w	r7, r7, #254	; 0xfe
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c684:	f7fc fabb 	bl	8008bfe <lwip_htonl>
 800c688:	4642      	mov	r2, r8
 800c68a:	182b      	adds	r3, r5, r0
 800c68c:	4649      	mov	r1, r9
 800c68e:	4630      	mov	r0, r6
 800c690:	f8cd b000 	str.w	fp, [sp]
 800c694:	f7ff fbc4 	bl	800be20 <tcp_create_segment>
  if (seg == NULL) {
 800c698:	4680      	mov	r8, r0
 800c69a:	2800      	cmp	r0, #0
 800c69c:	d03c      	beq.n	800c718 <tcp_split_unsent_seg+0x178>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c69e:	6860      	ldr	r0, [r4, #4]
 800c6a0:	eba5 050a 	sub.w	r5, r5, sl
 800c6a4:	f7fd f99c 	bl	80099e0 <pbuf_clen>
 800c6a8:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800c6ac:	fa1f f985 	uxth.w	r9, r5
 800c6b0:	1a18      	subs	r0, r3, r0
 800c6b2:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c6b6:	6860      	ldr	r0, [r4, #4]
 800c6b8:	8901      	ldrh	r1, [r0, #8]
 800c6ba:	fa11 f185 	uxtah	r1, r1, r5
 800c6be:	b289      	uxth	r1, r1
 800c6c0:	f7fd f936 	bl	8009930 <pbuf_realloc>
  useg->len -= remainder;
 800c6c4:	8923      	ldrh	r3, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c6c6:	4638      	mov	r0, r7
  useg->len -= remainder;
 800c6c8:	4499      	add	r9, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c6ca:	68e3      	ldr	r3, [r4, #12]
  useg->len -= remainder;
 800c6cc:	f8a4 9008 	strh.w	r9, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c6d0:	899d      	ldrh	r5, [r3, #12]
 800c6d2:	f7fc fa91 	bl	8008bf8 <lwip_htons>
 800c6d6:	68e3      	ldr	r3, [r4, #12]
 800c6d8:	4328      	orrs	r0, r5
 800c6da:	8198      	strh	r0, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800c6dc:	6860      	ldr	r0, [r4, #4]
 800c6de:	f7fd f97f 	bl	80099e0 <pbuf_clen>
 800c6e2:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800c6e6:	4418      	add	r0, r3
 800c6e8:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c6ec:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c6f0:	f7fd f976 	bl	80099e0 <pbuf_clen>
 800c6f4:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800c6f8:	4418      	add	r0, r3
  seg->next = useg->next;
 800c6fa:	6823      	ldr	r3, [r4, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c6fc:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  seg->next = useg->next;
 800c700:	f8c8 3000 	str.w	r3, [r8]
  useg->next = seg;
 800c704:	f8c4 8000 	str.w	r8, [r4]
  if (seg->next == NULL) {
 800c708:	f8d8 0000 	ldr.w	r0, [r8]
 800c70c:	2800      	cmp	r0, #0
 800c70e:	f47f af68 	bne.w	800c5e2 <tcp_split_unsent_seg+0x42>
    pcb->unsent_oversize = 0;
 800c712:	f8a6 0068 	strh.w	r0, [r6, #104]	; 0x68
 800c716:	e75e      	b.n	800c5d6 <tcp_split_unsent_seg+0x36>
    pbuf_free(p);
 800c718:	4648      	mov	r0, r9
 800c71a:	f7fd f827 	bl	800976c <pbuf_free>
 800c71e:	e74d      	b.n	800c5bc <tcp_split_unsent_seg+0x1c>
 800c720:	08022124 	.word	0x08022124
 800c724:	08022521 	.word	0x08022521
 800c728:	0801f8bf 	.word	0x0801f8bf
 800c72c:	08022543 	.word	0x08022543
 800c730:	08022565 	.word	0x08022565
 800c734:	08022572 	.word	0x08022572

0800c738 <tcp_enqueue_flags>:
{
 800c738:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c73c:	f011 0803 	ands.w	r8, r1, #3
{
 800c740:	4604      	mov	r4, r0
 800c742:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c744:	d106      	bne.n	800c754 <tcp_enqueue_flags+0x1c>
 800c746:	4b3e      	ldr	r3, [pc, #248]	; (800c840 <tcp_enqueue_flags+0x108>)
 800c748:	f240 4211 	movw	r2, #1041	; 0x411
 800c74c:	493d      	ldr	r1, [pc, #244]	; (800c844 <tcp_enqueue_flags+0x10c>)
 800c74e:	483e      	ldr	r0, [pc, #248]	; (800c848 <tcp_enqueue_flags+0x110>)
 800c750:	f001 f9f2 	bl	800db38 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c754:	b934      	cbnz	r4, 800c764 <tcp_enqueue_flags+0x2c>
 800c756:	4b3a      	ldr	r3, [pc, #232]	; (800c840 <tcp_enqueue_flags+0x108>)
 800c758:	f240 4213 	movw	r2, #1043	; 0x413
 800c75c:	493b      	ldr	r1, [pc, #236]	; (800c84c <tcp_enqueue_flags+0x114>)
 800c75e:	483a      	ldr	r0, [pc, #232]	; (800c848 <tcp_enqueue_flags+0x110>)
 800c760:	f001 f9ea 	bl	800db38 <iprintf>
  if (flags & TCP_SYN) {
 800c764:	f3c6 0740 	ubfx	r7, r6, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c768:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c76c:	2036      	movs	r0, #54	; 0x36
 800c76e:	ea4f 0987 	mov.w	r9, r7, lsl #2
 800c772:	4649      	mov	r1, r9
 800c774:	f7fd f862 	bl	800983c <pbuf_alloc>
 800c778:	4605      	mov	r5, r0
 800c77a:	b940      	cbnz	r0, 800c78e <tcp_enqueue_flags+0x56>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c77c:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 800c77e:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c786:	8363      	strh	r3, [r4, #26]
}
 800c788:	b003      	add	sp, #12
 800c78a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c78e:	8943      	ldrh	r3, [r0, #10]
 800c790:	454b      	cmp	r3, r9
 800c792:	d206      	bcs.n	800c7a2 <tcp_enqueue_flags+0x6a>
 800c794:	4b2a      	ldr	r3, [pc, #168]	; (800c840 <tcp_enqueue_flags+0x108>)
 800c796:	f240 4239 	movw	r2, #1081	; 0x439
 800c79a:	492d      	ldr	r1, [pc, #180]	; (800c850 <tcp_enqueue_flags+0x118>)
 800c79c:	482a      	ldr	r0, [pc, #168]	; (800c848 <tcp_enqueue_flags+0x110>)
 800c79e:	f001 f9cb 	bl	800db38 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c7a2:	4629      	mov	r1, r5
 800c7a4:	9700      	str	r7, [sp, #0]
 800c7a6:	4632      	mov	r2, r6
 800c7a8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800c7aa:	4620      	mov	r0, r4
 800c7ac:	f7ff fb38 	bl	800be20 <tcp_create_segment>
 800c7b0:	4605      	mov	r5, r0
 800c7b2:	2800      	cmp	r0, #0
 800c7b4:	d0e2      	beq.n	800c77c <tcp_enqueue_flags+0x44>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c7b6:	68c3      	ldr	r3, [r0, #12]
 800c7b8:	079a      	lsls	r2, r3, #30
 800c7ba:	d006      	beq.n	800c7ca <tcp_enqueue_flags+0x92>
 800c7bc:	4b20      	ldr	r3, [pc, #128]	; (800c840 <tcp_enqueue_flags+0x108>)
 800c7be:	f240 4242 	movw	r2, #1090	; 0x442
 800c7c2:	4924      	ldr	r1, [pc, #144]	; (800c854 <tcp_enqueue_flags+0x11c>)
 800c7c4:	4820      	ldr	r0, [pc, #128]	; (800c848 <tcp_enqueue_flags+0x110>)
 800c7c6:	f001 f9b7 	bl	800db38 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c7ca:	892b      	ldrh	r3, [r5, #8]
 800c7cc:	b133      	cbz	r3, 800c7dc <tcp_enqueue_flags+0xa4>
 800c7ce:	4b1c      	ldr	r3, [pc, #112]	; (800c840 <tcp_enqueue_flags+0x108>)
 800c7d0:	f240 4243 	movw	r2, #1091	; 0x443
 800c7d4:	4920      	ldr	r1, [pc, #128]	; (800c858 <tcp_enqueue_flags+0x120>)
 800c7d6:	481c      	ldr	r0, [pc, #112]	; (800c848 <tcp_enqueue_flags+0x110>)
 800c7d8:	f001 f9ae 	bl	800db38 <iprintf>
  if (pcb->unsent == NULL) {
 800c7dc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c7de:	bb43      	cbnz	r3, 800c832 <tcp_enqueue_flags+0xfa>
    pcb->unsent = seg;
 800c7e0:	66e5      	str	r5, [r4, #108]	; 0x6c
  pcb->unsent_oversize = 0;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c7e8:	f1b8 0f00 	cmp.w	r8, #0
 800c7ec:	d002      	beq.n	800c7f4 <tcp_enqueue_flags+0xbc>
    pcb->snd_lbb++;
 800c7ee:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800c7f0:	3301      	adds	r3, #1
 800c7f2:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 800c7f4:	07f3      	lsls	r3, r6, #31
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c7f6:	6868      	ldr	r0, [r5, #4]
    tcp_set_flags(pcb, TF_FIN);
 800c7f8:	bf42      	ittt	mi
 800c7fa:	8b63      	ldrhmi	r3, [r4, #26]
 800c7fc:	f043 0320 	orrmi.w	r3, r3, #32
 800c800:	8363      	strhmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c802:	f7fd f8ed 	bl	80099e0 <pbuf_clen>
 800c806:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800c80a:	4418      	add	r0, r3
 800c80c:	b280      	uxth	r0, r0
 800c80e:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800c812:	2800      	cmp	r0, #0
 800c814:	d0b8      	beq.n	800c788 <tcp_enqueue_flags+0x50>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c816:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800c818:	b948      	cbnz	r0, 800c82e <tcp_enqueue_flags+0xf6>
 800c81a:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 800c81c:	2c00      	cmp	r4, #0
 800c81e:	d1b3      	bne.n	800c788 <tcp_enqueue_flags+0x50>
 800c820:	4b07      	ldr	r3, [pc, #28]	; (800c840 <tcp_enqueue_flags+0x108>)
 800c822:	f240 4265 	movw	r2, #1125	; 0x465
 800c826:	490d      	ldr	r1, [pc, #52]	; (800c85c <tcp_enqueue_flags+0x124>)
 800c828:	4807      	ldr	r0, [pc, #28]	; (800c848 <tcp_enqueue_flags+0x110>)
 800c82a:	f001 f985 	bl	800db38 <iprintf>
  return ERR_OK;
 800c82e:	2000      	movs	r0, #0
 800c830:	e7aa      	b.n	800c788 <tcp_enqueue_flags+0x50>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c832:	461a      	mov	r2, r3
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d1fb      	bne.n	800c832 <tcp_enqueue_flags+0xfa>
    useg->next = seg;
 800c83a:	6015      	str	r5, [r2, #0]
 800c83c:	e7d1      	b.n	800c7e2 <tcp_enqueue_flags+0xaa>
 800c83e:	bf00      	nop
 800c840:	08022124 	.word	0x08022124
 800c844:	08022580 	.word	0x08022580
 800c848:	0801f8bf 	.word	0x0801f8bf
 800c84c:	080225d5 	.word	0x080225d5
 800c850:	080225f4 	.word	0x080225f4
 800c854:	0802262d 	.word	0x0802262d
 800c858:	08022645 	.word	0x08022645
 800c85c:	0802266f 	.word	0x0802266f

0800c860 <tcp_send_fin>:
{
 800c860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c862:	4604      	mov	r4, r0
 800c864:	b930      	cbnz	r0, 800c874 <tcp_send_fin+0x14>
 800c866:	4b13      	ldr	r3, [pc, #76]	; (800c8b4 <tcp_send_fin+0x54>)
 800c868:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800c86c:	4912      	ldr	r1, [pc, #72]	; (800c8b8 <tcp_send_fin+0x58>)
 800c86e:	4813      	ldr	r0, [pc, #76]	; (800c8bc <tcp_send_fin+0x5c>)
 800c870:	f001 f962 	bl	800db38 <iprintf>
  if (pcb->unsent != NULL) {
 800c874:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800c876:	b14d      	cbz	r5, 800c88c <tcp_send_fin+0x2c>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c878:	462f      	mov	r7, r5
 800c87a:	682d      	ldr	r5, [r5, #0]
 800c87c:	2d00      	cmp	r5, #0
 800c87e:	d1fb      	bne.n	800c878 <tcp_send_fin+0x18>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	8998      	ldrh	r0, [r3, #12]
 800c884:	f7fc f9b8 	bl	8008bf8 <lwip_htons>
 800c888:	0743      	lsls	r3, r0, #29
 800c88a:	d005      	beq.n	800c898 <tcp_send_fin+0x38>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c88c:	4620      	mov	r0, r4
 800c88e:	2101      	movs	r1, #1
}
 800c890:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c894:	f7ff bf50 	b.w	800c738 <tcp_enqueue_flags>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	2001      	movs	r0, #1
 800c89c:	899e      	ldrh	r6, [r3, #12]
 800c89e:	f7fc f9ab 	bl	8008bf8 <lwip_htons>
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	4330      	orrs	r0, r6
 800c8a6:	8198      	strh	r0, [r3, #12]
}
 800c8a8:	4628      	mov	r0, r5
      tcp_set_flags(pcb, TF_FIN);
 800c8aa:	8b63      	ldrh	r3, [r4, #26]
 800c8ac:	f043 0320 	orr.w	r3, r3, #32
 800c8b0:	8363      	strh	r3, [r4, #26]
}
 800c8b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8b4:	08022124 	.word	0x08022124
 800c8b8:	08022697 	.word	0x08022697
 800c8bc:	0801f8bf 	.word	0x0801f8bf

0800c8c0 <tcp_rexmit_rto_prepare>:
{
 800c8c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800c8c4:	4604      	mov	r4, r0
 800c8c6:	b930      	cbnz	r0, 800c8d6 <tcp_rexmit_rto_prepare+0x16>
 800c8c8:	4b1c      	ldr	r3, [pc, #112]	; (800c93c <tcp_rexmit_rto_prepare+0x7c>)
 800c8ca:	f240 6263 	movw	r2, #1635	; 0x663
 800c8ce:	491c      	ldr	r1, [pc, #112]	; (800c940 <tcp_rexmit_rto_prepare+0x80>)
 800c8d0:	481c      	ldr	r0, [pc, #112]	; (800c944 <tcp_rexmit_rto_prepare+0x84>)
 800c8d2:	f001 f931 	bl	800db38 <iprintf>
  if (pcb->unacked == NULL) {
 800c8d6:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800c8d8:	b945      	cbnz	r5, 800c8ec <tcp_rexmit_rto_prepare+0x2c>
    return ERR_VAL;
 800c8da:	f06f 0005 	mvn.w	r0, #5
}
 800c8de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (tcp_output_segment_busy(seg)) {
 800c8e2:	f7ff fa3b 	bl	800bd5c <tcp_output_segment_busy>
 800c8e6:	2800      	cmp	r0, #0
 800c8e8:	d1f7      	bne.n	800c8da <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c8ea:	682d      	ldr	r5, [r5, #0]
 800c8ec:	682b      	ldr	r3, [r5, #0]
    if (tcp_output_segment_busy(seg)) {
 800c8ee:	4628      	mov	r0, r5
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d1f6      	bne.n	800c8e2 <tcp_rexmit_rto_prepare+0x22>
  if (tcp_output_segment_busy(seg)) {
 800c8f4:	f7ff fa32 	bl	800bd5c <tcp_output_segment_busy>
 800c8f8:	4606      	mov	r6, r0
 800c8fa:	2800      	cmp	r0, #0
 800c8fc:	d1ed      	bne.n	800c8da <tcp_rexmit_rto_prepare+0x1a>
  seg->next = pcb->unsent;
 800c8fe:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c900:	602b      	str	r3, [r5, #0]
  pcb->unsent = pcb->unacked;
 800c902:	6f23      	ldr	r3, [r4, #112]	; 0x70
  pcb->unacked = NULL;
 800c904:	e9c4 301b 	strd	r3, r0, [r4, #108]	; 0x6c
  tcp_set_flags(pcb, TF_RTO);
 800c908:	8b63      	ldrh	r3, [r4, #26]
 800c90a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c90e:	8363      	strh	r3, [r4, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c910:	68eb      	ldr	r3, [r5, #12]
 800c912:	6858      	ldr	r0, [r3, #4]
 800c914:	f7fc f973 	bl	8008bfe <lwip_htonl>
 800c918:	68eb      	ldr	r3, [r5, #12]
 800c91a:	4607      	mov	r7, r0
 800c91c:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800c920:	8998      	ldrh	r0, [r3, #12]
 800c922:	f7fc f969 	bl	8008bf8 <lwip_htons>
 800c926:	f010 0303 	ands.w	r3, r0, #3
 800c92a:	4447      	add	r7, r8
  return ERR_OK;
 800c92c:	4630      	mov	r0, r6
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c92e:	bf18      	it	ne
 800c930:	2301      	movne	r3, #1
  pcb->rttest = 0;
 800c932:	6366      	str	r6, [r4, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c934:	443b      	add	r3, r7
 800c936:	64e3      	str	r3, [r4, #76]	; 0x4c
  return ERR_OK;
 800c938:	e7d1      	b.n	800c8de <tcp_rexmit_rto_prepare+0x1e>
 800c93a:	bf00      	nop
 800c93c:	08022124 	.word	0x08022124
 800c940:	080226b1 	.word	0x080226b1
 800c944:	0801f8bf 	.word	0x0801f8bf

0800c948 <tcp_rexmit>:
{
 800c948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800c94a:	4604      	mov	r4, r0
 800c94c:	b930      	cbnz	r0, 800c95c <tcp_rexmit+0x14>
 800c94e:	4b1b      	ldr	r3, [pc, #108]	; (800c9bc <tcp_rexmit+0x74>)
 800c950:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800c954:	491a      	ldr	r1, [pc, #104]	; (800c9c0 <tcp_rexmit+0x78>)
 800c956:	481b      	ldr	r0, [pc, #108]	; (800c9c4 <tcp_rexmit+0x7c>)
 800c958:	f001 f8ee 	bl	800db38 <iprintf>
  if (pcb->unacked == NULL) {
 800c95c:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800c95e:	b915      	cbnz	r5, 800c966 <tcp_rexmit+0x1e>
    return ERR_VAL;
 800c960:	f06f 0005 	mvn.w	r0, #5
}
 800c964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (tcp_output_segment_busy(seg)) {
 800c966:	4628      	mov	r0, r5
 800c968:	f7ff f9f8 	bl	800bd5c <tcp_output_segment_busy>
 800c96c:	2800      	cmp	r0, #0
 800c96e:	d1f7      	bne.n	800c960 <tcp_rexmit+0x18>
  pcb->unacked = seg->next;
 800c970:	682b      	ldr	r3, [r5, #0]
  cur_seg = &(pcb->unsent);
 800c972:	f104 066c 	add.w	r6, r4, #108	; 0x6c
  pcb->unacked = seg->next;
 800c976:	6723      	str	r3, [r4, #112]	; 0x70
  while (*cur_seg &&
 800c978:	6833      	ldr	r3, [r6, #0]
 800c97a:	b983      	cbnz	r3, 800c99e <tcp_rexmit+0x56>
  seg->next = *cur_seg;
 800c97c:	6833      	ldr	r3, [r6, #0]
 800c97e:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 800c980:	6035      	str	r5, [r6, #0]
  if (seg->next == NULL) {
 800c982:	682b      	ldr	r3, [r5, #0]
 800c984:	b90b      	cbnz	r3, 800c98a <tcp_rexmit+0x42>
    pcb->unsent_oversize = 0;
 800c986:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if (pcb->nrtx < 0xFF) {
 800c98a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  pcb->rttest = 0;
 800c98e:	2000      	movs	r0, #0
  if (pcb->nrtx < 0xFF) {
 800c990:	2bff      	cmp	r3, #255	; 0xff
  pcb->rttest = 0;
 800c992:	6360      	str	r0, [r4, #52]	; 0x34
    ++pcb->nrtx;
 800c994:	bf1c      	itt	ne
 800c996:	3301      	addne	r3, #1
 800c998:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  return ERR_OK;
 800c99c:	e7e2      	b.n	800c964 <tcp_rexmit+0x1c>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c99e:	68db      	ldr	r3, [r3, #12]
 800c9a0:	6858      	ldr	r0, [r3, #4]
 800c9a2:	f7fc f92c 	bl	8008bfe <lwip_htonl>
 800c9a6:	68eb      	ldr	r3, [r5, #12]
 800c9a8:	4607      	mov	r7, r0
 800c9aa:	6858      	ldr	r0, [r3, #4]
 800c9ac:	f7fc f927 	bl	8008bfe <lwip_htonl>
 800c9b0:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 800c9b2:	2800      	cmp	r0, #0
 800c9b4:	dae2      	bge.n	800c97c <tcp_rexmit+0x34>
    cur_seg = &((*cur_seg)->next );
 800c9b6:	6836      	ldr	r6, [r6, #0]
 800c9b8:	e7de      	b.n	800c978 <tcp_rexmit+0x30>
 800c9ba:	bf00      	nop
 800c9bc:	08022124 	.word	0x08022124
 800c9c0:	080226d5 	.word	0x080226d5
 800c9c4:	0801f8bf 	.word	0x0801f8bf

0800c9c8 <tcp_rexmit_fast>:
{
 800c9c8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800c9ca:	4604      	mov	r4, r0
 800c9cc:	b930      	cbnz	r0, 800c9dc <tcp_rexmit_fast+0x14>
 800c9ce:	4b15      	ldr	r3, [pc, #84]	; (800ca24 <tcp_rexmit_fast+0x5c>)
 800c9d0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800c9d4:	4914      	ldr	r1, [pc, #80]	; (800ca28 <tcp_rexmit_fast+0x60>)
 800c9d6:	4815      	ldr	r0, [pc, #84]	; (800ca2c <tcp_rexmit_fast+0x64>)
 800c9d8:	f001 f8ae 	bl	800db38 <iprintf>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c9dc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c9de:	b1fb      	cbz	r3, 800ca20 <tcp_rexmit_fast+0x58>
 800c9e0:	8b63      	ldrh	r3, [r4, #26]
 800c9e2:	075b      	lsls	r3, r3, #29
 800c9e4:	d41c      	bmi.n	800ca20 <tcp_rexmit_fast+0x58>
    if (tcp_rexmit(pcb) == ERR_OK) {
 800c9e6:	4620      	mov	r0, r4
 800c9e8:	f7ff ffae 	bl	800c948 <tcp_rexmit>
 800c9ec:	b9c0      	cbnz	r0, 800ca20 <tcp_rexmit_fast+0x58>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c9ee:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 800c9f2:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      pcb->rtime = 0;
 800c9f6:	8620      	strh	r0, [r4, #48]	; 0x30
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c9f8:	4299      	cmp	r1, r3
 800c9fa:	bf28      	it	cs
 800c9fc:	4619      	movcs	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800c9fe:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800ca00:	005d      	lsls	r5, r3, #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ca02:	104a      	asrs	r2, r1, #1
        pcb->ssthresh = 2 * pcb->mss;
 800ca04:	ebb5 0f51 	cmp.w	r5, r1, lsr #1
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ca08:	442b      	add	r3, r5
        pcb->ssthresh = 2 * pcb->mss;
 800ca0a:	bf88      	it	hi
 800ca0c:	462a      	movhi	r2, r5
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ca0e:	4413      	add	r3, r2
        pcb->ssthresh = 2 * pcb->mss;
 800ca10:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ca14:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800ca18:	8b63      	ldrh	r3, [r4, #26]
 800ca1a:	f043 0304 	orr.w	r3, r3, #4
 800ca1e:	8363      	strh	r3, [r4, #26]
}
 800ca20:	bd38      	pop	{r3, r4, r5, pc}
 800ca22:	bf00      	nop
 800ca24:	08022124 	.word	0x08022124
 800ca28:	080226ed 	.word	0x080226ed
 800ca2c:	0801f8bf 	.word	0x0801f8bf

0800ca30 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800ca30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca34:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800ca38:	4606      	mov	r6, r0
 800ca3a:	460f      	mov	r7, r1
 800ca3c:	4614      	mov	r4, r2
 800ca3e:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800ca42:	461d      	mov	r5, r3
{
 800ca44:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800ca48:	b933      	cbnz	r3, 800ca58 <tcp_rst+0x28>
 800ca4a:	4b18      	ldr	r3, [pc, #96]	; (800caac <tcp_rst+0x7c>)
 800ca4c:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800ca50:	4917      	ldr	r1, [pc, #92]	; (800cab0 <tcp_rst+0x80>)
 800ca52:	4818      	ldr	r0, [pc, #96]	; (800cab4 <tcp_rst+0x84>)
 800ca54:	f001 f870 	bl	800db38 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800ca58:	f1b8 0f00 	cmp.w	r8, #0
 800ca5c:	d106      	bne.n	800ca6c <tcp_rst+0x3c>
 800ca5e:	4b13      	ldr	r3, [pc, #76]	; (800caac <tcp_rst+0x7c>)
 800ca60:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800ca64:	4914      	ldr	r1, [pc, #80]	; (800cab8 <tcp_rst+0x88>)
 800ca66:	4813      	ldr	r0, [pc, #76]	; (800cab4 <tcp_rst+0x84>)
 800ca68:	f001 f866 	bl	800db38 <iprintf>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800ca6c:	4638      	mov	r0, r7
 800ca6e:	f7fc f8c6 	bl	8008bfe <lwip_htonl>
 800ca72:	2314      	movs	r3, #20
 800ca74:	f646 010b 	movw	r1, #26635	; 0x680b
 800ca78:	4602      	mov	r2, r0
 800ca7a:	f8cd a000 	str.w	sl, [sp]
 800ca7e:	4620      	mov	r0, r4
 800ca80:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800ca84:	464b      	mov	r3, r9
 800ca86:	2100      	movs	r1, #0
 800ca88:	f7ff fa3a 	bl	800bf00 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800ca8c:	4604      	mov	r4, r0
 800ca8e:	b150      	cbz	r0, 800caa6 <tcp_rst+0x76>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ca90:	f7ff fa9e 	bl	800bfd0 <tcp_output_fill_options.isra.0.constprop.0>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800ca94:	4643      	mov	r3, r8
 800ca96:	462a      	mov	r2, r5
 800ca98:	4621      	mov	r1, r4
 800ca9a:	4630      	mov	r0, r6
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800ca9c:	b004      	add	sp, #16
 800ca9e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800caa2:	f7ff baa5 	b.w	800bff0 <tcp_output_control_segment>
}
 800caa6:	b004      	add	sp, #16
 800caa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caac:	08022124 	.word	0x08022124
 800cab0:	0802270a 	.word	0x0802270a
 800cab4:	0801f8bf 	.word	0x0801f8bf
 800cab8:	08022724 	.word	0x08022724

0800cabc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800cabc:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800cabe:	4604      	mov	r4, r0
 800cac0:	b930      	cbnz	r0, 800cad0 <tcp_send_empty_ack+0x14>
 800cac2:	4b14      	ldr	r3, [pc, #80]	; (800cb14 <tcp_send_empty_ack+0x58>)
 800cac4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800cac8:	4913      	ldr	r1, [pc, #76]	; (800cb18 <tcp_send_empty_ack+0x5c>)
 800caca:	4814      	ldr	r0, [pc, #80]	; (800cb1c <tcp_send_empty_ack+0x60>)
 800cacc:	f001 f834 	bl	800db38 <iprintf>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800cad0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800cad2:	f7fc f894 	bl	8008bfe <lwip_htonl>
 800cad6:	2100      	movs	r1, #0
 800cad8:	4602      	mov	r2, r0
 800cada:	4620      	mov	r0, r4
 800cadc:	f7ff fa52 	bl	800bf84 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800cae0:	4605      	mov	r5, r0
 800cae2:	b930      	cbnz	r0, 800caf2 <tcp_send_empty_ack+0x36>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cae4:	8b63      	ldrh	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800cae6:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800caea:	f043 0303 	orr.w	r3, r3, #3
 800caee:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 800caf0:	bd38      	pop	{r3, r4, r5, pc}
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800caf2:	f7ff fa6d 	bl	800bfd0 <tcp_output_fill_options.isra.0.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800caf6:	1d23      	adds	r3, r4, #4
 800caf8:	4622      	mov	r2, r4
 800cafa:	4629      	mov	r1, r5
 800cafc:	4620      	mov	r0, r4
 800cafe:	f7ff fa77 	bl	800bff0 <tcp_output_control_segment>
  if (err != ERR_OK) {
 800cb02:	8b63      	ldrh	r3, [r4, #26]
 800cb04:	b118      	cbz	r0, 800cb0e <tcp_send_empty_ack+0x52>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cb06:	f043 0303 	orr.w	r3, r3, #3
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cb0a:	8363      	strh	r3, [r4, #26]
 800cb0c:	e7f0      	b.n	800caf0 <tcp_send_empty_ack+0x34>
 800cb0e:	f023 0303 	bic.w	r3, r3, #3
 800cb12:	e7fa      	b.n	800cb0a <tcp_send_empty_ack+0x4e>
 800cb14:	08022124 	.word	0x08022124
 800cb18:	0802273f 	.word	0x0802273f
 800cb1c:	0801f8bf 	.word	0x0801f8bf

0800cb20 <tcp_output>:
{
 800cb20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800cb24:	4604      	mov	r4, r0
{
 800cb26:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800cb28:	b930      	cbnz	r0, 800cb38 <tcp_output+0x18>
 800cb2a:	4b8f      	ldr	r3, [pc, #572]	; (800cd68 <tcp_output+0x248>)
 800cb2c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800cb30:	498e      	ldr	r1, [pc, #568]	; (800cd6c <tcp_output+0x24c>)
 800cb32:	488f      	ldr	r0, [pc, #572]	; (800cd70 <tcp_output+0x250>)
 800cb34:	f001 f800 	bl	800db38 <iprintf>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800cb38:	7d23      	ldrb	r3, [r4, #20]
 800cb3a:	2b01      	cmp	r3, #1
 800cb3c:	d106      	bne.n	800cb4c <tcp_output+0x2c>
 800cb3e:	4b8a      	ldr	r3, [pc, #552]	; (800cd68 <tcp_output+0x248>)
 800cb40:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800cb44:	498b      	ldr	r1, [pc, #556]	; (800cd74 <tcp_output+0x254>)
 800cb46:	488a      	ldr	r0, [pc, #552]	; (800cd70 <tcp_output+0x250>)
 800cb48:	f000 fff6 	bl	800db38 <iprintf>
  if (tcp_input_pcb == pcb) {
 800cb4c:	4b8a      	ldr	r3, [pc, #552]	; (800cd78 <tcp_output+0x258>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	42a3      	cmp	r3, r4
 800cb52:	f000 8171 	beq.w	800ce38 <tcp_output+0x318>
  seg = pcb->unsent;
 800cb56:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 800cb58:	b94d      	cbnz	r5, 800cb6e <tcp_output+0x4e>
    if (pcb->flags & TF_ACK_NOW) {
 800cb5a:	8b63      	ldrh	r3, [r4, #26]
 800cb5c:	0798      	lsls	r0, r3, #30
 800cb5e:	f140 8167 	bpl.w	800ce30 <tcp_output+0x310>
      return tcp_send_empty_ack(pcb);
 800cb62:	4620      	mov	r0, r4
}
 800cb64:	b007      	add	sp, #28
 800cb66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 800cb6a:	f7ff bfa7 	b.w	800cabc <tcp_send_empty_ack>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800cb6e:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800cb70:	f104 0904 	add.w	r9, r4, #4
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800cb74:	f8b4 8048 	ldrh.w	r8, [r4, #72]	; 0x48
 800cb78:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800cb7c:	b340      	cbz	r0, 800cbd0 <tcp_output+0xb0>
    return netif_get_by_index(pcb->netif_idx);
 800cb7e:	f7fc fd3b 	bl	80095f8 <netif_get_by_index>
    return ip_route(src, dst);
 800cb82:	4607      	mov	r7, r0
  if (netif == NULL) {
 800cb84:	2800      	cmp	r0, #0
 800cb86:	f000 8170 	beq.w	800ce6a <tcp_output+0x34a>
  if (ip_addr_isany(&pcb->local_ip)) {
 800cb8a:	6823      	ldr	r3, [r4, #0]
 800cb8c:	b90b      	cbnz	r3, 800cb92 <tcp_output+0x72>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800cb8e:	6843      	ldr	r3, [r0, #4]
 800cb90:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800cb92:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800cb94:	45b0      	cmp	r8, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800cb96:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800cb98:	bf28      	it	cs
 800cb9a:	46b0      	movcs	r8, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800cb9c:	f7fc f82f 	bl	8008bfe <lwip_htonl>
 800cba0:	892b      	ldrh	r3, [r5, #8]
 800cba2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800cba4:	1a9b      	subs	r3, r3, r2
 800cba6:	4418      	add	r0, r3
 800cba8:	4540      	cmp	r0, r8
 800cbaa:	d915      	bls.n	800cbd8 <tcp_output+0xb8>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800cbac:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800cbb0:	4543      	cmp	r3, r8
 800cbb2:	d1d2      	bne.n	800cb5a <tcp_output+0x3a>
 800cbb4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d1cf      	bne.n	800cb5a <tcp_output+0x3a>
 800cbba:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d1cb      	bne.n	800cb5a <tcp_output+0x3a>
      pcb->persist_cnt = 0;
 800cbc2:	f44f 7280 	mov.w	r2, #256	; 0x100
      pcb->persist_probe = 0;
 800cbc6:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
      pcb->persist_cnt = 0;
 800cbca:	f8a4 2094 	strh.w	r2, [r4, #148]	; 0x94
 800cbce:	e7c4      	b.n	800cb5a <tcp_output+0x3a>
    return ip_route(src, dst);
 800cbd0:	4648      	mov	r0, r9
 800cbd2:	f7fb faa3 	bl	800811c <ip4_route>
 800cbd6:	e7d4      	b.n	800cb82 <tcp_output+0x62>
  pcb->persist_backoff = 0;
 800cbd8:	2300      	movs	r3, #0
  useg = pcb->unacked;
 800cbda:	6f26      	ldr	r6, [r4, #112]	; 0x70
  pcb->persist_backoff = 0;
 800cbdc:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  if (useg != NULL) {
 800cbe0:	b126      	cbz	r6, 800cbec <tcp_output+0xcc>
    for (; useg->next != NULL; useg = useg->next);
 800cbe2:	4633      	mov	r3, r6
 800cbe4:	6836      	ldr	r6, [r6, #0]
 800cbe6:	2e00      	cmp	r6, #0
 800cbe8:	d1fb      	bne.n	800cbe2 <tcp_output+0xc2>
 800cbea:	461e      	mov	r6, r3
    LWIP_ASSERT("RST not expected here!",
 800cbec:	f8df a178 	ldr.w	sl, [pc, #376]	; 800cd68 <tcp_output+0x248>
 800cbf0:	f8df b17c 	ldr.w	fp, [pc, #380]	; 800cd70 <tcp_output+0x250>
 800cbf4:	e0de      	b.n	800cdb4 <tcp_output+0x294>
    if (pcb->state != SYN_SENT) {
 800cbf6:	7d23      	ldrb	r3, [r4, #20]
 800cbf8:	2b02      	cmp	r3, #2
 800cbfa:	d009      	beq.n	800cc10 <tcp_output+0xf0>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800cbfc:	68eb      	ldr	r3, [r5, #12]
 800cbfe:	2010      	movs	r0, #16
 800cc00:	899b      	ldrh	r3, [r3, #12]
 800cc02:	9304      	str	r3, [sp, #16]
 800cc04:	f7fb fff8 	bl	8008bf8 <lwip_htons>
 800cc08:	9b04      	ldr	r3, [sp, #16]
 800cc0a:	68ea      	ldr	r2, [r5, #12]
 800cc0c:	4318      	orrs	r0, r3
 800cc0e:	8190      	strh	r0, [r2, #12]
  if (tcp_output_segment_busy(seg)) {
 800cc10:	4628      	mov	r0, r5
 800cc12:	f7ff f8a3 	bl	800bd5c <tcp_output_segment_busy>
 800cc16:	2800      	cmp	r0, #0
 800cc18:	d16f      	bne.n	800ccfa <tcp_output+0x1da>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800cc1a:	68eb      	ldr	r3, [r5, #12]
 800cc1c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cc1e:	9304      	str	r3, [sp, #16]
 800cc20:	f7fb ffed 	bl	8008bfe <lwip_htonl>
 800cc24:	9b04      	ldr	r3, [sp, #16]
 800cc26:	6098      	str	r0, [r3, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800cc28:	68eb      	ldr	r3, [r5, #12]
 800cc2a:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800cc2c:	9304      	str	r3, [sp, #16]
 800cc2e:	f7fb ffe3 	bl	8008bf8 <lwip_htons>
 800cc32:	9b04      	ldr	r3, [sp, #16]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cc34:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800cc36:	81d8      	strh	r0, [r3, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cc38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc3a:	4413      	add	r3, r2
 800cc3c:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800cc3e:	7aaa      	ldrb	r2, [r5, #10]
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800cc40:	68eb      	ldr	r3, [r5, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800cc42:	07d2      	lsls	r2, r2, #31
 800cc44:	d449      	bmi.n	800ccda <tcp_output+0x1ba>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800cc46:	f103 0214 	add.w	r2, r3, #20
  if (pcb->rtime < 0) {
 800cc4a:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800cc4e:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 800cc50:	bfbc      	itt	lt
 800cc52:	2300      	movlt	r3, #0
 800cc54:	8623      	strhlt	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 800cc56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc58:	b94b      	cbnz	r3, 800cc6e <tcp_output+0x14e>
    pcb->rttest = tcp_ticks;
 800cc5a:	4948      	ldr	r1, [pc, #288]	; (800cd7c <tcp_output+0x25c>)
 800cc5c:	68eb      	ldr	r3, [r5, #12]
 800cc5e:	6809      	ldr	r1, [r1, #0]
 800cc60:	9204      	str	r2, [sp, #16]
 800cc62:	6361      	str	r1, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800cc64:	6858      	ldr	r0, [r3, #4]
 800cc66:	f7fb ffca 	bl	8008bfe <lwip_htonl>
 800cc6a:	9a04      	ldr	r2, [sp, #16]
 800cc6c:	63a0      	str	r0, [r4, #56]	; 0x38
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800cc6e:	6869      	ldr	r1, [r5, #4]
 800cc70:	68eb      	ldr	r3, [r5, #12]
 800cc72:	6848      	ldr	r0, [r1, #4]
  seg->p->len -= len;
 800cc74:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800cc78:	1a18      	subs	r0, r3, r0
  seg->p->payload = seg->tcphdr;
 800cc7a:	604b      	str	r3, [r1, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800cc7c:	b280      	uxth	r0, r0
  seg->p->len -= len;
 800cc7e:	ebac 0c00 	sub.w	ip, ip, r0
 800cc82:	f8a1 c00a 	strh.w	ip, [r1, #10]
  seg->p->tot_len -= len;
 800cc86:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800cc8a:	ebac 0000 	sub.w	r0, ip, r0
 800cc8e:	8108      	strh	r0, [r1, #8]
  seg->tcphdr->chksum = 0;
 800cc90:	2100      	movs	r1, #0
 800cc92:	7419      	strb	r1, [r3, #16]
 800cc94:	7459      	strb	r1, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800cc96:	7aa9      	ldrb	r1, [r5, #10]
 800cc98:	0089      	lsls	r1, r1, #2
 800cc9a:	f001 0104 	and.w	r1, r1, #4
 800cc9e:	3114      	adds	r1, #20
 800cca0:	440b      	add	r3, r1
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d006      	beq.n	800ccb4 <tcp_output+0x194>
 800cca6:	4653      	mov	r3, sl
 800cca8:	f240 621c 	movw	r2, #1564	; 0x61c
 800ccac:	4934      	ldr	r1, [pc, #208]	; (800cd80 <tcp_output+0x260>)
 800ccae:	4658      	mov	r0, fp
 800ccb0:	f000 ff42 	bl	800db38 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ccb4:	2306      	movs	r3, #6
 800ccb6:	9702      	str	r7, [sp, #8]
 800ccb8:	464a      	mov	r2, r9
 800ccba:	4621      	mov	r1, r4
 800ccbc:	9301      	str	r3, [sp, #4]
 800ccbe:	7aa3      	ldrb	r3, [r4, #10]
 800ccc0:	9300      	str	r3, [sp, #0]
 800ccc2:	7ae3      	ldrb	r3, [r4, #11]
 800ccc4:	6868      	ldr	r0, [r5, #4]
 800ccc6:	f7fb fb95 	bl	80083f4 <ip4_output_if>
    if (err != ERR_OK) {
 800ccca:	b1b0      	cbz	r0, 800ccfa <tcp_output+0x1da>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cccc:	8b63      	ldrh	r3, [r4, #26]
 800ccce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccd2:	8363      	strh	r3, [r4, #26]
}
 800ccd4:	b007      	add	sp, #28
 800ccd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800ccda:	464a      	mov	r2, r9
 800ccdc:	4639      	mov	r1, r7
 800ccde:	f240 50b4 	movw	r0, #1460	; 0x5b4
 800cce2:	9304      	str	r3, [sp, #16]
 800cce4:	f7fd ffe4 	bl	800acb0 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800cce8:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800ccec:	f7fb ff87 	bl	8008bfe <lwip_htonl>
 800ccf0:	9b04      	ldr	r3, [sp, #16]
    opts += 1;
 800ccf2:	f103 0218 	add.w	r2, r3, #24
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ccf6:	6158      	str	r0, [r3, #20]
    opts += 1;
 800ccf8:	e7a7      	b.n	800cc4a <tcp_output+0x12a>
    pcb->unsent = seg->next;
 800ccfa:	682b      	ldr	r3, [r5, #0]
 800ccfc:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800ccfe:	7d23      	ldrb	r3, [r4, #20]
 800cd00:	2b02      	cmp	r3, #2
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cd02:	bf1e      	ittt	ne
 800cd04:	8b63      	ldrhne	r3, [r4, #26]
 800cd06:	f023 0303 	bicne.w	r3, r3, #3
 800cd0a:	8363      	strhne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800cd0c:	68eb      	ldr	r3, [r5, #12]
 800cd0e:	6858      	ldr	r0, [r3, #4]
 800cd10:	f7fb ff75 	bl	8008bfe <lwip_htonl>
 800cd14:	8929      	ldrh	r1, [r5, #8]
 800cd16:	68eb      	ldr	r3, [r5, #12]
 800cd18:	9104      	str	r1, [sp, #16]
 800cd1a:	9005      	str	r0, [sp, #20]
 800cd1c:	8998      	ldrh	r0, [r3, #12]
 800cd1e:	f7fb ff6b 	bl	8008bf8 <lwip_htons>
 800cd22:	f010 0303 	ands.w	r3, r0, #3
 800cd26:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800cd2a:	bf18      	it	ne
 800cd2c:	2301      	movne	r3, #1
 800cd2e:	440a      	add	r2, r1
 800cd30:	4413      	add	r3, r2
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800cd32:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800cd34:	1ad2      	subs	r2, r2, r3
 800cd36:	2a00      	cmp	r2, #0
    if (TCP_TCPLEN(seg) > 0) {
 800cd38:	68ea      	ldr	r2, [r5, #12]
      pcb->snd_nxt = snd_nxt;
 800cd3a:	bfb8      	it	lt
 800cd3c:	6523      	strlt	r3, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 800cd3e:	892b      	ldrh	r3, [r5, #8]
 800cd40:	9304      	str	r3, [sp, #16]
 800cd42:	8990      	ldrh	r0, [r2, #12]
 800cd44:	f7fb ff58 	bl	8008bf8 <lwip_htons>
 800cd48:	f010 0003 	ands.w	r0, r0, #3
 800cd4c:	9b04      	ldr	r3, [sp, #16]
 800cd4e:	bf18      	it	ne
 800cd50:	2001      	movne	r0, #1
 800cd52:	42d8      	cmn	r0, r3
 800cd54:	f000 8085 	beq.w	800ce62 <tcp_output+0x342>
      seg->next = NULL;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800cd5c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cd5e:	b98b      	cbnz	r3, 800cd84 <tcp_output+0x264>
        pcb->unacked = seg;
 800cd60:	6725      	str	r5, [r4, #112]	; 0x70
          useg->next = seg;
 800cd62:	462e      	mov	r6, r5
 800cd64:	e023      	b.n	800cdae <tcp_output+0x28e>
 800cd66:	bf00      	nop
 800cd68:	08022124 	.word	0x08022124
 800cd6c:	0802275f 	.word	0x0802275f
 800cd70:	0801f8bf 	.word	0x0801f8bf
 800cd74:	08022777 	.word	0x08022777
 800cd78:	2400a7a4 	.word	0x2400a7a4
 800cd7c:	2400a794 	.word	0x2400a794
 800cd80:	080227b4 	.word	0x080227b4
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800cd84:	68eb      	ldr	r3, [r5, #12]
 800cd86:	6858      	ldr	r0, [r3, #4]
 800cd88:	f7fb ff39 	bl	8008bfe <lwip_htonl>
 800cd8c:	68f2      	ldr	r2, [r6, #12]
 800cd8e:	9004      	str	r0, [sp, #16]
 800cd90:	6850      	ldr	r0, [r2, #4]
 800cd92:	f7fb ff34 	bl	8008bfe <lwip_htonl>
 800cd96:	9b04      	ldr	r3, [sp, #16]
 800cd98:	1a18      	subs	r0, r3, r0
 800cd9a:	2800      	cmp	r0, #0
 800cd9c:	da5f      	bge.n	800ce5e <tcp_output+0x33e>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800cd9e:	f104 0370 	add.w	r3, r4, #112	; 0x70
          while (*cur_seg &&
 800cda2:	681a      	ldr	r2, [r3, #0]
 800cda4:	2a00      	cmp	r2, #0
 800cda6:	d149      	bne.n	800ce3c <tcp_output+0x31c>
          seg->next = (*cur_seg);
 800cda8:	681a      	ldr	r2, [r3, #0]
 800cdaa:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 800cdac:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 800cdae:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 800cdb0:	2d00      	cmp	r5, #0
 800cdb2:	d03a      	beq.n	800ce2a <tcp_output+0x30a>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800cdb4:	68eb      	ldr	r3, [r5, #12]
 800cdb6:	6858      	ldr	r0, [r3, #4]
 800cdb8:	f7fb ff21 	bl	8008bfe <lwip_htonl>
 800cdbc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800cdbe:	1ac0      	subs	r0, r0, r3
 800cdc0:	892b      	ldrh	r3, [r5, #8]
 800cdc2:	4418      	add	r0, r3
  while (seg != NULL &&
 800cdc4:	4540      	cmp	r0, r8
 800cdc6:	d82e      	bhi.n	800ce26 <tcp_output+0x306>
    LWIP_ASSERT("RST not expected here!",
 800cdc8:	68eb      	ldr	r3, [r5, #12]
 800cdca:	8998      	ldrh	r0, [r3, #12]
 800cdcc:	f7fb ff14 	bl	8008bf8 <lwip_htons>
 800cdd0:	0741      	lsls	r1, r0, #29
 800cdd2:	d506      	bpl.n	800cde2 <tcp_output+0x2c2>
 800cdd4:	4653      	mov	r3, sl
 800cdd6:	f240 5236 	movw	r2, #1334	; 0x536
 800cdda:	4925      	ldr	r1, [pc, #148]	; (800ce70 <tcp_output+0x350>)
 800cddc:	4658      	mov	r0, fp
 800cdde:	f000 feab 	bl	800db38 <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800cde2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	f43f af06 	beq.w	800cbf6 <tcp_output+0xd6>
 800cdea:	8b62      	ldrh	r2, [r4, #26]
 800cdec:	f012 0f44 	tst.w	r2, #68	; 0x44
 800cdf0:	f47f af01 	bne.w	800cbf6 <tcp_output+0xd6>
 800cdf4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800cdf6:	b143      	cbz	r3, 800ce0a <tcp_output+0x2ea>
 800cdf8:	6819      	ldr	r1, [r3, #0]
 800cdfa:	2900      	cmp	r1, #0
 800cdfc:	f47f aefb 	bne.w	800cbf6 <tcp_output+0xd6>
 800ce00:	8919      	ldrh	r1, [r3, #8]
 800ce02:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800ce04:	4299      	cmp	r1, r3
 800ce06:	f4bf aef6 	bcs.w	800cbf6 <tcp_output+0xd6>
 800ce0a:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	f43f aef1 	beq.w	800cbf6 <tcp_output+0xd6>
 800ce14:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800ce18:	2b07      	cmp	r3, #7
 800ce1a:	f63f aeec 	bhi.w	800cbf6 <tcp_output+0xd6>
 800ce1e:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 800ce22:	f47f aee8 	bne.w	800cbf6 <tcp_output+0xd6>
  if (pcb->unsent == NULL) {
 800ce26:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ce28:	b913      	cbnz	r3, 800ce30 <tcp_output+0x310>
    pcb->unsent_oversize = 0;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800ce30:	8b63      	ldrh	r3, [r4, #26]
 800ce32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce36:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800ce38:	2000      	movs	r0, #0
 800ce3a:	e74b      	b.n	800ccd4 <tcp_output+0x1b4>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ce3c:	68d2      	ldr	r2, [r2, #12]
 800ce3e:	9305      	str	r3, [sp, #20]
 800ce40:	6850      	ldr	r0, [r2, #4]
 800ce42:	f7fb fedc 	bl	8008bfe <lwip_htonl>
 800ce46:	68e9      	ldr	r1, [r5, #12]
 800ce48:	9004      	str	r0, [sp, #16]
 800ce4a:	6848      	ldr	r0, [r1, #4]
 800ce4c:	f7fb fed7 	bl	8008bfe <lwip_htonl>
 800ce50:	9a04      	ldr	r2, [sp, #16]
          while (*cur_seg &&
 800ce52:	9b05      	ldr	r3, [sp, #20]
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ce54:	1a10      	subs	r0, r2, r0
          while (*cur_seg &&
 800ce56:	2800      	cmp	r0, #0
 800ce58:	daa6      	bge.n	800cda8 <tcp_output+0x288>
            cur_seg = &((*cur_seg)->next );
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	e7a1      	b.n	800cda2 <tcp_output+0x282>
          useg->next = seg;
 800ce5e:	6035      	str	r5, [r6, #0]
 800ce60:	e77f      	b.n	800cd62 <tcp_output+0x242>
      tcp_seg_free(seg);
 800ce62:	4628      	mov	r0, r5
 800ce64:	f7fd f8b6 	bl	8009fd4 <tcp_seg_free>
 800ce68:	e7a1      	b.n	800cdae <tcp_output+0x28e>
    return ERR_RTE;
 800ce6a:	f06f 0003 	mvn.w	r0, #3
 800ce6e:	e731      	b.n	800ccd4 <tcp_output+0x1b4>
 800ce70:	0802279d 	.word	0x0802279d

0800ce74 <tcp_rexmit_rto_commit>:
{
 800ce74:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800ce76:	4604      	mov	r4, r0
 800ce78:	b930      	cbnz	r0, 800ce88 <tcp_rexmit_rto_commit+0x14>
 800ce7a:	4b09      	ldr	r3, [pc, #36]	; (800cea0 <tcp_rexmit_rto_commit+0x2c>)
 800ce7c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ce80:	4908      	ldr	r1, [pc, #32]	; (800cea4 <tcp_rexmit_rto_commit+0x30>)
 800ce82:	4809      	ldr	r0, [pc, #36]	; (800cea8 <tcp_rexmit_rto_commit+0x34>)
 800ce84:	f000 fe58 	bl	800db38 <iprintf>
  if (pcb->nrtx < 0xFF) {
 800ce88:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 800ce8c:	4620      	mov	r0, r4
  if (pcb->nrtx < 0xFF) {
 800ce8e:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800ce90:	bf1c      	itt	ne
 800ce92:	3301      	addne	r3, #1
 800ce94:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
}
 800ce98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800ce9c:	f7ff be40 	b.w	800cb20 <tcp_output>
 800cea0:	08022124 	.word	0x08022124
 800cea4:	080227c7 	.word	0x080227c7
 800cea8:	0801f8bf 	.word	0x0801f8bf

0800ceac <tcp_rexmit_rto>:
{
 800ceac:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800ceae:	4604      	mov	r4, r0
 800ceb0:	b930      	cbnz	r0, 800cec0 <tcp_rexmit_rto+0x14>
 800ceb2:	4b08      	ldr	r3, [pc, #32]	; (800ced4 <tcp_rexmit_rto+0x28>)
 800ceb4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800ceb8:	4907      	ldr	r1, [pc, #28]	; (800ced8 <tcp_rexmit_rto+0x2c>)
 800ceba:	4808      	ldr	r0, [pc, #32]	; (800cedc <tcp_rexmit_rto+0x30>)
 800cebc:	f000 fe3c 	bl	800db38 <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800cec0:	4620      	mov	r0, r4
 800cec2:	f7ff fcfd 	bl	800c8c0 <tcp_rexmit_rto_prepare>
 800cec6:	b920      	cbnz	r0, 800ced2 <tcp_rexmit_rto+0x26>
    tcp_rexmit_rto_commit(pcb);
 800cec8:	4620      	mov	r0, r4
}
 800ceca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tcp_rexmit_rto_commit(pcb);
 800cece:	f7ff bfd1 	b.w	800ce74 <tcp_rexmit_rto_commit>
}
 800ced2:	bd10      	pop	{r4, pc}
 800ced4:	08022124 	.word	0x08022124
 800ced8:	080227ea 	.word	0x080227ea
 800cedc:	0801f8bf 	.word	0x0801f8bf

0800cee0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800cee0:	b570      	push	{r4, r5, r6, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800cee2:	4604      	mov	r4, r0
 800cee4:	b930      	cbnz	r0, 800cef4 <tcp_keepalive+0x14>
 800cee6:	4b0f      	ldr	r3, [pc, #60]	; (800cf24 <tcp_keepalive+0x44>)
 800cee8:	f640 0224 	movw	r2, #2084	; 0x824
 800ceec:	490e      	ldr	r1, [pc, #56]	; (800cf28 <tcp_keepalive+0x48>)
 800ceee:	480f      	ldr	r0, [pc, #60]	; (800cf2c <tcp_keepalive+0x4c>)
 800cef0:	f000 fe22 	bl	800db38 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800cef4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800cef6:	3801      	subs	r0, #1
 800cef8:	f7fb fe81 	bl	8008bfe <lwip_htonl>
 800cefc:	2100      	movs	r1, #0
 800cefe:	4602      	mov	r2, r0
 800cf00:	4620      	mov	r0, r4
 800cf02:	f7ff f83f 	bl	800bf84 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800cf06:	4605      	mov	r5, r0
 800cf08:	b148      	cbz	r0, 800cf1e <tcp_keepalive+0x3e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cf0a:	f7ff f861 	bl	800bfd0 <tcp_output_fill_options.isra.0.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cf0e:	1d23      	adds	r3, r4, #4
 800cf10:	4622      	mov	r2, r4
 800cf12:	4629      	mov	r1, r5
 800cf14:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800cf16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cf1a:	f7ff b869 	b.w	800bff0 <tcp_output_control_segment>
}
 800cf1e:	f04f 30ff 	mov.w	r0, #4294967295
 800cf22:	bd70      	pop	{r4, r5, r6, pc}
 800cf24:	08022124 	.word	0x08022124
 800cf28:	08022806 	.word	0x08022806
 800cf2c:	0801f8bf 	.word	0x0801f8bf

0800cf30 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800cf30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800cf34:	4606      	mov	r6, r0
 800cf36:	b930      	cbnz	r0, 800cf46 <tcp_zero_window_probe+0x16>
 800cf38:	4b2c      	ldr	r3, [pc, #176]	; (800cfec <tcp_zero_window_probe+0xbc>)
 800cf3a:	f640 024f 	movw	r2, #2127	; 0x84f
 800cf3e:	492c      	ldr	r1, [pc, #176]	; (800cff0 <tcp_zero_window_probe+0xc0>)
 800cf40:	482c      	ldr	r0, [pc, #176]	; (800cff4 <tcp_zero_window_probe+0xc4>)
 800cf42:	f000 fdf9 	bl	800db38 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800cf46:	6ef5      	ldr	r5, [r6, #108]	; 0x6c
  if (seg == NULL) {
 800cf48:	2d00      	cmp	r5, #0
 800cf4a:	d048      	beq.n	800cfde <tcp_zero_window_probe+0xae>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800cf4c:	f896 3096 	ldrb.w	r3, [r6, #150]	; 0x96
 800cf50:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->persist_probe;
 800cf52:	bf1c      	itt	ne
 800cf54:	3301      	addne	r3, #1
 800cf56:	f886 3096 	strbne.w	r3, [r6, #150]	; 0x96
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800cf5a:	68eb      	ldr	r3, [r5, #12]
 800cf5c:	8998      	ldrh	r0, [r3, #12]
 800cf5e:	f7fb fe4b 	bl	8008bf8 <lwip_htons>
 800cf62:	f010 0401 	ands.w	r4, r0, #1
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800cf66:	68eb      	ldr	r3, [r5, #12]
 800cf68:	4630      	mov	r0, r6
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800cf6a:	bf18      	it	ne
 800cf6c:	892c      	ldrhne	r4, [r5, #8]
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800cf6e:	685a      	ldr	r2, [r3, #4]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800cf70:	bf1c      	itt	ne
 800cf72:	fab4 f484 	clzne	r4, r4
 800cf76:	0964      	lsrne	r4, r4, #5
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800cf78:	f084 0101 	eor.w	r1, r4, #1
 800cf7c:	f7ff f802 	bl	800bf84 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800cf80:	4607      	mov	r7, r0
 800cf82:	b378      	cbz	r0, 800cfe4 <tcp_zero_window_probe+0xb4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800cf84:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800cf88:	b1f4      	cbz	r4, 800cfc8 <tcp_zero_window_probe+0x98>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800cf8a:	f9b8 400c 	ldrsh.w	r4, [r8, #12]
 800cf8e:	2011      	movs	r0, #17
 800cf90:	f7fb fe32 	bl	8008bf8 <lwip_htons>
 800cf94:	f424 547c 	bic.w	r4, r4, #16128	; 0x3f00
 800cf98:	4320      	orrs	r0, r4
 800cf9a:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800cf9e:	68eb      	ldr	r3, [r5, #12]
 800cfa0:	6858      	ldr	r0, [r3, #4]
 800cfa2:	f7fb fe2c 	bl	8008bfe <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800cfa6:	6d33      	ldr	r3, [r6, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800cfa8:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800cfaa:	1a1b      	subs	r3, r3, r0
 800cfac:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 800cfae:	bfb8      	it	lt
 800cfb0:	6530      	strlt	r0, [r6, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cfb2:	4638      	mov	r0, r7
 800cfb4:	f7ff f80c 	bl	800bfd0 <tcp_output_fill_options.isra.0.constprop.0>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cfb8:	1d33      	adds	r3, r6, #4
 800cfba:	4632      	mov	r2, r6
 800cfbc:	4639      	mov	r1, r7
 800cfbe:	4630      	mov	r0, r6

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800cfc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cfc4:	f7ff b814 	b.w	800bff0 <tcp_output_control_segment>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800cfc8:	6868      	ldr	r0, [r5, #4]
 800cfca:	f108 0114 	add.w	r1, r8, #20
 800cfce:	892a      	ldrh	r2, [r5, #8]
 800cfd0:	8903      	ldrh	r3, [r0, #8]
 800cfd2:	1a9b      	subs	r3, r3, r2
 800cfd4:	2201      	movs	r2, #1
 800cfd6:	b29b      	uxth	r3, r3
 800cfd8:	f7fc fdec 	bl	8009bb4 <pbuf_copy_partial>
 800cfdc:	e7df      	b.n	800cf9e <tcp_zero_window_probe+0x6e>
    return ERR_OK;
 800cfde:	4628      	mov	r0, r5
}
 800cfe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
 800cfe4:	f04f 30ff 	mov.w	r0, #4294967295
 800cfe8:	e7fa      	b.n	800cfe0 <tcp_zero_window_probe+0xb0>
 800cfea:	bf00      	nop
 800cfec:	08022124 	.word	0x08022124
 800cff0:	08022821 	.word	0x08022821
 800cff4:	0801f8bf 	.word	0x0801f8bf

0800cff8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800cff8:	b570      	push	{r4, r5, r6, lr}
 800cffa:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800cffc:	200a      	movs	r0, #10
{
 800cffe:	460e      	mov	r6, r1
 800d000:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d002:	f7fc f913 	bl	800922c <memp_malloc>
  if (timeout == NULL) {
 800d006:	b938      	cbnz	r0, 800d018 <sys_timeout_abs+0x20>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d008:	4b10      	ldr	r3, [pc, #64]	; (800d04c <sys_timeout_abs+0x54>)
 800d00a:	22be      	movs	r2, #190	; 0xbe
 800d00c:	4910      	ldr	r1, [pc, #64]	; (800d050 <sys_timeout_abs+0x58>)
 800d00e:	4811      	ldr	r0, [pc, #68]	; (800d054 <sys_timeout_abs+0x5c>)
        t->next = timeout;
        break;
      }
    }
  }
}
 800d010:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d014:	f000 bd90 	b.w	800db38 <iprintf>
  timeout->next = NULL;
 800d018:	2300      	movs	r3, #0
  if (next_timeout == NULL) {
 800d01a:	4a0f      	ldr	r2, [pc, #60]	; (800d058 <sys_timeout_abs+0x60>)
  timeout->time = abs_time;
 800d01c:	6044      	str	r4, [r0, #4]
  timeout->next = NULL;
 800d01e:	6003      	str	r3, [r0, #0]
  if (next_timeout == NULL) {
 800d020:	6813      	ldr	r3, [r2, #0]
  timeout->arg = arg;
 800d022:	e9c0 6502 	strd	r6, r5, [r0, #8]
  if (next_timeout == NULL) {
 800d026:	b90b      	cbnz	r3, 800d02c <sys_timeout_abs+0x34>
    next_timeout = timeout;
 800d028:	6010      	str	r0, [r2, #0]
}
 800d02a:	bd70      	pop	{r4, r5, r6, pc}
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800d02c:	6859      	ldr	r1, [r3, #4]
 800d02e:	1a61      	subs	r1, r4, r1
 800d030:	2900      	cmp	r1, #0
 800d032:	da01      	bge.n	800d038 <sys_timeout_abs+0x40>
    timeout->next = next_timeout;
 800d034:	6003      	str	r3, [r0, #0]
 800d036:	e7f7      	b.n	800d028 <sys_timeout_abs+0x30>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800d038:	4619      	mov	r1, r3
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	b11b      	cbz	r3, 800d046 <sys_timeout_abs+0x4e>
 800d03e:	685a      	ldr	r2, [r3, #4]
 800d040:	1aa2      	subs	r2, r4, r2
 800d042:	2a00      	cmp	r2, #0
 800d044:	daf8      	bge.n	800d038 <sys_timeout_abs+0x40>
        timeout->next = t->next;
 800d046:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 800d048:	6008      	str	r0, [r1, #0]
        break;
 800d04a:	e7ee      	b.n	800d02a <sys_timeout_abs+0x32>
 800d04c:	08022844 	.word	0x08022844
 800d050:	080228a9 	.word	0x080228a9
 800d054:	0801f8bf 	.word	0x0801f8bf
 800d058:	240067e8 	.word	0x240067e8

0800d05c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800d05c:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800d05e:	6843      	ldr	r3, [r0, #4]
{
 800d060:	4604      	mov	r4, r0
  cyclic->handler();
 800d062:	4798      	blx	r3

  now = sys_now();
 800d064:	f7f3 fbaa 	bl	80007bc <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800d068:	4b07      	ldr	r3, [pc, #28]	; (800d088 <lwip_cyclic_timer+0x2c>)
 800d06a:	6825      	ldr	r5, [r4, #0]
 800d06c:	685b      	ldr	r3, [r3, #4]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d06e:	4907      	ldr	r1, [pc, #28]	; (800d08c <lwip_cyclic_timer+0x30>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800d070:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800d072:	1a1a      	subs	r2, r3, r0
 800d074:	2a00      	cmp	r2, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d076:	4622      	mov	r2, r4
 800d078:	bfb4      	ite	lt
 800d07a:	1940      	addlt	r0, r0, r5
  } else {
    /* correct cyclic interval with handler execution delay and sys_check_timeouts jitter */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d07c:	4618      	movge	r0, r3
#endif
  }
}
 800d07e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d082:	f7ff bfb9 	b.w	800cff8 <sys_timeout_abs>
 800d086:	bf00      	nop
 800d088:	240067e8 	.word	0x240067e8
 800d08c:	0800d05d 	.word	0x0800d05d

0800d090 <sys_timeout>:
{
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d090:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 800d094:	b570      	push	{r4, r5, r6, lr}
 800d096:	4604      	mov	r4, r0
 800d098:	460d      	mov	r5, r1
 800d09a:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d09c:	d306      	bcc.n	800d0ac <sys_timeout+0x1c>
 800d09e:	4b08      	ldr	r3, [pc, #32]	; (800d0c0 <sys_timeout+0x30>)
 800d0a0:	f240 1229 	movw	r2, #297	; 0x129
 800d0a4:	4907      	ldr	r1, [pc, #28]	; (800d0c4 <sys_timeout+0x34>)
 800d0a6:	4808      	ldr	r0, [pc, #32]	; (800d0c8 <sys_timeout+0x38>)
 800d0a8:	f000 fd46 	bl	800db38 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800d0ac:	f7f3 fb86 	bl	80007bc <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d0b0:	4632      	mov	r2, r6
 800d0b2:	4629      	mov	r1, r5
 800d0b4:	4420      	add	r0, r4
#endif
}
 800d0b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d0ba:	f7ff bf9d 	b.w	800cff8 <sys_timeout_abs>
 800d0be:	bf00      	nop
 800d0c0:	08022844 	.word	0x08022844
 800d0c4:	080228e6 	.word	0x080228e6
 800d0c8:	0801f8bf 	.word	0x0801f8bf

0800d0cc <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d0cc:	4b08      	ldr	r3, [pc, #32]	; (800d0f0 <tcp_timer_needed+0x24>)
 800d0ce:	689a      	ldr	r2, [r3, #8]
 800d0d0:	b962      	cbnz	r2, 800d0ec <tcp_timer_needed+0x20>
 800d0d2:	4a08      	ldr	r2, [pc, #32]	; (800d0f4 <tcp_timer_needed+0x28>)
 800d0d4:	6812      	ldr	r2, [r2, #0]
 800d0d6:	b912      	cbnz	r2, 800d0de <tcp_timer_needed+0x12>
 800d0d8:	4a07      	ldr	r2, [pc, #28]	; (800d0f8 <tcp_timer_needed+0x2c>)
 800d0da:	6812      	ldr	r2, [r2, #0]
 800d0dc:	b132      	cbz	r2, 800d0ec <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800d0de:	2201      	movs	r2, #1
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d0e0:	4906      	ldr	r1, [pc, #24]	; (800d0fc <tcp_timer_needed+0x30>)
 800d0e2:	20fa      	movs	r0, #250	; 0xfa
    tcpip_tcp_timer_active = 1;
 800d0e4:	609a      	str	r2, [r3, #8]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	f7ff bfd2 	b.w	800d090 <sys_timeout>
}
 800d0ec:	4770      	bx	lr
 800d0ee:	bf00      	nop
 800d0f0:	240067e8 	.word	0x240067e8
 800d0f4:	2400a790 	.word	0x2400a790
 800d0f8:	2400a7a0 	.word	0x2400a7a0
 800d0fc:	0800d101 	.word	0x0800d101

0800d100 <tcpip_tcp_timer>:
{
 800d100:	b508      	push	{r3, lr}
  tcp_tmr();
 800d102:	f7fd fbff 	bl	800a904 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d106:	4b08      	ldr	r3, [pc, #32]	; (800d128 <tcpip_tcp_timer+0x28>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	b913      	cbnz	r3, 800d112 <tcpip_tcp_timer+0x12>
 800d10c:	4b07      	ldr	r3, [pc, #28]	; (800d12c <tcpip_tcp_timer+0x2c>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	b133      	cbz	r3, 800d120 <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d112:	2200      	movs	r2, #0
 800d114:	4906      	ldr	r1, [pc, #24]	; (800d130 <tcpip_tcp_timer+0x30>)
 800d116:	20fa      	movs	r0, #250	; 0xfa
}
 800d118:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d11c:	f7ff bfb8 	b.w	800d090 <sys_timeout>
    tcpip_tcp_timer_active = 0;
 800d120:	4a04      	ldr	r2, [pc, #16]	; (800d134 <tcpip_tcp_timer+0x34>)
 800d122:	6093      	str	r3, [r2, #8]
}
 800d124:	bd08      	pop	{r3, pc}
 800d126:	bf00      	nop
 800d128:	2400a790 	.word	0x2400a790
 800d12c:	2400a7a0 	.word	0x2400a7a0
 800d130:	0800d101 	.word	0x0800d101
 800d134:	240067e8 	.word	0x240067e8

0800d138 <sys_timeouts_init>:
{
 800d138:	b510      	push	{r4, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800d13a:	4c0f      	ldr	r4, [pc, #60]	; (800d178 <sys_timeouts_init+0x40>)
 800d13c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d140:	490e      	ldr	r1, [pc, #56]	; (800d17c <sys_timeouts_init+0x44>)
 800d142:	f104 0208 	add.w	r2, r4, #8
 800d146:	f7ff ffa3 	bl	800d090 <sys_timeout>
 800d14a:	f104 0210 	add.w	r2, r4, #16
 800d14e:	490b      	ldr	r1, [pc, #44]	; (800d17c <sys_timeouts_init+0x44>)
 800d150:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d154:	f7ff ff9c 	bl	800d090 <sys_timeout>
 800d158:	f104 0218 	add.w	r2, r4, #24
 800d15c:	4907      	ldr	r1, [pc, #28]	; (800d17c <sys_timeouts_init+0x44>)
 800d15e:	f64e 2060 	movw	r0, #60000	; 0xea60
 800d162:	f7ff ff95 	bl	800d090 <sys_timeout>
 800d166:	f104 0220 	add.w	r2, r4, #32
 800d16a:	4904      	ldr	r1, [pc, #16]	; (800d17c <sys_timeouts_init+0x44>)
 800d16c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 800d170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800d174:	f7ff bf8c 	b.w	800d090 <sys_timeout>
 800d178:	0800f804 	.word	0x0800f804
 800d17c:	0800d05d 	.word	0x0800d05d

0800d180 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800d180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800d182:	f7f3 fb1b 	bl	80007bc <sys_now>
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800d186:	4d0b      	ldr	r5, [pc, #44]	; (800d1b4 <sys_check_timeouts+0x34>)
  now = sys_now();
 800d188:	4604      	mov	r4, r0
    tmptimeout = next_timeout;
 800d18a:	6829      	ldr	r1, [r5, #0]
    if (tmptimeout == NULL) {
 800d18c:	b181      	cbz	r1, 800d1b0 <sys_check_timeouts+0x30>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800d18e:	684b      	ldr	r3, [r1, #4]
 800d190:	1ae2      	subs	r2, r4, r3
 800d192:	2a00      	cmp	r2, #0
 800d194:	db0c      	blt.n	800d1b0 <sys_check_timeouts+0x30>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800d196:	680a      	ldr	r2, [r1, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d198:	200a      	movs	r0, #10
    current_timeout_due_time = tmptimeout->time;
 800d19a:	606b      	str	r3, [r5, #4]
    next_timeout = tmptimeout->next;
 800d19c:	602a      	str	r2, [r5, #0]
    arg = tmptimeout->arg;
 800d19e:	e9d1 6702 	ldrd	r6, r7, [r1, #8]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d1a2:	f7fc f873 	bl	800928c <memp_free>
    if (handler != NULL) {
 800d1a6:	2e00      	cmp	r6, #0
 800d1a8:	d0ef      	beq.n	800d18a <sys_check_timeouts+0xa>
      handler(arg);
 800d1aa:	4638      	mov	r0, r7
 800d1ac:	47b0      	blx	r6
 800d1ae:	e7ec      	b.n	800d18a <sys_check_timeouts+0xa>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800d1b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1b2:	bf00      	nop
 800d1b4:	240067e8 	.word	0x240067e8

0800d1b8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800d1b8:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800d1ba:	4c07      	ldr	r4, [pc, #28]	; (800d1d8 <sys_timeouts_sleeptime+0x20>)
 800d1bc:	6823      	ldr	r3, [r4, #0]
 800d1be:	b13b      	cbz	r3, 800d1d0 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 800d1c0:	f7f3 fafc 	bl	80007bc <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800d1c4:	6823      	ldr	r3, [r4, #0]
 800d1c6:	685b      	ldr	r3, [r3, #4]
 800d1c8:	1a18      	subs	r0, r3, r0
    return 0;
 800d1ca:	bf48      	it	mi
 800d1cc:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 800d1ce:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800d1d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d1d4:	e7fb      	b.n	800d1ce <sys_timeouts_sleeptime+0x16>
 800d1d6:	bf00      	nop
 800d1d8:	240067e8 	.word	0x240067e8

0800d1dc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800d1dc:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d1de:	f000 fcc3 	bl	800db68 <rand>
 800d1e2:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800d1e6:	4b02      	ldr	r3, [pc, #8]	; (800d1f0 <udp_init+0x14>)
 800d1e8:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800d1ec:	8018      	strh	r0, [r3, #0]
#endif /* LWIP_RAND */
}
 800d1ee:	bd08      	pop	{r3, pc}
 800d1f0:	24000030 	.word	0x24000030

0800d1f4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800d1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1f8:	4688      	mov	r8, r1
 800d1fa:	b085      	sub	sp, #20

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800d1fc:	4607      	mov	r7, r0
 800d1fe:	b928      	cbnz	r0, 800d20c <udp_input+0x18>
 800d200:	4b5f      	ldr	r3, [pc, #380]	; (800d380 <udp_input+0x18c>)
 800d202:	22cf      	movs	r2, #207	; 0xcf
 800d204:	495f      	ldr	r1, [pc, #380]	; (800d384 <udp_input+0x190>)
 800d206:	4860      	ldr	r0, [pc, #384]	; (800d388 <udp_input+0x194>)
 800d208:	f000 fc96 	bl	800db38 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800d20c:	f1b8 0f00 	cmp.w	r8, #0
 800d210:	d105      	bne.n	800d21e <udp_input+0x2a>
 800d212:	4b5b      	ldr	r3, [pc, #364]	; (800d380 <udp_input+0x18c>)
 800d214:	22d0      	movs	r2, #208	; 0xd0
 800d216:	495d      	ldr	r1, [pc, #372]	; (800d38c <udp_input+0x198>)
 800d218:	485b      	ldr	r0, [pc, #364]	; (800d388 <udp_input+0x194>)
 800d21a:	f000 fc8d 	bl	800db38 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800d21e:	897b      	ldrh	r3, [r7, #10]
 800d220:	2b07      	cmp	r3, #7
 800d222:	d805      	bhi.n	800d230 <udp_input+0x3c>
    if (pbuf_remove_header(p, UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800d224:	4638      	mov	r0, r7
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800d226:	b005      	add	sp, #20
 800d228:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800d22c:	f7fc ba9e 	b.w	800976c <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d230:	4e57      	ldr	r6, [pc, #348]	; (800d390 <udp_input+0x19c>)
  uncon_pcb = NULL;
 800d232:	2500      	movs	r5, #0
  udphdr = (struct udp_hdr *)p->payload;
 800d234:	687c      	ldr	r4, [r7, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d236:	6831      	ldr	r1, [r6, #0]
  prev = NULL;
 800d238:	46ab      	mov	fp, r5
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d23a:	6970      	ldr	r0, [r6, #20]
 800d23c:	f7fb f8eb 	bl	8008416 <ip4_addr_isbroadcast_u32>
 800d240:	4681      	mov	r9, r0
  src = lwip_ntohs(udphdr->src);
 800d242:	8820      	ldrh	r0, [r4, #0]
 800d244:	f7fb fcd8 	bl	8008bf8 <lwip_htons>
 800d248:	9002      	str	r0, [sp, #8]
  dest = lwip_ntohs(udphdr->dest);
 800d24a:	8860      	ldrh	r0, [r4, #2]
 800d24c:	f7fb fcd4 	bl	8008bf8 <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d250:	4b50      	ldr	r3, [pc, #320]	; (800d394 <udp_input+0x1a0>)
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d252:	f8df c12c 	ldr.w	ip, [pc, #300]	; 800d380 <udp_input+0x18c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d256:	681c      	ldr	r4, [r3, #0]
 800d258:	469a      	mov	sl, r3
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d25a:	494f      	ldr	r1, [pc, #316]	; (800d398 <udp_input+0x1a4>)
  dest = lwip_ntohs(udphdr->dest);
 800d25c:	9003      	str	r0, [sp, #12]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d25e:	b99c      	cbnz	r4, 800d288 <udp_input+0x94>
  if (pcb != NULL) {
 800d260:	b925      	cbnz	r5, 800d26c <udp_input+0x78>
  if (for_us) {
 800d262:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800d266:	6973      	ldr	r3, [r6, #20]
 800d268:	429a      	cmp	r2, r3
 800d26a:	d1db      	bne.n	800d224 <udp_input+0x30>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800d26c:	2108      	movs	r1, #8
 800d26e:	4638      	mov	r0, r7
 800d270:	f7fc fa48 	bl	8009704 <pbuf_remove_header>
 800d274:	2800      	cmp	r0, #0
 800d276:	d05e      	beq.n	800d336 <udp_input+0x142>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800d278:	4b41      	ldr	r3, [pc, #260]	; (800d380 <udp_input+0x18c>)
 800d27a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800d27e:	4947      	ldr	r1, [pc, #284]	; (800d39c <udp_input+0x1a8>)
 800d280:	4841      	ldr	r0, [pc, #260]	; (800d388 <udp_input+0x194>)
 800d282:	f000 fc59 	bl	800db38 <iprintf>
 800d286:	e7cd      	b.n	800d224 <udp_input+0x30>
    if ((pcb->local_port == dest) &&
 800d288:	8a62      	ldrh	r2, [r4, #18]
 800d28a:	9803      	ldr	r0, [sp, #12]
 800d28c:	4282      	cmp	r2, r0
 800d28e:	d14d      	bne.n	800d32c <udp_input+0x138>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d290:	f1b8 0f00 	cmp.w	r8, #0
 800d294:	d107      	bne.n	800d2a6 <udp_input+0xb2>
 800d296:	4663      	mov	r3, ip
 800d298:	2288      	movs	r2, #136	; 0x88
 800d29a:	483b      	ldr	r0, [pc, #236]	; (800d388 <udp_input+0x194>)
 800d29c:	f000 fc4c 	bl	800db38 <iprintf>
 800d2a0:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800d380 <udp_input+0x18c>
 800d2a4:	493c      	ldr	r1, [pc, #240]	; (800d398 <udp_input+0x1a4>)
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d2a6:	7a20      	ldrb	r0, [r4, #8]
 800d2a8:	b130      	cbz	r0, 800d2b8 <udp_input+0xc4>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d2aa:	6872      	ldr	r2, [r6, #4]
 800d2ac:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800d2b0:	3201      	adds	r2, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d2b2:	b2d2      	uxtb	r2, r2
 800d2b4:	4290      	cmp	r0, r2
 800d2b6:	d139      	bne.n	800d32c <udp_input+0x138>
    if (broadcast != 0) {
 800d2b8:	6822      	ldr	r2, [r4, #0]
 800d2ba:	f1b9 0f00 	cmp.w	r9, #0
 800d2be:	d030      	beq.n	800d322 <udp_input+0x12e>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d2c0:	b13a      	cbz	r2, 800d2d2 <udp_input+0xde>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d2c2:	6970      	ldr	r0, [r6, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d2c4:	1c43      	adds	r3, r0, #1
 800d2c6:	d004      	beq.n	800d2d2 <udp_input+0xde>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800d2c8:	4050      	eors	r0, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d2ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d2ce:	4218      	tst	r0, r3
 800d2d0:	d12c      	bne.n	800d32c <udp_input+0x138>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800d2d2:	7c20      	ldrb	r0, [r4, #16]
 800d2d4:	0743      	lsls	r3, r0, #29
 800d2d6:	d40e      	bmi.n	800d2f6 <udp_input+0x102>
        if (uncon_pcb == NULL) {
 800d2d8:	b35d      	cbz	r5, 800d332 <udp_input+0x13e>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800d2da:	f1b9 0f00 	cmp.w	r9, #0
 800d2de:	d00a      	beq.n	800d2f6 <udp_input+0x102>
 800d2e0:	6970      	ldr	r0, [r6, #20]
 800d2e2:	3001      	adds	r0, #1
 800d2e4:	d107      	bne.n	800d2f6 <udp_input+0x102>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800d2e6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d2ea:	682b      	ldr	r3, [r5, #0]
 800d2ec:	4283      	cmp	r3, r0
 800d2ee:	d002      	beq.n	800d2f6 <udp_input+0x102>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800d2f0:	4290      	cmp	r0, r2
 800d2f2:	bf08      	it	eq
 800d2f4:	4625      	moveq	r5, r4
      if ((pcb->remote_port == src) &&
 800d2f6:	8aa2      	ldrh	r2, [r4, #20]
 800d2f8:	9b02      	ldr	r3, [sp, #8]
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d116      	bne.n	800d32c <udp_input+0x138>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d2fe:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
 800d300:	b112      	cbz	r2, 800d308 <udp_input+0x114>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d302:	6930      	ldr	r0, [r6, #16]
 800d304:	4282      	cmp	r2, r0
 800d306:	d111      	bne.n	800d32c <udp_input+0x138>
        if (prev != NULL) {
 800d308:	f1bb 0f00 	cmp.w	fp, #0
 800d30c:	d007      	beq.n	800d31e <udp_input+0x12a>
          prev->next = pcb->next;
 800d30e:	68e3      	ldr	r3, [r4, #12]
 800d310:	f8cb 300c 	str.w	r3, [fp, #12]
          pcb->next = udp_pcbs;
 800d314:	f8da 3000 	ldr.w	r3, [sl]
          udp_pcbs = pcb;
 800d318:	f8ca 4000 	str.w	r4, [sl]
          pcb->next = udp_pcbs;
 800d31c:	60e3      	str	r3, [r4, #12]
          udp_pcbs = pcb;
 800d31e:	4625      	mov	r5, r4
 800d320:	e7a4      	b.n	800d26c <udp_input+0x78>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d322:	2a00      	cmp	r2, #0
 800d324:	d0d5      	beq.n	800d2d2 <udp_input+0xde>
 800d326:	6970      	ldr	r0, [r6, #20]
 800d328:	4290      	cmp	r0, r2
 800d32a:	d0d2      	beq.n	800d2d2 <udp_input+0xde>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d32c:	46a3      	mov	fp, r4
 800d32e:	68e4      	ldr	r4, [r4, #12]
 800d330:	e795      	b.n	800d25e <udp_input+0x6a>
 800d332:	4625      	mov	r5, r4
 800d334:	e7df      	b.n	800d2f6 <udp_input+0x102>
    if (pcb != NULL) {
 800d336:	b16d      	cbz	r5, 800d354 <udp_input+0x160>
      if (pcb->recv != NULL) {
 800d338:	69ac      	ldr	r4, [r5, #24]
 800d33a:	2c00      	cmp	r4, #0
 800d33c:	f43f af72 	beq.w	800d224 <udp_input+0x30>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800d340:	9b02      	ldr	r3, [sp, #8]
 800d342:	463a      	mov	r2, r7
 800d344:	4629      	mov	r1, r5
 800d346:	9300      	str	r3, [sp, #0]
 800d348:	4b15      	ldr	r3, [pc, #84]	; (800d3a0 <udp_input+0x1ac>)
 800d34a:	69e8      	ldr	r0, [r5, #28]
 800d34c:	47a0      	blx	r4
}
 800d34e:	b005      	add	sp, #20
 800d350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800d354:	f1b9 0f00 	cmp.w	r9, #0
 800d358:	f47f af64 	bne.w	800d224 <udp_input+0x30>
 800d35c:	6973      	ldr	r3, [r6, #20]
 800d35e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d362:	2be0      	cmp	r3, #224	; 0xe0
 800d364:	f43f af5e 	beq.w	800d224 <udp_input+0x30>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800d368:	89b1      	ldrh	r1, [r6, #12]
 800d36a:	4638      	mov	r0, r7
 800d36c:	3108      	adds	r1, #8
 800d36e:	b209      	sxth	r1, r1
 800d370:	f7fc f9f4 	bl	800975c <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800d374:	2103      	movs	r1, #3
 800d376:	4638      	mov	r0, r7
 800d378:	f7fa feac 	bl	80080d4 <icmp_dest_unreach>
 800d37c:	e752      	b.n	800d224 <udp_input+0x30>
 800d37e:	bf00      	nop
 800d380:	0802291c 	.word	0x0802291c
 800d384:	0802297c 	.word	0x0802297c
 800d388:	0801f8bf 	.word	0x0801f8bf
 800d38c:	08022994 	.word	0x08022994
 800d390:	24006a50 	.word	0x24006a50
 800d394:	2400a7a8 	.word	0x2400a7a8
 800d398:	080229ad 	.word	0x080229ad
 800d39c:	080229d2 	.word	0x080229d2
 800d3a0:	24006a60 	.word	0x24006a60

0800d3a4 <udp_bind>:
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 800d3a4:	4b2d      	ldr	r3, [pc, #180]	; (800d45c <udp_bind+0xb8>)
{
 800d3a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 800d3aa:	2900      	cmp	r1, #0
 800d3ac:	bf08      	it	eq
 800d3ae:	4619      	moveq	r1, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d3b0:	b950      	cbnz	r0, 800d3c8 <udp_bind+0x24>
 800d3b2:	4b2b      	ldr	r3, [pc, #172]	; (800d460 <udp_bind+0xbc>)
 800d3b4:	f240 32b7 	movw	r2, #951	; 0x3b7
 800d3b8:	492a      	ldr	r1, [pc, #168]	; (800d464 <udp_bind+0xc0>)
 800d3ba:	482b      	ldr	r0, [pc, #172]	; (800d468 <udp_bind+0xc4>)
 800d3bc:	f000 fbbc 	bl	800db38 <iprintf>
 800d3c0:	f06f 000f 	mvn.w	r0, #15
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 800d3c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d3c8:	4f28      	ldr	r7, [pc, #160]	; (800d46c <udp_bind+0xc8>)
 800d3ca:	683e      	ldr	r6, [r7, #0]
 800d3cc:	4635      	mov	r5, r6
 800d3ce:	b9d5      	cbnz	r5, 800d406 <udp_bind+0x62>
  if (port == 0) {
 800d3d0:	2a00      	cmp	r2, #0
 800d3d2:	d140      	bne.n	800d456 <udp_bind+0xb2>
 800d3d4:	4b26      	ldr	r3, [pc, #152]	; (800d470 <udp_bind+0xcc>)
 800d3d6:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800d3da:	f64f 7eff 	movw	lr, #65535	; 0xffff
 800d3de:	881a      	ldrh	r2, [r3, #0]
 800d3e0:	4572      	cmp	r2, lr
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d3e2:	46b4      	mov	ip, r6
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800d3e4:	bf16      	itet	ne
 800d3e6:	3201      	addne	r2, #1
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800d3e8:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800d3ec:	b292      	uxthne	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d3ee:	f1bc 0f00 	cmp.w	ip, #0
 800d3f2:	d10e      	bne.n	800d412 <udp_bind+0x6e>
 800d3f4:	801a      	strh	r2, [r3, #0]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d3f6:	680b      	ldr	r3, [r1, #0]
  pcb->local_port = port;
 800d3f8:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d3fa:	6003      	str	r3, [r0, #0]
  if (rebind == 0) {
 800d3fc:	b90d      	cbnz	r5, 800d402 <udp_bind+0x5e>
    pcb->next = udp_pcbs;
 800d3fe:	60c6      	str	r6, [r0, #12]
    udp_pcbs = pcb;
 800d400:	6038      	str	r0, [r7, #0]
  return ERR_OK;
 800d402:	2000      	movs	r0, #0
 800d404:	e7de      	b.n	800d3c4 <udp_bind+0x20>
    if (pcb == ipcb) {
 800d406:	4285      	cmp	r5, r0
 800d408:	d001      	beq.n	800d40e <udp_bind+0x6a>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d40a:	68ed      	ldr	r5, [r5, #12]
 800d40c:	e7df      	b.n	800d3ce <udp_bind+0x2a>
      rebind = 1;
 800d40e:	2501      	movs	r5, #1
 800d410:	e7de      	b.n	800d3d0 <udp_bind+0x2c>
    if (pcb->local_port == udp_port) {
 800d412:	f8bc 8012 	ldrh.w	r8, [ip, #18]
 800d416:	4590      	cmp	r8, r2
 800d418:	d107      	bne.n	800d42a <udp_bind+0x86>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800d41a:	3c01      	subs	r4, #1
 800d41c:	b2a4      	uxth	r4, r4
 800d41e:	2c00      	cmp	r4, #0
 800d420:	d1de      	bne.n	800d3e0 <udp_bind+0x3c>
 800d422:	801a      	strh	r2, [r3, #0]
      return ERR_USE;
 800d424:	f06f 0007 	mvn.w	r0, #7
 800d428:	e7cc      	b.n	800d3c4 <udp_bind+0x20>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d42a:	f8dc c00c 	ldr.w	ip, [ip, #12]
 800d42e:	e7de      	b.n	800d3ee <udp_bind+0x4a>
      if (pcb != ipcb) {
 800d430:	4283      	cmp	r3, r0
 800d432:	d00c      	beq.n	800d44e <udp_bind+0xaa>
          if ((ipcb->local_port == port) &&
 800d434:	8a5c      	ldrh	r4, [r3, #18]
 800d436:	4294      	cmp	r4, r2
 800d438:	d109      	bne.n	800d44e <udp_bind+0xaa>
 800d43a:	f8d1 c000 	ldr.w	ip, [r1]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d43e:	681c      	ldr	r4, [r3, #0]
          if ((ipcb->local_port == port) &&
 800d440:	4564      	cmp	r4, ip
 800d442:	d0ef      	beq.n	800d424 <udp_bind+0x80>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d444:	f1bc 0f00 	cmp.w	ip, #0
 800d448:	d0ec      	beq.n	800d424 <udp_bind+0x80>
              ip_addr_isany(&ipcb->local_ip))) {
 800d44a:	2c00      	cmp	r4, #0
 800d44c:	d0ea      	beq.n	800d424 <udp_bind+0x80>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d44e:	68db      	ldr	r3, [r3, #12]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d1ed      	bne.n	800d430 <udp_bind+0x8c>
 800d454:	e7cf      	b.n	800d3f6 <udp_bind+0x52>
 800d456:	4633      	mov	r3, r6
 800d458:	e7fa      	b.n	800d450 <udp_bind+0xac>
 800d45a:	bf00      	nop
 800d45c:	0800f6e0 	.word	0x0800f6e0
 800d460:	0802291c 	.word	0x0802291c
 800d464:	080229ed 	.word	0x080229ed
 800d468:	0801f8bf 	.word	0x0801f8bf
 800d46c:	2400a7a8 	.word	0x2400a7a8
 800d470:	24000030 	.word	0x24000030

0800d474 <udp_sendto_if_src>:
{
 800d474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d478:	b085      	sub	sp, #20
 800d47a:	460e      	mov	r6, r1
 800d47c:	4690      	mov	r8, r2
 800d47e:	4699      	mov	r9, r3
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800d480:	4607      	mov	r7, r0
{
 800d482:	e9dd ba0e 	ldrd	fp, sl, [sp, #56]	; 0x38
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800d486:	b960      	cbnz	r0, 800d4a2 <udp_sendto_if_src+0x2e>
 800d488:	4b3e      	ldr	r3, [pc, #248]	; (800d584 <udp_sendto_if_src+0x110>)
 800d48a:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d48e:	493e      	ldr	r1, [pc, #248]	; (800d588 <udp_sendto_if_src+0x114>)
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800d490:	f06f 040f 	mvn.w	r4, #15
 800d494:	483d      	ldr	r0, [pc, #244]	; (800d58c <udp_sendto_if_src+0x118>)
 800d496:	f000 fb4f 	bl	800db38 <iprintf>
}
 800d49a:	4620      	mov	r0, r4
 800d49c:	b005      	add	sp, #20
 800d49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800d4a2:	b921      	cbnz	r1, 800d4ae <udp_sendto_if_src+0x3a>
 800d4a4:	4b37      	ldr	r3, [pc, #220]	; (800d584 <udp_sendto_if_src+0x110>)
 800d4a6:	f240 22d2 	movw	r2, #722	; 0x2d2
 800d4aa:	4939      	ldr	r1, [pc, #228]	; (800d590 <udp_sendto_if_src+0x11c>)
 800d4ac:	e7f0      	b.n	800d490 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d4ae:	b922      	cbnz	r2, 800d4ba <udp_sendto_if_src+0x46>
 800d4b0:	4b34      	ldr	r3, [pc, #208]	; (800d584 <udp_sendto_if_src+0x110>)
 800d4b2:	f240 22d3 	movw	r2, #723	; 0x2d3
 800d4b6:	4937      	ldr	r1, [pc, #220]	; (800d594 <udp_sendto_if_src+0x120>)
 800d4b8:	e7ea      	b.n	800d490 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800d4ba:	f1ba 0f00 	cmp.w	sl, #0
 800d4be:	d104      	bne.n	800d4ca <udp_sendto_if_src+0x56>
 800d4c0:	4b30      	ldr	r3, [pc, #192]	; (800d584 <udp_sendto_if_src+0x110>)
 800d4c2:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800d4c6:	4934      	ldr	r1, [pc, #208]	; (800d598 <udp_sendto_if_src+0x124>)
 800d4c8:	e7e2      	b.n	800d490 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800d4ca:	f1bb 0f00 	cmp.w	fp, #0
 800d4ce:	d104      	bne.n	800d4da <udp_sendto_if_src+0x66>
 800d4d0:	4b2c      	ldr	r3, [pc, #176]	; (800d584 <udp_sendto_if_src+0x110>)
 800d4d2:	f240 22d5 	movw	r2, #725	; 0x2d5
 800d4d6:	4931      	ldr	r1, [pc, #196]	; (800d59c <udp_sendto_if_src+0x128>)
 800d4d8:	e7da      	b.n	800d490 <udp_sendto_if_src+0x1c>
  if (pcb->local_port == 0) {
 800d4da:	8a42      	ldrh	r2, [r0, #18]
 800d4dc:	b13a      	cbz	r2, 800d4ee <udp_sendto_if_src+0x7a>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800d4de:	8932      	ldrh	r2, [r6, #8]
 800d4e0:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 800d4e4:	429a      	cmp	r2, r3
 800d4e6:	d909      	bls.n	800d4fc <udp_sendto_if_src+0x88>
    return ERR_MEM;
 800d4e8:	f04f 34ff 	mov.w	r4, #4294967295
 800d4ec:	e7d5      	b.n	800d49a <udp_sendto_if_src+0x26>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d4ee:	4601      	mov	r1, r0
 800d4f0:	f7ff ff58 	bl	800d3a4 <udp_bind>
    if (err != ERR_OK) {
 800d4f4:	4604      	mov	r4, r0
 800d4f6:	2800      	cmp	r0, #0
 800d4f8:	d0f1      	beq.n	800d4de <udp_sendto_if_src+0x6a>
 800d4fa:	e7ce      	b.n	800d49a <udp_sendto_if_src+0x26>
  if (pbuf_add_header(p, UDP_HLEN)) {
 800d4fc:	2108      	movs	r1, #8
 800d4fe:	4630      	mov	r0, r6
 800d500:	f7fc f8fc 	bl	80096fc <pbuf_add_header>
 800d504:	2800      	cmp	r0, #0
 800d506:	d03a      	beq.n	800d57e <udp_sendto_if_src+0x10a>
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800d508:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d50c:	2108      	movs	r1, #8
 800d50e:	2022      	movs	r0, #34	; 0x22
 800d510:	f7fc f994 	bl	800983c <pbuf_alloc>
    if (q == NULL) {
 800d514:	4605      	mov	r5, r0
 800d516:	2800      	cmp	r0, #0
 800d518:	d0e6      	beq.n	800d4e8 <udp_sendto_if_src+0x74>
    if (p->tot_len != 0) {
 800d51a:	8933      	ldrh	r3, [r6, #8]
 800d51c:	b113      	cbz	r3, 800d524 <udp_sendto_if_src+0xb0>
      pbuf_chain(q, p);
 800d51e:	4631      	mov	r1, r6
 800d520:	f7fc fabc 	bl	8009a9c <pbuf_chain>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800d524:	896b      	ldrh	r3, [r5, #10]
 800d526:	2b07      	cmp	r3, #7
 800d528:	d806      	bhi.n	800d538 <udp_sendto_if_src+0xc4>
 800d52a:	4b16      	ldr	r3, [pc, #88]	; (800d584 <udp_sendto_if_src+0x110>)
 800d52c:	f240 320d 	movw	r2, #781	; 0x30d
 800d530:	491b      	ldr	r1, [pc, #108]	; (800d5a0 <udp_sendto_if_src+0x12c>)
 800d532:	4816      	ldr	r0, [pc, #88]	; (800d58c <udp_sendto_if_src+0x118>)
 800d534:	f000 fb00 	bl	800db38 <iprintf>
  udphdr = (struct udp_hdr *)q->payload;
 800d538:	686c      	ldr	r4, [r5, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 800d53a:	8a78      	ldrh	r0, [r7, #18]
 800d53c:	f7fb fb5c 	bl	8008bf8 <lwip_htons>
 800d540:	8020      	strh	r0, [r4, #0]
  udphdr->dest = lwip_htons(dst_port);
 800d542:	4648      	mov	r0, r9
 800d544:	f7fb fb58 	bl	8008bf8 <lwip_htons>
  udphdr->chksum = 0x0000;
 800d548:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 800d54a:	8060      	strh	r0, [r4, #2]
  udphdr->chksum = 0x0000;
 800d54c:	71a3      	strb	r3, [r4, #6]
 800d54e:	71e3      	strb	r3, [r4, #7]
    udphdr->len = lwip_htons(q->tot_len);
 800d550:	8928      	ldrh	r0, [r5, #8]
 800d552:	f7fb fb51 	bl	8008bf8 <lwip_htons>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800d556:	2311      	movs	r3, #17
    udphdr->len = lwip_htons(q->tot_len);
 800d558:	80a0      	strh	r0, [r4, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800d55a:	4642      	mov	r2, r8
 800d55c:	f8cd b008 	str.w	fp, [sp, #8]
 800d560:	4651      	mov	r1, sl
 800d562:	9301      	str	r3, [sp, #4]
 800d564:	4628      	mov	r0, r5
 800d566:	7abb      	ldrb	r3, [r7, #10]
 800d568:	9300      	str	r3, [sp, #0]
 800d56a:	7afb      	ldrb	r3, [r7, #11]
 800d56c:	f7fa fec8 	bl	8008300 <ip4_output_if_src>
  if (q != p) {
 800d570:	42b5      	cmp	r5, r6
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800d572:	4604      	mov	r4, r0
  if (q != p) {
 800d574:	d091      	beq.n	800d49a <udp_sendto_if_src+0x26>
    pbuf_free(q);
 800d576:	4628      	mov	r0, r5
 800d578:	f7fc f8f8 	bl	800976c <pbuf_free>
    q = NULL;
 800d57c:	e78d      	b.n	800d49a <udp_sendto_if_src+0x26>
 800d57e:	4635      	mov	r5, r6
 800d580:	e7d0      	b.n	800d524 <udp_sendto_if_src+0xb0>
 800d582:	bf00      	nop
 800d584:	0802291c 	.word	0x0802291c
 800d588:	08022a03 	.word	0x08022a03
 800d58c:	0801f8bf 	.word	0x0801f8bf
 800d590:	08022a22 	.word	0x08022a22
 800d594:	08022a42 	.word	0x08022a42
 800d598:	08022a64 	.word	0x08022a64
 800d59c:	08022a86 	.word	0x08022a86
 800d5a0:	08022aa7 	.word	0x08022aa7

0800d5a4 <udp_sendto_if>:
{
 800d5a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d5a6:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800d5a8:	b950      	cbnz	r0, 800d5c0 <udp_sendto_if+0x1c>
 800d5aa:	4b18      	ldr	r3, [pc, #96]	; (800d60c <udp_sendto_if+0x68>)
 800d5ac:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d5b0:	4917      	ldr	r1, [pc, #92]	; (800d610 <udp_sendto_if+0x6c>)
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800d5b2:	4818      	ldr	r0, [pc, #96]	; (800d614 <udp_sendto_if+0x70>)
 800d5b4:	f000 fac0 	bl	800db38 <iprintf>
 800d5b8:	f06f 000f 	mvn.w	r0, #15
}
 800d5bc:	b002      	add	sp, #8
 800d5be:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800d5c0:	b921      	cbnz	r1, 800d5cc <udp_sendto_if+0x28>
 800d5c2:	4b12      	ldr	r3, [pc, #72]	; (800d60c <udp_sendto_if+0x68>)
 800d5c4:	f240 2281 	movw	r2, #641	; 0x281
 800d5c8:	4913      	ldr	r1, [pc, #76]	; (800d618 <udp_sendto_if+0x74>)
 800d5ca:	e7f2      	b.n	800d5b2 <udp_sendto_if+0xe>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d5cc:	b922      	cbnz	r2, 800d5d8 <udp_sendto_if+0x34>
 800d5ce:	4b0f      	ldr	r3, [pc, #60]	; (800d60c <udp_sendto_if+0x68>)
 800d5d0:	f240 2282 	movw	r2, #642	; 0x282
 800d5d4:	4911      	ldr	r1, [pc, #68]	; (800d61c <udp_sendto_if+0x78>)
 800d5d6:	e7ec      	b.n	800d5b2 <udp_sendto_if+0xe>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800d5d8:	b924      	cbnz	r4, 800d5e4 <udp_sendto_if+0x40>
 800d5da:	4b0c      	ldr	r3, [pc, #48]	; (800d60c <udp_sendto_if+0x68>)
 800d5dc:	f240 2283 	movw	r2, #643	; 0x283
 800d5e0:	490f      	ldr	r1, [pc, #60]	; (800d620 <udp_sendto_if+0x7c>)
 800d5e2:	e7e6      	b.n	800d5b2 <udp_sendto_if+0xe>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d5e4:	6805      	ldr	r5, [r0, #0]
 800d5e6:	b11d      	cbz	r5, 800d5f0 <udp_sendto_if+0x4c>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800d5e8:	f005 06f0 	and.w	r6, r5, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d5ec:	2ee0      	cmp	r6, #224	; 0xe0
 800d5ee:	d105      	bne.n	800d5fc <udp_sendto_if+0x58>
      src_ip = netif_ip_addr4(netif);
 800d5f0:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800d5f2:	e9cd 4500 	strd	r4, r5, [sp]
 800d5f6:	f7ff ff3d 	bl	800d474 <udp_sendto_if_src>
 800d5fa:	e7df      	b.n	800d5bc <udp_sendto_if+0x18>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800d5fc:	6866      	ldr	r6, [r4, #4]
 800d5fe:	42b5      	cmp	r5, r6
 800d600:	d101      	bne.n	800d606 <udp_sendto_if+0x62>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d602:	4605      	mov	r5, r0
 800d604:	e7f5      	b.n	800d5f2 <udp_sendto_if+0x4e>
        return ERR_RTE;
 800d606:	f06f 0003 	mvn.w	r0, #3
 800d60a:	e7d7      	b.n	800d5bc <udp_sendto_if+0x18>
 800d60c:	0802291c 	.word	0x0802291c
 800d610:	08022ad5 	.word	0x08022ad5
 800d614:	0801f8bf 	.word	0x0801f8bf
 800d618:	08022af0 	.word	0x08022af0
 800d61c:	08022b0c 	.word	0x08022b0c
 800d620:	08022b2a 	.word	0x08022b2a

0800d624 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d624:	b570      	push	{r4, r5, r6, lr}
 800d626:	460d      	mov	r5, r1
 800d628:	4616      	mov	r6, r2
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800d62a:	4604      	mov	r4, r0
 800d62c:	b948      	cbnz	r0, 800d642 <udp_connect+0x1e>
 800d62e:	4b16      	ldr	r3, [pc, #88]	; (800d688 <udp_connect+0x64>)
 800d630:	f240 4235 	movw	r2, #1077	; 0x435
 800d634:	4915      	ldr	r1, [pc, #84]	; (800d68c <udp_connect+0x68>)
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800d636:	4816      	ldr	r0, [pc, #88]	; (800d690 <udp_connect+0x6c>)
 800d638:	f000 fa7e 	bl	800db38 <iprintf>
 800d63c:	f06f 000f 	mvn.w	r0, #15
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  udp_pcbs = pcb;
  return ERR_OK;
}
 800d640:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800d642:	b921      	cbnz	r1, 800d64e <udp_connect+0x2a>
 800d644:	4b10      	ldr	r3, [pc, #64]	; (800d688 <udp_connect+0x64>)
 800d646:	f240 4236 	movw	r2, #1078	; 0x436
 800d64a:	4912      	ldr	r1, [pc, #72]	; (800d694 <udp_connect+0x70>)
 800d64c:	e7f3      	b.n	800d636 <udp_connect+0x12>
  if (pcb->local_port == 0) {
 800d64e:	8a42      	ldrh	r2, [r0, #18]
 800d650:	b16a      	cbz	r2, 800d66e <udp_connect+0x4a>
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800d652:	682b      	ldr	r3, [r5, #0]
  pcb->remote_port = port;
 800d654:	82a6      	strh	r6, [r4, #20]
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800d656:	6063      	str	r3, [r4, #4]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800d658:	7c23      	ldrb	r3, [r4, #16]
 800d65a:	f043 0304 	orr.w	r3, r3, #4
 800d65e:	7423      	strb	r3, [r4, #16]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d660:	4b0d      	ldr	r3, [pc, #52]	; (800d698 <udp_connect+0x74>)
 800d662:	681a      	ldr	r2, [r3, #0]
 800d664:	4610      	mov	r0, r2
 800d666:	b940      	cbnz	r0, 800d67a <udp_connect+0x56>
  pcb->next = udp_pcbs;
 800d668:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 800d66a:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 800d66c:	e7e8      	b.n	800d640 <udp_connect+0x1c>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d66e:	4601      	mov	r1, r0
 800d670:	f7ff fe98 	bl	800d3a4 <udp_bind>
    if (err != ERR_OK) {
 800d674:	2800      	cmp	r0, #0
 800d676:	d0ec      	beq.n	800d652 <udp_connect+0x2e>
 800d678:	e7e2      	b.n	800d640 <udp_connect+0x1c>
    if (pcb == ipcb) {
 800d67a:	42a0      	cmp	r0, r4
 800d67c:	d001      	beq.n	800d682 <udp_connect+0x5e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d67e:	68c0      	ldr	r0, [r0, #12]
 800d680:	e7f1      	b.n	800d666 <udp_connect+0x42>
      return ERR_OK;
 800d682:	2000      	movs	r0, #0
 800d684:	e7dc      	b.n	800d640 <udp_connect+0x1c>
 800d686:	bf00      	nop
 800d688:	0802291c 	.word	0x0802291c
 800d68c:	08022bc0 	.word	0x08022bc0
 800d690:	0801f8bf 	.word	0x0801f8bf
 800d694:	08022bd9 	.word	0x08022bd9
 800d698:	2400a7a8 	.word	0x2400a7a8

0800d69c <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800d69c:	b930      	cbnz	r0, 800d6ac <udp_recv+0x10>
 800d69e:	4b05      	ldr	r3, [pc, #20]	; (800d6b4 <udp_recv+0x18>)
 800d6a0:	f240 428a 	movw	r2, #1162	; 0x48a
 800d6a4:	4904      	ldr	r1, [pc, #16]	; (800d6b8 <udp_recv+0x1c>)
 800d6a6:	4805      	ldr	r0, [pc, #20]	; (800d6bc <udp_recv+0x20>)
 800d6a8:	f000 ba46 	b.w	800db38 <iprintf>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 800d6ac:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 800d6b0:	4770      	bx	lr
 800d6b2:	bf00      	nop
 800d6b4:	0802291c 	.word	0x0802291c
 800d6b8:	08022c11 	.word	0x08022c11
 800d6bc:	0801f8bf 	.word	0x0801f8bf

0800d6c0 <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800d6c0:	4601      	mov	r1, r0
 800d6c2:	b930      	cbnz	r0, 800d6d2 <udp_remove+0x12>
 800d6c4:	4b0d      	ldr	r3, [pc, #52]	; (800d6fc <udp_remove+0x3c>)
 800d6c6:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800d6ca:	490d      	ldr	r1, [pc, #52]	; (800d700 <udp_remove+0x40>)
 800d6cc:	480d      	ldr	r0, [pc, #52]	; (800d704 <udp_remove+0x44>)
 800d6ce:	f000 ba33 	b.w	800db38 <iprintf>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800d6d2:	4a0d      	ldr	r2, [pc, #52]	; (800d708 <udp_remove+0x48>)
 800d6d4:	6813      	ldr	r3, [r2, #0]
 800d6d6:	4283      	cmp	r3, r0
 800d6d8:	d105      	bne.n	800d6e6 <udp_remove+0x26>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800d6da:	68c3      	ldr	r3, [r0, #12]
 800d6dc:	6013      	str	r3, [r2, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800d6de:	2000      	movs	r0, #0
 800d6e0:	f7fb bdd4 	b.w	800928c <memp_free>
 800d6e4:	4613      	mov	r3, r2
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d0f9      	beq.n	800d6de <udp_remove+0x1e>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800d6ea:	68da      	ldr	r2, [r3, #12]
 800d6ec:	2a00      	cmp	r2, #0
 800d6ee:	d0f6      	beq.n	800d6de <udp_remove+0x1e>
 800d6f0:	428a      	cmp	r2, r1
 800d6f2:	d1f7      	bne.n	800d6e4 <udp_remove+0x24>
        pcb2->next = pcb->next;
 800d6f4:	68ca      	ldr	r2, [r1, #12]
 800d6f6:	60da      	str	r2, [r3, #12]
        break;
 800d6f8:	e7f1      	b.n	800d6de <udp_remove+0x1e>
 800d6fa:	bf00      	nop
 800d6fc:	0802291c 	.word	0x0802291c
 800d700:	08022c27 	.word	0x08022c27
 800d704:	0801f8bf 	.word	0x0801f8bf
 800d708:	2400a7a8 	.word	0x2400a7a8

0800d70c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800d70c:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800d70e:	2000      	movs	r0, #0
 800d710:	f7fb fd8c 	bl	800922c <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800d714:	4604      	mov	r4, r0
 800d716:	b128      	cbz	r0, 800d724 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800d718:	2220      	movs	r2, #32
 800d71a:	2100      	movs	r1, #0
 800d71c:	f000 fa04 	bl	800db28 <memset>
    pcb->ttl = UDP_TTL;
 800d720:	23ff      	movs	r3, #255	; 0xff
 800d722:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800d724:	4620      	mov	r0, r4
 800d726:	bd10      	pop	{r4, pc}

0800d728 <udp_new_ip_type>:
{
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 800d728:	f7ff bff0 	b.w	800d70c <udp_new>

0800d72c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d72c:	b510      	push	{r4, lr}
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800d72e:	b138      	cbz	r0, 800d740 <udp_netif_ip_addr_changed+0x14>
 800d730:	6803      	ldr	r3, [r0, #0]
 800d732:	b12b      	cbz	r3, 800d740 <udp_netif_ip_addr_changed+0x14>
 800d734:	b121      	cbz	r1, 800d740 <udp_netif_ip_addr_changed+0x14>
 800d736:	680b      	ldr	r3, [r1, #0]
 800d738:	b113      	cbz	r3, 800d740 <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d73a:	4b06      	ldr	r3, [pc, #24]	; (800d754 <udp_netif_ip_addr_changed+0x28>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	b903      	cbnz	r3, 800d742 <udp_netif_ip_addr_changed+0x16>
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
      }
    }
  }
}
 800d740:	bd10      	pop	{r4, pc}
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800d742:	681c      	ldr	r4, [r3, #0]
 800d744:	6802      	ldr	r2, [r0, #0]
 800d746:	4294      	cmp	r4, r2
        ip_addr_copy(upcb->local_ip, *new_addr);
 800d748:	bf04      	itt	eq
 800d74a:	680a      	ldreq	r2, [r1, #0]
 800d74c:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d74e:	68db      	ldr	r3, [r3, #12]
 800d750:	e7f5      	b.n	800d73e <udp_netif_ip_addr_changed+0x12>
 800d752:	bf00      	nop
 800d754:	2400a7a8 	.word	0x2400a7a8

0800d758 <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800d758:	8943      	ldrh	r3, [r0, #10]
 800d75a:	2b0e      	cmp	r3, #14
{
 800d75c:	b570      	push	{r4, r5, r6, lr}
 800d75e:	4604      	mov	r4, r0
 800d760:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 800d762:	d91a      	bls.n	800d79a <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800d764:	7bc3      	ldrb	r3, [r0, #15]
 800d766:	b91b      	cbnz	r3, 800d770 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 800d768:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
 800d76c:	3301      	adds	r3, #1
 800d76e:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800d770:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800d772:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800d774:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800d776:	07d9      	lsls	r1, r3, #31
 800d778:	d50a      	bpl.n	800d790 <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800d77a:	2b01      	cmp	r3, #1
 800d77c:	d111      	bne.n	800d7a2 <ethernet_input+0x4a>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d77e:	7843      	ldrb	r3, [r0, #1]
 800d780:	b933      	cbnz	r3, 800d790 <ethernet_input+0x38>
 800d782:	7883      	ldrb	r3, [r0, #2]
 800d784:	2b5e      	cmp	r3, #94	; 0x5e
 800d786:	d103      	bne.n	800d790 <ethernet_input+0x38>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800d788:	7b63      	ldrb	r3, [r4, #13]
 800d78a:	f043 0310 	orr.w	r3, r3, #16
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800d78e:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800d790:	2e08      	cmp	r6, #8
 800d792:	d010      	beq.n	800d7b6 <ethernet_input+0x5e>
 800d794:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800d798:	d01d      	beq.n	800d7d6 <ethernet_input+0x7e>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800d79a:	4620      	mov	r0, r4
 800d79c:	f7fb ffe6 	bl	800976c <pbuf_free>
  return ERR_OK;
 800d7a0:	e017      	b.n	800d7d2 <ethernet_input+0x7a>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800d7a2:	2206      	movs	r2, #6
 800d7a4:	4913      	ldr	r1, [pc, #76]	; (800d7f4 <ethernet_input+0x9c>)
 800d7a6:	f000 f989 	bl	800dabc <memcmp>
 800d7aa:	2800      	cmp	r0, #0
 800d7ac:	d1f0      	bne.n	800d790 <ethernet_input+0x38>
      p->flags |= PBUF_FLAG_LLBCAST;
 800d7ae:	7b63      	ldrb	r3, [r4, #13]
 800d7b0:	f043 0308 	orr.w	r3, r3, #8
 800d7b4:	e7eb      	b.n	800d78e <ethernet_input+0x36>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d7b6:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 800d7ba:	071a      	lsls	r2, r3, #28
 800d7bc:	d5ed      	bpl.n	800d79a <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800d7be:	210e      	movs	r1, #14
 800d7c0:	4620      	mov	r0, r4
 800d7c2:	f7fb ff9f 	bl	8009704 <pbuf_remove_header>
 800d7c6:	2800      	cmp	r0, #0
 800d7c8:	d1e7      	bne.n	800d79a <ethernet_input+0x42>
        ip4_input(p, netif);
 800d7ca:	4629      	mov	r1, r5
 800d7cc:	4620      	mov	r0, r4
 800d7ce:	f7fa fcd3 	bl	8008178 <ip4_input>
}
 800d7d2:	2000      	movs	r0, #0
 800d7d4:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d7d6:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 800d7da:	071b      	lsls	r3, r3, #28
 800d7dc:	d5dd      	bpl.n	800d79a <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800d7de:	210e      	movs	r1, #14
 800d7e0:	4620      	mov	r0, r4
 800d7e2:	f7fb ff8f 	bl	8009704 <pbuf_remove_header>
 800d7e6:	2800      	cmp	r0, #0
 800d7e8:	d1d7      	bne.n	800d79a <ethernet_input+0x42>
        etharp_input(p, netif);
 800d7ea:	4629      	mov	r1, r5
 800d7ec:	4620      	mov	r0, r4
 800d7ee:	f7fa f911 	bl	8007a14 <etharp_input>
      break;
 800d7f2:	e7ee      	b.n	800d7d2 <ethernet_input+0x7a>
 800d7f4:	0800f830 	.word	0x0800f830

0800d7f8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800d7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7fc:	460d      	mov	r5, r1
 800d7fe:	4604      	mov	r4, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800d800:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 800d804:	4616      	mov	r6, r2
 800d806:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800d808:	f7fb f9f6 	bl	8008bf8 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800d80c:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800d80e:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800d810:	4628      	mov	r0, r5
 800d812:	f7fb ff73 	bl	80096fc <pbuf_add_header>
 800d816:	b9e0      	cbnz	r0, 800d852 <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800d818:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 800d81a:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	600b      	str	r3, [r1, #0]
 800d822:	88bb      	ldrh	r3, [r7, #4]
 800d824:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800d826:	6833      	ldr	r3, [r6, #0]
 800d828:	f8c1 3006 	str.w	r3, [r1, #6]
 800d82c:	88b3      	ldrh	r3, [r6, #4]
 800d82e:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800d830:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800d834:	2b06      	cmp	r3, #6
 800d836:	d006      	beq.n	800d846 <ethernet_output+0x4e>
 800d838:	4b08      	ldr	r3, [pc, #32]	; (800d85c <ethernet_output+0x64>)
 800d83a:	f44f 7299 	mov.w	r2, #306	; 0x132
 800d83e:	4908      	ldr	r1, [pc, #32]	; (800d860 <ethernet_output+0x68>)
 800d840:	4808      	ldr	r0, [pc, #32]	; (800d864 <ethernet_output+0x6c>)
 800d842:	f000 f979 	bl	800db38 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800d846:	69a3      	ldr	r3, [r4, #24]
 800d848:	4629      	mov	r1, r5
 800d84a:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800d84c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800d850:	4718      	bx	r3
}
 800d852:	f06f 0001 	mvn.w	r0, #1
 800d856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d85a:	bf00      	nop
 800d85c:	08022c3f 	.word	0x08022c3f
 800d860:	08022ca5 	.word	0x08022ca5
 800d864:	0801f8bf 	.word	0x0801f8bf

0800d868 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800d868:	b513      	push	{r0, r1, r4, lr}
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 800d86a:	2304      	movs	r3, #4
{
 800d86c:	4604      	mov	r4, r0
  osMessageQDef(QUEUE, size, void *);
 800d86e:	9100      	str	r1, [sp, #0]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800d870:	4668      	mov	r0, sp
 800d872:	2100      	movs	r1, #0
  osMessageQDef(QUEUE, size, void *);
 800d874:	9301      	str	r3, [sp, #4]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800d876:	f7f7 f81f 	bl	80048b8 <osMessageCreate>
 800d87a:	6020      	str	r0, [r4, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800d87c:	fab0 f080 	clz	r0, r0
 800d880:	0940      	lsrs	r0, r0, #5
    return ERR_MEM;

  return ERR_OK;
}
 800d882:	4240      	negs	r0, r0
 800d884:	b002      	add	sp, #8
 800d886:	bd10      	pop	{r4, pc}

0800d888 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 800d888:	b510      	push	{r4, lr}
 800d88a:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 800d88c:	6800      	ldr	r0, [r0, #0]
 800d88e:	f7f7 f888 	bl	80049a2 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 800d892:	6820      	ldr	r0, [r4, #0]
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 800d894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  osMessageDelete(*mbox);
 800d898:	f7f7 b88a 	b.w	80049b0 <osMessageDelete>

0800d89c <sys_mbox_trypost>:
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800d89c:	2200      	movs	r2, #0
 800d89e:	6800      	ldr	r0, [r0, #0]
{
 800d8a0:	b508      	push	{r3, lr}
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800d8a2:	f7f7 f80f 	bl	80048c4 <osMessagePut>
 800d8a6:	3800      	subs	r0, #0
 800d8a8:	bf18      	it	ne
 800d8aa:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 800d8ac:	4240      	negs	r0, r0
 800d8ae:	bd08      	pop	{r3, pc}

0800d8b0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800d8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8b2:	4617      	mov	r7, r2
 800d8b4:	b085      	sub	sp, #20
 800d8b6:	4606      	mov	r6, r0
 800d8b8:	460d      	mov	r5, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 800d8ba:	f7f6 ff3a 	bl	8004732 <osKernelSysTick>
 800d8be:	4604      	mov	r4, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800d8c0:	b177      	cbz	r7, 800d8e0 <sys_arch_mbox_fetch+0x30>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 800d8c2:	463a      	mov	r2, r7
 800d8c4:	6831      	ldr	r1, [r6, #0]
 800d8c6:	a801      	add	r0, sp, #4
 800d8c8:	f7f7 f824 	bl	8004914 <osMessageGet>

    if(event.status == osEventMessage)
 800d8cc:	9b01      	ldr	r3, [sp, #4]
 800d8ce:	2b10      	cmp	r3, #16
 800d8d0:	d10d      	bne.n	800d8ee <sys_arch_mbox_fetch+0x3e>
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
 800d8d2:	9b02      	ldr	r3, [sp, #8]
 800d8d4:	602b      	str	r3, [r5, #0]
    return (osKernelSysTick() - starttime);
 800d8d6:	f7f6 ff2c 	bl	8004732 <osKernelSysTick>
 800d8da:	1b00      	subs	r0, r0, r4
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800d8dc:	b005      	add	sp, #20
 800d8de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 800d8e0:	f04f 32ff 	mov.w	r2, #4294967295
 800d8e4:	6831      	ldr	r1, [r6, #0]
 800d8e6:	a801      	add	r0, sp, #4
 800d8e8:	f7f7 f814 	bl	8004914 <osMessageGet>
 800d8ec:	e7f1      	b.n	800d8d2 <sys_arch_mbox_fetch+0x22>
      return SYS_ARCH_TIMEOUT;
 800d8ee:	f04f 30ff 	mov.w	r0, #4294967295
 800d8f2:	e7f3      	b.n	800d8dc <sys_arch_mbox_fetch+0x2c>

0800d8f4 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 800d8f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d8f6:	460c      	mov	r4, r1
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	6801      	ldr	r1, [r0, #0]
 800d8fc:	a801      	add	r0, sp, #4
 800d8fe:	f7f7 f809 	bl	8004914 <osMessageGet>

  if(event.status == osEventMessage)
 800d902:	9b01      	ldr	r3, [sp, #4]
 800d904:	2b10      	cmp	r3, #16
  {
    *msg = (void *)event.value.v;
 800d906:	bf05      	ittet	eq
 800d908:	9b02      	ldreq	r3, [sp, #8]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 800d90a:	2000      	moveq	r0, #0
  }
  else
  {
    return SYS_MBOX_EMPTY;
 800d90c:	f04f 30ff 	movne.w	r0, #4294967295
    *msg = (void *)event.value.v;
 800d910:	6023      	streq	r3, [r4, #0]
  }
}
 800d912:	b004      	add	sp, #16
 800d914:	bd10      	pop	{r4, pc}

0800d916 <sys_mbox_valid>:
 800d916:	6800      	ldr	r0, [r0, #0]
 800d918:	3800      	subs	r0, #0
 800d91a:	bf18      	it	ne
 800d91c:	2001      	movne	r0, #1
 800d91e:	4770      	bx	lr

0800d920 <sys_mbox_set_invalid>:
 800d920:	2300      	movs	r3, #0
 800d922:	6003      	str	r3, [r0, #0]
 800d924:	4770      	bx	lr

0800d926 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 800d926:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d928:	4606      	mov	r6, r0
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 800d92a:	2400      	movs	r4, #0
{
 800d92c:	460d      	mov	r5, r1
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 800d92e:	a801      	add	r0, sp, #4
 800d930:	2101      	movs	r1, #1
  osSemaphoreDef(SEM);
 800d932:	9401      	str	r4, [sp, #4]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 800d934:	f7f6 ff80 	bl	8004838 <osSemaphoreCreate>
 800d938:	6030      	str	r0, [r6, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 800d93a:	b130      	cbz	r0, 800d94a <sys_sem_new+0x24>
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
  }

  if(count == 0)	// Means it can't be taken
 800d93c:	b945      	cbnz	r5, 800d950 <sys_sem_new+0x2a>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 800d93e:	4629      	mov	r1, r5
 800d940:	f7f6 ff90 	bl	8004864 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 800d944:	4628      	mov	r0, r5
}
 800d946:	b002      	add	sp, #8
 800d948:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 800d94a:	f04f 30ff 	mov.w	r0, #4294967295
 800d94e:	e7fa      	b.n	800d946 <sys_sem_new+0x20>
  return ERR_OK;
 800d950:	4620      	mov	r0, r4
 800d952:	e7f8      	b.n	800d946 <sys_sem_new+0x20>

0800d954 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 800d954:	b570      	push	{r4, r5, r6, lr}
 800d956:	460e      	mov	r6, r1
 800d958:	4605      	mov	r5, r0
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 800d95a:	f7f6 feea 	bl	8004732 <osKernelSysTick>
 800d95e:	4604      	mov	r4, r0
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800d960:	b146      	cbz	r6, 800d974 <sys_arch_sem_wait+0x20>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 800d962:	4631      	mov	r1, r6
 800d964:	6828      	ldr	r0, [r5, #0]
 800d966:	f7f6 ff7d 	bl	8004864 <osSemaphoreWait>
 800d96a:	b958      	cbnz	r0, 800d984 <sys_arch_sem_wait+0x30>
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
 800d96c:	f7f6 fee1 	bl	8004732 <osKernelSysTick>
 800d970:	1b00      	subs	r0, r0, r4
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800d972:	bd70      	pop	{r4, r5, r6, pc}
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 800d974:	f04f 31ff 	mov.w	r1, #4294967295
 800d978:	6828      	ldr	r0, [r5, #0]
 800d97a:	f7f6 ff73 	bl	8004864 <osSemaphoreWait>
 800d97e:	2800      	cmp	r0, #0
 800d980:	d1f8      	bne.n	800d974 <sys_arch_sem_wait+0x20>
 800d982:	e7f3      	b.n	800d96c <sys_arch_sem_wait+0x18>
      return SYS_ARCH_TIMEOUT;
 800d984:	f04f 30ff 	mov.w	r0, #4294967295
 800d988:	e7f3      	b.n	800d972 <sys_arch_sem_wait+0x1e>

0800d98a <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
  osSemaphoreRelease(*sem);
 800d98a:	6800      	ldr	r0, [r0, #0]
 800d98c:	f7f6 bf90 	b.w	80048b0 <osSemaphoreRelease>

0800d990 <sys_sem_free>:
{
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 800d990:	6800      	ldr	r0, [r0, #0]
 800d992:	f7f6 bf8f 	b.w	80048b4 <osSemaphoreDelete>

0800d996 <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
  if (*sem == SYS_SEM_NULL)
 800d996:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;
}
 800d998:	3800      	subs	r0, #0
 800d99a:	bf18      	it	ne
 800d99c:	2001      	movne	r0, #1
 800d99e:	4770      	bx	lr

0800d9a0 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
  *sem = SYS_SEM_NULL;
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	6003      	str	r3, [r0, #0]
}
 800d9a4:	4770      	bx	lr
	...

0800d9a8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800d9a8:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800d9aa:	4803      	ldr	r0, [pc, #12]	; (800d9b8 <sys_init+0x10>)
 800d9ac:	f7f6 feed 	bl	800478a <osMutexCreate>
 800d9b0:	4b02      	ldr	r3, [pc, #8]	; (800d9bc <sys_init+0x14>)
 800d9b2:	6018      	str	r0, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 800d9b4:	bd08      	pop	{r3, pc}
 800d9b6:	bf00      	nop
 800d9b8:	0800f83c 	.word	0x0800f83c
 800d9bc:	2400a7b0 	.word	0x2400a7b0

0800d9c0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800d9c0:	b513      	push	{r0, r1, r4, lr}

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 800d9c2:	2300      	movs	r3, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800d9c4:	4604      	mov	r4, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 800d9c6:	a801      	add	r0, sp, #4
  osMutexDef(MUTEX);
 800d9c8:	9301      	str	r3, [sp, #4]
  *mutex = osMutexCreate(osMutex(MUTEX));
 800d9ca:	f7f6 fede 	bl	800478a <osMutexCreate>
 800d9ce:	6020      	str	r0, [r4, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 800d9d0:	fab0 f080 	clz	r0, r0
 800d9d4:	0940      	lsrs	r0, r0, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 800d9d6:	4240      	negs	r0, r0
 800d9d8:	b002      	add	sp, #8
 800d9da:	bd10      	pop	{r4, pc}

0800d9dc <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 800d9dc:	f04f 31ff 	mov.w	r1, #4294967295
 800d9e0:	6800      	ldr	r0, [r0, #0]
 800d9e2:	f7f6 bed5 	b.w	8004790 <osMutexWait>

0800d9e6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 800d9e6:	6800      	ldr	r0, [r0, #0]
 800d9e8:	f7f6 bef8 	b.w	80047dc <osMutexRelease>

0800d9ec <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800d9ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800d9ee:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800d9f2:	9908      	ldr	r1, [sp, #32]
  return osThreadCreate(&os_thread_def, arg);
 800d9f4:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800d9f6:	f8ad 100c 	strh.w	r1, [sp, #12]
 800d9fa:	2100      	movs	r1, #0
 800d9fc:	e9cd 1304 	strd	r1, r3, [sp, #16]
  return osThreadCreate(&os_thread_def, arg);
 800da00:	4611      	mov	r1, r2
 800da02:	f7f6 fe9d 	bl	8004740 <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 800da06:	b007      	add	sp, #28
 800da08:	f85d fb04 	ldr.w	pc, [sp], #4

0800da0c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800da0c:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 800da0e:	4b04      	ldr	r3, [pc, #16]	; (800da20 <sys_arch_protect+0x14>)
 800da10:	f04f 31ff 	mov.w	r1, #4294967295
 800da14:	6818      	ldr	r0, [r3, #0]
 800da16:	f7f6 febb 	bl	8004790 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
}
 800da1a:	2001      	movs	r0, #1
 800da1c:	bd08      	pop	{r3, pc}
 800da1e:	bf00      	nop
 800da20:	2400a7b0 	.word	0x2400a7b0

0800da24 <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800da24:	4b01      	ldr	r3, [pc, #4]	; (800da2c <sys_arch_unprotect+0x8>)
 800da26:	6818      	ldr	r0, [r3, #0]
 800da28:	f7f6 bed8 	b.w	80047dc <osMutexRelease>
 800da2c:	2400a7b0 	.word	0x2400a7b0

0800da30 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800da30:	b570      	push	{r4, r5, r6, lr}
 800da32:	460e      	mov	r6, r1
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800da34:	4604      	mov	r4, r0
 800da36:	b1a8      	cbz	r0, 800da64 <fs_open+0x34>
 800da38:	b1a1      	cbz	r1, 800da64 <fs_open+0x34>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800da3a:	4d0c      	ldr	r5, [pc, #48]	; (800da6c <fs_open+0x3c>)
    if (!strcmp(name, (const char *)f->name)) {
 800da3c:	6869      	ldr	r1, [r5, #4]
 800da3e:	4630      	mov	r0, r6
 800da40:	f7f2 fc4e 	bl	80002e0 <strcmp>
 800da44:	b940      	cbnz	r0, 800da58 <fs_open+0x28>
      file->data = (const char *)f->data;
 800da46:	68ab      	ldr	r3, [r5, #8]
 800da48:	6023      	str	r3, [r4, #0]
      file->len = f->len;
 800da4a:	68eb      	ldr	r3, [r5, #12]
      file->index = f->len;
      file->pextension = NULL;
 800da4c:	60e0      	str	r0, [r4, #12]
      file->index = f->len;
 800da4e:	e9c4 3301 	strd	r3, r3, [r4, #4]
      file->flags = f->flags;
 800da52:	7c2b      	ldrb	r3, [r5, #16]
 800da54:	7423      	strb	r3, [r4, #16]
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
}
 800da56:	bd70      	pop	{r4, r5, r6, pc}
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800da58:	682d      	ldr	r5, [r5, #0]
 800da5a:	2d00      	cmp	r5, #0
 800da5c:	d1ee      	bne.n	800da3c <fs_open+0xc>
  return ERR_VAL;
 800da5e:	f06f 0005 	mvn.w	r0, #5
 800da62:	e7f8      	b.n	800da56 <fs_open+0x26>
    return ERR_ARG;
 800da64:	f06f 000f 	mvn.w	r0, #15
 800da68:	e7f5      	b.n	800da56 <fs_open+0x26>
 800da6a:	bf00      	nop
 800da6c:	0800f840 	.word	0x0800f840

0800da70 <fs_close>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800da70:	4770      	bx	lr
	...

0800da74 <__libc_init_array>:
 800da74:	b570      	push	{r4, r5, r6, lr}
 800da76:	4d0d      	ldr	r5, [pc, #52]	; (800daac <__libc_init_array+0x38>)
 800da78:	4c0d      	ldr	r4, [pc, #52]	; (800dab0 <__libc_init_array+0x3c>)
 800da7a:	1b64      	subs	r4, r4, r5
 800da7c:	10a4      	asrs	r4, r4, #2
 800da7e:	2600      	movs	r6, #0
 800da80:	42a6      	cmp	r6, r4
 800da82:	d109      	bne.n	800da98 <__libc_init_array+0x24>
 800da84:	4d0b      	ldr	r5, [pc, #44]	; (800dab4 <__libc_init_array+0x40>)
 800da86:	4c0c      	ldr	r4, [pc, #48]	; (800dab8 <__libc_init_array+0x44>)
 800da88:	f001 fa94 	bl	800efb4 <_init>
 800da8c:	1b64      	subs	r4, r4, r5
 800da8e:	10a4      	asrs	r4, r4, #2
 800da90:	2600      	movs	r6, #0
 800da92:	42a6      	cmp	r6, r4
 800da94:	d105      	bne.n	800daa2 <__libc_init_array+0x2e>
 800da96:	bd70      	pop	{r4, r5, r6, pc}
 800da98:	f855 3b04 	ldr.w	r3, [r5], #4
 800da9c:	4798      	blx	r3
 800da9e:	3601      	adds	r6, #1
 800daa0:	e7ee      	b.n	800da80 <__libc_init_array+0xc>
 800daa2:	f855 3b04 	ldr.w	r3, [r5], #4
 800daa6:	4798      	blx	r3
 800daa8:	3601      	adds	r6, #1
 800daaa:	e7f2      	b.n	800da92 <__libc_init_array+0x1e>
 800daac:	08022e24 	.word	0x08022e24
 800dab0:	08022e24 	.word	0x08022e24
 800dab4:	08022e24 	.word	0x08022e24
 800dab8:	08022e28 	.word	0x08022e28

0800dabc <memcmp>:
 800dabc:	b530      	push	{r4, r5, lr}
 800dabe:	3901      	subs	r1, #1
 800dac0:	2400      	movs	r4, #0
 800dac2:	42a2      	cmp	r2, r4
 800dac4:	d101      	bne.n	800daca <memcmp+0xe>
 800dac6:	2000      	movs	r0, #0
 800dac8:	e005      	b.n	800dad6 <memcmp+0x1a>
 800daca:	5d03      	ldrb	r3, [r0, r4]
 800dacc:	3401      	adds	r4, #1
 800dace:	5d0d      	ldrb	r5, [r1, r4]
 800dad0:	42ab      	cmp	r3, r5
 800dad2:	d0f6      	beq.n	800dac2 <memcmp+0x6>
 800dad4:	1b58      	subs	r0, r3, r5
 800dad6:	bd30      	pop	{r4, r5, pc}

0800dad8 <memcpy>:
 800dad8:	440a      	add	r2, r1
 800dada:	4291      	cmp	r1, r2
 800dadc:	f100 33ff 	add.w	r3, r0, #4294967295
 800dae0:	d100      	bne.n	800dae4 <memcpy+0xc>
 800dae2:	4770      	bx	lr
 800dae4:	b510      	push	{r4, lr}
 800dae6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800daea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800daee:	4291      	cmp	r1, r2
 800daf0:	d1f9      	bne.n	800dae6 <memcpy+0xe>
 800daf2:	bd10      	pop	{r4, pc}

0800daf4 <memmove>:
 800daf4:	4288      	cmp	r0, r1
 800daf6:	b510      	push	{r4, lr}
 800daf8:	eb01 0402 	add.w	r4, r1, r2
 800dafc:	d902      	bls.n	800db04 <memmove+0x10>
 800dafe:	4284      	cmp	r4, r0
 800db00:	4623      	mov	r3, r4
 800db02:	d807      	bhi.n	800db14 <memmove+0x20>
 800db04:	1e43      	subs	r3, r0, #1
 800db06:	42a1      	cmp	r1, r4
 800db08:	d008      	beq.n	800db1c <memmove+0x28>
 800db0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db12:	e7f8      	b.n	800db06 <memmove+0x12>
 800db14:	4402      	add	r2, r0
 800db16:	4601      	mov	r1, r0
 800db18:	428a      	cmp	r2, r1
 800db1a:	d100      	bne.n	800db1e <memmove+0x2a>
 800db1c:	bd10      	pop	{r4, pc}
 800db1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800db26:	e7f7      	b.n	800db18 <memmove+0x24>

0800db28 <memset>:
 800db28:	4402      	add	r2, r0
 800db2a:	4603      	mov	r3, r0
 800db2c:	4293      	cmp	r3, r2
 800db2e:	d100      	bne.n	800db32 <memset+0xa>
 800db30:	4770      	bx	lr
 800db32:	f803 1b01 	strb.w	r1, [r3], #1
 800db36:	e7f9      	b.n	800db2c <memset+0x4>

0800db38 <iprintf>:
 800db38:	b40f      	push	{r0, r1, r2, r3}
 800db3a:	4b0a      	ldr	r3, [pc, #40]	; (800db64 <iprintf+0x2c>)
 800db3c:	b513      	push	{r0, r1, r4, lr}
 800db3e:	681c      	ldr	r4, [r3, #0]
 800db40:	b124      	cbz	r4, 800db4c <iprintf+0x14>
 800db42:	69a3      	ldr	r3, [r4, #24]
 800db44:	b913      	cbnz	r3, 800db4c <iprintf+0x14>
 800db46:	4620      	mov	r0, r4
 800db48:	f000 f90e 	bl	800dd68 <__sinit>
 800db4c:	ab05      	add	r3, sp, #20
 800db4e:	9a04      	ldr	r2, [sp, #16]
 800db50:	68a1      	ldr	r1, [r4, #8]
 800db52:	9301      	str	r3, [sp, #4]
 800db54:	4620      	mov	r0, r4
 800db56:	f000 fbf1 	bl	800e33c <_vfiprintf_r>
 800db5a:	b002      	add	sp, #8
 800db5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db60:	b004      	add	sp, #16
 800db62:	4770      	bx	lr
 800db64:	24000034 	.word	0x24000034

0800db68 <rand>:
 800db68:	4b17      	ldr	r3, [pc, #92]	; (800dbc8 <rand+0x60>)
 800db6a:	b510      	push	{r4, lr}
 800db6c:	681c      	ldr	r4, [r3, #0]
 800db6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800db70:	b9b3      	cbnz	r3, 800dba0 <rand+0x38>
 800db72:	2018      	movs	r0, #24
 800db74:	f000 f9aa 	bl	800decc <malloc>
 800db78:	63a0      	str	r0, [r4, #56]	; 0x38
 800db7a:	b928      	cbnz	r0, 800db88 <rand+0x20>
 800db7c:	4602      	mov	r2, r0
 800db7e:	4b13      	ldr	r3, [pc, #76]	; (800dbcc <rand+0x64>)
 800db80:	4813      	ldr	r0, [pc, #76]	; (800dbd0 <rand+0x68>)
 800db82:	214e      	movs	r1, #78	; 0x4e
 800db84:	f000 f87a 	bl	800dc7c <__assert_func>
 800db88:	4a12      	ldr	r2, [pc, #72]	; (800dbd4 <rand+0x6c>)
 800db8a:	4b13      	ldr	r3, [pc, #76]	; (800dbd8 <rand+0x70>)
 800db8c:	e9c0 2300 	strd	r2, r3, [r0]
 800db90:	4b12      	ldr	r3, [pc, #72]	; (800dbdc <rand+0x74>)
 800db92:	6083      	str	r3, [r0, #8]
 800db94:	230b      	movs	r3, #11
 800db96:	8183      	strh	r3, [r0, #12]
 800db98:	2201      	movs	r2, #1
 800db9a:	2300      	movs	r3, #0
 800db9c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800dba0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800dba2:	480f      	ldr	r0, [pc, #60]	; (800dbe0 <rand+0x78>)
 800dba4:	690a      	ldr	r2, [r1, #16]
 800dba6:	694b      	ldr	r3, [r1, #20]
 800dba8:	4c0e      	ldr	r4, [pc, #56]	; (800dbe4 <rand+0x7c>)
 800dbaa:	4350      	muls	r0, r2
 800dbac:	fb04 0003 	mla	r0, r4, r3, r0
 800dbb0:	fba2 3404 	umull	r3, r4, r2, r4
 800dbb4:	1c5a      	adds	r2, r3, #1
 800dbb6:	4404      	add	r4, r0
 800dbb8:	f144 0000 	adc.w	r0, r4, #0
 800dbbc:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800dbc0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800dbc4:	bd10      	pop	{r4, pc}
 800dbc6:	bf00      	nop
 800dbc8:	24000034 	.word	0x24000034
 800dbcc:	08022cdc 	.word	0x08022cdc
 800dbd0:	08022cf3 	.word	0x08022cf3
 800dbd4:	abcd330e 	.word	0xabcd330e
 800dbd8:	e66d1234 	.word	0xe66d1234
 800dbdc:	0005deec 	.word	0x0005deec
 800dbe0:	5851f42d 	.word	0x5851f42d
 800dbe4:	4c957f2d 	.word	0x4c957f2d

0800dbe8 <siprintf>:
 800dbe8:	b40e      	push	{r1, r2, r3}
 800dbea:	b500      	push	{lr}
 800dbec:	b09c      	sub	sp, #112	; 0x70
 800dbee:	ab1d      	add	r3, sp, #116	; 0x74
 800dbf0:	9002      	str	r0, [sp, #8]
 800dbf2:	9006      	str	r0, [sp, #24]
 800dbf4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dbf8:	4809      	ldr	r0, [pc, #36]	; (800dc20 <siprintf+0x38>)
 800dbfa:	9107      	str	r1, [sp, #28]
 800dbfc:	9104      	str	r1, [sp, #16]
 800dbfe:	4909      	ldr	r1, [pc, #36]	; (800dc24 <siprintf+0x3c>)
 800dc00:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc04:	9105      	str	r1, [sp, #20]
 800dc06:	6800      	ldr	r0, [r0, #0]
 800dc08:	9301      	str	r3, [sp, #4]
 800dc0a:	a902      	add	r1, sp, #8
 800dc0c:	f000 fa6c 	bl	800e0e8 <_svfiprintf_r>
 800dc10:	9b02      	ldr	r3, [sp, #8]
 800dc12:	2200      	movs	r2, #0
 800dc14:	701a      	strb	r2, [r3, #0]
 800dc16:	b01c      	add	sp, #112	; 0x70
 800dc18:	f85d eb04 	ldr.w	lr, [sp], #4
 800dc1c:	b003      	add	sp, #12
 800dc1e:	4770      	bx	lr
 800dc20:	24000034 	.word	0x24000034
 800dc24:	ffff0208 	.word	0xffff0208

0800dc28 <strcat>:
 800dc28:	b510      	push	{r4, lr}
 800dc2a:	4602      	mov	r2, r0
 800dc2c:	7814      	ldrb	r4, [r2, #0]
 800dc2e:	4613      	mov	r3, r2
 800dc30:	3201      	adds	r2, #1
 800dc32:	2c00      	cmp	r4, #0
 800dc34:	d1fa      	bne.n	800dc2c <strcat+0x4>
 800dc36:	3b01      	subs	r3, #1
 800dc38:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc3c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dc40:	2a00      	cmp	r2, #0
 800dc42:	d1f9      	bne.n	800dc38 <strcat+0x10>
 800dc44:	bd10      	pop	{r4, pc}

0800dc46 <strcpy>:
 800dc46:	4603      	mov	r3, r0
 800dc48:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc4c:	f803 2b01 	strb.w	r2, [r3], #1
 800dc50:	2a00      	cmp	r2, #0
 800dc52:	d1f9      	bne.n	800dc48 <strcpy+0x2>
 800dc54:	4770      	bx	lr

0800dc56 <strncmp>:
 800dc56:	b510      	push	{r4, lr}
 800dc58:	b16a      	cbz	r2, 800dc76 <strncmp+0x20>
 800dc5a:	3901      	subs	r1, #1
 800dc5c:	1884      	adds	r4, r0, r2
 800dc5e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800dc62:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dc66:	4293      	cmp	r3, r2
 800dc68:	d103      	bne.n	800dc72 <strncmp+0x1c>
 800dc6a:	42a0      	cmp	r0, r4
 800dc6c:	d001      	beq.n	800dc72 <strncmp+0x1c>
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d1f5      	bne.n	800dc5e <strncmp+0x8>
 800dc72:	1a98      	subs	r0, r3, r2
 800dc74:	bd10      	pop	{r4, pc}
 800dc76:	4610      	mov	r0, r2
 800dc78:	e7fc      	b.n	800dc74 <strncmp+0x1e>
	...

0800dc7c <__assert_func>:
 800dc7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dc7e:	4614      	mov	r4, r2
 800dc80:	461a      	mov	r2, r3
 800dc82:	4b09      	ldr	r3, [pc, #36]	; (800dca8 <__assert_func+0x2c>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	4605      	mov	r5, r0
 800dc88:	68d8      	ldr	r0, [r3, #12]
 800dc8a:	b14c      	cbz	r4, 800dca0 <__assert_func+0x24>
 800dc8c:	4b07      	ldr	r3, [pc, #28]	; (800dcac <__assert_func+0x30>)
 800dc8e:	9100      	str	r1, [sp, #0]
 800dc90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dc94:	4906      	ldr	r1, [pc, #24]	; (800dcb0 <__assert_func+0x34>)
 800dc96:	462b      	mov	r3, r5
 800dc98:	f000 f8e4 	bl	800de64 <fiprintf>
 800dc9c:	f000 ff38 	bl	800eb10 <abort>
 800dca0:	4b04      	ldr	r3, [pc, #16]	; (800dcb4 <__assert_func+0x38>)
 800dca2:	461c      	mov	r4, r3
 800dca4:	e7f3      	b.n	800dc8e <__assert_func+0x12>
 800dca6:	bf00      	nop
 800dca8:	24000034 	.word	0x24000034
 800dcac:	08022d52 	.word	0x08022d52
 800dcb0:	08022d5f 	.word	0x08022d5f
 800dcb4:	0801fa8d 	.word	0x0801fa8d

0800dcb8 <std>:
 800dcb8:	2300      	movs	r3, #0
 800dcba:	b510      	push	{r4, lr}
 800dcbc:	4604      	mov	r4, r0
 800dcbe:	e9c0 3300 	strd	r3, r3, [r0]
 800dcc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dcc6:	6083      	str	r3, [r0, #8]
 800dcc8:	8181      	strh	r1, [r0, #12]
 800dcca:	6643      	str	r3, [r0, #100]	; 0x64
 800dccc:	81c2      	strh	r2, [r0, #14]
 800dcce:	6183      	str	r3, [r0, #24]
 800dcd0:	4619      	mov	r1, r3
 800dcd2:	2208      	movs	r2, #8
 800dcd4:	305c      	adds	r0, #92	; 0x5c
 800dcd6:	f7ff ff27 	bl	800db28 <memset>
 800dcda:	4b05      	ldr	r3, [pc, #20]	; (800dcf0 <std+0x38>)
 800dcdc:	6263      	str	r3, [r4, #36]	; 0x24
 800dcde:	4b05      	ldr	r3, [pc, #20]	; (800dcf4 <std+0x3c>)
 800dce0:	62a3      	str	r3, [r4, #40]	; 0x28
 800dce2:	4b05      	ldr	r3, [pc, #20]	; (800dcf8 <std+0x40>)
 800dce4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dce6:	4b05      	ldr	r3, [pc, #20]	; (800dcfc <std+0x44>)
 800dce8:	6224      	str	r4, [r4, #32]
 800dcea:	6323      	str	r3, [r4, #48]	; 0x30
 800dcec:	bd10      	pop	{r4, pc}
 800dcee:	bf00      	nop
 800dcf0:	0800e8e5 	.word	0x0800e8e5
 800dcf4:	0800e907 	.word	0x0800e907
 800dcf8:	0800e93f 	.word	0x0800e93f
 800dcfc:	0800e963 	.word	0x0800e963

0800dd00 <_cleanup_r>:
 800dd00:	4901      	ldr	r1, [pc, #4]	; (800dd08 <_cleanup_r+0x8>)
 800dd02:	f000 b8c1 	b.w	800de88 <_fwalk_reent>
 800dd06:	bf00      	nop
 800dd08:	0800ec4d 	.word	0x0800ec4d

0800dd0c <__sfmoreglue>:
 800dd0c:	b570      	push	{r4, r5, r6, lr}
 800dd0e:	1e4a      	subs	r2, r1, #1
 800dd10:	2568      	movs	r5, #104	; 0x68
 800dd12:	4355      	muls	r5, r2
 800dd14:	460e      	mov	r6, r1
 800dd16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dd1a:	f000 f92f 	bl	800df7c <_malloc_r>
 800dd1e:	4604      	mov	r4, r0
 800dd20:	b140      	cbz	r0, 800dd34 <__sfmoreglue+0x28>
 800dd22:	2100      	movs	r1, #0
 800dd24:	e9c0 1600 	strd	r1, r6, [r0]
 800dd28:	300c      	adds	r0, #12
 800dd2a:	60a0      	str	r0, [r4, #8]
 800dd2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dd30:	f7ff fefa 	bl	800db28 <memset>
 800dd34:	4620      	mov	r0, r4
 800dd36:	bd70      	pop	{r4, r5, r6, pc}

0800dd38 <__sfp_lock_acquire>:
 800dd38:	4801      	ldr	r0, [pc, #4]	; (800dd40 <__sfp_lock_acquire+0x8>)
 800dd3a:	f000 b8c5 	b.w	800dec8 <__retarget_lock_acquire_recursive>
 800dd3e:	bf00      	nop
 800dd40:	2400a7bc 	.word	0x2400a7bc

0800dd44 <__sfp_lock_release>:
 800dd44:	4801      	ldr	r0, [pc, #4]	; (800dd4c <__sfp_lock_release+0x8>)
 800dd46:	f000 b8c0 	b.w	800deca <__retarget_lock_release_recursive>
 800dd4a:	bf00      	nop
 800dd4c:	2400a7bc 	.word	0x2400a7bc

0800dd50 <__sinit_lock_acquire>:
 800dd50:	4801      	ldr	r0, [pc, #4]	; (800dd58 <__sinit_lock_acquire+0x8>)
 800dd52:	f000 b8b9 	b.w	800dec8 <__retarget_lock_acquire_recursive>
 800dd56:	bf00      	nop
 800dd58:	2400a7b7 	.word	0x2400a7b7

0800dd5c <__sinit_lock_release>:
 800dd5c:	4801      	ldr	r0, [pc, #4]	; (800dd64 <__sinit_lock_release+0x8>)
 800dd5e:	f000 b8b4 	b.w	800deca <__retarget_lock_release_recursive>
 800dd62:	bf00      	nop
 800dd64:	2400a7b7 	.word	0x2400a7b7

0800dd68 <__sinit>:
 800dd68:	b510      	push	{r4, lr}
 800dd6a:	4604      	mov	r4, r0
 800dd6c:	f7ff fff0 	bl	800dd50 <__sinit_lock_acquire>
 800dd70:	69a3      	ldr	r3, [r4, #24]
 800dd72:	b11b      	cbz	r3, 800dd7c <__sinit+0x14>
 800dd74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd78:	f7ff bff0 	b.w	800dd5c <__sinit_lock_release>
 800dd7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800dd80:	6523      	str	r3, [r4, #80]	; 0x50
 800dd82:	4b13      	ldr	r3, [pc, #76]	; (800ddd0 <__sinit+0x68>)
 800dd84:	4a13      	ldr	r2, [pc, #76]	; (800ddd4 <__sinit+0x6c>)
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	62a2      	str	r2, [r4, #40]	; 0x28
 800dd8a:	42a3      	cmp	r3, r4
 800dd8c:	bf04      	itt	eq
 800dd8e:	2301      	moveq	r3, #1
 800dd90:	61a3      	streq	r3, [r4, #24]
 800dd92:	4620      	mov	r0, r4
 800dd94:	f000 f820 	bl	800ddd8 <__sfp>
 800dd98:	6060      	str	r0, [r4, #4]
 800dd9a:	4620      	mov	r0, r4
 800dd9c:	f000 f81c 	bl	800ddd8 <__sfp>
 800dda0:	60a0      	str	r0, [r4, #8]
 800dda2:	4620      	mov	r0, r4
 800dda4:	f000 f818 	bl	800ddd8 <__sfp>
 800dda8:	2200      	movs	r2, #0
 800ddaa:	60e0      	str	r0, [r4, #12]
 800ddac:	2104      	movs	r1, #4
 800ddae:	6860      	ldr	r0, [r4, #4]
 800ddb0:	f7ff ff82 	bl	800dcb8 <std>
 800ddb4:	68a0      	ldr	r0, [r4, #8]
 800ddb6:	2201      	movs	r2, #1
 800ddb8:	2109      	movs	r1, #9
 800ddba:	f7ff ff7d 	bl	800dcb8 <std>
 800ddbe:	68e0      	ldr	r0, [r4, #12]
 800ddc0:	2202      	movs	r2, #2
 800ddc2:	2112      	movs	r1, #18
 800ddc4:	f7ff ff78 	bl	800dcb8 <std>
 800ddc8:	2301      	movs	r3, #1
 800ddca:	61a3      	str	r3, [r4, #24]
 800ddcc:	e7d2      	b.n	800dd74 <__sinit+0xc>
 800ddce:	bf00      	nop
 800ddd0:	08022cd8 	.word	0x08022cd8
 800ddd4:	0800dd01 	.word	0x0800dd01

0800ddd8 <__sfp>:
 800ddd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddda:	4607      	mov	r7, r0
 800dddc:	f7ff ffac 	bl	800dd38 <__sfp_lock_acquire>
 800dde0:	4b1e      	ldr	r3, [pc, #120]	; (800de5c <__sfp+0x84>)
 800dde2:	681e      	ldr	r6, [r3, #0]
 800dde4:	69b3      	ldr	r3, [r6, #24]
 800dde6:	b913      	cbnz	r3, 800ddee <__sfp+0x16>
 800dde8:	4630      	mov	r0, r6
 800ddea:	f7ff ffbd 	bl	800dd68 <__sinit>
 800ddee:	3648      	adds	r6, #72	; 0x48
 800ddf0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ddf4:	3b01      	subs	r3, #1
 800ddf6:	d503      	bpl.n	800de00 <__sfp+0x28>
 800ddf8:	6833      	ldr	r3, [r6, #0]
 800ddfa:	b30b      	cbz	r3, 800de40 <__sfp+0x68>
 800ddfc:	6836      	ldr	r6, [r6, #0]
 800ddfe:	e7f7      	b.n	800ddf0 <__sfp+0x18>
 800de00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800de04:	b9d5      	cbnz	r5, 800de3c <__sfp+0x64>
 800de06:	4b16      	ldr	r3, [pc, #88]	; (800de60 <__sfp+0x88>)
 800de08:	60e3      	str	r3, [r4, #12]
 800de0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800de0e:	6665      	str	r5, [r4, #100]	; 0x64
 800de10:	f000 f859 	bl	800dec6 <__retarget_lock_init_recursive>
 800de14:	f7ff ff96 	bl	800dd44 <__sfp_lock_release>
 800de18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800de1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800de20:	6025      	str	r5, [r4, #0]
 800de22:	61a5      	str	r5, [r4, #24]
 800de24:	2208      	movs	r2, #8
 800de26:	4629      	mov	r1, r5
 800de28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800de2c:	f7ff fe7c 	bl	800db28 <memset>
 800de30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800de34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800de38:	4620      	mov	r0, r4
 800de3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de3c:	3468      	adds	r4, #104	; 0x68
 800de3e:	e7d9      	b.n	800ddf4 <__sfp+0x1c>
 800de40:	2104      	movs	r1, #4
 800de42:	4638      	mov	r0, r7
 800de44:	f7ff ff62 	bl	800dd0c <__sfmoreglue>
 800de48:	4604      	mov	r4, r0
 800de4a:	6030      	str	r0, [r6, #0]
 800de4c:	2800      	cmp	r0, #0
 800de4e:	d1d5      	bne.n	800ddfc <__sfp+0x24>
 800de50:	f7ff ff78 	bl	800dd44 <__sfp_lock_release>
 800de54:	230c      	movs	r3, #12
 800de56:	603b      	str	r3, [r7, #0]
 800de58:	e7ee      	b.n	800de38 <__sfp+0x60>
 800de5a:	bf00      	nop
 800de5c:	08022cd8 	.word	0x08022cd8
 800de60:	ffff0001 	.word	0xffff0001

0800de64 <fiprintf>:
 800de64:	b40e      	push	{r1, r2, r3}
 800de66:	b503      	push	{r0, r1, lr}
 800de68:	4601      	mov	r1, r0
 800de6a:	ab03      	add	r3, sp, #12
 800de6c:	4805      	ldr	r0, [pc, #20]	; (800de84 <fiprintf+0x20>)
 800de6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800de72:	6800      	ldr	r0, [r0, #0]
 800de74:	9301      	str	r3, [sp, #4]
 800de76:	f000 fa61 	bl	800e33c <_vfiprintf_r>
 800de7a:	b002      	add	sp, #8
 800de7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800de80:	b003      	add	sp, #12
 800de82:	4770      	bx	lr
 800de84:	24000034 	.word	0x24000034

0800de88 <_fwalk_reent>:
 800de88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de8c:	4606      	mov	r6, r0
 800de8e:	4688      	mov	r8, r1
 800de90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800de94:	2700      	movs	r7, #0
 800de96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800de9a:	f1b9 0901 	subs.w	r9, r9, #1
 800de9e:	d505      	bpl.n	800deac <_fwalk_reent+0x24>
 800dea0:	6824      	ldr	r4, [r4, #0]
 800dea2:	2c00      	cmp	r4, #0
 800dea4:	d1f7      	bne.n	800de96 <_fwalk_reent+0xe>
 800dea6:	4638      	mov	r0, r7
 800dea8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800deac:	89ab      	ldrh	r3, [r5, #12]
 800deae:	2b01      	cmp	r3, #1
 800deb0:	d907      	bls.n	800dec2 <_fwalk_reent+0x3a>
 800deb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800deb6:	3301      	adds	r3, #1
 800deb8:	d003      	beq.n	800dec2 <_fwalk_reent+0x3a>
 800deba:	4629      	mov	r1, r5
 800debc:	4630      	mov	r0, r6
 800debe:	47c0      	blx	r8
 800dec0:	4307      	orrs	r7, r0
 800dec2:	3568      	adds	r5, #104	; 0x68
 800dec4:	e7e9      	b.n	800de9a <_fwalk_reent+0x12>

0800dec6 <__retarget_lock_init_recursive>:
 800dec6:	4770      	bx	lr

0800dec8 <__retarget_lock_acquire_recursive>:
 800dec8:	4770      	bx	lr

0800deca <__retarget_lock_release_recursive>:
 800deca:	4770      	bx	lr

0800decc <malloc>:
 800decc:	4b02      	ldr	r3, [pc, #8]	; (800ded8 <malloc+0xc>)
 800dece:	4601      	mov	r1, r0
 800ded0:	6818      	ldr	r0, [r3, #0]
 800ded2:	f000 b853 	b.w	800df7c <_malloc_r>
 800ded6:	bf00      	nop
 800ded8:	24000034 	.word	0x24000034

0800dedc <_free_r>:
 800dedc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dede:	2900      	cmp	r1, #0
 800dee0:	d048      	beq.n	800df74 <_free_r+0x98>
 800dee2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dee6:	9001      	str	r0, [sp, #4]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	f1a1 0404 	sub.w	r4, r1, #4
 800deee:	bfb8      	it	lt
 800def0:	18e4      	addlt	r4, r4, r3
 800def2:	f000 ff5d 	bl	800edb0 <__malloc_lock>
 800def6:	4a20      	ldr	r2, [pc, #128]	; (800df78 <_free_r+0x9c>)
 800def8:	9801      	ldr	r0, [sp, #4]
 800defa:	6813      	ldr	r3, [r2, #0]
 800defc:	4615      	mov	r5, r2
 800defe:	b933      	cbnz	r3, 800df0e <_free_r+0x32>
 800df00:	6063      	str	r3, [r4, #4]
 800df02:	6014      	str	r4, [r2, #0]
 800df04:	b003      	add	sp, #12
 800df06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800df0a:	f000 bf57 	b.w	800edbc <__malloc_unlock>
 800df0e:	42a3      	cmp	r3, r4
 800df10:	d90b      	bls.n	800df2a <_free_r+0x4e>
 800df12:	6821      	ldr	r1, [r4, #0]
 800df14:	1862      	adds	r2, r4, r1
 800df16:	4293      	cmp	r3, r2
 800df18:	bf04      	itt	eq
 800df1a:	681a      	ldreq	r2, [r3, #0]
 800df1c:	685b      	ldreq	r3, [r3, #4]
 800df1e:	6063      	str	r3, [r4, #4]
 800df20:	bf04      	itt	eq
 800df22:	1852      	addeq	r2, r2, r1
 800df24:	6022      	streq	r2, [r4, #0]
 800df26:	602c      	str	r4, [r5, #0]
 800df28:	e7ec      	b.n	800df04 <_free_r+0x28>
 800df2a:	461a      	mov	r2, r3
 800df2c:	685b      	ldr	r3, [r3, #4]
 800df2e:	b10b      	cbz	r3, 800df34 <_free_r+0x58>
 800df30:	42a3      	cmp	r3, r4
 800df32:	d9fa      	bls.n	800df2a <_free_r+0x4e>
 800df34:	6811      	ldr	r1, [r2, #0]
 800df36:	1855      	adds	r5, r2, r1
 800df38:	42a5      	cmp	r5, r4
 800df3a:	d10b      	bne.n	800df54 <_free_r+0x78>
 800df3c:	6824      	ldr	r4, [r4, #0]
 800df3e:	4421      	add	r1, r4
 800df40:	1854      	adds	r4, r2, r1
 800df42:	42a3      	cmp	r3, r4
 800df44:	6011      	str	r1, [r2, #0]
 800df46:	d1dd      	bne.n	800df04 <_free_r+0x28>
 800df48:	681c      	ldr	r4, [r3, #0]
 800df4a:	685b      	ldr	r3, [r3, #4]
 800df4c:	6053      	str	r3, [r2, #4]
 800df4e:	4421      	add	r1, r4
 800df50:	6011      	str	r1, [r2, #0]
 800df52:	e7d7      	b.n	800df04 <_free_r+0x28>
 800df54:	d902      	bls.n	800df5c <_free_r+0x80>
 800df56:	230c      	movs	r3, #12
 800df58:	6003      	str	r3, [r0, #0]
 800df5a:	e7d3      	b.n	800df04 <_free_r+0x28>
 800df5c:	6825      	ldr	r5, [r4, #0]
 800df5e:	1961      	adds	r1, r4, r5
 800df60:	428b      	cmp	r3, r1
 800df62:	bf04      	itt	eq
 800df64:	6819      	ldreq	r1, [r3, #0]
 800df66:	685b      	ldreq	r3, [r3, #4]
 800df68:	6063      	str	r3, [r4, #4]
 800df6a:	bf04      	itt	eq
 800df6c:	1949      	addeq	r1, r1, r5
 800df6e:	6021      	streq	r1, [r4, #0]
 800df70:	6054      	str	r4, [r2, #4]
 800df72:	e7c7      	b.n	800df04 <_free_r+0x28>
 800df74:	b003      	add	sp, #12
 800df76:	bd30      	pop	{r4, r5, pc}
 800df78:	240067f4 	.word	0x240067f4

0800df7c <_malloc_r>:
 800df7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df7e:	1ccd      	adds	r5, r1, #3
 800df80:	f025 0503 	bic.w	r5, r5, #3
 800df84:	3508      	adds	r5, #8
 800df86:	2d0c      	cmp	r5, #12
 800df88:	bf38      	it	cc
 800df8a:	250c      	movcc	r5, #12
 800df8c:	2d00      	cmp	r5, #0
 800df8e:	4606      	mov	r6, r0
 800df90:	db01      	blt.n	800df96 <_malloc_r+0x1a>
 800df92:	42a9      	cmp	r1, r5
 800df94:	d903      	bls.n	800df9e <_malloc_r+0x22>
 800df96:	230c      	movs	r3, #12
 800df98:	6033      	str	r3, [r6, #0]
 800df9a:	2000      	movs	r0, #0
 800df9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df9e:	f000 ff07 	bl	800edb0 <__malloc_lock>
 800dfa2:	4921      	ldr	r1, [pc, #132]	; (800e028 <_malloc_r+0xac>)
 800dfa4:	680a      	ldr	r2, [r1, #0]
 800dfa6:	4614      	mov	r4, r2
 800dfa8:	b99c      	cbnz	r4, 800dfd2 <_malloc_r+0x56>
 800dfaa:	4f20      	ldr	r7, [pc, #128]	; (800e02c <_malloc_r+0xb0>)
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	b923      	cbnz	r3, 800dfba <_malloc_r+0x3e>
 800dfb0:	4621      	mov	r1, r4
 800dfb2:	4630      	mov	r0, r6
 800dfb4:	f000 fc86 	bl	800e8c4 <_sbrk_r>
 800dfb8:	6038      	str	r0, [r7, #0]
 800dfba:	4629      	mov	r1, r5
 800dfbc:	4630      	mov	r0, r6
 800dfbe:	f000 fc81 	bl	800e8c4 <_sbrk_r>
 800dfc2:	1c43      	adds	r3, r0, #1
 800dfc4:	d123      	bne.n	800e00e <_malloc_r+0x92>
 800dfc6:	230c      	movs	r3, #12
 800dfc8:	6033      	str	r3, [r6, #0]
 800dfca:	4630      	mov	r0, r6
 800dfcc:	f000 fef6 	bl	800edbc <__malloc_unlock>
 800dfd0:	e7e3      	b.n	800df9a <_malloc_r+0x1e>
 800dfd2:	6823      	ldr	r3, [r4, #0]
 800dfd4:	1b5b      	subs	r3, r3, r5
 800dfd6:	d417      	bmi.n	800e008 <_malloc_r+0x8c>
 800dfd8:	2b0b      	cmp	r3, #11
 800dfda:	d903      	bls.n	800dfe4 <_malloc_r+0x68>
 800dfdc:	6023      	str	r3, [r4, #0]
 800dfde:	441c      	add	r4, r3
 800dfe0:	6025      	str	r5, [r4, #0]
 800dfe2:	e004      	b.n	800dfee <_malloc_r+0x72>
 800dfe4:	6863      	ldr	r3, [r4, #4]
 800dfe6:	42a2      	cmp	r2, r4
 800dfe8:	bf0c      	ite	eq
 800dfea:	600b      	streq	r3, [r1, #0]
 800dfec:	6053      	strne	r3, [r2, #4]
 800dfee:	4630      	mov	r0, r6
 800dff0:	f000 fee4 	bl	800edbc <__malloc_unlock>
 800dff4:	f104 000b 	add.w	r0, r4, #11
 800dff8:	1d23      	adds	r3, r4, #4
 800dffa:	f020 0007 	bic.w	r0, r0, #7
 800dffe:	1ac2      	subs	r2, r0, r3
 800e000:	d0cc      	beq.n	800df9c <_malloc_r+0x20>
 800e002:	1a1b      	subs	r3, r3, r0
 800e004:	50a3      	str	r3, [r4, r2]
 800e006:	e7c9      	b.n	800df9c <_malloc_r+0x20>
 800e008:	4622      	mov	r2, r4
 800e00a:	6864      	ldr	r4, [r4, #4]
 800e00c:	e7cc      	b.n	800dfa8 <_malloc_r+0x2c>
 800e00e:	1cc4      	adds	r4, r0, #3
 800e010:	f024 0403 	bic.w	r4, r4, #3
 800e014:	42a0      	cmp	r0, r4
 800e016:	d0e3      	beq.n	800dfe0 <_malloc_r+0x64>
 800e018:	1a21      	subs	r1, r4, r0
 800e01a:	4630      	mov	r0, r6
 800e01c:	f000 fc52 	bl	800e8c4 <_sbrk_r>
 800e020:	3001      	adds	r0, #1
 800e022:	d1dd      	bne.n	800dfe0 <_malloc_r+0x64>
 800e024:	e7cf      	b.n	800dfc6 <_malloc_r+0x4a>
 800e026:	bf00      	nop
 800e028:	240067f4 	.word	0x240067f4
 800e02c:	240067f8 	.word	0x240067f8

0800e030 <__ssputs_r>:
 800e030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e034:	688e      	ldr	r6, [r1, #8]
 800e036:	429e      	cmp	r6, r3
 800e038:	4682      	mov	sl, r0
 800e03a:	460c      	mov	r4, r1
 800e03c:	4690      	mov	r8, r2
 800e03e:	461f      	mov	r7, r3
 800e040:	d838      	bhi.n	800e0b4 <__ssputs_r+0x84>
 800e042:	898a      	ldrh	r2, [r1, #12]
 800e044:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e048:	d032      	beq.n	800e0b0 <__ssputs_r+0x80>
 800e04a:	6825      	ldr	r5, [r4, #0]
 800e04c:	6909      	ldr	r1, [r1, #16]
 800e04e:	eba5 0901 	sub.w	r9, r5, r1
 800e052:	6965      	ldr	r5, [r4, #20]
 800e054:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e058:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e05c:	3301      	adds	r3, #1
 800e05e:	444b      	add	r3, r9
 800e060:	106d      	asrs	r5, r5, #1
 800e062:	429d      	cmp	r5, r3
 800e064:	bf38      	it	cc
 800e066:	461d      	movcc	r5, r3
 800e068:	0553      	lsls	r3, r2, #21
 800e06a:	d531      	bpl.n	800e0d0 <__ssputs_r+0xa0>
 800e06c:	4629      	mov	r1, r5
 800e06e:	f7ff ff85 	bl	800df7c <_malloc_r>
 800e072:	4606      	mov	r6, r0
 800e074:	b950      	cbnz	r0, 800e08c <__ssputs_r+0x5c>
 800e076:	230c      	movs	r3, #12
 800e078:	f8ca 3000 	str.w	r3, [sl]
 800e07c:	89a3      	ldrh	r3, [r4, #12]
 800e07e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e082:	81a3      	strh	r3, [r4, #12]
 800e084:	f04f 30ff 	mov.w	r0, #4294967295
 800e088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e08c:	6921      	ldr	r1, [r4, #16]
 800e08e:	464a      	mov	r2, r9
 800e090:	f7ff fd22 	bl	800dad8 <memcpy>
 800e094:	89a3      	ldrh	r3, [r4, #12]
 800e096:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e09a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e09e:	81a3      	strh	r3, [r4, #12]
 800e0a0:	6126      	str	r6, [r4, #16]
 800e0a2:	6165      	str	r5, [r4, #20]
 800e0a4:	444e      	add	r6, r9
 800e0a6:	eba5 0509 	sub.w	r5, r5, r9
 800e0aa:	6026      	str	r6, [r4, #0]
 800e0ac:	60a5      	str	r5, [r4, #8]
 800e0ae:	463e      	mov	r6, r7
 800e0b0:	42be      	cmp	r6, r7
 800e0b2:	d900      	bls.n	800e0b6 <__ssputs_r+0x86>
 800e0b4:	463e      	mov	r6, r7
 800e0b6:	4632      	mov	r2, r6
 800e0b8:	6820      	ldr	r0, [r4, #0]
 800e0ba:	4641      	mov	r1, r8
 800e0bc:	f7ff fd1a 	bl	800daf4 <memmove>
 800e0c0:	68a3      	ldr	r3, [r4, #8]
 800e0c2:	6822      	ldr	r2, [r4, #0]
 800e0c4:	1b9b      	subs	r3, r3, r6
 800e0c6:	4432      	add	r2, r6
 800e0c8:	60a3      	str	r3, [r4, #8]
 800e0ca:	6022      	str	r2, [r4, #0]
 800e0cc:	2000      	movs	r0, #0
 800e0ce:	e7db      	b.n	800e088 <__ssputs_r+0x58>
 800e0d0:	462a      	mov	r2, r5
 800e0d2:	f000 fe79 	bl	800edc8 <_realloc_r>
 800e0d6:	4606      	mov	r6, r0
 800e0d8:	2800      	cmp	r0, #0
 800e0da:	d1e1      	bne.n	800e0a0 <__ssputs_r+0x70>
 800e0dc:	6921      	ldr	r1, [r4, #16]
 800e0de:	4650      	mov	r0, sl
 800e0e0:	f7ff fefc 	bl	800dedc <_free_r>
 800e0e4:	e7c7      	b.n	800e076 <__ssputs_r+0x46>
	...

0800e0e8 <_svfiprintf_r>:
 800e0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0ec:	4698      	mov	r8, r3
 800e0ee:	898b      	ldrh	r3, [r1, #12]
 800e0f0:	061b      	lsls	r3, r3, #24
 800e0f2:	b09d      	sub	sp, #116	; 0x74
 800e0f4:	4607      	mov	r7, r0
 800e0f6:	460d      	mov	r5, r1
 800e0f8:	4614      	mov	r4, r2
 800e0fa:	d50e      	bpl.n	800e11a <_svfiprintf_r+0x32>
 800e0fc:	690b      	ldr	r3, [r1, #16]
 800e0fe:	b963      	cbnz	r3, 800e11a <_svfiprintf_r+0x32>
 800e100:	2140      	movs	r1, #64	; 0x40
 800e102:	f7ff ff3b 	bl	800df7c <_malloc_r>
 800e106:	6028      	str	r0, [r5, #0]
 800e108:	6128      	str	r0, [r5, #16]
 800e10a:	b920      	cbnz	r0, 800e116 <_svfiprintf_r+0x2e>
 800e10c:	230c      	movs	r3, #12
 800e10e:	603b      	str	r3, [r7, #0]
 800e110:	f04f 30ff 	mov.w	r0, #4294967295
 800e114:	e0d1      	b.n	800e2ba <_svfiprintf_r+0x1d2>
 800e116:	2340      	movs	r3, #64	; 0x40
 800e118:	616b      	str	r3, [r5, #20]
 800e11a:	2300      	movs	r3, #0
 800e11c:	9309      	str	r3, [sp, #36]	; 0x24
 800e11e:	2320      	movs	r3, #32
 800e120:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e124:	f8cd 800c 	str.w	r8, [sp, #12]
 800e128:	2330      	movs	r3, #48	; 0x30
 800e12a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e2d4 <_svfiprintf_r+0x1ec>
 800e12e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e132:	f04f 0901 	mov.w	r9, #1
 800e136:	4623      	mov	r3, r4
 800e138:	469a      	mov	sl, r3
 800e13a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e13e:	b10a      	cbz	r2, 800e144 <_svfiprintf_r+0x5c>
 800e140:	2a25      	cmp	r2, #37	; 0x25
 800e142:	d1f9      	bne.n	800e138 <_svfiprintf_r+0x50>
 800e144:	ebba 0b04 	subs.w	fp, sl, r4
 800e148:	d00b      	beq.n	800e162 <_svfiprintf_r+0x7a>
 800e14a:	465b      	mov	r3, fp
 800e14c:	4622      	mov	r2, r4
 800e14e:	4629      	mov	r1, r5
 800e150:	4638      	mov	r0, r7
 800e152:	f7ff ff6d 	bl	800e030 <__ssputs_r>
 800e156:	3001      	adds	r0, #1
 800e158:	f000 80aa 	beq.w	800e2b0 <_svfiprintf_r+0x1c8>
 800e15c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e15e:	445a      	add	r2, fp
 800e160:	9209      	str	r2, [sp, #36]	; 0x24
 800e162:	f89a 3000 	ldrb.w	r3, [sl]
 800e166:	2b00      	cmp	r3, #0
 800e168:	f000 80a2 	beq.w	800e2b0 <_svfiprintf_r+0x1c8>
 800e16c:	2300      	movs	r3, #0
 800e16e:	f04f 32ff 	mov.w	r2, #4294967295
 800e172:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e176:	f10a 0a01 	add.w	sl, sl, #1
 800e17a:	9304      	str	r3, [sp, #16]
 800e17c:	9307      	str	r3, [sp, #28]
 800e17e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e182:	931a      	str	r3, [sp, #104]	; 0x68
 800e184:	4654      	mov	r4, sl
 800e186:	2205      	movs	r2, #5
 800e188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e18c:	4851      	ldr	r0, [pc, #324]	; (800e2d4 <_svfiprintf_r+0x1ec>)
 800e18e:	f7f2 f8bf 	bl	8000310 <memchr>
 800e192:	9a04      	ldr	r2, [sp, #16]
 800e194:	b9d8      	cbnz	r0, 800e1ce <_svfiprintf_r+0xe6>
 800e196:	06d0      	lsls	r0, r2, #27
 800e198:	bf44      	itt	mi
 800e19a:	2320      	movmi	r3, #32
 800e19c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1a0:	0711      	lsls	r1, r2, #28
 800e1a2:	bf44      	itt	mi
 800e1a4:	232b      	movmi	r3, #43	; 0x2b
 800e1a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1aa:	f89a 3000 	ldrb.w	r3, [sl]
 800e1ae:	2b2a      	cmp	r3, #42	; 0x2a
 800e1b0:	d015      	beq.n	800e1de <_svfiprintf_r+0xf6>
 800e1b2:	9a07      	ldr	r2, [sp, #28]
 800e1b4:	4654      	mov	r4, sl
 800e1b6:	2000      	movs	r0, #0
 800e1b8:	f04f 0c0a 	mov.w	ip, #10
 800e1bc:	4621      	mov	r1, r4
 800e1be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e1c2:	3b30      	subs	r3, #48	; 0x30
 800e1c4:	2b09      	cmp	r3, #9
 800e1c6:	d94e      	bls.n	800e266 <_svfiprintf_r+0x17e>
 800e1c8:	b1b0      	cbz	r0, 800e1f8 <_svfiprintf_r+0x110>
 800e1ca:	9207      	str	r2, [sp, #28]
 800e1cc:	e014      	b.n	800e1f8 <_svfiprintf_r+0x110>
 800e1ce:	eba0 0308 	sub.w	r3, r0, r8
 800e1d2:	fa09 f303 	lsl.w	r3, r9, r3
 800e1d6:	4313      	orrs	r3, r2
 800e1d8:	9304      	str	r3, [sp, #16]
 800e1da:	46a2      	mov	sl, r4
 800e1dc:	e7d2      	b.n	800e184 <_svfiprintf_r+0x9c>
 800e1de:	9b03      	ldr	r3, [sp, #12]
 800e1e0:	1d19      	adds	r1, r3, #4
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	9103      	str	r1, [sp, #12]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	bfbb      	ittet	lt
 800e1ea:	425b      	neglt	r3, r3
 800e1ec:	f042 0202 	orrlt.w	r2, r2, #2
 800e1f0:	9307      	strge	r3, [sp, #28]
 800e1f2:	9307      	strlt	r3, [sp, #28]
 800e1f4:	bfb8      	it	lt
 800e1f6:	9204      	strlt	r2, [sp, #16]
 800e1f8:	7823      	ldrb	r3, [r4, #0]
 800e1fa:	2b2e      	cmp	r3, #46	; 0x2e
 800e1fc:	d10c      	bne.n	800e218 <_svfiprintf_r+0x130>
 800e1fe:	7863      	ldrb	r3, [r4, #1]
 800e200:	2b2a      	cmp	r3, #42	; 0x2a
 800e202:	d135      	bne.n	800e270 <_svfiprintf_r+0x188>
 800e204:	9b03      	ldr	r3, [sp, #12]
 800e206:	1d1a      	adds	r2, r3, #4
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	9203      	str	r2, [sp, #12]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	bfb8      	it	lt
 800e210:	f04f 33ff 	movlt.w	r3, #4294967295
 800e214:	3402      	adds	r4, #2
 800e216:	9305      	str	r3, [sp, #20]
 800e218:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e2e4 <_svfiprintf_r+0x1fc>
 800e21c:	7821      	ldrb	r1, [r4, #0]
 800e21e:	2203      	movs	r2, #3
 800e220:	4650      	mov	r0, sl
 800e222:	f7f2 f875 	bl	8000310 <memchr>
 800e226:	b140      	cbz	r0, 800e23a <_svfiprintf_r+0x152>
 800e228:	2340      	movs	r3, #64	; 0x40
 800e22a:	eba0 000a 	sub.w	r0, r0, sl
 800e22e:	fa03 f000 	lsl.w	r0, r3, r0
 800e232:	9b04      	ldr	r3, [sp, #16]
 800e234:	4303      	orrs	r3, r0
 800e236:	3401      	adds	r4, #1
 800e238:	9304      	str	r3, [sp, #16]
 800e23a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e23e:	4826      	ldr	r0, [pc, #152]	; (800e2d8 <_svfiprintf_r+0x1f0>)
 800e240:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e244:	2206      	movs	r2, #6
 800e246:	f7f2 f863 	bl	8000310 <memchr>
 800e24a:	2800      	cmp	r0, #0
 800e24c:	d038      	beq.n	800e2c0 <_svfiprintf_r+0x1d8>
 800e24e:	4b23      	ldr	r3, [pc, #140]	; (800e2dc <_svfiprintf_r+0x1f4>)
 800e250:	bb1b      	cbnz	r3, 800e29a <_svfiprintf_r+0x1b2>
 800e252:	9b03      	ldr	r3, [sp, #12]
 800e254:	3307      	adds	r3, #7
 800e256:	f023 0307 	bic.w	r3, r3, #7
 800e25a:	3308      	adds	r3, #8
 800e25c:	9303      	str	r3, [sp, #12]
 800e25e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e260:	4433      	add	r3, r6
 800e262:	9309      	str	r3, [sp, #36]	; 0x24
 800e264:	e767      	b.n	800e136 <_svfiprintf_r+0x4e>
 800e266:	fb0c 3202 	mla	r2, ip, r2, r3
 800e26a:	460c      	mov	r4, r1
 800e26c:	2001      	movs	r0, #1
 800e26e:	e7a5      	b.n	800e1bc <_svfiprintf_r+0xd4>
 800e270:	2300      	movs	r3, #0
 800e272:	3401      	adds	r4, #1
 800e274:	9305      	str	r3, [sp, #20]
 800e276:	4619      	mov	r1, r3
 800e278:	f04f 0c0a 	mov.w	ip, #10
 800e27c:	4620      	mov	r0, r4
 800e27e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e282:	3a30      	subs	r2, #48	; 0x30
 800e284:	2a09      	cmp	r2, #9
 800e286:	d903      	bls.n	800e290 <_svfiprintf_r+0x1a8>
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d0c5      	beq.n	800e218 <_svfiprintf_r+0x130>
 800e28c:	9105      	str	r1, [sp, #20]
 800e28e:	e7c3      	b.n	800e218 <_svfiprintf_r+0x130>
 800e290:	fb0c 2101 	mla	r1, ip, r1, r2
 800e294:	4604      	mov	r4, r0
 800e296:	2301      	movs	r3, #1
 800e298:	e7f0      	b.n	800e27c <_svfiprintf_r+0x194>
 800e29a:	ab03      	add	r3, sp, #12
 800e29c:	9300      	str	r3, [sp, #0]
 800e29e:	462a      	mov	r2, r5
 800e2a0:	4b0f      	ldr	r3, [pc, #60]	; (800e2e0 <_svfiprintf_r+0x1f8>)
 800e2a2:	a904      	add	r1, sp, #16
 800e2a4:	4638      	mov	r0, r7
 800e2a6:	f3af 8000 	nop.w
 800e2aa:	1c42      	adds	r2, r0, #1
 800e2ac:	4606      	mov	r6, r0
 800e2ae:	d1d6      	bne.n	800e25e <_svfiprintf_r+0x176>
 800e2b0:	89ab      	ldrh	r3, [r5, #12]
 800e2b2:	065b      	lsls	r3, r3, #25
 800e2b4:	f53f af2c 	bmi.w	800e110 <_svfiprintf_r+0x28>
 800e2b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e2ba:	b01d      	add	sp, #116	; 0x74
 800e2bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2c0:	ab03      	add	r3, sp, #12
 800e2c2:	9300      	str	r3, [sp, #0]
 800e2c4:	462a      	mov	r2, r5
 800e2c6:	4b06      	ldr	r3, [pc, #24]	; (800e2e0 <_svfiprintf_r+0x1f8>)
 800e2c8:	a904      	add	r1, sp, #16
 800e2ca:	4638      	mov	r0, r7
 800e2cc:	f000 f9d4 	bl	800e678 <_printf_i>
 800e2d0:	e7eb      	b.n	800e2aa <_svfiprintf_r+0x1c2>
 800e2d2:	bf00      	nop
 800e2d4:	08022df0 	.word	0x08022df0
 800e2d8:	08022dfa 	.word	0x08022dfa
 800e2dc:	00000000 	.word	0x00000000
 800e2e0:	0800e031 	.word	0x0800e031
 800e2e4:	08022df6 	.word	0x08022df6

0800e2e8 <__sfputc_r>:
 800e2e8:	6893      	ldr	r3, [r2, #8]
 800e2ea:	3b01      	subs	r3, #1
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	b410      	push	{r4}
 800e2f0:	6093      	str	r3, [r2, #8]
 800e2f2:	da08      	bge.n	800e306 <__sfputc_r+0x1e>
 800e2f4:	6994      	ldr	r4, [r2, #24]
 800e2f6:	42a3      	cmp	r3, r4
 800e2f8:	db01      	blt.n	800e2fe <__sfputc_r+0x16>
 800e2fa:	290a      	cmp	r1, #10
 800e2fc:	d103      	bne.n	800e306 <__sfputc_r+0x1e>
 800e2fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e302:	f000 bb33 	b.w	800e96c <__swbuf_r>
 800e306:	6813      	ldr	r3, [r2, #0]
 800e308:	1c58      	adds	r0, r3, #1
 800e30a:	6010      	str	r0, [r2, #0]
 800e30c:	7019      	strb	r1, [r3, #0]
 800e30e:	4608      	mov	r0, r1
 800e310:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e314:	4770      	bx	lr

0800e316 <__sfputs_r>:
 800e316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e318:	4606      	mov	r6, r0
 800e31a:	460f      	mov	r7, r1
 800e31c:	4614      	mov	r4, r2
 800e31e:	18d5      	adds	r5, r2, r3
 800e320:	42ac      	cmp	r4, r5
 800e322:	d101      	bne.n	800e328 <__sfputs_r+0x12>
 800e324:	2000      	movs	r0, #0
 800e326:	e007      	b.n	800e338 <__sfputs_r+0x22>
 800e328:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e32c:	463a      	mov	r2, r7
 800e32e:	4630      	mov	r0, r6
 800e330:	f7ff ffda 	bl	800e2e8 <__sfputc_r>
 800e334:	1c43      	adds	r3, r0, #1
 800e336:	d1f3      	bne.n	800e320 <__sfputs_r+0xa>
 800e338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e33c <_vfiprintf_r>:
 800e33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e340:	460d      	mov	r5, r1
 800e342:	b09d      	sub	sp, #116	; 0x74
 800e344:	4614      	mov	r4, r2
 800e346:	4698      	mov	r8, r3
 800e348:	4606      	mov	r6, r0
 800e34a:	b118      	cbz	r0, 800e354 <_vfiprintf_r+0x18>
 800e34c:	6983      	ldr	r3, [r0, #24]
 800e34e:	b90b      	cbnz	r3, 800e354 <_vfiprintf_r+0x18>
 800e350:	f7ff fd0a 	bl	800dd68 <__sinit>
 800e354:	4b89      	ldr	r3, [pc, #548]	; (800e57c <_vfiprintf_r+0x240>)
 800e356:	429d      	cmp	r5, r3
 800e358:	d11b      	bne.n	800e392 <_vfiprintf_r+0x56>
 800e35a:	6875      	ldr	r5, [r6, #4]
 800e35c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e35e:	07d9      	lsls	r1, r3, #31
 800e360:	d405      	bmi.n	800e36e <_vfiprintf_r+0x32>
 800e362:	89ab      	ldrh	r3, [r5, #12]
 800e364:	059a      	lsls	r2, r3, #22
 800e366:	d402      	bmi.n	800e36e <_vfiprintf_r+0x32>
 800e368:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e36a:	f7ff fdad 	bl	800dec8 <__retarget_lock_acquire_recursive>
 800e36e:	89ab      	ldrh	r3, [r5, #12]
 800e370:	071b      	lsls	r3, r3, #28
 800e372:	d501      	bpl.n	800e378 <_vfiprintf_r+0x3c>
 800e374:	692b      	ldr	r3, [r5, #16]
 800e376:	b9eb      	cbnz	r3, 800e3b4 <_vfiprintf_r+0x78>
 800e378:	4629      	mov	r1, r5
 800e37a:	4630      	mov	r0, r6
 800e37c:	f000 fb5a 	bl	800ea34 <__swsetup_r>
 800e380:	b1c0      	cbz	r0, 800e3b4 <_vfiprintf_r+0x78>
 800e382:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e384:	07dc      	lsls	r4, r3, #31
 800e386:	d50e      	bpl.n	800e3a6 <_vfiprintf_r+0x6a>
 800e388:	f04f 30ff 	mov.w	r0, #4294967295
 800e38c:	b01d      	add	sp, #116	; 0x74
 800e38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e392:	4b7b      	ldr	r3, [pc, #492]	; (800e580 <_vfiprintf_r+0x244>)
 800e394:	429d      	cmp	r5, r3
 800e396:	d101      	bne.n	800e39c <_vfiprintf_r+0x60>
 800e398:	68b5      	ldr	r5, [r6, #8]
 800e39a:	e7df      	b.n	800e35c <_vfiprintf_r+0x20>
 800e39c:	4b79      	ldr	r3, [pc, #484]	; (800e584 <_vfiprintf_r+0x248>)
 800e39e:	429d      	cmp	r5, r3
 800e3a0:	bf08      	it	eq
 800e3a2:	68f5      	ldreq	r5, [r6, #12]
 800e3a4:	e7da      	b.n	800e35c <_vfiprintf_r+0x20>
 800e3a6:	89ab      	ldrh	r3, [r5, #12]
 800e3a8:	0598      	lsls	r0, r3, #22
 800e3aa:	d4ed      	bmi.n	800e388 <_vfiprintf_r+0x4c>
 800e3ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e3ae:	f7ff fd8c 	bl	800deca <__retarget_lock_release_recursive>
 800e3b2:	e7e9      	b.n	800e388 <_vfiprintf_r+0x4c>
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	9309      	str	r3, [sp, #36]	; 0x24
 800e3b8:	2320      	movs	r3, #32
 800e3ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e3be:	f8cd 800c 	str.w	r8, [sp, #12]
 800e3c2:	2330      	movs	r3, #48	; 0x30
 800e3c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e588 <_vfiprintf_r+0x24c>
 800e3c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e3cc:	f04f 0901 	mov.w	r9, #1
 800e3d0:	4623      	mov	r3, r4
 800e3d2:	469a      	mov	sl, r3
 800e3d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3d8:	b10a      	cbz	r2, 800e3de <_vfiprintf_r+0xa2>
 800e3da:	2a25      	cmp	r2, #37	; 0x25
 800e3dc:	d1f9      	bne.n	800e3d2 <_vfiprintf_r+0x96>
 800e3de:	ebba 0b04 	subs.w	fp, sl, r4
 800e3e2:	d00b      	beq.n	800e3fc <_vfiprintf_r+0xc0>
 800e3e4:	465b      	mov	r3, fp
 800e3e6:	4622      	mov	r2, r4
 800e3e8:	4629      	mov	r1, r5
 800e3ea:	4630      	mov	r0, r6
 800e3ec:	f7ff ff93 	bl	800e316 <__sfputs_r>
 800e3f0:	3001      	adds	r0, #1
 800e3f2:	f000 80aa 	beq.w	800e54a <_vfiprintf_r+0x20e>
 800e3f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e3f8:	445a      	add	r2, fp
 800e3fa:	9209      	str	r2, [sp, #36]	; 0x24
 800e3fc:	f89a 3000 	ldrb.w	r3, [sl]
 800e400:	2b00      	cmp	r3, #0
 800e402:	f000 80a2 	beq.w	800e54a <_vfiprintf_r+0x20e>
 800e406:	2300      	movs	r3, #0
 800e408:	f04f 32ff 	mov.w	r2, #4294967295
 800e40c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e410:	f10a 0a01 	add.w	sl, sl, #1
 800e414:	9304      	str	r3, [sp, #16]
 800e416:	9307      	str	r3, [sp, #28]
 800e418:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e41c:	931a      	str	r3, [sp, #104]	; 0x68
 800e41e:	4654      	mov	r4, sl
 800e420:	2205      	movs	r2, #5
 800e422:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e426:	4858      	ldr	r0, [pc, #352]	; (800e588 <_vfiprintf_r+0x24c>)
 800e428:	f7f1 ff72 	bl	8000310 <memchr>
 800e42c:	9a04      	ldr	r2, [sp, #16]
 800e42e:	b9d8      	cbnz	r0, 800e468 <_vfiprintf_r+0x12c>
 800e430:	06d1      	lsls	r1, r2, #27
 800e432:	bf44      	itt	mi
 800e434:	2320      	movmi	r3, #32
 800e436:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e43a:	0713      	lsls	r3, r2, #28
 800e43c:	bf44      	itt	mi
 800e43e:	232b      	movmi	r3, #43	; 0x2b
 800e440:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e444:	f89a 3000 	ldrb.w	r3, [sl]
 800e448:	2b2a      	cmp	r3, #42	; 0x2a
 800e44a:	d015      	beq.n	800e478 <_vfiprintf_r+0x13c>
 800e44c:	9a07      	ldr	r2, [sp, #28]
 800e44e:	4654      	mov	r4, sl
 800e450:	2000      	movs	r0, #0
 800e452:	f04f 0c0a 	mov.w	ip, #10
 800e456:	4621      	mov	r1, r4
 800e458:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e45c:	3b30      	subs	r3, #48	; 0x30
 800e45e:	2b09      	cmp	r3, #9
 800e460:	d94e      	bls.n	800e500 <_vfiprintf_r+0x1c4>
 800e462:	b1b0      	cbz	r0, 800e492 <_vfiprintf_r+0x156>
 800e464:	9207      	str	r2, [sp, #28]
 800e466:	e014      	b.n	800e492 <_vfiprintf_r+0x156>
 800e468:	eba0 0308 	sub.w	r3, r0, r8
 800e46c:	fa09 f303 	lsl.w	r3, r9, r3
 800e470:	4313      	orrs	r3, r2
 800e472:	9304      	str	r3, [sp, #16]
 800e474:	46a2      	mov	sl, r4
 800e476:	e7d2      	b.n	800e41e <_vfiprintf_r+0xe2>
 800e478:	9b03      	ldr	r3, [sp, #12]
 800e47a:	1d19      	adds	r1, r3, #4
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	9103      	str	r1, [sp, #12]
 800e480:	2b00      	cmp	r3, #0
 800e482:	bfbb      	ittet	lt
 800e484:	425b      	neglt	r3, r3
 800e486:	f042 0202 	orrlt.w	r2, r2, #2
 800e48a:	9307      	strge	r3, [sp, #28]
 800e48c:	9307      	strlt	r3, [sp, #28]
 800e48e:	bfb8      	it	lt
 800e490:	9204      	strlt	r2, [sp, #16]
 800e492:	7823      	ldrb	r3, [r4, #0]
 800e494:	2b2e      	cmp	r3, #46	; 0x2e
 800e496:	d10c      	bne.n	800e4b2 <_vfiprintf_r+0x176>
 800e498:	7863      	ldrb	r3, [r4, #1]
 800e49a:	2b2a      	cmp	r3, #42	; 0x2a
 800e49c:	d135      	bne.n	800e50a <_vfiprintf_r+0x1ce>
 800e49e:	9b03      	ldr	r3, [sp, #12]
 800e4a0:	1d1a      	adds	r2, r3, #4
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	9203      	str	r2, [sp, #12]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	bfb8      	it	lt
 800e4aa:	f04f 33ff 	movlt.w	r3, #4294967295
 800e4ae:	3402      	adds	r4, #2
 800e4b0:	9305      	str	r3, [sp, #20]
 800e4b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e598 <_vfiprintf_r+0x25c>
 800e4b6:	7821      	ldrb	r1, [r4, #0]
 800e4b8:	2203      	movs	r2, #3
 800e4ba:	4650      	mov	r0, sl
 800e4bc:	f7f1 ff28 	bl	8000310 <memchr>
 800e4c0:	b140      	cbz	r0, 800e4d4 <_vfiprintf_r+0x198>
 800e4c2:	2340      	movs	r3, #64	; 0x40
 800e4c4:	eba0 000a 	sub.w	r0, r0, sl
 800e4c8:	fa03 f000 	lsl.w	r0, r3, r0
 800e4cc:	9b04      	ldr	r3, [sp, #16]
 800e4ce:	4303      	orrs	r3, r0
 800e4d0:	3401      	adds	r4, #1
 800e4d2:	9304      	str	r3, [sp, #16]
 800e4d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4d8:	482c      	ldr	r0, [pc, #176]	; (800e58c <_vfiprintf_r+0x250>)
 800e4da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e4de:	2206      	movs	r2, #6
 800e4e0:	f7f1 ff16 	bl	8000310 <memchr>
 800e4e4:	2800      	cmp	r0, #0
 800e4e6:	d03f      	beq.n	800e568 <_vfiprintf_r+0x22c>
 800e4e8:	4b29      	ldr	r3, [pc, #164]	; (800e590 <_vfiprintf_r+0x254>)
 800e4ea:	bb1b      	cbnz	r3, 800e534 <_vfiprintf_r+0x1f8>
 800e4ec:	9b03      	ldr	r3, [sp, #12]
 800e4ee:	3307      	adds	r3, #7
 800e4f0:	f023 0307 	bic.w	r3, r3, #7
 800e4f4:	3308      	adds	r3, #8
 800e4f6:	9303      	str	r3, [sp, #12]
 800e4f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4fa:	443b      	add	r3, r7
 800e4fc:	9309      	str	r3, [sp, #36]	; 0x24
 800e4fe:	e767      	b.n	800e3d0 <_vfiprintf_r+0x94>
 800e500:	fb0c 3202 	mla	r2, ip, r2, r3
 800e504:	460c      	mov	r4, r1
 800e506:	2001      	movs	r0, #1
 800e508:	e7a5      	b.n	800e456 <_vfiprintf_r+0x11a>
 800e50a:	2300      	movs	r3, #0
 800e50c:	3401      	adds	r4, #1
 800e50e:	9305      	str	r3, [sp, #20]
 800e510:	4619      	mov	r1, r3
 800e512:	f04f 0c0a 	mov.w	ip, #10
 800e516:	4620      	mov	r0, r4
 800e518:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e51c:	3a30      	subs	r2, #48	; 0x30
 800e51e:	2a09      	cmp	r2, #9
 800e520:	d903      	bls.n	800e52a <_vfiprintf_r+0x1ee>
 800e522:	2b00      	cmp	r3, #0
 800e524:	d0c5      	beq.n	800e4b2 <_vfiprintf_r+0x176>
 800e526:	9105      	str	r1, [sp, #20]
 800e528:	e7c3      	b.n	800e4b2 <_vfiprintf_r+0x176>
 800e52a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e52e:	4604      	mov	r4, r0
 800e530:	2301      	movs	r3, #1
 800e532:	e7f0      	b.n	800e516 <_vfiprintf_r+0x1da>
 800e534:	ab03      	add	r3, sp, #12
 800e536:	9300      	str	r3, [sp, #0]
 800e538:	462a      	mov	r2, r5
 800e53a:	4b16      	ldr	r3, [pc, #88]	; (800e594 <_vfiprintf_r+0x258>)
 800e53c:	a904      	add	r1, sp, #16
 800e53e:	4630      	mov	r0, r6
 800e540:	f3af 8000 	nop.w
 800e544:	4607      	mov	r7, r0
 800e546:	1c78      	adds	r0, r7, #1
 800e548:	d1d6      	bne.n	800e4f8 <_vfiprintf_r+0x1bc>
 800e54a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e54c:	07d9      	lsls	r1, r3, #31
 800e54e:	d405      	bmi.n	800e55c <_vfiprintf_r+0x220>
 800e550:	89ab      	ldrh	r3, [r5, #12]
 800e552:	059a      	lsls	r2, r3, #22
 800e554:	d402      	bmi.n	800e55c <_vfiprintf_r+0x220>
 800e556:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e558:	f7ff fcb7 	bl	800deca <__retarget_lock_release_recursive>
 800e55c:	89ab      	ldrh	r3, [r5, #12]
 800e55e:	065b      	lsls	r3, r3, #25
 800e560:	f53f af12 	bmi.w	800e388 <_vfiprintf_r+0x4c>
 800e564:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e566:	e711      	b.n	800e38c <_vfiprintf_r+0x50>
 800e568:	ab03      	add	r3, sp, #12
 800e56a:	9300      	str	r3, [sp, #0]
 800e56c:	462a      	mov	r2, r5
 800e56e:	4b09      	ldr	r3, [pc, #36]	; (800e594 <_vfiprintf_r+0x258>)
 800e570:	a904      	add	r1, sp, #16
 800e572:	4630      	mov	r0, r6
 800e574:	f000 f880 	bl	800e678 <_printf_i>
 800e578:	e7e4      	b.n	800e544 <_vfiprintf_r+0x208>
 800e57a:	bf00      	nop
 800e57c:	08022db0 	.word	0x08022db0
 800e580:	08022dd0 	.word	0x08022dd0
 800e584:	08022d90 	.word	0x08022d90
 800e588:	08022df0 	.word	0x08022df0
 800e58c:	08022dfa 	.word	0x08022dfa
 800e590:	00000000 	.word	0x00000000
 800e594:	0800e317 	.word	0x0800e317
 800e598:	08022df6 	.word	0x08022df6

0800e59c <_printf_common>:
 800e59c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5a0:	4616      	mov	r6, r2
 800e5a2:	4699      	mov	r9, r3
 800e5a4:	688a      	ldr	r2, [r1, #8]
 800e5a6:	690b      	ldr	r3, [r1, #16]
 800e5a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e5ac:	4293      	cmp	r3, r2
 800e5ae:	bfb8      	it	lt
 800e5b0:	4613      	movlt	r3, r2
 800e5b2:	6033      	str	r3, [r6, #0]
 800e5b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e5b8:	4607      	mov	r7, r0
 800e5ba:	460c      	mov	r4, r1
 800e5bc:	b10a      	cbz	r2, 800e5c2 <_printf_common+0x26>
 800e5be:	3301      	adds	r3, #1
 800e5c0:	6033      	str	r3, [r6, #0]
 800e5c2:	6823      	ldr	r3, [r4, #0]
 800e5c4:	0699      	lsls	r1, r3, #26
 800e5c6:	bf42      	ittt	mi
 800e5c8:	6833      	ldrmi	r3, [r6, #0]
 800e5ca:	3302      	addmi	r3, #2
 800e5cc:	6033      	strmi	r3, [r6, #0]
 800e5ce:	6825      	ldr	r5, [r4, #0]
 800e5d0:	f015 0506 	ands.w	r5, r5, #6
 800e5d4:	d106      	bne.n	800e5e4 <_printf_common+0x48>
 800e5d6:	f104 0a19 	add.w	sl, r4, #25
 800e5da:	68e3      	ldr	r3, [r4, #12]
 800e5dc:	6832      	ldr	r2, [r6, #0]
 800e5de:	1a9b      	subs	r3, r3, r2
 800e5e0:	42ab      	cmp	r3, r5
 800e5e2:	dc26      	bgt.n	800e632 <_printf_common+0x96>
 800e5e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e5e8:	1e13      	subs	r3, r2, #0
 800e5ea:	6822      	ldr	r2, [r4, #0]
 800e5ec:	bf18      	it	ne
 800e5ee:	2301      	movne	r3, #1
 800e5f0:	0692      	lsls	r2, r2, #26
 800e5f2:	d42b      	bmi.n	800e64c <_printf_common+0xb0>
 800e5f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e5f8:	4649      	mov	r1, r9
 800e5fa:	4638      	mov	r0, r7
 800e5fc:	47c0      	blx	r8
 800e5fe:	3001      	adds	r0, #1
 800e600:	d01e      	beq.n	800e640 <_printf_common+0xa4>
 800e602:	6823      	ldr	r3, [r4, #0]
 800e604:	68e5      	ldr	r5, [r4, #12]
 800e606:	6832      	ldr	r2, [r6, #0]
 800e608:	f003 0306 	and.w	r3, r3, #6
 800e60c:	2b04      	cmp	r3, #4
 800e60e:	bf08      	it	eq
 800e610:	1aad      	subeq	r5, r5, r2
 800e612:	68a3      	ldr	r3, [r4, #8]
 800e614:	6922      	ldr	r2, [r4, #16]
 800e616:	bf0c      	ite	eq
 800e618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e61c:	2500      	movne	r5, #0
 800e61e:	4293      	cmp	r3, r2
 800e620:	bfc4      	itt	gt
 800e622:	1a9b      	subgt	r3, r3, r2
 800e624:	18ed      	addgt	r5, r5, r3
 800e626:	2600      	movs	r6, #0
 800e628:	341a      	adds	r4, #26
 800e62a:	42b5      	cmp	r5, r6
 800e62c:	d11a      	bne.n	800e664 <_printf_common+0xc8>
 800e62e:	2000      	movs	r0, #0
 800e630:	e008      	b.n	800e644 <_printf_common+0xa8>
 800e632:	2301      	movs	r3, #1
 800e634:	4652      	mov	r2, sl
 800e636:	4649      	mov	r1, r9
 800e638:	4638      	mov	r0, r7
 800e63a:	47c0      	blx	r8
 800e63c:	3001      	adds	r0, #1
 800e63e:	d103      	bne.n	800e648 <_printf_common+0xac>
 800e640:	f04f 30ff 	mov.w	r0, #4294967295
 800e644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e648:	3501      	adds	r5, #1
 800e64a:	e7c6      	b.n	800e5da <_printf_common+0x3e>
 800e64c:	18e1      	adds	r1, r4, r3
 800e64e:	1c5a      	adds	r2, r3, #1
 800e650:	2030      	movs	r0, #48	; 0x30
 800e652:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e656:	4422      	add	r2, r4
 800e658:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e65c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e660:	3302      	adds	r3, #2
 800e662:	e7c7      	b.n	800e5f4 <_printf_common+0x58>
 800e664:	2301      	movs	r3, #1
 800e666:	4622      	mov	r2, r4
 800e668:	4649      	mov	r1, r9
 800e66a:	4638      	mov	r0, r7
 800e66c:	47c0      	blx	r8
 800e66e:	3001      	adds	r0, #1
 800e670:	d0e6      	beq.n	800e640 <_printf_common+0xa4>
 800e672:	3601      	adds	r6, #1
 800e674:	e7d9      	b.n	800e62a <_printf_common+0x8e>
	...

0800e678 <_printf_i>:
 800e678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e67c:	460c      	mov	r4, r1
 800e67e:	4691      	mov	r9, r2
 800e680:	7e27      	ldrb	r7, [r4, #24]
 800e682:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e684:	2f78      	cmp	r7, #120	; 0x78
 800e686:	4680      	mov	r8, r0
 800e688:	469a      	mov	sl, r3
 800e68a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e68e:	d807      	bhi.n	800e6a0 <_printf_i+0x28>
 800e690:	2f62      	cmp	r7, #98	; 0x62
 800e692:	d80a      	bhi.n	800e6aa <_printf_i+0x32>
 800e694:	2f00      	cmp	r7, #0
 800e696:	f000 80d8 	beq.w	800e84a <_printf_i+0x1d2>
 800e69a:	2f58      	cmp	r7, #88	; 0x58
 800e69c:	f000 80a3 	beq.w	800e7e6 <_printf_i+0x16e>
 800e6a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e6a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e6a8:	e03a      	b.n	800e720 <_printf_i+0xa8>
 800e6aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e6ae:	2b15      	cmp	r3, #21
 800e6b0:	d8f6      	bhi.n	800e6a0 <_printf_i+0x28>
 800e6b2:	a001      	add	r0, pc, #4	; (adr r0, 800e6b8 <_printf_i+0x40>)
 800e6b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e6b8:	0800e711 	.word	0x0800e711
 800e6bc:	0800e725 	.word	0x0800e725
 800e6c0:	0800e6a1 	.word	0x0800e6a1
 800e6c4:	0800e6a1 	.word	0x0800e6a1
 800e6c8:	0800e6a1 	.word	0x0800e6a1
 800e6cc:	0800e6a1 	.word	0x0800e6a1
 800e6d0:	0800e725 	.word	0x0800e725
 800e6d4:	0800e6a1 	.word	0x0800e6a1
 800e6d8:	0800e6a1 	.word	0x0800e6a1
 800e6dc:	0800e6a1 	.word	0x0800e6a1
 800e6e0:	0800e6a1 	.word	0x0800e6a1
 800e6e4:	0800e831 	.word	0x0800e831
 800e6e8:	0800e755 	.word	0x0800e755
 800e6ec:	0800e813 	.word	0x0800e813
 800e6f0:	0800e6a1 	.word	0x0800e6a1
 800e6f4:	0800e6a1 	.word	0x0800e6a1
 800e6f8:	0800e853 	.word	0x0800e853
 800e6fc:	0800e6a1 	.word	0x0800e6a1
 800e700:	0800e755 	.word	0x0800e755
 800e704:	0800e6a1 	.word	0x0800e6a1
 800e708:	0800e6a1 	.word	0x0800e6a1
 800e70c:	0800e81b 	.word	0x0800e81b
 800e710:	680b      	ldr	r3, [r1, #0]
 800e712:	1d1a      	adds	r2, r3, #4
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	600a      	str	r2, [r1, #0]
 800e718:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e71c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e720:	2301      	movs	r3, #1
 800e722:	e0a3      	b.n	800e86c <_printf_i+0x1f4>
 800e724:	6825      	ldr	r5, [r4, #0]
 800e726:	6808      	ldr	r0, [r1, #0]
 800e728:	062e      	lsls	r6, r5, #24
 800e72a:	f100 0304 	add.w	r3, r0, #4
 800e72e:	d50a      	bpl.n	800e746 <_printf_i+0xce>
 800e730:	6805      	ldr	r5, [r0, #0]
 800e732:	600b      	str	r3, [r1, #0]
 800e734:	2d00      	cmp	r5, #0
 800e736:	da03      	bge.n	800e740 <_printf_i+0xc8>
 800e738:	232d      	movs	r3, #45	; 0x2d
 800e73a:	426d      	negs	r5, r5
 800e73c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e740:	485e      	ldr	r0, [pc, #376]	; (800e8bc <_printf_i+0x244>)
 800e742:	230a      	movs	r3, #10
 800e744:	e019      	b.n	800e77a <_printf_i+0x102>
 800e746:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e74a:	6805      	ldr	r5, [r0, #0]
 800e74c:	600b      	str	r3, [r1, #0]
 800e74e:	bf18      	it	ne
 800e750:	b22d      	sxthne	r5, r5
 800e752:	e7ef      	b.n	800e734 <_printf_i+0xbc>
 800e754:	680b      	ldr	r3, [r1, #0]
 800e756:	6825      	ldr	r5, [r4, #0]
 800e758:	1d18      	adds	r0, r3, #4
 800e75a:	6008      	str	r0, [r1, #0]
 800e75c:	0628      	lsls	r0, r5, #24
 800e75e:	d501      	bpl.n	800e764 <_printf_i+0xec>
 800e760:	681d      	ldr	r5, [r3, #0]
 800e762:	e002      	b.n	800e76a <_printf_i+0xf2>
 800e764:	0669      	lsls	r1, r5, #25
 800e766:	d5fb      	bpl.n	800e760 <_printf_i+0xe8>
 800e768:	881d      	ldrh	r5, [r3, #0]
 800e76a:	4854      	ldr	r0, [pc, #336]	; (800e8bc <_printf_i+0x244>)
 800e76c:	2f6f      	cmp	r7, #111	; 0x6f
 800e76e:	bf0c      	ite	eq
 800e770:	2308      	moveq	r3, #8
 800e772:	230a      	movne	r3, #10
 800e774:	2100      	movs	r1, #0
 800e776:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e77a:	6866      	ldr	r6, [r4, #4]
 800e77c:	60a6      	str	r6, [r4, #8]
 800e77e:	2e00      	cmp	r6, #0
 800e780:	bfa2      	ittt	ge
 800e782:	6821      	ldrge	r1, [r4, #0]
 800e784:	f021 0104 	bicge.w	r1, r1, #4
 800e788:	6021      	strge	r1, [r4, #0]
 800e78a:	b90d      	cbnz	r5, 800e790 <_printf_i+0x118>
 800e78c:	2e00      	cmp	r6, #0
 800e78e:	d04d      	beq.n	800e82c <_printf_i+0x1b4>
 800e790:	4616      	mov	r6, r2
 800e792:	fbb5 f1f3 	udiv	r1, r5, r3
 800e796:	fb03 5711 	mls	r7, r3, r1, r5
 800e79a:	5dc7      	ldrb	r7, [r0, r7]
 800e79c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e7a0:	462f      	mov	r7, r5
 800e7a2:	42bb      	cmp	r3, r7
 800e7a4:	460d      	mov	r5, r1
 800e7a6:	d9f4      	bls.n	800e792 <_printf_i+0x11a>
 800e7a8:	2b08      	cmp	r3, #8
 800e7aa:	d10b      	bne.n	800e7c4 <_printf_i+0x14c>
 800e7ac:	6823      	ldr	r3, [r4, #0]
 800e7ae:	07df      	lsls	r7, r3, #31
 800e7b0:	d508      	bpl.n	800e7c4 <_printf_i+0x14c>
 800e7b2:	6923      	ldr	r3, [r4, #16]
 800e7b4:	6861      	ldr	r1, [r4, #4]
 800e7b6:	4299      	cmp	r1, r3
 800e7b8:	bfde      	ittt	le
 800e7ba:	2330      	movle	r3, #48	; 0x30
 800e7bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e7c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e7c4:	1b92      	subs	r2, r2, r6
 800e7c6:	6122      	str	r2, [r4, #16]
 800e7c8:	f8cd a000 	str.w	sl, [sp]
 800e7cc:	464b      	mov	r3, r9
 800e7ce:	aa03      	add	r2, sp, #12
 800e7d0:	4621      	mov	r1, r4
 800e7d2:	4640      	mov	r0, r8
 800e7d4:	f7ff fee2 	bl	800e59c <_printf_common>
 800e7d8:	3001      	adds	r0, #1
 800e7da:	d14c      	bne.n	800e876 <_printf_i+0x1fe>
 800e7dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e7e0:	b004      	add	sp, #16
 800e7e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7e6:	4835      	ldr	r0, [pc, #212]	; (800e8bc <_printf_i+0x244>)
 800e7e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e7ec:	6823      	ldr	r3, [r4, #0]
 800e7ee:	680e      	ldr	r6, [r1, #0]
 800e7f0:	061f      	lsls	r7, r3, #24
 800e7f2:	f856 5b04 	ldr.w	r5, [r6], #4
 800e7f6:	600e      	str	r6, [r1, #0]
 800e7f8:	d514      	bpl.n	800e824 <_printf_i+0x1ac>
 800e7fa:	07d9      	lsls	r1, r3, #31
 800e7fc:	bf44      	itt	mi
 800e7fe:	f043 0320 	orrmi.w	r3, r3, #32
 800e802:	6023      	strmi	r3, [r4, #0]
 800e804:	b91d      	cbnz	r5, 800e80e <_printf_i+0x196>
 800e806:	6823      	ldr	r3, [r4, #0]
 800e808:	f023 0320 	bic.w	r3, r3, #32
 800e80c:	6023      	str	r3, [r4, #0]
 800e80e:	2310      	movs	r3, #16
 800e810:	e7b0      	b.n	800e774 <_printf_i+0xfc>
 800e812:	6823      	ldr	r3, [r4, #0]
 800e814:	f043 0320 	orr.w	r3, r3, #32
 800e818:	6023      	str	r3, [r4, #0]
 800e81a:	2378      	movs	r3, #120	; 0x78
 800e81c:	4828      	ldr	r0, [pc, #160]	; (800e8c0 <_printf_i+0x248>)
 800e81e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e822:	e7e3      	b.n	800e7ec <_printf_i+0x174>
 800e824:	065e      	lsls	r6, r3, #25
 800e826:	bf48      	it	mi
 800e828:	b2ad      	uxthmi	r5, r5
 800e82a:	e7e6      	b.n	800e7fa <_printf_i+0x182>
 800e82c:	4616      	mov	r6, r2
 800e82e:	e7bb      	b.n	800e7a8 <_printf_i+0x130>
 800e830:	680b      	ldr	r3, [r1, #0]
 800e832:	6826      	ldr	r6, [r4, #0]
 800e834:	6960      	ldr	r0, [r4, #20]
 800e836:	1d1d      	adds	r5, r3, #4
 800e838:	600d      	str	r5, [r1, #0]
 800e83a:	0635      	lsls	r5, r6, #24
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	d501      	bpl.n	800e844 <_printf_i+0x1cc>
 800e840:	6018      	str	r0, [r3, #0]
 800e842:	e002      	b.n	800e84a <_printf_i+0x1d2>
 800e844:	0671      	lsls	r1, r6, #25
 800e846:	d5fb      	bpl.n	800e840 <_printf_i+0x1c8>
 800e848:	8018      	strh	r0, [r3, #0]
 800e84a:	2300      	movs	r3, #0
 800e84c:	6123      	str	r3, [r4, #16]
 800e84e:	4616      	mov	r6, r2
 800e850:	e7ba      	b.n	800e7c8 <_printf_i+0x150>
 800e852:	680b      	ldr	r3, [r1, #0]
 800e854:	1d1a      	adds	r2, r3, #4
 800e856:	600a      	str	r2, [r1, #0]
 800e858:	681e      	ldr	r6, [r3, #0]
 800e85a:	6862      	ldr	r2, [r4, #4]
 800e85c:	2100      	movs	r1, #0
 800e85e:	4630      	mov	r0, r6
 800e860:	f7f1 fd56 	bl	8000310 <memchr>
 800e864:	b108      	cbz	r0, 800e86a <_printf_i+0x1f2>
 800e866:	1b80      	subs	r0, r0, r6
 800e868:	6060      	str	r0, [r4, #4]
 800e86a:	6863      	ldr	r3, [r4, #4]
 800e86c:	6123      	str	r3, [r4, #16]
 800e86e:	2300      	movs	r3, #0
 800e870:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e874:	e7a8      	b.n	800e7c8 <_printf_i+0x150>
 800e876:	6923      	ldr	r3, [r4, #16]
 800e878:	4632      	mov	r2, r6
 800e87a:	4649      	mov	r1, r9
 800e87c:	4640      	mov	r0, r8
 800e87e:	47d0      	blx	sl
 800e880:	3001      	adds	r0, #1
 800e882:	d0ab      	beq.n	800e7dc <_printf_i+0x164>
 800e884:	6823      	ldr	r3, [r4, #0]
 800e886:	079b      	lsls	r3, r3, #30
 800e888:	d413      	bmi.n	800e8b2 <_printf_i+0x23a>
 800e88a:	68e0      	ldr	r0, [r4, #12]
 800e88c:	9b03      	ldr	r3, [sp, #12]
 800e88e:	4298      	cmp	r0, r3
 800e890:	bfb8      	it	lt
 800e892:	4618      	movlt	r0, r3
 800e894:	e7a4      	b.n	800e7e0 <_printf_i+0x168>
 800e896:	2301      	movs	r3, #1
 800e898:	4632      	mov	r2, r6
 800e89a:	4649      	mov	r1, r9
 800e89c:	4640      	mov	r0, r8
 800e89e:	47d0      	blx	sl
 800e8a0:	3001      	adds	r0, #1
 800e8a2:	d09b      	beq.n	800e7dc <_printf_i+0x164>
 800e8a4:	3501      	adds	r5, #1
 800e8a6:	68e3      	ldr	r3, [r4, #12]
 800e8a8:	9903      	ldr	r1, [sp, #12]
 800e8aa:	1a5b      	subs	r3, r3, r1
 800e8ac:	42ab      	cmp	r3, r5
 800e8ae:	dcf2      	bgt.n	800e896 <_printf_i+0x21e>
 800e8b0:	e7eb      	b.n	800e88a <_printf_i+0x212>
 800e8b2:	2500      	movs	r5, #0
 800e8b4:	f104 0619 	add.w	r6, r4, #25
 800e8b8:	e7f5      	b.n	800e8a6 <_printf_i+0x22e>
 800e8ba:	bf00      	nop
 800e8bc:	08022e01 	.word	0x08022e01
 800e8c0:	08022e12 	.word	0x08022e12

0800e8c4 <_sbrk_r>:
 800e8c4:	b538      	push	{r3, r4, r5, lr}
 800e8c6:	4d06      	ldr	r5, [pc, #24]	; (800e8e0 <_sbrk_r+0x1c>)
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	4604      	mov	r4, r0
 800e8cc:	4608      	mov	r0, r1
 800e8ce:	602b      	str	r3, [r5, #0]
 800e8d0:	f000 fb58 	bl	800ef84 <_sbrk>
 800e8d4:	1c43      	adds	r3, r0, #1
 800e8d6:	d102      	bne.n	800e8de <_sbrk_r+0x1a>
 800e8d8:	682b      	ldr	r3, [r5, #0]
 800e8da:	b103      	cbz	r3, 800e8de <_sbrk_r+0x1a>
 800e8dc:	6023      	str	r3, [r4, #0]
 800e8de:	bd38      	pop	{r3, r4, r5, pc}
 800e8e0:	2400a7ac 	.word	0x2400a7ac

0800e8e4 <__sread>:
 800e8e4:	b510      	push	{r4, lr}
 800e8e6:	460c      	mov	r4, r1
 800e8e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8ec:	f000 fa92 	bl	800ee14 <_read_r>
 800e8f0:	2800      	cmp	r0, #0
 800e8f2:	bfab      	itete	ge
 800e8f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e8f6:	89a3      	ldrhlt	r3, [r4, #12]
 800e8f8:	181b      	addge	r3, r3, r0
 800e8fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e8fe:	bfac      	ite	ge
 800e900:	6563      	strge	r3, [r4, #84]	; 0x54
 800e902:	81a3      	strhlt	r3, [r4, #12]
 800e904:	bd10      	pop	{r4, pc}

0800e906 <__swrite>:
 800e906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e90a:	461f      	mov	r7, r3
 800e90c:	898b      	ldrh	r3, [r1, #12]
 800e90e:	05db      	lsls	r3, r3, #23
 800e910:	4605      	mov	r5, r0
 800e912:	460c      	mov	r4, r1
 800e914:	4616      	mov	r6, r2
 800e916:	d505      	bpl.n	800e924 <__swrite+0x1e>
 800e918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e91c:	2302      	movs	r3, #2
 800e91e:	2200      	movs	r2, #0
 800e920:	f000 f9d0 	bl	800ecc4 <_lseek_r>
 800e924:	89a3      	ldrh	r3, [r4, #12]
 800e926:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e92a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e92e:	81a3      	strh	r3, [r4, #12]
 800e930:	4632      	mov	r2, r6
 800e932:	463b      	mov	r3, r7
 800e934:	4628      	mov	r0, r5
 800e936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e93a:	f000 b869 	b.w	800ea10 <_write_r>

0800e93e <__sseek>:
 800e93e:	b510      	push	{r4, lr}
 800e940:	460c      	mov	r4, r1
 800e942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e946:	f000 f9bd 	bl	800ecc4 <_lseek_r>
 800e94a:	1c43      	adds	r3, r0, #1
 800e94c:	89a3      	ldrh	r3, [r4, #12]
 800e94e:	bf15      	itete	ne
 800e950:	6560      	strne	r0, [r4, #84]	; 0x54
 800e952:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e956:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e95a:	81a3      	strheq	r3, [r4, #12]
 800e95c:	bf18      	it	ne
 800e95e:	81a3      	strhne	r3, [r4, #12]
 800e960:	bd10      	pop	{r4, pc}

0800e962 <__sclose>:
 800e962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e966:	f000 b8db 	b.w	800eb20 <_close_r>
	...

0800e96c <__swbuf_r>:
 800e96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e96e:	460e      	mov	r6, r1
 800e970:	4614      	mov	r4, r2
 800e972:	4605      	mov	r5, r0
 800e974:	b118      	cbz	r0, 800e97e <__swbuf_r+0x12>
 800e976:	6983      	ldr	r3, [r0, #24]
 800e978:	b90b      	cbnz	r3, 800e97e <__swbuf_r+0x12>
 800e97a:	f7ff f9f5 	bl	800dd68 <__sinit>
 800e97e:	4b21      	ldr	r3, [pc, #132]	; (800ea04 <__swbuf_r+0x98>)
 800e980:	429c      	cmp	r4, r3
 800e982:	d12b      	bne.n	800e9dc <__swbuf_r+0x70>
 800e984:	686c      	ldr	r4, [r5, #4]
 800e986:	69a3      	ldr	r3, [r4, #24]
 800e988:	60a3      	str	r3, [r4, #8]
 800e98a:	89a3      	ldrh	r3, [r4, #12]
 800e98c:	071a      	lsls	r2, r3, #28
 800e98e:	d52f      	bpl.n	800e9f0 <__swbuf_r+0x84>
 800e990:	6923      	ldr	r3, [r4, #16]
 800e992:	b36b      	cbz	r3, 800e9f0 <__swbuf_r+0x84>
 800e994:	6923      	ldr	r3, [r4, #16]
 800e996:	6820      	ldr	r0, [r4, #0]
 800e998:	1ac0      	subs	r0, r0, r3
 800e99a:	6963      	ldr	r3, [r4, #20]
 800e99c:	b2f6      	uxtb	r6, r6
 800e99e:	4283      	cmp	r3, r0
 800e9a0:	4637      	mov	r7, r6
 800e9a2:	dc04      	bgt.n	800e9ae <__swbuf_r+0x42>
 800e9a4:	4621      	mov	r1, r4
 800e9a6:	4628      	mov	r0, r5
 800e9a8:	f000 f950 	bl	800ec4c <_fflush_r>
 800e9ac:	bb30      	cbnz	r0, 800e9fc <__swbuf_r+0x90>
 800e9ae:	68a3      	ldr	r3, [r4, #8]
 800e9b0:	3b01      	subs	r3, #1
 800e9b2:	60a3      	str	r3, [r4, #8]
 800e9b4:	6823      	ldr	r3, [r4, #0]
 800e9b6:	1c5a      	adds	r2, r3, #1
 800e9b8:	6022      	str	r2, [r4, #0]
 800e9ba:	701e      	strb	r6, [r3, #0]
 800e9bc:	6963      	ldr	r3, [r4, #20]
 800e9be:	3001      	adds	r0, #1
 800e9c0:	4283      	cmp	r3, r0
 800e9c2:	d004      	beq.n	800e9ce <__swbuf_r+0x62>
 800e9c4:	89a3      	ldrh	r3, [r4, #12]
 800e9c6:	07db      	lsls	r3, r3, #31
 800e9c8:	d506      	bpl.n	800e9d8 <__swbuf_r+0x6c>
 800e9ca:	2e0a      	cmp	r6, #10
 800e9cc:	d104      	bne.n	800e9d8 <__swbuf_r+0x6c>
 800e9ce:	4621      	mov	r1, r4
 800e9d0:	4628      	mov	r0, r5
 800e9d2:	f000 f93b 	bl	800ec4c <_fflush_r>
 800e9d6:	b988      	cbnz	r0, 800e9fc <__swbuf_r+0x90>
 800e9d8:	4638      	mov	r0, r7
 800e9da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9dc:	4b0a      	ldr	r3, [pc, #40]	; (800ea08 <__swbuf_r+0x9c>)
 800e9de:	429c      	cmp	r4, r3
 800e9e0:	d101      	bne.n	800e9e6 <__swbuf_r+0x7a>
 800e9e2:	68ac      	ldr	r4, [r5, #8]
 800e9e4:	e7cf      	b.n	800e986 <__swbuf_r+0x1a>
 800e9e6:	4b09      	ldr	r3, [pc, #36]	; (800ea0c <__swbuf_r+0xa0>)
 800e9e8:	429c      	cmp	r4, r3
 800e9ea:	bf08      	it	eq
 800e9ec:	68ec      	ldreq	r4, [r5, #12]
 800e9ee:	e7ca      	b.n	800e986 <__swbuf_r+0x1a>
 800e9f0:	4621      	mov	r1, r4
 800e9f2:	4628      	mov	r0, r5
 800e9f4:	f000 f81e 	bl	800ea34 <__swsetup_r>
 800e9f8:	2800      	cmp	r0, #0
 800e9fa:	d0cb      	beq.n	800e994 <__swbuf_r+0x28>
 800e9fc:	f04f 37ff 	mov.w	r7, #4294967295
 800ea00:	e7ea      	b.n	800e9d8 <__swbuf_r+0x6c>
 800ea02:	bf00      	nop
 800ea04:	08022db0 	.word	0x08022db0
 800ea08:	08022dd0 	.word	0x08022dd0
 800ea0c:	08022d90 	.word	0x08022d90

0800ea10 <_write_r>:
 800ea10:	b538      	push	{r3, r4, r5, lr}
 800ea12:	4d07      	ldr	r5, [pc, #28]	; (800ea30 <_write_r+0x20>)
 800ea14:	4604      	mov	r4, r0
 800ea16:	4608      	mov	r0, r1
 800ea18:	4611      	mov	r1, r2
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	602a      	str	r2, [r5, #0]
 800ea1e:	461a      	mov	r2, r3
 800ea20:	f000 fabe 	bl	800efa0 <_write>
 800ea24:	1c43      	adds	r3, r0, #1
 800ea26:	d102      	bne.n	800ea2e <_write_r+0x1e>
 800ea28:	682b      	ldr	r3, [r5, #0]
 800ea2a:	b103      	cbz	r3, 800ea2e <_write_r+0x1e>
 800ea2c:	6023      	str	r3, [r4, #0]
 800ea2e:	bd38      	pop	{r3, r4, r5, pc}
 800ea30:	2400a7ac 	.word	0x2400a7ac

0800ea34 <__swsetup_r>:
 800ea34:	4b32      	ldr	r3, [pc, #200]	; (800eb00 <__swsetup_r+0xcc>)
 800ea36:	b570      	push	{r4, r5, r6, lr}
 800ea38:	681d      	ldr	r5, [r3, #0]
 800ea3a:	4606      	mov	r6, r0
 800ea3c:	460c      	mov	r4, r1
 800ea3e:	b125      	cbz	r5, 800ea4a <__swsetup_r+0x16>
 800ea40:	69ab      	ldr	r3, [r5, #24]
 800ea42:	b913      	cbnz	r3, 800ea4a <__swsetup_r+0x16>
 800ea44:	4628      	mov	r0, r5
 800ea46:	f7ff f98f 	bl	800dd68 <__sinit>
 800ea4a:	4b2e      	ldr	r3, [pc, #184]	; (800eb04 <__swsetup_r+0xd0>)
 800ea4c:	429c      	cmp	r4, r3
 800ea4e:	d10f      	bne.n	800ea70 <__swsetup_r+0x3c>
 800ea50:	686c      	ldr	r4, [r5, #4]
 800ea52:	89a3      	ldrh	r3, [r4, #12]
 800ea54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ea58:	0719      	lsls	r1, r3, #28
 800ea5a:	d42c      	bmi.n	800eab6 <__swsetup_r+0x82>
 800ea5c:	06dd      	lsls	r5, r3, #27
 800ea5e:	d411      	bmi.n	800ea84 <__swsetup_r+0x50>
 800ea60:	2309      	movs	r3, #9
 800ea62:	6033      	str	r3, [r6, #0]
 800ea64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ea68:	81a3      	strh	r3, [r4, #12]
 800ea6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ea6e:	e03e      	b.n	800eaee <__swsetup_r+0xba>
 800ea70:	4b25      	ldr	r3, [pc, #148]	; (800eb08 <__swsetup_r+0xd4>)
 800ea72:	429c      	cmp	r4, r3
 800ea74:	d101      	bne.n	800ea7a <__swsetup_r+0x46>
 800ea76:	68ac      	ldr	r4, [r5, #8]
 800ea78:	e7eb      	b.n	800ea52 <__swsetup_r+0x1e>
 800ea7a:	4b24      	ldr	r3, [pc, #144]	; (800eb0c <__swsetup_r+0xd8>)
 800ea7c:	429c      	cmp	r4, r3
 800ea7e:	bf08      	it	eq
 800ea80:	68ec      	ldreq	r4, [r5, #12]
 800ea82:	e7e6      	b.n	800ea52 <__swsetup_r+0x1e>
 800ea84:	0758      	lsls	r0, r3, #29
 800ea86:	d512      	bpl.n	800eaae <__swsetup_r+0x7a>
 800ea88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea8a:	b141      	cbz	r1, 800ea9e <__swsetup_r+0x6a>
 800ea8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea90:	4299      	cmp	r1, r3
 800ea92:	d002      	beq.n	800ea9a <__swsetup_r+0x66>
 800ea94:	4630      	mov	r0, r6
 800ea96:	f7ff fa21 	bl	800dedc <_free_r>
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	6363      	str	r3, [r4, #52]	; 0x34
 800ea9e:	89a3      	ldrh	r3, [r4, #12]
 800eaa0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800eaa4:	81a3      	strh	r3, [r4, #12]
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	6063      	str	r3, [r4, #4]
 800eaaa:	6923      	ldr	r3, [r4, #16]
 800eaac:	6023      	str	r3, [r4, #0]
 800eaae:	89a3      	ldrh	r3, [r4, #12]
 800eab0:	f043 0308 	orr.w	r3, r3, #8
 800eab4:	81a3      	strh	r3, [r4, #12]
 800eab6:	6923      	ldr	r3, [r4, #16]
 800eab8:	b94b      	cbnz	r3, 800eace <__swsetup_r+0x9a>
 800eaba:	89a3      	ldrh	r3, [r4, #12]
 800eabc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800eac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eac4:	d003      	beq.n	800eace <__swsetup_r+0x9a>
 800eac6:	4621      	mov	r1, r4
 800eac8:	4630      	mov	r0, r6
 800eaca:	f000 f931 	bl	800ed30 <__smakebuf_r>
 800eace:	89a0      	ldrh	r0, [r4, #12]
 800ead0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ead4:	f010 0301 	ands.w	r3, r0, #1
 800ead8:	d00a      	beq.n	800eaf0 <__swsetup_r+0xbc>
 800eada:	2300      	movs	r3, #0
 800eadc:	60a3      	str	r3, [r4, #8]
 800eade:	6963      	ldr	r3, [r4, #20]
 800eae0:	425b      	negs	r3, r3
 800eae2:	61a3      	str	r3, [r4, #24]
 800eae4:	6923      	ldr	r3, [r4, #16]
 800eae6:	b943      	cbnz	r3, 800eafa <__swsetup_r+0xc6>
 800eae8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800eaec:	d1ba      	bne.n	800ea64 <__swsetup_r+0x30>
 800eaee:	bd70      	pop	{r4, r5, r6, pc}
 800eaf0:	0781      	lsls	r1, r0, #30
 800eaf2:	bf58      	it	pl
 800eaf4:	6963      	ldrpl	r3, [r4, #20]
 800eaf6:	60a3      	str	r3, [r4, #8]
 800eaf8:	e7f4      	b.n	800eae4 <__swsetup_r+0xb0>
 800eafa:	2000      	movs	r0, #0
 800eafc:	e7f7      	b.n	800eaee <__swsetup_r+0xba>
 800eafe:	bf00      	nop
 800eb00:	24000034 	.word	0x24000034
 800eb04:	08022db0 	.word	0x08022db0
 800eb08:	08022dd0 	.word	0x08022dd0
 800eb0c:	08022d90 	.word	0x08022d90

0800eb10 <abort>:
 800eb10:	b508      	push	{r3, lr}
 800eb12:	2006      	movs	r0, #6
 800eb14:	f000 f9b8 	bl	800ee88 <raise>
 800eb18:	2001      	movs	r0, #1
 800eb1a:	f000 fa49 	bl	800efb0 <_exit>
	...

0800eb20 <_close_r>:
 800eb20:	b538      	push	{r3, r4, r5, lr}
 800eb22:	4d06      	ldr	r5, [pc, #24]	; (800eb3c <_close_r+0x1c>)
 800eb24:	2300      	movs	r3, #0
 800eb26:	4604      	mov	r4, r0
 800eb28:	4608      	mov	r0, r1
 800eb2a:	602b      	str	r3, [r5, #0]
 800eb2c:	f000 f9f2 	bl	800ef14 <_close>
 800eb30:	1c43      	adds	r3, r0, #1
 800eb32:	d102      	bne.n	800eb3a <_close_r+0x1a>
 800eb34:	682b      	ldr	r3, [r5, #0]
 800eb36:	b103      	cbz	r3, 800eb3a <_close_r+0x1a>
 800eb38:	6023      	str	r3, [r4, #0]
 800eb3a:	bd38      	pop	{r3, r4, r5, pc}
 800eb3c:	2400a7ac 	.word	0x2400a7ac

0800eb40 <__sflush_r>:
 800eb40:	898a      	ldrh	r2, [r1, #12]
 800eb42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb46:	4605      	mov	r5, r0
 800eb48:	0710      	lsls	r0, r2, #28
 800eb4a:	460c      	mov	r4, r1
 800eb4c:	d458      	bmi.n	800ec00 <__sflush_r+0xc0>
 800eb4e:	684b      	ldr	r3, [r1, #4]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	dc05      	bgt.n	800eb60 <__sflush_r+0x20>
 800eb54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	dc02      	bgt.n	800eb60 <__sflush_r+0x20>
 800eb5a:	2000      	movs	r0, #0
 800eb5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb62:	2e00      	cmp	r6, #0
 800eb64:	d0f9      	beq.n	800eb5a <__sflush_r+0x1a>
 800eb66:	2300      	movs	r3, #0
 800eb68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eb6c:	682f      	ldr	r7, [r5, #0]
 800eb6e:	602b      	str	r3, [r5, #0]
 800eb70:	d032      	beq.n	800ebd8 <__sflush_r+0x98>
 800eb72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eb74:	89a3      	ldrh	r3, [r4, #12]
 800eb76:	075a      	lsls	r2, r3, #29
 800eb78:	d505      	bpl.n	800eb86 <__sflush_r+0x46>
 800eb7a:	6863      	ldr	r3, [r4, #4]
 800eb7c:	1ac0      	subs	r0, r0, r3
 800eb7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eb80:	b10b      	cbz	r3, 800eb86 <__sflush_r+0x46>
 800eb82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eb84:	1ac0      	subs	r0, r0, r3
 800eb86:	2300      	movs	r3, #0
 800eb88:	4602      	mov	r2, r0
 800eb8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb8c:	6a21      	ldr	r1, [r4, #32]
 800eb8e:	4628      	mov	r0, r5
 800eb90:	47b0      	blx	r6
 800eb92:	1c43      	adds	r3, r0, #1
 800eb94:	89a3      	ldrh	r3, [r4, #12]
 800eb96:	d106      	bne.n	800eba6 <__sflush_r+0x66>
 800eb98:	6829      	ldr	r1, [r5, #0]
 800eb9a:	291d      	cmp	r1, #29
 800eb9c:	d82c      	bhi.n	800ebf8 <__sflush_r+0xb8>
 800eb9e:	4a2a      	ldr	r2, [pc, #168]	; (800ec48 <__sflush_r+0x108>)
 800eba0:	40ca      	lsrs	r2, r1
 800eba2:	07d6      	lsls	r6, r2, #31
 800eba4:	d528      	bpl.n	800ebf8 <__sflush_r+0xb8>
 800eba6:	2200      	movs	r2, #0
 800eba8:	6062      	str	r2, [r4, #4]
 800ebaa:	04d9      	lsls	r1, r3, #19
 800ebac:	6922      	ldr	r2, [r4, #16]
 800ebae:	6022      	str	r2, [r4, #0]
 800ebb0:	d504      	bpl.n	800ebbc <__sflush_r+0x7c>
 800ebb2:	1c42      	adds	r2, r0, #1
 800ebb4:	d101      	bne.n	800ebba <__sflush_r+0x7a>
 800ebb6:	682b      	ldr	r3, [r5, #0]
 800ebb8:	b903      	cbnz	r3, 800ebbc <__sflush_r+0x7c>
 800ebba:	6560      	str	r0, [r4, #84]	; 0x54
 800ebbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ebbe:	602f      	str	r7, [r5, #0]
 800ebc0:	2900      	cmp	r1, #0
 800ebc2:	d0ca      	beq.n	800eb5a <__sflush_r+0x1a>
 800ebc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ebc8:	4299      	cmp	r1, r3
 800ebca:	d002      	beq.n	800ebd2 <__sflush_r+0x92>
 800ebcc:	4628      	mov	r0, r5
 800ebce:	f7ff f985 	bl	800dedc <_free_r>
 800ebd2:	2000      	movs	r0, #0
 800ebd4:	6360      	str	r0, [r4, #52]	; 0x34
 800ebd6:	e7c1      	b.n	800eb5c <__sflush_r+0x1c>
 800ebd8:	6a21      	ldr	r1, [r4, #32]
 800ebda:	2301      	movs	r3, #1
 800ebdc:	4628      	mov	r0, r5
 800ebde:	47b0      	blx	r6
 800ebe0:	1c41      	adds	r1, r0, #1
 800ebe2:	d1c7      	bne.n	800eb74 <__sflush_r+0x34>
 800ebe4:	682b      	ldr	r3, [r5, #0]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d0c4      	beq.n	800eb74 <__sflush_r+0x34>
 800ebea:	2b1d      	cmp	r3, #29
 800ebec:	d001      	beq.n	800ebf2 <__sflush_r+0xb2>
 800ebee:	2b16      	cmp	r3, #22
 800ebf0:	d101      	bne.n	800ebf6 <__sflush_r+0xb6>
 800ebf2:	602f      	str	r7, [r5, #0]
 800ebf4:	e7b1      	b.n	800eb5a <__sflush_r+0x1a>
 800ebf6:	89a3      	ldrh	r3, [r4, #12]
 800ebf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebfc:	81a3      	strh	r3, [r4, #12]
 800ebfe:	e7ad      	b.n	800eb5c <__sflush_r+0x1c>
 800ec00:	690f      	ldr	r7, [r1, #16]
 800ec02:	2f00      	cmp	r7, #0
 800ec04:	d0a9      	beq.n	800eb5a <__sflush_r+0x1a>
 800ec06:	0793      	lsls	r3, r2, #30
 800ec08:	680e      	ldr	r6, [r1, #0]
 800ec0a:	bf08      	it	eq
 800ec0c:	694b      	ldreq	r3, [r1, #20]
 800ec0e:	600f      	str	r7, [r1, #0]
 800ec10:	bf18      	it	ne
 800ec12:	2300      	movne	r3, #0
 800ec14:	eba6 0807 	sub.w	r8, r6, r7
 800ec18:	608b      	str	r3, [r1, #8]
 800ec1a:	f1b8 0f00 	cmp.w	r8, #0
 800ec1e:	dd9c      	ble.n	800eb5a <__sflush_r+0x1a>
 800ec20:	6a21      	ldr	r1, [r4, #32]
 800ec22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ec24:	4643      	mov	r3, r8
 800ec26:	463a      	mov	r2, r7
 800ec28:	4628      	mov	r0, r5
 800ec2a:	47b0      	blx	r6
 800ec2c:	2800      	cmp	r0, #0
 800ec2e:	dc06      	bgt.n	800ec3e <__sflush_r+0xfe>
 800ec30:	89a3      	ldrh	r3, [r4, #12]
 800ec32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec36:	81a3      	strh	r3, [r4, #12]
 800ec38:	f04f 30ff 	mov.w	r0, #4294967295
 800ec3c:	e78e      	b.n	800eb5c <__sflush_r+0x1c>
 800ec3e:	4407      	add	r7, r0
 800ec40:	eba8 0800 	sub.w	r8, r8, r0
 800ec44:	e7e9      	b.n	800ec1a <__sflush_r+0xda>
 800ec46:	bf00      	nop
 800ec48:	20400001 	.word	0x20400001

0800ec4c <_fflush_r>:
 800ec4c:	b538      	push	{r3, r4, r5, lr}
 800ec4e:	690b      	ldr	r3, [r1, #16]
 800ec50:	4605      	mov	r5, r0
 800ec52:	460c      	mov	r4, r1
 800ec54:	b913      	cbnz	r3, 800ec5c <_fflush_r+0x10>
 800ec56:	2500      	movs	r5, #0
 800ec58:	4628      	mov	r0, r5
 800ec5a:	bd38      	pop	{r3, r4, r5, pc}
 800ec5c:	b118      	cbz	r0, 800ec66 <_fflush_r+0x1a>
 800ec5e:	6983      	ldr	r3, [r0, #24]
 800ec60:	b90b      	cbnz	r3, 800ec66 <_fflush_r+0x1a>
 800ec62:	f7ff f881 	bl	800dd68 <__sinit>
 800ec66:	4b14      	ldr	r3, [pc, #80]	; (800ecb8 <_fflush_r+0x6c>)
 800ec68:	429c      	cmp	r4, r3
 800ec6a:	d11b      	bne.n	800eca4 <_fflush_r+0x58>
 800ec6c:	686c      	ldr	r4, [r5, #4]
 800ec6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d0ef      	beq.n	800ec56 <_fflush_r+0xa>
 800ec76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ec78:	07d0      	lsls	r0, r2, #31
 800ec7a:	d404      	bmi.n	800ec86 <_fflush_r+0x3a>
 800ec7c:	0599      	lsls	r1, r3, #22
 800ec7e:	d402      	bmi.n	800ec86 <_fflush_r+0x3a>
 800ec80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec82:	f7ff f921 	bl	800dec8 <__retarget_lock_acquire_recursive>
 800ec86:	4628      	mov	r0, r5
 800ec88:	4621      	mov	r1, r4
 800ec8a:	f7ff ff59 	bl	800eb40 <__sflush_r>
 800ec8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec90:	07da      	lsls	r2, r3, #31
 800ec92:	4605      	mov	r5, r0
 800ec94:	d4e0      	bmi.n	800ec58 <_fflush_r+0xc>
 800ec96:	89a3      	ldrh	r3, [r4, #12]
 800ec98:	059b      	lsls	r3, r3, #22
 800ec9a:	d4dd      	bmi.n	800ec58 <_fflush_r+0xc>
 800ec9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec9e:	f7ff f914 	bl	800deca <__retarget_lock_release_recursive>
 800eca2:	e7d9      	b.n	800ec58 <_fflush_r+0xc>
 800eca4:	4b05      	ldr	r3, [pc, #20]	; (800ecbc <_fflush_r+0x70>)
 800eca6:	429c      	cmp	r4, r3
 800eca8:	d101      	bne.n	800ecae <_fflush_r+0x62>
 800ecaa:	68ac      	ldr	r4, [r5, #8]
 800ecac:	e7df      	b.n	800ec6e <_fflush_r+0x22>
 800ecae:	4b04      	ldr	r3, [pc, #16]	; (800ecc0 <_fflush_r+0x74>)
 800ecb0:	429c      	cmp	r4, r3
 800ecb2:	bf08      	it	eq
 800ecb4:	68ec      	ldreq	r4, [r5, #12]
 800ecb6:	e7da      	b.n	800ec6e <_fflush_r+0x22>
 800ecb8:	08022db0 	.word	0x08022db0
 800ecbc:	08022dd0 	.word	0x08022dd0
 800ecc0:	08022d90 	.word	0x08022d90

0800ecc4 <_lseek_r>:
 800ecc4:	b538      	push	{r3, r4, r5, lr}
 800ecc6:	4d07      	ldr	r5, [pc, #28]	; (800ece4 <_lseek_r+0x20>)
 800ecc8:	4604      	mov	r4, r0
 800ecca:	4608      	mov	r0, r1
 800eccc:	4611      	mov	r1, r2
 800ecce:	2200      	movs	r2, #0
 800ecd0:	602a      	str	r2, [r5, #0]
 800ecd2:	461a      	mov	r2, r3
 800ecd4:	f000 f946 	bl	800ef64 <_lseek>
 800ecd8:	1c43      	adds	r3, r0, #1
 800ecda:	d102      	bne.n	800ece2 <_lseek_r+0x1e>
 800ecdc:	682b      	ldr	r3, [r5, #0]
 800ecde:	b103      	cbz	r3, 800ece2 <_lseek_r+0x1e>
 800ece0:	6023      	str	r3, [r4, #0]
 800ece2:	bd38      	pop	{r3, r4, r5, pc}
 800ece4:	2400a7ac 	.word	0x2400a7ac

0800ece8 <__swhatbuf_r>:
 800ece8:	b570      	push	{r4, r5, r6, lr}
 800ecea:	460e      	mov	r6, r1
 800ecec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecf0:	2900      	cmp	r1, #0
 800ecf2:	b096      	sub	sp, #88	; 0x58
 800ecf4:	4614      	mov	r4, r2
 800ecf6:	461d      	mov	r5, r3
 800ecf8:	da07      	bge.n	800ed0a <__swhatbuf_r+0x22>
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	602b      	str	r3, [r5, #0]
 800ecfe:	89b3      	ldrh	r3, [r6, #12]
 800ed00:	061a      	lsls	r2, r3, #24
 800ed02:	d410      	bmi.n	800ed26 <__swhatbuf_r+0x3e>
 800ed04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed08:	e00e      	b.n	800ed28 <__swhatbuf_r+0x40>
 800ed0a:	466a      	mov	r2, sp
 800ed0c:	f000 f8d8 	bl	800eec0 <_fstat_r>
 800ed10:	2800      	cmp	r0, #0
 800ed12:	dbf2      	blt.n	800ecfa <__swhatbuf_r+0x12>
 800ed14:	9a01      	ldr	r2, [sp, #4]
 800ed16:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ed1a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ed1e:	425a      	negs	r2, r3
 800ed20:	415a      	adcs	r2, r3
 800ed22:	602a      	str	r2, [r5, #0]
 800ed24:	e7ee      	b.n	800ed04 <__swhatbuf_r+0x1c>
 800ed26:	2340      	movs	r3, #64	; 0x40
 800ed28:	2000      	movs	r0, #0
 800ed2a:	6023      	str	r3, [r4, #0]
 800ed2c:	b016      	add	sp, #88	; 0x58
 800ed2e:	bd70      	pop	{r4, r5, r6, pc}

0800ed30 <__smakebuf_r>:
 800ed30:	898b      	ldrh	r3, [r1, #12]
 800ed32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ed34:	079d      	lsls	r5, r3, #30
 800ed36:	4606      	mov	r6, r0
 800ed38:	460c      	mov	r4, r1
 800ed3a:	d507      	bpl.n	800ed4c <__smakebuf_r+0x1c>
 800ed3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ed40:	6023      	str	r3, [r4, #0]
 800ed42:	6123      	str	r3, [r4, #16]
 800ed44:	2301      	movs	r3, #1
 800ed46:	6163      	str	r3, [r4, #20]
 800ed48:	b002      	add	sp, #8
 800ed4a:	bd70      	pop	{r4, r5, r6, pc}
 800ed4c:	ab01      	add	r3, sp, #4
 800ed4e:	466a      	mov	r2, sp
 800ed50:	f7ff ffca 	bl	800ece8 <__swhatbuf_r>
 800ed54:	9900      	ldr	r1, [sp, #0]
 800ed56:	4605      	mov	r5, r0
 800ed58:	4630      	mov	r0, r6
 800ed5a:	f7ff f90f 	bl	800df7c <_malloc_r>
 800ed5e:	b948      	cbnz	r0, 800ed74 <__smakebuf_r+0x44>
 800ed60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed64:	059a      	lsls	r2, r3, #22
 800ed66:	d4ef      	bmi.n	800ed48 <__smakebuf_r+0x18>
 800ed68:	f023 0303 	bic.w	r3, r3, #3
 800ed6c:	f043 0302 	orr.w	r3, r3, #2
 800ed70:	81a3      	strh	r3, [r4, #12]
 800ed72:	e7e3      	b.n	800ed3c <__smakebuf_r+0xc>
 800ed74:	4b0d      	ldr	r3, [pc, #52]	; (800edac <__smakebuf_r+0x7c>)
 800ed76:	62b3      	str	r3, [r6, #40]	; 0x28
 800ed78:	89a3      	ldrh	r3, [r4, #12]
 800ed7a:	6020      	str	r0, [r4, #0]
 800ed7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed80:	81a3      	strh	r3, [r4, #12]
 800ed82:	9b00      	ldr	r3, [sp, #0]
 800ed84:	6163      	str	r3, [r4, #20]
 800ed86:	9b01      	ldr	r3, [sp, #4]
 800ed88:	6120      	str	r0, [r4, #16]
 800ed8a:	b15b      	cbz	r3, 800eda4 <__smakebuf_r+0x74>
 800ed8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed90:	4630      	mov	r0, r6
 800ed92:	f000 f8a7 	bl	800eee4 <_isatty_r>
 800ed96:	b128      	cbz	r0, 800eda4 <__smakebuf_r+0x74>
 800ed98:	89a3      	ldrh	r3, [r4, #12]
 800ed9a:	f023 0303 	bic.w	r3, r3, #3
 800ed9e:	f043 0301 	orr.w	r3, r3, #1
 800eda2:	81a3      	strh	r3, [r4, #12]
 800eda4:	89a0      	ldrh	r0, [r4, #12]
 800eda6:	4305      	orrs	r5, r0
 800eda8:	81a5      	strh	r5, [r4, #12]
 800edaa:	e7cd      	b.n	800ed48 <__smakebuf_r+0x18>
 800edac:	0800dd01 	.word	0x0800dd01

0800edb0 <__malloc_lock>:
 800edb0:	4801      	ldr	r0, [pc, #4]	; (800edb8 <__malloc_lock+0x8>)
 800edb2:	f7ff b889 	b.w	800dec8 <__retarget_lock_acquire_recursive>
 800edb6:	bf00      	nop
 800edb8:	2400a7b8 	.word	0x2400a7b8

0800edbc <__malloc_unlock>:
 800edbc:	4801      	ldr	r0, [pc, #4]	; (800edc4 <__malloc_unlock+0x8>)
 800edbe:	f7ff b884 	b.w	800deca <__retarget_lock_release_recursive>
 800edc2:	bf00      	nop
 800edc4:	2400a7b8 	.word	0x2400a7b8

0800edc8 <_realloc_r>:
 800edc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edca:	4607      	mov	r7, r0
 800edcc:	4614      	mov	r4, r2
 800edce:	460e      	mov	r6, r1
 800edd0:	b921      	cbnz	r1, 800eddc <_realloc_r+0x14>
 800edd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800edd6:	4611      	mov	r1, r2
 800edd8:	f7ff b8d0 	b.w	800df7c <_malloc_r>
 800eddc:	b922      	cbnz	r2, 800ede8 <_realloc_r+0x20>
 800edde:	f7ff f87d 	bl	800dedc <_free_r>
 800ede2:	4625      	mov	r5, r4
 800ede4:	4628      	mov	r0, r5
 800ede6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ede8:	f000 f88c 	bl	800ef04 <_malloc_usable_size_r>
 800edec:	42a0      	cmp	r0, r4
 800edee:	d20f      	bcs.n	800ee10 <_realloc_r+0x48>
 800edf0:	4621      	mov	r1, r4
 800edf2:	4638      	mov	r0, r7
 800edf4:	f7ff f8c2 	bl	800df7c <_malloc_r>
 800edf8:	4605      	mov	r5, r0
 800edfa:	2800      	cmp	r0, #0
 800edfc:	d0f2      	beq.n	800ede4 <_realloc_r+0x1c>
 800edfe:	4631      	mov	r1, r6
 800ee00:	4622      	mov	r2, r4
 800ee02:	f7fe fe69 	bl	800dad8 <memcpy>
 800ee06:	4631      	mov	r1, r6
 800ee08:	4638      	mov	r0, r7
 800ee0a:	f7ff f867 	bl	800dedc <_free_r>
 800ee0e:	e7e9      	b.n	800ede4 <_realloc_r+0x1c>
 800ee10:	4635      	mov	r5, r6
 800ee12:	e7e7      	b.n	800ede4 <_realloc_r+0x1c>

0800ee14 <_read_r>:
 800ee14:	b538      	push	{r3, r4, r5, lr}
 800ee16:	4d07      	ldr	r5, [pc, #28]	; (800ee34 <_read_r+0x20>)
 800ee18:	4604      	mov	r4, r0
 800ee1a:	4608      	mov	r0, r1
 800ee1c:	4611      	mov	r1, r2
 800ee1e:	2200      	movs	r2, #0
 800ee20:	602a      	str	r2, [r5, #0]
 800ee22:	461a      	mov	r2, r3
 800ee24:	f000 f8a6 	bl	800ef74 <_read>
 800ee28:	1c43      	adds	r3, r0, #1
 800ee2a:	d102      	bne.n	800ee32 <_read_r+0x1e>
 800ee2c:	682b      	ldr	r3, [r5, #0]
 800ee2e:	b103      	cbz	r3, 800ee32 <_read_r+0x1e>
 800ee30:	6023      	str	r3, [r4, #0]
 800ee32:	bd38      	pop	{r3, r4, r5, pc}
 800ee34:	2400a7ac 	.word	0x2400a7ac

0800ee38 <_raise_r>:
 800ee38:	291f      	cmp	r1, #31
 800ee3a:	b538      	push	{r3, r4, r5, lr}
 800ee3c:	4604      	mov	r4, r0
 800ee3e:	460d      	mov	r5, r1
 800ee40:	d904      	bls.n	800ee4c <_raise_r+0x14>
 800ee42:	2316      	movs	r3, #22
 800ee44:	6003      	str	r3, [r0, #0]
 800ee46:	f04f 30ff 	mov.w	r0, #4294967295
 800ee4a:	bd38      	pop	{r3, r4, r5, pc}
 800ee4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ee4e:	b112      	cbz	r2, 800ee56 <_raise_r+0x1e>
 800ee50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ee54:	b94b      	cbnz	r3, 800ee6a <_raise_r+0x32>
 800ee56:	4620      	mov	r0, r4
 800ee58:	f000 f830 	bl	800eebc <_getpid_r>
 800ee5c:	462a      	mov	r2, r5
 800ee5e:	4601      	mov	r1, r0
 800ee60:	4620      	mov	r0, r4
 800ee62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee66:	f000 b817 	b.w	800ee98 <_kill_r>
 800ee6a:	2b01      	cmp	r3, #1
 800ee6c:	d00a      	beq.n	800ee84 <_raise_r+0x4c>
 800ee6e:	1c59      	adds	r1, r3, #1
 800ee70:	d103      	bne.n	800ee7a <_raise_r+0x42>
 800ee72:	2316      	movs	r3, #22
 800ee74:	6003      	str	r3, [r0, #0]
 800ee76:	2001      	movs	r0, #1
 800ee78:	e7e7      	b.n	800ee4a <_raise_r+0x12>
 800ee7a:	2400      	movs	r4, #0
 800ee7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ee80:	4628      	mov	r0, r5
 800ee82:	4798      	blx	r3
 800ee84:	2000      	movs	r0, #0
 800ee86:	e7e0      	b.n	800ee4a <_raise_r+0x12>

0800ee88 <raise>:
 800ee88:	4b02      	ldr	r3, [pc, #8]	; (800ee94 <raise+0xc>)
 800ee8a:	4601      	mov	r1, r0
 800ee8c:	6818      	ldr	r0, [r3, #0]
 800ee8e:	f7ff bfd3 	b.w	800ee38 <_raise_r>
 800ee92:	bf00      	nop
 800ee94:	24000034 	.word	0x24000034

0800ee98 <_kill_r>:
 800ee98:	b538      	push	{r3, r4, r5, lr}
 800ee9a:	4d07      	ldr	r5, [pc, #28]	; (800eeb8 <_kill_r+0x20>)
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	4604      	mov	r4, r0
 800eea0:	4608      	mov	r0, r1
 800eea2:	4611      	mov	r1, r2
 800eea4:	602b      	str	r3, [r5, #0]
 800eea6:	f000 f855 	bl	800ef54 <_kill>
 800eeaa:	1c43      	adds	r3, r0, #1
 800eeac:	d102      	bne.n	800eeb4 <_kill_r+0x1c>
 800eeae:	682b      	ldr	r3, [r5, #0]
 800eeb0:	b103      	cbz	r3, 800eeb4 <_kill_r+0x1c>
 800eeb2:	6023      	str	r3, [r4, #0]
 800eeb4:	bd38      	pop	{r3, r4, r5, pc}
 800eeb6:	bf00      	nop
 800eeb8:	2400a7ac 	.word	0x2400a7ac

0800eebc <_getpid_r>:
 800eebc:	f000 b83a 	b.w	800ef34 <_getpid>

0800eec0 <_fstat_r>:
 800eec0:	b538      	push	{r3, r4, r5, lr}
 800eec2:	4d07      	ldr	r5, [pc, #28]	; (800eee0 <_fstat_r+0x20>)
 800eec4:	2300      	movs	r3, #0
 800eec6:	4604      	mov	r4, r0
 800eec8:	4608      	mov	r0, r1
 800eeca:	4611      	mov	r1, r2
 800eecc:	602b      	str	r3, [r5, #0]
 800eece:	f000 f829 	bl	800ef24 <_fstat>
 800eed2:	1c43      	adds	r3, r0, #1
 800eed4:	d102      	bne.n	800eedc <_fstat_r+0x1c>
 800eed6:	682b      	ldr	r3, [r5, #0]
 800eed8:	b103      	cbz	r3, 800eedc <_fstat_r+0x1c>
 800eeda:	6023      	str	r3, [r4, #0]
 800eedc:	bd38      	pop	{r3, r4, r5, pc}
 800eede:	bf00      	nop
 800eee0:	2400a7ac 	.word	0x2400a7ac

0800eee4 <_isatty_r>:
 800eee4:	b538      	push	{r3, r4, r5, lr}
 800eee6:	4d06      	ldr	r5, [pc, #24]	; (800ef00 <_isatty_r+0x1c>)
 800eee8:	2300      	movs	r3, #0
 800eeea:	4604      	mov	r4, r0
 800eeec:	4608      	mov	r0, r1
 800eeee:	602b      	str	r3, [r5, #0]
 800eef0:	f000 f828 	bl	800ef44 <_isatty>
 800eef4:	1c43      	adds	r3, r0, #1
 800eef6:	d102      	bne.n	800eefe <_isatty_r+0x1a>
 800eef8:	682b      	ldr	r3, [r5, #0]
 800eefa:	b103      	cbz	r3, 800eefe <_isatty_r+0x1a>
 800eefc:	6023      	str	r3, [r4, #0]
 800eefe:	bd38      	pop	{r3, r4, r5, pc}
 800ef00:	2400a7ac 	.word	0x2400a7ac

0800ef04 <_malloc_usable_size_r>:
 800ef04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef08:	1f18      	subs	r0, r3, #4
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	bfbc      	itt	lt
 800ef0e:	580b      	ldrlt	r3, [r1, r0]
 800ef10:	18c0      	addlt	r0, r0, r3
 800ef12:	4770      	bx	lr

0800ef14 <_close>:
 800ef14:	4b02      	ldr	r3, [pc, #8]	; (800ef20 <_close+0xc>)
 800ef16:	2258      	movs	r2, #88	; 0x58
 800ef18:	601a      	str	r2, [r3, #0]
 800ef1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef1e:	4770      	bx	lr
 800ef20:	2400a7ac 	.word	0x2400a7ac

0800ef24 <_fstat>:
 800ef24:	4b02      	ldr	r3, [pc, #8]	; (800ef30 <_fstat+0xc>)
 800ef26:	2258      	movs	r2, #88	; 0x58
 800ef28:	601a      	str	r2, [r3, #0]
 800ef2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef2e:	4770      	bx	lr
 800ef30:	2400a7ac 	.word	0x2400a7ac

0800ef34 <_getpid>:
 800ef34:	4b02      	ldr	r3, [pc, #8]	; (800ef40 <_getpid+0xc>)
 800ef36:	2258      	movs	r2, #88	; 0x58
 800ef38:	601a      	str	r2, [r3, #0]
 800ef3a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef3e:	4770      	bx	lr
 800ef40:	2400a7ac 	.word	0x2400a7ac

0800ef44 <_isatty>:
 800ef44:	4b02      	ldr	r3, [pc, #8]	; (800ef50 <_isatty+0xc>)
 800ef46:	2258      	movs	r2, #88	; 0x58
 800ef48:	601a      	str	r2, [r3, #0]
 800ef4a:	2000      	movs	r0, #0
 800ef4c:	4770      	bx	lr
 800ef4e:	bf00      	nop
 800ef50:	2400a7ac 	.word	0x2400a7ac

0800ef54 <_kill>:
 800ef54:	4b02      	ldr	r3, [pc, #8]	; (800ef60 <_kill+0xc>)
 800ef56:	2258      	movs	r2, #88	; 0x58
 800ef58:	601a      	str	r2, [r3, #0]
 800ef5a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef5e:	4770      	bx	lr
 800ef60:	2400a7ac 	.word	0x2400a7ac

0800ef64 <_lseek>:
 800ef64:	4b02      	ldr	r3, [pc, #8]	; (800ef70 <_lseek+0xc>)
 800ef66:	2258      	movs	r2, #88	; 0x58
 800ef68:	601a      	str	r2, [r3, #0]
 800ef6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef6e:	4770      	bx	lr
 800ef70:	2400a7ac 	.word	0x2400a7ac

0800ef74 <_read>:
 800ef74:	4b02      	ldr	r3, [pc, #8]	; (800ef80 <_read+0xc>)
 800ef76:	2258      	movs	r2, #88	; 0x58
 800ef78:	601a      	str	r2, [r3, #0]
 800ef7a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef7e:	4770      	bx	lr
 800ef80:	2400a7ac 	.word	0x2400a7ac

0800ef84 <_sbrk>:
 800ef84:	4b04      	ldr	r3, [pc, #16]	; (800ef98 <_sbrk+0x14>)
 800ef86:	6819      	ldr	r1, [r3, #0]
 800ef88:	4602      	mov	r2, r0
 800ef8a:	b909      	cbnz	r1, 800ef90 <_sbrk+0xc>
 800ef8c:	4903      	ldr	r1, [pc, #12]	; (800ef9c <_sbrk+0x18>)
 800ef8e:	6019      	str	r1, [r3, #0]
 800ef90:	6818      	ldr	r0, [r3, #0]
 800ef92:	4402      	add	r2, r0
 800ef94:	601a      	str	r2, [r3, #0]
 800ef96:	4770      	bx	lr
 800ef98:	240067fc 	.word	0x240067fc
 800ef9c:	2400a7c0 	.word	0x2400a7c0

0800efa0 <_write>:
 800efa0:	4b02      	ldr	r3, [pc, #8]	; (800efac <_write+0xc>)
 800efa2:	2258      	movs	r2, #88	; 0x58
 800efa4:	601a      	str	r2, [r3, #0]
 800efa6:	f04f 30ff 	mov.w	r0, #4294967295
 800efaa:	4770      	bx	lr
 800efac:	2400a7ac 	.word	0x2400a7ac

0800efb0 <_exit>:
 800efb0:	e7fe      	b.n	800efb0 <_exit>
	...

0800efb4 <_init>:
 800efb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efb6:	bf00      	nop
 800efb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efba:	bc08      	pop	{r3}
 800efbc:	469e      	mov	lr, r3
 800efbe:	4770      	bx	lr

0800efc0 <_fini>:
 800efc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efc2:	bf00      	nop
 800efc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efc6:	bc08      	pop	{r3}
 800efc8:	469e      	mov	lr, r3
 800efca:	4770      	bx	lr
