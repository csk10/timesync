
timesync.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000211cc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000059ec  0802146c  0802146c  0003146c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08026e58  08026e58  00036e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08026e60  08026e60  00036e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08026e64  08026e64  00036e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000009c  20000000  08026e68  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  2000009c  08026f04  0004009c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  200000fc  08026f64  000400fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxArraySection 000017d0  2000015c  08026fc4  0004015c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000092ac  20001930  08028794  00041930  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000abdc  08028794  0004abdc  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0004192c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00083682  00000000  00000000  0004195a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000c7e1  00000000  00000000  000c4fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000030d8  00000000  00000000  000d17c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002e60  00000000  00000000  000d4898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001be95  00000000  00000000  000d76f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00050682  00000000  00000000  000f358d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0019d439  00000000  00000000  00143c0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002e1048  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d44c  00000000  00000000  002e109c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stabstr      0000004e  00000000  00000000  002ee4e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20001930 	.word	0x20001930
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08021454 	.word	0x08021454

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20001934 	.word	0x20001934
 80002dc:	08021454 	.word	0x08021454

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_ldivmod>:
 8000390:	b97b      	cbnz	r3, 80003b2 <__aeabi_ldivmod+0x22>
 8000392:	b972      	cbnz	r2, 80003b2 <__aeabi_ldivmod+0x22>
 8000394:	2900      	cmp	r1, #0
 8000396:	bfbe      	ittt	lt
 8000398:	2000      	movlt	r0, #0
 800039a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800039e:	e006      	blt.n	80003ae <__aeabi_ldivmod+0x1e>
 80003a0:	bf08      	it	eq
 80003a2:	2800      	cmpeq	r0, #0
 80003a4:	bf1c      	itt	ne
 80003a6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80003aa:	f04f 30ff 	movne.w	r0, #4294967295
 80003ae:	f000 b9b9 	b.w	8000724 <__aeabi_idiv0>
 80003b2:	f1ad 0c08 	sub.w	ip, sp, #8
 80003b6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003ba:	2900      	cmp	r1, #0
 80003bc:	db09      	blt.n	80003d2 <__aeabi_ldivmod+0x42>
 80003be:	2b00      	cmp	r3, #0
 80003c0:	db1a      	blt.n	80003f8 <__aeabi_ldivmod+0x68>
 80003c2:	f000 f84d 	bl	8000460 <__udivmoddi4>
 80003c6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ce:	b004      	add	sp, #16
 80003d0:	4770      	bx	lr
 80003d2:	4240      	negs	r0, r0
 80003d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db1b      	blt.n	8000414 <__aeabi_ldivmod+0x84>
 80003dc:	f000 f840 	bl	8000460 <__udivmoddi4>
 80003e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003e8:	b004      	add	sp, #16
 80003ea:	4240      	negs	r0, r0
 80003ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f0:	4252      	negs	r2, r2
 80003f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003f6:	4770      	bx	lr
 80003f8:	4252      	negs	r2, r2
 80003fa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003fe:	f000 f82f 	bl	8000460 <__udivmoddi4>
 8000402:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000406:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040a:	b004      	add	sp, #16
 800040c:	4240      	negs	r0, r0
 800040e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000412:	4770      	bx	lr
 8000414:	4252      	negs	r2, r2
 8000416:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800041a:	f000 f821 	bl	8000460 <__udivmoddi4>
 800041e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000422:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000426:	b004      	add	sp, #16
 8000428:	4252      	negs	r2, r2
 800042a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800042e:	4770      	bx	lr

08000430 <__aeabi_uldivmod>:
 8000430:	b953      	cbnz	r3, 8000448 <__aeabi_uldivmod+0x18>
 8000432:	b94a      	cbnz	r2, 8000448 <__aeabi_uldivmod+0x18>
 8000434:	2900      	cmp	r1, #0
 8000436:	bf08      	it	eq
 8000438:	2800      	cmpeq	r0, #0
 800043a:	bf1c      	itt	ne
 800043c:	f04f 31ff 	movne.w	r1, #4294967295
 8000440:	f04f 30ff 	movne.w	r0, #4294967295
 8000444:	f000 b96e 	b.w	8000724 <__aeabi_idiv0>
 8000448:	f1ad 0c08 	sub.w	ip, sp, #8
 800044c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000450:	f000 f806 	bl	8000460 <__udivmoddi4>
 8000454:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000458:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800045c:	b004      	add	sp, #16
 800045e:	4770      	bx	lr

08000460 <__udivmoddi4>:
 8000460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000464:	9d08      	ldr	r5, [sp, #32]
 8000466:	4604      	mov	r4, r0
 8000468:	468c      	mov	ip, r1
 800046a:	2b00      	cmp	r3, #0
 800046c:	f040 8083 	bne.w	8000576 <__udivmoddi4+0x116>
 8000470:	428a      	cmp	r2, r1
 8000472:	4617      	mov	r7, r2
 8000474:	d947      	bls.n	8000506 <__udivmoddi4+0xa6>
 8000476:	fab2 f282 	clz	r2, r2
 800047a:	b142      	cbz	r2, 800048e <__udivmoddi4+0x2e>
 800047c:	f1c2 0020 	rsb	r0, r2, #32
 8000480:	fa24 f000 	lsr.w	r0, r4, r0
 8000484:	4091      	lsls	r1, r2
 8000486:	4097      	lsls	r7, r2
 8000488:	ea40 0c01 	orr.w	ip, r0, r1
 800048c:	4094      	lsls	r4, r2
 800048e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000492:	0c23      	lsrs	r3, r4, #16
 8000494:	fbbc f6f8 	udiv	r6, ip, r8
 8000498:	fa1f fe87 	uxth.w	lr, r7
 800049c:	fb08 c116 	mls	r1, r8, r6, ip
 80004a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004a4:	fb06 f10e 	mul.w	r1, r6, lr
 80004a8:	4299      	cmp	r1, r3
 80004aa:	d909      	bls.n	80004c0 <__udivmoddi4+0x60>
 80004ac:	18fb      	adds	r3, r7, r3
 80004ae:	f106 30ff 	add.w	r0, r6, #4294967295
 80004b2:	f080 8119 	bcs.w	80006e8 <__udivmoddi4+0x288>
 80004b6:	4299      	cmp	r1, r3
 80004b8:	f240 8116 	bls.w	80006e8 <__udivmoddi4+0x288>
 80004bc:	3e02      	subs	r6, #2
 80004be:	443b      	add	r3, r7
 80004c0:	1a5b      	subs	r3, r3, r1
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d909      	bls.n	80004ec <__udivmoddi4+0x8c>
 80004d8:	193c      	adds	r4, r7, r4
 80004da:	f100 33ff 	add.w	r3, r0, #4294967295
 80004de:	f080 8105 	bcs.w	80006ec <__udivmoddi4+0x28c>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	f240 8102 	bls.w	80006ec <__udivmoddi4+0x28c>
 80004e8:	3802      	subs	r0, #2
 80004ea:	443c      	add	r4, r7
 80004ec:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004f0:	eba4 040e 	sub.w	r4, r4, lr
 80004f4:	2600      	movs	r6, #0
 80004f6:	b11d      	cbz	r5, 8000500 <__udivmoddi4+0xa0>
 80004f8:	40d4      	lsrs	r4, r2
 80004fa:	2300      	movs	r3, #0
 80004fc:	e9c5 4300 	strd	r4, r3, [r5]
 8000500:	4631      	mov	r1, r6
 8000502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000506:	b902      	cbnz	r2, 800050a <__udivmoddi4+0xaa>
 8000508:	deff      	udf	#255	; 0xff
 800050a:	fab2 f282 	clz	r2, r2
 800050e:	2a00      	cmp	r2, #0
 8000510:	d150      	bne.n	80005b4 <__udivmoddi4+0x154>
 8000512:	1bcb      	subs	r3, r1, r7
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	fa1f f887 	uxth.w	r8, r7
 800051c:	2601      	movs	r6, #1
 800051e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000522:	0c21      	lsrs	r1, r4, #16
 8000524:	fb0e 331c 	mls	r3, lr, ip, r3
 8000528:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052c:	fb08 f30c 	mul.w	r3, r8, ip
 8000530:	428b      	cmp	r3, r1
 8000532:	d907      	bls.n	8000544 <__udivmoddi4+0xe4>
 8000534:	1879      	adds	r1, r7, r1
 8000536:	f10c 30ff 	add.w	r0, ip, #4294967295
 800053a:	d202      	bcs.n	8000542 <__udivmoddi4+0xe2>
 800053c:	428b      	cmp	r3, r1
 800053e:	f200 80e9 	bhi.w	8000714 <__udivmoddi4+0x2b4>
 8000542:	4684      	mov	ip, r0
 8000544:	1ac9      	subs	r1, r1, r3
 8000546:	b2a3      	uxth	r3, r4
 8000548:	fbb1 f0fe 	udiv	r0, r1, lr
 800054c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000550:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000554:	fb08 f800 	mul.w	r8, r8, r0
 8000558:	45a0      	cmp	r8, r4
 800055a:	d907      	bls.n	800056c <__udivmoddi4+0x10c>
 800055c:	193c      	adds	r4, r7, r4
 800055e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000562:	d202      	bcs.n	800056a <__udivmoddi4+0x10a>
 8000564:	45a0      	cmp	r8, r4
 8000566:	f200 80d9 	bhi.w	800071c <__udivmoddi4+0x2bc>
 800056a:	4618      	mov	r0, r3
 800056c:	eba4 0408 	sub.w	r4, r4, r8
 8000570:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000574:	e7bf      	b.n	80004f6 <__udivmoddi4+0x96>
 8000576:	428b      	cmp	r3, r1
 8000578:	d909      	bls.n	800058e <__udivmoddi4+0x12e>
 800057a:	2d00      	cmp	r5, #0
 800057c:	f000 80b1 	beq.w	80006e2 <__udivmoddi4+0x282>
 8000580:	2600      	movs	r6, #0
 8000582:	e9c5 0100 	strd	r0, r1, [r5]
 8000586:	4630      	mov	r0, r6
 8000588:	4631      	mov	r1, r6
 800058a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058e:	fab3 f683 	clz	r6, r3
 8000592:	2e00      	cmp	r6, #0
 8000594:	d14a      	bne.n	800062c <__udivmoddi4+0x1cc>
 8000596:	428b      	cmp	r3, r1
 8000598:	d302      	bcc.n	80005a0 <__udivmoddi4+0x140>
 800059a:	4282      	cmp	r2, r0
 800059c:	f200 80b8 	bhi.w	8000710 <__udivmoddi4+0x2b0>
 80005a0:	1a84      	subs	r4, r0, r2
 80005a2:	eb61 0103 	sbc.w	r1, r1, r3
 80005a6:	2001      	movs	r0, #1
 80005a8:	468c      	mov	ip, r1
 80005aa:	2d00      	cmp	r5, #0
 80005ac:	d0a8      	beq.n	8000500 <__udivmoddi4+0xa0>
 80005ae:	e9c5 4c00 	strd	r4, ip, [r5]
 80005b2:	e7a5      	b.n	8000500 <__udivmoddi4+0xa0>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f603 	lsr.w	r6, r0, r3
 80005bc:	4097      	lsls	r7, r2
 80005be:	fa01 f002 	lsl.w	r0, r1, r2
 80005c2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005c6:	40d9      	lsrs	r1, r3
 80005c8:	4330      	orrs	r0, r6
 80005ca:	0c03      	lsrs	r3, r0, #16
 80005cc:	fbb1 f6fe 	udiv	r6, r1, lr
 80005d0:	fa1f f887 	uxth.w	r8, r7
 80005d4:	fb0e 1116 	mls	r1, lr, r6, r1
 80005d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005dc:	fb06 f108 	mul.w	r1, r6, r8
 80005e0:	4299      	cmp	r1, r3
 80005e2:	fa04 f402 	lsl.w	r4, r4, r2
 80005e6:	d909      	bls.n	80005fc <__udivmoddi4+0x19c>
 80005e8:	18fb      	adds	r3, r7, r3
 80005ea:	f106 3cff 	add.w	ip, r6, #4294967295
 80005ee:	f080 808d 	bcs.w	800070c <__udivmoddi4+0x2ac>
 80005f2:	4299      	cmp	r1, r3
 80005f4:	f240 808a 	bls.w	800070c <__udivmoddi4+0x2ac>
 80005f8:	3e02      	subs	r6, #2
 80005fa:	443b      	add	r3, r7
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b281      	uxth	r1, r0
 8000600:	fbb3 f0fe 	udiv	r0, r3, lr
 8000604:	fb0e 3310 	mls	r3, lr, r0, r3
 8000608:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060c:	fb00 f308 	mul.w	r3, r0, r8
 8000610:	428b      	cmp	r3, r1
 8000612:	d907      	bls.n	8000624 <__udivmoddi4+0x1c4>
 8000614:	1879      	adds	r1, r7, r1
 8000616:	f100 3cff 	add.w	ip, r0, #4294967295
 800061a:	d273      	bcs.n	8000704 <__udivmoddi4+0x2a4>
 800061c:	428b      	cmp	r3, r1
 800061e:	d971      	bls.n	8000704 <__udivmoddi4+0x2a4>
 8000620:	3802      	subs	r0, #2
 8000622:	4439      	add	r1, r7
 8000624:	1acb      	subs	r3, r1, r3
 8000626:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800062a:	e778      	b.n	800051e <__udivmoddi4+0xbe>
 800062c:	f1c6 0c20 	rsb	ip, r6, #32
 8000630:	fa03 f406 	lsl.w	r4, r3, r6
 8000634:	fa22 f30c 	lsr.w	r3, r2, ip
 8000638:	431c      	orrs	r4, r3
 800063a:	fa20 f70c 	lsr.w	r7, r0, ip
 800063e:	fa01 f306 	lsl.w	r3, r1, r6
 8000642:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000646:	fa21 f10c 	lsr.w	r1, r1, ip
 800064a:	431f      	orrs	r7, r3
 800064c:	0c3b      	lsrs	r3, r7, #16
 800064e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000652:	fa1f f884 	uxth.w	r8, r4
 8000656:	fb0e 1119 	mls	r1, lr, r9, r1
 800065a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800065e:	fb09 fa08 	mul.w	sl, r9, r8
 8000662:	458a      	cmp	sl, r1
 8000664:	fa02 f206 	lsl.w	r2, r2, r6
 8000668:	fa00 f306 	lsl.w	r3, r0, r6
 800066c:	d908      	bls.n	8000680 <__udivmoddi4+0x220>
 800066e:	1861      	adds	r1, r4, r1
 8000670:	f109 30ff 	add.w	r0, r9, #4294967295
 8000674:	d248      	bcs.n	8000708 <__udivmoddi4+0x2a8>
 8000676:	458a      	cmp	sl, r1
 8000678:	d946      	bls.n	8000708 <__udivmoddi4+0x2a8>
 800067a:	f1a9 0902 	sub.w	r9, r9, #2
 800067e:	4421      	add	r1, r4
 8000680:	eba1 010a 	sub.w	r1, r1, sl
 8000684:	b2bf      	uxth	r7, r7
 8000686:	fbb1 f0fe 	udiv	r0, r1, lr
 800068a:	fb0e 1110 	mls	r1, lr, r0, r1
 800068e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000692:	fb00 f808 	mul.w	r8, r0, r8
 8000696:	45b8      	cmp	r8, r7
 8000698:	d907      	bls.n	80006aa <__udivmoddi4+0x24a>
 800069a:	19e7      	adds	r7, r4, r7
 800069c:	f100 31ff 	add.w	r1, r0, #4294967295
 80006a0:	d22e      	bcs.n	8000700 <__udivmoddi4+0x2a0>
 80006a2:	45b8      	cmp	r8, r7
 80006a4:	d92c      	bls.n	8000700 <__udivmoddi4+0x2a0>
 80006a6:	3802      	subs	r0, #2
 80006a8:	4427      	add	r7, r4
 80006aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80006ae:	eba7 0708 	sub.w	r7, r7, r8
 80006b2:	fba0 8902 	umull	r8, r9, r0, r2
 80006b6:	454f      	cmp	r7, r9
 80006b8:	46c6      	mov	lr, r8
 80006ba:	4649      	mov	r1, r9
 80006bc:	d31a      	bcc.n	80006f4 <__udivmoddi4+0x294>
 80006be:	d017      	beq.n	80006f0 <__udivmoddi4+0x290>
 80006c0:	b15d      	cbz	r5, 80006da <__udivmoddi4+0x27a>
 80006c2:	ebb3 020e 	subs.w	r2, r3, lr
 80006c6:	eb67 0701 	sbc.w	r7, r7, r1
 80006ca:	fa07 fc0c 	lsl.w	ip, r7, ip
 80006ce:	40f2      	lsrs	r2, r6
 80006d0:	ea4c 0202 	orr.w	r2, ip, r2
 80006d4:	40f7      	lsrs	r7, r6
 80006d6:	e9c5 2700 	strd	r2, r7, [r5]
 80006da:	2600      	movs	r6, #0
 80006dc:	4631      	mov	r1, r6
 80006de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006e2:	462e      	mov	r6, r5
 80006e4:	4628      	mov	r0, r5
 80006e6:	e70b      	b.n	8000500 <__udivmoddi4+0xa0>
 80006e8:	4606      	mov	r6, r0
 80006ea:	e6e9      	b.n	80004c0 <__udivmoddi4+0x60>
 80006ec:	4618      	mov	r0, r3
 80006ee:	e6fd      	b.n	80004ec <__udivmoddi4+0x8c>
 80006f0:	4543      	cmp	r3, r8
 80006f2:	d2e5      	bcs.n	80006c0 <__udivmoddi4+0x260>
 80006f4:	ebb8 0e02 	subs.w	lr, r8, r2
 80006f8:	eb69 0104 	sbc.w	r1, r9, r4
 80006fc:	3801      	subs	r0, #1
 80006fe:	e7df      	b.n	80006c0 <__udivmoddi4+0x260>
 8000700:	4608      	mov	r0, r1
 8000702:	e7d2      	b.n	80006aa <__udivmoddi4+0x24a>
 8000704:	4660      	mov	r0, ip
 8000706:	e78d      	b.n	8000624 <__udivmoddi4+0x1c4>
 8000708:	4681      	mov	r9, r0
 800070a:	e7b9      	b.n	8000680 <__udivmoddi4+0x220>
 800070c:	4666      	mov	r6, ip
 800070e:	e775      	b.n	80005fc <__udivmoddi4+0x19c>
 8000710:	4630      	mov	r0, r6
 8000712:	e74a      	b.n	80005aa <__udivmoddi4+0x14a>
 8000714:	f1ac 0c02 	sub.w	ip, ip, #2
 8000718:	4439      	add	r1, r7
 800071a:	e713      	b.n	8000544 <__udivmoddi4+0xe4>
 800071c:	3802      	subs	r0, #2
 800071e:	443c      	add	r4, r7
 8000720:	e724      	b.n	800056c <__udivmoddi4+0x10c>
 8000722:	bf00      	nop

08000724 <__aeabi_idiv0>:
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop

08000728 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800072e:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <SCB_EnableDCache+0x84>)
 8000730:	2200      	movs	r2, #0
 8000732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000736:	f3bf 8f4f 	dsb	sy
}
 800073a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800073c:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <SCB_EnableDCache+0x84>)
 800073e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000742:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	0b5b      	lsrs	r3, r3, #13
 8000748:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800074c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	08db      	lsrs	r3, r3, #3
 8000752:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000756:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	015a      	lsls	r2, r3, #5
 800075c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000760:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000762:	68ba      	ldr	r2, [r7, #8]
 8000764:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000766:	4911      	ldr	r1, [pc, #68]	; (80007ac <SCB_EnableDCache+0x84>)
 8000768:	4313      	orrs	r3, r2
 800076a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	1e5a      	subs	r2, r3, #1
 8000772:	60ba      	str	r2, [r7, #8]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d1ef      	bne.n	8000758 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	1e5a      	subs	r2, r3, #1
 800077c:	60fa      	str	r2, [r7, #12]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d1e5      	bne.n	800074e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000782:	f3bf 8f4f 	dsb	sy
}
 8000786:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000788:	4b08      	ldr	r3, [pc, #32]	; (80007ac <SCB_EnableDCache+0x84>)
 800078a:	695b      	ldr	r3, [r3, #20]
 800078c:	4a07      	ldr	r2, [pc, #28]	; (80007ac <SCB_EnableDCache+0x84>)
 800078e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000792:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000794:	f3bf 8f4f 	dsb	sy
}
 8000798:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800079a:	f3bf 8f6f 	isb	sy
}
 800079e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80007a0:	bf00      	nop
 80007a2:	3714      	adds	r7, #20
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	e000ed00 	.word	0xe000ed00

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80007b4:	f7ff ffb8 	bl	8000728 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b8:	f000 feac 	bl	8001514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007bc:	f000 f822 	bl	8000804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c0:	f000 f964 	bl	8000a8c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007c4:	f000 f8de 	bl	8000984 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007c8:	f000 f92e 	bl	8000a28 <MX_USB_OTG_FS_PCD_Init>
 // MX_MBEDTLS_Init(); //Guru
  /* USER CODE BEGIN 2 */
  MX_LWIP_Init();
 80007cc:	f007 fb5c 	bl	8007e88 <MX_LWIP_Init>
  /* USER CODE END 2 */

  ptpd_init();
 80007d0:	f01d fd5e 	bl	801e290 <ptpd_init>
  ptpd_task();
 80007d4:	f01d fd40 	bl	801e258 <ptpd_task>
  ptpd_alert();
 80007d8:	f01d fd52 	bl	801e280 <ptpd_alert>

  /* Init scheduler */
  osKernelInitialize();
 80007dc:	f008 f854 	bl	8008888 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007e0:	4a05      	ldr	r2, [pc, #20]	; (80007f8 <main+0x48>)
 80007e2:	2100      	movs	r1, #0
 80007e4:	4805      	ldr	r0, [pc, #20]	; (80007fc <main+0x4c>)
 80007e6:	f008 f8e1 	bl	80089ac <osThreadNew>
 80007ea:	4603      	mov	r3, r0
 80007ec:	4a04      	ldr	r2, [pc, #16]	; (8000800 <main+0x50>)
 80007ee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80007f0:	f008 f87e 	bl	80088f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <main+0x44>
 80007f6:	bf00      	nop
 80007f8:	080269cc 	.word	0x080269cc
 80007fc:	08000c45 	.word	0x08000c45
 8000800:	200069a8 	.word	0x200069a8

08000804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b0cc      	sub	sp, #304	; 0x130
 8000808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800080e:	224c      	movs	r2, #76	; 0x4c
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f01f fd30 	bl	8020278 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000818:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800081c:	2220      	movs	r2, #32
 800081e:	2100      	movs	r1, #0
 8000820:	4618      	mov	r0, r3
 8000822:	f01f fd29 	bl	8020278 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000826:	f107 0308 	add.w	r3, r7, #8
 800082a:	4618      	mov	r0, r3
 800082c:	23bc      	movs	r3, #188	; 0xbc
 800082e:	461a      	mov	r2, r3
 8000830:	2100      	movs	r1, #0
 8000832:	f01f fd21 	bl	8020278 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000836:	2002      	movs	r0, #2
 8000838:	f003 f996 	bl	8003b68 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	4b4d      	ldr	r3, [pc, #308]	; (8000978 <SystemClock_Config+0x174>)
 8000844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000846:	4a4c      	ldr	r2, [pc, #304]	; (8000978 <SystemClock_Config+0x174>)
 8000848:	f023 0301 	bic.w	r3, r3, #1
 800084c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800084e:	4b4a      	ldr	r3, [pc, #296]	; (8000978 <SystemClock_Config+0x174>)
 8000850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000852:	f003 0201 	and.w	r2, r3, #1
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	4b48      	ldr	r3, [pc, #288]	; (800097c <SystemClock_Config+0x178>)
 800085c:	699b      	ldr	r3, [r3, #24]
 800085e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000862:	4a46      	ldr	r2, [pc, #280]	; (800097c <SystemClock_Config+0x178>)
 8000864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000868:	6193      	str	r3, [r2, #24]
 800086a:	4b44      	ldr	r3, [pc, #272]	; (800097c <SystemClock_Config+0x178>)
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800087a:	bf00      	nop
 800087c:	4b3f      	ldr	r3, [pc, #252]	; (800097c <SystemClock_Config+0x178>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000884:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000888:	d1f8      	bne.n	800087c <SystemClock_Config+0x78>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800088a:	2303      	movs	r3, #3
 800088c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000890:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000894:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000898:	2301      	movs	r3, #1
 800089a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800089e:	2340      	movs	r3, #64	; 0x40
 80008a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a4:	2302      	movs	r3, #2
 80008a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008aa:	2302      	movs	r3, #2
 80008ac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008b0:	2301      	movs	r3, #1
 80008b2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 80008b6:	2318      	movs	r3, #24
 80008b8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008bc:	2302      	movs	r3, #2
 80008be:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008c2:	2304      	movs	r3, #4
 80008c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008c8:	2302      	movs	r3, #2
 80008ca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008ce:	230c      	movs	r3, #12
 80008d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008d4:	2300      	movs	r3, #0
 80008d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80008e4:	4618      	mov	r0, r3
 80008e6:	f003 f989 	bl	8003bfc <HAL_RCC_OscConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80008f0:	f000 f9ca 	bl	8000c88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f4:	233f      	movs	r3, #63	; 0x3f
 80008f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008fa:	2300      	movs	r3, #0
 80008fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000900:	2300      	movs	r3, #0
 8000902:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800090c:	2300      	movs	r3, #0
 800090e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800091e:	2300      	movs	r3, #0
 8000920:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000924:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f003 fd76 	bl	800441c <HAL_RCC_ClockConfig>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <SystemClock_Config+0x136>
  {
    Error_Handler();
 8000936:	f000 f9a7 	bl	8000c88 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 800093a:	f107 0308 	add.w	r3, r7, #8
 800093e:	4a10      	ldr	r2, [pc, #64]	; (8000980 <SystemClock_Config+0x17c>)
 8000940:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000942:	f107 0308 	add.w	r3, r7, #8
 8000946:	2200      	movs	r2, #0
 8000948:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800094a:	f107 0308 	add.w	r3, r7, #8
 800094e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000952:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000956:	f107 0308 	add.w	r3, r7, #8
 800095a:	4618      	mov	r0, r3
 800095c:	f004 f92c 	bl	8004bb8 <HAL_RCCEx_PeriphCLKConfig>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <SystemClock_Config+0x166>
  {
    Error_Handler();
 8000966:	f000 f98f 	bl	8000c88 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 800096a:	f003 f937 	bl	8003bdc <HAL_PWREx_EnableUSBVoltageDetector>
}
 800096e:	bf00      	nop
 8000970:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	58000400 	.word	0x58000400
 800097c:	58024800 	.word	0x58024800
 8000980:	00040002 	.word	0x00040002

08000984 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000988:	4b24      	ldr	r3, [pc, #144]	; (8000a1c <MX_USART3_UART_Init+0x98>)
 800098a:	4a25      	ldr	r2, [pc, #148]	; (8000a20 <MX_USART3_UART_Init+0x9c>)
 800098c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800098e:	4b23      	ldr	r3, [pc, #140]	; (8000a1c <MX_USART3_UART_Init+0x98>)
 8000990:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000994:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000996:	4b21      	ldr	r3, [pc, #132]	; (8000a1c <MX_USART3_UART_Init+0x98>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800099c:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <MX_USART3_UART_Init+0x98>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009a2:	4b1e      	ldr	r3, [pc, #120]	; (8000a1c <MX_USART3_UART_Init+0x98>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009a8:	4b1c      	ldr	r3, [pc, #112]	; (8000a1c <MX_USART3_UART_Init+0x98>)
 80009aa:	220c      	movs	r2, #12
 80009ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ae:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <MX_USART3_UART_Init+0x98>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b4:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <MX_USART3_UART_Init+0x98>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ba:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <MX_USART3_UART_Init+0x98>)
 80009bc:	2200      	movs	r2, #0
 80009be:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009c0:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <MX_USART3_UART_Init+0x98>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <MX_USART3_UART_Init+0x98>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009cc:	4813      	ldr	r0, [pc, #76]	; (8000a1c <MX_USART3_UART_Init+0x98>)
 80009ce:	f005 fedd 	bl	800678c <HAL_UART_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009d8:	f000 f956 	bl	8000c88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009dc:	2100      	movs	r1, #0
 80009de:	480f      	ldr	r0, [pc, #60]	; (8000a1c <MX_USART3_UART_Init+0x98>)
 80009e0:	f006 fec3 	bl	800776a <HAL_UARTEx_SetTxFifoThreshold>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009ea:	f000 f94d 	bl	8000c88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ee:	2100      	movs	r1, #0
 80009f0:	480a      	ldr	r0, [pc, #40]	; (8000a1c <MX_USART3_UART_Init+0x98>)
 80009f2:	f006 fef8 	bl	80077e6 <HAL_UARTEx_SetRxFifoThreshold>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009fc:	f000 f944 	bl	8000c88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a00:	4806      	ldr	r0, [pc, #24]	; (8000a1c <MX_USART3_UART_Init+0x98>)
 8000a02:	f006 fe79 	bl	80076f8 <HAL_UARTEx_DisableFifoMode>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a0c:	f000 f93c 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  printf ("PTP Timesynchronization application\r\n");
 8000a10:	4804      	ldr	r0, [pc, #16]	; (8000a24 <MX_USART3_UART_Init+0xa0>)
 8000a12:	f01f fd7f 	bl	8020514 <puts>
  /* USER CODE END USART3_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200069ac 	.word	0x200069ac
 8000a20:	40004800 	.word	0x40004800
 8000a24:	08021478 	.word	0x08021478

08000a28 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a2c:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a2e:	4a16      	ldr	r2, [pc, #88]	; (8000a88 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000a30:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000a32:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a34:	2209      	movs	r2, #9
 8000a36:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a3a:	2202      	movs	r2, #2
 8000a3c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a3e:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a46:	2202      	movs	r2, #2
 8000a48:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a6e:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a70:	f002 ff32 	bl	80038d8 <HAL_PCD_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000a7a:	f000 f905 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20006a38 	.word	0x20006a38
 8000a88:	40080000 	.word	0x40080000

08000a8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08c      	sub	sp, #48	; 0x30
 8000a90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a92:	f107 031c 	add.w	r3, r7, #28
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
 8000aa0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa2:	4b61      	ldr	r3, [pc, #388]	; (8000c28 <MX_GPIO_Init+0x19c>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa8:	4a5f      	ldr	r2, [pc, #380]	; (8000c28 <MX_GPIO_Init+0x19c>)
 8000aaa:	f043 0304 	orr.w	r3, r3, #4
 8000aae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab2:	4b5d      	ldr	r3, [pc, #372]	; (8000c28 <MX_GPIO_Init+0x19c>)
 8000ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab8:	f003 0304 	and.w	r3, r3, #4
 8000abc:	61bb      	str	r3, [r7, #24]
 8000abe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ac0:	4b59      	ldr	r3, [pc, #356]	; (8000c28 <MX_GPIO_Init+0x19c>)
 8000ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac6:	4a58      	ldr	r2, [pc, #352]	; (8000c28 <MX_GPIO_Init+0x19c>)
 8000ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000acc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad0:	4b55      	ldr	r3, [pc, #340]	; (8000c28 <MX_GPIO_Init+0x19c>)
 8000ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	4b52      	ldr	r3, [pc, #328]	; (8000c28 <MX_GPIO_Init+0x19c>)
 8000ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae4:	4a50      	ldr	r2, [pc, #320]	; (8000c28 <MX_GPIO_Init+0x19c>)
 8000ae6:	f043 0301 	orr.w	r3, r3, #1
 8000aea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aee:	4b4e      	ldr	r3, [pc, #312]	; (8000c28 <MX_GPIO_Init+0x19c>)
 8000af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	613b      	str	r3, [r7, #16]
 8000afa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afc:	4b4a      	ldr	r3, [pc, #296]	; (8000c28 <MX_GPIO_Init+0x19c>)
 8000afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b02:	4a49      	ldr	r2, [pc, #292]	; (8000c28 <MX_GPIO_Init+0x19c>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b0c:	4b46      	ldr	r3, [pc, #280]	; (8000c28 <MX_GPIO_Init+0x19c>)
 8000b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b1a:	4b43      	ldr	r3, [pc, #268]	; (8000c28 <MX_GPIO_Init+0x19c>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b20:	4a41      	ldr	r2, [pc, #260]	; (8000c28 <MX_GPIO_Init+0x19c>)
 8000b22:	f043 0308 	orr.w	r3, r3, #8
 8000b26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b2a:	4b3f      	ldr	r3, [pc, #252]	; (8000c28 <MX_GPIO_Init+0x19c>)
 8000b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b30:	f003 0308 	and.w	r3, r3, #8
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b38:	4b3b      	ldr	r3, [pc, #236]	; (8000c28 <MX_GPIO_Init+0x19c>)
 8000b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3e:	4a3a      	ldr	r2, [pc, #232]	; (8000c28 <MX_GPIO_Init+0x19c>)
 8000b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b48:	4b37      	ldr	r3, [pc, #220]	; (8000c28 <MX_GPIO_Init+0x19c>)
 8000b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b56:	4b34      	ldr	r3, [pc, #208]	; (8000c28 <MX_GPIO_Init+0x19c>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5c:	4a32      	ldr	r2, [pc, #200]	; (8000c28 <MX_GPIO_Init+0x19c>)
 8000b5e:	f043 0310 	orr.w	r3, r3, #16
 8000b62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b66:	4b30      	ldr	r3, [pc, #192]	; (8000c28 <MX_GPIO_Init+0x19c>)
 8000b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6c:	f003 0310 	and.w	r3, r3, #16
 8000b70:	603b      	str	r3, [r7, #0]
 8000b72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	f244 0101 	movw	r1, #16385	; 0x4001
 8000b7a:	482c      	ldr	r0, [pc, #176]	; (8000c2c <MX_GPIO_Init+0x1a0>)
 8000b7c:	f002 fe78 	bl	8003870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b86:	482a      	ldr	r0, [pc, #168]	; (8000c30 <MX_GPIO_Init+0x1a4>)
 8000b88:	f002 fe72 	bl	8003870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2102      	movs	r1, #2
 8000b90:	4828      	ldr	r0, [pc, #160]	; (8000c34 <MX_GPIO_Init+0x1a8>)
 8000b92:	f002 fe6d 	bl	8003870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 031c 	add.w	r3, r7, #28
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4823      	ldr	r0, [pc, #140]	; (8000c38 <MX_GPIO_Init+0x1ac>)
 8000bac:	f002 fcb0 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000bb0:	f244 0301 	movw	r3, #16385	; 0x4001
 8000bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc2:	f107 031c 	add.w	r3, r7, #28
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4818      	ldr	r0, [pc, #96]	; (8000c2c <MX_GPIO_Init+0x1a0>)
 8000bca:	f002 fca1 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000bce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000be0:	f107 031c 	add.w	r3, r7, #28
 8000be4:	4619      	mov	r1, r3
 8000be6:	4812      	ldr	r0, [pc, #72]	; (8000c30 <MX_GPIO_Init+0x1a4>)
 8000be8:	f002 fc92 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000bec:	2380      	movs	r3, #128	; 0x80
 8000bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <MX_GPIO_Init+0x1b0>)
 8000bf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000bf8:	f107 031c 	add.w	r3, r7, #28
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4810      	ldr	r0, [pc, #64]	; (8000c40 <MX_GPIO_Init+0x1b4>)
 8000c00:	f002 fc86 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c04:	2302      	movs	r3, #2
 8000c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4806      	ldr	r0, [pc, #24]	; (8000c34 <MX_GPIO_Init+0x1a8>)
 8000c1c:	f002 fc78 	bl	8003510 <HAL_GPIO_Init>

}
 8000c20:	bf00      	nop
 8000c22:	3730      	adds	r7, #48	; 0x30
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	58024400 	.word	0x58024400
 8000c2c:	58020400 	.word	0x58020400
 8000c30:	58020c00 	.word	0x58020c00
 8000c34:	58021000 	.word	0x58021000
 8000c38:	58020800 	.word	0x58020800
 8000c3c:	11110000 	.word	0x11110000
 8000c40:	58021800 	.word	0x58021800

08000c44 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  //MX_LWIP_Init();
  /* Infinite loop */

  for(;;)
  {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000c4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c50:	4803      	ldr	r0, [pc, #12]	; (8000c60 <StartDefaultTask+0x1c>)
 8000c52:	f002 fe26 	bl	80038a2 <HAL_GPIO_TogglePin>
	  osDelay(250);
 8000c56:	20fa      	movs	r0, #250	; 0xfa
 8000c58:	f007 ff4e 	bl	8008af8 <osDelay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000c5c:	e7f6      	b.n	8000c4c <StartDefaultTask+0x8>
 8000c5e:	bf00      	nop
 8000c60:	58020400 	.word	0x58020400

08000c64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a04      	ldr	r2, [pc, #16]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d101      	bne.n	8000c7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c76:	f000 fc89 	bl	800158c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40010000 	.word	0x40010000

08000c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
	...

08000c98 <__io_putchar>:

int __io_putchar (int ch) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hstatus;
  hstatus = HAL_UART_Transmit(&huart3, &ch, 1, HAL_MAX_DELAY);
 8000ca0:	1d39      	adds	r1, r7, #4
 8000ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	4807      	ldr	r0, [pc, #28]	; (8000cc8 <__io_putchar+0x30>)
 8000caa:	f005 fdbf 	bl	800682c <HAL_UART_Transmit>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	73fb      	strb	r3, [r7, #15]
  if (hstatus == HAL_OK)
 8000cb2:	7bfb      	ldrb	r3, [r7, #15]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d101      	bne.n	8000cbc <__io_putchar+0x24>
    return 1;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e001      	b.n	8000cc0 <__io_putchar+0x28>
  else
    return -1;
 8000cbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3710      	adds	r7, #16
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	200069ac 	.word	0x200069ac

08000ccc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd2:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <HAL_MspInit+0x30>)
 8000cd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cd8:	4a08      	ldr	r2, [pc, #32]	; (8000cfc <HAL_MspInit+0x30>)
 8000cda:	f043 0302 	orr.w	r3, r3, #2
 8000cde:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_MspInit+0x30>)
 8000ce4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ce8:	f003 0302 	and.w	r3, r3, #2
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	58024400 	.word	0x58024400

08000d00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	; 0x28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a1a      	ldr	r2, [pc, #104]	; (8000d88 <HAL_UART_MspInit+0x88>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d12e      	bne.n	8000d80 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d22:	4b1a      	ldr	r3, [pc, #104]	; (8000d8c <HAL_UART_MspInit+0x8c>)
 8000d24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d28:	4a18      	ldr	r2, [pc, #96]	; (8000d8c <HAL_UART_MspInit+0x8c>)
 8000d2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d2e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d32:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <HAL_UART_MspInit+0x8c>)
 8000d34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d3c:	613b      	str	r3, [r7, #16]
 8000d3e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_UART_MspInit+0x8c>)
 8000d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d46:	4a11      	ldr	r2, [pc, #68]	; (8000d8c <HAL_UART_MspInit+0x8c>)
 8000d48:	f043 0308 	orr.w	r3, r3, #8
 8000d4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d50:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <HAL_UART_MspInit+0x8c>)
 8000d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d56:	f003 0308 	and.w	r3, r3, #8
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d64:	2302      	movs	r3, #2
 8000d66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d70:	2307      	movs	r3, #7
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <HAL_UART_MspInit+0x90>)
 8000d7c:	f002 fbc8 	bl	8003510 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d80:	bf00      	nop
 8000d82:	3728      	adds	r7, #40	; 0x28
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40004800 	.word	0x40004800
 8000d8c:	58024400 	.word	0x58024400
 8000d90:	58020c00 	.word	0x58020c00

08000d94 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	; 0x28
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a21      	ldr	r2, [pc, #132]	; (8000e38 <HAL_PCD_MspInit+0xa4>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d13b      	bne.n	8000e2e <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	4b21      	ldr	r3, [pc, #132]	; (8000e3c <HAL_PCD_MspInit+0xa8>)
 8000db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dbc:	4a1f      	ldr	r2, [pc, #124]	; (8000e3c <HAL_PCD_MspInit+0xa8>)
 8000dbe:	f043 0301 	orr.w	r3, r3, #1
 8000dc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dc6:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <HAL_PCD_MspInit+0xa8>)
 8000dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dcc:	f003 0301 	and.w	r3, r3, #1
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000dd4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000de6:	230a      	movs	r3, #10
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dea:	f107 0314 	add.w	r3, r7, #20
 8000dee:	4619      	mov	r1, r3
 8000df0:	4813      	ldr	r0, [pc, #76]	; (8000e40 <HAL_PCD_MspInit+0xac>)
 8000df2:	f002 fb8d 	bl	8003510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000df6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	4619      	mov	r1, r3
 8000e0a:	480d      	ldr	r0, [pc, #52]	; (8000e40 <HAL_PCD_MspInit+0xac>)
 8000e0c:	f002 fb80 	bl	8003510 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e10:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <HAL_PCD_MspInit+0xa8>)
 8000e12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e16:	4a09      	ldr	r2, [pc, #36]	; (8000e3c <HAL_PCD_MspInit+0xa8>)
 8000e18:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e1c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_PCD_MspInit+0xa8>)
 8000e22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e2e:	bf00      	nop
 8000e30:	3728      	adds	r7, #40	; 0x28
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40080000 	.word	0x40080000
 8000e3c:	58024400 	.word	0x58024400
 8000e40:	58020000 	.word	0x58020000

08000e44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08e      	sub	sp, #56	; 0x38
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000e54:	2200      	movs	r2, #0
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	2019      	movs	r0, #25
 8000e5a:	f000 fcb3 	bl	80017c4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000e5e:	2019      	movs	r0, #25
 8000e60:	f000 fcca 	bl	80017f8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e64:	4b20      	ldr	r3, [pc, #128]	; (8000ee8 <HAL_InitTick+0xa4>)
 8000e66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e6a:	4a1f      	ldr	r2, [pc, #124]	; (8000ee8 <HAL_InitTick+0xa4>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000e74:	4b1c      	ldr	r3, [pc, #112]	; (8000ee8 <HAL_InitTick+0xa4>)
 8000e76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e82:	f107 020c 	add.w	r2, r7, #12
 8000e86:	f107 0310 	add.w	r3, r7, #16
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f003 fe51 	bl	8004b34 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e92:	f003 fe39 	bl	8004b08 <HAL_RCC_GetPCLK2Freq>
 8000e96:	6378      	str	r0, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e9a:	4a14      	ldr	r2, [pc, #80]	; (8000eec <HAL_InitTick+0xa8>)
 8000e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea0:	0c9b      	lsrs	r3, r3, #18
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ea6:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <HAL_InitTick+0xac>)
 8000ea8:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <HAL_InitTick+0xb0>)
 8000eaa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000eac:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <HAL_InitTick+0xac>)
 8000eae:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000eb2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000eb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ef0 <HAL_InitTick+0xac>)
 8000eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eb8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000eba:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <HAL_InitTick+0xac>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <HAL_InitTick+0xac>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000ec6:	480a      	ldr	r0, [pc, #40]	; (8000ef0 <HAL_InitTick+0xac>)
 8000ec8:	f005 f9c8 	bl	800625c <HAL_TIM_Base_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d104      	bne.n	8000edc <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ed2:	4807      	ldr	r0, [pc, #28]	; (8000ef0 <HAL_InitTick+0xac>)
 8000ed4:	f005 fa24 	bl	8006320 <HAL_TIM_Base_Start_IT>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	e000      	b.n	8000ede <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8000edc:	2301      	movs	r3, #1
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3738      	adds	r7, #56	; 0x38
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	58024400 	.word	0x58024400
 8000eec:	431bde83 	.word	0x431bde83
 8000ef0:	20006e40 	.word	0x20006e40
 8000ef4:	40010000 	.word	0x40010000

08000ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <HardFault_Handler+0x4>

08000f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <MemManage_Handler+0x4>

08000f12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <BusFault_Handler+0x4>

08000f18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <UsageFault_Handler+0x4>

08000f1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <ETH_IRQHandler>:
  * @brief  This function handles Ethernet interrupt request.
  * @param  None
  * @retval None
  */
void ETH_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  HAL_ETH_IRQHandler(&heth);
 8000f30:	4802      	ldr	r0, [pc, #8]	; (8000f3c <ETH_IRQHandler+0x10>)
 8000f32:	f001 f949 	bl	80021c8 <HAL_ETH_IRQHandler>
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20006fec 	.word	0x20006fec

08000f40 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f44:	4802      	ldr	r0, [pc, #8]	; (8000f50 <TIM1_UP_IRQHandler+0x10>)
 8000f46:	f005 fa21 	bl	800638c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20006e40 	.word	0x20006e40

08000f54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
	return 1;
 8000f58:	2301      	movs	r3, #1
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <_kill>:

int _kill(int pid, int sig)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f6e:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <_kill+0x20>)
 8000f70:	2216      	movs	r2, #22
 8000f72:	601a      	str	r2, [r3, #0]
	return -1;
 8000f74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	2000a564 	.word	0x2000a564

08000f88 <_exit>:

void _exit (int status)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f90:	f04f 31ff 	mov.w	r1, #4294967295
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff ffe5 	bl	8000f64 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f9a:	e7fe      	b.n	8000f9a <_exit+0x12>

08000f9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
 8000fac:	e00a      	b.n	8000fc4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fae:	f3af 8000 	nop.w
 8000fb2:	4601      	mov	r1, r0
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	1c5a      	adds	r2, r3, #1
 8000fb8:	60ba      	str	r2, [r7, #8]
 8000fba:	b2ca      	uxtb	r2, r1
 8000fbc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	697a      	ldr	r2, [r7, #20]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	dbf0      	blt.n	8000fae <_read+0x12>
	}

return len;
 8000fcc:	687b      	ldr	r3, [r7, #4]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b086      	sub	sp, #24
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	60f8      	str	r0, [r7, #12]
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
 8000fe6:	e009      	b.n	8000ffc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	1c5a      	adds	r2, r3, #1
 8000fec:	60ba      	str	r2, [r7, #8]
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fe51 	bl	8000c98 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	697a      	ldr	r2, [r7, #20]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	429a      	cmp	r2, r3
 8001002:	dbf1      	blt.n	8000fe8 <_write+0x12>
	}
	return len;
 8001004:	687b      	ldr	r3, [r7, #4]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <_close>:

int _close(int file)
{
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
	return -1;
 8001016:	f04f 33ff 	mov.w	r3, #4294967295
}
 800101a:	4618      	mov	r0, r3
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001036:	605a      	str	r2, [r3, #4]
	return 0;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <_isatty>:

int _isatty(int file)
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
	return 1;
 800104e:	2301      	movs	r3, #1
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
	return 0;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3714      	adds	r7, #20
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
	...

08001078 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001078:	b480      	push	{r7}
 800107a:	b087      	sub	sp, #28
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001080:	4a14      	ldr	r2, [pc, #80]	; (80010d4 <_sbrk+0x5c>)
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <_sbrk+0x60>)
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800108c:	4b13      	ldr	r3, [pc, #76]	; (80010dc <_sbrk+0x64>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d102      	bne.n	800109a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001094:	4b11      	ldr	r3, [pc, #68]	; (80010dc <_sbrk+0x64>)
 8001096:	4a12      	ldr	r2, [pc, #72]	; (80010e0 <_sbrk+0x68>)
 8001098:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800109a:	4b10      	ldr	r3, [pc, #64]	; (80010dc <_sbrk+0x64>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d205      	bcs.n	80010b4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80010a8:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <_sbrk+0x6c>)
 80010aa:	220c      	movs	r2, #12
 80010ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295
 80010b2:	e009      	b.n	80010c8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <_sbrk+0x64>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ba:	4b08      	ldr	r3, [pc, #32]	; (80010dc <_sbrk+0x64>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	4a06      	ldr	r2, [pc, #24]	; (80010dc <_sbrk+0x64>)
 80010c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010c6:	68fb      	ldr	r3, [r7, #12]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	371c      	adds	r7, #28
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	20020000 	.word	0x20020000
 80010d8:	00000400 	.word	0x00000400
 80010dc:	2000194c 	.word	0x2000194c
 80010e0:	2000abe0 	.word	0x2000abe0
 80010e4:	2000a564 	.word	0x2000a564

080010e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010ec:	4b39      	ldr	r3, [pc, #228]	; (80011d4 <SystemInit+0xec>)
 80010ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010f2:	4a38      	ldr	r2, [pc, #224]	; (80011d4 <SystemInit+0xec>)
 80010f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010fc:	4b36      	ldr	r3, [pc, #216]	; (80011d8 <SystemInit+0xf0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 030f 	and.w	r3, r3, #15
 8001104:	2b06      	cmp	r3, #6
 8001106:	d807      	bhi.n	8001118 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001108:	4b33      	ldr	r3, [pc, #204]	; (80011d8 <SystemInit+0xf0>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f023 030f 	bic.w	r3, r3, #15
 8001110:	4a31      	ldr	r2, [pc, #196]	; (80011d8 <SystemInit+0xf0>)
 8001112:	f043 0307 	orr.w	r3, r3, #7
 8001116:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001118:	4b30      	ldr	r3, [pc, #192]	; (80011dc <SystemInit+0xf4>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a2f      	ldr	r2, [pc, #188]	; (80011dc <SystemInit+0xf4>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001124:	4b2d      	ldr	r3, [pc, #180]	; (80011dc <SystemInit+0xf4>)
 8001126:	2200      	movs	r2, #0
 8001128:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800112a:	4b2c      	ldr	r3, [pc, #176]	; (80011dc <SystemInit+0xf4>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	492b      	ldr	r1, [pc, #172]	; (80011dc <SystemInit+0xf4>)
 8001130:	4b2b      	ldr	r3, [pc, #172]	; (80011e0 <SystemInit+0xf8>)
 8001132:	4013      	ands	r3, r2
 8001134:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001136:	4b28      	ldr	r3, [pc, #160]	; (80011d8 <SystemInit+0xf0>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0308 	and.w	r3, r3, #8
 800113e:	2b00      	cmp	r3, #0
 8001140:	d007      	beq.n	8001152 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001142:	4b25      	ldr	r3, [pc, #148]	; (80011d8 <SystemInit+0xf0>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f023 030f 	bic.w	r3, r3, #15
 800114a:	4a23      	ldr	r2, [pc, #140]	; (80011d8 <SystemInit+0xf0>)
 800114c:	f043 0307 	orr.w	r3, r3, #7
 8001150:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001152:	4b22      	ldr	r3, [pc, #136]	; (80011dc <SystemInit+0xf4>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001158:	4b20      	ldr	r3, [pc, #128]	; (80011dc <SystemInit+0xf4>)
 800115a:	2200      	movs	r2, #0
 800115c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800115e:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <SystemInit+0xf4>)
 8001160:	2200      	movs	r2, #0
 8001162:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001164:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <SystemInit+0xf4>)
 8001166:	4a1f      	ldr	r2, [pc, #124]	; (80011e4 <SystemInit+0xfc>)
 8001168:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800116a:	4b1c      	ldr	r3, [pc, #112]	; (80011dc <SystemInit+0xf4>)
 800116c:	4a1e      	ldr	r2, [pc, #120]	; (80011e8 <SystemInit+0x100>)
 800116e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001170:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <SystemInit+0xf4>)
 8001172:	4a1e      	ldr	r2, [pc, #120]	; (80011ec <SystemInit+0x104>)
 8001174:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001176:	4b19      	ldr	r3, [pc, #100]	; (80011dc <SystemInit+0xf4>)
 8001178:	2200      	movs	r2, #0
 800117a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800117c:	4b17      	ldr	r3, [pc, #92]	; (80011dc <SystemInit+0xf4>)
 800117e:	4a1b      	ldr	r2, [pc, #108]	; (80011ec <SystemInit+0x104>)
 8001180:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001182:	4b16      	ldr	r3, [pc, #88]	; (80011dc <SystemInit+0xf4>)
 8001184:	2200      	movs	r2, #0
 8001186:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001188:	4b14      	ldr	r3, [pc, #80]	; (80011dc <SystemInit+0xf4>)
 800118a:	4a18      	ldr	r2, [pc, #96]	; (80011ec <SystemInit+0x104>)
 800118c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800118e:	4b13      	ldr	r3, [pc, #76]	; (80011dc <SystemInit+0xf4>)
 8001190:	2200      	movs	r2, #0
 8001192:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <SystemInit+0xf4>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a10      	ldr	r2, [pc, #64]	; (80011dc <SystemInit+0xf4>)
 800119a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800119e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011a0:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <SystemInit+0xf4>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80011a6:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <SystemInit+0x108>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <SystemInit+0x10c>)
 80011ac:	4013      	ands	r3, r2
 80011ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011b2:	d202      	bcs.n	80011ba <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80011b4:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <SystemInit+0x110>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <SystemInit+0x114>)
 80011bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80011c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011c2:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <SystemInit+0xec>)
 80011c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011c8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000ed00 	.word	0xe000ed00
 80011d8:	52002000 	.word	0x52002000
 80011dc:	58024400 	.word	0x58024400
 80011e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80011e4:	02020200 	.word	0x02020200
 80011e8:	01ff0000 	.word	0x01ff0000
 80011ec:	01010280 	.word	0x01010280
 80011f0:	5c001000 	.word	0x5c001000
 80011f4:	ffff0000 	.word	0xffff0000
 80011f8:	51008108 	.word	0x51008108
 80011fc:	52004000 	.word	0x52004000

08001200 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001200:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001238 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001204:	f7ff ff70 	bl	80010e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001208:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800120a:	e003      	b.n	8001214 <LoopCopyDataInit>

0800120c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800120c:	4b0b      	ldr	r3, [pc, #44]	; (800123c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800120e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001210:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001212:	3104      	adds	r1, #4

08001214 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001214:	480a      	ldr	r0, [pc, #40]	; (8001240 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001218:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800121a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800121c:	d3f6      	bcc.n	800120c <CopyDataInit>
  ldr  r2, =_sbss
 800121e:	4a0a      	ldr	r2, [pc, #40]	; (8001248 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001220:	e002      	b.n	8001228 <LoopFillZerobss>

08001222 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001222:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001224:	f842 3b04 	str.w	r3, [r2], #4

08001228 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800122a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800122c:	d3f9      	bcc.n	8001222 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800122e:	f01e ffdb 	bl	80201e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001232:	f7ff fabd 	bl	80007b0 <main>
  bx  lr    
 8001236:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001238:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800123c:	08026e68 	.word	0x08026e68
  ldr  r0, =_sdata
 8001240:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001244:	2000009c 	.word	0x2000009c
  ldr  r2, =_sbss
 8001248:	20001930 	.word	0x20001930
  ldr  r3, = _ebss
 800124c:	2000abdc 	.word	0x2000abdc

08001250 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001250:	e7fe      	b.n	8001250 <ADC3_IRQHandler>

08001252 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001252:	b480      	push	{r7}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
 800125a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d00b      	beq.n	800127a <LAN8742_RegisterBusIO+0x28>
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d007      	beq.n	800127a <LAN8742_RegisterBusIO+0x28>
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <LAN8742_RegisterBusIO+0x28>
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d102      	bne.n	8001280 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
 800127e:	e014      	b.n	80012aa <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	68da      	ldr	r2, [r3, #12]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	691a      	ldr	r2, [r3, #16]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b086      	sub	sp, #24
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	2300      	movs	r3, #0
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d17c      	bne.n	80013d0 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d002      	beq.n	80012e4 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2220      	movs	r2, #32
 80012e8:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
 80012ee:	e01c      	b.n	800132a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	f107 0208 	add.w	r2, r7, #8
 80012f8:	2112      	movs	r1, #18
 80012fa:	6978      	ldr	r0, [r7, #20]
 80012fc:	4798      	blx	r3
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	da03      	bge.n	800130c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001304:	f06f 0304 	mvn.w	r3, #4
 8001308:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800130a:	e00b      	b.n	8001324 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	f003 031f 	and.w	r3, r3, #31
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	429a      	cmp	r2, r3
 8001316:	d105      	bne.n	8001324 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	697a      	ldr	r2, [r7, #20]
 800131c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800131e:	2300      	movs	r3, #0
 8001320:	613b      	str	r3, [r7, #16]
         break;
 8001322:	e005      	b.n	8001330 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	3301      	adds	r3, #1
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	2b1f      	cmp	r3, #31
 800132e:	d9df      	bls.n	80012f0 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b1f      	cmp	r3, #31
 8001336:	d902      	bls.n	800133e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001338:	f06f 0302 	mvn.w	r3, #2
 800133c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d145      	bne.n	80013d0 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	6810      	ldr	r0, [r2, #0]
 800134c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001350:	2100      	movs	r1, #0
 8001352:	4798      	blx	r3
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	db37      	blt.n	80013ca <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	6810      	ldr	r0, [r2, #0]
 8001362:	f107 0208 	add.w	r2, r7, #8
 8001366:	2100      	movs	r1, #0
 8001368:	4798      	blx	r3
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	db28      	blt.n	80013c2 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	4798      	blx	r3
 8001376:	4603      	mov	r3, r0
 8001378:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800137a:	e01c      	b.n	80013b6 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	4798      	blx	r3
 8001382:	4603      	mov	r3, r0
 8001384:	461a      	mov	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800138e:	d80e      	bhi.n	80013ae <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	695b      	ldr	r3, [r3, #20]
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	6810      	ldr	r0, [r2, #0]
 8001398:	f107 0208 	add.w	r2, r7, #8
 800139c:	2100      	movs	r1, #0
 800139e:	4798      	blx	r3
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	da07      	bge.n	80013b6 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80013a6:	f06f 0304 	mvn.w	r3, #4
 80013aa:	613b      	str	r3, [r7, #16]
                 break;
 80013ac:	e010      	b.n	80013d0 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80013ae:	f06f 0301 	mvn.w	r3, #1
 80013b2:	613b      	str	r3, [r7, #16]
               break;
 80013b4:	e00c      	b.n	80013d0 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1dd      	bne.n	800137c <LAN8742_Init+0xc6>
 80013c0:	e006      	b.n	80013d0 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80013c2:	f06f 0304 	mvn.w	r3, #4
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	e002      	b.n	80013d0 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80013ca:	f06f 0303 	mvn.w	r3, #3
 80013ce:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d112      	bne.n	80013fc <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	4798      	blx	r3
 80013dc:	4603      	mov	r3, r0
 80013de:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80013e0:	bf00      	nop
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	4798      	blx	r3
 80013e8:	4603      	mov	r3, r0
 80013ea:	461a      	mov	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80013f4:	d9f5      	bls.n	80013e2 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2201      	movs	r2, #1
 80013fa:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80013fc:	693b      	ldr	r3, [r7, #16]
 }
 80013fe:	4618      	mov	r0, r3
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b084      	sub	sp, #16
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	6810      	ldr	r0, [r2, #0]
 800141a:	f107 020c 	add.w	r2, r7, #12
 800141e:	2101      	movs	r1, #1
 8001420:	4798      	blx	r3
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	da02      	bge.n	800142e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001428:	f06f 0304 	mvn.w	r3, #4
 800142c:	e06e      	b.n	800150c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	6810      	ldr	r0, [r2, #0]
 8001436:	f107 020c 	add.w	r2, r7, #12
 800143a:	2101      	movs	r1, #1
 800143c:	4798      	blx	r3
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	da02      	bge.n	800144a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001444:	f06f 0304 	mvn.w	r3, #4
 8001448:	e060      	b.n	800150c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	f003 0304 	and.w	r3, r3, #4
 8001450:	2b00      	cmp	r3, #0
 8001452:	d101      	bne.n	8001458 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001454:	2301      	movs	r3, #1
 8001456:	e059      	b.n	800150c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	6810      	ldr	r0, [r2, #0]
 8001460:	f107 020c 	add.w	r2, r7, #12
 8001464:	2100      	movs	r1, #0
 8001466:	4798      	blx	r3
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	da02      	bge.n	8001474 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800146e:	f06f 0304 	mvn.w	r3, #4
 8001472:	e04b      	b.n	800150c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d11b      	bne.n	80014b6 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d006      	beq.n	8001496 <LAN8742_GetLinkState+0x90>
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001492:	2302      	movs	r3, #2
 8001494:	e03a      	b.n	800150c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e033      	b.n	800150c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80014ae:	2304      	movs	r3, #4
 80014b0:	e02c      	b.n	800150c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80014b2:	2305      	movs	r3, #5
 80014b4:	e02a      	b.n	800150c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	6810      	ldr	r0, [r2, #0]
 80014be:	f107 020c 	add.w	r2, r7, #12
 80014c2:	211f      	movs	r1, #31
 80014c4:	4798      	blx	r3
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	da02      	bge.n	80014d2 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80014cc:	f06f 0304 	mvn.w	r3, #4
 80014d0:	e01c      	b.n	800150c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d101      	bne.n	80014e0 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80014dc:	2306      	movs	r3, #6
 80014de:	e015      	b.n	800150c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f003 031c 	and.w	r3, r3, #28
 80014e6:	2b18      	cmp	r3, #24
 80014e8:	d101      	bne.n	80014ee <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80014ea:	2302      	movs	r3, #2
 80014ec:	e00e      	b.n	800150c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f003 031c 	and.w	r3, r3, #28
 80014f4:	2b08      	cmp	r3, #8
 80014f6:	d101      	bne.n	80014fc <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e007      	b.n	800150c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f003 031c 	and.w	r3, r3, #28
 8001502:	2b14      	cmp	r3, #20
 8001504:	d101      	bne.n	800150a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001506:	2304      	movs	r3, #4
 8001508:	e000      	b.n	800150c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800150a:	2305      	movs	r3, #5
    }				
  }
}
 800150c:	4618      	mov	r0, r3
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800151a:	2003      	movs	r0, #3
 800151c:	f000 f947 	bl	80017ae <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001520:	f003 f932 	bl	8004788 <HAL_RCC_GetSysClockFreq>
 8001524:	4602      	mov	r2, r0
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <HAL_Init+0x68>)
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	0a1b      	lsrs	r3, r3, #8
 800152c:	f003 030f 	and.w	r3, r3, #15
 8001530:	4913      	ldr	r1, [pc, #76]	; (8001580 <HAL_Init+0x6c>)
 8001532:	5ccb      	ldrb	r3, [r1, r3]
 8001534:	f003 031f 	and.w	r3, r3, #31
 8001538:	fa22 f303 	lsr.w	r3, r2, r3
 800153c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <HAL_Init+0x68>)
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	4a0e      	ldr	r2, [pc, #56]	; (8001580 <HAL_Init+0x6c>)
 8001548:	5cd3      	ldrb	r3, [r2, r3]
 800154a:	f003 031f 	and.w	r3, r3, #31
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	fa22 f303 	lsr.w	r3, r2, r3
 8001554:	4a0b      	ldr	r2, [pc, #44]	; (8001584 <HAL_Init+0x70>)
 8001556:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001558:	4a0b      	ldr	r2, [pc, #44]	; (8001588 <HAL_Init+0x74>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800155e:	2000      	movs	r0, #0
 8001560:	f7ff fc70 	bl	8000e44 <HAL_InitTick>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e002      	b.n	8001574 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800156e:	f7ff fbad 	bl	8000ccc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	58024400 	.word	0x58024400
 8001580:	080269f0 	.word	0x080269f0
 8001584:	20000004 	.word	0x20000004
 8001588:	20000000 	.word	0x20000000

0800158c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <HAL_IncTick+0x20>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	461a      	mov	r2, r3
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <HAL_IncTick+0x24>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4413      	add	r3, r2
 800159c:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <HAL_IncTick+0x24>)
 800159e:	6013      	str	r3, [r2, #0]
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	2000000c 	.word	0x2000000c
 80015b0:	20006e8c 	.word	0x20006e8c

080015b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return uwTick;
 80015b8:	4b03      	ldr	r3, [pc, #12]	; (80015c8 <HAL_GetTick+0x14>)
 80015ba:	681b      	ldr	r3, [r3, #0]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	20006e8c 	.word	0x20006e8c

080015cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015d4:	f7ff ffee 	bl	80015b4 <HAL_GetTick>
 80015d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e4:	d005      	beq.n	80015f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015e6:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <HAL_Delay+0x44>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	461a      	mov	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4413      	add	r3, r2
 80015f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015f2:	bf00      	nop
 80015f4:	f7ff ffde 	bl	80015b4 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	429a      	cmp	r2, r3
 8001602:	d8f7      	bhi.n	80015f4 <HAL_Delay+0x28>
  {
  }
}
 8001604:	bf00      	nop
 8001606:	bf00      	nop
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	2000000c 	.word	0x2000000c

08001614 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001618:	4b03      	ldr	r3, [pc, #12]	; (8001628 <HAL_GetREVID+0x14>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	0c1b      	lsrs	r3, r3, #16
}
 800161e:	4618      	mov	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	5c001000 	.word	0x5c001000

0800162c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800163c:	4904      	ldr	r1, [pc, #16]	; (8001650 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4313      	orrs	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	58000400 	.word	0x58000400

08001654 <__NVIC_SetPriorityGrouping>:
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001664:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <__NVIC_SetPriorityGrouping+0x40>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800166a:	68ba      	ldr	r2, [r7, #8]
 800166c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001670:	4013      	ands	r3, r2
 8001672:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <__NVIC_SetPriorityGrouping+0x44>)
 800167e:	4313      	orrs	r3, r2
 8001680:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001682:	4a04      	ldr	r2, [pc, #16]	; (8001694 <__NVIC_SetPriorityGrouping+0x40>)
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	60d3      	str	r3, [r2, #12]
}
 8001688:	bf00      	nop
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000ed00 	.word	0xe000ed00
 8001698:	05fa0000 	.word	0x05fa0000

0800169c <__NVIC_GetPriorityGrouping>:
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a0:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <__NVIC_GetPriorityGrouping+0x18>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	0a1b      	lsrs	r3, r3, #8
 80016a6:	f003 0307 	and.w	r3, r3, #7
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <__NVIC_EnableIRQ>:
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	db0b      	blt.n	80016e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ca:	88fb      	ldrh	r3, [r7, #6]
 80016cc:	f003 021f 	and.w	r2, r3, #31
 80016d0:	4907      	ldr	r1, [pc, #28]	; (80016f0 <__NVIC_EnableIRQ+0x38>)
 80016d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016d6:	095b      	lsrs	r3, r3, #5
 80016d8:	2001      	movs	r0, #1
 80016da:	fa00 f202 	lsl.w	r2, r0, r2
 80016de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	e000e100 	.word	0xe000e100

080016f4 <__NVIC_SetPriority>:
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	6039      	str	r1, [r7, #0]
 80016fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001700:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001704:	2b00      	cmp	r3, #0
 8001706:	db0a      	blt.n	800171e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	b2da      	uxtb	r2, r3
 800170c:	490c      	ldr	r1, [pc, #48]	; (8001740 <__NVIC_SetPriority+0x4c>)
 800170e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001712:	0112      	lsls	r2, r2, #4
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	440b      	add	r3, r1
 8001718:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800171c:	e00a      	b.n	8001734 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	b2da      	uxtb	r2, r3
 8001722:	4908      	ldr	r1, [pc, #32]	; (8001744 <__NVIC_SetPriority+0x50>)
 8001724:	88fb      	ldrh	r3, [r7, #6]
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	3b04      	subs	r3, #4
 800172c:	0112      	lsls	r2, r2, #4
 800172e:	b2d2      	uxtb	r2, r2
 8001730:	440b      	add	r3, r1
 8001732:	761a      	strb	r2, [r3, #24]
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	e000e100 	.word	0xe000e100
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <NVIC_EncodePriority>:
{
 8001748:	b480      	push	{r7}
 800174a:	b089      	sub	sp, #36	; 0x24
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	f1c3 0307 	rsb	r3, r3, #7
 8001762:	2b04      	cmp	r3, #4
 8001764:	bf28      	it	cs
 8001766:	2304      	movcs	r3, #4
 8001768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	3304      	adds	r3, #4
 800176e:	2b06      	cmp	r3, #6
 8001770:	d902      	bls.n	8001778 <NVIC_EncodePriority+0x30>
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	3b03      	subs	r3, #3
 8001776:	e000      	b.n	800177a <NVIC_EncodePriority+0x32>
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800177c:	f04f 32ff 	mov.w	r2, #4294967295
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43da      	mvns	r2, r3
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	401a      	ands	r2, r3
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001790:	f04f 31ff 	mov.w	r1, #4294967295
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	fa01 f303 	lsl.w	r3, r1, r3
 800179a:	43d9      	mvns	r1, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a0:	4313      	orrs	r3, r2
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3724      	adds	r7, #36	; 0x24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7ff ff4c 	bl	8001654 <__NVIC_SetPriorityGrouping>
}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
 80017d0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017d2:	f7ff ff63 	bl	800169c <__NVIC_GetPriorityGrouping>
 80017d6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	68b9      	ldr	r1, [r7, #8]
 80017dc:	6978      	ldr	r0, [r7, #20]
 80017de:	f7ff ffb3 	bl	8001748 <NVIC_EncodePriority>
 80017e2:	4602      	mov	r2, r0
 80017e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017e8:	4611      	mov	r1, r2
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff ff82 	bl	80016f4 <__NVIC_SetPriority>
}
 80017f0:	bf00      	nop
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001802:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff ff56 	bl	80016b8 <__NVIC_EnableIRQ>
}
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e0c6      	b.n	80019b4 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800182a:	2b00      	cmp	r3, #0
 800182c:	d102      	bne.n	8001834 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f006 fbd4 	bl	8007fdc <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2223      	movs	r2, #35	; 0x23
 8001838:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183a:	4b60      	ldr	r3, [pc, #384]	; (80019bc <HAL_ETH_Init+0x1a8>)
 800183c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001840:	4a5e      	ldr	r2, [pc, #376]	; (80019bc <HAL_ETH_Init+0x1a8>)
 8001842:	f043 0302 	orr.w	r3, r3, #2
 8001846:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800184a:	4b5c      	ldr	r3, [pc, #368]	; (80019bc <HAL_ETH_Init+0x1a8>)
 800184c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	7a1b      	ldrb	r3, [r3, #8]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d103      	bne.n	8001868 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001860:	2000      	movs	r0, #0
 8001862:	f7ff fee3 	bl	800162c <HAL_SYSCFG_ETHInterfaceSelect>
 8001866:	e003      	b.n	8001870 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001868:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800186c:	f7ff fede 	bl	800162c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f042 0201 	orr.w	r2, r2, #1
 8001882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001886:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001888:	f7ff fe94 	bl	80015b4 <HAL_GetTick>
 800188c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800188e:	e00f      	b.n	80018b0 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001890:	f7ff fe90 	bl	80015b4 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800189e:	d907      	bls.n	80018b0 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2204      	movs	r2, #4
 80018a4:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	22e0      	movs	r2, #224	; 0xe0
 80018aa:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e081      	b.n	80019b4 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1e6      	bne.n	8001890 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f001 fad4 	bl	8002e70 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80018c8:	f003 f8d8 	bl	8004a7c <HAL_RCC_GetHCLKFreq>
 80018cc:	4603      	mov	r3, r0
 80018ce:	4a3c      	ldr	r2, [pc, #240]	; (80019c0 <HAL_ETH_Init+0x1ac>)
 80018d0:	fba2 2303 	umull	r2, r3, r2, r3
 80018d4:	0c9a      	lsrs	r2, r3, #18
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	3a01      	subs	r2, #1
 80018dc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f001 fa27 	bl	8002d34 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80018fc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001900:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	f003 0303 	and.w	r3, r3, #3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d007      	beq.n	800191e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2201      	movs	r2, #1
 8001912:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	22e0      	movs	r2, #224	; 0xe0
 8001918:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e04a      	b.n	80019b4 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	f241 1308 	movw	r3, #4360	; 0x1108
 8001926:	4413      	add	r3, r2
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	4b26      	ldr	r3, [pc, #152]	; (80019c4 <HAL_ETH_Init+0x1b0>)
 800192c:	4013      	ands	r3, r2
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6952      	ldr	r2, [r2, #20]
 8001932:	0052      	lsls	r2, r2, #1
 8001934:	6879      	ldr	r1, [r7, #4]
 8001936:	6809      	ldr	r1, [r1, #0]
 8001938:	431a      	orrs	r2, r3
 800193a:	f241 1308 	movw	r3, #4360	; 0x1108
 800193e:	440b      	add	r3, r1
 8001940:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f001 faec 	bl	8002f20 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f001 fb30 	bl	8002fae <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	3305      	adds	r3, #5
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	021a      	lsls	r2, r3, #8
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	3304      	adds	r3, #4
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	4619      	mov	r1, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	3303      	adds	r3, #3
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	061a      	lsls	r2, r3, #24
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	3302      	adds	r3, #2
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	041b      	lsls	r3, r3, #16
 8001980:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	3301      	adds	r3, #1
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800198c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800199a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800199c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2210      	movs	r2, #16
 80019aa:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2210      	movs	r2, #16
 80019b0:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	58024400 	.word	0x58024400
 80019c0:	431bde83 	.word	0x431bde83
 80019c4:	ffff8001 	.word	0xffff8001

080019c8 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b087      	sub	sp, #28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
 80019d4:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	330a      	adds	r3, #10
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d002      	beq.n	80019f0 <HAL_ETH_DescAssignMemory+0x28>
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	2b03      	cmp	r3, #3
 80019ee:	d904      	bls.n	80019fa <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2201      	movs	r2, #1
 80019f4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Return Error */
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e021      	b.n	8001a3e <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d00b      	beq.n	8001a30 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	371c      	adds	r7, #28
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b085      	sub	sp, #20
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a56:	2b10      	cmp	r3, #16
 8001a58:	d174      	bne.n	8001b44 <HAL_ETH_Start_IT+0xfa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2223      	movs	r2, #35	; 0x23
 8001a5e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	e00f      	b.n	8001a86 <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	330a      	adds	r3, #10
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4413      	add	r3, r2
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	3301      	adds	r3, #1
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2b03      	cmp	r3, #3
 8001a8a:	d9ec      	bls.n	8001a66 <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f042 0202 	orr.w	r2, r2, #2
 8001aa0:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f042 0201 	orr.w	r2, r2, #1
 8001ab0:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f042 0201 	orr.w	r2, r2, #1
 8001ac2:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	f241 1304 	movw	r3, #4356	; 0x1104
 8001ace:	4413      	add	r3, r2
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	6811      	ldr	r1, [r2, #0]
 8001ad6:	f043 0201 	orr.w	r2, r3, #1
 8001ada:	f241 1304 	movw	r3, #4356	; 0x1104
 8001ade:	440b      	add	r3, r1
 8001ae0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	f241 1308 	movw	r3, #4360	; 0x1108
 8001aea:	4413      	add	r3, r2
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6811      	ldr	r1, [r2, #0]
 8001af2:	f043 0201 	orr.w	r2, r3, #1
 8001af6:	f241 1308 	movw	r3, #4360	; 0x1108
 8001afa:	440b      	add	r3, r1
 8001afc:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8001b10:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001b14:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	f241 1334 	movw	r3, #4404	; 0x1134
 8001b1e:	4413      	add	r3, r2
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6811      	ldr	r1, [r2, #0]
 8001b26:	f24d 0241 	movw	r2, #53313	; 0xd041
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	f241 1334 	movw	r3, #4404	; 0x1134
 8001b30:	440b      	add	r3, r1
 8001b32:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2210      	movs	r2, #16
 8001b38:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2222      	movs	r2, #34	; 0x22
 8001b3e:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_OK;
 8001b40:	2300      	movs	r3, #0
 8001b42:	e000      	b.n	8001b46 <HAL_ETH_Start_IT+0xfc>
  }
  else
  {
    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
  }
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
	...

08001b54 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d067      	beq.n	8001c34 <HAL_ETH_Stop_IT+0xe0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2223      	movs	r2, #35	; 0x23
 8001b68:	655a      	str	r2, [r3, #84]	; 0x54
    /* Disable intrrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	f241 1334 	movw	r3, #4404	; 0x1134
 8001b72:	4413      	add	r3, r2
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6811      	ldr	r1, [r2, #0]
 8001b7a:	4a32      	ldr	r2, [pc, #200]	; (8001c44 <HAL_ETH_Stop_IT+0xf0>)
 8001b7c:	401a      	ands	r2, r3
 8001b7e:	f241 1334 	movw	r3, #4404	; 0x1134
 8001b82:	440b      	add	r3, r1
 8001b84:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	f241 1304 	movw	r3, #4356	; 0x1104
 8001b8e:	4413      	add	r3, r2
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	6811      	ldr	r1, [r2, #0]
 8001b96:	f023 0201 	bic.w	r2, r3, #1
 8001b9a:	f241 1304 	movw	r3, #4356	; 0x1104
 8001b9e:	440b      	add	r3, r1
 8001ba0:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	f241 1308 	movw	r3, #4360	; 0x1108
 8001baa:	4413      	add	r3, r2
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6811      	ldr	r1, [r2, #0]
 8001bb2:	f023 0201 	bic.w	r2, r3, #1
 8001bb6:	f241 1308 	movw	r3, #4360	; 0x1108
 8001bba:	440b      	add	r3, r1
 8001bbc:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0201 	bic.w	r2, r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f042 0201 	orr.w	r2, r2, #1
 8001bde:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 0202 	bic.w	r2, r2, #2
 8001bf0:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	e00f      	b.n	8001c18 <HAL_ETH_Stop_IT+0xc4>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	330a      	adds	r3, #10
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	3301      	adds	r3, #1
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2b03      	cmp	r3, #3
 8001c1c:	d9ec      	bls.n	8001bf8 <HAL_ETH_Stop_IT+0xa4>
    }

    heth->RxDescList.ItMode = 0U;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	64da      	str	r2, [r3, #76]	; 0x4c

    heth->gState = HAL_ETH_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2210      	movs	r2, #16
 8001c28:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_READY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2210      	movs	r2, #16
 8001c2e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Return function status */
    return HAL_OK;
 8001c30:	2300      	movs	r3, #0
 8001c32:	e000      	b.n	8001c36 <HAL_ETH_Stop_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
  }
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	ffff2fbe 	.word	0xffff2fbe

08001c48 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d107      	bne.n	8001c6a <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5e:	f043 0201 	orr.w	r2, r3, #1
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e073      	b.n	8001d52 <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6e:	2b10      	cmp	r3, #16
 8001c70:	d16e      	bne.n	8001d50 <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001c72:	2200      	movs	r2, #0
 8001c74:	68b9      	ldr	r1, [r7, #8]
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f001 f9f6 	bl	8003068 <ETH_Prepare_Tx_Descriptors>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d007      	beq.n	8001c92 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c86:	f043 0202 	orr.w	r2, r3, #2
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e05f      	b.n	8001d52 <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	3206      	adds	r2, #6
 8001c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c9e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca4:	1c5a      	adds	r2, r3, #1
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	629a      	str	r2, [r3, #40]	; 0x28
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cae:	2b03      	cmp	r3, #3
 8001cb0:	d904      	bls.n	8001cbc <HAL_ETH_Transmit+0x74>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb6:	1f1a      	subs	r2, r3, #4
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	3106      	adds	r1, #6
 8001cc8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001ccc:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001cd0:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8001cd2:	f7ff fc6f 	bl	80015b4 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occured */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001cd8:	e034      	b.n	8001d44 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d011      	beq.n	8001d10 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf0:	f043 0208 	orr.w	r2, r3, #8
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	65da      	str	r2, [r3, #92]	; 0x5c
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	661a      	str	r2, [r3, #96]	; 0x60
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	22e0      	movs	r2, #224	; 0xe0
 8001d0a:	655a      	str	r2, [r3, #84]	; 0x54
        /* Return function status */
        return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e020      	b.n	8001d52 <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d16:	d015      	beq.n	8001d44 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8001d18:	f7ff fc4c 	bl	80015b4 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d302      	bcc.n	8001d2e <HAL_ETH_Transmit+0xe6>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d10a      	bne.n	8001d44 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d32:	f043 0204 	orr.w	r2, r3, #4
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	65da      	str	r2, [r3, #92]	; 0x5c
          heth->gState = HAL_ETH_STATE_ERROR;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	22e0      	movs	r2, #224	; 0xe0
 8001d3e:	655a      	str	r2, [r3, #84]	; 0x54
          return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e006      	b.n	8001d52 <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	dbc6      	blt.n	8001cda <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	e000      	b.n	8001d52 <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
  }
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b089      	sub	sp, #36	; 0x24
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	332c      	adds	r3, #44	; 0x2c
 8001d66:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	69fa      	ldr	r2, [r7, #28]
 8001d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d76:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	2300      	movs	r3, #0
 8001d82:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d06b      	beq.n	8001e64 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	e0ce      	b.n	8001f2e <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	3301      	adds	r3, #1
 8001d94:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d036      	beq.n	8001e10 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	3301      	adds	r3, #1
 8001da6:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d101      	bne.n	8001db2 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3301      	adds	r3, #1
 8001db6:	61fb      	str	r3, [r7, #28]
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	2b03      	cmp	r3, #3
 8001dbc:	d902      	bls.n	8001dc4 <HAL_ETH_IsRxDataAvailable+0x6a>
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3b04      	subs	r3, #4
 8001dc2:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	69fa      	ldr	r2, [r7, #28]
 8001dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dcc:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	db11      	blt.n	8001dfa <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00b      	beq.n	8001dfa <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	2201      	movs	r2, #1
 8001de6:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	3301      	adds	r3, #1
 8001dec:	61fb      	str	r3, [r7, #28]
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	2b03      	cmp	r3, #3
 8001df2:	d902      	bls.n	8001dfa <HAL_ETH_IsRxDataAvailable+0xa0>
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	3b04      	subs	r3, #4
 8001df8:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	69fa      	ldr	r2, [r7, #28]
 8001dfe:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e08e      	b.n	8001f2e <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d012      	beq.n	8001e42 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8001e20:	2301      	movs	r3, #1
 8001e22:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	3301      	adds	r3, #1
 8001e28:	61fb      	str	r3, [r7, #28]
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	2b03      	cmp	r3, #3
 8001e2e:	d902      	bls.n	8001e36 <HAL_ETH_IsRxDataAvailable+0xdc>
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	3b04      	subs	r3, #4
 8001e34:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	69fa      	ldr	r2, [r7, #28]
 8001e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e3e:	61bb      	str	r3, [r7, #24]
 8001e40:	e010      	b.n	8001e64 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	3301      	adds	r3, #1
 8001e46:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	61fb      	str	r3, [r7, #28]
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	2b03      	cmp	r3, #3
 8001e52:	d902      	bls.n	8001e5a <HAL_ETH_IsRxDataAvailable+0x100>
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	3b04      	subs	r3, #4
 8001e58:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	69fa      	ldr	r2, [r7, #28]
 8001e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e62:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	db02      	blt.n	8001e72 <HAL_ETH_IsRxDataAvailable+0x118>
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	d98e      	bls.n	8001d90 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d056      	beq.n	8001f26 <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	69fa      	ldr	r2, [r7, #28]
 8001e7c:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e90:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	e03b      	b.n	8001f10 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	691a      	ldr	r2, [r3, #16]
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ea6:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d009      	beq.n	8001ec4 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	695a      	ldr	r2, [r3, #20]
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d20d      	bcs.n	8001f0a <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	61fb      	str	r3, [r7, #28]
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	2b03      	cmp	r3, #3
 8001ef8:	d902      	bls.n	8001f00 <HAL_ETH_IsRxDataAvailable+0x1a6>
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	3b04      	subs	r3, #4
 8001efe:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	69fa      	ldr	r2, [r7, #28]
 8001f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f08:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	697a      	ldr	r2, [r7, #20]
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d3bf      	bcc.n	8001e98 <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6819      	ldr	r1, [r3, #0]
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	f241 1328 	movw	r3, #4392	; 0x1128
 8001f22:	440b      	add	r3, r1
 8001f24:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	619a      	str	r2, [r3, #24]

  return 0;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3724      	adds	r7, #36	; 0x24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b08a      	sub	sp, #40	; 0x28
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	332c      	adds	r3, #44	; 0x2c
 8001f48:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8001f50:	2300      	movs	r3, #0
 8001f52:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f5c:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d104      	bne.n	8001f72 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e07d      	b.n	800206e <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d10f      	bne.n	8001f9a <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff feed 	bl	8001d5a <HAL_ETH_IsRxDataAvailable>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e071      	b.n	800206e <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f98:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is splitted into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	623b      	str	r3, [r7, #32]
 8001f9e:	e031      	b.n	8002004 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	695a      	ldr	r2, [r3, #20]
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00b      	beq.n	8001fd2 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	695a      	ldr	r2, [r3, #20]
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001fda:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	3301      	adds	r3, #1
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d902      	bls.n	8001fee <HAL_ETH_GetRxDataBuffer+0xb4>
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	3b04      	subs	r3, #4
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff6:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8001ffe:	6a3b      	ldr	r3, [r7, #32]
 8002000:	3301      	adds	r3, #1
 8002002:	623b      	str	r3, [r7, #32]
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	3b01      	subs	r3, #1
 800200a:	6a3a      	ldr	r2, [r7, #32]
 800200c:	429a      	cmp	r2, r3
 800200e:	d3c7      	bcc.n	8001fa0 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	461a      	mov	r2, r3
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	429a      	cmp	r2, r3
 8002030:	d803      	bhi.n	800203a <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	605a      	str	r2, [r3, #4]
 8002038:	e018      	b.n	800206c <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d012      	beq.n	8002068 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	695a      	ldr	r2, [r3, #20]
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	461a      	mov	r2, r3
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	1ad2      	subs	r2, r2, r3
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	e001      	b.n	800206c <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e000      	b.n	800206e <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3728      	adds	r7, #40	; 0x28
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b086      	sub	sp, #24
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
 800207e:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	332c      	adds	r3, #44	; 0x2c
 8002084:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d107      	bne.n	80020a4 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff fe60 	bl	8001d5a <HAL_ETH_IsRxDataAvailable>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e017      	b.n	80020d4 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	699a      	ldr	r2, [r3, #24]
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	4413      	add	r3, r2
 80020ac:	3b01      	subs	r3, #1
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	2b03      	cmp	r3, #3
 80020b4:	d902      	bls.n	80020bc <HAL_ETH_GetRxDataLength+0x46>
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	3b04      	subs	r3, #4
 80020ba:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c4:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 80020dc:	b480      	push	{r7}
 80020de:	b089      	sub	sp, #36	; 0x24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	332c      	adds	r3, #44	; 0x2c
 80020e8:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	69fa      	ldr	r2, [r7, #28]
 80020f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f8:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e057      	b.n	80021bc <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d002      	beq.n	800211a <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	3301      	adds	r3, #1
 8002118:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 800211a:	2300      	movs	r3, #0
 800211c:	613b      	str	r3, [r7, #16]
 800211e:	e03b      	b.n	8002198 <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	691a      	ldr	r2, [r3, #16]
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800212e:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d009      	beq.n	800214c <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	695a      	ldr	r2, [r3, #20]
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	3b01      	subs	r3, #1
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	429a      	cmp	r2, r3
 8002174:	d20d      	bcs.n	8002192 <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	3301      	adds	r3, #1
 800217a:	61fb      	str	r3, [r7, #28]
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	2b03      	cmp	r3, #3
 8002180:	d902      	bls.n	8002188 <HAL_ETH_BuildRxDescriptors+0xac>
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3b04      	subs	r3, #4
 8002186:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	69fa      	ldr	r2, [r7, #28]
 800218c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002190:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	3301      	adds	r3, #1
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	429a      	cmp	r2, r3
 800219e:	d3bf      	bcc.n	8002120 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6819      	ldr	r1, [r3, #0]
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	f241 1328 	movw	r3, #4392	; 0x1128
 80021aa:	440b      	add	r3, r1
 80021ac:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3724      	adds	r7, #36	; 0x24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021de:	2b40      	cmp	r3, #64	; 0x40
 80021e0:	d113      	bne.n	800220a <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	f241 1334 	movw	r3, #4404	; 0x1134
 80021ea:	4413      	add	r3, r2
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f2:	2b40      	cmp	r3, #64	; 0x40
 80021f4:	d109      	bne.n	800220a <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f005 ffc6 	bl	8008188 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002204:	f248 0240 	movw	r2, #32832	; 0x8040
 8002208:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b01      	cmp	r3, #1
 800221a:	d113      	bne.n	8002244 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	f241 1334 	movw	r3, #4404	; 0x1134
 8002224:	4413      	add	r3, r2
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b01      	cmp	r3, #1
 800222e:	d109      	bne.n	8002244 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 f8b3 	bl	800239c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800223e:	f248 0201 	movw	r2, #32769	; 0x8001
 8002242:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002252:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002256:	d149      	bne.n	80022ec <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	f241 1334 	movw	r3, #4404	; 0x1134
 8002260:	4413      	add	r3, r2
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002268:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800226c:	d13e      	bne.n	80022ec <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002272:	f043 0208 	orr.w	r2, r3, #8
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	65da      	str	r2, [r3, #92]	; 0x5c

      /* if fatal bus error occured */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800228c:	d11b      	bne.n	80022c6 <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	f241 1302 	movw	r3, #4354	; 0x1102
 800229c:	4013      	ands	r3, r2
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6613      	str	r3, [r2, #96]	; 0x60

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	f241 1334 	movw	r3, #4404	; 0x1134
 80022aa:	4413      	add	r3, r2
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6811      	ldr	r1, [r2, #0]
 80022b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022b6:	f241 1334 	movw	r3, #4404	; 0x1134
 80022ba:	440b      	add	r3, r1
 80022bc:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	22e0      	movs	r2, #224	; 0xe0
 80022c2:	655a      	str	r2, [r3, #84]	; 0x54
 80022c4:	e00f      	b.n	80022e6 <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	661a      	str	r2, [r3, #96]	; 0x60
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80022e0:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 80022e4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f862 	bl	80023b0 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80022f4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80022f8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80022fc:	d10e      	bne.n	800231c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_ERROR;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	22e0      	movs	r2, #224	; 0xe0
 800230e:	655a      	str	r2, [r3, #84]	; 0x54
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f857 	bl	80023c4 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002324:	f003 0310 	and.w	r3, r3, #16
 8002328:	2b10      	cmp	r3, #16
 800232a:	d10d      	bne.n	8002348 <HAL_ETH_IRQHandler+0x180>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002334:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 f84b 	bl	80023d8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002350:	f003 0320 	and.w	r3, r3, #32
 8002354:	2b20      	cmp	r3, #32
 8002356:	d10d      	bne.n	8002374 <HAL_ETH_IRQHandler+0x1ac>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002360:	f003 020f 	and.w	r2, r3, #15
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 f83f 	bl	80023ec <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	66da      	str	r2, [r3, #108]	; 0x6c
#endif
    }
  }
#else
  /* check ETH WAKEUP exti flag */
  if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002374:	4b08      	ldr	r3, [pc, #32]	; (8002398 <HAL_ETH_IRQHandler+0x1d0>)
 8002376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002378:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d006      	beq.n	800238e <HAL_ETH_IRQHandler+0x1c6>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002380:	4b05      	ldr	r3, [pc, #20]	; (8002398 <HAL_ETH_IRQHandler+0x1d0>)
 8002382:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002386:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f839 	bl	8002400 <HAL_ETH_WakeUpCallback>
#endif
  }
#endif
}
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	58000080 	.word	0x58000080

0800239c <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
 8002420:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e03e      	b.n	80024b4 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800243e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	055b      	lsls	r3, r3, #21
 800244a:	4313      	orrs	r3, r2
 800244c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	041b      	lsls	r3, r3, #16
 8002458:	4313      	orrs	r3, r2
 800245a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	f043 030c 	orr.w	r3, r3, #12
 8002462:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002476:	f7ff f89d 	bl	80015b4 <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800247c:	e009      	b.n	8002492 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 800247e:	f7ff f899 	bl	80015b4 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800248c:	d901      	bls.n	8002492 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e010      	b.n	80024b4 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1ed      	bne.n	800247e <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	461a      	mov	r2, r3
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
 80024c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e03c      	b.n	8002558 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024e6:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	055b      	lsls	r3, r3, #21
 80024f2:	4313      	orrs	r3, r2
 80024f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	041b      	lsls	r3, r3, #16
 8002500:	4313      	orrs	r3, r2
 8002502:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f023 030c 	bic.w	r3, r3, #12
 800250a:	f043 0304 	orr.w	r3, r3, #4
 800250e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	f043 0301 	orr.w	r3, r3, #1
 8002516:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	b29a      	uxth	r2, r3
 800251c:	4b10      	ldr	r3, [pc, #64]	; (8002560 <HAL_ETH_WritePHYRegister+0xa4>)
 800251e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8002522:	4a0f      	ldr	r2, [pc, #60]	; (8002560 <HAL_ETH_WritePHYRegister+0xa4>)
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 800252a:	f7ff f843 	bl	80015b4 <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002530:	e009      	b.n	8002546 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8002532:	f7ff f83f 	bl	80015b4 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002540:	d901      	bls.n	8002546 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e008      	b.n	8002558 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1ed      	bne.n	8002532 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40028000 	.word	0x40028000

08002564 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e1c3      	b.n	8002900 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 020c 	and.w	r2, r3, #12
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0310 	and.w	r3, r3, #16
 8002590:	2b00      	cmp	r3, #0
 8002592:	bf14      	ite	ne
 8002594:	2301      	movne	r3, #1
 8002596:	2300      	moveq	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	461a      	mov	r2, r3
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	bf0c      	ite	eq
 80025be:	2301      	moveq	r3, #1
 80025c0:	2300      	movne	r3, #0
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	461a      	mov	r2, r3
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	bf14      	ite	ne
 80025da:	2301      	movne	r3, #1
 80025dc:	2300      	moveq	r3, #0
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	461a      	mov	r2, r3
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	bf0c      	ite	eq
 80025f4:	2301      	moveq	r3, #1
 80025f6:	2300      	movne	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	461a      	mov	r2, r3
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800260a:	2b00      	cmp	r3, #0
 800260c:	bf14      	ite	ne
 800260e:	2301      	movne	r3, #1
 8002610:	2300      	moveq	r3, #0
 8002612:	b2db      	uxtb	r3, r3
 8002614:	461a      	mov	r2, r3
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002624:	2b00      	cmp	r3, #0
 8002626:	bf14      	ite	ne
 8002628:	2301      	movne	r3, #1
 800262a:	2300      	moveq	r3, #0
 800262c:	b2db      	uxtb	r3, r3
 800262e:	461a      	mov	r2, r3
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800265a:	2b00      	cmp	r3, #0
 800265c:	bf14      	ite	ne
 800265e:	2301      	movne	r3, #1
 8002660:	2300      	moveq	r3, #0
 8002662:	b2db      	uxtb	r3, r3
 8002664:	461a      	mov	r2, r3
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002674:	2b00      	cmp	r3, #0
 8002676:	bf0c      	ite	eq
 8002678:	2301      	moveq	r3, #1
 800267a:	2300      	movne	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	461a      	mov	r2, r3
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800268e:	2b00      	cmp	r3, #0
 8002690:	bf0c      	ite	eq
 8002692:	2301      	moveq	r3, #1
 8002694:	2300      	movne	r3, #0
 8002696:	b2db      	uxtb	r3, r3
 8002698:	461a      	mov	r2, r3
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	bf14      	ite	ne
 80026ac:	2301      	movne	r3, #1
 80026ae:	2300      	moveq	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	461a      	mov	r2, r3
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	bf14      	ite	ne
 80026c6:	2301      	movne	r3, #1
 80026c8:	2300      	moveq	r3, #0
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	461a      	mov	r2, r3
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	bf14      	ite	ne
 80026e0:	2301      	movne	r3, #1
 80026e2:	2300      	moveq	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	461a      	mov	r2, r3
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	bf14      	ite	ne
 80026fa:	2301      	movne	r3, #1
 80026fc:	2300      	moveq	r3, #0
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	461a      	mov	r2, r3
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	bf14      	ite	ne
 8002722:	2301      	movne	r3, #1
 8002724:	2300      	moveq	r3, #0
 8002726:	b2db      	uxtb	r3, r3
 8002728:	461a      	mov	r2, r3
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002754:	2b00      	cmp	r3, #0
 8002756:	bf0c      	ite	eq
 8002758:	2301      	moveq	r3, #1
 800275a:	2300      	movne	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	461a      	mov	r2, r3
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002770:	2b00      	cmp	r3, #0
 8002772:	bf14      	ite	ne
 8002774:	2301      	movne	r3, #1
 8002776:	2300      	moveq	r3, #0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	461a      	mov	r2, r3
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800278c:	2b00      	cmp	r3, #0
 800278e:	bf14      	ite	ne
 8002790:	2301      	movne	r3, #1
 8002792:	2300      	moveq	r3, #0
 8002794:	b2db      	uxtb	r3, r3
 8002796:	461a      	mov	r2, r3
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	bf14      	ite	ne
 80027ac:	2301      	movne	r3, #1
 80027ae:	2300      	moveq	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	461a      	mov	r2, r3
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	0e5b      	lsrs	r3, r3, #25
 80027c2:	f003 021f 	and.w	r2, r3, #31
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	bf14      	ite	ne
 80027d8:	2301      	movne	r3, #1
 80027da:	2300      	moveq	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	461a      	mov	r2, r3
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f003 020f 	and.w	r2, r3, #15
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	bf14      	ite	ne
 8002802:	2301      	movne	r3, #1
 8002804:	2300      	moveq	r3, #0
 8002806:	b2db      	uxtb	r3, r3
 8002808:	461a      	mov	r2, r3
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800281a:	2b00      	cmp	r3, #0
 800281c:	bf0c      	ite	eq
 800281e:	2301      	moveq	r3, #1
 8002820:	2300      	movne	r3, #0
 8002822:	b2db      	uxtb	r3, r3
 8002824:	461a      	mov	r2, r3
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002832:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002840:	0c1b      	lsrs	r3, r3, #16
 8002842:	b29a      	uxth	r2, r3
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b00      	cmp	r3, #0
 8002856:	bf14      	ite	ne
 8002858:	2301      	movne	r3, #1
 800285a:	2300      	moveq	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	461a      	mov	r2, r3
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	bf14      	ite	ne
 8002876:	2301      	movne	r3, #1
 8002878:	2300      	moveq	r3, #0
 800287a:	b2db      	uxtb	r3, r3
 800287c:	461a      	mov	r2, r3
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800288c:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800289c:	f003 0223 	and.w	r2, r3, #35	; 0x23
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	bf14      	ite	ne
 80028b4:	2301      	movne	r3, #1
 80028b6:	2300      	moveq	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	461a      	mov	r2, r3
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80028ca:	f003 0310 	and.w	r3, r3, #16
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	bf14      	ite	ne
 80028d2:	2301      	movne	r3, #1
 80028d4:	2300      	moveq	r3, #0
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	461a      	mov	r2, r3
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80028e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	bf0c      	ite	eq
 80028f0:	2301      	moveq	r3, #1
 80028f2:	2300      	movne	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	461a      	mov	r2, r3
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e00a      	b.n	8002936 <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002924:	2b10      	cmp	r3, #16
 8002926:	d105      	bne.n	8002934 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8002928:	6839      	ldr	r1, [r7, #0]
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f860 	bl	80029f0 <ETH_SetMACConfig>

    return HAL_OK;
 8002930:	2300      	movs	r3, #0
 8002932:	e000      	b.n	8002936 <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
  }
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
	...

08002940 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002950:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002958:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800295a:	f002 f88f 	bl	8004a7c <HAL_RCC_GetHCLKFreq>
 800295e:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	4a1e      	ldr	r2, [pc, #120]	; (80029dc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d908      	bls.n	800297a <HAL_ETH_SetMDIOClockRange+0x3a>
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	4a1d      	ldr	r2, [pc, #116]	; (80029e0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d804      	bhi.n	800297a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	e027      	b.n	80029ca <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	4a18      	ldr	r2, [pc, #96]	; (80029e0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d908      	bls.n	8002994 <HAL_ETH_SetMDIOClockRange+0x54>
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	4a17      	ldr	r2, [pc, #92]	; (80029e4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d204      	bcs.n	8002994 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	e01a      	b.n	80029ca <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	4a13      	ldr	r2, [pc, #76]	; (80029e4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d303      	bcc.n	80029a4 <HAL_ETH_SetMDIOClockRange+0x64>
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	4a12      	ldr	r2, [pc, #72]	; (80029e8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d911      	bls.n	80029c8 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	4a10      	ldr	r2, [pc, #64]	; (80029e8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d908      	bls.n	80029be <HAL_ETH_SetMDIOClockRange+0x7e>
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	4a0f      	ldr	r2, [pc, #60]	; (80029ec <HAL_ETH_SetMDIOClockRange+0xac>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d804      	bhi.n	80029be <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	e005      	b.n	80029ca <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	e000      	b.n	80029ca <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80029c8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80029d4:	bf00      	nop
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	01312cff 	.word	0x01312cff
 80029e0:	02160ebf 	.word	0x02160ebf
 80029e4:	03938700 	.word	0x03938700
 80029e8:	05f5e0ff 	.word	0x05f5e0ff
 80029ec:	08f0d17f 	.word	0x08f0d17f

080029f0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8002a02:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	791b      	ldrb	r3, [r3, #4]
 8002a08:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8002a0a:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	7b1b      	ldrb	r3, [r3, #12]
 8002a10:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002a12:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	7b5b      	ldrb	r3, [r3, #13]
 8002a18:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002a1a:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	7b9b      	ldrb	r3, [r3, #14]
 8002a20:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002a22:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	7bdb      	ldrb	r3, [r3, #15]
 8002a28:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002a2a:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	7c12      	ldrb	r2, [r2, #16]
 8002a30:	2a00      	cmp	r2, #0
 8002a32:	d102      	bne.n	8002a3a <ETH_SetMACConfig+0x4a>
 8002a34:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002a38:	e000      	b.n	8002a3c <ETH_SetMACConfig+0x4c>
 8002a3a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002a3c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	7c52      	ldrb	r2, [r2, #17]
 8002a42:	2a00      	cmp	r2, #0
 8002a44:	d102      	bne.n	8002a4c <ETH_SetMACConfig+0x5c>
 8002a46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a4a:	e000      	b.n	8002a4e <ETH_SetMACConfig+0x5e>
 8002a4c:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002a4e:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	7c9b      	ldrb	r3, [r3, #18]
 8002a54:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002a56:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002a5c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8002a62:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	7f1b      	ldrb	r3, [r3, #28]
 8002a68:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8002a6a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	7f5b      	ldrb	r3, [r3, #29]
 8002a70:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002a72:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	7f92      	ldrb	r2, [r2, #30]
 8002a78:	2a00      	cmp	r2, #0
 8002a7a:	d102      	bne.n	8002a82 <ETH_SetMACConfig+0x92>
 8002a7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a80:	e000      	b.n	8002a84 <ETH_SetMACConfig+0x94>
 8002a82:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002a84:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	7fdb      	ldrb	r3, [r3, #31]
 8002a8a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002a8c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002a94:	2a00      	cmp	r2, #0
 8002a96:	d102      	bne.n	8002a9e <ETH_SetMACConfig+0xae>
 8002a98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a9c:	e000      	b.n	8002aa0 <ETH_SetMACConfig+0xb0>
 8002a9e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002aa0:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002aa6:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002aae:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002ab0:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	4b56      	ldr	r3, [pc, #344]	; (8002c1c <ETH_SetMACConfig+0x22c>)
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6812      	ldr	r2, [r2, #0]
 8002ac8:	68f9      	ldr	r1, [r7, #12]
 8002aca:	430b      	orrs	r3, r1
 8002acc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ada:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002adc:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ae4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002ae6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002aee:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002af0:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002af8:	2a00      	cmp	r2, #0
 8002afa:	d102      	bne.n	8002b02 <ETH_SetMACConfig+0x112>
 8002afc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b00:	e000      	b.n	8002b04 <ETH_SetMACConfig+0x114>
 8002b02:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002b04:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	4b42      	ldr	r3, [pc, #264]	; (8002c20 <ETH_SetMACConfig+0x230>)
 8002b16:	4013      	ands	r3, r2
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6812      	ldr	r2, [r2, #0]
 8002b1c:	68f9      	ldr	r1, [r7, #12]
 8002b1e:	430b      	orrs	r3, r1
 8002b20:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b28:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	4b3a      	ldr	r3, [pc, #232]	; (8002c24 <ETH_SetMACConfig+0x234>)
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6812      	ldr	r2, [r2, #0]
 8002b40:	68f9      	ldr	r1, [r7, #12]
 8002b42:	430b      	orrs	r3, r1
 8002b44:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002b4c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002b52:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002b5a:	2a00      	cmp	r2, #0
 8002b5c:	d101      	bne.n	8002b62 <ETH_SetMACConfig+0x172>
 8002b5e:	2280      	movs	r2, #128	; 0x80
 8002b60:	e000      	b.n	8002b64 <ETH_SetMACConfig+0x174>
 8002b62:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002b64:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b6a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b76:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6812      	ldr	r2, [r2, #0]
 8002b80:	68f9      	ldr	r1, [r7, #12]
 8002b82:	430b      	orrs	r3, r1
 8002b84:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002b8c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002b94:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002b96:	4313      	orrs	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba2:	f023 0103 	bic.w	r1, r3, #3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002bba:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002bd6:	2a00      	cmp	r2, #0
 8002bd8:	d101      	bne.n	8002bde <ETH_SetMACConfig+0x1ee>
 8002bda:	2240      	movs	r2, #64	; 0x40
 8002bdc:	e000      	b.n	8002be0 <ETH_SetMACConfig+0x1f0>
 8002bde:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002be0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002be8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002bea:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002bf2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002c00:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002c10:	bf00      	nop
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	00048083 	.word	0x00048083
 8002c20:	c0f88000 	.word	0xc0f88000
 8002c24:	fffffef0 	.word	0xfffffef0

08002c28 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	4b38      	ldr	r3, [pc, #224]	; (8002d20 <ETH_SetDMAConfig+0xf8>)
 8002c3e:	4013      	ands	r3, r2
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	6812      	ldr	r2, [r2, #0]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	6809      	ldr	r1, [r1, #0]
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8002c4e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	791b      	ldrb	r3, [r3, #4]
 8002c54:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002c5a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	7b1b      	ldrb	r3, [r3, #12]
 8002c60:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002c62:	4313      	orrs	r3, r2
 8002c64:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	f241 0304 	movw	r3, #4100	; 0x1004
 8002c6e:	4413      	add	r3, r2
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	4b2c      	ldr	r3, [pc, #176]	; (8002d24 <ETH_SetDMAConfig+0xfc>)
 8002c74:	4013      	ands	r3, r2
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6811      	ldr	r1, [r2, #0]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	f241 0304 	movw	r3, #4100	; 0x1004
 8002c82:	440b      	add	r3, r1
 8002c84:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	7b5b      	ldrb	r3, [r3, #13]
 8002c8a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002c90:	4313      	orrs	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	4b22      	ldr	r3, [pc, #136]	; (8002d28 <ETH_SetDMAConfig+0x100>)
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	6811      	ldr	r1, [r2, #0]
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8002cae:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	7d1b      	ldrb	r3, [r3, #20]
 8002cb8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002cba:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	7f5b      	ldrb	r3, [r3, #29]
 8002cc0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	f241 1304 	movw	r3, #4356	; 0x1104
 8002cce:	4413      	add	r3, r2
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	4b16      	ldr	r3, [pc, #88]	; (8002d2c <ETH_SetDMAConfig+0x104>)
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	6811      	ldr	r1, [r2, #0]
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	f241 1304 	movw	r3, #4356	; 0x1104
 8002ce2:	440b      	add	r3, r1
 8002ce4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	7f1b      	ldrb	r3, [r3, #28]
 8002cea:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	f241 1308 	movw	r3, #4360	; 0x1108
 8002cfc:	4413      	add	r3, r2
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <ETH_SetDMAConfig+0x108>)
 8002d02:	4013      	ands	r3, r2
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6811      	ldr	r1, [r2, #0]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	f241 1308 	movw	r3, #4360	; 0x1108
 8002d10:	440b      	add	r3, r1
 8002d12:	601a      	str	r2, [r3, #0]
}
 8002d14:	bf00      	nop
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	ffff87fd 	.word	0xffff87fd
 8002d24:	ffff2ffe 	.word	0xffff2ffe
 8002d28:	fffec000 	.word	0xfffec000
 8002d2c:	ffc0efef 	.word	0xffc0efef
 8002d30:	7fc0ffff 	.word	0x7fc0ffff

08002d34 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b0a4      	sub	sp, #144	; 0x90
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002d42:	2300      	movs	r3, #0
 8002d44:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002d46:	2300      	movs	r3, #0
 8002d48:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002d52:	2301      	movs	r3, #1
 8002d54:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002d64:	2300      	movs	r3, #0
 8002d66:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002d70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d74:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002d76:	2300      	movs	r3, #0
 8002d78:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002d80:	2300      	movs	r3, #0
 8002d82:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002d86:	2300      	movs	r3, #0
 8002d88:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002d8c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002d90:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002d92:	2300      	movs	r3, #0
 8002d94:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002da2:	2300      	movs	r3, #0
 8002da4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002da8:	2300      	movs	r3, #0
 8002daa:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002dae:	2300      	movs	r3, #0
 8002db0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002db2:	2300      	movs	r3, #0
 8002db4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002db6:	2300      	movs	r3, #0
 8002db8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002dcc:	2320      	movs	r3, #32
 8002dce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002dde:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002de4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002de8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002dea:	2300      	movs	r3, #0
 8002dec:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002df0:	2302      	movs	r3, #2
 8002df2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002df6:	2300      	movs	r3, #0
 8002df8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002e02:	2300      	movs	r3, #0
 8002e04:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002e12:	2301      	movs	r3, #1
 8002e14:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002e18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff fde6 	bl	80029f0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002e24:	2301      	movs	r3, #1
 8002e26:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002e30:	2300      	movs	r3, #0
 8002e32:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002e36:	2300      	movs	r3, #0
 8002e38:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002e3e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e42:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002e44:	2300      	movs	r3, #0
 8002e46:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002e48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e4c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002e54:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002e58:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002e5a:	f107 0308 	add.w	r3, r7, #8
 8002e5e:	4619      	mov	r1, r3
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7ff fee1 	bl	8002c28 <ETH_SetDMAConfig>
}
 8002e66:	bf00      	nop
 8002e68:	3790      	adds	r7, #144	; 0x90
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e80:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e88:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002e8a:	f001 fdf7 	bl	8004a7c <HAL_RCC_GetHCLKFreq>
 8002e8e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	4a1e      	ldr	r2, [pc, #120]	; (8002f0c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d908      	bls.n	8002eaa <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	4a1d      	ldr	r2, [pc, #116]	; (8002f10 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d804      	bhi.n	8002eaa <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	e027      	b.n	8002efa <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	4a18      	ldr	r2, [pc, #96]	; (8002f10 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d908      	bls.n	8002ec4 <ETH_MAC_MDIO_ClkConfig+0x54>
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	4a17      	ldr	r2, [pc, #92]	; (8002f14 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d204      	bcs.n	8002ec4 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	e01a      	b.n	8002efa <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	4a13      	ldr	r2, [pc, #76]	; (8002f14 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d303      	bcc.n	8002ed4 <ETH_MAC_MDIO_ClkConfig+0x64>
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	4a12      	ldr	r2, [pc, #72]	; (8002f18 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d911      	bls.n	8002ef8 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	4a10      	ldr	r2, [pc, #64]	; (8002f18 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d908      	bls.n	8002eee <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	4a0f      	ldr	r2, [pc, #60]	; (8002f1c <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d804      	bhi.n	8002eee <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	e005      	b.n	8002efa <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	e000      	b.n	8002efa <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002ef8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002f04:	bf00      	nop
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	01312cff 	.word	0x01312cff
 8002f10:	02160ebf 	.word	0x02160ebf
 8002f14:	03938700 	.word	0x03938700
 8002f18:	05f5e0ff 	.word	0x05f5e0ff
 8002f1c:	08f0d17f 	.word	0x08f0d17f

08002f20 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002f28:	2300      	movs	r3, #0
 8002f2a:	60fb      	str	r3, [r7, #12]
 8002f2c:	e01d      	b.n	8002f6a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68d9      	ldr	r1, [r3, #12]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	4613      	mov	r3, r2
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	4413      	add	r3, r2
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	440b      	add	r3, r1
 8002f3e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	2200      	movs	r2, #0
 8002f56:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002f58:	68b9      	ldr	r1, [r7, #8]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	3206      	adds	r2, #6
 8002f60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	3301      	adds	r3, #1
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2b03      	cmp	r3, #3
 8002f6e:	d9de      	bls.n	8002f2e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	f241 132c 	movw	r3, #4396	; 0x112c
 8002f7e:	4413      	add	r3, r2
 8002f80:	2203      	movs	r2, #3
 8002f82:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68d9      	ldr	r1, [r3, #12]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	f241 1314 	movw	r3, #4372	; 0x1114
 8002f90:	4413      	add	r3, r2
 8002f92:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68da      	ldr	r2, [r3, #12]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002fa0:	601a      	str	r2, [r3, #0]
}
 8002fa2:	bf00      	nop
 8002fa4:	3714      	adds	r7, #20
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b085      	sub	sp, #20
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	e024      	b.n	8003006 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6919      	ldr	r1, [r3, #16]
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	4413      	add	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	440b      	add	r3, r1
 8002fcc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	330a      	adds	r3, #10
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	3301      	adds	r3, #1
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2b03      	cmp	r3, #3
 800300a:	d9d7      	bls.n	8002fbc <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	f241 1330 	movw	r3, #4400	; 0x1130
 8003032:	4413      	add	r3, r2
 8003034:	2203      	movs	r2, #3
 8003036:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6919      	ldr	r1, [r3, #16]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	f241 131c 	movw	r3, #4380	; 0x111c
 8003044:	4413      	add	r3, r2
 8003046:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	f241 1328 	movw	r3, #4392	; 0x1128
 8003058:	4413      	add	r3, r2
 800305a:	6019      	str	r1, [r3, #0]
}
 800305c:	bf00      	nop
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003068:	b480      	push	{r7}
 800306a:	b08d      	sub	sp, #52	; 0x34
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	3318      	adds	r3, #24
 8003078:	61bb      	str	r3, [r7, #24]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	617b      	str	r3, [r7, #20]
  uint32_t descnbr = 0, idx;
 8003086:	2300      	movs	r3, #0
 8003088:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800308e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003092:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	61fb      	str	r3, [r7, #28]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030a6:	d101      	bne.n	80030ac <ETH_Prepare_Tx_Descriptors+0x44>
  {
    return HAL_ETH_ERROR_BUSY;
 80030a8:	2302      	movs	r3, #2
 80030aa:	e223      	b.n	80034f4 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d044      	beq.n	8003142 <ETH_Prepare_Tx_Descriptors+0xda>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80030b8:	6a3b      	ldr	r3, [r7, #32]
 80030ba:	68da      	ldr	r2, [r3, #12]
 80030bc:	4b72      	ldr	r3, [pc, #456]	; (8003288 <ETH_Prepare_Tx_Descriptors+0x220>)
 80030be:	4013      	ands	r3, r2
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030c4:	431a      	orrs	r2, r3
 80030c6:	6a3b      	ldr	r3, [r7, #32]
 80030c8:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80030ca:	6a3b      	ldr	r3, [r7, #32]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80030e4:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d027      	beq.n	8003142 <ETH_Prepare_Tx_Descriptors+0xda>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80030f2:	6a3b      	ldr	r3, [r7, #32]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fc:	041b      	lsls	r3, r3, #16
 80030fe:	431a      	orrs	r2, r3
 8003100:	6a3b      	ldr	r3, [r7, #32]
 8003102:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8003104:	6a3b      	ldr	r3, [r7, #32]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311c:	431a      	orrs	r2, r3
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003130:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003140:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segementation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0310 	and.w	r3, r3, #16
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00e      	beq.n	800316c <ETH_Prepare_Tx_Descriptors+0x104>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	689a      	ldr	r2, [r3, #8]
 8003152:	4b4e      	ldr	r3, [pc, #312]	; (800328c <ETH_Prepare_Tx_Descriptors+0x224>)
 8003154:	4013      	ands	r3, r2
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	6992      	ldr	r2, [r2, #24]
 800315a:	431a      	orrs	r2, r3
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b00      	cmp	r3, #0
 8003176:	d105      	bne.n	8003184 <ETH_Prepare_Tx_Descriptors+0x11c>
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0310 	and.w	r3, r3, #16
 8003180:	2b00      	cmp	r3, #0
 8003182:	d030      	beq.n	80031e6 <ETH_Prepare_Tx_Descriptors+0x17e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800318c:	6a3b      	ldr	r3, [r7, #32]
 800318e:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800319c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319e:	3301      	adds	r3, #1
 80031a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a4:	2b03      	cmp	r3, #3
 80031a6:	d902      	bls.n	80031ae <ETH_Prepare_Tx_Descriptors+0x146>
 80031a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031aa:	3b04      	subs	r3, #4
 80031ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031b6:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 80031b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ba:	3301      	adds	r3, #1
 80031bc:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80031be:	6a3b      	ldr	r3, [r7, #32]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031ca:	d10c      	bne.n	80031e6 <ETH_Prepare_Tx_Descriptors+0x17e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031d4:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80031d6:	6a3b      	ldr	r3, [r7, #32]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80031e2:	2302      	movs	r3, #2
 80031e4:	e186      	b.n	80034f4 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80031e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e8:	3301      	adds	r3, #1
 80031ea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	461a      	mov	r2, r3
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	4b24      	ldr	r3, [pc, #144]	; (800328c <ETH_Prepare_Tx_Descriptors+0x224>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	69fa      	ldr	r2, [r7, #28]
 8003200:	6852      	ldr	r2, [r2, #4]
 8003202:	431a      	orrs	r2, r3
 8003204:	6a3b      	ldr	r3, [r7, #32]
 8003206:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d012      	beq.n	8003236 <ETH_Prepare_Tx_Descriptors+0x1ce>
  {
    txbuffer = txbuffer->next;
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	461a      	mov	r2, r3
 800321c:	6a3b      	ldr	r3, [r7, #32]
 800321e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003220:	6a3b      	ldr	r3, [r7, #32]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	4b1a      	ldr	r3, [pc, #104]	; (8003290 <ETH_Prepare_Tx_Descriptors+0x228>)
 8003226:	4013      	ands	r3, r2
 8003228:	69fa      	ldr	r2, [r7, #28]
 800322a:	6852      	ldr	r2, [r2, #4]
 800322c:	0412      	lsls	r2, r2, #16
 800322e:	431a      	orrs	r2, r3
 8003230:	6a3b      	ldr	r3, [r7, #32]
 8003232:	609a      	str	r2, [r3, #8]
 8003234:	e008      	b.n	8003248 <ETH_Prepare_Tx_Descriptors+0x1e0>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003236:	6a3b      	ldr	r3, [r7, #32]
 8003238:	2200      	movs	r2, #0
 800323a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800323c:	6a3b      	ldr	r3, [r7, #32]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	4b13      	ldr	r3, [pc, #76]	; (8003290 <ETH_Prepare_Tx_Descriptors+0x228>)
 8003242:	4013      	ands	r3, r2
 8003244:	6a3a      	ldr	r2, [r7, #32]
 8003246:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0310 	and.w	r3, r3, #16
 8003250:	2b00      	cmp	r3, #0
 8003252:	d021      	beq.n	8003298 <ETH_Prepare_Tx_Descriptors+0x230>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8003254:	6a3b      	ldr	r3, [r7, #32]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	04db      	lsls	r3, r3, #19
 8003262:	431a      	orrs	r2, r3
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003268:	6a3b      	ldr	r3, [r7, #32]
 800326a:	68da      	ldr	r2, [r3, #12]
 800326c:	4b09      	ldr	r3, [pc, #36]	; (8003294 <ETH_Prepare_Tx_Descriptors+0x22c>)
 800326e:	4013      	ands	r3, r2
 8003270:	68ba      	ldr	r2, [r7, #8]
 8003272:	69d2      	ldr	r2, [r2, #28]
 8003274:	431a      	orrs	r2, r3
 8003276:	6a3b      	ldr	r3, [r7, #32]
 8003278:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800327a:	6a3b      	ldr	r3, [r7, #32]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003282:	6a3b      	ldr	r3, [r7, #32]
 8003284:	60da      	str	r2, [r3, #12]
 8003286:	e02e      	b.n	80032e6 <ETH_Prepare_Tx_Descriptors+0x27e>
 8003288:	ffff0000 	.word	0xffff0000
 800328c:	ffffc000 	.word	0xffffc000
 8003290:	c000ffff 	.word	0xc000ffff
 8003294:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	4b98      	ldr	r3, [pc, #608]	; (8003500 <ETH_Prepare_Tx_Descriptors+0x498>)
 800329e:	4013      	ands	r3, r2
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	6852      	ldr	r2, [r2, #4]
 80032a4:	431a      	orrs	r2, r3
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d008      	beq.n	80032c8 <ETH_Prepare_Tx_Descriptors+0x260>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	431a      	orrs	r2, r3
 80032c4:	6a3b      	ldr	r3, [r7, #32]
 80032c6:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0320 	and.w	r3, r3, #32
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d008      	beq.n	80032e6 <ETH_Prepare_Tx_Descriptors+0x27e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80032d4:	6a3b      	ldr	r3, [r7, #32]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	431a      	orrs	r2, r3
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0304 	and.w	r3, r3, #4
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d008      	beq.n	8003304 <ETH_Prepare_Tx_Descriptors+0x29c>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fe:	431a      	orrs	r2, r3
 8003300:	6a3b      	ldr	r3, [r7, #32]
 8003302:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 80c0 	beq.w	80034b6 <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8003336:	6a3b      	ldr	r3, [r7, #32]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	431a      	orrs	r2, r3
 8003344:	6a3b      	ldr	r3, [r7, #32]
 8003346:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is splitted into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003348:	e0b5      	b.n	80034b6 <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800334a:	6a3b      	ldr	r3, [r7, #32]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003358:	3301      	adds	r3, #1
 800335a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800335c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335e:	2b03      	cmp	r3, #3
 8003360:	d902      	bls.n	8003368 <ETH_Prepare_Tx_Descriptors+0x300>
 8003362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003364:	3b04      	subs	r3, #4
 8003366:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800336c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003370:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003372:	6a3b      	ldr	r3, [r7, #32]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 800337e:	6a3b      	ldr	r3, [r7, #32]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003386:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800338a:	d126      	bne.n	80033da <ETH_Prepare_Tx_Descriptors+0x372>
    {
      descidx = firstdescidx;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003398:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 800339a:	2300      	movs	r3, #0
 800339c:	627b      	str	r3, [r7, #36]	; 0x24
 800339e:	e016      	b.n	80033ce <ETH_Prepare_Tx_Descriptors+0x366>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033a8:	6a3b      	ldr	r3, [r7, #32]
 80033aa:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80033ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ae:	3301      	adds	r3, #1
 80033b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b4:	2b03      	cmp	r3, #3
 80033b6:	d902      	bls.n	80033be <ETH_Prepare_Tx_Descriptors+0x356>
 80033b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ba:	3b04      	subs	r3, #4
 80033bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033c6:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	3301      	adds	r3, #1
 80033cc:	627b      	str	r3, [r7, #36]	; 0x24
 80033ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d3e4      	bcc.n	80033a0 <ETH_Prepare_Tx_Descriptors+0x338>
      }

      return HAL_ETH_ERROR_BUSY;
 80033d6:	2302      	movs	r3, #2
 80033d8:	e08c      	b.n	80034f4 <ETH_Prepare_Tx_Descriptors+0x48c>
    }

    descnbr += 1U;
 80033da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033dc:	3301      	adds	r3, #1
 80033de:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	461a      	mov	r2, r3
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	4b43      	ldr	r3, [pc, #268]	; (8003504 <ETH_Prepare_Tx_Descriptors+0x49c>)
 80033f6:	4013      	ands	r3, r2
 80033f8:	69fa      	ldr	r2, [r7, #28]
 80033fa:	6852      	ldr	r2, [r2, #4]
 80033fc:	431a      	orrs	r2, r3
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d012      	beq.n	8003430 <ETH_Prepare_Tx_Descriptors+0x3c8>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	461a      	mov	r2, r3
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800341a:	6a3b      	ldr	r3, [r7, #32]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	4b3a      	ldr	r3, [pc, #232]	; (8003508 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8003420:	4013      	ands	r3, r2
 8003422:	69fa      	ldr	r2, [r7, #28]
 8003424:	6852      	ldr	r2, [r2, #4]
 8003426:	0412      	lsls	r2, r2, #16
 8003428:	431a      	orrs	r2, r3
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	609a      	str	r2, [r3, #8]
 800342e:	e008      	b.n	8003442 <ETH_Prepare_Tx_Descriptors+0x3da>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	2200      	movs	r2, #0
 8003434:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	4b33      	ldr	r3, [pc, #204]	; (8003508 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 800343c:	4013      	ands	r3, r2
 800343e:	6a3a      	ldr	r2, [r7, #32]
 8003440:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0310 	and.w	r3, r3, #16
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00f      	beq.n	800346e <ETH_Prepare_Tx_Descriptors+0x406>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800344e:	6a3b      	ldr	r3, [r7, #32]
 8003450:	68da      	ldr	r2, [r3, #12]
 8003452:	4b2e      	ldr	r3, [pc, #184]	; (800350c <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8003454:	4013      	ands	r3, r2
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	69d2      	ldr	r2, [r2, #28]
 800345a:	431a      	orrs	r2, r3
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003460:	6a3b      	ldr	r3, [r7, #32]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	60da      	str	r2, [r3, #12]
 800346c:	e017      	b.n	800349e <ETH_Prepare_Tx_Descriptors+0x436>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800346e:	6a3b      	ldr	r3, [r7, #32]
 8003470:	68da      	ldr	r2, [r3, #12]
 8003472:	4b23      	ldr	r3, [pc, #140]	; (8003500 <ETH_Prepare_Tx_Descriptors+0x498>)
 8003474:	4013      	ands	r3, r2
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	6852      	ldr	r2, [r2, #4]
 800347a:	431a      	orrs	r2, r3
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	2b00      	cmp	r3, #0
 800348a:	d008      	beq.n	800349e <ETH_Prepare_Tx_Descriptors+0x436>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	431a      	orrs	r2, r3
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	60da      	str	r2, [r3, #12]
      }
    }

    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800349e:	6a3b      	ldr	r3, [r7, #32]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80034aa:	6a3b      	ldr	r3, [r7, #32]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80034b2:	6a3b      	ldr	r3, [r7, #32]
 80034b4:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f47f af45 	bne.w	800334a <ETH_Prepare_Tx_Descriptors+0x2e2>
  }

  if(ItMode != ((uint32_t)RESET))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d006      	beq.n	80034d4 <ETH_Prepare_Tx_Descriptors+0x46c>
  {
    /* Set Interrupt on completition bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80034ce:	6a3b      	ldr	r3, [r7, #32]
 80034d0:	609a      	str	r2, [r3, #8]
 80034d2:	e005      	b.n	80034e0 <ETH_Prepare_Tx_Descriptors+0x478>
  }
  else
  {
    /* Clear Interrupt on completition bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	60da      	str	r2, [r3, #12]

  dmatxdesclist->CurTxDesc = descidx;
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034f0:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3734      	adds	r7, #52	; 0x34
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	ffff8000 	.word	0xffff8000
 8003504:	ffffc000 	.word	0xffffc000
 8003508:	c000ffff 	.word	0xc000ffff
 800350c:	fffc0000 	.word	0xfffc0000

08003510 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003510:	b480      	push	{r7}
 8003512:	b089      	sub	sp, #36	; 0x24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800351a:	2300      	movs	r3, #0
 800351c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800351e:	4b89      	ldr	r3, [pc, #548]	; (8003744 <HAL_GPIO_Init+0x234>)
 8003520:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003522:	e194      	b.n	800384e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	2101      	movs	r1, #1
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	fa01 f303 	lsl.w	r3, r1, r3
 8003530:	4013      	ands	r3, r2
 8003532:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 8186 	beq.w	8003848 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d00b      	beq.n	800355c <HAL_GPIO_Init+0x4c>
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2b02      	cmp	r3, #2
 800354a:	d007      	beq.n	800355c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003550:	2b11      	cmp	r3, #17
 8003552:	d003      	beq.n	800355c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b12      	cmp	r3, #18
 800355a:	d130      	bne.n	80035be <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	2203      	movs	r2, #3
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	43db      	mvns	r3, r3
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	4013      	ands	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4313      	orrs	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003592:	2201      	movs	r2, #1
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	43db      	mvns	r3, r3
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	4013      	ands	r3, r2
 80035a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	091b      	lsrs	r3, r3, #4
 80035a8:	f003 0201 	and.w	r2, r3, #1
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	2203      	movs	r2, #3
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	43db      	mvns	r3, r3
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	4013      	ands	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	689a      	ldr	r2, [r3, #8]
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d003      	beq.n	80035fe <HAL_GPIO_Init+0xee>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b12      	cmp	r3, #18
 80035fc:	d123      	bne.n	8003646 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	08da      	lsrs	r2, r3, #3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	3208      	adds	r2, #8
 8003606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800360a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	220f      	movs	r2, #15
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	43db      	mvns	r3, r3
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4013      	ands	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	691a      	ldr	r2, [r3, #16]
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4313      	orrs	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	08da      	lsrs	r2, r3, #3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3208      	adds	r2, #8
 8003640:	69b9      	ldr	r1, [r7, #24]
 8003642:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	2203      	movs	r2, #3
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	43db      	mvns	r3, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4013      	ands	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f003 0203 	and.w	r2, r3, #3
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4313      	orrs	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	f000 80e0 	beq.w	8003848 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003688:	4b2f      	ldr	r3, [pc, #188]	; (8003748 <HAL_GPIO_Init+0x238>)
 800368a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800368e:	4a2e      	ldr	r2, [pc, #184]	; (8003748 <HAL_GPIO_Init+0x238>)
 8003690:	f043 0302 	orr.w	r3, r3, #2
 8003694:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003698:	4b2b      	ldr	r3, [pc, #172]	; (8003748 <HAL_GPIO_Init+0x238>)
 800369a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036a6:	4a29      	ldr	r2, [pc, #164]	; (800374c <HAL_GPIO_Init+0x23c>)
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	089b      	lsrs	r3, r3, #2
 80036ac:	3302      	adds	r3, #2
 80036ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	220f      	movs	r2, #15
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43db      	mvns	r3, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4013      	ands	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a20      	ldr	r2, [pc, #128]	; (8003750 <HAL_GPIO_Init+0x240>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d052      	beq.n	8003778 <HAL_GPIO_Init+0x268>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a1f      	ldr	r2, [pc, #124]	; (8003754 <HAL_GPIO_Init+0x244>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d031      	beq.n	800373e <HAL_GPIO_Init+0x22e>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a1e      	ldr	r2, [pc, #120]	; (8003758 <HAL_GPIO_Init+0x248>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d02b      	beq.n	800373a <HAL_GPIO_Init+0x22a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a1d      	ldr	r2, [pc, #116]	; (800375c <HAL_GPIO_Init+0x24c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d025      	beq.n	8003736 <HAL_GPIO_Init+0x226>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a1c      	ldr	r2, [pc, #112]	; (8003760 <HAL_GPIO_Init+0x250>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d01f      	beq.n	8003732 <HAL_GPIO_Init+0x222>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a1b      	ldr	r2, [pc, #108]	; (8003764 <HAL_GPIO_Init+0x254>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d019      	beq.n	800372e <HAL_GPIO_Init+0x21e>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a1a      	ldr	r2, [pc, #104]	; (8003768 <HAL_GPIO_Init+0x258>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d013      	beq.n	800372a <HAL_GPIO_Init+0x21a>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a19      	ldr	r2, [pc, #100]	; (800376c <HAL_GPIO_Init+0x25c>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d00d      	beq.n	8003726 <HAL_GPIO_Init+0x216>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a18      	ldr	r2, [pc, #96]	; (8003770 <HAL_GPIO_Init+0x260>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d007      	beq.n	8003722 <HAL_GPIO_Init+0x212>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a17      	ldr	r2, [pc, #92]	; (8003774 <HAL_GPIO_Init+0x264>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d101      	bne.n	800371e <HAL_GPIO_Init+0x20e>
 800371a:	2309      	movs	r3, #9
 800371c:	e02d      	b.n	800377a <HAL_GPIO_Init+0x26a>
 800371e:	230a      	movs	r3, #10
 8003720:	e02b      	b.n	800377a <HAL_GPIO_Init+0x26a>
 8003722:	2308      	movs	r3, #8
 8003724:	e029      	b.n	800377a <HAL_GPIO_Init+0x26a>
 8003726:	2307      	movs	r3, #7
 8003728:	e027      	b.n	800377a <HAL_GPIO_Init+0x26a>
 800372a:	2306      	movs	r3, #6
 800372c:	e025      	b.n	800377a <HAL_GPIO_Init+0x26a>
 800372e:	2305      	movs	r3, #5
 8003730:	e023      	b.n	800377a <HAL_GPIO_Init+0x26a>
 8003732:	2304      	movs	r3, #4
 8003734:	e021      	b.n	800377a <HAL_GPIO_Init+0x26a>
 8003736:	2303      	movs	r3, #3
 8003738:	e01f      	b.n	800377a <HAL_GPIO_Init+0x26a>
 800373a:	2302      	movs	r3, #2
 800373c:	e01d      	b.n	800377a <HAL_GPIO_Init+0x26a>
 800373e:	2301      	movs	r3, #1
 8003740:	e01b      	b.n	800377a <HAL_GPIO_Init+0x26a>
 8003742:	bf00      	nop
 8003744:	58000080 	.word	0x58000080
 8003748:	58024400 	.word	0x58024400
 800374c:	58000400 	.word	0x58000400
 8003750:	58020000 	.word	0x58020000
 8003754:	58020400 	.word	0x58020400
 8003758:	58020800 	.word	0x58020800
 800375c:	58020c00 	.word	0x58020c00
 8003760:	58021000 	.word	0x58021000
 8003764:	58021400 	.word	0x58021400
 8003768:	58021800 	.word	0x58021800
 800376c:	58021c00 	.word	0x58021c00
 8003770:	58022000 	.word	0x58022000
 8003774:	58022400 	.word	0x58022400
 8003778:	2300      	movs	r3, #0
 800377a:	69fa      	ldr	r2, [r7, #28]
 800377c:	f002 0203 	and.w	r2, r2, #3
 8003780:	0092      	lsls	r2, r2, #2
 8003782:	4093      	lsls	r3, r2
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4313      	orrs	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800378a:	4938      	ldr	r1, [pc, #224]	; (800386c <HAL_GPIO_Init+0x35c>)
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	089b      	lsrs	r3, r3, #2
 8003790:	3302      	adds	r3, #2
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	43db      	mvns	r3, r3
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4013      	ands	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	43db      	mvns	r3, r3
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	4013      	ands	r3, r2
 80037d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	43db      	mvns	r3, r3
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	4013      	ands	r3, r2
 80037fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	4313      	orrs	r3, r2
 8003810:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003812:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800381a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	43db      	mvns	r3, r3
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4013      	ands	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d003      	beq.n	8003840 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	4313      	orrs	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003840:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	3301      	adds	r3, #1
 800384c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	fa22 f303 	lsr.w	r3, r2, r3
 8003858:	2b00      	cmp	r3, #0
 800385a:	f47f ae63 	bne.w	8003524 <HAL_GPIO_Init+0x14>
  }
}
 800385e:	bf00      	nop
 8003860:	bf00      	nop
 8003862:	3724      	adds	r7, #36	; 0x24
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	58000400 	.word	0x58000400

08003870 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	460b      	mov	r3, r1
 800387a:	807b      	strh	r3, [r7, #2]
 800387c:	4613      	mov	r3, r2
 800387e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003880:	787b      	ldrb	r3, [r7, #1]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003886:	887a      	ldrh	r2, [r7, #2]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800388c:	e003      	b.n	8003896 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800388e:	887b      	ldrh	r3, [r7, #2]
 8003890:	041a      	lsls	r2, r3, #16
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	619a      	str	r2, [r3, #24]
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
 80038aa:	460b      	mov	r3, r1
 80038ac:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695a      	ldr	r2, [r3, #20]
 80038b2:	887b      	ldrh	r3, [r7, #2]
 80038b4:	401a      	ands	r2, r3
 80038b6:	887b      	ldrh	r3, [r7, #2]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d104      	bne.n	80038c6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80038bc:	887b      	ldrh	r3, [r7, #2]
 80038be:	041a      	lsls	r2, r3, #16
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80038c4:	e002      	b.n	80038cc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80038c6:	887a      	ldrh	r2, [r7, #2]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	619a      	str	r2, [r3, #24]
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038da:	b08f      	sub	sp, #60	; 0x3c
 80038dc:	af0a      	add	r7, sp, #40	; 0x28
 80038de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e116      	b.n	8003b18 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d106      	bne.n	800390a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7fd fa45 	bl	8000d94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2203      	movs	r2, #3
 800390e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391a:	2b00      	cmp	r3, #0
 800391c:	d102      	bne.n	8003924 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f004 f865 	bl	80079f8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	603b      	str	r3, [r7, #0]
 8003934:	687e      	ldr	r6, [r7, #4]
 8003936:	466d      	mov	r5, sp
 8003938:	f106 0410 	add.w	r4, r6, #16
 800393c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800393e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003940:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003942:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003944:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003948:	e885 0003 	stmia.w	r5, {r0, r1}
 800394c:	1d33      	adds	r3, r6, #4
 800394e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003950:	6838      	ldr	r0, [r7, #0]
 8003952:	f003 ffef 	bl	8007934 <USB_CoreInit>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d005      	beq.n	8003968 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e0d7      	b.n	8003b18 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2100      	movs	r1, #0
 800396e:	4618      	mov	r0, r3
 8003970:	f004 f853 	bl	8007a1a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003974:	2300      	movs	r3, #0
 8003976:	73fb      	strb	r3, [r7, #15]
 8003978:	e04a      	b.n	8003a10 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800397a:	7bfa      	ldrb	r2, [r7, #15]
 800397c:	6879      	ldr	r1, [r7, #4]
 800397e:	4613      	mov	r3, r2
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	1a9b      	subs	r3, r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	440b      	add	r3, r1
 8003988:	333d      	adds	r3, #61	; 0x3d
 800398a:	2201      	movs	r2, #1
 800398c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800398e:	7bfa      	ldrb	r2, [r7, #15]
 8003990:	6879      	ldr	r1, [r7, #4]
 8003992:	4613      	mov	r3, r2
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	1a9b      	subs	r3, r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	440b      	add	r3, r1
 800399c:	333c      	adds	r3, #60	; 0x3c
 800399e:	7bfa      	ldrb	r2, [r7, #15]
 80039a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80039a2:	7bfa      	ldrb	r2, [r7, #15]
 80039a4:	7bfb      	ldrb	r3, [r7, #15]
 80039a6:	b298      	uxth	r0, r3
 80039a8:	6879      	ldr	r1, [r7, #4]
 80039aa:	4613      	mov	r3, r2
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	1a9b      	subs	r3, r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	440b      	add	r3, r1
 80039b4:	3342      	adds	r3, #66	; 0x42
 80039b6:	4602      	mov	r2, r0
 80039b8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039ba:	7bfa      	ldrb	r2, [r7, #15]
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	4613      	mov	r3, r2
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	1a9b      	subs	r3, r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	440b      	add	r3, r1
 80039c8:	333f      	adds	r3, #63	; 0x3f
 80039ca:	2200      	movs	r2, #0
 80039cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80039ce:	7bfa      	ldrb	r2, [r7, #15]
 80039d0:	6879      	ldr	r1, [r7, #4]
 80039d2:	4613      	mov	r3, r2
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	1a9b      	subs	r3, r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	440b      	add	r3, r1
 80039dc:	3344      	adds	r3, #68	; 0x44
 80039de:	2200      	movs	r2, #0
 80039e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039e2:	7bfa      	ldrb	r2, [r7, #15]
 80039e4:	6879      	ldr	r1, [r7, #4]
 80039e6:	4613      	mov	r3, r2
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	1a9b      	subs	r3, r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	440b      	add	r3, r1
 80039f0:	3348      	adds	r3, #72	; 0x48
 80039f2:	2200      	movs	r2, #0
 80039f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80039f6:	7bfa      	ldrb	r2, [r7, #15]
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	4613      	mov	r3, r2
 80039fc:	00db      	lsls	r3, r3, #3
 80039fe:	1a9b      	subs	r3, r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	440b      	add	r3, r1
 8003a04:	3350      	adds	r3, #80	; 0x50
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a0a:	7bfb      	ldrb	r3, [r7, #15]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	73fb      	strb	r3, [r7, #15]
 8003a10:	7bfa      	ldrb	r2, [r7, #15]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d3af      	bcc.n	800397a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	73fb      	strb	r3, [r7, #15]
 8003a1e:	e044      	b.n	8003aaa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a20:	7bfa      	ldrb	r2, [r7, #15]
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	4613      	mov	r3, r2
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	1a9b      	subs	r3, r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003a32:	2200      	movs	r2, #0
 8003a34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a36:	7bfa      	ldrb	r2, [r7, #15]
 8003a38:	6879      	ldr	r1, [r7, #4]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	1a9b      	subs	r3, r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	440b      	add	r3, r1
 8003a44:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003a48:	7bfa      	ldrb	r2, [r7, #15]
 8003a4a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a4c:	7bfa      	ldrb	r2, [r7, #15]
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	4613      	mov	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	1a9b      	subs	r3, r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003a5e:	2200      	movs	r2, #0
 8003a60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a62:	7bfa      	ldrb	r2, [r7, #15]
 8003a64:	6879      	ldr	r1, [r7, #4]
 8003a66:	4613      	mov	r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	1a9b      	subs	r3, r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003a74:	2200      	movs	r2, #0
 8003a76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a78:	7bfa      	ldrb	r2, [r7, #15]
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	1a9b      	subs	r3, r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a8e:	7bfa      	ldrb	r2, [r7, #15]
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	4613      	mov	r3, r2
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	1a9b      	subs	r3, r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aa4:	7bfb      	ldrb	r3, [r7, #15]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	73fb      	strb	r3, [r7, #15]
 8003aaa:	7bfa      	ldrb	r2, [r7, #15]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d3b5      	bcc.n	8003a20 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	603b      	str	r3, [r7, #0]
 8003aba:	687e      	ldr	r6, [r7, #4]
 8003abc:	466d      	mov	r5, sp
 8003abe:	f106 0410 	add.w	r4, r6, #16
 8003ac2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ac4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ac8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ace:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ad2:	1d33      	adds	r3, r6, #4
 8003ad4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ad6:	6838      	ldr	r0, [r7, #0]
 8003ad8:	f003 ffca 	bl	8007a70 <USB_DevInit>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d005      	beq.n	8003aee <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e014      	b.n	8003b18 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d102      	bne.n	8003b0c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f80a 	bl	8003b20 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f004 f96c 	bl	8007dee <USB_DevDisconnect>

  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3714      	adds	r7, #20
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b20 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b4e:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <HAL_PCDEx_ActivateLPM+0x44>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	10000003 	.word	0x10000003

08003b68 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003b70:	4b19      	ldr	r3, [pc, #100]	; (8003bd8 <HAL_PWREx_ConfigSupply+0x70>)
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	d00a      	beq.n	8003b92 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003b7c:	4b16      	ldr	r3, [pc, #88]	; (8003bd8 <HAL_PWREx_ConfigSupply+0x70>)
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f003 0307 	and.w	r3, r3, #7
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d001      	beq.n	8003b8e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e01f      	b.n	8003bce <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	e01d      	b.n	8003bce <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003b92:	4b11      	ldr	r3, [pc, #68]	; (8003bd8 <HAL_PWREx_ConfigSupply+0x70>)
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	f023 0207 	bic.w	r2, r3, #7
 8003b9a:	490f      	ldr	r1, [pc, #60]	; (8003bd8 <HAL_PWREx_ConfigSupply+0x70>)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003ba2:	f7fd fd07 	bl	80015b4 <HAL_GetTick>
 8003ba6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003ba8:	e009      	b.n	8003bbe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003baa:	f7fd fd03 	bl	80015b4 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bb8:	d901      	bls.n	8003bbe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e007      	b.n	8003bce <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003bbe:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <HAL_PWREx_ConfigSupply+0x70>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bca:	d1ee      	bne.n	8003baa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	58024800 	.word	0x58024800

08003bdc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003be0:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	4a04      	ldr	r2, [pc, #16]	; (8003bf8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003be6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bea:	60d3      	str	r3, [r2, #12]
}
 8003bec:	bf00      	nop
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	58024800 	.word	0x58024800

08003bfc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b08c      	sub	sp, #48	; 0x30
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e3ff      	b.n	800440e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 8087 	beq.w	8003d2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c1c:	4b99      	ldr	r3, [pc, #612]	; (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c24:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c26:	4b97      	ldr	r3, [pc, #604]	; (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2e:	2b10      	cmp	r3, #16
 8003c30:	d007      	beq.n	8003c42 <HAL_RCC_OscConfig+0x46>
 8003c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c34:	2b18      	cmp	r3, #24
 8003c36:	d110      	bne.n	8003c5a <HAL_RCC_OscConfig+0x5e>
 8003c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3a:	f003 0303 	and.w	r3, r3, #3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d10b      	bne.n	8003c5a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c42:	4b90      	ldr	r3, [pc, #576]	; (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d06c      	beq.n	8003d28 <HAL_RCC_OscConfig+0x12c>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d168      	bne.n	8003d28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e3d9      	b.n	800440e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c62:	d106      	bne.n	8003c72 <HAL_RCC_OscConfig+0x76>
 8003c64:	4b87      	ldr	r3, [pc, #540]	; (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a86      	ldr	r2, [pc, #536]	; (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003c6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c6e:	6013      	str	r3, [r2, #0]
 8003c70:	e02e      	b.n	8003cd0 <HAL_RCC_OscConfig+0xd4>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10c      	bne.n	8003c94 <HAL_RCC_OscConfig+0x98>
 8003c7a:	4b82      	ldr	r3, [pc, #520]	; (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a81      	ldr	r2, [pc, #516]	; (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003c80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c84:	6013      	str	r3, [r2, #0]
 8003c86:	4b7f      	ldr	r3, [pc, #508]	; (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a7e      	ldr	r2, [pc, #504]	; (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003c8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c90:	6013      	str	r3, [r2, #0]
 8003c92:	e01d      	b.n	8003cd0 <HAL_RCC_OscConfig+0xd4>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c9c:	d10c      	bne.n	8003cb8 <HAL_RCC_OscConfig+0xbc>
 8003c9e:	4b79      	ldr	r3, [pc, #484]	; (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a78      	ldr	r2, [pc, #480]	; (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003ca4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	4b76      	ldr	r3, [pc, #472]	; (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a75      	ldr	r2, [pc, #468]	; (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cb4:	6013      	str	r3, [r2, #0]
 8003cb6:	e00b      	b.n	8003cd0 <HAL_RCC_OscConfig+0xd4>
 8003cb8:	4b72      	ldr	r3, [pc, #456]	; (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a71      	ldr	r2, [pc, #452]	; (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cc2:	6013      	str	r3, [r2, #0]
 8003cc4:	4b6f      	ldr	r3, [pc, #444]	; (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a6e      	ldr	r2, [pc, #440]	; (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003cca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d013      	beq.n	8003d00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd8:	f7fd fc6c 	bl	80015b4 <HAL_GetTick>
 8003cdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ce0:	f7fd fc68 	bl	80015b4 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b64      	cmp	r3, #100	; 0x64
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e38d      	b.n	800440e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003cf2:	4b64      	ldr	r3, [pc, #400]	; (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d0f0      	beq.n	8003ce0 <HAL_RCC_OscConfig+0xe4>
 8003cfe:	e014      	b.n	8003d2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d00:	f7fd fc58 	bl	80015b4 <HAL_GetTick>
 8003d04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d08:	f7fd fc54 	bl	80015b4 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b64      	cmp	r3, #100	; 0x64
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e379      	b.n	800440e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d1a:	4b5a      	ldr	r3, [pc, #360]	; (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1f0      	bne.n	8003d08 <HAL_RCC_OscConfig+0x10c>
 8003d26:	e000      	b.n	8003d2a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 80ae 	beq.w	8003e94 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d38:	4b52      	ldr	r3, [pc, #328]	; (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d40:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d42:	4b50      	ldr	r3, [pc, #320]	; (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d46:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003d48:	6a3b      	ldr	r3, [r7, #32]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d007      	beq.n	8003d5e <HAL_RCC_OscConfig+0x162>
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	2b18      	cmp	r3, #24
 8003d52:	d13a      	bne.n	8003dca <HAL_RCC_OscConfig+0x1ce>
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	f003 0303 	and.w	r3, r3, #3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d135      	bne.n	8003dca <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d5e:	4b49      	ldr	r3, [pc, #292]	; (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0304 	and.w	r3, r3, #4
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d005      	beq.n	8003d76 <HAL_RCC_OscConfig+0x17a>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e34b      	b.n	800440e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d76:	f7fd fc4d 	bl	8001614 <HAL_GetREVID>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d817      	bhi.n	8003db4 <HAL_RCC_OscConfig+0x1b8>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	2b40      	cmp	r3, #64	; 0x40
 8003d8a:	d108      	bne.n	8003d9e <HAL_RCC_OscConfig+0x1a2>
 8003d8c:	4b3d      	ldr	r3, [pc, #244]	; (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003d94:	4a3b      	ldr	r2, [pc, #236]	; (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d9a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d9c:	e07a      	b.n	8003e94 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d9e:	4b39      	ldr	r3, [pc, #228]	; (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	031b      	lsls	r3, r3, #12
 8003dac:	4935      	ldr	r1, [pc, #212]	; (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003db2:	e06f      	b.n	8003e94 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db4:	4b33      	ldr	r3, [pc, #204]	; (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	061b      	lsls	r3, r3, #24
 8003dc2:	4930      	ldr	r1, [pc, #192]	; (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dc8:	e064      	b.n	8003e94 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d045      	beq.n	8003e5e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003dd2:	4b2c      	ldr	r3, [pc, #176]	; (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f023 0219 	bic.w	r2, r3, #25
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	4929      	ldr	r1, [pc, #164]	; (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de4:	f7fd fbe6 	bl	80015b4 <HAL_GetTick>
 8003de8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dec:	f7fd fbe2 	bl	80015b4 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e307      	b.n	800440e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003dfe:	4b21      	ldr	r3, [pc, #132]	; (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0304 	and.w	r3, r3, #4
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d0f0      	beq.n	8003dec <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e0a:	f7fd fc03 	bl	8001614 <HAL_GetREVID>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	f241 0203 	movw	r2, #4099	; 0x1003
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d817      	bhi.n	8003e48 <HAL_RCC_OscConfig+0x24c>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	2b40      	cmp	r3, #64	; 0x40
 8003e1e:	d108      	bne.n	8003e32 <HAL_RCC_OscConfig+0x236>
 8003e20:	4b18      	ldr	r3, [pc, #96]	; (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003e28:	4a16      	ldr	r2, [pc, #88]	; (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003e2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e2e:	6053      	str	r3, [r2, #4]
 8003e30:	e030      	b.n	8003e94 <HAL_RCC_OscConfig+0x298>
 8003e32:	4b14      	ldr	r3, [pc, #80]	; (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	031b      	lsls	r3, r3, #12
 8003e40:	4910      	ldr	r1, [pc, #64]	; (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	604b      	str	r3, [r1, #4]
 8003e46:	e025      	b.n	8003e94 <HAL_RCC_OscConfig+0x298>
 8003e48:	4b0e      	ldr	r3, [pc, #56]	; (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	061b      	lsls	r3, r3, #24
 8003e56:	490b      	ldr	r1, [pc, #44]	; (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	604b      	str	r3, [r1, #4]
 8003e5c:	e01a      	b.n	8003e94 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e5e:	4b09      	ldr	r3, [pc, #36]	; (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a08      	ldr	r2, [pc, #32]	; (8003e84 <HAL_RCC_OscConfig+0x288>)
 8003e64:	f023 0301 	bic.w	r3, r3, #1
 8003e68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6a:	f7fd fba3 	bl	80015b4 <HAL_GetTick>
 8003e6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e70:	e00a      	b.n	8003e88 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e72:	f7fd fb9f 	bl	80015b4 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d903      	bls.n	8003e88 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e2c4      	b.n	800440e <HAL_RCC_OscConfig+0x812>
 8003e84:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e88:	4ba4      	ldr	r3, [pc, #656]	; (800411c <HAL_RCC_OscConfig+0x520>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1ee      	bne.n	8003e72 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0310 	and.w	r3, r3, #16
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 80a9 	beq.w	8003ff4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ea2:	4b9e      	ldr	r3, [pc, #632]	; (800411c <HAL_RCC_OscConfig+0x520>)
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003eaa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003eac:	4b9b      	ldr	r3, [pc, #620]	; (800411c <HAL_RCC_OscConfig+0x520>)
 8003eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	d007      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x2cc>
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	2b18      	cmp	r3, #24
 8003ebc:	d13a      	bne.n	8003f34 <HAL_RCC_OscConfig+0x338>
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f003 0303 	and.w	r3, r3, #3
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d135      	bne.n	8003f34 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ec8:	4b94      	ldr	r3, [pc, #592]	; (800411c <HAL_RCC_OscConfig+0x520>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x2e4>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	2b80      	cmp	r3, #128	; 0x80
 8003eda:	d001      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e296      	b.n	800440e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ee0:	f7fd fb98 	bl	8001614 <HAL_GetREVID>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	f241 0203 	movw	r2, #4099	; 0x1003
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d817      	bhi.n	8003f1e <HAL_RCC_OscConfig+0x322>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	2b20      	cmp	r3, #32
 8003ef4:	d108      	bne.n	8003f08 <HAL_RCC_OscConfig+0x30c>
 8003ef6:	4b89      	ldr	r3, [pc, #548]	; (800411c <HAL_RCC_OscConfig+0x520>)
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003efe:	4a87      	ldr	r2, [pc, #540]	; (800411c <HAL_RCC_OscConfig+0x520>)
 8003f00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f04:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f06:	e075      	b.n	8003ff4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f08:	4b84      	ldr	r3, [pc, #528]	; (800411c <HAL_RCC_OscConfig+0x520>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	069b      	lsls	r3, r3, #26
 8003f16:	4981      	ldr	r1, [pc, #516]	; (800411c <HAL_RCC_OscConfig+0x520>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f1c:	e06a      	b.n	8003ff4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f1e:	4b7f      	ldr	r3, [pc, #508]	; (800411c <HAL_RCC_OscConfig+0x520>)
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	061b      	lsls	r3, r3, #24
 8003f2c:	497b      	ldr	r1, [pc, #492]	; (800411c <HAL_RCC_OscConfig+0x520>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f32:	e05f      	b.n	8003ff4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	69db      	ldr	r3, [r3, #28]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d042      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003f3c:	4b77      	ldr	r3, [pc, #476]	; (800411c <HAL_RCC_OscConfig+0x520>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a76      	ldr	r2, [pc, #472]	; (800411c <HAL_RCC_OscConfig+0x520>)
 8003f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f48:	f7fd fb34 	bl	80015b4 <HAL_GetTick>
 8003f4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003f50:	f7fd fb30 	bl	80015b4 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e255      	b.n	800440e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f62:	4b6e      	ldr	r3, [pc, #440]	; (800411c <HAL_RCC_OscConfig+0x520>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0f0      	beq.n	8003f50 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f6e:	f7fd fb51 	bl	8001614 <HAL_GetREVID>
 8003f72:	4603      	mov	r3, r0
 8003f74:	f241 0203 	movw	r2, #4099	; 0x1003
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d817      	bhi.n	8003fac <HAL_RCC_OscConfig+0x3b0>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	2b20      	cmp	r3, #32
 8003f82:	d108      	bne.n	8003f96 <HAL_RCC_OscConfig+0x39a>
 8003f84:	4b65      	ldr	r3, [pc, #404]	; (800411c <HAL_RCC_OscConfig+0x520>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003f8c:	4a63      	ldr	r2, [pc, #396]	; (800411c <HAL_RCC_OscConfig+0x520>)
 8003f8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f92:	6053      	str	r3, [r2, #4]
 8003f94:	e02e      	b.n	8003ff4 <HAL_RCC_OscConfig+0x3f8>
 8003f96:	4b61      	ldr	r3, [pc, #388]	; (800411c <HAL_RCC_OscConfig+0x520>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	069b      	lsls	r3, r3, #26
 8003fa4:	495d      	ldr	r1, [pc, #372]	; (800411c <HAL_RCC_OscConfig+0x520>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	604b      	str	r3, [r1, #4]
 8003faa:	e023      	b.n	8003ff4 <HAL_RCC_OscConfig+0x3f8>
 8003fac:	4b5b      	ldr	r3, [pc, #364]	; (800411c <HAL_RCC_OscConfig+0x520>)
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	061b      	lsls	r3, r3, #24
 8003fba:	4958      	ldr	r1, [pc, #352]	; (800411c <HAL_RCC_OscConfig+0x520>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	60cb      	str	r3, [r1, #12]
 8003fc0:	e018      	b.n	8003ff4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003fc2:	4b56      	ldr	r3, [pc, #344]	; (800411c <HAL_RCC_OscConfig+0x520>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a55      	ldr	r2, [pc, #340]	; (800411c <HAL_RCC_OscConfig+0x520>)
 8003fc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fce:	f7fd faf1 	bl	80015b4 <HAL_GetTick>
 8003fd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003fd4:	e008      	b.n	8003fe8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003fd6:	f7fd faed 	bl	80015b4 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d901      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e212      	b.n	800440e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003fe8:	4b4c      	ldr	r3, [pc, #304]	; (800411c <HAL_RCC_OscConfig+0x520>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1f0      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0308 	and.w	r3, r3, #8
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d036      	beq.n	800406e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d019      	beq.n	800403c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004008:	4b44      	ldr	r3, [pc, #272]	; (800411c <HAL_RCC_OscConfig+0x520>)
 800400a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800400c:	4a43      	ldr	r2, [pc, #268]	; (800411c <HAL_RCC_OscConfig+0x520>)
 800400e:	f043 0301 	orr.w	r3, r3, #1
 8004012:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004014:	f7fd face 	bl	80015b4 <HAL_GetTick>
 8004018:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800401a:	e008      	b.n	800402e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800401c:	f7fd faca 	bl	80015b4 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b02      	cmp	r3, #2
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e1ef      	b.n	800440e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800402e:	4b3b      	ldr	r3, [pc, #236]	; (800411c <HAL_RCC_OscConfig+0x520>)
 8004030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d0f0      	beq.n	800401c <HAL_RCC_OscConfig+0x420>
 800403a:	e018      	b.n	800406e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800403c:	4b37      	ldr	r3, [pc, #220]	; (800411c <HAL_RCC_OscConfig+0x520>)
 800403e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004040:	4a36      	ldr	r2, [pc, #216]	; (800411c <HAL_RCC_OscConfig+0x520>)
 8004042:	f023 0301 	bic.w	r3, r3, #1
 8004046:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004048:	f7fd fab4 	bl	80015b4 <HAL_GetTick>
 800404c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004050:	f7fd fab0 	bl	80015b4 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e1d5      	b.n	800440e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004062:	4b2e      	ldr	r3, [pc, #184]	; (800411c <HAL_RCC_OscConfig+0x520>)
 8004064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1f0      	bne.n	8004050 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0320 	and.w	r3, r3, #32
 8004076:	2b00      	cmp	r3, #0
 8004078:	d036      	beq.n	80040e8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d019      	beq.n	80040b6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004082:	4b26      	ldr	r3, [pc, #152]	; (800411c <HAL_RCC_OscConfig+0x520>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a25      	ldr	r2, [pc, #148]	; (800411c <HAL_RCC_OscConfig+0x520>)
 8004088:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800408c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800408e:	f7fd fa91 	bl	80015b4 <HAL_GetTick>
 8004092:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004094:	e008      	b.n	80040a8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004096:	f7fd fa8d 	bl	80015b4 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e1b2      	b.n	800440e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80040a8:	4b1c      	ldr	r3, [pc, #112]	; (800411c <HAL_RCC_OscConfig+0x520>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d0f0      	beq.n	8004096 <HAL_RCC_OscConfig+0x49a>
 80040b4:	e018      	b.n	80040e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80040b6:	4b19      	ldr	r3, [pc, #100]	; (800411c <HAL_RCC_OscConfig+0x520>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a18      	ldr	r2, [pc, #96]	; (800411c <HAL_RCC_OscConfig+0x520>)
 80040bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040c0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80040c2:	f7fd fa77 	bl	80015b4 <HAL_GetTick>
 80040c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80040c8:	e008      	b.n	80040dc <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80040ca:	f7fd fa73 	bl	80015b4 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e198      	b.n	800440e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80040dc:	4b0f      	ldr	r3, [pc, #60]	; (800411c <HAL_RCC_OscConfig+0x520>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1f0      	bne.n	80040ca <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 8085 	beq.w	8004200 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80040f6:	4b0a      	ldr	r3, [pc, #40]	; (8004120 <HAL_RCC_OscConfig+0x524>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a09      	ldr	r2, [pc, #36]	; (8004120 <HAL_RCC_OscConfig+0x524>)
 80040fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004100:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004102:	f7fd fa57 	bl	80015b4 <HAL_GetTick>
 8004106:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004108:	e00c      	b.n	8004124 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800410a:	f7fd fa53 	bl	80015b4 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b64      	cmp	r3, #100	; 0x64
 8004116:	d905      	bls.n	8004124 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e178      	b.n	800440e <HAL_RCC_OscConfig+0x812>
 800411c:	58024400 	.word	0x58024400
 8004120:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004124:	4b96      	ldr	r3, [pc, #600]	; (8004380 <HAL_RCC_OscConfig+0x784>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0ec      	beq.n	800410a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d106      	bne.n	8004146 <HAL_RCC_OscConfig+0x54a>
 8004138:	4b92      	ldr	r3, [pc, #584]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 800413a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800413c:	4a91      	ldr	r2, [pc, #580]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 800413e:	f043 0301 	orr.w	r3, r3, #1
 8004142:	6713      	str	r3, [r2, #112]	; 0x70
 8004144:	e02d      	b.n	80041a2 <HAL_RCC_OscConfig+0x5a6>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10c      	bne.n	8004168 <HAL_RCC_OscConfig+0x56c>
 800414e:	4b8d      	ldr	r3, [pc, #564]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 8004150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004152:	4a8c      	ldr	r2, [pc, #560]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 8004154:	f023 0301 	bic.w	r3, r3, #1
 8004158:	6713      	str	r3, [r2, #112]	; 0x70
 800415a:	4b8a      	ldr	r3, [pc, #552]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 800415c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415e:	4a89      	ldr	r2, [pc, #548]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 8004160:	f023 0304 	bic.w	r3, r3, #4
 8004164:	6713      	str	r3, [r2, #112]	; 0x70
 8004166:	e01c      	b.n	80041a2 <HAL_RCC_OscConfig+0x5a6>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	2b05      	cmp	r3, #5
 800416e:	d10c      	bne.n	800418a <HAL_RCC_OscConfig+0x58e>
 8004170:	4b84      	ldr	r3, [pc, #528]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 8004172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004174:	4a83      	ldr	r2, [pc, #524]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 8004176:	f043 0304 	orr.w	r3, r3, #4
 800417a:	6713      	str	r3, [r2, #112]	; 0x70
 800417c:	4b81      	ldr	r3, [pc, #516]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 800417e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004180:	4a80      	ldr	r2, [pc, #512]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 8004182:	f043 0301 	orr.w	r3, r3, #1
 8004186:	6713      	str	r3, [r2, #112]	; 0x70
 8004188:	e00b      	b.n	80041a2 <HAL_RCC_OscConfig+0x5a6>
 800418a:	4b7e      	ldr	r3, [pc, #504]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 800418c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418e:	4a7d      	ldr	r2, [pc, #500]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 8004190:	f023 0301 	bic.w	r3, r3, #1
 8004194:	6713      	str	r3, [r2, #112]	; 0x70
 8004196:	4b7b      	ldr	r3, [pc, #492]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 8004198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419a:	4a7a      	ldr	r2, [pc, #488]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 800419c:	f023 0304 	bic.w	r3, r3, #4
 80041a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d015      	beq.n	80041d6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041aa:	f7fd fa03 	bl	80015b4 <HAL_GetTick>
 80041ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041b0:	e00a      	b.n	80041c8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041b2:	f7fd f9ff 	bl	80015b4 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e122      	b.n	800440e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041c8:	4b6e      	ldr	r3, [pc, #440]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 80041ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0ee      	beq.n	80041b2 <HAL_RCC_OscConfig+0x5b6>
 80041d4:	e014      	b.n	8004200 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d6:	f7fd f9ed 	bl	80015b4 <HAL_GetTick>
 80041da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80041dc:	e00a      	b.n	80041f4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041de:	f7fd f9e9 	bl	80015b4 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e10c      	b.n	800440e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80041f4:	4b63      	ldr	r3, [pc, #396]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 80041f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1ee      	bne.n	80041de <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 8101 	beq.w	800440c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800420a:	4b5e      	ldr	r3, [pc, #376]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004212:	2b18      	cmp	r3, #24
 8004214:	f000 80bc 	beq.w	8004390 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	2b02      	cmp	r3, #2
 800421e:	f040 8095 	bne.w	800434c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004222:	4b58      	ldr	r3, [pc, #352]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a57      	ldr	r2, [pc, #348]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 8004228:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800422c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422e:	f7fd f9c1 	bl	80015b4 <HAL_GetTick>
 8004232:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004234:	e008      	b.n	8004248 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004236:	f7fd f9bd 	bl	80015b4 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e0e2      	b.n	800440e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004248:	4b4e      	ldr	r3, [pc, #312]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1f0      	bne.n	8004236 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004254:	4b4b      	ldr	r3, [pc, #300]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 8004256:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004258:	4b4b      	ldr	r3, [pc, #300]	; (8004388 <HAL_RCC_OscConfig+0x78c>)
 800425a:	4013      	ands	r3, r2
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004264:	0112      	lsls	r2, r2, #4
 8004266:	430a      	orrs	r2, r1
 8004268:	4946      	ldr	r1, [pc, #280]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 800426a:	4313      	orrs	r3, r2
 800426c:	628b      	str	r3, [r1, #40]	; 0x28
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004272:	3b01      	subs	r3, #1
 8004274:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800427c:	3b01      	subs	r3, #1
 800427e:	025b      	lsls	r3, r3, #9
 8004280:	b29b      	uxth	r3, r3
 8004282:	431a      	orrs	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004288:	3b01      	subs	r3, #1
 800428a:	041b      	lsls	r3, r3, #16
 800428c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004290:	431a      	orrs	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004296:	3b01      	subs	r3, #1
 8004298:	061b      	lsls	r3, r3, #24
 800429a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800429e:	4939      	ldr	r1, [pc, #228]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80042a4:	4b37      	ldr	r3, [pc, #220]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 80042a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a8:	4a36      	ldr	r2, [pc, #216]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 80042aa:	f023 0301 	bic.w	r3, r3, #1
 80042ae:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80042b0:	4b34      	ldr	r3, [pc, #208]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 80042b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042b4:	4b35      	ldr	r3, [pc, #212]	; (800438c <HAL_RCC_OscConfig+0x790>)
 80042b6:	4013      	ands	r3, r2
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80042bc:	00d2      	lsls	r2, r2, #3
 80042be:	4931      	ldr	r1, [pc, #196]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80042c4:	4b2f      	ldr	r3, [pc, #188]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 80042c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c8:	f023 020c 	bic.w	r2, r3, #12
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d0:	492c      	ldr	r1, [pc, #176]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80042d6:	4b2b      	ldr	r3, [pc, #172]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 80042d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042da:	f023 0202 	bic.w	r2, r3, #2
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e2:	4928      	ldr	r1, [pc, #160]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80042e8:	4b26      	ldr	r3, [pc, #152]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 80042ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ec:	4a25      	ldr	r2, [pc, #148]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 80042ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042f4:	4b23      	ldr	r3, [pc, #140]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 80042f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f8:	4a22      	ldr	r2, [pc, #136]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 80042fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004300:	4b20      	ldr	r3, [pc, #128]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	4a1f      	ldr	r2, [pc, #124]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 8004306:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800430a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800430c:	4b1d      	ldr	r3, [pc, #116]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 800430e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004310:	4a1c      	ldr	r2, [pc, #112]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 8004312:	f043 0301 	orr.w	r3, r3, #1
 8004316:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004318:	4b1a      	ldr	r3, [pc, #104]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a19      	ldr	r2, [pc, #100]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 800431e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004324:	f7fd f946 	bl	80015b4 <HAL_GetTick>
 8004328:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800432c:	f7fd f942 	bl	80015b4 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e067      	b.n	800440e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800433e:	4b11      	ldr	r3, [pc, #68]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0f0      	beq.n	800432c <HAL_RCC_OscConfig+0x730>
 800434a:	e05f      	b.n	800440c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800434c:	4b0d      	ldr	r3, [pc, #52]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a0c      	ldr	r2, [pc, #48]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 8004352:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004356:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004358:	f7fd f92c 	bl	80015b4 <HAL_GetTick>
 800435c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800435e:	e008      	b.n	8004372 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004360:	f7fd f928 	bl	80015b4 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e04d      	b.n	800440e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004372:	4b04      	ldr	r3, [pc, #16]	; (8004384 <HAL_RCC_OscConfig+0x788>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1f0      	bne.n	8004360 <HAL_RCC_OscConfig+0x764>
 800437e:	e045      	b.n	800440c <HAL_RCC_OscConfig+0x810>
 8004380:	58024800 	.word	0x58024800
 8004384:	58024400 	.word	0x58024400
 8004388:	fffffc0c 	.word	0xfffffc0c
 800438c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004390:	4b21      	ldr	r3, [pc, #132]	; (8004418 <HAL_RCC_OscConfig+0x81c>)
 8004392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004394:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004396:	4b20      	ldr	r3, [pc, #128]	; (8004418 <HAL_RCC_OscConfig+0x81c>)
 8004398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d031      	beq.n	8004408 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	f003 0203 	and.w	r2, r3, #3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d12a      	bne.n	8004408 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	091b      	lsrs	r3, r3, #4
 80043b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043be:	429a      	cmp	r2, r3
 80043c0:	d122      	bne.n	8004408 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043cc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d11a      	bne.n	8004408 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	0a5b      	lsrs	r3, r3, #9
 80043d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043de:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d111      	bne.n	8004408 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	0c1b      	lsrs	r3, r3, #16
 80043e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d108      	bne.n	8004408 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	0e1b      	lsrs	r3, r3, #24
 80043fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004402:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004404:	429a      	cmp	r2, r3
 8004406:	d001      	beq.n	800440c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e000      	b.n	800440e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3730      	adds	r7, #48	; 0x30
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	58024400 	.word	0x58024400

0800441c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e19c      	b.n	800476a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004430:	4b8a      	ldr	r3, [pc, #552]	; (800465c <HAL_RCC_ClockConfig+0x240>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 030f 	and.w	r3, r3, #15
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	429a      	cmp	r2, r3
 800443c:	d910      	bls.n	8004460 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800443e:	4b87      	ldr	r3, [pc, #540]	; (800465c <HAL_RCC_ClockConfig+0x240>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f023 020f 	bic.w	r2, r3, #15
 8004446:	4985      	ldr	r1, [pc, #532]	; (800465c <HAL_RCC_ClockConfig+0x240>)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	4313      	orrs	r3, r2
 800444c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800444e:	4b83      	ldr	r3, [pc, #524]	; (800465c <HAL_RCC_ClockConfig+0x240>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 030f 	and.w	r3, r3, #15
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	429a      	cmp	r2, r3
 800445a:	d001      	beq.n	8004460 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e184      	b.n	800476a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0304 	and.w	r3, r3, #4
 8004468:	2b00      	cmp	r3, #0
 800446a:	d010      	beq.n	800448e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	691a      	ldr	r2, [r3, #16]
 8004470:	4b7b      	ldr	r3, [pc, #492]	; (8004660 <HAL_RCC_ClockConfig+0x244>)
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004478:	429a      	cmp	r2, r3
 800447a:	d908      	bls.n	800448e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800447c:	4b78      	ldr	r3, [pc, #480]	; (8004660 <HAL_RCC_ClockConfig+0x244>)
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	4975      	ldr	r1, [pc, #468]	; (8004660 <HAL_RCC_ClockConfig+0x244>)
 800448a:	4313      	orrs	r3, r2
 800448c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0308 	and.w	r3, r3, #8
 8004496:	2b00      	cmp	r3, #0
 8004498:	d010      	beq.n	80044bc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	695a      	ldr	r2, [r3, #20]
 800449e:	4b70      	ldr	r3, [pc, #448]	; (8004660 <HAL_RCC_ClockConfig+0x244>)
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d908      	bls.n	80044bc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80044aa:	4b6d      	ldr	r3, [pc, #436]	; (8004660 <HAL_RCC_ClockConfig+0x244>)
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	496a      	ldr	r1, [pc, #424]	; (8004660 <HAL_RCC_ClockConfig+0x244>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0310 	and.w	r3, r3, #16
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d010      	beq.n	80044ea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	699a      	ldr	r2, [r3, #24]
 80044cc:	4b64      	ldr	r3, [pc, #400]	; (8004660 <HAL_RCC_ClockConfig+0x244>)
 80044ce:	69db      	ldr	r3, [r3, #28]
 80044d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d908      	bls.n	80044ea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80044d8:	4b61      	ldr	r3, [pc, #388]	; (8004660 <HAL_RCC_ClockConfig+0x244>)
 80044da:	69db      	ldr	r3, [r3, #28]
 80044dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	495e      	ldr	r1, [pc, #376]	; (8004660 <HAL_RCC_ClockConfig+0x244>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0320 	and.w	r3, r3, #32
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d010      	beq.n	8004518 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	69da      	ldr	r2, [r3, #28]
 80044fa:	4b59      	ldr	r3, [pc, #356]	; (8004660 <HAL_RCC_ClockConfig+0x244>)
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004502:	429a      	cmp	r2, r3
 8004504:	d908      	bls.n	8004518 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004506:	4b56      	ldr	r3, [pc, #344]	; (8004660 <HAL_RCC_ClockConfig+0x244>)
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	4953      	ldr	r1, [pc, #332]	; (8004660 <HAL_RCC_ClockConfig+0x244>)
 8004514:	4313      	orrs	r3, r2
 8004516:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d010      	beq.n	8004546 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	68da      	ldr	r2, [r3, #12]
 8004528:	4b4d      	ldr	r3, [pc, #308]	; (8004660 <HAL_RCC_ClockConfig+0x244>)
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	f003 030f 	and.w	r3, r3, #15
 8004530:	429a      	cmp	r2, r3
 8004532:	d908      	bls.n	8004546 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004534:	4b4a      	ldr	r3, [pc, #296]	; (8004660 <HAL_RCC_ClockConfig+0x244>)
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	f023 020f 	bic.w	r2, r3, #15
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	4947      	ldr	r1, [pc, #284]	; (8004660 <HAL_RCC_ClockConfig+0x244>)
 8004542:	4313      	orrs	r3, r2
 8004544:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d055      	beq.n	80045fe <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004552:	4b43      	ldr	r3, [pc, #268]	; (8004660 <HAL_RCC_ClockConfig+0x244>)
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	4940      	ldr	r1, [pc, #256]	; (8004660 <HAL_RCC_ClockConfig+0x244>)
 8004560:	4313      	orrs	r3, r2
 8004562:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	2b02      	cmp	r3, #2
 800456a:	d107      	bne.n	800457c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800456c:	4b3c      	ldr	r3, [pc, #240]	; (8004660 <HAL_RCC_ClockConfig+0x244>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d121      	bne.n	80045bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e0f6      	b.n	800476a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	2b03      	cmp	r3, #3
 8004582:	d107      	bne.n	8004594 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004584:	4b36      	ldr	r3, [pc, #216]	; (8004660 <HAL_RCC_ClockConfig+0x244>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d115      	bne.n	80045bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e0ea      	b.n	800476a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d107      	bne.n	80045ac <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800459c:	4b30      	ldr	r3, [pc, #192]	; (8004660 <HAL_RCC_ClockConfig+0x244>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d109      	bne.n	80045bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e0de      	b.n	800476a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045ac:	4b2c      	ldr	r3, [pc, #176]	; (8004660 <HAL_RCC_ClockConfig+0x244>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e0d6      	b.n	800476a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045bc:	4b28      	ldr	r3, [pc, #160]	; (8004660 <HAL_RCC_ClockConfig+0x244>)
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	f023 0207 	bic.w	r2, r3, #7
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	4925      	ldr	r1, [pc, #148]	; (8004660 <HAL_RCC_ClockConfig+0x244>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ce:	f7fc fff1 	bl	80015b4 <HAL_GetTick>
 80045d2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045d4:	e00a      	b.n	80045ec <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045d6:	f7fc ffed 	bl	80015b4 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e0be      	b.n	800476a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ec:	4b1c      	ldr	r3, [pc, #112]	; (8004660 <HAL_RCC_ClockConfig+0x244>)
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	00db      	lsls	r3, r3, #3
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d1eb      	bne.n	80045d6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d010      	beq.n	800462c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68da      	ldr	r2, [r3, #12]
 800460e:	4b14      	ldr	r3, [pc, #80]	; (8004660 <HAL_RCC_ClockConfig+0x244>)
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	f003 030f 	and.w	r3, r3, #15
 8004616:	429a      	cmp	r2, r3
 8004618:	d208      	bcs.n	800462c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800461a:	4b11      	ldr	r3, [pc, #68]	; (8004660 <HAL_RCC_ClockConfig+0x244>)
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	f023 020f 	bic.w	r2, r3, #15
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	490e      	ldr	r1, [pc, #56]	; (8004660 <HAL_RCC_ClockConfig+0x244>)
 8004628:	4313      	orrs	r3, r2
 800462a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800462c:	4b0b      	ldr	r3, [pc, #44]	; (800465c <HAL_RCC_ClockConfig+0x240>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 030f 	and.w	r3, r3, #15
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	429a      	cmp	r2, r3
 8004638:	d214      	bcs.n	8004664 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800463a:	4b08      	ldr	r3, [pc, #32]	; (800465c <HAL_RCC_ClockConfig+0x240>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f023 020f 	bic.w	r2, r3, #15
 8004642:	4906      	ldr	r1, [pc, #24]	; (800465c <HAL_RCC_ClockConfig+0x240>)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	4313      	orrs	r3, r2
 8004648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800464a:	4b04      	ldr	r3, [pc, #16]	; (800465c <HAL_RCC_ClockConfig+0x240>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 030f 	and.w	r3, r3, #15
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	429a      	cmp	r2, r3
 8004656:	d005      	beq.n	8004664 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e086      	b.n	800476a <HAL_RCC_ClockConfig+0x34e>
 800465c:	52002000 	.word	0x52002000
 8004660:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0304 	and.w	r3, r3, #4
 800466c:	2b00      	cmp	r3, #0
 800466e:	d010      	beq.n	8004692 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691a      	ldr	r2, [r3, #16]
 8004674:	4b3f      	ldr	r3, [pc, #252]	; (8004774 <HAL_RCC_ClockConfig+0x358>)
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800467c:	429a      	cmp	r2, r3
 800467e:	d208      	bcs.n	8004692 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004680:	4b3c      	ldr	r3, [pc, #240]	; (8004774 <HAL_RCC_ClockConfig+0x358>)
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	4939      	ldr	r1, [pc, #228]	; (8004774 <HAL_RCC_ClockConfig+0x358>)
 800468e:	4313      	orrs	r3, r2
 8004690:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0308 	and.w	r3, r3, #8
 800469a:	2b00      	cmp	r3, #0
 800469c:	d010      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	695a      	ldr	r2, [r3, #20]
 80046a2:	4b34      	ldr	r3, [pc, #208]	; (8004774 <HAL_RCC_ClockConfig+0x358>)
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d208      	bcs.n	80046c0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80046ae:	4b31      	ldr	r3, [pc, #196]	; (8004774 <HAL_RCC_ClockConfig+0x358>)
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	492e      	ldr	r1, [pc, #184]	; (8004774 <HAL_RCC_ClockConfig+0x358>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0310 	and.w	r3, r3, #16
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d010      	beq.n	80046ee <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	699a      	ldr	r2, [r3, #24]
 80046d0:	4b28      	ldr	r3, [pc, #160]	; (8004774 <HAL_RCC_ClockConfig+0x358>)
 80046d2:	69db      	ldr	r3, [r3, #28]
 80046d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046d8:	429a      	cmp	r2, r3
 80046da:	d208      	bcs.n	80046ee <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80046dc:	4b25      	ldr	r3, [pc, #148]	; (8004774 <HAL_RCC_ClockConfig+0x358>)
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	4922      	ldr	r1, [pc, #136]	; (8004774 <HAL_RCC_ClockConfig+0x358>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0320 	and.w	r3, r3, #32
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d010      	beq.n	800471c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	69da      	ldr	r2, [r3, #28]
 80046fe:	4b1d      	ldr	r3, [pc, #116]	; (8004774 <HAL_RCC_ClockConfig+0x358>)
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004706:	429a      	cmp	r2, r3
 8004708:	d208      	bcs.n	800471c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800470a:	4b1a      	ldr	r3, [pc, #104]	; (8004774 <HAL_RCC_ClockConfig+0x358>)
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	4917      	ldr	r1, [pc, #92]	; (8004774 <HAL_RCC_ClockConfig+0x358>)
 8004718:	4313      	orrs	r3, r2
 800471a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800471c:	f000 f834 	bl	8004788 <HAL_RCC_GetSysClockFreq>
 8004720:	4602      	mov	r2, r0
 8004722:	4b14      	ldr	r3, [pc, #80]	; (8004774 <HAL_RCC_ClockConfig+0x358>)
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	0a1b      	lsrs	r3, r3, #8
 8004728:	f003 030f 	and.w	r3, r3, #15
 800472c:	4912      	ldr	r1, [pc, #72]	; (8004778 <HAL_RCC_ClockConfig+0x35c>)
 800472e:	5ccb      	ldrb	r3, [r1, r3]
 8004730:	f003 031f 	and.w	r3, r3, #31
 8004734:	fa22 f303 	lsr.w	r3, r2, r3
 8004738:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800473a:	4b0e      	ldr	r3, [pc, #56]	; (8004774 <HAL_RCC_ClockConfig+0x358>)
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	f003 030f 	and.w	r3, r3, #15
 8004742:	4a0d      	ldr	r2, [pc, #52]	; (8004778 <HAL_RCC_ClockConfig+0x35c>)
 8004744:	5cd3      	ldrb	r3, [r2, r3]
 8004746:	f003 031f 	and.w	r3, r3, #31
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	fa22 f303 	lsr.w	r3, r2, r3
 8004750:	4a0a      	ldr	r2, [pc, #40]	; (800477c <HAL_RCC_ClockConfig+0x360>)
 8004752:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004754:	4a0a      	ldr	r2, [pc, #40]	; (8004780 <HAL_RCC_ClockConfig+0x364>)
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800475a:	4b0a      	ldr	r3, [pc, #40]	; (8004784 <HAL_RCC_ClockConfig+0x368>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4618      	mov	r0, r3
 8004760:	f7fc fb70 	bl	8000e44 <HAL_InitTick>
 8004764:	4603      	mov	r3, r0
 8004766:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004768:	7bfb      	ldrb	r3, [r7, #15]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3718      	adds	r7, #24
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	58024400 	.word	0x58024400
 8004778:	080269f0 	.word	0x080269f0
 800477c:	20000004 	.word	0x20000004
 8004780:	20000000 	.word	0x20000000
 8004784:	20000008 	.word	0x20000008

08004788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004788:	b480      	push	{r7}
 800478a:	b089      	sub	sp, #36	; 0x24
 800478c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800478e:	4bb3      	ldr	r3, [pc, #716]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004796:	2b18      	cmp	r3, #24
 8004798:	f200 8155 	bhi.w	8004a46 <HAL_RCC_GetSysClockFreq+0x2be>
 800479c:	a201      	add	r2, pc, #4	; (adr r2, 80047a4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800479e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a2:	bf00      	nop
 80047a4:	08004809 	.word	0x08004809
 80047a8:	08004a47 	.word	0x08004a47
 80047ac:	08004a47 	.word	0x08004a47
 80047b0:	08004a47 	.word	0x08004a47
 80047b4:	08004a47 	.word	0x08004a47
 80047b8:	08004a47 	.word	0x08004a47
 80047bc:	08004a47 	.word	0x08004a47
 80047c0:	08004a47 	.word	0x08004a47
 80047c4:	0800482f 	.word	0x0800482f
 80047c8:	08004a47 	.word	0x08004a47
 80047cc:	08004a47 	.word	0x08004a47
 80047d0:	08004a47 	.word	0x08004a47
 80047d4:	08004a47 	.word	0x08004a47
 80047d8:	08004a47 	.word	0x08004a47
 80047dc:	08004a47 	.word	0x08004a47
 80047e0:	08004a47 	.word	0x08004a47
 80047e4:	08004835 	.word	0x08004835
 80047e8:	08004a47 	.word	0x08004a47
 80047ec:	08004a47 	.word	0x08004a47
 80047f0:	08004a47 	.word	0x08004a47
 80047f4:	08004a47 	.word	0x08004a47
 80047f8:	08004a47 	.word	0x08004a47
 80047fc:	08004a47 	.word	0x08004a47
 8004800:	08004a47 	.word	0x08004a47
 8004804:	0800483b 	.word	0x0800483b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004808:	4b94      	ldr	r3, [pc, #592]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0320 	and.w	r3, r3, #32
 8004810:	2b00      	cmp	r3, #0
 8004812:	d009      	beq.n	8004828 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004814:	4b91      	ldr	r3, [pc, #580]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	08db      	lsrs	r3, r3, #3
 800481a:	f003 0303 	and.w	r3, r3, #3
 800481e:	4a90      	ldr	r2, [pc, #576]	; (8004a60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004820:	fa22 f303 	lsr.w	r3, r2, r3
 8004824:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004826:	e111      	b.n	8004a4c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004828:	4b8d      	ldr	r3, [pc, #564]	; (8004a60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800482a:	61bb      	str	r3, [r7, #24]
    break;
 800482c:	e10e      	b.n	8004a4c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800482e:	4b8d      	ldr	r3, [pc, #564]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004830:	61bb      	str	r3, [r7, #24]
    break;
 8004832:	e10b      	b.n	8004a4c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004834:	4b8c      	ldr	r3, [pc, #560]	; (8004a68 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004836:	61bb      	str	r3, [r7, #24]
    break;
 8004838:	e108      	b.n	8004a4c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800483a:	4b88      	ldr	r3, [pc, #544]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800483c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483e:	f003 0303 	and.w	r3, r3, #3
 8004842:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004844:	4b85      	ldr	r3, [pc, #532]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004848:	091b      	lsrs	r3, r3, #4
 800484a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800484e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004850:	4b82      	ldr	r3, [pc, #520]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800485a:	4b80      	ldr	r3, [pc, #512]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800485c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800485e:	08db      	lsrs	r3, r3, #3
 8004860:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	fb02 f303 	mul.w	r3, r2, r3
 800486a:	ee07 3a90 	vmov	s15, r3
 800486e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004872:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 80e1 	beq.w	8004a40 <HAL_RCC_GetSysClockFreq+0x2b8>
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	2b02      	cmp	r3, #2
 8004882:	f000 8083 	beq.w	800498c <HAL_RCC_GetSysClockFreq+0x204>
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	2b02      	cmp	r3, #2
 800488a:	f200 80a1 	bhi.w	80049d0 <HAL_RCC_GetSysClockFreq+0x248>
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d003      	beq.n	800489c <HAL_RCC_GetSysClockFreq+0x114>
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d056      	beq.n	8004948 <HAL_RCC_GetSysClockFreq+0x1c0>
 800489a:	e099      	b.n	80049d0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800489c:	4b6f      	ldr	r3, [pc, #444]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0320 	and.w	r3, r3, #32
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d02d      	beq.n	8004904 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80048a8:	4b6c      	ldr	r3, [pc, #432]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	08db      	lsrs	r3, r3, #3
 80048ae:	f003 0303 	and.w	r3, r3, #3
 80048b2:	4a6b      	ldr	r2, [pc, #428]	; (8004a60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80048b4:	fa22 f303 	lsr.w	r3, r2, r3
 80048b8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	ee07 3a90 	vmov	s15, r3
 80048c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	ee07 3a90 	vmov	s15, r3
 80048ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048d2:	4b62      	ldr	r3, [pc, #392]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048da:	ee07 3a90 	vmov	s15, r3
 80048de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80048e6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004a6c <HAL_RCC_GetSysClockFreq+0x2e4>
 80048ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004902:	e087      	b.n	8004a14 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	ee07 3a90 	vmov	s15, r3
 800490a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800490e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004a70 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004916:	4b51      	ldr	r3, [pc, #324]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800491e:	ee07 3a90 	vmov	s15, r3
 8004922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004926:	ed97 6a02 	vldr	s12, [r7, #8]
 800492a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004a6c <HAL_RCC_GetSysClockFreq+0x2e4>
 800492e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800493a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800493e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004942:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004946:	e065      	b.n	8004a14 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	ee07 3a90 	vmov	s15, r3
 800494e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004952:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004a74 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800495a:	4b40      	ldr	r3, [pc, #256]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800495c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004962:	ee07 3a90 	vmov	s15, r3
 8004966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800496a:	ed97 6a02 	vldr	s12, [r7, #8]
 800496e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004a6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800497a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800497e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004986:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800498a:	e043      	b.n	8004a14 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	ee07 3a90 	vmov	s15, r3
 8004992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004996:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004a78 <HAL_RCC_GetSysClockFreq+0x2f0>
 800499a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800499e:	4b2f      	ldr	r3, [pc, #188]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a6:	ee07 3a90 	vmov	s15, r3
 80049aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80049b2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004a6c <HAL_RCC_GetSysClockFreq+0x2e4>
 80049b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049ce:	e021      	b.n	8004a14 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	ee07 3a90 	vmov	s15, r3
 80049d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049da:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004a74 <HAL_RCC_GetSysClockFreq+0x2ec>
 80049de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049e2:	4b1e      	ldr	r3, [pc, #120]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ea:	ee07 3a90 	vmov	s15, r3
 80049ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80049f6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004a6c <HAL_RCC_GetSysClockFreq+0x2e4>
 80049fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a12:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004a14:	4b11      	ldr	r3, [pc, #68]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a18:	0a5b      	lsrs	r3, r3, #9
 8004a1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a1e:	3301      	adds	r3, #1
 8004a20:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	ee07 3a90 	vmov	s15, r3
 8004a28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a38:	ee17 3a90 	vmov	r3, s15
 8004a3c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004a3e:	e005      	b.n	8004a4c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	61bb      	str	r3, [r7, #24]
    break;
 8004a44:	e002      	b.n	8004a4c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004a46:	4b07      	ldr	r3, [pc, #28]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004a48:	61bb      	str	r3, [r7, #24]
    break;
 8004a4a:	bf00      	nop
  }

  return sysclockfreq;
 8004a4c:	69bb      	ldr	r3, [r7, #24]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3724      	adds	r7, #36	; 0x24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	58024400 	.word	0x58024400
 8004a60:	03d09000 	.word	0x03d09000
 8004a64:	003d0900 	.word	0x003d0900
 8004a68:	007a1200 	.word	0x007a1200
 8004a6c:	46000000 	.word	0x46000000
 8004a70:	4c742400 	.word	0x4c742400
 8004a74:	4a742400 	.word	0x4a742400
 8004a78:	4af42400 	.word	0x4af42400

08004a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004a82:	f7ff fe81 	bl	8004788 <HAL_RCC_GetSysClockFreq>
 8004a86:	4602      	mov	r2, r0
 8004a88:	4b10      	ldr	r3, [pc, #64]	; (8004acc <HAL_RCC_GetHCLKFreq+0x50>)
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	0a1b      	lsrs	r3, r3, #8
 8004a8e:	f003 030f 	and.w	r3, r3, #15
 8004a92:	490f      	ldr	r1, [pc, #60]	; (8004ad0 <HAL_RCC_GetHCLKFreq+0x54>)
 8004a94:	5ccb      	ldrb	r3, [r1, r3]
 8004a96:	f003 031f 	and.w	r3, r3, #31
 8004a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a9e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004aa0:	4b0a      	ldr	r3, [pc, #40]	; (8004acc <HAL_RCC_GetHCLKFreq+0x50>)
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	f003 030f 	and.w	r3, r3, #15
 8004aa8:	4a09      	ldr	r2, [pc, #36]	; (8004ad0 <HAL_RCC_GetHCLKFreq+0x54>)
 8004aaa:	5cd3      	ldrb	r3, [r2, r3]
 8004aac:	f003 031f 	and.w	r3, r3, #31
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab6:	4a07      	ldr	r2, [pc, #28]	; (8004ad4 <HAL_RCC_GetHCLKFreq+0x58>)
 8004ab8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004aba:	4a07      	ldr	r2, [pc, #28]	; (8004ad8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004ac0:	4b04      	ldr	r3, [pc, #16]	; (8004ad4 <HAL_RCC_GetHCLKFreq+0x58>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3708      	adds	r7, #8
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	58024400 	.word	0x58024400
 8004ad0:	080269f0 	.word	0x080269f0
 8004ad4:	20000004 	.word	0x20000004
 8004ad8:	20000000 	.word	0x20000000

08004adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004ae0:	f7ff ffcc 	bl	8004a7c <HAL_RCC_GetHCLKFreq>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	4b06      	ldr	r3, [pc, #24]	; (8004b00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	091b      	lsrs	r3, r3, #4
 8004aec:	f003 0307 	and.w	r3, r3, #7
 8004af0:	4904      	ldr	r1, [pc, #16]	; (8004b04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004af2:	5ccb      	ldrb	r3, [r1, r3]
 8004af4:	f003 031f 	and.w	r3, r3, #31
 8004af8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	58024400 	.word	0x58024400
 8004b04:	080269f0 	.word	0x080269f0

08004b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004b0c:	f7ff ffb6 	bl	8004a7c <HAL_RCC_GetHCLKFreq>
 8004b10:	4602      	mov	r2, r0
 8004b12:	4b06      	ldr	r3, [pc, #24]	; (8004b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	0a1b      	lsrs	r3, r3, #8
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	4904      	ldr	r1, [pc, #16]	; (8004b30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b1e:	5ccb      	ldrb	r3, [r1, r3]
 8004b20:	f003 031f 	and.w	r3, r3, #31
 8004b24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	58024400 	.word	0x58024400
 8004b30:	080269f0 	.word	0x080269f0

08004b34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	223f      	movs	r2, #63	; 0x3f
 8004b42:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b44:	4b1a      	ldr	r3, [pc, #104]	; (8004bb0 <HAL_RCC_GetClockConfig+0x7c>)
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	f003 0207 	and.w	r2, r3, #7
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004b50:	4b17      	ldr	r3, [pc, #92]	; (8004bb0 <HAL_RCC_GetClockConfig+0x7c>)
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004b5c:	4b14      	ldr	r3, [pc, #80]	; (8004bb0 <HAL_RCC_GetClockConfig+0x7c>)
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	f003 020f 	and.w	r2, r3, #15
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004b68:	4b11      	ldr	r3, [pc, #68]	; (8004bb0 <HAL_RCC_GetClockConfig+0x7c>)
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004b74:	4b0e      	ldr	r3, [pc, #56]	; (8004bb0 <HAL_RCC_GetClockConfig+0x7c>)
 8004b76:	69db      	ldr	r3, [r3, #28]
 8004b78:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004b80:	4b0b      	ldr	r3, [pc, #44]	; (8004bb0 <HAL_RCC_GetClockConfig+0x7c>)
 8004b82:	69db      	ldr	r3, [r3, #28]
 8004b84:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004b8c:	4b08      	ldr	r3, [pc, #32]	; (8004bb0 <HAL_RCC_GetClockConfig+0x7c>)
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b98:	4b06      	ldr	r3, [pc, #24]	; (8004bb4 <HAL_RCC_GetClockConfig+0x80>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 020f 	and.w	r2, r3, #15
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	601a      	str	r2, [r3, #0]
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	58024400 	.word	0x58024400
 8004bb4:	52002000 	.word	0x52002000

08004bb8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d03f      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bd8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004bdc:	d02a      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004bde:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004be2:	d824      	bhi.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004be4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004be8:	d018      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004bea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bee:	d81e      	bhi.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004bf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bf8:	d007      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004bfa:	e018      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bfc:	4bab      	ldr	r3, [pc, #684]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c00:	4aaa      	ldr	r2, [pc, #680]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004c08:	e015      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	3304      	adds	r3, #4
 8004c0e:	2102      	movs	r1, #2
 8004c10:	4618      	mov	r0, r3
 8004c12:	f001 f9bf 	bl	8005f94 <RCCEx_PLL2_Config>
 8004c16:	4603      	mov	r3, r0
 8004c18:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004c1a:	e00c      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	3324      	adds	r3, #36	; 0x24
 8004c20:	2102      	movs	r1, #2
 8004c22:	4618      	mov	r0, r3
 8004c24:	f001 fa68 	bl	80060f8 <RCCEx_PLL3_Config>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004c2c:	e003      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	75fb      	strb	r3, [r7, #23]
      break;
 8004c32:	e000      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004c34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c36:	7dfb      	ldrb	r3, [r7, #23]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d109      	bne.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004c3c:	4b9b      	ldr	r3, [pc, #620]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c48:	4998      	ldr	r1, [pc, #608]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	650b      	str	r3, [r1, #80]	; 0x50
 8004c4e:	e001      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c50:	7dfb      	ldrb	r3, [r7, #23]
 8004c52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d03d      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c64:	2b04      	cmp	r3, #4
 8004c66:	d826      	bhi.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004c68:	a201      	add	r2, pc, #4	; (adr r2, 8004c70 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c6e:	bf00      	nop
 8004c70:	08004c85 	.word	0x08004c85
 8004c74:	08004c93 	.word	0x08004c93
 8004c78:	08004ca5 	.word	0x08004ca5
 8004c7c:	08004cbd 	.word	0x08004cbd
 8004c80:	08004cbd 	.word	0x08004cbd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c84:	4b89      	ldr	r3, [pc, #548]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c88:	4a88      	ldr	r2, [pc, #544]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c90:	e015      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	3304      	adds	r3, #4
 8004c96:	2100      	movs	r1, #0
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f001 f97b 	bl	8005f94 <RCCEx_PLL2_Config>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ca2:	e00c      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3324      	adds	r3, #36	; 0x24
 8004ca8:	2100      	movs	r1, #0
 8004caa:	4618      	mov	r0, r3
 8004cac:	f001 fa24 	bl	80060f8 <RCCEx_PLL3_Config>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004cb4:	e003      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	75fb      	strb	r3, [r7, #23]
      break;
 8004cba:	e000      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004cbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cbe:	7dfb      	ldrb	r3, [r7, #23]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d109      	bne.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cc4:	4b79      	ldr	r3, [pc, #484]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cc8:	f023 0207 	bic.w	r2, r3, #7
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd0:	4976      	ldr	r1, [pc, #472]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	650b      	str	r3, [r1, #80]	; 0x50
 8004cd6:	e001      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd8:	7dfb      	ldrb	r3, [r7, #23]
 8004cda:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d042      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cf0:	d02b      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cf6:	d825      	bhi.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004cf8:	2bc0      	cmp	r3, #192	; 0xc0
 8004cfa:	d028      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004cfc:	2bc0      	cmp	r3, #192	; 0xc0
 8004cfe:	d821      	bhi.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004d00:	2b80      	cmp	r3, #128	; 0x80
 8004d02:	d016      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004d04:	2b80      	cmp	r3, #128	; 0x80
 8004d06:	d81d      	bhi.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004d0c:	2b40      	cmp	r3, #64	; 0x40
 8004d0e:	d007      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004d10:	e018      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d12:	4b66      	ldr	r3, [pc, #408]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d16:	4a65      	ldr	r2, [pc, #404]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004d1e:	e017      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	3304      	adds	r3, #4
 8004d24:	2100      	movs	r1, #0
 8004d26:	4618      	mov	r0, r3
 8004d28:	f001 f934 	bl	8005f94 <RCCEx_PLL2_Config>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004d30:	e00e      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	3324      	adds	r3, #36	; 0x24
 8004d36:	2100      	movs	r1, #0
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f001 f9dd 	bl	80060f8 <RCCEx_PLL3_Config>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004d42:	e005      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	75fb      	strb	r3, [r7, #23]
      break;
 8004d48:	e002      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004d4a:	bf00      	nop
 8004d4c:	e000      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004d4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d50:	7dfb      	ldrb	r3, [r7, #23]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d109      	bne.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004d56:	4b55      	ldr	r3, [pc, #340]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d5a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d62:	4952      	ldr	r1, [pc, #328]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	650b      	str	r3, [r1, #80]	; 0x50
 8004d68:	e001      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d6a:	7dfb      	ldrb	r3, [r7, #23]
 8004d6c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d049      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004d80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d84:	d030      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004d86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d8a:	d82a      	bhi.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004d8c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004d90:	d02c      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004d92:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004d96:	d824      	bhi.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004d98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d9c:	d018      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004d9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004da2:	d81e      	bhi.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d003      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004da8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dac:	d007      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004dae:	e018      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004db0:	4b3e      	ldr	r3, [pc, #248]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db4:	4a3d      	ldr	r2, [pc, #244]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004dbc:	e017      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f001 f8e5 	bl	8005f94 <RCCEx_PLL2_Config>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004dce:	e00e      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	3324      	adds	r3, #36	; 0x24
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f001 f98e 	bl	80060f8 <RCCEx_PLL3_Config>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004de0:	e005      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	75fb      	strb	r3, [r7, #23]
      break;
 8004de6:	e002      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004de8:	bf00      	nop
 8004dea:	e000      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004dec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dee:	7dfb      	ldrb	r3, [r7, #23]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10a      	bne.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004df4:	4b2d      	ldr	r3, [pc, #180]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004e02:	492a      	ldr	r1, [pc, #168]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	658b      	str	r3, [r1, #88]	; 0x58
 8004e08:	e001      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e0a:	7dfb      	ldrb	r3, [r7, #23]
 8004e0c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d04c      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004e20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e24:	d030      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004e26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e2a:	d82a      	bhi.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004e2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e30:	d02c      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004e32:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e36:	d824      	bhi.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004e38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e3c:	d018      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004e3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e42:	d81e      	bhi.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d003      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e4c:	d007      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004e4e:	e018      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e50:	4b16      	ldr	r3, [pc, #88]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e54:	4a15      	ldr	r2, [pc, #84]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e5c:	e017      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	3304      	adds	r3, #4
 8004e62:	2100      	movs	r1, #0
 8004e64:	4618      	mov	r0, r3
 8004e66:	f001 f895 	bl	8005f94 <RCCEx_PLL2_Config>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004e6e:	e00e      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	3324      	adds	r3, #36	; 0x24
 8004e74:	2100      	movs	r1, #0
 8004e76:	4618      	mov	r0, r3
 8004e78:	f001 f93e 	bl	80060f8 <RCCEx_PLL3_Config>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e80:	e005      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	75fb      	strb	r3, [r7, #23]
      break;
 8004e86:	e002      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004e88:	bf00      	nop
 8004e8a:	e000      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004e8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e8e:	7dfb      	ldrb	r3, [r7, #23]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10d      	bne.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004e94:	4b05      	ldr	r3, [pc, #20]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e98:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004ea2:	4902      	ldr	r1, [pc, #8]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	658b      	str	r3, [r1, #88]	; 0x58
 8004ea8:	e004      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004eaa:	bf00      	nop
 8004eac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb0:	7dfb      	ldrb	r3, [r7, #23]
 8004eb2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d032      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ec4:	2b30      	cmp	r3, #48	; 0x30
 8004ec6:	d01c      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004ec8:	2b30      	cmp	r3, #48	; 0x30
 8004eca:	d817      	bhi.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004ecc:	2b20      	cmp	r3, #32
 8004ece:	d00c      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004ed0:	2b20      	cmp	r3, #32
 8004ed2:	d813      	bhi.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d016      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004ed8:	2b10      	cmp	r3, #16
 8004eda:	d10f      	bne.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004edc:	4baf      	ldr	r3, [pc, #700]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee0:	4aae      	ldr	r2, [pc, #696]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ee2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ee6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004ee8:	e00e      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	3304      	adds	r3, #4
 8004eee:	2102      	movs	r1, #2
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f001 f84f 	bl	8005f94 <RCCEx_PLL2_Config>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004efa:	e005      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	75fb      	strb	r3, [r7, #23]
      break;
 8004f00:	e002      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004f02:	bf00      	nop
 8004f04:	e000      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004f06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f08:	7dfb      	ldrb	r3, [r7, #23]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d109      	bne.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004f0e:	4ba3      	ldr	r3, [pc, #652]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f12:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f1a:	49a0      	ldr	r1, [pc, #640]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004f20:	e001      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f22:	7dfb      	ldrb	r3, [r7, #23]
 8004f24:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d047      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f3a:	d030      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004f3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f40:	d82a      	bhi.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004f42:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f46:	d02c      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004f48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f4c:	d824      	bhi.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f52:	d018      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004f54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f58:	d81e      	bhi.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d003      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f62:	d007      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004f64:	e018      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f66:	4b8d      	ldr	r3, [pc, #564]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6a:	4a8c      	ldr	r2, [pc, #560]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004f72:	e017      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	3304      	adds	r3, #4
 8004f78:	2100      	movs	r1, #0
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f001 f80a 	bl	8005f94 <RCCEx_PLL2_Config>
 8004f80:	4603      	mov	r3, r0
 8004f82:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004f84:	e00e      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	3324      	adds	r3, #36	; 0x24
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f001 f8b3 	bl	80060f8 <RCCEx_PLL3_Config>
 8004f92:	4603      	mov	r3, r0
 8004f94:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004f96:	e005      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f9c:	e002      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004f9e:	bf00      	nop
 8004fa0:	e000      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004fa2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fa4:	7dfb      	ldrb	r3, [r7, #23]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d109      	bne.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004faa:	4b7c      	ldr	r3, [pc, #496]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fae:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fb6:	4979      	ldr	r1, [pc, #484]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	650b      	str	r3, [r1, #80]	; 0x50
 8004fbc:	e001      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fbe:	7dfb      	ldrb	r3, [r7, #23]
 8004fc0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d049      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fd6:	d02e      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8004fd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fdc:	d828      	bhi.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004fde:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fe2:	d02a      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004fe4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fe8:	d822      	bhi.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004fea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004fee:	d026      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004ff0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ff4:	d81c      	bhi.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004ff6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ffa:	d010      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x466>
 8004ffc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005000:	d816      	bhi.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005002:	2b00      	cmp	r3, #0
 8005004:	d01d      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800500a:	d111      	bne.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	3304      	adds	r3, #4
 8005010:	2101      	movs	r1, #1
 8005012:	4618      	mov	r0, r3
 8005014:	f000 ffbe 	bl	8005f94 <RCCEx_PLL2_Config>
 8005018:	4603      	mov	r3, r0
 800501a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800501c:	e012      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	3324      	adds	r3, #36	; 0x24
 8005022:	2101      	movs	r1, #1
 8005024:	4618      	mov	r0, r3
 8005026:	f001 f867 	bl	80060f8 <RCCEx_PLL3_Config>
 800502a:	4603      	mov	r3, r0
 800502c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800502e:	e009      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	75fb      	strb	r3, [r7, #23]
      break;
 8005034:	e006      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005036:	bf00      	nop
 8005038:	e004      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800503a:	bf00      	nop
 800503c:	e002      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800503e:	bf00      	nop
 8005040:	e000      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005042:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005044:	7dfb      	ldrb	r3, [r7, #23]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d109      	bne.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800504a:	4b54      	ldr	r3, [pc, #336]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800504c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800504e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005056:	4951      	ldr	r1, [pc, #324]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005058:	4313      	orrs	r3, r2
 800505a:	650b      	str	r3, [r1, #80]	; 0x50
 800505c:	e001      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800505e:	7dfb      	ldrb	r3, [r7, #23]
 8005060:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d04b      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005074:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005078:	d02e      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800507a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800507e:	d828      	bhi.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005084:	d02a      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800508a:	d822      	bhi.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800508c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005090:	d026      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005092:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005096:	d81c      	bhi.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005098:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800509c:	d010      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800509e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050a2:	d816      	bhi.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d01d      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80050a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050ac:	d111      	bne.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	3304      	adds	r3, #4
 80050b2:	2101      	movs	r1, #1
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 ff6d 	bl	8005f94 <RCCEx_PLL2_Config>
 80050ba:	4603      	mov	r3, r0
 80050bc:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80050be:	e012      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	3324      	adds	r3, #36	; 0x24
 80050c4:	2101      	movs	r1, #1
 80050c6:	4618      	mov	r0, r3
 80050c8:	f001 f816 	bl	80060f8 <RCCEx_PLL3_Config>
 80050cc:	4603      	mov	r3, r0
 80050ce:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80050d0:	e009      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	75fb      	strb	r3, [r7, #23]
      break;
 80050d6:	e006      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80050d8:	bf00      	nop
 80050da:	e004      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80050dc:	bf00      	nop
 80050de:	e002      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80050e0:	bf00      	nop
 80050e2:	e000      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80050e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050e6:	7dfb      	ldrb	r3, [r7, #23]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10a      	bne.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80050ec:	4b2b      	ldr	r3, [pc, #172]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80050ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80050fa:	4928      	ldr	r1, [pc, #160]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	658b      	str	r3, [r1, #88]	; 0x58
 8005100:	e001      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005102:	7dfb      	ldrb	r3, [r7, #23]
 8005104:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d02f      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005116:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800511a:	d00e      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800511c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005120:	d814      	bhi.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005122:	2b00      	cmp	r3, #0
 8005124:	d015      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005126:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800512a:	d10f      	bne.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800512c:	4b1b      	ldr	r3, [pc, #108]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800512e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005130:	4a1a      	ldr	r2, [pc, #104]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005132:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005136:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005138:	e00c      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	3304      	adds	r3, #4
 800513e:	2101      	movs	r1, #1
 8005140:	4618      	mov	r0, r3
 8005142:	f000 ff27 	bl	8005f94 <RCCEx_PLL2_Config>
 8005146:	4603      	mov	r3, r0
 8005148:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800514a:	e003      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	75fb      	strb	r3, [r7, #23]
      break;
 8005150:	e000      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8005152:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005154:	7dfb      	ldrb	r3, [r7, #23]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d109      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800515a:	4b10      	ldr	r3, [pc, #64]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800515c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800515e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005166:	490d      	ldr	r1, [pc, #52]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005168:	4313      	orrs	r3, r2
 800516a:	650b      	str	r3, [r1, #80]	; 0x50
 800516c:	e001      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800516e:	7dfb      	ldrb	r3, [r7, #23]
 8005170:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d033      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005182:	2b03      	cmp	r3, #3
 8005184:	d81c      	bhi.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005186:	a201      	add	r2, pc, #4	; (adr r2, 800518c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8005188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518c:	080051c7 	.word	0x080051c7
 8005190:	080051a1 	.word	0x080051a1
 8005194:	080051af 	.word	0x080051af
 8005198:	080051c7 	.word	0x080051c7
 800519c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051a0:	4bb8      	ldr	r3, [pc, #736]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80051a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a4:	4ab7      	ldr	r2, [pc, #732]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80051a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80051ac:	e00c      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	3304      	adds	r3, #4
 80051b2:	2102      	movs	r1, #2
 80051b4:	4618      	mov	r0, r3
 80051b6:	f000 feed 	bl	8005f94 <RCCEx_PLL2_Config>
 80051ba:	4603      	mov	r3, r0
 80051bc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80051be:	e003      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	75fb      	strb	r3, [r7, #23]
      break;
 80051c4:	e000      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80051c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051c8:	7dfb      	ldrb	r3, [r7, #23]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d109      	bne.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80051ce:	4bad      	ldr	r3, [pc, #692]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80051d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051d2:	f023 0203 	bic.w	r2, r3, #3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051da:	49aa      	ldr	r1, [pc, #680]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	64cb      	str	r3, [r1, #76]	; 0x4c
 80051e0:	e001      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051e2:	7dfb      	ldrb	r3, [r7, #23]
 80051e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f000 8086 	beq.w	8005300 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051f4:	4ba4      	ldr	r3, [pc, #656]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4aa3      	ldr	r2, [pc, #652]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80051fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005200:	f7fc f9d8 	bl	80015b4 <HAL_GetTick>
 8005204:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005206:	e009      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005208:	f7fc f9d4 	bl	80015b4 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b64      	cmp	r3, #100	; 0x64
 8005214:	d902      	bls.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	75fb      	strb	r3, [r7, #23]
        break;
 800521a:	e005      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800521c:	4b9a      	ldr	r3, [pc, #616]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005224:	2b00      	cmp	r3, #0
 8005226:	d0ef      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005228:	7dfb      	ldrb	r3, [r7, #23]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d166      	bne.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800522e:	4b95      	ldr	r3, [pc, #596]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005230:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005238:	4053      	eors	r3, r2
 800523a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800523e:	2b00      	cmp	r3, #0
 8005240:	d013      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005242:	4b90      	ldr	r3, [pc, #576]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800524a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800524c:	4b8d      	ldr	r3, [pc, #564]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800524e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005250:	4a8c      	ldr	r2, [pc, #560]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005256:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005258:	4b8a      	ldr	r3, [pc, #552]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800525a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800525c:	4a89      	ldr	r2, [pc, #548]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800525e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005262:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005264:	4a87      	ldr	r2, [pc, #540]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005274:	d115      	bne.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005276:	f7fc f99d 	bl	80015b4 <HAL_GetTick>
 800527a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800527c:	e00b      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800527e:	f7fc f999 	bl	80015b4 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	f241 3288 	movw	r2, #5000	; 0x1388
 800528c:	4293      	cmp	r3, r2
 800528e:	d902      	bls.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	75fb      	strb	r3, [r7, #23]
            break;
 8005294:	e005      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005296:	4b7b      	ldr	r3, [pc, #492]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d0ed      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80052a2:	7dfb      	ldrb	r3, [r7, #23]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d126      	bne.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052b6:	d10d      	bne.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80052b8:	4b72      	ldr	r3, [pc, #456]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052c6:	0919      	lsrs	r1, r3, #4
 80052c8:	4b70      	ldr	r3, [pc, #448]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80052ca:	400b      	ands	r3, r1
 80052cc:	496d      	ldr	r1, [pc, #436]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	610b      	str	r3, [r1, #16]
 80052d2:	e005      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80052d4:	4b6b      	ldr	r3, [pc, #428]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	4a6a      	ldr	r2, [pc, #424]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80052da:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80052de:	6113      	str	r3, [r2, #16]
 80052e0:	4b68      	ldr	r3, [pc, #416]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80052e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052ee:	4965      	ldr	r1, [pc, #404]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	670b      	str	r3, [r1, #112]	; 0x70
 80052f4:	e004      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052f6:	7dfb      	ldrb	r3, [r7, #23]
 80052f8:	75bb      	strb	r3, [r7, #22]
 80052fa:	e001      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052fc:	7dfb      	ldrb	r3, [r7, #23]
 80052fe:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	2b00      	cmp	r3, #0
 800530a:	d07e      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005310:	2b28      	cmp	r3, #40	; 0x28
 8005312:	d867      	bhi.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005314:	a201      	add	r2, pc, #4	; (adr r2, 800531c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531a:	bf00      	nop
 800531c:	080053eb 	.word	0x080053eb
 8005320:	080053e5 	.word	0x080053e5
 8005324:	080053e5 	.word	0x080053e5
 8005328:	080053e5 	.word	0x080053e5
 800532c:	080053e5 	.word	0x080053e5
 8005330:	080053e5 	.word	0x080053e5
 8005334:	080053e5 	.word	0x080053e5
 8005338:	080053e5 	.word	0x080053e5
 800533c:	080053c1 	.word	0x080053c1
 8005340:	080053e5 	.word	0x080053e5
 8005344:	080053e5 	.word	0x080053e5
 8005348:	080053e5 	.word	0x080053e5
 800534c:	080053e5 	.word	0x080053e5
 8005350:	080053e5 	.word	0x080053e5
 8005354:	080053e5 	.word	0x080053e5
 8005358:	080053e5 	.word	0x080053e5
 800535c:	080053d3 	.word	0x080053d3
 8005360:	080053e5 	.word	0x080053e5
 8005364:	080053e5 	.word	0x080053e5
 8005368:	080053e5 	.word	0x080053e5
 800536c:	080053e5 	.word	0x080053e5
 8005370:	080053e5 	.word	0x080053e5
 8005374:	080053e5 	.word	0x080053e5
 8005378:	080053e5 	.word	0x080053e5
 800537c:	080053eb 	.word	0x080053eb
 8005380:	080053e5 	.word	0x080053e5
 8005384:	080053e5 	.word	0x080053e5
 8005388:	080053e5 	.word	0x080053e5
 800538c:	080053e5 	.word	0x080053e5
 8005390:	080053e5 	.word	0x080053e5
 8005394:	080053e5 	.word	0x080053e5
 8005398:	080053e5 	.word	0x080053e5
 800539c:	080053eb 	.word	0x080053eb
 80053a0:	080053e5 	.word	0x080053e5
 80053a4:	080053e5 	.word	0x080053e5
 80053a8:	080053e5 	.word	0x080053e5
 80053ac:	080053e5 	.word	0x080053e5
 80053b0:	080053e5 	.word	0x080053e5
 80053b4:	080053e5 	.word	0x080053e5
 80053b8:	080053e5 	.word	0x080053e5
 80053bc:	080053eb 	.word	0x080053eb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	3304      	adds	r3, #4
 80053c4:	2101      	movs	r1, #1
 80053c6:	4618      	mov	r0, r3
 80053c8:	f000 fde4 	bl	8005f94 <RCCEx_PLL2_Config>
 80053cc:	4603      	mov	r3, r0
 80053ce:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80053d0:	e00c      	b.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	3324      	adds	r3, #36	; 0x24
 80053d6:	2101      	movs	r1, #1
 80053d8:	4618      	mov	r0, r3
 80053da:	f000 fe8d 	bl	80060f8 <RCCEx_PLL3_Config>
 80053de:	4603      	mov	r3, r0
 80053e0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80053e2:	e003      	b.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	75fb      	strb	r3, [r7, #23]
      break;
 80053e8:	e000      	b.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80053ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053ec:	7dfb      	ldrb	r3, [r7, #23]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d109      	bne.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80053f2:	4b24      	ldr	r3, [pc, #144]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80053f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053fe:	4921      	ldr	r1, [pc, #132]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005400:	4313      	orrs	r3, r2
 8005402:	654b      	str	r3, [r1, #84]	; 0x54
 8005404:	e001      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005406:	7dfb      	ldrb	r3, [r7, #23]
 8005408:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d03e      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800541a:	2b05      	cmp	r3, #5
 800541c:	d820      	bhi.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800541e:	a201      	add	r2, pc, #4	; (adr r2, 8005424 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8005420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005424:	08005467 	.word	0x08005467
 8005428:	0800543d 	.word	0x0800543d
 800542c:	0800544f 	.word	0x0800544f
 8005430:	08005467 	.word	0x08005467
 8005434:	08005467 	.word	0x08005467
 8005438:	08005467 	.word	0x08005467
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	3304      	adds	r3, #4
 8005440:	2101      	movs	r1, #1
 8005442:	4618      	mov	r0, r3
 8005444:	f000 fda6 	bl	8005f94 <RCCEx_PLL2_Config>
 8005448:	4603      	mov	r3, r0
 800544a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800544c:	e00c      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	3324      	adds	r3, #36	; 0x24
 8005452:	2101      	movs	r1, #1
 8005454:	4618      	mov	r0, r3
 8005456:	f000 fe4f 	bl	80060f8 <RCCEx_PLL3_Config>
 800545a:	4603      	mov	r3, r0
 800545c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800545e:	e003      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	75fb      	strb	r3, [r7, #23]
      break;
 8005464:	e000      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8005466:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005468:	7dfb      	ldrb	r3, [r7, #23]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d110      	bne.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800546e:	4b05      	ldr	r3, [pc, #20]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005472:	f023 0207 	bic.w	r2, r3, #7
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800547a:	4902      	ldr	r1, [pc, #8]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800547c:	4313      	orrs	r3, r2
 800547e:	654b      	str	r3, [r1, #84]	; 0x54
 8005480:	e008      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8005482:	bf00      	nop
 8005484:	58024400 	.word	0x58024400
 8005488:	58024800 	.word	0x58024800
 800548c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005490:	7dfb      	ldrb	r3, [r7, #23]
 8005492:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0304 	and.w	r3, r3, #4
 800549c:	2b00      	cmp	r3, #0
 800549e:	d039      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a6:	2b05      	cmp	r3, #5
 80054a8:	d820      	bhi.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x934>
 80054aa:	a201      	add	r2, pc, #4	; (adr r2, 80054b0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80054ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b0:	080054f3 	.word	0x080054f3
 80054b4:	080054c9 	.word	0x080054c9
 80054b8:	080054db 	.word	0x080054db
 80054bc:	080054f3 	.word	0x080054f3
 80054c0:	080054f3 	.word	0x080054f3
 80054c4:	080054f3 	.word	0x080054f3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3304      	adds	r3, #4
 80054cc:	2101      	movs	r1, #1
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 fd60 	bl	8005f94 <RCCEx_PLL2_Config>
 80054d4:	4603      	mov	r3, r0
 80054d6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80054d8:	e00c      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	3324      	adds	r3, #36	; 0x24
 80054de:	2101      	movs	r1, #1
 80054e0:	4618      	mov	r0, r3
 80054e2:	f000 fe09 	bl	80060f8 <RCCEx_PLL3_Config>
 80054e6:	4603      	mov	r3, r0
 80054e8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80054ea:	e003      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	75fb      	strb	r3, [r7, #23]
      break;
 80054f0:	e000      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80054f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054f4:	7dfb      	ldrb	r3, [r7, #23]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10a      	bne.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054fa:	4bb7      	ldr	r3, [pc, #732]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80054fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054fe:	f023 0207 	bic.w	r2, r3, #7
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005508:	49b3      	ldr	r1, [pc, #716]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800550a:	4313      	orrs	r3, r2
 800550c:	658b      	str	r3, [r1, #88]	; 0x58
 800550e:	e001      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005510:	7dfb      	ldrb	r3, [r7, #23]
 8005512:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0320 	and.w	r3, r3, #32
 800551c:	2b00      	cmp	r3, #0
 800551e:	d04b      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005526:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800552a:	d02e      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800552c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005530:	d828      	bhi.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005536:	d02a      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800553c:	d822      	bhi.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800553e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005542:	d026      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005544:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005548:	d81c      	bhi.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800554a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800554e:	d010      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8005550:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005554:	d816      	bhi.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005556:	2b00      	cmp	r3, #0
 8005558:	d01d      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800555a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800555e:	d111      	bne.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	3304      	adds	r3, #4
 8005564:	2100      	movs	r1, #0
 8005566:	4618      	mov	r0, r3
 8005568:	f000 fd14 	bl	8005f94 <RCCEx_PLL2_Config>
 800556c:	4603      	mov	r3, r0
 800556e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005570:	e012      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	3324      	adds	r3, #36	; 0x24
 8005576:	2102      	movs	r1, #2
 8005578:	4618      	mov	r0, r3
 800557a:	f000 fdbd 	bl	80060f8 <RCCEx_PLL3_Config>
 800557e:	4603      	mov	r3, r0
 8005580:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005582:	e009      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	75fb      	strb	r3, [r7, #23]
      break;
 8005588:	e006      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800558a:	bf00      	nop
 800558c:	e004      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800558e:	bf00      	nop
 8005590:	e002      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005592:	bf00      	nop
 8005594:	e000      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005596:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005598:	7dfb      	ldrb	r3, [r7, #23]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10a      	bne.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800559e:	4b8e      	ldr	r3, [pc, #568]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80055a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055ac:	498a      	ldr	r1, [pc, #552]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	654b      	str	r3, [r1, #84]	; 0x54
 80055b2:	e001      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b4:	7dfb      	ldrb	r3, [r7, #23]
 80055b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d04b      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055ca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80055ce:	d02e      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80055d0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80055d4:	d828      	bhi.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80055d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055da:	d02a      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80055dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055e0:	d822      	bhi.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80055e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055e6:	d026      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80055e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055ec:	d81c      	bhi.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80055ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055f2:	d010      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80055f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055f8:	d816      	bhi.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d01d      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80055fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005602:	d111      	bne.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	3304      	adds	r3, #4
 8005608:	2100      	movs	r1, #0
 800560a:	4618      	mov	r0, r3
 800560c:	f000 fcc2 	bl	8005f94 <RCCEx_PLL2_Config>
 8005610:	4603      	mov	r3, r0
 8005612:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005614:	e012      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	3324      	adds	r3, #36	; 0x24
 800561a:	2102      	movs	r1, #2
 800561c:	4618      	mov	r0, r3
 800561e:	f000 fd6b 	bl	80060f8 <RCCEx_PLL3_Config>
 8005622:	4603      	mov	r3, r0
 8005624:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005626:	e009      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	75fb      	strb	r3, [r7, #23]
      break;
 800562c:	e006      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800562e:	bf00      	nop
 8005630:	e004      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005632:	bf00      	nop
 8005634:	e002      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005636:	bf00      	nop
 8005638:	e000      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800563a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800563c:	7dfb      	ldrb	r3, [r7, #23]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10a      	bne.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005642:	4b65      	ldr	r3, [pc, #404]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005646:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005650:	4961      	ldr	r1, [pc, #388]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005652:	4313      	orrs	r3, r2
 8005654:	658b      	str	r3, [r1, #88]	; 0x58
 8005656:	e001      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005658:	7dfb      	ldrb	r3, [r7, #23]
 800565a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005664:	2b00      	cmp	r3, #0
 8005666:	d04b      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800566e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005672:	d02e      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8005674:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005678:	d828      	bhi.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800567a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800567e:	d02a      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8005680:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005684:	d822      	bhi.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005686:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800568a:	d026      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800568c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005690:	d81c      	bhi.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005692:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005696:	d010      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005698:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800569c:	d816      	bhi.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d01d      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80056a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056a6:	d111      	bne.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	3304      	adds	r3, #4
 80056ac:	2100      	movs	r1, #0
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 fc70 	bl	8005f94 <RCCEx_PLL2_Config>
 80056b4:	4603      	mov	r3, r0
 80056b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80056b8:	e012      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	3324      	adds	r3, #36	; 0x24
 80056be:	2102      	movs	r1, #2
 80056c0:	4618      	mov	r0, r3
 80056c2:	f000 fd19 	bl	80060f8 <RCCEx_PLL3_Config>
 80056c6:	4603      	mov	r3, r0
 80056c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80056ca:	e009      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	75fb      	strb	r3, [r7, #23]
      break;
 80056d0:	e006      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80056d2:	bf00      	nop
 80056d4:	e004      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80056d6:	bf00      	nop
 80056d8:	e002      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80056da:	bf00      	nop
 80056dc:	e000      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80056de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056e0:	7dfb      	ldrb	r3, [r7, #23]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10a      	bne.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80056e6:	4b3c      	ldr	r3, [pc, #240]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80056e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056f4:	4938      	ldr	r1, [pc, #224]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	658b      	str	r3, [r1, #88]	; 0x58
 80056fa:	e001      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056fc:	7dfb      	ldrb	r3, [r7, #23]
 80056fe:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0308 	and.w	r3, r3, #8
 8005708:	2b00      	cmp	r3, #0
 800570a:	d01a      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005716:	d10a      	bne.n	800572e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	3324      	adds	r3, #36	; 0x24
 800571c:	2102      	movs	r1, #2
 800571e:	4618      	mov	r0, r3
 8005720:	f000 fcea 	bl	80060f8 <RCCEx_PLL3_Config>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d001      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800572e:	4b2a      	ldr	r3, [pc, #168]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005732:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800573c:	4926      	ldr	r1, [pc, #152]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800573e:	4313      	orrs	r3, r2
 8005740:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0310 	and.w	r3, r3, #16
 800574a:	2b00      	cmp	r3, #0
 800574c:	d01a      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005758:	d10a      	bne.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	3324      	adds	r3, #36	; 0x24
 800575e:	2102      	movs	r1, #2
 8005760:	4618      	mov	r0, r3
 8005762:	f000 fcc9 	bl	80060f8 <RCCEx_PLL3_Config>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d001      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005770:	4b19      	ldr	r3, [pc, #100]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005774:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800577e:	4916      	ldr	r1, [pc, #88]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005780:	4313      	orrs	r3, r2
 8005782:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d036      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005796:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800579a:	d01f      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800579c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057a0:	d817      	bhi.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80057a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057aa:	d009      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80057ac:	e011      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	3304      	adds	r3, #4
 80057b2:	2100      	movs	r1, #0
 80057b4:	4618      	mov	r0, r3
 80057b6:	f000 fbed 	bl	8005f94 <RCCEx_PLL2_Config>
 80057ba:	4603      	mov	r3, r0
 80057bc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80057be:	e00e      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	3324      	adds	r3, #36	; 0x24
 80057c4:	2102      	movs	r1, #2
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 fc96 	bl	80060f8 <RCCEx_PLL3_Config>
 80057cc:	4603      	mov	r3, r0
 80057ce:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80057d0:	e005      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	75fb      	strb	r3, [r7, #23]
      break;
 80057d6:	e002      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80057d8:	58024400 	.word	0x58024400
      break;
 80057dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057de:	7dfb      	ldrb	r3, [r7, #23]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10a      	bne.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057e4:	4b8b      	ldr	r3, [pc, #556]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80057e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80057f2:	4988      	ldr	r1, [pc, #544]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	658b      	str	r3, [r1, #88]	; 0x58
 80057f8:	e001      	b.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057fa:	7dfb      	ldrb	r3, [r7, #23]
 80057fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d033      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005810:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005814:	d01c      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8005816:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800581a:	d816      	bhi.n	800584a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800581c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005820:	d003      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8005822:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005826:	d007      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8005828:	e00f      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800582a:	4b7a      	ldr	r3, [pc, #488]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800582c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582e:	4a79      	ldr	r2, [pc, #484]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8005830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005834:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005836:	e00c      	b.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	3324      	adds	r3, #36	; 0x24
 800583c:	2101      	movs	r1, #1
 800583e:	4618      	mov	r0, r3
 8005840:	f000 fc5a 	bl	80060f8 <RCCEx_PLL3_Config>
 8005844:	4603      	mov	r3, r0
 8005846:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005848:	e003      	b.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	75fb      	strb	r3, [r7, #23]
      break;
 800584e:	e000      	b.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8005850:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005852:	7dfb      	ldrb	r3, [r7, #23]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d10a      	bne.n	800586e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005858:	4b6e      	ldr	r3, [pc, #440]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800585a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800585c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005866:	496b      	ldr	r1, [pc, #428]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8005868:	4313      	orrs	r3, r2
 800586a:	654b      	str	r3, [r1, #84]	; 0x54
 800586c:	e001      	b.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800586e:	7dfb      	ldrb	r3, [r7, #23]
 8005870:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d029      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8005886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800588a:	d007      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800588c:	e00f      	b.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800588e:	4b61      	ldr	r3, [pc, #388]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8005890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005892:	4a60      	ldr	r2, [pc, #384]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8005894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005898:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800589a:	e00b      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	3304      	adds	r3, #4
 80058a0:	2102      	movs	r1, #2
 80058a2:	4618      	mov	r0, r3
 80058a4:	f000 fb76 	bl	8005f94 <RCCEx_PLL2_Config>
 80058a8:	4603      	mov	r3, r0
 80058aa:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80058ac:	e002      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	75fb      	strb	r3, [r7, #23]
      break;
 80058b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058b4:	7dfb      	ldrb	r3, [r7, #23]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d109      	bne.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80058ba:	4b56      	ldr	r3, [pc, #344]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80058bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058c6:	4953      	ldr	r1, [pc, #332]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	64cb      	str	r3, [r1, #76]	; 0x4c
 80058cc:	e001      	b.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ce:	7dfb      	ldrb	r3, [r7, #23]
 80058d0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00a      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	3324      	adds	r3, #36	; 0x24
 80058e2:	2102      	movs	r1, #2
 80058e4:	4618      	mov	r0, r3
 80058e6:	f000 fc07 	bl	80060f8 <RCCEx_PLL3_Config>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d001      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d030      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005904:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005908:	d017      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800590a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800590e:	d811      	bhi.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005914:	d013      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005916:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800591a:	d80b      	bhi.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800591c:	2b00      	cmp	r3, #0
 800591e:	d010      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005920:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005924:	d106      	bne.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005926:	4b3b      	ldr	r3, [pc, #236]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8005928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592a:	4a3a      	ldr	r2, [pc, #232]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800592c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005930:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005932:	e007      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	75fb      	strb	r3, [r7, #23]
      break;
 8005938:	e004      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800593a:	bf00      	nop
 800593c:	e002      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800593e:	bf00      	nop
 8005940:	e000      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005942:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005944:	7dfb      	ldrb	r3, [r7, #23]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d109      	bne.n	800595e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800594a:	4b32      	ldr	r3, [pc, #200]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800594c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800594e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005956:	492f      	ldr	r1, [pc, #188]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8005958:	4313      	orrs	r3, r2
 800595a:	654b      	str	r3, [r1, #84]	; 0x54
 800595c:	e001      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800595e:	7dfb      	ldrb	r3, [r7, #23]
 8005960:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d008      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800596e:	4b29      	ldr	r3, [pc, #164]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8005970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005972:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800597a:	4926      	ldr	r1, [pc, #152]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800597c:	4313      	orrs	r3, r2
 800597e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d009      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800598c:	4b21      	ldr	r3, [pc, #132]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800599a:	491e      	ldr	r1, [pc, #120]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800599c:	4313      	orrs	r3, r2
 800599e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d008      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80059ac:	4b19      	ldr	r3, [pc, #100]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80059ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059b0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059b8:	4916      	ldr	r1, [pc, #88]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00d      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059ca:	4b12      	ldr	r3, [pc, #72]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	4a11      	ldr	r2, [pc, #68]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80059d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80059d4:	6113      	str	r3, [r2, #16]
 80059d6:	4b0f      	ldr	r3, [pc, #60]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80059d8:	691a      	ldr	r2, [r3, #16]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80059e0:	490c      	ldr	r1, [pc, #48]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	da08      	bge.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80059ee:	4b09      	ldr	r3, [pc, #36]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80059f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059fa:	4906      	ldr	r1, [pc, #24]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005a00:	7dbb      	ldrb	r3, [r7, #22]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    return HAL_OK;
 8005a06:	2300      	movs	r3, #0
 8005a08:	e000      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0xe54>
  }
  return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3718      	adds	r7, #24
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	58024400 	.word	0x58024400

08005a18 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005a1c:	f7ff f82e 	bl	8004a7c <HAL_RCC_GetHCLKFreq>
 8005a20:	4602      	mov	r2, r0
 8005a22:	4b06      	ldr	r3, [pc, #24]	; (8005a3c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	091b      	lsrs	r3, r3, #4
 8005a28:	f003 0307 	and.w	r3, r3, #7
 8005a2c:	4904      	ldr	r1, [pc, #16]	; (8005a40 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005a2e:	5ccb      	ldrb	r3, [r1, r3]
 8005a30:	f003 031f 	and.w	r3, r3, #31
 8005a34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	58024400 	.word	0x58024400
 8005a40:	080269f0 	.word	0x080269f0

08005a44 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b089      	sub	sp, #36	; 0x24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a4c:	4ba1      	ldr	r3, [pc, #644]	; (8005cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a50:	f003 0303 	and.w	r3, r3, #3
 8005a54:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005a56:	4b9f      	ldr	r3, [pc, #636]	; (8005cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5a:	0b1b      	lsrs	r3, r3, #12
 8005a5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a60:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005a62:	4b9c      	ldr	r3, [pc, #624]	; (8005cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a66:	091b      	lsrs	r3, r3, #4
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005a6e:	4b99      	ldr	r3, [pc, #612]	; (8005cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a72:	08db      	lsrs	r3, r3, #3
 8005a74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	fb02 f303 	mul.w	r3, r2, r3
 8005a7e:	ee07 3a90 	vmov	s15, r3
 8005a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 8111 	beq.w	8005cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	f000 8083 	beq.w	8005ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	f200 80a1 	bhi.w	8005be4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d003      	beq.n	8005ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d056      	beq.n	8005b5c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005aae:	e099      	b.n	8005be4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ab0:	4b88      	ldr	r3, [pc, #544]	; (8005cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0320 	and.w	r3, r3, #32
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d02d      	beq.n	8005b18 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005abc:	4b85      	ldr	r3, [pc, #532]	; (8005cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	08db      	lsrs	r3, r3, #3
 8005ac2:	f003 0303 	and.w	r3, r3, #3
 8005ac6:	4a84      	ldr	r2, [pc, #528]	; (8005cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8005acc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	ee07 3a90 	vmov	s15, r3
 8005ad4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	ee07 3a90 	vmov	s15, r3
 8005ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ae6:	4b7b      	ldr	r3, [pc, #492]	; (8005cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aee:	ee07 3a90 	vmov	s15, r3
 8005af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005af6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005afa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005cdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b12:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005b16:	e087      	b.n	8005c28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	ee07 3a90 	vmov	s15, r3
 8005b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b22:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b2a:	4b6a      	ldr	r3, [pc, #424]	; (8005cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b32:	ee07 3a90 	vmov	s15, r3
 8005b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b3e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005cdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b5a:	e065      	b.n	8005c28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	ee07 3a90 	vmov	s15, r3
 8005b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b66:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b6e:	4b59      	ldr	r3, [pc, #356]	; (8005cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b76:	ee07 3a90 	vmov	s15, r3
 8005b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b82:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005cdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b9e:	e043      	b.n	8005c28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	ee07 3a90 	vmov	s15, r3
 8005ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005baa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bb2:	4b48      	ldr	r3, [pc, #288]	; (8005cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bba:	ee07 3a90 	vmov	s15, r3
 8005bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bc6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005cdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005be2:	e021      	b.n	8005c28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	ee07 3a90 	vmov	s15, r3
 8005bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bf6:	4b37      	ldr	r3, [pc, #220]	; (8005cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bfe:	ee07 3a90 	vmov	s15, r3
 8005c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c0a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005cdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c26:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005c28:	4b2a      	ldr	r3, [pc, #168]	; (8005cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2c:	0a5b      	lsrs	r3, r3, #9
 8005c2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c32:	ee07 3a90 	vmov	s15, r3
 8005c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c42:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c4e:	ee17 2a90 	vmov	r2, s15
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005c56:	4b1f      	ldr	r3, [pc, #124]	; (8005cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5a:	0c1b      	lsrs	r3, r3, #16
 8005c5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c60:	ee07 3a90 	vmov	s15, r3
 8005c64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c70:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c7c:	ee17 2a90 	vmov	r2, s15
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005c84:	4b13      	ldr	r3, [pc, #76]	; (8005cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c88:	0e1b      	lsrs	r3, r3, #24
 8005c8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c8e:	ee07 3a90 	vmov	s15, r3
 8005c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ca2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ca6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005caa:	ee17 2a90 	vmov	r2, s15
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005cb2:	e008      	b.n	8005cc6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	609a      	str	r2, [r3, #8]
}
 8005cc6:	bf00      	nop
 8005cc8:	3724      	adds	r7, #36	; 0x24
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	58024400 	.word	0x58024400
 8005cd8:	03d09000 	.word	0x03d09000
 8005cdc:	46000000 	.word	0x46000000
 8005ce0:	4c742400 	.word	0x4c742400
 8005ce4:	4a742400 	.word	0x4a742400
 8005ce8:	4af42400 	.word	0x4af42400

08005cec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b089      	sub	sp, #36	; 0x24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005cf4:	4ba1      	ldr	r3, [pc, #644]	; (8005f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf8:	f003 0303 	and.w	r3, r3, #3
 8005cfc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005cfe:	4b9f      	ldr	r3, [pc, #636]	; (8005f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d02:	0d1b      	lsrs	r3, r3, #20
 8005d04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d08:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005d0a:	4b9c      	ldr	r3, [pc, #624]	; (8005f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0e:	0a1b      	lsrs	r3, r3, #8
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005d16:	4b99      	ldr	r3, [pc, #612]	; (8005f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d1a:	08db      	lsrs	r3, r3, #3
 8005d1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	fb02 f303 	mul.w	r3, r2, r3
 8005d26:	ee07 3a90 	vmov	s15, r3
 8005d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f000 8111 	beq.w	8005f5c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	f000 8083 	beq.w	8005e48 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	f200 80a1 	bhi.w	8005e8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d003      	beq.n	8005d58 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d056      	beq.n	8005e04 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005d56:	e099      	b.n	8005e8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d58:	4b88      	ldr	r3, [pc, #544]	; (8005f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0320 	and.w	r3, r3, #32
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d02d      	beq.n	8005dc0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005d64:	4b85      	ldr	r3, [pc, #532]	; (8005f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	08db      	lsrs	r3, r3, #3
 8005d6a:	f003 0303 	and.w	r3, r3, #3
 8005d6e:	4a84      	ldr	r2, [pc, #528]	; (8005f80 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005d70:	fa22 f303 	lsr.w	r3, r2, r3
 8005d74:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	ee07 3a90 	vmov	s15, r3
 8005d7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	ee07 3a90 	vmov	s15, r3
 8005d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d8e:	4b7b      	ldr	r3, [pc, #492]	; (8005f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d96:	ee07 3a90 	vmov	s15, r3
 8005d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005da2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005f84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005dbe:	e087      	b.n	8005ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	ee07 3a90 	vmov	s15, r3
 8005dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005f88 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dd2:	4b6a      	ldr	r3, [pc, #424]	; (8005f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dda:	ee07 3a90 	vmov	s15, r3
 8005dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005de2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005de6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005f84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005dea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005df2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dfe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e02:	e065      	b.n	8005ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	ee07 3a90 	vmov	s15, r3
 8005e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e0e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e16:	4b59      	ldr	r3, [pc, #356]	; (8005f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e1e:	ee07 3a90 	vmov	s15, r3
 8005e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e26:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e2a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005f84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e46:	e043      	b.n	8005ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	ee07 3a90 	vmov	s15, r3
 8005e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e52:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005f90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e5a:	4b48      	ldr	r3, [pc, #288]	; (8005f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e62:	ee07 3a90 	vmov	s15, r3
 8005e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e6e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005f84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e8a:	e021      	b.n	8005ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	ee07 3a90 	vmov	s15, r3
 8005e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e96:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e9e:	4b37      	ldr	r3, [pc, #220]	; (8005f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ea6:	ee07 3a90 	vmov	s15, r3
 8005eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eae:	ed97 6a03 	vldr	s12, [r7, #12]
 8005eb2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005f84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ebe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ece:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005ed0:	4b2a      	ldr	r3, [pc, #168]	; (8005f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed4:	0a5b      	lsrs	r3, r3, #9
 8005ed6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eda:	ee07 3a90 	vmov	s15, r3
 8005ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ee6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005eea:	edd7 6a07 	vldr	s13, [r7, #28]
 8005eee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ef2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ef6:	ee17 2a90 	vmov	r2, s15
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005efe:	4b1f      	ldr	r3, [pc, #124]	; (8005f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f02:	0c1b      	lsrs	r3, r3, #16
 8005f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f08:	ee07 3a90 	vmov	s15, r3
 8005f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f18:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f24:	ee17 2a90 	vmov	r2, s15
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005f2c:	4b13      	ldr	r3, [pc, #76]	; (8005f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f30:	0e1b      	lsrs	r3, r3, #24
 8005f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f36:	ee07 3a90 	vmov	s15, r3
 8005f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f46:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f52:	ee17 2a90 	vmov	r2, s15
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005f5a:	e008      	b.n	8005f6e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	609a      	str	r2, [r3, #8]
}
 8005f6e:	bf00      	nop
 8005f70:	3724      	adds	r7, #36	; 0x24
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	58024400 	.word	0x58024400
 8005f80:	03d09000 	.word	0x03d09000
 8005f84:	46000000 	.word	0x46000000
 8005f88:	4c742400 	.word	0x4c742400
 8005f8c:	4a742400 	.word	0x4a742400
 8005f90:	4af42400 	.word	0x4af42400

08005f94 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005fa2:	4b53      	ldr	r3, [pc, #332]	; (80060f0 <RCCEx_PLL2_Config+0x15c>)
 8005fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa6:	f003 0303 	and.w	r3, r3, #3
 8005faa:	2b03      	cmp	r3, #3
 8005fac:	d101      	bne.n	8005fb2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e099      	b.n	80060e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005fb2:	4b4f      	ldr	r3, [pc, #316]	; (80060f0 <RCCEx_PLL2_Config+0x15c>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a4e      	ldr	r2, [pc, #312]	; (80060f0 <RCCEx_PLL2_Config+0x15c>)
 8005fb8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005fbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fbe:	f7fb faf9 	bl	80015b4 <HAL_GetTick>
 8005fc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005fc4:	e008      	b.n	8005fd8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005fc6:	f7fb faf5 	bl	80015b4 <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d901      	bls.n	8005fd8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e086      	b.n	80060e6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005fd8:	4b45      	ldr	r3, [pc, #276]	; (80060f0 <RCCEx_PLL2_Config+0x15c>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1f0      	bne.n	8005fc6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005fe4:	4b42      	ldr	r3, [pc, #264]	; (80060f0 <RCCEx_PLL2_Config+0x15c>)
 8005fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	031b      	lsls	r3, r3, #12
 8005ff2:	493f      	ldr	r1, [pc, #252]	; (80060f0 <RCCEx_PLL2_Config+0x15c>)
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	628b      	str	r3, [r1, #40]	; 0x28
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	3b01      	subs	r3, #1
 8006008:	025b      	lsls	r3, r3, #9
 800600a:	b29b      	uxth	r3, r3
 800600c:	431a      	orrs	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	3b01      	subs	r3, #1
 8006014:	041b      	lsls	r3, r3, #16
 8006016:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800601a:	431a      	orrs	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	3b01      	subs	r3, #1
 8006022:	061b      	lsls	r3, r3, #24
 8006024:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006028:	4931      	ldr	r1, [pc, #196]	; (80060f0 <RCCEx_PLL2_Config+0x15c>)
 800602a:	4313      	orrs	r3, r2
 800602c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800602e:	4b30      	ldr	r3, [pc, #192]	; (80060f0 <RCCEx_PLL2_Config+0x15c>)
 8006030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006032:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	492d      	ldr	r1, [pc, #180]	; (80060f0 <RCCEx_PLL2_Config+0x15c>)
 800603c:	4313      	orrs	r3, r2
 800603e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006040:	4b2b      	ldr	r3, [pc, #172]	; (80060f0 <RCCEx_PLL2_Config+0x15c>)
 8006042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006044:	f023 0220 	bic.w	r2, r3, #32
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	4928      	ldr	r1, [pc, #160]	; (80060f0 <RCCEx_PLL2_Config+0x15c>)
 800604e:	4313      	orrs	r3, r2
 8006050:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006052:	4b27      	ldr	r3, [pc, #156]	; (80060f0 <RCCEx_PLL2_Config+0x15c>)
 8006054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006056:	4a26      	ldr	r2, [pc, #152]	; (80060f0 <RCCEx_PLL2_Config+0x15c>)
 8006058:	f023 0310 	bic.w	r3, r3, #16
 800605c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800605e:	4b24      	ldr	r3, [pc, #144]	; (80060f0 <RCCEx_PLL2_Config+0x15c>)
 8006060:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006062:	4b24      	ldr	r3, [pc, #144]	; (80060f4 <RCCEx_PLL2_Config+0x160>)
 8006064:	4013      	ands	r3, r2
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	69d2      	ldr	r2, [r2, #28]
 800606a:	00d2      	lsls	r2, r2, #3
 800606c:	4920      	ldr	r1, [pc, #128]	; (80060f0 <RCCEx_PLL2_Config+0x15c>)
 800606e:	4313      	orrs	r3, r2
 8006070:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006072:	4b1f      	ldr	r3, [pc, #124]	; (80060f0 <RCCEx_PLL2_Config+0x15c>)
 8006074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006076:	4a1e      	ldr	r2, [pc, #120]	; (80060f0 <RCCEx_PLL2_Config+0x15c>)
 8006078:	f043 0310 	orr.w	r3, r3, #16
 800607c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d106      	bne.n	8006092 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006084:	4b1a      	ldr	r3, [pc, #104]	; (80060f0 <RCCEx_PLL2_Config+0x15c>)
 8006086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006088:	4a19      	ldr	r2, [pc, #100]	; (80060f0 <RCCEx_PLL2_Config+0x15c>)
 800608a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800608e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006090:	e00f      	b.n	80060b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d106      	bne.n	80060a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006098:	4b15      	ldr	r3, [pc, #84]	; (80060f0 <RCCEx_PLL2_Config+0x15c>)
 800609a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609c:	4a14      	ldr	r2, [pc, #80]	; (80060f0 <RCCEx_PLL2_Config+0x15c>)
 800609e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80060a4:	e005      	b.n	80060b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80060a6:	4b12      	ldr	r3, [pc, #72]	; (80060f0 <RCCEx_PLL2_Config+0x15c>)
 80060a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060aa:	4a11      	ldr	r2, [pc, #68]	; (80060f0 <RCCEx_PLL2_Config+0x15c>)
 80060ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80060b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80060b2:	4b0f      	ldr	r3, [pc, #60]	; (80060f0 <RCCEx_PLL2_Config+0x15c>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a0e      	ldr	r2, [pc, #56]	; (80060f0 <RCCEx_PLL2_Config+0x15c>)
 80060b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060be:	f7fb fa79 	bl	80015b4 <HAL_GetTick>
 80060c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80060c4:	e008      	b.n	80060d8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80060c6:	f7fb fa75 	bl	80015b4 <HAL_GetTick>
 80060ca:	4602      	mov	r2, r0
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d901      	bls.n	80060d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e006      	b.n	80060e6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80060d8:	4b05      	ldr	r3, [pc, #20]	; (80060f0 <RCCEx_PLL2_Config+0x15c>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d0f0      	beq.n	80060c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80060e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	58024400 	.word	0x58024400
 80060f4:	ffff0007 	.word	0xffff0007

080060f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006102:	2300      	movs	r3, #0
 8006104:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006106:	4b53      	ldr	r3, [pc, #332]	; (8006254 <RCCEx_PLL3_Config+0x15c>)
 8006108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610a:	f003 0303 	and.w	r3, r3, #3
 800610e:	2b03      	cmp	r3, #3
 8006110:	d101      	bne.n	8006116 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e099      	b.n	800624a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006116:	4b4f      	ldr	r3, [pc, #316]	; (8006254 <RCCEx_PLL3_Config+0x15c>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a4e      	ldr	r2, [pc, #312]	; (8006254 <RCCEx_PLL3_Config+0x15c>)
 800611c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006120:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006122:	f7fb fa47 	bl	80015b4 <HAL_GetTick>
 8006126:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006128:	e008      	b.n	800613c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800612a:	f7fb fa43 	bl	80015b4 <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	2b02      	cmp	r3, #2
 8006136:	d901      	bls.n	800613c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e086      	b.n	800624a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800613c:	4b45      	ldr	r3, [pc, #276]	; (8006254 <RCCEx_PLL3_Config+0x15c>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1f0      	bne.n	800612a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006148:	4b42      	ldr	r3, [pc, #264]	; (8006254 <RCCEx_PLL3_Config+0x15c>)
 800614a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	051b      	lsls	r3, r3, #20
 8006156:	493f      	ldr	r1, [pc, #252]	; (8006254 <RCCEx_PLL3_Config+0x15c>)
 8006158:	4313      	orrs	r3, r2
 800615a:	628b      	str	r3, [r1, #40]	; 0x28
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	3b01      	subs	r3, #1
 8006162:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	3b01      	subs	r3, #1
 800616c:	025b      	lsls	r3, r3, #9
 800616e:	b29b      	uxth	r3, r3
 8006170:	431a      	orrs	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	3b01      	subs	r3, #1
 8006178:	041b      	lsls	r3, r3, #16
 800617a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800617e:	431a      	orrs	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	3b01      	subs	r3, #1
 8006186:	061b      	lsls	r3, r3, #24
 8006188:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800618c:	4931      	ldr	r1, [pc, #196]	; (8006254 <RCCEx_PLL3_Config+0x15c>)
 800618e:	4313      	orrs	r3, r2
 8006190:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006192:	4b30      	ldr	r3, [pc, #192]	; (8006254 <RCCEx_PLL3_Config+0x15c>)
 8006194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006196:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	492d      	ldr	r1, [pc, #180]	; (8006254 <RCCEx_PLL3_Config+0x15c>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80061a4:	4b2b      	ldr	r3, [pc, #172]	; (8006254 <RCCEx_PLL3_Config+0x15c>)
 80061a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	4928      	ldr	r1, [pc, #160]	; (8006254 <RCCEx_PLL3_Config+0x15c>)
 80061b2:	4313      	orrs	r3, r2
 80061b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80061b6:	4b27      	ldr	r3, [pc, #156]	; (8006254 <RCCEx_PLL3_Config+0x15c>)
 80061b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ba:	4a26      	ldr	r2, [pc, #152]	; (8006254 <RCCEx_PLL3_Config+0x15c>)
 80061bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80061c2:	4b24      	ldr	r3, [pc, #144]	; (8006254 <RCCEx_PLL3_Config+0x15c>)
 80061c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061c6:	4b24      	ldr	r3, [pc, #144]	; (8006258 <RCCEx_PLL3_Config+0x160>)
 80061c8:	4013      	ands	r3, r2
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	69d2      	ldr	r2, [r2, #28]
 80061ce:	00d2      	lsls	r2, r2, #3
 80061d0:	4920      	ldr	r1, [pc, #128]	; (8006254 <RCCEx_PLL3_Config+0x15c>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80061d6:	4b1f      	ldr	r3, [pc, #124]	; (8006254 <RCCEx_PLL3_Config+0x15c>)
 80061d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061da:	4a1e      	ldr	r2, [pc, #120]	; (8006254 <RCCEx_PLL3_Config+0x15c>)
 80061dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d106      	bne.n	80061f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80061e8:	4b1a      	ldr	r3, [pc, #104]	; (8006254 <RCCEx_PLL3_Config+0x15c>)
 80061ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ec:	4a19      	ldr	r2, [pc, #100]	; (8006254 <RCCEx_PLL3_Config+0x15c>)
 80061ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80061f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80061f4:	e00f      	b.n	8006216 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d106      	bne.n	800620a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80061fc:	4b15      	ldr	r3, [pc, #84]	; (8006254 <RCCEx_PLL3_Config+0x15c>)
 80061fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006200:	4a14      	ldr	r2, [pc, #80]	; (8006254 <RCCEx_PLL3_Config+0x15c>)
 8006202:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006206:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006208:	e005      	b.n	8006216 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800620a:	4b12      	ldr	r3, [pc, #72]	; (8006254 <RCCEx_PLL3_Config+0x15c>)
 800620c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620e:	4a11      	ldr	r2, [pc, #68]	; (8006254 <RCCEx_PLL3_Config+0x15c>)
 8006210:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006214:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006216:	4b0f      	ldr	r3, [pc, #60]	; (8006254 <RCCEx_PLL3_Config+0x15c>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a0e      	ldr	r2, [pc, #56]	; (8006254 <RCCEx_PLL3_Config+0x15c>)
 800621c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006220:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006222:	f7fb f9c7 	bl	80015b4 <HAL_GetTick>
 8006226:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006228:	e008      	b.n	800623c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800622a:	f7fb f9c3 	bl	80015b4 <HAL_GetTick>
 800622e:	4602      	mov	r2, r0
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	2b02      	cmp	r3, #2
 8006236:	d901      	bls.n	800623c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e006      	b.n	800624a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800623c:	4b05      	ldr	r3, [pc, #20]	; (8006254 <RCCEx_PLL3_Config+0x15c>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d0f0      	beq.n	800622a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006248:	7bfb      	ldrb	r3, [r7, #15]
}
 800624a:	4618      	mov	r0, r3
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	58024400 	.word	0x58024400
 8006258:	ffff0007 	.word	0xffff0007

0800625c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d101      	bne.n	800626e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e049      	b.n	8006302 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006274:	b2db      	uxtb	r3, r3
 8006276:	2b00      	cmp	r3, #0
 8006278:	d106      	bne.n	8006288 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 f841 	bl	800630a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2202      	movs	r2, #2
 800628c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	3304      	adds	r3, #4
 8006298:	4619      	mov	r1, r3
 800629a:	4610      	mov	r0, r2
 800629c:	f000 f9be 	bl	800661c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3708      	adds	r7, #8
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800630a:	b480      	push	{r7}
 800630c:	b083      	sub	sp, #12
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006312:	bf00      	nop
 8006314:	370c      	adds	r7, #12
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
	...

08006320 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800632e:	b2db      	uxtb	r3, r3
 8006330:	2b01      	cmp	r3, #1
 8006332:	d001      	beq.n	8006338 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e021      	b.n	800637c <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2202      	movs	r2, #2
 800633c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68da      	ldr	r2, [r3, #12]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f042 0201 	orr.w	r2, r2, #1
 800634e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689a      	ldr	r2, [r3, #8]
 8006356:	4b0c      	ldr	r3, [pc, #48]	; (8006388 <HAL_TIM_Base_Start_IT+0x68>)
 8006358:	4013      	ands	r3, r2
 800635a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2b06      	cmp	r3, #6
 8006360:	d00b      	beq.n	800637a <HAL_TIM_Base_Start_IT+0x5a>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006368:	d007      	beq.n	800637a <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f042 0201 	orr.w	r2, r2, #1
 8006378:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3714      	adds	r7, #20
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr
 8006388:	00010007 	.word	0x00010007

0800638c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d122      	bne.n	80063e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	f003 0302 	and.w	r3, r3, #2
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d11b      	bne.n	80063e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f06f 0202 	mvn.w	r2, #2
 80063b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	f003 0303 	and.w	r3, r3, #3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d003      	beq.n	80063d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 f905 	bl	80065de <HAL_TIM_IC_CaptureCallback>
 80063d4:	e005      	b.n	80063e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f8f7 	bl	80065ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 f908 	bl	80065f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	f003 0304 	and.w	r3, r3, #4
 80063f2:	2b04      	cmp	r3, #4
 80063f4:	d122      	bne.n	800643c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	f003 0304 	and.w	r3, r3, #4
 8006400:	2b04      	cmp	r3, #4
 8006402:	d11b      	bne.n	800643c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f06f 0204 	mvn.w	r2, #4
 800640c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2202      	movs	r2, #2
 8006412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800641e:	2b00      	cmp	r3, #0
 8006420:	d003      	beq.n	800642a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 f8db 	bl	80065de <HAL_TIM_IC_CaptureCallback>
 8006428:	e005      	b.n	8006436 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f8cd 	bl	80065ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 f8de 	bl	80065f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	f003 0308 	and.w	r3, r3, #8
 8006446:	2b08      	cmp	r3, #8
 8006448:	d122      	bne.n	8006490 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	f003 0308 	and.w	r3, r3, #8
 8006454:	2b08      	cmp	r3, #8
 8006456:	d11b      	bne.n	8006490 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f06f 0208 	mvn.w	r2, #8
 8006460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2204      	movs	r2, #4
 8006466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	69db      	ldr	r3, [r3, #28]
 800646e:	f003 0303 	and.w	r3, r3, #3
 8006472:	2b00      	cmp	r3, #0
 8006474:	d003      	beq.n	800647e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 f8b1 	bl	80065de <HAL_TIM_IC_CaptureCallback>
 800647c:	e005      	b.n	800648a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 f8a3 	bl	80065ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 f8b4 	bl	80065f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	f003 0310 	and.w	r3, r3, #16
 800649a:	2b10      	cmp	r3, #16
 800649c:	d122      	bne.n	80064e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	f003 0310 	and.w	r3, r3, #16
 80064a8:	2b10      	cmp	r3, #16
 80064aa:	d11b      	bne.n	80064e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f06f 0210 	mvn.w	r2, #16
 80064b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2208      	movs	r2, #8
 80064ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	69db      	ldr	r3, [r3, #28]
 80064c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d003      	beq.n	80064d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 f887 	bl	80065de <HAL_TIM_IC_CaptureCallback>
 80064d0:	e005      	b.n	80064de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f879 	bl	80065ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 f88a 	bl	80065f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d10e      	bne.n	8006510 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	f003 0301 	and.w	r3, r3, #1
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d107      	bne.n	8006510 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f06f 0201 	mvn.w	r2, #1
 8006508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f7fa fbaa 	bl	8000c64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800651a:	2b80      	cmp	r3, #128	; 0x80
 800651c:	d10e      	bne.n	800653c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006528:	2b80      	cmp	r3, #128	; 0x80
 800652a:	d107      	bne.n	800653c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f914 	bl	8006764 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800654a:	d10e      	bne.n	800656a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006556:	2b80      	cmp	r3, #128	; 0x80
 8006558:	d107      	bne.n	800656a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f907 	bl	8006778 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006574:	2b40      	cmp	r3, #64	; 0x40
 8006576:	d10e      	bne.n	8006596 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006582:	2b40      	cmp	r3, #64	; 0x40
 8006584:	d107      	bne.n	8006596 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800658e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 f838 	bl	8006606 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	f003 0320 	and.w	r3, r3, #32
 80065a0:	2b20      	cmp	r3, #32
 80065a2:	d10e      	bne.n	80065c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	f003 0320 	and.w	r3, r3, #32
 80065ae:	2b20      	cmp	r3, #32
 80065b0:	d107      	bne.n	80065c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f06f 0220 	mvn.w	r2, #32
 80065ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 f8c7 	bl	8006750 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065c2:	bf00      	nop
 80065c4:	3708      	adds	r7, #8
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065ca:	b480      	push	{r7}
 80065cc:	b083      	sub	sp, #12
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065d2:	bf00      	nop
 80065d4:	370c      	adds	r7, #12
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr

080065de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065de:	b480      	push	{r7}
 80065e0:	b083      	sub	sp, #12
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065e6:	bf00      	nop
 80065e8:	370c      	adds	r7, #12
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr

080065f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065f2:	b480      	push	{r7}
 80065f4:	b083      	sub	sp, #12
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065fa:	bf00      	nop
 80065fc:	370c      	adds	r7, #12
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr

08006606 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006606:	b480      	push	{r7}
 8006608:	b083      	sub	sp, #12
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800660e:	bf00      	nop
 8006610:	370c      	adds	r7, #12
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
	...

0800661c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a40      	ldr	r2, [pc, #256]	; (8006730 <TIM_Base_SetConfig+0x114>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d013      	beq.n	800665c <TIM_Base_SetConfig+0x40>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800663a:	d00f      	beq.n	800665c <TIM_Base_SetConfig+0x40>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a3d      	ldr	r2, [pc, #244]	; (8006734 <TIM_Base_SetConfig+0x118>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d00b      	beq.n	800665c <TIM_Base_SetConfig+0x40>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a3c      	ldr	r2, [pc, #240]	; (8006738 <TIM_Base_SetConfig+0x11c>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d007      	beq.n	800665c <TIM_Base_SetConfig+0x40>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a3b      	ldr	r2, [pc, #236]	; (800673c <TIM_Base_SetConfig+0x120>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d003      	beq.n	800665c <TIM_Base_SetConfig+0x40>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a3a      	ldr	r2, [pc, #232]	; (8006740 <TIM_Base_SetConfig+0x124>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d108      	bne.n	800666e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006662:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	4313      	orrs	r3, r2
 800666c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a2f      	ldr	r2, [pc, #188]	; (8006730 <TIM_Base_SetConfig+0x114>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d01f      	beq.n	80066b6 <TIM_Base_SetConfig+0x9a>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800667c:	d01b      	beq.n	80066b6 <TIM_Base_SetConfig+0x9a>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a2c      	ldr	r2, [pc, #176]	; (8006734 <TIM_Base_SetConfig+0x118>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d017      	beq.n	80066b6 <TIM_Base_SetConfig+0x9a>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a2b      	ldr	r2, [pc, #172]	; (8006738 <TIM_Base_SetConfig+0x11c>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d013      	beq.n	80066b6 <TIM_Base_SetConfig+0x9a>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a2a      	ldr	r2, [pc, #168]	; (800673c <TIM_Base_SetConfig+0x120>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d00f      	beq.n	80066b6 <TIM_Base_SetConfig+0x9a>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a29      	ldr	r2, [pc, #164]	; (8006740 <TIM_Base_SetConfig+0x124>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d00b      	beq.n	80066b6 <TIM_Base_SetConfig+0x9a>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a28      	ldr	r2, [pc, #160]	; (8006744 <TIM_Base_SetConfig+0x128>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d007      	beq.n	80066b6 <TIM_Base_SetConfig+0x9a>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a27      	ldr	r2, [pc, #156]	; (8006748 <TIM_Base_SetConfig+0x12c>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d003      	beq.n	80066b6 <TIM_Base_SetConfig+0x9a>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a26      	ldr	r2, [pc, #152]	; (800674c <TIM_Base_SetConfig+0x130>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d108      	bne.n	80066c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	689a      	ldr	r2, [r3, #8]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a10      	ldr	r2, [pc, #64]	; (8006730 <TIM_Base_SetConfig+0x114>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d00f      	beq.n	8006714 <TIM_Base_SetConfig+0xf8>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a12      	ldr	r2, [pc, #72]	; (8006740 <TIM_Base_SetConfig+0x124>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d00b      	beq.n	8006714 <TIM_Base_SetConfig+0xf8>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a11      	ldr	r2, [pc, #68]	; (8006744 <TIM_Base_SetConfig+0x128>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d007      	beq.n	8006714 <TIM_Base_SetConfig+0xf8>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a10      	ldr	r2, [pc, #64]	; (8006748 <TIM_Base_SetConfig+0x12c>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d003      	beq.n	8006714 <TIM_Base_SetConfig+0xf8>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a0f      	ldr	r2, [pc, #60]	; (800674c <TIM_Base_SetConfig+0x130>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d103      	bne.n	800671c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	691a      	ldr	r2, [r3, #16]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	615a      	str	r2, [r3, #20]
}
 8006722:	bf00      	nop
 8006724:	3714      	adds	r7, #20
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	40010000 	.word	0x40010000
 8006734:	40000400 	.word	0x40000400
 8006738:	40000800 	.word	0x40000800
 800673c:	40000c00 	.word	0x40000c00
 8006740:	40010400 	.word	0x40010400
 8006744:	40014000 	.word	0x40014000
 8006748:	40014400 	.word	0x40014400
 800674c:	40014800 	.word	0x40014800

08006750 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d101      	bne.n	800679e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e042      	b.n	8006824 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d106      	bne.n	80067b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f7fa faa5 	bl	8000d00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2224      	movs	r2, #36	; 0x24
 80067ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f022 0201 	bic.w	r2, r2, #1
 80067cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 f8c2 	bl	8006958 <UART_SetConfig>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d101      	bne.n	80067de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e022      	b.n	8006824 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d002      	beq.n	80067ec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 fe1c 	bl	8007424 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	685a      	ldr	r2, [r3, #4]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	689a      	ldr	r2, [r3, #8]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800680a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f042 0201 	orr.w	r2, r2, #1
 800681a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 fea3 	bl	8007568 <UART_CheckIdleState>
 8006822:	4603      	mov	r3, r0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b08a      	sub	sp, #40	; 0x28
 8006830:	af02      	add	r7, sp, #8
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	603b      	str	r3, [r7, #0]
 8006838:	4613      	mov	r3, r2
 800683a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006842:	2b20      	cmp	r3, #32
 8006844:	f040 8083 	bne.w	800694e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d002      	beq.n	8006854 <HAL_UART_Transmit+0x28>
 800684e:	88fb      	ldrh	r3, [r7, #6]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d101      	bne.n	8006858 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e07b      	b.n	8006950 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800685e:	2b01      	cmp	r3, #1
 8006860:	d101      	bne.n	8006866 <HAL_UART_Transmit+0x3a>
 8006862:	2302      	movs	r3, #2
 8006864:	e074      	b.n	8006950 <HAL_UART_Transmit+0x124>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2201      	movs	r2, #1
 800686a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2221      	movs	r2, #33	; 0x21
 800687a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800687e:	f7fa fe99 	bl	80015b4 <HAL_GetTick>
 8006882:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	88fa      	ldrh	r2, [r7, #6]
 8006888:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	88fa      	ldrh	r2, [r7, #6]
 8006890:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800689c:	d108      	bne.n	80068b0 <HAL_UART_Transmit+0x84>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d104      	bne.n	80068b0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80068a6:	2300      	movs	r3, #0
 80068a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	61bb      	str	r3, [r7, #24]
 80068ae:	e003      	b.n	80068b8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068b4:	2300      	movs	r3, #0
 80068b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 80068c0:	e02c      	b.n	800691c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	2200      	movs	r2, #0
 80068ca:	2180      	movs	r1, #128	; 0x80
 80068cc:	68f8      	ldr	r0, [r7, #12]
 80068ce:	f000 fe93 	bl	80075f8 <UART_WaitOnFlagUntilTimeout>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d001      	beq.n	80068dc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80068d8:	2303      	movs	r3, #3
 80068da:	e039      	b.n	8006950 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10b      	bne.n	80068fa <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	881b      	ldrh	r3, [r3, #0]
 80068e6:	461a      	mov	r2, r3
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	3302      	adds	r3, #2
 80068f6:	61bb      	str	r3, [r7, #24]
 80068f8:	e007      	b.n	800690a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	781a      	ldrb	r2, [r3, #0]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	3301      	adds	r3, #1
 8006908:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006910:	b29b      	uxth	r3, r3
 8006912:	3b01      	subs	r3, #1
 8006914:	b29a      	uxth	r2, r3
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006922:	b29b      	uxth	r3, r3
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1cc      	bne.n	80068c2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	9300      	str	r3, [sp, #0]
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	2200      	movs	r2, #0
 8006930:	2140      	movs	r1, #64	; 0x40
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	f000 fe60 	bl	80075f8 <UART_WaitOnFlagUntilTimeout>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d001      	beq.n	8006942 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e006      	b.n	8006950 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2220      	movs	r2, #32
 8006946:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800694a:	2300      	movs	r3, #0
 800694c:	e000      	b.n	8006950 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800694e:	2302      	movs	r3, #2
  }
}
 8006950:	4618      	mov	r0, r3
 8006952:	3720      	adds	r7, #32
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006958:	b5b0      	push	{r4, r5, r7, lr}
 800695a:	b08e      	sub	sp, #56	; 0x38
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006960:	2300      	movs	r3, #0
 8006962:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	689a      	ldr	r2, [r3, #8]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	431a      	orrs	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	431a      	orrs	r2, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	69db      	ldr	r3, [r3, #28]
 800697a:	4313      	orrs	r3, r2
 800697c:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006982:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006984:	4313      	orrs	r3, r2
 8006986:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	4bc0      	ldr	r3, [pc, #768]	; (8006c90 <UART_SetConfig+0x338>)
 8006990:	4013      	ands	r3, r2
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	6812      	ldr	r2, [r2, #0]
 8006996:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006998:	430b      	orrs	r3, r1
 800699a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68da      	ldr	r2, [r3, #12]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	430a      	orrs	r2, r1
 80069b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4ab5      	ldr	r2, [pc, #724]	; (8006c94 <UART_SetConfig+0x33c>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d004      	beq.n	80069cc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069c8:	4313      	orrs	r3, r2
 80069ca:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	689a      	ldr	r2, [r3, #8]
 80069d2:	4bb1      	ldr	r3, [pc, #708]	; (8006c98 <UART_SetConfig+0x340>)
 80069d4:	4013      	ands	r3, r2
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	6812      	ldr	r2, [r2, #0]
 80069da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80069dc:	430b      	orrs	r3, r1
 80069de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e6:	f023 010f 	bic.w	r1, r3, #15
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	430a      	orrs	r2, r1
 80069f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4aa8      	ldr	r2, [pc, #672]	; (8006c9c <UART_SetConfig+0x344>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d177      	bne.n	8006af0 <UART_SetConfig+0x198>
 8006a00:	4ba7      	ldr	r3, [pc, #668]	; (8006ca0 <UART_SetConfig+0x348>)
 8006a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a08:	2b28      	cmp	r3, #40	; 0x28
 8006a0a:	d86d      	bhi.n	8006ae8 <UART_SetConfig+0x190>
 8006a0c:	a201      	add	r2, pc, #4	; (adr r2, 8006a14 <UART_SetConfig+0xbc>)
 8006a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a12:	bf00      	nop
 8006a14:	08006ab9 	.word	0x08006ab9
 8006a18:	08006ae9 	.word	0x08006ae9
 8006a1c:	08006ae9 	.word	0x08006ae9
 8006a20:	08006ae9 	.word	0x08006ae9
 8006a24:	08006ae9 	.word	0x08006ae9
 8006a28:	08006ae9 	.word	0x08006ae9
 8006a2c:	08006ae9 	.word	0x08006ae9
 8006a30:	08006ae9 	.word	0x08006ae9
 8006a34:	08006ac1 	.word	0x08006ac1
 8006a38:	08006ae9 	.word	0x08006ae9
 8006a3c:	08006ae9 	.word	0x08006ae9
 8006a40:	08006ae9 	.word	0x08006ae9
 8006a44:	08006ae9 	.word	0x08006ae9
 8006a48:	08006ae9 	.word	0x08006ae9
 8006a4c:	08006ae9 	.word	0x08006ae9
 8006a50:	08006ae9 	.word	0x08006ae9
 8006a54:	08006ac9 	.word	0x08006ac9
 8006a58:	08006ae9 	.word	0x08006ae9
 8006a5c:	08006ae9 	.word	0x08006ae9
 8006a60:	08006ae9 	.word	0x08006ae9
 8006a64:	08006ae9 	.word	0x08006ae9
 8006a68:	08006ae9 	.word	0x08006ae9
 8006a6c:	08006ae9 	.word	0x08006ae9
 8006a70:	08006ae9 	.word	0x08006ae9
 8006a74:	08006ad1 	.word	0x08006ad1
 8006a78:	08006ae9 	.word	0x08006ae9
 8006a7c:	08006ae9 	.word	0x08006ae9
 8006a80:	08006ae9 	.word	0x08006ae9
 8006a84:	08006ae9 	.word	0x08006ae9
 8006a88:	08006ae9 	.word	0x08006ae9
 8006a8c:	08006ae9 	.word	0x08006ae9
 8006a90:	08006ae9 	.word	0x08006ae9
 8006a94:	08006ad9 	.word	0x08006ad9
 8006a98:	08006ae9 	.word	0x08006ae9
 8006a9c:	08006ae9 	.word	0x08006ae9
 8006aa0:	08006ae9 	.word	0x08006ae9
 8006aa4:	08006ae9 	.word	0x08006ae9
 8006aa8:	08006ae9 	.word	0x08006ae9
 8006aac:	08006ae9 	.word	0x08006ae9
 8006ab0:	08006ae9 	.word	0x08006ae9
 8006ab4:	08006ae1 	.word	0x08006ae1
 8006ab8:	2301      	movs	r3, #1
 8006aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006abe:	e222      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006ac0:	2304      	movs	r3, #4
 8006ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ac6:	e21e      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006ac8:	2308      	movs	r3, #8
 8006aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ace:	e21a      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006ad0:	2310      	movs	r3, #16
 8006ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ad6:	e216      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006ad8:	2320      	movs	r3, #32
 8006ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ade:	e212      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006ae0:	2340      	movs	r3, #64	; 0x40
 8006ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ae6:	e20e      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006ae8:	2380      	movs	r3, #128	; 0x80
 8006aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aee:	e20a      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a6b      	ldr	r2, [pc, #428]	; (8006ca4 <UART_SetConfig+0x34c>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d130      	bne.n	8006b5c <UART_SetConfig+0x204>
 8006afa:	4b69      	ldr	r3, [pc, #420]	; (8006ca0 <UART_SetConfig+0x348>)
 8006afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006afe:	f003 0307 	and.w	r3, r3, #7
 8006b02:	2b05      	cmp	r3, #5
 8006b04:	d826      	bhi.n	8006b54 <UART_SetConfig+0x1fc>
 8006b06:	a201      	add	r2, pc, #4	; (adr r2, 8006b0c <UART_SetConfig+0x1b4>)
 8006b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0c:	08006b25 	.word	0x08006b25
 8006b10:	08006b2d 	.word	0x08006b2d
 8006b14:	08006b35 	.word	0x08006b35
 8006b18:	08006b3d 	.word	0x08006b3d
 8006b1c:	08006b45 	.word	0x08006b45
 8006b20:	08006b4d 	.word	0x08006b4d
 8006b24:	2300      	movs	r3, #0
 8006b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b2a:	e1ec      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006b2c:	2304      	movs	r3, #4
 8006b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b32:	e1e8      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006b34:	2308      	movs	r3, #8
 8006b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b3a:	e1e4      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006b3c:	2310      	movs	r3, #16
 8006b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b42:	e1e0      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006b44:	2320      	movs	r3, #32
 8006b46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b4a:	e1dc      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006b4c:	2340      	movs	r3, #64	; 0x40
 8006b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b52:	e1d8      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006b54:	2380      	movs	r3, #128	; 0x80
 8006b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b5a:	e1d4      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a51      	ldr	r2, [pc, #324]	; (8006ca8 <UART_SetConfig+0x350>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d130      	bne.n	8006bc8 <UART_SetConfig+0x270>
 8006b66:	4b4e      	ldr	r3, [pc, #312]	; (8006ca0 <UART_SetConfig+0x348>)
 8006b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b6a:	f003 0307 	and.w	r3, r3, #7
 8006b6e:	2b05      	cmp	r3, #5
 8006b70:	d826      	bhi.n	8006bc0 <UART_SetConfig+0x268>
 8006b72:	a201      	add	r2, pc, #4	; (adr r2, 8006b78 <UART_SetConfig+0x220>)
 8006b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b78:	08006b91 	.word	0x08006b91
 8006b7c:	08006b99 	.word	0x08006b99
 8006b80:	08006ba1 	.word	0x08006ba1
 8006b84:	08006ba9 	.word	0x08006ba9
 8006b88:	08006bb1 	.word	0x08006bb1
 8006b8c:	08006bb9 	.word	0x08006bb9
 8006b90:	2300      	movs	r3, #0
 8006b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b96:	e1b6      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006b98:	2304      	movs	r3, #4
 8006b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b9e:	e1b2      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006ba0:	2308      	movs	r3, #8
 8006ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ba6:	e1ae      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006ba8:	2310      	movs	r3, #16
 8006baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bae:	e1aa      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006bb0:	2320      	movs	r3, #32
 8006bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bb6:	e1a6      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006bb8:	2340      	movs	r3, #64	; 0x40
 8006bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bbe:	e1a2      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006bc0:	2380      	movs	r3, #128	; 0x80
 8006bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006bc6:	e19e      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a37      	ldr	r2, [pc, #220]	; (8006cac <UART_SetConfig+0x354>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d130      	bne.n	8006c34 <UART_SetConfig+0x2dc>
 8006bd2:	4b33      	ldr	r3, [pc, #204]	; (8006ca0 <UART_SetConfig+0x348>)
 8006bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd6:	f003 0307 	and.w	r3, r3, #7
 8006bda:	2b05      	cmp	r3, #5
 8006bdc:	d826      	bhi.n	8006c2c <UART_SetConfig+0x2d4>
 8006bde:	a201      	add	r2, pc, #4	; (adr r2, 8006be4 <UART_SetConfig+0x28c>)
 8006be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be4:	08006bfd 	.word	0x08006bfd
 8006be8:	08006c05 	.word	0x08006c05
 8006bec:	08006c0d 	.word	0x08006c0d
 8006bf0:	08006c15 	.word	0x08006c15
 8006bf4:	08006c1d 	.word	0x08006c1d
 8006bf8:	08006c25 	.word	0x08006c25
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c02:	e180      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006c04:	2304      	movs	r3, #4
 8006c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c0a:	e17c      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006c0c:	2308      	movs	r3, #8
 8006c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c12:	e178      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006c14:	2310      	movs	r3, #16
 8006c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c1a:	e174      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006c1c:	2320      	movs	r3, #32
 8006c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c22:	e170      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006c24:	2340      	movs	r3, #64	; 0x40
 8006c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c2a:	e16c      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006c2c:	2380      	movs	r3, #128	; 0x80
 8006c2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c32:	e168      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a1d      	ldr	r2, [pc, #116]	; (8006cb0 <UART_SetConfig+0x358>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d142      	bne.n	8006cc4 <UART_SetConfig+0x36c>
 8006c3e:	4b18      	ldr	r3, [pc, #96]	; (8006ca0 <UART_SetConfig+0x348>)
 8006c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c42:	f003 0307 	and.w	r3, r3, #7
 8006c46:	2b05      	cmp	r3, #5
 8006c48:	d838      	bhi.n	8006cbc <UART_SetConfig+0x364>
 8006c4a:	a201      	add	r2, pc, #4	; (adr r2, 8006c50 <UART_SetConfig+0x2f8>)
 8006c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c50:	08006c69 	.word	0x08006c69
 8006c54:	08006c71 	.word	0x08006c71
 8006c58:	08006c79 	.word	0x08006c79
 8006c5c:	08006c81 	.word	0x08006c81
 8006c60:	08006c89 	.word	0x08006c89
 8006c64:	08006cb5 	.word	0x08006cb5
 8006c68:	2300      	movs	r3, #0
 8006c6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c6e:	e14a      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006c70:	2304      	movs	r3, #4
 8006c72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c76:	e146      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006c78:	2308      	movs	r3, #8
 8006c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c7e:	e142      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006c80:	2310      	movs	r3, #16
 8006c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c86:	e13e      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006c88:	2320      	movs	r3, #32
 8006c8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006c8e:	e13a      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006c90:	cfff69f3 	.word	0xcfff69f3
 8006c94:	58000c00 	.word	0x58000c00
 8006c98:	11fff4ff 	.word	0x11fff4ff
 8006c9c:	40011000 	.word	0x40011000
 8006ca0:	58024400 	.word	0x58024400
 8006ca4:	40004400 	.word	0x40004400
 8006ca8:	40004800 	.word	0x40004800
 8006cac:	40004c00 	.word	0x40004c00
 8006cb0:	40005000 	.word	0x40005000
 8006cb4:	2340      	movs	r3, #64	; 0x40
 8006cb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cba:	e124      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006cbc:	2380      	movs	r3, #128	; 0x80
 8006cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006cc2:	e120      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4acc      	ldr	r2, [pc, #816]	; (8006ffc <UART_SetConfig+0x6a4>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d176      	bne.n	8006dbc <UART_SetConfig+0x464>
 8006cce:	4bcc      	ldr	r3, [pc, #816]	; (8007000 <UART_SetConfig+0x6a8>)
 8006cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cd6:	2b28      	cmp	r3, #40	; 0x28
 8006cd8:	d86c      	bhi.n	8006db4 <UART_SetConfig+0x45c>
 8006cda:	a201      	add	r2, pc, #4	; (adr r2, 8006ce0 <UART_SetConfig+0x388>)
 8006cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce0:	08006d85 	.word	0x08006d85
 8006ce4:	08006db5 	.word	0x08006db5
 8006ce8:	08006db5 	.word	0x08006db5
 8006cec:	08006db5 	.word	0x08006db5
 8006cf0:	08006db5 	.word	0x08006db5
 8006cf4:	08006db5 	.word	0x08006db5
 8006cf8:	08006db5 	.word	0x08006db5
 8006cfc:	08006db5 	.word	0x08006db5
 8006d00:	08006d8d 	.word	0x08006d8d
 8006d04:	08006db5 	.word	0x08006db5
 8006d08:	08006db5 	.word	0x08006db5
 8006d0c:	08006db5 	.word	0x08006db5
 8006d10:	08006db5 	.word	0x08006db5
 8006d14:	08006db5 	.word	0x08006db5
 8006d18:	08006db5 	.word	0x08006db5
 8006d1c:	08006db5 	.word	0x08006db5
 8006d20:	08006d95 	.word	0x08006d95
 8006d24:	08006db5 	.word	0x08006db5
 8006d28:	08006db5 	.word	0x08006db5
 8006d2c:	08006db5 	.word	0x08006db5
 8006d30:	08006db5 	.word	0x08006db5
 8006d34:	08006db5 	.word	0x08006db5
 8006d38:	08006db5 	.word	0x08006db5
 8006d3c:	08006db5 	.word	0x08006db5
 8006d40:	08006d9d 	.word	0x08006d9d
 8006d44:	08006db5 	.word	0x08006db5
 8006d48:	08006db5 	.word	0x08006db5
 8006d4c:	08006db5 	.word	0x08006db5
 8006d50:	08006db5 	.word	0x08006db5
 8006d54:	08006db5 	.word	0x08006db5
 8006d58:	08006db5 	.word	0x08006db5
 8006d5c:	08006db5 	.word	0x08006db5
 8006d60:	08006da5 	.word	0x08006da5
 8006d64:	08006db5 	.word	0x08006db5
 8006d68:	08006db5 	.word	0x08006db5
 8006d6c:	08006db5 	.word	0x08006db5
 8006d70:	08006db5 	.word	0x08006db5
 8006d74:	08006db5 	.word	0x08006db5
 8006d78:	08006db5 	.word	0x08006db5
 8006d7c:	08006db5 	.word	0x08006db5
 8006d80:	08006dad 	.word	0x08006dad
 8006d84:	2301      	movs	r3, #1
 8006d86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d8a:	e0bc      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006d8c:	2304      	movs	r3, #4
 8006d8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d92:	e0b8      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006d94:	2308      	movs	r3, #8
 8006d96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006d9a:	e0b4      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006d9c:	2310      	movs	r3, #16
 8006d9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006da2:	e0b0      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006da4:	2320      	movs	r3, #32
 8006da6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006daa:	e0ac      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006dac:	2340      	movs	r3, #64	; 0x40
 8006dae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006db2:	e0a8      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006db4:	2380      	movs	r3, #128	; 0x80
 8006db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dba:	e0a4      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a90      	ldr	r2, [pc, #576]	; (8007004 <UART_SetConfig+0x6ac>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d130      	bne.n	8006e28 <UART_SetConfig+0x4d0>
 8006dc6:	4b8e      	ldr	r3, [pc, #568]	; (8007000 <UART_SetConfig+0x6a8>)
 8006dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dca:	f003 0307 	and.w	r3, r3, #7
 8006dce:	2b05      	cmp	r3, #5
 8006dd0:	d826      	bhi.n	8006e20 <UART_SetConfig+0x4c8>
 8006dd2:	a201      	add	r2, pc, #4	; (adr r2, 8006dd8 <UART_SetConfig+0x480>)
 8006dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd8:	08006df1 	.word	0x08006df1
 8006ddc:	08006df9 	.word	0x08006df9
 8006de0:	08006e01 	.word	0x08006e01
 8006de4:	08006e09 	.word	0x08006e09
 8006de8:	08006e11 	.word	0x08006e11
 8006dec:	08006e19 	.word	0x08006e19
 8006df0:	2300      	movs	r3, #0
 8006df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006df6:	e086      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006df8:	2304      	movs	r3, #4
 8006dfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006dfe:	e082      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006e00:	2308      	movs	r3, #8
 8006e02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e06:	e07e      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006e08:	2310      	movs	r3, #16
 8006e0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e0e:	e07a      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006e10:	2320      	movs	r3, #32
 8006e12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e16:	e076      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006e18:	2340      	movs	r3, #64	; 0x40
 8006e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e1e:	e072      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006e20:	2380      	movs	r3, #128	; 0x80
 8006e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e26:	e06e      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a76      	ldr	r2, [pc, #472]	; (8007008 <UART_SetConfig+0x6b0>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d130      	bne.n	8006e94 <UART_SetConfig+0x53c>
 8006e32:	4b73      	ldr	r3, [pc, #460]	; (8007000 <UART_SetConfig+0x6a8>)
 8006e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e36:	f003 0307 	and.w	r3, r3, #7
 8006e3a:	2b05      	cmp	r3, #5
 8006e3c:	d826      	bhi.n	8006e8c <UART_SetConfig+0x534>
 8006e3e:	a201      	add	r2, pc, #4	; (adr r2, 8006e44 <UART_SetConfig+0x4ec>)
 8006e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e44:	08006e5d 	.word	0x08006e5d
 8006e48:	08006e65 	.word	0x08006e65
 8006e4c:	08006e6d 	.word	0x08006e6d
 8006e50:	08006e75 	.word	0x08006e75
 8006e54:	08006e7d 	.word	0x08006e7d
 8006e58:	08006e85 	.word	0x08006e85
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e62:	e050      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006e64:	2304      	movs	r3, #4
 8006e66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e6a:	e04c      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006e6c:	2308      	movs	r3, #8
 8006e6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e72:	e048      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006e74:	2310      	movs	r3, #16
 8006e76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e7a:	e044      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006e7c:	2320      	movs	r3, #32
 8006e7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e82:	e040      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006e84:	2340      	movs	r3, #64	; 0x40
 8006e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e8a:	e03c      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006e8c:	2380      	movs	r3, #128	; 0x80
 8006e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006e92:	e038      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a5c      	ldr	r2, [pc, #368]	; (800700c <UART_SetConfig+0x6b4>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d130      	bne.n	8006f00 <UART_SetConfig+0x5a8>
 8006e9e:	4b58      	ldr	r3, [pc, #352]	; (8007000 <UART_SetConfig+0x6a8>)
 8006ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ea2:	f003 0307 	and.w	r3, r3, #7
 8006ea6:	2b05      	cmp	r3, #5
 8006ea8:	d826      	bhi.n	8006ef8 <UART_SetConfig+0x5a0>
 8006eaa:	a201      	add	r2, pc, #4	; (adr r2, 8006eb0 <UART_SetConfig+0x558>)
 8006eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb0:	08006ec9 	.word	0x08006ec9
 8006eb4:	08006ed1 	.word	0x08006ed1
 8006eb8:	08006ed9 	.word	0x08006ed9
 8006ebc:	08006ee1 	.word	0x08006ee1
 8006ec0:	08006ee9 	.word	0x08006ee9
 8006ec4:	08006ef1 	.word	0x08006ef1
 8006ec8:	2302      	movs	r3, #2
 8006eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ece:	e01a      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006ed0:	2304      	movs	r3, #4
 8006ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ed6:	e016      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006ed8:	2308      	movs	r3, #8
 8006eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ede:	e012      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006ee0:	2310      	movs	r3, #16
 8006ee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ee6:	e00e      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006ee8:	2320      	movs	r3, #32
 8006eea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006eee:	e00a      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006ef0:	2340      	movs	r3, #64	; 0x40
 8006ef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ef6:	e006      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006ef8:	2380      	movs	r3, #128	; 0x80
 8006efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006efe:	e002      	b.n	8006f06 <UART_SetConfig+0x5ae>
 8006f00:	2380      	movs	r3, #128	; 0x80
 8006f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a40      	ldr	r2, [pc, #256]	; (800700c <UART_SetConfig+0x6b4>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	f040 80ef 	bne.w	80070f0 <UART_SetConfig+0x798>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006f16:	2b20      	cmp	r3, #32
 8006f18:	dc46      	bgt.n	8006fa8 <UART_SetConfig+0x650>
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	f2c0 8081 	blt.w	8007022 <UART_SetConfig+0x6ca>
 8006f20:	3b02      	subs	r3, #2
 8006f22:	2b1e      	cmp	r3, #30
 8006f24:	d87d      	bhi.n	8007022 <UART_SetConfig+0x6ca>
 8006f26:	a201      	add	r2, pc, #4	; (adr r2, 8006f2c <UART_SetConfig+0x5d4>)
 8006f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f2c:	08006faf 	.word	0x08006faf
 8006f30:	08007023 	.word	0x08007023
 8006f34:	08006fb7 	.word	0x08006fb7
 8006f38:	08007023 	.word	0x08007023
 8006f3c:	08007023 	.word	0x08007023
 8006f40:	08007023 	.word	0x08007023
 8006f44:	08006fc7 	.word	0x08006fc7
 8006f48:	08007023 	.word	0x08007023
 8006f4c:	08007023 	.word	0x08007023
 8006f50:	08007023 	.word	0x08007023
 8006f54:	08007023 	.word	0x08007023
 8006f58:	08007023 	.word	0x08007023
 8006f5c:	08007023 	.word	0x08007023
 8006f60:	08007023 	.word	0x08007023
 8006f64:	08006fd7 	.word	0x08006fd7
 8006f68:	08007023 	.word	0x08007023
 8006f6c:	08007023 	.word	0x08007023
 8006f70:	08007023 	.word	0x08007023
 8006f74:	08007023 	.word	0x08007023
 8006f78:	08007023 	.word	0x08007023
 8006f7c:	08007023 	.word	0x08007023
 8006f80:	08007023 	.word	0x08007023
 8006f84:	08007023 	.word	0x08007023
 8006f88:	08007023 	.word	0x08007023
 8006f8c:	08007023 	.word	0x08007023
 8006f90:	08007023 	.word	0x08007023
 8006f94:	08007023 	.word	0x08007023
 8006f98:	08007023 	.word	0x08007023
 8006f9c:	08007023 	.word	0x08007023
 8006fa0:	08007023 	.word	0x08007023
 8006fa4:	08007015 	.word	0x08007015
 8006fa8:	2b40      	cmp	r3, #64	; 0x40
 8006faa:	d036      	beq.n	800701a <UART_SetConfig+0x6c2>
 8006fac:	e039      	b.n	8007022 <UART_SetConfig+0x6ca>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006fae:	f7fe fd33 	bl	8005a18 <HAL_RCCEx_GetD3PCLK1Freq>
 8006fb2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006fb4:	e03b      	b.n	800702e <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fb6:	f107 0314 	add.w	r3, r7, #20
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7fe fd42 	bl	8005a44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006fc4:	e033      	b.n	800702e <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fc6:	f107 0308 	add.w	r3, r7, #8
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7fe fe8e 	bl	8005cec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006fd4:	e02b      	b.n	800702e <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fd6:	4b0a      	ldr	r3, [pc, #40]	; (8007000 <UART_SetConfig+0x6a8>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0320 	and.w	r3, r3, #32
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d009      	beq.n	8006ff6 <UART_SetConfig+0x69e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006fe2:	4b07      	ldr	r3, [pc, #28]	; (8007000 <UART_SetConfig+0x6a8>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	08db      	lsrs	r3, r3, #3
 8006fe8:	f003 0303 	and.w	r3, r3, #3
 8006fec:	4a08      	ldr	r2, [pc, #32]	; (8007010 <UART_SetConfig+0x6b8>)
 8006fee:	fa22 f303 	lsr.w	r3, r2, r3
 8006ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006ff4:	e01b      	b.n	800702e <UART_SetConfig+0x6d6>
          pclk = (uint32_t) HSI_VALUE;
 8006ff6:	4b06      	ldr	r3, [pc, #24]	; (8007010 <UART_SetConfig+0x6b8>)
 8006ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ffa:	e018      	b.n	800702e <UART_SetConfig+0x6d6>
 8006ffc:	40011400 	.word	0x40011400
 8007000:	58024400 	.word	0x58024400
 8007004:	40007800 	.word	0x40007800
 8007008:	40007c00 	.word	0x40007c00
 800700c:	58000c00 	.word	0x58000c00
 8007010:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007014:	4bc4      	ldr	r3, [pc, #784]	; (8007328 <UART_SetConfig+0x9d0>)
 8007016:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007018:	e009      	b.n	800702e <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800701a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800701e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007020:	e005      	b.n	800702e <UART_SetConfig+0x6d6>
      default:
        pclk = 0U;
 8007022:	2300      	movs	r3, #0
 8007024:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800702c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800702e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007030:	2b00      	cmp	r3, #0
 8007032:	f000 81da 	beq.w	80073ea <UART_SetConfig+0xa92>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703a:	4abc      	ldr	r2, [pc, #752]	; (800732c <UART_SetConfig+0x9d4>)
 800703c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007040:	461a      	mov	r2, r3
 8007042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007044:	fbb3 f3f2 	udiv	r3, r3, r2
 8007048:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	685a      	ldr	r2, [r3, #4]
 800704e:	4613      	mov	r3, r2
 8007050:	005b      	lsls	r3, r3, #1
 8007052:	4413      	add	r3, r2
 8007054:	6a3a      	ldr	r2, [r7, #32]
 8007056:	429a      	cmp	r2, r3
 8007058:	d305      	bcc.n	8007066 <UART_SetConfig+0x70e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007060:	6a3a      	ldr	r2, [r7, #32]
 8007062:	429a      	cmp	r2, r3
 8007064:	d903      	bls.n	800706e <UART_SetConfig+0x716>
      {
        ret = HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800706c:	e1bd      	b.n	80073ea <UART_SetConfig+0xa92>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800706e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007070:	4618      	mov	r0, r3
 8007072:	f04f 0100 	mov.w	r1, #0
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707a:	4aac      	ldr	r2, [pc, #688]	; (800732c <UART_SetConfig+0x9d4>)
 800707c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007080:	b29a      	uxth	r2, r3
 8007082:	f04f 0300 	mov.w	r3, #0
 8007086:	f7f9 f9d3 	bl	8000430 <__aeabi_uldivmod>
 800708a:	4602      	mov	r2, r0
 800708c:	460b      	mov	r3, r1
 800708e:	4610      	mov	r0, r2
 8007090:	4619      	mov	r1, r3
 8007092:	f04f 0200 	mov.w	r2, #0
 8007096:	f04f 0300 	mov.w	r3, #0
 800709a:	020b      	lsls	r3, r1, #8
 800709c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80070a0:	0202      	lsls	r2, r0, #8
 80070a2:	6879      	ldr	r1, [r7, #4]
 80070a4:	6849      	ldr	r1, [r1, #4]
 80070a6:	0849      	lsrs	r1, r1, #1
 80070a8:	4608      	mov	r0, r1
 80070aa:	f04f 0100 	mov.w	r1, #0
 80070ae:	1814      	adds	r4, r2, r0
 80070b0:	eb43 0501 	adc.w	r5, r3, r1
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	461a      	mov	r2, r3
 80070ba:	f04f 0300 	mov.w	r3, #0
 80070be:	4620      	mov	r0, r4
 80070c0:	4629      	mov	r1, r5
 80070c2:	f7f9 f9b5 	bl	8000430 <__aeabi_uldivmod>
 80070c6:	4602      	mov	r2, r0
 80070c8:	460b      	mov	r3, r1
 80070ca:	4613      	mov	r3, r2
 80070cc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80070ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070d4:	d308      	bcc.n	80070e8 <UART_SetConfig+0x790>
 80070d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070dc:	d204      	bcs.n	80070e8 <UART_SetConfig+0x790>
        {
          huart->Instance->BRR = usartdiv;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070e4:	60da      	str	r2, [r3, #12]
 80070e6:	e180      	b.n	80073ea <UART_SetConfig+0xa92>
        }
        else
        {
          ret = HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80070ee:	e17c      	b.n	80073ea <UART_SetConfig+0xa92>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	69db      	ldr	r3, [r3, #28]
 80070f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070f8:	f040 80bf 	bne.w	800727a <UART_SetConfig+0x922>
  {
    switch (clocksource)
 80070fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007100:	2b20      	cmp	r3, #32
 8007102:	dc49      	bgt.n	8007198 <UART_SetConfig+0x840>
 8007104:	2b00      	cmp	r3, #0
 8007106:	db7c      	blt.n	8007202 <UART_SetConfig+0x8aa>
 8007108:	2b20      	cmp	r3, #32
 800710a:	d87a      	bhi.n	8007202 <UART_SetConfig+0x8aa>
 800710c:	a201      	add	r2, pc, #4	; (adr r2, 8007114 <UART_SetConfig+0x7bc>)
 800710e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007112:	bf00      	nop
 8007114:	0800719f 	.word	0x0800719f
 8007118:	080071a7 	.word	0x080071a7
 800711c:	08007203 	.word	0x08007203
 8007120:	08007203 	.word	0x08007203
 8007124:	080071af 	.word	0x080071af
 8007128:	08007203 	.word	0x08007203
 800712c:	08007203 	.word	0x08007203
 8007130:	08007203 	.word	0x08007203
 8007134:	080071bf 	.word	0x080071bf
 8007138:	08007203 	.word	0x08007203
 800713c:	08007203 	.word	0x08007203
 8007140:	08007203 	.word	0x08007203
 8007144:	08007203 	.word	0x08007203
 8007148:	08007203 	.word	0x08007203
 800714c:	08007203 	.word	0x08007203
 8007150:	08007203 	.word	0x08007203
 8007154:	080071cf 	.word	0x080071cf
 8007158:	08007203 	.word	0x08007203
 800715c:	08007203 	.word	0x08007203
 8007160:	08007203 	.word	0x08007203
 8007164:	08007203 	.word	0x08007203
 8007168:	08007203 	.word	0x08007203
 800716c:	08007203 	.word	0x08007203
 8007170:	08007203 	.word	0x08007203
 8007174:	08007203 	.word	0x08007203
 8007178:	08007203 	.word	0x08007203
 800717c:	08007203 	.word	0x08007203
 8007180:	08007203 	.word	0x08007203
 8007184:	08007203 	.word	0x08007203
 8007188:	08007203 	.word	0x08007203
 800718c:	08007203 	.word	0x08007203
 8007190:	08007203 	.word	0x08007203
 8007194:	080071f5 	.word	0x080071f5
 8007198:	2b40      	cmp	r3, #64	; 0x40
 800719a:	d02e      	beq.n	80071fa <UART_SetConfig+0x8a2>
 800719c:	e031      	b.n	8007202 <UART_SetConfig+0x8aa>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800719e:	f7fd fc9d 	bl	8004adc <HAL_RCC_GetPCLK1Freq>
 80071a2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80071a4:	e033      	b.n	800720e <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071a6:	f7fd fcaf 	bl	8004b08 <HAL_RCC_GetPCLK2Freq>
 80071aa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80071ac:	e02f      	b.n	800720e <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071ae:	f107 0314 	add.w	r3, r7, #20
 80071b2:	4618      	mov	r0, r3
 80071b4:	f7fe fc46 	bl	8005a44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80071bc:	e027      	b.n	800720e <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071be:	f107 0308 	add.w	r3, r7, #8
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7fe fd92 	bl	8005cec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80071cc:	e01f      	b.n	800720e <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071ce:	4b58      	ldr	r3, [pc, #352]	; (8007330 <UART_SetConfig+0x9d8>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 0320 	and.w	r3, r3, #32
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d009      	beq.n	80071ee <UART_SetConfig+0x896>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80071da:	4b55      	ldr	r3, [pc, #340]	; (8007330 <UART_SetConfig+0x9d8>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	08db      	lsrs	r3, r3, #3
 80071e0:	f003 0303 	and.w	r3, r3, #3
 80071e4:	4a53      	ldr	r2, [pc, #332]	; (8007334 <UART_SetConfig+0x9dc>)
 80071e6:	fa22 f303 	lsr.w	r3, r2, r3
 80071ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80071ec:	e00f      	b.n	800720e <UART_SetConfig+0x8b6>
          pclk = (uint32_t) HSI_VALUE;
 80071ee:	4b51      	ldr	r3, [pc, #324]	; (8007334 <UART_SetConfig+0x9dc>)
 80071f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80071f2:	e00c      	b.n	800720e <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80071f4:	4b4c      	ldr	r3, [pc, #304]	; (8007328 <UART_SetConfig+0x9d0>)
 80071f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80071f8:	e009      	b.n	800720e <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007200:	e005      	b.n	800720e <UART_SetConfig+0x8b6>
      default:
        pclk = 0U;
 8007202:	2300      	movs	r3, #0
 8007204:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800720c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800720e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007210:	2b00      	cmp	r3, #0
 8007212:	f000 80ea 	beq.w	80073ea <UART_SetConfig+0xa92>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721a:	4a44      	ldr	r2, [pc, #272]	; (800732c <UART_SetConfig+0x9d4>)
 800721c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007220:	461a      	mov	r2, r3
 8007222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007224:	fbb3 f3f2 	udiv	r3, r3, r2
 8007228:	005a      	lsls	r2, r3, #1
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	085b      	lsrs	r3, r3, #1
 8007230:	441a      	add	r2, r3
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	fbb2 f3f3 	udiv	r3, r2, r3
 800723a:	b29b      	uxth	r3, r3
 800723c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800723e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007240:	2b0f      	cmp	r3, #15
 8007242:	d916      	bls.n	8007272 <UART_SetConfig+0x91a>
 8007244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800724a:	d212      	bcs.n	8007272 <UART_SetConfig+0x91a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800724c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724e:	b29b      	uxth	r3, r3
 8007250:	f023 030f 	bic.w	r3, r3, #15
 8007254:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007258:	085b      	lsrs	r3, r3, #1
 800725a:	b29b      	uxth	r3, r3
 800725c:	f003 0307 	and.w	r3, r3, #7
 8007260:	b29a      	uxth	r2, r3
 8007262:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007264:	4313      	orrs	r3, r2
 8007266:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800726e:	60da      	str	r2, [r3, #12]
 8007270:	e0bb      	b.n	80073ea <UART_SetConfig+0xa92>
      }
      else
      {
        ret = HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007278:	e0b7      	b.n	80073ea <UART_SetConfig+0xa92>
      }
    }
  }
  else
  {
    switch (clocksource)
 800727a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800727e:	2b20      	cmp	r3, #32
 8007280:	dc4a      	bgt.n	8007318 <UART_SetConfig+0x9c0>
 8007282:	2b00      	cmp	r3, #0
 8007284:	f2c0 8086 	blt.w	8007394 <UART_SetConfig+0xa3c>
 8007288:	2b20      	cmp	r3, #32
 800728a:	f200 8083 	bhi.w	8007394 <UART_SetConfig+0xa3c>
 800728e:	a201      	add	r2, pc, #4	; (adr r2, 8007294 <UART_SetConfig+0x93c>)
 8007290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007294:	0800731f 	.word	0x0800731f
 8007298:	08007339 	.word	0x08007339
 800729c:	08007395 	.word	0x08007395
 80072a0:	08007395 	.word	0x08007395
 80072a4:	08007341 	.word	0x08007341
 80072a8:	08007395 	.word	0x08007395
 80072ac:	08007395 	.word	0x08007395
 80072b0:	08007395 	.word	0x08007395
 80072b4:	08007351 	.word	0x08007351
 80072b8:	08007395 	.word	0x08007395
 80072bc:	08007395 	.word	0x08007395
 80072c0:	08007395 	.word	0x08007395
 80072c4:	08007395 	.word	0x08007395
 80072c8:	08007395 	.word	0x08007395
 80072cc:	08007395 	.word	0x08007395
 80072d0:	08007395 	.word	0x08007395
 80072d4:	08007361 	.word	0x08007361
 80072d8:	08007395 	.word	0x08007395
 80072dc:	08007395 	.word	0x08007395
 80072e0:	08007395 	.word	0x08007395
 80072e4:	08007395 	.word	0x08007395
 80072e8:	08007395 	.word	0x08007395
 80072ec:	08007395 	.word	0x08007395
 80072f0:	08007395 	.word	0x08007395
 80072f4:	08007395 	.word	0x08007395
 80072f8:	08007395 	.word	0x08007395
 80072fc:	08007395 	.word	0x08007395
 8007300:	08007395 	.word	0x08007395
 8007304:	08007395 	.word	0x08007395
 8007308:	08007395 	.word	0x08007395
 800730c:	08007395 	.word	0x08007395
 8007310:	08007395 	.word	0x08007395
 8007314:	08007387 	.word	0x08007387
 8007318:	2b40      	cmp	r3, #64	; 0x40
 800731a:	d037      	beq.n	800738c <UART_SetConfig+0xa34>
 800731c:	e03a      	b.n	8007394 <UART_SetConfig+0xa3c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800731e:	f7fd fbdd 	bl	8004adc <HAL_RCC_GetPCLK1Freq>
 8007322:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007324:	e03c      	b.n	80073a0 <UART_SetConfig+0xa48>
 8007326:	bf00      	nop
 8007328:	003d0900 	.word	0x003d0900
 800732c:	08026a00 	.word	0x08026a00
 8007330:	58024400 	.word	0x58024400
 8007334:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007338:	f7fd fbe6 	bl	8004b08 <HAL_RCC_GetPCLK2Freq>
 800733c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800733e:	e02f      	b.n	80073a0 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007340:	f107 0314 	add.w	r3, r7, #20
 8007344:	4618      	mov	r0, r3
 8007346:	f7fe fb7d 	bl	8005a44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800734e:	e027      	b.n	80073a0 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007350:	f107 0308 	add.w	r3, r7, #8
 8007354:	4618      	mov	r0, r3
 8007356:	f7fe fcc9 	bl	8005cec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800735e:	e01f      	b.n	80073a0 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007360:	4b2c      	ldr	r3, [pc, #176]	; (8007414 <UART_SetConfig+0xabc>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 0320 	and.w	r3, r3, #32
 8007368:	2b00      	cmp	r3, #0
 800736a:	d009      	beq.n	8007380 <UART_SetConfig+0xa28>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800736c:	4b29      	ldr	r3, [pc, #164]	; (8007414 <UART_SetConfig+0xabc>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	08db      	lsrs	r3, r3, #3
 8007372:	f003 0303 	and.w	r3, r3, #3
 8007376:	4a28      	ldr	r2, [pc, #160]	; (8007418 <UART_SetConfig+0xac0>)
 8007378:	fa22 f303 	lsr.w	r3, r2, r3
 800737c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800737e:	e00f      	b.n	80073a0 <UART_SetConfig+0xa48>
          pclk = (uint32_t) HSI_VALUE;
 8007380:	4b25      	ldr	r3, [pc, #148]	; (8007418 <UART_SetConfig+0xac0>)
 8007382:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007384:	e00c      	b.n	80073a0 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007386:	4b25      	ldr	r3, [pc, #148]	; (800741c <UART_SetConfig+0xac4>)
 8007388:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800738a:	e009      	b.n	80073a0 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800738c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007390:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007392:	e005      	b.n	80073a0 <UART_SetConfig+0xa48>
      default:
        pclk = 0U;
 8007394:	2300      	movs	r3, #0
 8007396:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800739e:	bf00      	nop
    }

    if (pclk != 0U)
 80073a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d021      	beq.n	80073ea <UART_SetConfig+0xa92>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073aa:	4a1d      	ldr	r2, [pc, #116]	; (8007420 <UART_SetConfig+0xac8>)
 80073ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073b0:	461a      	mov	r2, r3
 80073b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b4:	fbb3 f2f2 	udiv	r2, r3, r2
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	085b      	lsrs	r3, r3, #1
 80073be:	441a      	add	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ce:	2b0f      	cmp	r3, #15
 80073d0:	d908      	bls.n	80073e4 <UART_SetConfig+0xa8c>
 80073d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073d8:	d204      	bcs.n	80073e4 <UART_SetConfig+0xa8c>
      {
        huart->Instance->BRR = usartdiv;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073e0:	60da      	str	r2, [r3, #12]
 80073e2:	e002      	b.n	80073ea <UART_SetConfig+0xa92>
      }
      else
      {
        ret = HAL_ERROR;
 80073e4:	2301      	movs	r3, #1
 80073e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2201      	movs	r2, #1
 80073ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2201      	movs	r2, #1
 80073f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8007406:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800740a:	4618      	mov	r0, r3
 800740c:	3738      	adds	r7, #56	; 0x38
 800740e:	46bd      	mov	sp, r7
 8007410:	bdb0      	pop	{r4, r5, r7, pc}
 8007412:	bf00      	nop
 8007414:	58024400 	.word	0x58024400
 8007418:	03d09000 	.word	0x03d09000
 800741c:	003d0900 	.word	0x003d0900
 8007420:	08026a00 	.word	0x08026a00

08007424 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007430:	f003 0301 	and.w	r3, r3, #1
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00a      	beq.n	800744e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	430a      	orrs	r2, r1
 800744c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007452:	f003 0302 	and.w	r3, r3, #2
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00a      	beq.n	8007470 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	430a      	orrs	r2, r1
 800746e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007474:	f003 0304 	and.w	r3, r3, #4
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00a      	beq.n	8007492 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	430a      	orrs	r2, r1
 8007490:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007496:	f003 0308 	and.w	r3, r3, #8
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00a      	beq.n	80074b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	430a      	orrs	r2, r1
 80074b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b8:	f003 0310 	and.w	r3, r3, #16
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d00a      	beq.n	80074d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	430a      	orrs	r2, r1
 80074d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074da:	f003 0320 	and.w	r3, r3, #32
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00a      	beq.n	80074f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	430a      	orrs	r2, r1
 80074f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007500:	2b00      	cmp	r3, #0
 8007502:	d01a      	beq.n	800753a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	430a      	orrs	r2, r1
 8007518:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800751e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007522:	d10a      	bne.n	800753a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	430a      	orrs	r2, r1
 8007538:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800753e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00a      	beq.n	800755c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	430a      	orrs	r2, r1
 800755a:	605a      	str	r2, [r3, #4]
  }
}
 800755c:	bf00      	nop
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b086      	sub	sp, #24
 800756c:	af02      	add	r7, sp, #8
 800756e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007578:	f7fa f81c 	bl	80015b4 <HAL_GetTick>
 800757c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f003 0308 	and.w	r3, r3, #8
 8007588:	2b08      	cmp	r3, #8
 800758a:	d10e      	bne.n	80075aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800758c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007590:	9300      	str	r3, [sp, #0]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 f82c 	bl	80075f8 <UART_WaitOnFlagUntilTimeout>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d001      	beq.n	80075aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	e022      	b.n	80075f0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 0304 	and.w	r3, r3, #4
 80075b4:	2b04      	cmp	r3, #4
 80075b6:	d10e      	bne.n	80075d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075bc:	9300      	str	r3, [sp, #0]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f816 	bl	80075f8 <UART_WaitOnFlagUntilTimeout>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d001      	beq.n	80075d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075d2:	2303      	movs	r3, #3
 80075d4:	e00c      	b.n	80075f0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2220      	movs	r2, #32
 80075da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2220      	movs	r2, #32
 80075e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3710      	adds	r7, #16
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	603b      	str	r3, [r7, #0]
 8007604:	4613      	mov	r3, r2
 8007606:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007608:	e062      	b.n	80076d0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007610:	d05e      	beq.n	80076d0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007612:	f7f9 ffcf 	bl	80015b4 <HAL_GetTick>
 8007616:	4602      	mov	r2, r0
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	69ba      	ldr	r2, [r7, #24]
 800761e:	429a      	cmp	r2, r3
 8007620:	d302      	bcc.n	8007628 <UART_WaitOnFlagUntilTimeout+0x30>
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d11d      	bne.n	8007664 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007636:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	689a      	ldr	r2, [r3, #8]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f022 0201 	bic.w	r2, r2, #1
 8007646:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2220      	movs	r2, #32
 800764c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2220      	movs	r2, #32
 8007654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2200      	movs	r2, #0
 800765c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007660:	2303      	movs	r3, #3
 8007662:	e045      	b.n	80076f0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0304 	and.w	r3, r3, #4
 800766e:	2b00      	cmp	r3, #0
 8007670:	d02e      	beq.n	80076d0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	69db      	ldr	r3, [r3, #28]
 8007678:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800767c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007680:	d126      	bne.n	80076d0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800768a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800769a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	689a      	ldr	r2, [r3, #8]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f022 0201 	bic.w	r2, r2, #1
 80076aa:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2220      	movs	r2, #32
 80076b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2220      	movs	r2, #32
 80076b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2220      	movs	r2, #32
 80076c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e00f      	b.n	80076f0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	69da      	ldr	r2, [r3, #28]
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	4013      	ands	r3, r2
 80076da:	68ba      	ldr	r2, [r7, #8]
 80076dc:	429a      	cmp	r2, r3
 80076de:	bf0c      	ite	eq
 80076e0:	2301      	moveq	r3, #1
 80076e2:	2300      	movne	r3, #0
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	461a      	mov	r2, r3
 80076e8:	79fb      	ldrb	r3, [r7, #7]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d08d      	beq.n	800760a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b085      	sub	sp, #20
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007706:	2b01      	cmp	r3, #1
 8007708:	d101      	bne.n	800770e <HAL_UARTEx_DisableFifoMode+0x16>
 800770a:	2302      	movs	r3, #2
 800770c:	e027      	b.n	800775e <HAL_UARTEx_DisableFifoMode+0x66>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2201      	movs	r2, #1
 8007712:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2224      	movs	r2, #36	; 0x24
 800771a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f022 0201 	bic.w	r2, r2, #1
 8007734:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800773c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2220      	movs	r2, #32
 8007750:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800775c:	2300      	movs	r3, #0
}
 800775e:	4618      	mov	r0, r3
 8007760:	3714      	adds	r7, #20
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr

0800776a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b084      	sub	sp, #16
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
 8007772:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800777a:	2b01      	cmp	r3, #1
 800777c:	d101      	bne.n	8007782 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800777e:	2302      	movs	r3, #2
 8007780:	e02d      	b.n	80077de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2224      	movs	r2, #36	; 0x24
 800778e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f022 0201 	bic.w	r2, r2, #1
 80077a8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	683a      	ldr	r2, [r7, #0]
 80077ba:	430a      	orrs	r2, r1
 80077bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f850 	bl	8007864 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2220      	movs	r2, #32
 80077d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b084      	sub	sp, #16
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
 80077ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d101      	bne.n	80077fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80077fa:	2302      	movs	r3, #2
 80077fc:	e02d      	b.n	800785a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2201      	movs	r2, #1
 8007802:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2224      	movs	r2, #36	; 0x24
 800780a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f022 0201 	bic.w	r2, r2, #1
 8007824:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	683a      	ldr	r2, [r7, #0]
 8007836:	430a      	orrs	r2, r1
 8007838:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 f812 	bl	8007864 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2220      	movs	r2, #32
 800784c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
	...

08007864 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007864:	b480      	push	{r7}
 8007866:	b089      	sub	sp, #36	; 0x24
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800786c:	4a2f      	ldr	r2, [pc, #188]	; (800792c <UARTEx_SetNbDataToProcess+0xc8>)
 800786e:	f107 0314 	add.w	r3, r7, #20
 8007872:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007876:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800787a:	4a2d      	ldr	r2, [pc, #180]	; (8007930 <UARTEx_SetNbDataToProcess+0xcc>)
 800787c:	f107 030c 	add.w	r3, r7, #12
 8007880:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007884:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800788c:	2b00      	cmp	r3, #0
 800788e:	d108      	bne.n	80078a2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80078a0:	e03d      	b.n	800791e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80078a2:	2310      	movs	r3, #16
 80078a4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80078a6:	2310      	movs	r3, #16
 80078a8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	0e5b      	lsrs	r3, r3, #25
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	f003 0307 	and.w	r3, r3, #7
 80078b8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	0f5b      	lsrs	r3, r3, #29
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	f003 0307 	and.w	r3, r3, #7
 80078c8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80078ca:	7fbb      	ldrb	r3, [r7, #30]
 80078cc:	7f3a      	ldrb	r2, [r7, #28]
 80078ce:	f107 0120 	add.w	r1, r7, #32
 80078d2:	440a      	add	r2, r1
 80078d4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80078d8:	fb02 f303 	mul.w	r3, r2, r3
 80078dc:	7f3a      	ldrb	r2, [r7, #28]
 80078de:	f107 0120 	add.w	r1, r7, #32
 80078e2:	440a      	add	r2, r1
 80078e4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80078e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80078f4:	7ffb      	ldrb	r3, [r7, #31]
 80078f6:	7f7a      	ldrb	r2, [r7, #29]
 80078f8:	f107 0120 	add.w	r1, r7, #32
 80078fc:	440a      	add	r2, r1
 80078fe:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007902:	fb02 f303 	mul.w	r3, r2, r3
 8007906:	7f7a      	ldrb	r2, [r7, #29]
 8007908:	f107 0120 	add.w	r1, r7, #32
 800790c:	440a      	add	r2, r1
 800790e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007912:	fb93 f3f2 	sdiv	r3, r3, r2
 8007916:	b29a      	uxth	r2, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800791e:	bf00      	nop
 8007920:	3724      	adds	r7, #36	; 0x24
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	080214a0 	.word	0x080214a0
 8007930:	080214a8 	.word	0x080214a8

08007934 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007934:	b084      	sub	sp, #16
 8007936:	b580      	push	{r7, lr}
 8007938:	b084      	sub	sp, #16
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
 800793e:	f107 001c 	add.w	r0, r7, #28
 8007942:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007948:	2b01      	cmp	r3, #1
 800794a:	d120      	bne.n	800798e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007950:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	68da      	ldr	r2, [r3, #12]
 800795c:	4b25      	ldr	r3, [pc, #148]	; (80079f4 <USB_CoreInit+0xc0>)
 800795e:	4013      	ands	r3, r2
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007972:	2b01      	cmp	r3, #1
 8007974:	d105      	bne.n	8007982 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 fa4c 	bl	8007e20 <USB_CoreReset>
 8007988:	4603      	mov	r3, r0
 800798a:	73fb      	strb	r3, [r7, #15]
 800798c:	e01a      	b.n	80079c4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fa40 	bl	8007e20 <USB_CoreReset>
 80079a0:	4603      	mov	r3, r0
 80079a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80079a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d106      	bne.n	80079b8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	639a      	str	r2, [r3, #56]	; 0x38
 80079b6:	e005      	b.n	80079c4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80079c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d10b      	bne.n	80079e2 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	f043 0206 	orr.w	r2, r3, #6
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	f043 0220 	orr.w	r2, r3, #32
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80079e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079ee:	b004      	add	sp, #16
 80079f0:	4770      	bx	lr
 80079f2:	bf00      	nop
 80079f4:	ffbdffbf 	.word	0xffbdffbf

080079f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	f023 0201 	bic.w	r2, r3, #1
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	370c      	adds	r7, #12
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr

08007a1a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b082      	sub	sp, #8
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
 8007a22:	460b      	mov	r3, r1
 8007a24:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007a32:	78fb      	ldrb	r3, [r7, #3]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d106      	bne.n	8007a46 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	60da      	str	r2, [r3, #12]
 8007a44:	e00b      	b.n	8007a5e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007a46:	78fb      	ldrb	r3, [r7, #3]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d106      	bne.n	8007a5a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	60da      	str	r2, [r3, #12]
 8007a58:	e001      	b.n	8007a5e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e003      	b.n	8007a66 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007a5e:	2032      	movs	r0, #50	; 0x32
 8007a60:	f7f9 fdb4 	bl	80015cc <HAL_Delay>

  return HAL_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3708      	adds	r7, #8
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
	...

08007a70 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a70:	b084      	sub	sp, #16
 8007a72:	b580      	push	{r7, lr}
 8007a74:	b086      	sub	sp, #24
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
 8007a7a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007a7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007a82:	2300      	movs	r3, #0
 8007a84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	613b      	str	r3, [r7, #16]
 8007a8e:	e009      	b.n	8007aa4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	3340      	adds	r3, #64	; 0x40
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	4413      	add	r3, r2
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	613b      	str	r3, [r7, #16]
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	2b0e      	cmp	r3, #14
 8007aa8:	d9f2      	bls.n	8007a90 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d11c      	bne.n	8007aea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	68fa      	ldr	r2, [r7, #12]
 8007aba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007abe:	f043 0302 	orr.w	r3, r3, #2
 8007ac2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	601a      	str	r2, [r3, #0]
 8007ae8:	e005      	b.n	8007af6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007afc:	461a      	mov	r2, r3
 8007afe:	2300      	movs	r3, #0
 8007b00:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b08:	4619      	mov	r1, r3
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b10:	461a      	mov	r2, r3
 8007b12:	680b      	ldr	r3, [r1, #0]
 8007b14:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d10c      	bne.n	8007b36 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d104      	bne.n	8007b2c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007b22:	2100      	movs	r1, #0
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 f949 	bl	8007dbc <USB_SetDevSpeed>
 8007b2a:	e008      	b.n	8007b3e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007b2c:	2101      	movs	r1, #1
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f944 	bl	8007dbc <USB_SetDevSpeed>
 8007b34:	e003      	b.n	8007b3e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007b36:	2103      	movs	r1, #3
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 f93f 	bl	8007dbc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007b3e:	2110      	movs	r1, #16
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 f8f3 	bl	8007d2c <USB_FlushTxFifo>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d001      	beq.n	8007b50 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 f911 	bl	8007d78 <USB_FlushRxFifo>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d001      	beq.n	8007b60 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b66:	461a      	mov	r2, r3
 8007b68:	2300      	movs	r3, #0
 8007b6a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b72:	461a      	mov	r2, r3
 8007b74:	2300      	movs	r3, #0
 8007b76:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b7e:	461a      	mov	r2, r3
 8007b80:	2300      	movs	r3, #0
 8007b82:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b84:	2300      	movs	r3, #0
 8007b86:	613b      	str	r3, [r7, #16]
 8007b88:	e043      	b.n	8007c12 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	015a      	lsls	r2, r3, #5
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	4413      	add	r3, r2
 8007b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ba0:	d118      	bne.n	8007bd4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d10a      	bne.n	8007bbe <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	015a      	lsls	r2, r3, #5
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	4413      	add	r3, r2
 8007bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007bba:	6013      	str	r3, [r2, #0]
 8007bbc:	e013      	b.n	8007be6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	015a      	lsls	r2, r3, #5
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bca:	461a      	mov	r2, r3
 8007bcc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007bd0:	6013      	str	r3, [r2, #0]
 8007bd2:	e008      	b.n	8007be6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	015a      	lsls	r2, r3, #5
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	4413      	add	r3, r2
 8007bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007be0:	461a      	mov	r2, r3
 8007be2:	2300      	movs	r3, #0
 8007be4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	015a      	lsls	r2, r3, #5
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	4413      	add	r3, r2
 8007bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	015a      	lsls	r2, r3, #5
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	4413      	add	r3, r2
 8007c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c04:	461a      	mov	r2, r3
 8007c06:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c0a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	613b      	str	r3, [r7, #16]
 8007c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c14:	693a      	ldr	r2, [r7, #16]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d3b7      	bcc.n	8007b8a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	613b      	str	r3, [r7, #16]
 8007c1e:	e043      	b.n	8007ca8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	015a      	lsls	r2, r3, #5
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	4413      	add	r3, r2
 8007c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c36:	d118      	bne.n	8007c6a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d10a      	bne.n	8007c54 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	015a      	lsls	r2, r3, #5
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	4413      	add	r3, r2
 8007c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007c50:	6013      	str	r3, [r2, #0]
 8007c52:	e013      	b.n	8007c7c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	015a      	lsls	r2, r3, #5
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c60:	461a      	mov	r2, r3
 8007c62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007c66:	6013      	str	r3, [r2, #0]
 8007c68:	e008      	b.n	8007c7c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	015a      	lsls	r2, r3, #5
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	4413      	add	r3, r2
 8007c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c76:	461a      	mov	r2, r3
 8007c78:	2300      	movs	r3, #0
 8007c7a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	015a      	lsls	r2, r3, #5
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	4413      	add	r3, r2
 8007c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c88:	461a      	mov	r2, r3
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	015a      	lsls	r2, r3, #5
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	4413      	add	r3, r2
 8007c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007ca0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	613b      	str	r3, [r7, #16]
 8007ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007caa:	693a      	ldr	r2, [r7, #16]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d3b7      	bcc.n	8007c20 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cb6:	691b      	ldr	r3, [r3, #16]
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cc2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007cd0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d105      	bne.n	8007ce4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	699b      	ldr	r3, [r3, #24]
 8007cdc:	f043 0210 	orr.w	r2, r3, #16
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	699a      	ldr	r2, [r3, #24]
 8007ce8:	4b0e      	ldr	r3, [pc, #56]	; (8007d24 <USB_DevInit+0x2b4>)
 8007cea:	4313      	orrs	r3, r2
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d005      	beq.n	8007d02 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	699b      	ldr	r3, [r3, #24]
 8007cfa:	f043 0208 	orr.w	r2, r3, #8
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d105      	bne.n	8007d14 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	699a      	ldr	r2, [r3, #24]
 8007d0c:	4b06      	ldr	r3, [pc, #24]	; (8007d28 <USB_DevInit+0x2b8>)
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3718      	adds	r7, #24
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d20:	b004      	add	sp, #16
 8007d22:	4770      	bx	lr
 8007d24:	803c3800 	.word	0x803c3800
 8007d28:	40000004 	.word	0x40000004

08007d2c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007d36:	2300      	movs	r3, #0
 8007d38:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	019b      	lsls	r3, r3, #6
 8007d3e:	f043 0220 	orr.w	r2, r3, #32
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	60fb      	str	r3, [r7, #12]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	4a09      	ldr	r2, [pc, #36]	; (8007d74 <USB_FlushTxFifo+0x48>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d901      	bls.n	8007d58 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007d54:	2303      	movs	r3, #3
 8007d56:	e006      	b.n	8007d66 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	f003 0320 	and.w	r3, r3, #32
 8007d60:	2b20      	cmp	r3, #32
 8007d62:	d0f0      	beq.n	8007d46 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3714      	adds	r7, #20
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop
 8007d74:	00030d40 	.word	0x00030d40

08007d78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007d80:	2300      	movs	r3, #0
 8007d82:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2210      	movs	r2, #16
 8007d88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	60fb      	str	r3, [r7, #12]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	4a09      	ldr	r2, [pc, #36]	; (8007db8 <USB_FlushRxFifo+0x40>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d901      	bls.n	8007d9c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007d98:	2303      	movs	r3, #3
 8007d9a:	e006      	b.n	8007daa <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	691b      	ldr	r3, [r3, #16]
 8007da0:	f003 0310 	and.w	r3, r3, #16
 8007da4:	2b10      	cmp	r3, #16
 8007da6:	d0f0      	beq.n	8007d8a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3714      	adds	r7, #20
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr
 8007db6:	bf00      	nop
 8007db8:	00030d40 	.word	0x00030d40

08007dbc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	78fb      	ldrb	r3, [r7, #3]
 8007dd6:	68f9      	ldr	r1, [r7, #12]
 8007dd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3714      	adds	r7, #20
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr

08007dee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007dee:	b580      	push	{r7, lr}
 8007df0:	b084      	sub	sp, #16
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e08:	f043 0302 	orr.w	r3, r3, #2
 8007e0c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007e0e:	2003      	movs	r0, #3
 8007e10:	f7f9 fbdc 	bl	80015cc <HAL_Delay>

  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
	...

08007e20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b085      	sub	sp, #20
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	60fb      	str	r3, [r7, #12]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	4a13      	ldr	r2, [pc, #76]	; (8007e84 <USB_CoreReset+0x64>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d901      	bls.n	8007e3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	e01b      	b.n	8007e76 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	daf2      	bge.n	8007e2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007e46:	2300      	movs	r3, #0
 8007e48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	f043 0201 	orr.w	r2, r3, #1
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	60fb      	str	r3, [r7, #12]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	4a09      	ldr	r2, [pc, #36]	; (8007e84 <USB_CoreReset+0x64>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d901      	bls.n	8007e68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007e64:	2303      	movs	r3, #3
 8007e66:	e006      	b.n	8007e76 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	f003 0301 	and.w	r3, r3, #1
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d0f0      	beq.n	8007e56 <USB_CoreReset+0x36>

  return HAL_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3714      	adds	r7, #20
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr
 8007e82:	bf00      	nop
 8007e84:	00030d40 	.word	0x00030d40

08007e88 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8007e8e:	2100      	movs	r1, #0
 8007e90:	2000      	movs	r0, #0
 8007e92:	f004 fd2b 	bl	800c8ec <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8007e96:	4b23      	ldr	r3, [pc, #140]	; (8007f24 <MX_LWIP_Init+0x9c>)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8007e9c:	4b22      	ldr	r3, [pc, #136]	; (8007f28 <MX_LWIP_Init+0xa0>)
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8007ea2:	4b22      	ldr	r3, [pc, #136]	; (8007f2c <MX_LWIP_Init+0xa4>)
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007ea8:	4b21      	ldr	r3, [pc, #132]	; (8007f30 <MX_LWIP_Init+0xa8>)
 8007eaa:	9302      	str	r3, [sp, #8]
 8007eac:	4b21      	ldr	r3, [pc, #132]	; (8007f34 <MX_LWIP_Init+0xac>)
 8007eae:	9301      	str	r3, [sp, #4]
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	9300      	str	r3, [sp, #0]
 8007eb4:	4b1d      	ldr	r3, [pc, #116]	; (8007f2c <MX_LWIP_Init+0xa4>)
 8007eb6:	4a1c      	ldr	r2, [pc, #112]	; (8007f28 <MX_LWIP_Init+0xa0>)
 8007eb8:	491a      	ldr	r1, [pc, #104]	; (8007f24 <MX_LWIP_Init+0x9c>)
 8007eba:	481f      	ldr	r0, [pc, #124]	; (8007f38 <MX_LWIP_Init+0xb0>)
 8007ebc:	f005 ff5e 	bl	800dd7c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007ec0:	481d      	ldr	r0, [pc, #116]	; (8007f38 <MX_LWIP_Init+0xb0>)
 8007ec2:	f006 fa03 	bl	800e2cc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8007ec6:	4b1c      	ldr	r3, [pc, #112]	; (8007f38 <MX_LWIP_Init+0xb0>)
 8007ec8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ecc:	089b      	lsrs	r3, r3, #2
 8007ece:	f003 0301 	and.w	r3, r3, #1
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d003      	beq.n	8007ee0 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007ed8:	4817      	ldr	r0, [pc, #92]	; (8007f38 <MX_LWIP_Init+0xb0>)
 8007eda:	f006 fa1b 	bl	800e314 <netif_set_up>
 8007ede:	e002      	b.n	8007ee6 <MX_LWIP_Init+0x5e>

  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8007ee0:	4815      	ldr	r0, [pc, #84]	; (8007f38 <MX_LWIP_Init+0xb0>)
 8007ee2:	f006 fa8d 	bl	800e400 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8007ee6:	4915      	ldr	r1, [pc, #84]	; (8007f3c <MX_LWIP_Init+0xb4>)
 8007ee8:	4813      	ldr	r0, [pc, #76]	; (8007f38 <MX_LWIP_Init+0xb0>)
 8007eea:	f006 fb23 	bl	800e534 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8007eee:	2224      	movs	r2, #36	; 0x24
 8007ef0:	2100      	movs	r1, #0
 8007ef2:	4813      	ldr	r0, [pc, #76]	; (8007f40 <MX_LWIP_Init+0xb8>)
 8007ef4:	f018 f9c0 	bl	8020278 <memset>
  attributes.name = "EthLink";
 8007ef8:	4b11      	ldr	r3, [pc, #68]	; (8007f40 <MX_LWIP_Init+0xb8>)
 8007efa:	4a12      	ldr	r2, [pc, #72]	; (8007f44 <MX_LWIP_Init+0xbc>)
 8007efc:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8007efe:	4b10      	ldr	r3, [pc, #64]	; (8007f40 <MX_LWIP_Init+0xb8>)
 8007f00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007f04:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8007f06:	4b0e      	ldr	r3, [pc, #56]	; (8007f40 <MX_LWIP_Init+0xb8>)
 8007f08:	2210      	movs	r2, #16
 8007f0a:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8007f0c:	4a0c      	ldr	r2, [pc, #48]	; (8007f40 <MX_LWIP_Init+0xb8>)
 8007f0e:	490a      	ldr	r1, [pc, #40]	; (8007f38 <MX_LWIP_Init+0xb0>)
 8007f10:	480d      	ldr	r0, [pc, #52]	; (8007f48 <MX_LWIP_Init+0xc0>)
 8007f12:	f000 fd4b 	bl	80089ac <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
#if LWIP_DHCP
  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8007f16:	4808      	ldr	r0, [pc, #32]	; (8007f38 <MX_LWIP_Init+0xb0>)
 8007f18:	f00e faaa 	bl	8016470 <dhcp_start>
#endif
/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007f1c:	bf00      	nop
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	20006ef4 	.word	0x20006ef4
 8007f28:	20006ef8 	.word	0x20006ef8
 8007f2c:	20006efc 	.word	0x20006efc
 8007f30:	0800c829 	.word	0x0800c829
 8007f34:	08008645 	.word	0x08008645
 8007f38:	20006eb4 	.word	0x20006eb4
 8007f3c:	08007f4d 	.word	0x08007f4d
 8007f40:	20006e90 	.word	0x20006e90
 8007f44:	080214b0 	.word	0x080214b0
 8007f48:	0800876d 	.word	0x0800876d

08007f4c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f5a:	f003 0301 	and.w	r3, r3, #1
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d003      	beq.n	8007f6c <ethernet_link_status_updated+0x20>
  {
/* USER CODE BEGIN 5 */
	  printf("Network interface is up!\r\n");
 8007f64:	4805      	ldr	r0, [pc, #20]	; (8007f7c <ethernet_link_status_updated+0x30>)
 8007f66:	f018 fad5 	bl	8020514 <puts>
  {
/* USER CODE BEGIN 6 */
	  printf("Network interface is down!\r\n");
/* USER CODE END 6 */
  }
}
 8007f6a:	e002      	b.n	8007f72 <ethernet_link_status_updated+0x26>
	  printf("Network interface is down!\r\n");
 8007f6c:	4804      	ldr	r0, [pc, #16]	; (8007f80 <ethernet_link_status_updated+0x34>)
 8007f6e:	f018 fad1 	bl	8020514 <puts>
}
 8007f72:	bf00      	nop
 8007f74:	3708      	adds	r7, #8
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	080214b8 	.word	0x080214b8
 8007f80:	080214d4 	.word	0x080214d4

08007f84 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b087      	sub	sp, #28
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8007f96:	2320      	movs	r3, #32
 8007f98:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007f9a:	f3bf 8f4f 	dsb	sy
}
 8007f9e:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8007fa0:	e00b      	b.n	8007fba <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8007fa2:	4a0d      	ldr	r2, [pc, #52]	; (8007fd8 <SCB_InvalidateDCache_by_Addr+0x54>)
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	693a      	ldr	r2, [r7, #16]
 8007fae:	4413      	add	r3, r2
 8007fb0:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8007fb2:	697a      	ldr	r2, [r7, #20]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	1ad3      	subs	r3, r2, r3
 8007fb8:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	dcf0      	bgt.n	8007fa2 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8007fc0:	f3bf 8f4f 	dsb	sy
}
 8007fc4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007fc6:	f3bf 8f6f 	isb	sy
}
 8007fca:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8007fcc:	bf00      	nop
 8007fce:	371c      	adds	r7, #28
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr
 8007fd8:	e000ed00 	.word	0xe000ed00

08007fdc <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b08e      	sub	sp, #56	; 0x38
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fe8:	2200      	movs	r2, #0
 8007fea:	601a      	str	r2, [r3, #0]
 8007fec:	605a      	str	r2, [r3, #4]
 8007fee:	609a      	str	r2, [r3, #8]
 8007ff0:	60da      	str	r2, [r3, #12]
 8007ff2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a5d      	ldr	r2, [pc, #372]	; (8008170 <HAL_ETH_MspInit+0x194>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	f040 80b3 	bne.w	8008166 <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8008000:	4b5c      	ldr	r3, [pc, #368]	; (8008174 <HAL_ETH_MspInit+0x198>)
 8008002:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008006:	4a5b      	ldr	r2, [pc, #364]	; (8008174 <HAL_ETH_MspInit+0x198>)
 8008008:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800800c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008010:	4b58      	ldr	r3, [pc, #352]	; (8008174 <HAL_ETH_MspInit+0x198>)
 8008012:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008016:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800801a:	623b      	str	r3, [r7, #32]
 800801c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800801e:	4b55      	ldr	r3, [pc, #340]	; (8008174 <HAL_ETH_MspInit+0x198>)
 8008020:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008024:	4a53      	ldr	r2, [pc, #332]	; (8008174 <HAL_ETH_MspInit+0x198>)
 8008026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800802a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800802e:	4b51      	ldr	r3, [pc, #324]	; (8008174 <HAL_ETH_MspInit+0x198>)
 8008030:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008038:	61fb      	str	r3, [r7, #28]
 800803a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800803c:	4b4d      	ldr	r3, [pc, #308]	; (8008174 <HAL_ETH_MspInit+0x198>)
 800803e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008042:	4a4c      	ldr	r2, [pc, #304]	; (8008174 <HAL_ETH_MspInit+0x198>)
 8008044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008048:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800804c:	4b49      	ldr	r3, [pc, #292]	; (8008174 <HAL_ETH_MspInit+0x198>)
 800804e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008056:	61bb      	str	r3, [r7, #24]
 8008058:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800805a:	4b46      	ldr	r3, [pc, #280]	; (8008174 <HAL_ETH_MspInit+0x198>)
 800805c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008060:	4a44      	ldr	r2, [pc, #272]	; (8008174 <HAL_ETH_MspInit+0x198>)
 8008062:	f043 0304 	orr.w	r3, r3, #4
 8008066:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800806a:	4b42      	ldr	r3, [pc, #264]	; (8008174 <HAL_ETH_MspInit+0x198>)
 800806c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008070:	f003 0304 	and.w	r3, r3, #4
 8008074:	617b      	str	r3, [r7, #20]
 8008076:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008078:	4b3e      	ldr	r3, [pc, #248]	; (8008174 <HAL_ETH_MspInit+0x198>)
 800807a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800807e:	4a3d      	ldr	r2, [pc, #244]	; (8008174 <HAL_ETH_MspInit+0x198>)
 8008080:	f043 0301 	orr.w	r3, r3, #1
 8008084:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008088:	4b3a      	ldr	r3, [pc, #232]	; (8008174 <HAL_ETH_MspInit+0x198>)
 800808a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800808e:	f003 0301 	and.w	r3, r3, #1
 8008092:	613b      	str	r3, [r7, #16]
 8008094:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008096:	4b37      	ldr	r3, [pc, #220]	; (8008174 <HAL_ETH_MspInit+0x198>)
 8008098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800809c:	4a35      	ldr	r2, [pc, #212]	; (8008174 <HAL_ETH_MspInit+0x198>)
 800809e:	f043 0302 	orr.w	r3, r3, #2
 80080a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80080a6:	4b33      	ldr	r3, [pc, #204]	; (8008174 <HAL_ETH_MspInit+0x198>)
 80080a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080ac:	f003 0302 	and.w	r3, r3, #2
 80080b0:	60fb      	str	r3, [r7, #12]
 80080b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80080b4:	4b2f      	ldr	r3, [pc, #188]	; (8008174 <HAL_ETH_MspInit+0x198>)
 80080b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080ba:	4a2e      	ldr	r2, [pc, #184]	; (8008174 <HAL_ETH_MspInit+0x198>)
 80080bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80080c4:	4b2b      	ldr	r3, [pc, #172]	; (8008174 <HAL_ETH_MspInit+0x198>)
 80080c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ce:	60bb      	str	r3, [r7, #8]
 80080d0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80080d2:	2332      	movs	r3, #50	; 0x32
 80080d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080d6:	2302      	movs	r3, #2
 80080d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080da:	2300      	movs	r3, #0
 80080dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080de:	2300      	movs	r3, #0
 80080e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80080e2:	230b      	movs	r3, #11
 80080e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80080e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080ea:	4619      	mov	r1, r3
 80080ec:	4822      	ldr	r0, [pc, #136]	; (8008178 <HAL_ETH_MspInit+0x19c>)
 80080ee:	f7fb fa0f 	bl	8003510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80080f2:	2386      	movs	r3, #134	; 0x86
 80080f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080f6:	2302      	movs	r3, #2
 80080f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080fa:	2300      	movs	r3, #0
 80080fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080fe:	2300      	movs	r3, #0
 8008100:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008102:	230b      	movs	r3, #11
 8008104:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800810a:	4619      	mov	r1, r3
 800810c:	481b      	ldr	r0, [pc, #108]	; (800817c <HAL_ETH_MspInit+0x1a0>)
 800810e:	f7fb f9ff 	bl	8003510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8008112:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008116:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008118:	2302      	movs	r3, #2
 800811a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800811c:	2300      	movs	r3, #0
 800811e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008120:	2300      	movs	r3, #0
 8008122:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008124:	230b      	movs	r3, #11
 8008126:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800812c:	4619      	mov	r1, r3
 800812e:	4814      	ldr	r0, [pc, #80]	; (8008180 <HAL_ETH_MspInit+0x1a4>)
 8008130:	f7fb f9ee 	bl	8003510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8008134:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8008138:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800813a:	2302      	movs	r3, #2
 800813c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800813e:	2300      	movs	r3, #0
 8008140:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008142:	2300      	movs	r3, #0
 8008144:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008146:	230b      	movs	r3, #11
 8008148:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800814a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800814e:	4619      	mov	r1, r3
 8008150:	480c      	ldr	r0, [pc, #48]	; (8008184 <HAL_ETH_MspInit+0x1a8>)
 8008152:	f7fb f9dd 	bl	8003510 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8008156:	2200      	movs	r2, #0
 8008158:	2105      	movs	r1, #5
 800815a:	203d      	movs	r0, #61	; 0x3d
 800815c:	f7f9 fb32 	bl	80017c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8008160:	203d      	movs	r0, #61	; 0x3d
 8008162:	f7f9 fb49 	bl	80017f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008166:	bf00      	nop
 8008168:	3738      	adds	r7, #56	; 0x38
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	40028000 	.word	0x40028000
 8008174:	58024400 	.word	0x58024400
 8008178:	58020800 	.word	0x58020800
 800817c:	58020000 	.word	0x58020000
 8008180:	58020400 	.word	0x58020400
 8008184:	58021800 	.word	0x58021800

08008188 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8008190:	4b04      	ldr	r3, [pc, #16]	; (80081a4 <HAL_ETH_RxCpltCallback+0x1c>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4618      	mov	r0, r3
 8008196:	f000 ff27 	bl	8008fe8 <osSemaphoreRelease>
}
 800819a:	bf00      	nop
 800819c:	3708      	adds	r7, #8
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	20001950 	.word	0x20001950

080081a8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b0ac      	sub	sp, #176	; 0xb0
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80081b0:	2300      	movs	r3, #0
 80081b2:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t idx = 0;
 80081b6:	2300      	movs	r3, #0
 80081b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 80081bc:	2300      	movs	r3, #0
 80081be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80081c2:	4b8f      	ldr	r3, [pc, #572]	; (8008400 <low_level_init+0x258>)
 80081c4:	4a8f      	ldr	r2, [pc, #572]	; (8008404 <low_level_init+0x25c>)
 80081c6:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80081c8:	2300      	movs	r3, #0
 80081ca:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 80081cc:	2380      	movs	r3, #128	; 0x80
 80081ce:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 80081d0:	23e1      	movs	r3, #225	; 0xe1
 80081d2:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 80081d4:	2300      	movs	r3, #0
 80081d6:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 80081d8:	2300      	movs	r3, #0
 80081da:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 80081dc:	2300      	movs	r3, #0
 80081de:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 80081e0:	4a87      	ldr	r2, [pc, #540]	; (8008400 <low_level_init+0x258>)
 80081e2:	f107 030c 	add.w	r3, r7, #12
 80081e6:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80081e8:	4b85      	ldr	r3, [pc, #532]	; (8008400 <low_level_init+0x258>)
 80081ea:	2201      	movs	r2, #1
 80081ec:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80081ee:	4b84      	ldr	r3, [pc, #528]	; (8008400 <low_level_init+0x258>)
 80081f0:	4a85      	ldr	r2, [pc, #532]	; (8008408 <low_level_init+0x260>)
 80081f2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80081f4:	4b82      	ldr	r3, [pc, #520]	; (8008400 <low_level_init+0x258>)
 80081f6:	4a85      	ldr	r2, [pc, #532]	; (800840c <low_level_init+0x264>)
 80081f8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80081fa:	4b81      	ldr	r3, [pc, #516]	; (8008400 <low_level_init+0x258>)
 80081fc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008200:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8008202:	487f      	ldr	r0, [pc, #508]	; (8008400 <low_level_init+0x258>)
 8008204:	f7f9 fb06 	bl	8001814 <HAL_ETH_Init>
 8008208:	4603      	mov	r3, r0
 800820a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800820e:	2234      	movs	r2, #52	; 0x34
 8008210:	2100      	movs	r1, #0
 8008212:	487f      	ldr	r0, [pc, #508]	; (8008410 <low_level_init+0x268>)
 8008214:	f018 f830 	bl	8020278 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8008218:	4b7d      	ldr	r3, [pc, #500]	; (8008410 <low_level_init+0x268>)
 800821a:	2221      	movs	r2, #33	; 0x21
 800821c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800821e:	4b7c      	ldr	r3, [pc, #496]	; (8008410 <low_level_init+0x268>)
 8008220:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008224:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8008226:	4b7a      	ldr	r3, [pc, #488]	; (8008410 <low_level_init+0x268>)
 8008228:	2200      	movs	r2, #0
 800822a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800822c:	4879      	ldr	r0, [pc, #484]	; (8008414 <low_level_init+0x26c>)
 800822e:	f005 fc27 	bl	800da80 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2206      	movs	r2, #6
 8008236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800823a:	4b71      	ldr	r3, [pc, #452]	; (8008400 <low_level_init+0x258>)
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	781a      	ldrb	r2, [r3, #0]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008246:	4b6e      	ldr	r3, [pc, #440]	; (8008400 <low_level_init+0x258>)
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	785a      	ldrb	r2, [r3, #1]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008252:	4b6b      	ldr	r3, [pc, #428]	; (8008400 <low_level_init+0x258>)
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	789a      	ldrb	r2, [r3, #2]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800825e:	4b68      	ldr	r3, [pc, #416]	; (8008400 <low_level_init+0x258>)
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	78da      	ldrb	r2, [r3, #3]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800826a:	4b65      	ldr	r3, [pc, #404]	; (8008400 <low_level_init+0x258>)
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	791a      	ldrb	r2, [r3, #4]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008276:	4b62      	ldr	r3, [pc, #392]	; (8008400 <low_level_init+0x258>)
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	795a      	ldrb	r2, [r3, #5]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008288:	859a      	strh	r2, [r3, #44]	; 0x2c

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008290:	f043 030a 	orr.w	r3, r3, #10
 8008294:	b2da      	uxtb	r2, r3
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800829c:	2300      	movs	r3, #0
 800829e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082a2:	e012      	b.n	80082ca <low_level_init+0x122>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 80082a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082a8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80082ac:	fb02 f303 	mul.w	r3, r2, r3
 80082b0:	4a59      	ldr	r2, [pc, #356]	; (8008418 <low_level_init+0x270>)
 80082b2:	441a      	add	r2, r3
 80082b4:	2300      	movs	r3, #0
 80082b6:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80082ba:	4851      	ldr	r0, [pc, #324]	; (8008400 <low_level_init+0x258>)
 80082bc:	f7f9 fb84 	bl	80019c8 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 80082c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082c4:	3301      	adds	r3, #1
 80082c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082ce:	2b03      	cmp	r3, #3
 80082d0:	d9e8      	bls.n	80082a4 <low_level_init+0xfc>
  }

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 80082d2:	2200      	movs	r2, #0
 80082d4:	2101      	movs	r1, #1
 80082d6:	2001      	movs	r0, #1
 80082d8:	f000 fd84 	bl	8008de4 <osSemaphoreNew>
 80082dc:	4603      	mov	r3, r0
 80082de:	4a4f      	ldr	r2, [pc, #316]	; (800841c <low_level_init+0x274>)
 80082e0:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80082e2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80082e6:	2224      	movs	r2, #36	; 0x24
 80082e8:	2100      	movs	r1, #0
 80082ea:	4618      	mov	r0, r3
 80082ec:	f017 ffc4 	bl	8020278 <memset>
  attributes.name = "EthIf";
 80082f0:	4b4b      	ldr	r3, [pc, #300]	; (8008420 <low_level_init+0x278>)
 80082f2:	67bb      	str	r3, [r7, #120]	; 0x78
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80082f4:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80082f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  attributes.priority = osPriorityRealtime;
 80082fc:	2330      	movs	r3, #48	; 0x30
 80082fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  osThreadNew(ethernetif_input, netif, &attributes);
 8008302:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008306:	461a      	mov	r2, r3
 8008308:	6879      	ldr	r1, [r7, #4]
 800830a:	4846      	ldr	r0, [pc, #280]	; (8008424 <low_level_init+0x27c>)
 800830c:	f000 fb4e 	bl	80089ac <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8008310:	4945      	ldr	r1, [pc, #276]	; (8008428 <low_level_init+0x280>)
 8008312:	4846      	ldr	r0, [pc, #280]	; (800842c <low_level_init+0x284>)
 8008314:	f7f8 ff9d 	bl	8001252 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8008318:	4844      	ldr	r0, [pc, #272]	; (800842c <low_level_init+0x284>)
 800831a:	f7f8 ffcc 	bl	80012b6 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800831e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8008322:	2b00      	cmp	r3, #0
 8008324:	d165      	bne.n	80083f2 <low_level_init+0x24a>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008326:	4841      	ldr	r0, [pc, #260]	; (800842c <low_level_init+0x284>)
 8008328:	f7f9 f86d 	bl	8001406 <LAN8742_GetLinkState>
 800832c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8008330:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008334:	2b01      	cmp	r3, #1
 8008336:	dc06      	bgt.n	8008346 <low_level_init+0x19e>
    {
      netif_set_link_down(netif);
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f006 f8cb 	bl	800e4d4 <netif_set_link_down>
      netif_set_down(netif);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f006 f85e 	bl	800e400 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8008344:	e057      	b.n	80083f6 <low_level_init+0x24e>
 8008346:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800834a:	3b02      	subs	r3, #2
 800834c:	2b03      	cmp	r3, #3
 800834e:	d82b      	bhi.n	80083a8 <low_level_init+0x200>
 8008350:	a201      	add	r2, pc, #4	; (adr r2, 8008358 <low_level_init+0x1b0>)
 8008352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008356:	bf00      	nop
 8008358:	08008369 	.word	0x08008369
 800835c:	0800837b 	.word	0x0800837b
 8008360:	0800838b 	.word	0x0800838b
 8008364:	0800839b 	.word	0x0800839b
        duplex = ETH_FULLDUPLEX_MODE;
 8008368:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800836c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 8008370:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008374:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8008378:	e01f      	b.n	80083ba <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 800837a:	2300      	movs	r3, #0
 800837c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 8008380:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008384:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8008388:	e017      	b.n	80083ba <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 800838a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800838e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 8008392:	2300      	movs	r3, #0
 8008394:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8008398:	e00f      	b.n	80083ba <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 800839a:	2300      	movs	r3, #0
 800839c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 80083a0:	2300      	movs	r3, #0
 80083a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 80083a6:	e008      	b.n	80083ba <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 80083a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80083ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 80083b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80083b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 80083b8:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80083ba:	f107 0314 	add.w	r3, r7, #20
 80083be:	4619      	mov	r1, r3
 80083c0:	480f      	ldr	r0, [pc, #60]	; (8008400 <low_level_init+0x258>)
 80083c2:	f7fa f8cf 	bl	8002564 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80083c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80083ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    MACConf.Speed = speed;
 80083cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80083d0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80083d2:	f107 0314 	add.w	r3, r7, #20
 80083d6:	4619      	mov	r1, r3
 80083d8:	4809      	ldr	r0, [pc, #36]	; (8008400 <low_level_init+0x258>)
 80083da:	f7fa fa97 	bl	800290c <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 80083de:	4808      	ldr	r0, [pc, #32]	; (8008400 <low_level_init+0x258>)
 80083e0:	f7f9 fb33 	bl	8001a4a <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f005 ff95 	bl	800e314 <netif_set_up>
    netif_set_link_up(netif);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f006 f83a 	bl	800e464 <netif_set_link_up>
}
 80083f0:	e001      	b.n	80083f6 <low_level_init+0x24e>
    Error_Handler();
 80083f2:	f7f8 fc49 	bl	8000c88 <Error_Handler>
}
 80083f6:	bf00      	nop
 80083f8:	37b0      	adds	r7, #176	; 0xb0
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	20006fec 	.word	0x20006fec
 8008404:	40028000 	.word	0x40028000
 8008408:	200000fc 	.word	0x200000fc
 800840c:	2000009c 	.word	0x2000009c
 8008410:	2000705c 	.word	0x2000705c
 8008414:	08026a18 	.word	0x08026a18
 8008418:	2000015c 	.word	0x2000015c
 800841c:	20001950 	.word	0x20001950
 8008420:	08021508 	.word	0x08021508
 8008424:	080085f5 	.word	0x080085f5
 8008428:	20000010 	.word	0x20000010
 800842c:	20006fcc 	.word	0x20006fcc

08008430 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b092      	sub	sp, #72	; 0x48
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 800843a:	2300      	movs	r3, #0
 800843c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 800843e:	2300      	movs	r3, #0
 8008440:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8008444:	f107 030c 	add.w	r3, r7, #12
 8008448:	2230      	movs	r2, #48	; 0x30
 800844a:	2100      	movs	r1, #0
 800844c:	4618      	mov	r0, r3
 800844e:	f017 ff13 	bl	8020278 <memset>

  for(q = p; q != NULL; q = q->next)
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	643b      	str	r3, [r7, #64]	; 0x40
 8008456:	e049      	b.n	80084ec <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 8008458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800845a:	2b03      	cmp	r3, #3
 800845c:	d902      	bls.n	8008464 <low_level_output+0x34>
      return ERR_IF;
 800845e:	f06f 030b 	mvn.w	r3, #11
 8008462:	e056      	b.n	8008512 <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 8008464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008466:	6859      	ldr	r1, [r3, #4]
 8008468:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800846a:	4613      	mov	r3, r2
 800846c:	005b      	lsls	r3, r3, #1
 800846e:	4413      	add	r3, r2
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008476:	4413      	add	r3, r2
 8008478:	3b3c      	subs	r3, #60	; 0x3c
 800847a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800847c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800847e:	895b      	ldrh	r3, [r3, #10]
 8008480:	4619      	mov	r1, r3
 8008482:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008484:	4613      	mov	r3, r2
 8008486:	005b      	lsls	r3, r3, #1
 8008488:	4413      	add	r3, r2
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008490:	4413      	add	r3, r2
 8008492:	3b38      	subs	r3, #56	; 0x38
 8008494:	6019      	str	r1, [r3, #0]

    if(i>0)
 8008496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008498:	2b00      	cmp	r3, #0
 800849a:	d012      	beq.n	80084c2 <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800849c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800849e:	1e5a      	subs	r2, r3, #1
 80084a0:	f107 000c 	add.w	r0, r7, #12
 80084a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80084a6:	460b      	mov	r3, r1
 80084a8:	005b      	lsls	r3, r3, #1
 80084aa:	440b      	add	r3, r1
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	18c1      	adds	r1, r0, r3
 80084b0:	4613      	mov	r3, r2
 80084b2:	005b      	lsls	r3, r3, #1
 80084b4:	4413      	add	r3, r2
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80084bc:	4413      	add	r3, r2
 80084be:	3b34      	subs	r3, #52	; 0x34
 80084c0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80084c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d10a      	bne.n	80084e0 <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 80084ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084cc:	4613      	mov	r3, r2
 80084ce:	005b      	lsls	r3, r3, #1
 80084d0:	4413      	add	r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80084d8:	4413      	add	r3, r2
 80084da:	3b34      	subs	r3, #52	; 0x34
 80084dc:	2200      	movs	r2, #0
 80084de:	601a      	str	r2, [r3, #0]
    }

    i++;
 80084e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084e2:	3301      	adds	r3, #1
 80084e4:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80084e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	643b      	str	r3, [r7, #64]	; 0x40
 80084ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d1b2      	bne.n	8008458 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	891b      	ldrh	r3, [r3, #8]
 80084f6:	461a      	mov	r2, r3
 80084f8:	4b08      	ldr	r3, [pc, #32]	; (800851c <low_level_output+0xec>)
 80084fa:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80084fc:	4a07      	ldr	r2, [pc, #28]	; (800851c <low_level_output+0xec>)
 80084fe:	f107 030c 	add.w	r3, r7, #12
 8008502:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8008504:	2214      	movs	r2, #20
 8008506:	4905      	ldr	r1, [pc, #20]	; (800851c <low_level_output+0xec>)
 8008508:	4805      	ldr	r0, [pc, #20]	; (8008520 <low_level_output+0xf0>)
 800850a:	f7f9 fb9d 	bl	8001c48 <HAL_ETH_Transmit>

  return errval;
 800850e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008512:	4618      	mov	r0, r3
 8008514:	3748      	adds	r7, #72	; 0x48
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	2000705c 	.word	0x2000705c
 8008520:	20006fec 	.word	0x20006fec

08008524 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b094      	sub	sp, #80	; 0x50
 8008528:	af02      	add	r7, sp, #8
 800852a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800852c:	2300      	movs	r3, #0
 800852e:	647b      	str	r3, [r7, #68]	; 0x44
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 8008530:	2300      	movs	r3, #0
 8008532:	60bb      	str	r3, [r7, #8]
 8008534:	2300      	movs	r3, #0
 8008536:	643b      	str	r3, [r7, #64]	; 0x40
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8008538:	f107 030c 	add.w	r3, r7, #12
 800853c:	2230      	movs	r2, #48	; 0x30
 800853e:	2100      	movs	r1, #0
 8008540:	4618      	mov	r0, r3
 8008542:	f017 fe99 	bl	8020278 <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8008546:	2300      	movs	r3, #0
 8008548:	643b      	str	r3, [r7, #64]	; 0x40
 800854a:	e015      	b.n	8008578 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 800854c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800854e:	1c5a      	adds	r2, r3, #1
 8008550:	f107 010c 	add.w	r1, r7, #12
 8008554:	4613      	mov	r3, r2
 8008556:	005b      	lsls	r3, r3, #1
 8008558:	4413      	add	r3, r2
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	4419      	add	r1, r3
 800855e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008560:	4613      	mov	r3, r2
 8008562:	005b      	lsls	r3, r3, #1
 8008564:	4413      	add	r3, r2
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800856c:	4413      	add	r3, r2
 800856e:	3b34      	subs	r3, #52	; 0x34
 8008570:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8008572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008574:	3301      	adds	r3, #1
 8008576:	643b      	str	r3, [r7, #64]	; 0x40
 8008578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800857a:	2b02      	cmp	r3, #2
 800857c:	d9e6      	bls.n	800854c <low_level_input+0x28>
  }

  if (HAL_ETH_GetRxDataBuffer(&heth, RxBuff) == HAL_OK)
 800857e:	f107 030c 	add.w	r3, r7, #12
 8008582:	4619      	mov	r1, r3
 8008584:	4818      	ldr	r0, [pc, #96]	; (80085e8 <low_level_input+0xc4>)
 8008586:	f7f9 fcd8 	bl	8001f3a <HAL_ETH_GetRxDataBuffer>
 800858a:	4603      	mov	r3, r0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d125      	bne.n	80085dc <low_level_input+0xb8>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 8008590:	f107 0308 	add.w	r3, r7, #8
 8008594:	4619      	mov	r1, r3
 8008596:	4814      	ldr	r0, [pc, #80]	; (80085e8 <low_level_input+0xc4>)
 8008598:	f7f9 fd6d 	bl	8002076 <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 800859c:	4812      	ldr	r0, [pc, #72]	; (80085e8 <low_level_input+0xc4>)
 800859e:	f7f9 fd9d 	bl	80020dc <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	68ba      	ldr	r2, [r7, #8]
 80085a6:	4611      	mov	r1, r2
 80085a8:	4618      	mov	r0, r3
 80085aa:	f7ff fceb 	bl	8007f84 <SCB_InvalidateDCache_by_Addr>
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 80085ae:	480f      	ldr	r0, [pc, #60]	; (80085ec <low_level_input+0xc8>)
 80085b0:	f005 fb14 	bl	800dbdc <memp_malloc_pool>
 80085b4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(custom_pbuf != NULL)
 80085b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00f      	beq.n	80085dc <low_level_input+0xb8>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 80085bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085be:	4a0c      	ldr	r2, [pc, #48]	; (80085f0 <low_level_input+0xcc>)
 80085c0:	611a      	str	r2, [r3, #16]
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	b299      	uxth	r1, r3
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	68ba      	ldr	r2, [r7, #8]
 80085ca:	b292      	uxth	r2, r2
 80085cc:	9201      	str	r2, [sp, #4]
 80085ce:	9300      	str	r3, [sp, #0]
 80085d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085d2:	2241      	movs	r2, #65	; 0x41
 80085d4:	2000      	movs	r0, #0
 80085d6:	f006 f9a1 	bl	800e91c <pbuf_alloced_custom>
 80085da:	6478      	str	r0, [r7, #68]	; 0x44
    }
  }

  return p;
 80085dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3748      	adds	r7, #72	; 0x48
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	20006fec 	.word	0x20006fec
 80085ec:	08026a18 	.word	0x08026a18
 80085f0:	080086a1 	.word	0x080086a1

080085f4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008600:	4b0f      	ldr	r3, [pc, #60]	; (8008640 <ethernetif_input+0x4c>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f04f 31ff 	mov.w	r1, #4294967295
 8008608:	4618      	mov	r0, r3
 800860a:	f000 fc87 	bl	8008f1c <osSemaphoreAcquire>
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d1f5      	bne.n	8008600 <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f7ff ff85 	bl	8008524 <low_level_input>
 800861a:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00a      	beq.n	8008638 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	691b      	ldr	r3, [r3, #16]
 8008626:	68f9      	ldr	r1, [r7, #12]
 8008628:	68b8      	ldr	r0, [r7, #8]
 800862a:	4798      	blx	r3
 800862c:	4603      	mov	r3, r0
 800862e:	2b00      	cmp	r3, #0
 8008630:	d002      	beq.n	8008638 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 8008632:	68b8      	ldr	r0, [r7, #8]
 8008634:	f006 fb2c 	bl	800ec90 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d1ea      	bne.n	8008614 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800863e:	e7df      	b.n	8008600 <ethernetif_input+0xc>
 8008640:	20001950 	.word	0x20001950

08008644 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d106      	bne.n	8008660 <ethernetif_init+0x1c>
 8008652:	4b0e      	ldr	r3, [pc, #56]	; (800868c <ethernetif_init+0x48>)
 8008654:	f44f 7213 	mov.w	r2, #588	; 0x24c
 8008658:	490d      	ldr	r1, [pc, #52]	; (8008690 <ethernetif_init+0x4c>)
 800865a:	480e      	ldr	r0, [pc, #56]	; (8008694 <ethernetif_init+0x50>)
 800865c:	f017 febe 	bl	80203dc <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2273      	movs	r2, #115	; 0x73
 8008664:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  netif->name[1] = IFNAME1;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2274      	movs	r2, #116	; 0x74
 800866c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	4a09      	ldr	r2, [pc, #36]	; (8008698 <ethernetif_init+0x54>)
 8008674:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a08      	ldr	r2, [pc, #32]	; (800869c <ethernetif_init+0x58>)
 800867a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f7ff fd93 	bl	80081a8 <low_level_init>

  return ERR_OK;
 8008682:	2300      	movs	r3, #0
}
 8008684:	4618      	mov	r0, r3
 8008686:	3708      	adds	r7, #8
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}
 800868c:	08021510 	.word	0x08021510
 8008690:	0802152c 	.word	0x0802152c
 8008694:	0802153c 	.word	0x0802153c
 8008698:	0801899d 	.word	0x0801899d
 800869c:	08008431 	.word	0x08008431

080086a0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80086ac:	68f9      	ldr	r1, [r7, #12]
 80086ae:	4803      	ldr	r0, [pc, #12]	; (80086bc <pbuf_free_custom+0x1c>)
 80086b0:	f005 fb0e 	bl	800dcd0 <memp_free_pool>
}
 80086b4:	bf00      	nop
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	08026a18 	.word	0x08026a18

080086c0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80086c4:	f7f8 ff76 	bl	80015b4 <HAL_GetTick>
 80086c8:	4603      	mov	r3, r0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	bd80      	pop	{r7, pc}
	...

080086d0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80086d4:	4802      	ldr	r0, [pc, #8]	; (80086e0 <ETH_PHY_IO_Init+0x10>)
 80086d6:	f7fa f933 	bl	8002940 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	bd80      	pop	{r7, pc}
 80086e0:	20006fec 	.word	0x20006fec

080086e4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80086e4:	b480      	push	{r7}
 80086e6:	af00      	add	r7, sp, #0
  return 0;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	60b9      	str	r1, [r7, #8]
 80086fe:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	68ba      	ldr	r2, [r7, #8]
 8008704:	68f9      	ldr	r1, [r7, #12]
 8008706:	4807      	ldr	r0, [pc, #28]	; (8008724 <ETH_PHY_IO_ReadReg+0x30>)
 8008708:	f7f9 fe84 	bl	8002414 <HAL_ETH_ReadPHYRegister>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d002      	beq.n	8008718 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8008712:	f04f 33ff 	mov.w	r3, #4294967295
 8008716:	e000      	b.n	800871a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	3710      	adds	r7, #16
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	20006fec 	.word	0x20006fec

08008728 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	68ba      	ldr	r2, [r7, #8]
 8008738:	68f9      	ldr	r1, [r7, #12]
 800873a:	4807      	ldr	r0, [pc, #28]	; (8008758 <ETH_PHY_IO_WriteReg+0x30>)
 800873c:	f7f9 febe 	bl	80024bc <HAL_ETH_WritePHYRegister>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d002      	beq.n	800874c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8008746:	f04f 33ff 	mov.w	r3, #4294967295
 800874a:	e000      	b.n	800874e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	20006fec 	.word	0x20006fec

0800875c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008760:	f7f8 ff28 	bl	80015b4 <HAL_GetTick>
 8008764:	4603      	mov	r3, r0
}
 8008766:	4618      	mov	r0, r3
 8008768:	bd80      	pop	{r7, pc}
	...

0800876c <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b0a0      	sub	sp, #128	; 0x80
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  uint32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 8008774:	2300      	movs	r3, #0
 8008776:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008778:	2300      	movs	r3, #0
 800877a:	67bb      	str	r3, [r7, #120]	; 0x78
 800877c:	2300      	movs	r3, #0
 800877e:	677b      	str	r3, [r7, #116]	; 0x74

/* USER CODE END ETH link init */

  for(;;)
  {
  struct netif *netif = (struct netif *) argument;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	673b      	str	r3, [r7, #112]	; 0x70
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008784:	483a      	ldr	r0, [pc, #232]	; (8008870 <ethernet_link_thread+0x104>)
 8008786:	f7f8 fe3e 	bl	8001406 <LAN8742_GetLinkState>
 800878a:	4603      	mov	r3, r0
 800878c:	66fb      	str	r3, [r7, #108]	; 0x6c

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800878e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008790:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008794:	089b      	lsrs	r3, r3, #2
 8008796:	f003 0301 	and.w	r3, r3, #1
 800879a:	b2db      	uxtb	r3, r3
 800879c:	2b00      	cmp	r3, #0
 800879e:	d00c      	beq.n	80087ba <ethernet_link_thread+0x4e>
 80087a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d809      	bhi.n	80087ba <ethernet_link_thread+0x4e>
  {
    HAL_ETH_Stop_IT(&heth);
 80087a6:	4833      	ldr	r0, [pc, #204]	; (8008874 <ethernet_link_thread+0x108>)
 80087a8:	f7f9 f9d4 	bl	8001b54 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80087ac:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80087ae:	f005 fe27 	bl	800e400 <netif_set_down>
    netif_set_link_down(netif);
 80087b2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80087b4:	f005 fe8e 	bl	800e4d4 <netif_set_link_down>
 80087b8:	e055      	b.n	8008866 <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80087ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80087c0:	f003 0304 	and.w	r3, r3, #4
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d14e      	bne.n	8008866 <ethernet_link_thread+0xfa>
 80087c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ca:	2b01      	cmp	r3, #1
 80087cc:	d94b      	bls.n	8008866 <ethernet_link_thread+0xfa>
 80087ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087d0:	3b02      	subs	r3, #2
 80087d2:	2b03      	cmp	r3, #3
 80087d4:	d82a      	bhi.n	800882c <ethernet_link_thread+0xc0>
 80087d6:	a201      	add	r2, pc, #4	; (adr r2, 80087dc <ethernet_link_thread+0x70>)
 80087d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087dc:	080087ed 	.word	0x080087ed
 80087e0:	080087ff 	.word	0x080087ff
 80087e4:	0800880f 	.word	0x0800880f
 80087e8:	0800881f 	.word	0x0800881f
  {
    switch (PHYLinkState)
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80087ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80087f0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80087f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80087f6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80087f8:	2301      	movs	r3, #1
 80087fa:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80087fc:	e017      	b.n	800882e <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80087fe:	2300      	movs	r3, #0
 8008800:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8008802:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008806:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008808:	2301      	movs	r3, #1
 800880a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800880c:	e00f      	b.n	800882e <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800880e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008812:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8008814:	2300      	movs	r3, #0
 8008816:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008818:	2301      	movs	r3, #1
 800881a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800881c:	e007      	b.n	800882e <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800881e:	2300      	movs	r3, #0
 8008820:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8008822:	2300      	movs	r3, #0
 8008824:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008826:	2301      	movs	r3, #1
 8008828:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800882a:	e000      	b.n	800882e <ethernet_link_thread+0xc2>
    default:
      break;
 800882c:	bf00      	nop
    }

    if(linkchanged)
 800882e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008830:	2b00      	cmp	r3, #0
 8008832:	d018      	beq.n	8008866 <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8008834:	f107 0308 	add.w	r3, r7, #8
 8008838:	4619      	mov	r1, r3
 800883a:	480e      	ldr	r0, [pc, #56]	; (8008874 <ethernet_link_thread+0x108>)
 800883c:	f7f9 fe92 	bl	8002564 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8008840:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008842:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8008844:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008846:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8008848:	f107 0308 	add.w	r3, r7, #8
 800884c:	4619      	mov	r1, r3
 800884e:	4809      	ldr	r0, [pc, #36]	; (8008874 <ethernet_link_thread+0x108>)
 8008850:	f7fa f85c 	bl	800290c <HAL_ETH_SetMACConfig>

      HAL_ETH_Start_IT(&heth);
 8008854:	4807      	ldr	r0, [pc, #28]	; (8008874 <ethernet_link_thread+0x108>)
 8008856:	f7f9 f8f8 	bl	8001a4a <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800885a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800885c:	f005 fd5a 	bl	800e314 <netif_set_up>
      netif_set_link_up(netif);
 8008860:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008862:	f005 fdff 	bl	800e464 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8008866:	2064      	movs	r0, #100	; 0x64
 8008868:	f000 f946 	bl	8008af8 <osDelay>
  {
 800886c:	e788      	b.n	8008780 <ethernet_link_thread+0x14>
 800886e:	bf00      	nop
 8008870:	20006fcc 	.word	0x20006fcc
 8008874:	20006fec 	.word	0x20006fec

08008878 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008878:	b480      	push	{r7}
 800887a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800887c:	bf00      	nop
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr
	...

08008888 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800888e:	f3ef 8305 	mrs	r3, IPSR
 8008892:	60bb      	str	r3, [r7, #8]
  return(result);
 8008894:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008896:	2b00      	cmp	r3, #0
 8008898:	d10f      	bne.n	80088ba <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800889a:	f3ef 8310 	mrs	r3, PRIMASK
 800889e:	607b      	str	r3, [r7, #4]
  return(result);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d105      	bne.n	80088b2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80088a6:	f3ef 8311 	mrs	r3, BASEPRI
 80088aa:	603b      	str	r3, [r7, #0]
  return(result);
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d007      	beq.n	80088c2 <osKernelInitialize+0x3a>
 80088b2:	4b0e      	ldr	r3, [pc, #56]	; (80088ec <osKernelInitialize+0x64>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2b02      	cmp	r3, #2
 80088b8:	d103      	bne.n	80088c2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80088ba:	f06f 0305 	mvn.w	r3, #5
 80088be:	60fb      	str	r3, [r7, #12]
 80088c0:	e00c      	b.n	80088dc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80088c2:	4b0a      	ldr	r3, [pc, #40]	; (80088ec <osKernelInitialize+0x64>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d105      	bne.n	80088d6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80088ca:	4b08      	ldr	r3, [pc, #32]	; (80088ec <osKernelInitialize+0x64>)
 80088cc:	2201      	movs	r2, #1
 80088ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80088d0:	2300      	movs	r3, #0
 80088d2:	60fb      	str	r3, [r7, #12]
 80088d4:	e002      	b.n	80088dc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80088d6:	f04f 33ff 	mov.w	r3, #4294967295
 80088da:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80088dc:	68fb      	ldr	r3, [r7, #12]
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3714      	adds	r7, #20
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr
 80088ea:	bf00      	nop
 80088ec:	20001968 	.word	0x20001968

080088f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088f6:	f3ef 8305 	mrs	r3, IPSR
 80088fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80088fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d10f      	bne.n	8008922 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008902:	f3ef 8310 	mrs	r3, PRIMASK
 8008906:	607b      	str	r3, [r7, #4]
  return(result);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d105      	bne.n	800891a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800890e:	f3ef 8311 	mrs	r3, BASEPRI
 8008912:	603b      	str	r3, [r7, #0]
  return(result);
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d007      	beq.n	800892a <osKernelStart+0x3a>
 800891a:	4b0f      	ldr	r3, [pc, #60]	; (8008958 <osKernelStart+0x68>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2b02      	cmp	r3, #2
 8008920:	d103      	bne.n	800892a <osKernelStart+0x3a>
    stat = osErrorISR;
 8008922:	f06f 0305 	mvn.w	r3, #5
 8008926:	60fb      	str	r3, [r7, #12]
 8008928:	e010      	b.n	800894c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800892a:	4b0b      	ldr	r3, [pc, #44]	; (8008958 <osKernelStart+0x68>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2b01      	cmp	r3, #1
 8008930:	d109      	bne.n	8008946 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008932:	f7ff ffa1 	bl	8008878 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008936:	4b08      	ldr	r3, [pc, #32]	; (8008958 <osKernelStart+0x68>)
 8008938:	2202      	movs	r2, #2
 800893a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800893c:	f002 f89e 	bl	800aa7c <vTaskStartScheduler>
      stat = osOK;
 8008940:	2300      	movs	r3, #0
 8008942:	60fb      	str	r3, [r7, #12]
 8008944:	e002      	b.n	800894c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8008946:	f04f 33ff 	mov.w	r3, #4294967295
 800894a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800894c:	68fb      	ldr	r3, [r7, #12]
}
 800894e:	4618      	mov	r0, r3
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	20001968 	.word	0x20001968

0800895c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008962:	f3ef 8305 	mrs	r3, IPSR
 8008966:	60bb      	str	r3, [r7, #8]
  return(result);
 8008968:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800896a:	2b00      	cmp	r3, #0
 800896c:	d10f      	bne.n	800898e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800896e:	f3ef 8310 	mrs	r3, PRIMASK
 8008972:	607b      	str	r3, [r7, #4]
  return(result);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d105      	bne.n	8008986 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800897a:	f3ef 8311 	mrs	r3, BASEPRI
 800897e:	603b      	str	r3, [r7, #0]
  return(result);
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d007      	beq.n	8008996 <osKernelGetTickCount+0x3a>
 8008986:	4b08      	ldr	r3, [pc, #32]	; (80089a8 <osKernelGetTickCount+0x4c>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2b02      	cmp	r3, #2
 800898c:	d103      	bne.n	8008996 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800898e:	f002 f997 	bl	800acc0 <xTaskGetTickCountFromISR>
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	e002      	b.n	800899c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8008996:	f002 f983 	bl	800aca0 <xTaskGetTickCount>
 800899a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800899c:	68fb      	ldr	r3, [r7, #12]
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3710      	adds	r7, #16
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	bf00      	nop
 80089a8:	20001968 	.word	0x20001968

080089ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b090      	sub	sp, #64	; 0x40
 80089b0:	af04      	add	r7, sp, #16
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80089b8:	2300      	movs	r3, #0
 80089ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089bc:	f3ef 8305 	mrs	r3, IPSR
 80089c0:	61fb      	str	r3, [r7, #28]
  return(result);
 80089c2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	f040 808f 	bne.w	8008ae8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089ca:	f3ef 8310 	mrs	r3, PRIMASK
 80089ce:	61bb      	str	r3, [r7, #24]
  return(result);
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d105      	bne.n	80089e2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80089d6:	f3ef 8311 	mrs	r3, BASEPRI
 80089da:	617b      	str	r3, [r7, #20]
  return(result);
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d003      	beq.n	80089ea <osThreadNew+0x3e>
 80089e2:	4b44      	ldr	r3, [pc, #272]	; (8008af4 <osThreadNew+0x148>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2b02      	cmp	r3, #2
 80089e8:	d07e      	beq.n	8008ae8 <osThreadNew+0x13c>
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d07b      	beq.n	8008ae8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80089f0:	2380      	movs	r3, #128	; 0x80
 80089f2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80089f4:	2318      	movs	r3, #24
 80089f6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80089f8:	2300      	movs	r3, #0
 80089fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80089fc:	f04f 33ff 	mov.w	r3, #4294967295
 8008a00:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d045      	beq.n	8008a94 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d002      	beq.n	8008a16 <osThreadNew+0x6a>
        name = attr->name;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	699b      	ldr	r3, [r3, #24]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d002      	beq.n	8008a24 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	699b      	ldr	r3, [r3, #24]
 8008a22:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d008      	beq.n	8008a3c <osThreadNew+0x90>
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2c:	2b38      	cmp	r3, #56	; 0x38
 8008a2e:	d805      	bhi.n	8008a3c <osThreadNew+0x90>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	f003 0301 	and.w	r3, r3, #1
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d001      	beq.n	8008a40 <osThreadNew+0x94>
        return (NULL);
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	e054      	b.n	8008aea <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	695b      	ldr	r3, [r3, #20]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d003      	beq.n	8008a50 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	695b      	ldr	r3, [r3, #20]
 8008a4c:	089b      	lsrs	r3, r3, #2
 8008a4e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00e      	beq.n	8008a76 <osThreadNew+0xca>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	68db      	ldr	r3, [r3, #12]
 8008a5c:	2b5b      	cmp	r3, #91	; 0x5b
 8008a5e:	d90a      	bls.n	8008a76 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d006      	beq.n	8008a76 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	695b      	ldr	r3, [r3, #20]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d002      	beq.n	8008a76 <osThreadNew+0xca>
        mem = 1;
 8008a70:	2301      	movs	r3, #1
 8008a72:	623b      	str	r3, [r7, #32]
 8008a74:	e010      	b.n	8008a98 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d10c      	bne.n	8008a98 <osThreadNew+0xec>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d108      	bne.n	8008a98 <osThreadNew+0xec>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d104      	bne.n	8008a98 <osThreadNew+0xec>
          mem = 0;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	623b      	str	r3, [r7, #32]
 8008a92:	e001      	b.n	8008a98 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008a94:	2300      	movs	r3, #0
 8008a96:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008a98:	6a3b      	ldr	r3, [r7, #32]
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d110      	bne.n	8008ac0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008aa6:	9202      	str	r2, [sp, #8]
 8008aa8:	9301      	str	r3, [sp, #4]
 8008aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aac:	9300      	str	r3, [sp, #0]
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ab2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ab4:	68f8      	ldr	r0, [r7, #12]
 8008ab6:	f001 fe0b 	bl	800a6d0 <xTaskCreateStatic>
 8008aba:	4603      	mov	r3, r0
 8008abc:	613b      	str	r3, [r7, #16]
 8008abe:	e013      	b.n	8008ae8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008ac0:	6a3b      	ldr	r3, [r7, #32]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d110      	bne.n	8008ae8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac8:	b29a      	uxth	r2, r3
 8008aca:	f107 0310 	add.w	r3, r7, #16
 8008ace:	9301      	str	r3, [sp, #4]
 8008ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad2:	9300      	str	r3, [sp, #0]
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ad8:	68f8      	ldr	r0, [r7, #12]
 8008ada:	f001 fe56 	bl	800a78a <xTaskCreate>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d001      	beq.n	8008ae8 <osThreadNew+0x13c>
          hTask = NULL;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008ae8:	693b      	ldr	r3, [r7, #16]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3730      	adds	r7, #48	; 0x30
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop
 8008af4:	20001968 	.word	0x20001968

08008af8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b086      	sub	sp, #24
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b00:	f3ef 8305 	mrs	r3, IPSR
 8008b04:	613b      	str	r3, [r7, #16]
  return(result);
 8008b06:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d10f      	bne.n	8008b2c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b0c:	f3ef 8310 	mrs	r3, PRIMASK
 8008b10:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d105      	bne.n	8008b24 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008b18:	f3ef 8311 	mrs	r3, BASEPRI
 8008b1c:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d007      	beq.n	8008b34 <osDelay+0x3c>
 8008b24:	4b0a      	ldr	r3, [pc, #40]	; (8008b50 <osDelay+0x58>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	2b02      	cmp	r3, #2
 8008b2a:	d103      	bne.n	8008b34 <osDelay+0x3c>
    stat = osErrorISR;
 8008b2c:	f06f 0305 	mvn.w	r3, #5
 8008b30:	617b      	str	r3, [r7, #20]
 8008b32:	e007      	b.n	8008b44 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008b34:	2300      	movs	r3, #0
 8008b36:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d002      	beq.n	8008b44 <osDelay+0x4c>
      vTaskDelay(ticks);
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f001 ff68 	bl	800aa14 <vTaskDelay>
    }
  }

  return (stat);
 8008b44:	697b      	ldr	r3, [r7, #20]
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3718      	adds	r7, #24
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	20001968 	.word	0x20001968

08008b54 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b08a      	sub	sp, #40	; 0x28
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b60:	f3ef 8305 	mrs	r3, IPSR
 8008b64:	613b      	str	r3, [r7, #16]
  return(result);
 8008b66:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	f040 8085 	bne.w	8008c78 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b6e:	f3ef 8310 	mrs	r3, PRIMASK
 8008b72:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d105      	bne.n	8008b86 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008b7a:	f3ef 8311 	mrs	r3, BASEPRI
 8008b7e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d003      	beq.n	8008b8e <osMutexNew+0x3a>
 8008b86:	4b3f      	ldr	r3, [pc, #252]	; (8008c84 <osMutexNew+0x130>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	2b02      	cmp	r3, #2
 8008b8c:	d074      	beq.n	8008c78 <osMutexNew+0x124>
    if (attr != NULL) {
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d003      	beq.n	8008b9c <osMutexNew+0x48>
      type = attr->attr_bits;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	623b      	str	r3, [r7, #32]
 8008b9a:	e001      	b.n	8008ba0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008ba0:	6a3b      	ldr	r3, [r7, #32]
 8008ba2:	f003 0301 	and.w	r3, r3, #1
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d002      	beq.n	8008bb0 <osMutexNew+0x5c>
      rmtx = 1U;
 8008baa:	2301      	movs	r3, #1
 8008bac:	61fb      	str	r3, [r7, #28]
 8008bae:	e001      	b.n	8008bb4 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008bb4:	6a3b      	ldr	r3, [r7, #32]
 8008bb6:	f003 0308 	and.w	r3, r3, #8
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d15c      	bne.n	8008c78 <osMutexNew+0x124>
      mem = -1;
 8008bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8008bc2:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d015      	beq.n	8008bf6 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d006      	beq.n	8008be0 <osMutexNew+0x8c>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	68db      	ldr	r3, [r3, #12]
 8008bd6:	2b4f      	cmp	r3, #79	; 0x4f
 8008bd8:	d902      	bls.n	8008be0 <osMutexNew+0x8c>
          mem = 1;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	61bb      	str	r3, [r7, #24]
 8008bde:	e00c      	b.n	8008bfa <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d108      	bne.n	8008bfa <osMutexNew+0xa6>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d104      	bne.n	8008bfa <osMutexNew+0xa6>
            mem = 0;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	61bb      	str	r3, [r7, #24]
 8008bf4:	e001      	b.n	8008bfa <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d112      	bne.n	8008c26 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d007      	beq.n	8008c16 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	2004      	movs	r0, #4
 8008c0e:	f000 fe0c 	bl	800982a <xQueueCreateMutexStatic>
 8008c12:	6278      	str	r0, [r7, #36]	; 0x24
 8008c14:	e016      	b.n	8008c44 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	2001      	movs	r0, #1
 8008c1e:	f000 fe04 	bl	800982a <xQueueCreateMutexStatic>
 8008c22:	6278      	str	r0, [r7, #36]	; 0x24
 8008c24:	e00e      	b.n	8008c44 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d10b      	bne.n	8008c44 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d004      	beq.n	8008c3c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8008c32:	2004      	movs	r0, #4
 8008c34:	f000 fde1 	bl	80097fa <xQueueCreateMutex>
 8008c38:	6278      	str	r0, [r7, #36]	; 0x24
 8008c3a:	e003      	b.n	8008c44 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8008c3c:	2001      	movs	r0, #1
 8008c3e:	f000 fddc 	bl	80097fa <xQueueCreateMutex>
 8008c42:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d00c      	beq.n	8008c64 <osMutexNew+0x110>
        if (attr != NULL) {
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d003      	beq.n	8008c58 <osMutexNew+0x104>
          name = attr->name;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	617b      	str	r3, [r7, #20]
 8008c56:	e001      	b.n	8008c5c <osMutexNew+0x108>
        } else {
          name = NULL;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8008c5c:	6979      	ldr	r1, [r7, #20]
 8008c5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c60:	f001 fcae 	bl	800a5c0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d006      	beq.n	8008c78 <osMutexNew+0x124>
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d003      	beq.n	8008c78 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c72:	f043 0301 	orr.w	r3, r3, #1
 8008c76:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3728      	adds	r7, #40	; 0x28
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	20001968 	.word	0x20001968

08008c88 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b088      	sub	sp, #32
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f023 0301 	bic.w	r3, r3, #1
 8008c98:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f003 0301 	and.w	r3, r3, #1
 8008ca0:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ca6:	f3ef 8305 	mrs	r3, IPSR
 8008caa:	613b      	str	r3, [r7, #16]
  return(result);
 8008cac:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10f      	bne.n	8008cd2 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cb2:	f3ef 8310 	mrs	r3, PRIMASK
 8008cb6:	60fb      	str	r3, [r7, #12]
  return(result);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d105      	bne.n	8008cca <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008cbe:	f3ef 8311 	mrs	r3, BASEPRI
 8008cc2:	60bb      	str	r3, [r7, #8]
  return(result);
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d007      	beq.n	8008cda <osMutexAcquire+0x52>
 8008cca:	4b1d      	ldr	r3, [pc, #116]	; (8008d40 <osMutexAcquire+0xb8>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2b02      	cmp	r3, #2
 8008cd0:	d103      	bne.n	8008cda <osMutexAcquire+0x52>
    stat = osErrorISR;
 8008cd2:	f06f 0305 	mvn.w	r3, #5
 8008cd6:	61fb      	str	r3, [r7, #28]
 8008cd8:	e02c      	b.n	8008d34 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8008cda:	69bb      	ldr	r3, [r7, #24]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d103      	bne.n	8008ce8 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8008ce0:	f06f 0303 	mvn.w	r3, #3
 8008ce4:	61fb      	str	r3, [r7, #28]
 8008ce6:	e025      	b.n	8008d34 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d011      	beq.n	8008d12 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008cee:	6839      	ldr	r1, [r7, #0]
 8008cf0:	69b8      	ldr	r0, [r7, #24]
 8008cf2:	f000 fde9 	bl	80098c8 <xQueueTakeMutexRecursive>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d01b      	beq.n	8008d34 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d003      	beq.n	8008d0a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8008d02:	f06f 0301 	mvn.w	r3, #1
 8008d06:	61fb      	str	r3, [r7, #28]
 8008d08:	e014      	b.n	8008d34 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8008d0a:	f06f 0302 	mvn.w	r3, #2
 8008d0e:	61fb      	str	r3, [r7, #28]
 8008d10:	e010      	b.n	8008d34 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008d12:	6839      	ldr	r1, [r7, #0]
 8008d14:	69b8      	ldr	r0, [r7, #24]
 8008d16:	f001 f97b 	bl	800a010 <xQueueSemaphoreTake>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d009      	beq.n	8008d34 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d003      	beq.n	8008d2e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8008d26:	f06f 0301 	mvn.w	r3, #1
 8008d2a:	61fb      	str	r3, [r7, #28]
 8008d2c:	e002      	b.n	8008d34 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8008d2e:	f06f 0302 	mvn.w	r3, #2
 8008d32:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008d34:	69fb      	ldr	r3, [r7, #28]
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3720      	adds	r7, #32
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	20001968 	.word	0x20001968

08008d44 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b088      	sub	sp, #32
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f023 0301 	bic.w	r3, r3, #1
 8008d52:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f003 0301 	and.w	r3, r3, #1
 8008d5a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d60:	f3ef 8305 	mrs	r3, IPSR
 8008d64:	613b      	str	r3, [r7, #16]
  return(result);
 8008d66:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d10f      	bne.n	8008d8c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d6c:	f3ef 8310 	mrs	r3, PRIMASK
 8008d70:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d105      	bne.n	8008d84 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d78:	f3ef 8311 	mrs	r3, BASEPRI
 8008d7c:	60bb      	str	r3, [r7, #8]
  return(result);
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d007      	beq.n	8008d94 <osMutexRelease+0x50>
 8008d84:	4b16      	ldr	r3, [pc, #88]	; (8008de0 <osMutexRelease+0x9c>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2b02      	cmp	r3, #2
 8008d8a:	d103      	bne.n	8008d94 <osMutexRelease+0x50>
    stat = osErrorISR;
 8008d8c:	f06f 0305 	mvn.w	r3, #5
 8008d90:	61fb      	str	r3, [r7, #28]
 8008d92:	e01f      	b.n	8008dd4 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8008d94:	69bb      	ldr	r3, [r7, #24]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d103      	bne.n	8008da2 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8008d9a:	f06f 0303 	mvn.w	r3, #3
 8008d9e:	61fb      	str	r3, [r7, #28]
 8008da0:	e018      	b.n	8008dd4 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d009      	beq.n	8008dbc <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008da8:	69b8      	ldr	r0, [r7, #24]
 8008daa:	f000 fd59 	bl	8009860 <xQueueGiveMutexRecursive>
 8008dae:	4603      	mov	r3, r0
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d00f      	beq.n	8008dd4 <osMutexRelease+0x90>
        stat = osErrorResource;
 8008db4:	f06f 0302 	mvn.w	r3, #2
 8008db8:	61fb      	str	r3, [r7, #28]
 8008dba:	e00b      	b.n	8008dd4 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	2100      	movs	r1, #0
 8008dc2:	69b8      	ldr	r0, [r7, #24]
 8008dc4:	f000 fe20 	bl	8009a08 <xQueueGenericSend>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d002      	beq.n	8008dd4 <osMutexRelease+0x90>
        stat = osErrorResource;
 8008dce:	f06f 0302 	mvn.w	r3, #2
 8008dd2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8008dd4:	69fb      	ldr	r3, [r7, #28]
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3720      	adds	r7, #32
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	20001968 	.word	0x20001968

08008de4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b08c      	sub	sp, #48	; 0x30
 8008de8:	af02      	add	r7, sp, #8
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008df0:	2300      	movs	r3, #0
 8008df2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008df4:	f3ef 8305 	mrs	r3, IPSR
 8008df8:	61bb      	str	r3, [r7, #24]
  return(result);
 8008dfa:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f040 8086 	bne.w	8008f0e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e02:	f3ef 8310 	mrs	r3, PRIMASK
 8008e06:	617b      	str	r3, [r7, #20]
  return(result);
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d105      	bne.n	8008e1a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008e0e:	f3ef 8311 	mrs	r3, BASEPRI
 8008e12:	613b      	str	r3, [r7, #16]
  return(result);
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d003      	beq.n	8008e22 <osSemaphoreNew+0x3e>
 8008e1a:	4b3f      	ldr	r3, [pc, #252]	; (8008f18 <osSemaphoreNew+0x134>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2b02      	cmp	r3, #2
 8008e20:	d075      	beq.n	8008f0e <osSemaphoreNew+0x12a>
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d072      	beq.n	8008f0e <osSemaphoreNew+0x12a>
 8008e28:	68ba      	ldr	r2, [r7, #8]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d86e      	bhi.n	8008f0e <osSemaphoreNew+0x12a>
    mem = -1;
 8008e30:	f04f 33ff 	mov.w	r3, #4294967295
 8008e34:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d015      	beq.n	8008e68 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d006      	beq.n	8008e52 <osSemaphoreNew+0x6e>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	2b4f      	cmp	r3, #79	; 0x4f
 8008e4a:	d902      	bls.n	8008e52 <osSemaphoreNew+0x6e>
        mem = 1;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	623b      	str	r3, [r7, #32]
 8008e50:	e00c      	b.n	8008e6c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d108      	bne.n	8008e6c <osSemaphoreNew+0x88>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d104      	bne.n	8008e6c <osSemaphoreNew+0x88>
          mem = 0;
 8008e62:	2300      	movs	r3, #0
 8008e64:	623b      	str	r3, [r7, #32]
 8008e66:	e001      	b.n	8008e6c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8008e6c:	6a3b      	ldr	r3, [r7, #32]
 8008e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e72:	d04c      	beq.n	8008f0e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d128      	bne.n	8008ecc <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8008e7a:	6a3b      	ldr	r3, [r7, #32]
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d10a      	bne.n	8008e96 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	2203      	movs	r2, #3
 8008e86:	9200      	str	r2, [sp, #0]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	2100      	movs	r1, #0
 8008e8c:	2001      	movs	r0, #1
 8008e8e:	f000 fbbf 	bl	8009610 <xQueueGenericCreateStatic>
 8008e92:	6278      	str	r0, [r7, #36]	; 0x24
 8008e94:	e005      	b.n	8008ea2 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8008e96:	2203      	movs	r2, #3
 8008e98:	2100      	movs	r1, #0
 8008e9a:	2001      	movs	r0, #1
 8008e9c:	f000 fc30 	bl	8009700 <xQueueGenericCreate>
 8008ea0:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d022      	beq.n	8008eee <osSemaphoreNew+0x10a>
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d01f      	beq.n	8008eee <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008eae:	2300      	movs	r3, #0
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	2100      	movs	r1, #0
 8008eb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008eb6:	f000 fda7 	bl	8009a08 <xQueueGenericSend>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d016      	beq.n	8008eee <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8008ec0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ec2:	f001 fa31 	bl	800a328 <vQueueDelete>
            hSemaphore = NULL;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8008eca:	e010      	b.n	8008eee <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8008ecc:	6a3b      	ldr	r3, [r7, #32]
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d108      	bne.n	8008ee4 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	68b9      	ldr	r1, [r7, #8]
 8008eda:	68f8      	ldr	r0, [r7, #12]
 8008edc:	f000 fd2a 	bl	8009934 <xQueueCreateCountingSemaphoreStatic>
 8008ee0:	6278      	str	r0, [r7, #36]	; 0x24
 8008ee2:	e004      	b.n	8008eee <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008ee4:	68b9      	ldr	r1, [r7, #8]
 8008ee6:	68f8      	ldr	r0, [r7, #12]
 8008ee8:	f000 fd5b 	bl	80099a2 <xQueueCreateCountingSemaphore>
 8008eec:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d00c      	beq.n	8008f0e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d003      	beq.n	8008f02 <osSemaphoreNew+0x11e>
          name = attr->name;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	61fb      	str	r3, [r7, #28]
 8008f00:	e001      	b.n	8008f06 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8008f02:	2300      	movs	r3, #0
 8008f04:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008f06:	69f9      	ldr	r1, [r7, #28]
 8008f08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f0a:	f001 fb59 	bl	800a5c0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3728      	adds	r7, #40	; 0x28
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	20001968 	.word	0x20001968

08008f1c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b088      	sub	sp, #32
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d103      	bne.n	8008f3c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008f34:	f06f 0303 	mvn.w	r3, #3
 8008f38:	61fb      	str	r3, [r7, #28]
 8008f3a:	e04b      	b.n	8008fd4 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f3c:	f3ef 8305 	mrs	r3, IPSR
 8008f40:	617b      	str	r3, [r7, #20]
  return(result);
 8008f42:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d10f      	bne.n	8008f68 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f48:	f3ef 8310 	mrs	r3, PRIMASK
 8008f4c:	613b      	str	r3, [r7, #16]
  return(result);
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d105      	bne.n	8008f60 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008f54:	f3ef 8311 	mrs	r3, BASEPRI
 8008f58:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d026      	beq.n	8008fae <osSemaphoreAcquire+0x92>
 8008f60:	4b1f      	ldr	r3, [pc, #124]	; (8008fe0 <osSemaphoreAcquire+0xc4>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	d122      	bne.n	8008fae <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d003      	beq.n	8008f76 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8008f6e:	f06f 0303 	mvn.w	r3, #3
 8008f72:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8008f74:	e02d      	b.n	8008fd2 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8008f76:	2300      	movs	r3, #0
 8008f78:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008f7a:	f107 0308 	add.w	r3, r7, #8
 8008f7e:	461a      	mov	r2, r3
 8008f80:	2100      	movs	r1, #0
 8008f82:	69b8      	ldr	r0, [r7, #24]
 8008f84:	f001 f950 	bl	800a228 <xQueueReceiveFromISR>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d003      	beq.n	8008f96 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8008f8e:	f06f 0302 	mvn.w	r3, #2
 8008f92:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8008f94:	e01d      	b.n	8008fd2 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d01a      	beq.n	8008fd2 <osSemaphoreAcquire+0xb6>
 8008f9c:	4b11      	ldr	r3, [pc, #68]	; (8008fe4 <osSemaphoreAcquire+0xc8>)
 8008f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fa2:	601a      	str	r2, [r3, #0]
 8008fa4:	f3bf 8f4f 	dsb	sy
 8008fa8:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8008fac:	e011      	b.n	8008fd2 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008fae:	6839      	ldr	r1, [r7, #0]
 8008fb0:	69b8      	ldr	r0, [r7, #24]
 8008fb2:	f001 f82d 	bl	800a010 <xQueueSemaphoreTake>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d00b      	beq.n	8008fd4 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d003      	beq.n	8008fca <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8008fc2:	f06f 0301 	mvn.w	r3, #1
 8008fc6:	61fb      	str	r3, [r7, #28]
 8008fc8:	e004      	b.n	8008fd4 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8008fca:	f06f 0302 	mvn.w	r3, #2
 8008fce:	61fb      	str	r3, [r7, #28]
 8008fd0:	e000      	b.n	8008fd4 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8008fd2:	bf00      	nop
      }
    }
  }

  return (stat);
 8008fd4:	69fb      	ldr	r3, [r7, #28]
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3720      	adds	r7, #32
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	20001968 	.word	0x20001968
 8008fe4:	e000ed04 	.word	0xe000ed04

08008fe8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b088      	sub	sp, #32
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8008ff8:	69bb      	ldr	r3, [r7, #24]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d103      	bne.n	8009006 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008ffe:	f06f 0303 	mvn.w	r3, #3
 8009002:	61fb      	str	r3, [r7, #28]
 8009004:	e03e      	b.n	8009084 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009006:	f3ef 8305 	mrs	r3, IPSR
 800900a:	617b      	str	r3, [r7, #20]
  return(result);
 800900c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800900e:	2b00      	cmp	r3, #0
 8009010:	d10f      	bne.n	8009032 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009012:	f3ef 8310 	mrs	r3, PRIMASK
 8009016:	613b      	str	r3, [r7, #16]
  return(result);
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d105      	bne.n	800902a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800901e:	f3ef 8311 	mrs	r3, BASEPRI
 8009022:	60fb      	str	r3, [r7, #12]
  return(result);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d01e      	beq.n	8009068 <osSemaphoreRelease+0x80>
 800902a:	4b19      	ldr	r3, [pc, #100]	; (8009090 <osSemaphoreRelease+0xa8>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2b02      	cmp	r3, #2
 8009030:	d11a      	bne.n	8009068 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8009032:	2300      	movs	r3, #0
 8009034:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009036:	f107 0308 	add.w	r3, r7, #8
 800903a:	4619      	mov	r1, r3
 800903c:	69b8      	ldr	r0, [r7, #24]
 800903e:	f000 fe79 	bl	8009d34 <xQueueGiveFromISR>
 8009042:	4603      	mov	r3, r0
 8009044:	2b01      	cmp	r3, #1
 8009046:	d003      	beq.n	8009050 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8009048:	f06f 0302 	mvn.w	r3, #2
 800904c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800904e:	e018      	b.n	8009082 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d015      	beq.n	8009082 <osSemaphoreRelease+0x9a>
 8009056:	4b0f      	ldr	r3, [pc, #60]	; (8009094 <osSemaphoreRelease+0xac>)
 8009058:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800905c:	601a      	str	r2, [r3, #0]
 800905e:	f3bf 8f4f 	dsb	sy
 8009062:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009066:	e00c      	b.n	8009082 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009068:	2300      	movs	r3, #0
 800906a:	2200      	movs	r2, #0
 800906c:	2100      	movs	r1, #0
 800906e:	69b8      	ldr	r0, [r7, #24]
 8009070:	f000 fcca 	bl	8009a08 <xQueueGenericSend>
 8009074:	4603      	mov	r3, r0
 8009076:	2b01      	cmp	r3, #1
 8009078:	d004      	beq.n	8009084 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800907a:	f06f 0302 	mvn.w	r3, #2
 800907e:	61fb      	str	r3, [r7, #28]
 8009080:	e000      	b.n	8009084 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009082:	bf00      	nop
    }
  }

  return (stat);
 8009084:	69fb      	ldr	r3, [r7, #28]
}
 8009086:	4618      	mov	r0, r3
 8009088:	3720      	adds	r7, #32
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
 8009090:	20001968 	.word	0x20001968
 8009094:	e000ed04 	.word	0xe000ed04

08009098 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009098:	b580      	push	{r7, lr}
 800909a:	b08c      	sub	sp, #48	; 0x30
 800909c:	af02      	add	r7, sp, #8
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80090a4:	2300      	movs	r3, #0
 80090a6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090a8:	f3ef 8305 	mrs	r3, IPSR
 80090ac:	61bb      	str	r3, [r7, #24]
  return(result);
 80090ae:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d16f      	bne.n	8009194 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090b4:	f3ef 8310 	mrs	r3, PRIMASK
 80090b8:	617b      	str	r3, [r7, #20]
  return(result);
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d105      	bne.n	80090cc <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80090c0:	f3ef 8311 	mrs	r3, BASEPRI
 80090c4:	613b      	str	r3, [r7, #16]
  return(result);
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d003      	beq.n	80090d4 <osMessageQueueNew+0x3c>
 80090cc:	4b34      	ldr	r3, [pc, #208]	; (80091a0 <osMessageQueueNew+0x108>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	2b02      	cmp	r3, #2
 80090d2:	d05f      	beq.n	8009194 <osMessageQueueNew+0xfc>
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d05c      	beq.n	8009194 <osMessageQueueNew+0xfc>
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d059      	beq.n	8009194 <osMessageQueueNew+0xfc>
    mem = -1;
 80090e0:	f04f 33ff 	mov.w	r3, #4294967295
 80090e4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d029      	beq.n	8009140 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d012      	beq.n	800911a <osMessageQueueNew+0x82>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	68db      	ldr	r3, [r3, #12]
 80090f8:	2b4f      	cmp	r3, #79	; 0x4f
 80090fa:	d90e      	bls.n	800911a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009100:	2b00      	cmp	r3, #0
 8009102:	d00a      	beq.n	800911a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	695a      	ldr	r2, [r3, #20]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	68b9      	ldr	r1, [r7, #8]
 800910c:	fb01 f303 	mul.w	r3, r1, r3
 8009110:	429a      	cmp	r2, r3
 8009112:	d302      	bcc.n	800911a <osMessageQueueNew+0x82>
        mem = 1;
 8009114:	2301      	movs	r3, #1
 8009116:	623b      	str	r3, [r7, #32]
 8009118:	e014      	b.n	8009144 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d110      	bne.n	8009144 <osMessageQueueNew+0xac>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d10c      	bne.n	8009144 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800912e:	2b00      	cmp	r3, #0
 8009130:	d108      	bne.n	8009144 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	695b      	ldr	r3, [r3, #20]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d104      	bne.n	8009144 <osMessageQueueNew+0xac>
          mem = 0;
 800913a:	2300      	movs	r3, #0
 800913c:	623b      	str	r3, [r7, #32]
 800913e:	e001      	b.n	8009144 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8009140:	2300      	movs	r3, #0
 8009142:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009144:	6a3b      	ldr	r3, [r7, #32]
 8009146:	2b01      	cmp	r3, #1
 8009148:	d10b      	bne.n	8009162 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	691a      	ldr	r2, [r3, #16]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	2100      	movs	r1, #0
 8009154:	9100      	str	r1, [sp, #0]
 8009156:	68b9      	ldr	r1, [r7, #8]
 8009158:	68f8      	ldr	r0, [r7, #12]
 800915a:	f000 fa59 	bl	8009610 <xQueueGenericCreateStatic>
 800915e:	6278      	str	r0, [r7, #36]	; 0x24
 8009160:	e008      	b.n	8009174 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8009162:	6a3b      	ldr	r3, [r7, #32]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d105      	bne.n	8009174 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8009168:	2200      	movs	r2, #0
 800916a:	68b9      	ldr	r1, [r7, #8]
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	f000 fac7 	bl	8009700 <xQueueGenericCreate>
 8009172:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00c      	beq.n	8009194 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d003      	beq.n	8009188 <osMessageQueueNew+0xf0>
        name = attr->name;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	61fb      	str	r3, [r7, #28]
 8009186:	e001      	b.n	800918c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8009188:	2300      	movs	r3, #0
 800918a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800918c:	69f9      	ldr	r1, [r7, #28]
 800918e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009190:	f001 fa16 	bl	800a5c0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009196:	4618      	mov	r0, r3
 8009198:	3728      	adds	r7, #40	; 0x28
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
 800919e:	bf00      	nop
 80091a0:	20001968 	.word	0x20001968

080091a4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b08a      	sub	sp, #40	; 0x28
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	603b      	str	r3, [r7, #0]
 80091b0:	4613      	mov	r3, r2
 80091b2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80091b8:	2300      	movs	r3, #0
 80091ba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091bc:	f3ef 8305 	mrs	r3, IPSR
 80091c0:	61fb      	str	r3, [r7, #28]
  return(result);
 80091c2:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d10f      	bne.n	80091e8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091c8:	f3ef 8310 	mrs	r3, PRIMASK
 80091cc:	61bb      	str	r3, [r7, #24]
  return(result);
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d105      	bne.n	80091e0 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80091d4:	f3ef 8311 	mrs	r3, BASEPRI
 80091d8:	617b      	str	r3, [r7, #20]
  return(result);
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d02c      	beq.n	800923a <osMessageQueuePut+0x96>
 80091e0:	4b28      	ldr	r3, [pc, #160]	; (8009284 <osMessageQueuePut+0xe0>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2b02      	cmp	r3, #2
 80091e6:	d128      	bne.n	800923a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80091e8:	6a3b      	ldr	r3, [r7, #32]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d005      	beq.n	80091fa <osMessageQueuePut+0x56>
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d002      	beq.n	80091fa <osMessageQueuePut+0x56>
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d003      	beq.n	8009202 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80091fa:	f06f 0303 	mvn.w	r3, #3
 80091fe:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009200:	e039      	b.n	8009276 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8009202:	2300      	movs	r3, #0
 8009204:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009206:	f107 0210 	add.w	r2, r7, #16
 800920a:	2300      	movs	r3, #0
 800920c:	68b9      	ldr	r1, [r7, #8]
 800920e:	6a38      	ldr	r0, [r7, #32]
 8009210:	f000 fcf8 	bl	8009c04 <xQueueGenericSendFromISR>
 8009214:	4603      	mov	r3, r0
 8009216:	2b01      	cmp	r3, #1
 8009218:	d003      	beq.n	8009222 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800921a:	f06f 0302 	mvn.w	r3, #2
 800921e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009220:	e029      	b.n	8009276 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d026      	beq.n	8009276 <osMessageQueuePut+0xd2>
 8009228:	4b17      	ldr	r3, [pc, #92]	; (8009288 <osMessageQueuePut+0xe4>)
 800922a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800922e:	601a      	str	r2, [r3, #0]
 8009230:	f3bf 8f4f 	dsb	sy
 8009234:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009238:	e01d      	b.n	8009276 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800923a:	6a3b      	ldr	r3, [r7, #32]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d002      	beq.n	8009246 <osMessageQueuePut+0xa2>
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d103      	bne.n	800924e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8009246:	f06f 0303 	mvn.w	r3, #3
 800924a:	627b      	str	r3, [r7, #36]	; 0x24
 800924c:	e014      	b.n	8009278 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800924e:	2300      	movs	r3, #0
 8009250:	683a      	ldr	r2, [r7, #0]
 8009252:	68b9      	ldr	r1, [r7, #8]
 8009254:	6a38      	ldr	r0, [r7, #32]
 8009256:	f000 fbd7 	bl	8009a08 <xQueueGenericSend>
 800925a:	4603      	mov	r3, r0
 800925c:	2b01      	cmp	r3, #1
 800925e:	d00b      	beq.n	8009278 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d003      	beq.n	800926e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8009266:	f06f 0301 	mvn.w	r3, #1
 800926a:	627b      	str	r3, [r7, #36]	; 0x24
 800926c:	e004      	b.n	8009278 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800926e:	f06f 0302 	mvn.w	r3, #2
 8009272:	627b      	str	r3, [r7, #36]	; 0x24
 8009274:	e000      	b.n	8009278 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009276:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8009278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800927a:	4618      	mov	r0, r3
 800927c:	3728      	adds	r7, #40	; 0x28
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	20001968 	.word	0x20001968
 8009288:	e000ed04 	.word	0xe000ed04

0800928c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800928c:	b580      	push	{r7, lr}
 800928e:	b08a      	sub	sp, #40	; 0x28
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	607a      	str	r2, [r7, #4]
 8009298:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800929e:	2300      	movs	r3, #0
 80092a0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092a2:	f3ef 8305 	mrs	r3, IPSR
 80092a6:	61fb      	str	r3, [r7, #28]
  return(result);
 80092a8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d10f      	bne.n	80092ce <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092ae:	f3ef 8310 	mrs	r3, PRIMASK
 80092b2:	61bb      	str	r3, [r7, #24]
  return(result);
 80092b4:	69bb      	ldr	r3, [r7, #24]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d105      	bne.n	80092c6 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80092ba:	f3ef 8311 	mrs	r3, BASEPRI
 80092be:	617b      	str	r3, [r7, #20]
  return(result);
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d02c      	beq.n	8009320 <osMessageQueueGet+0x94>
 80092c6:	4b28      	ldr	r3, [pc, #160]	; (8009368 <osMessageQueueGet+0xdc>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2b02      	cmp	r3, #2
 80092cc:	d128      	bne.n	8009320 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80092ce:	6a3b      	ldr	r3, [r7, #32]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d005      	beq.n	80092e0 <osMessageQueueGet+0x54>
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d002      	beq.n	80092e0 <osMessageQueueGet+0x54>
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d003      	beq.n	80092e8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80092e0:	f06f 0303 	mvn.w	r3, #3
 80092e4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80092e6:	e038      	b.n	800935a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80092e8:	2300      	movs	r3, #0
 80092ea:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80092ec:	f107 0310 	add.w	r3, r7, #16
 80092f0:	461a      	mov	r2, r3
 80092f2:	68b9      	ldr	r1, [r7, #8]
 80092f4:	6a38      	ldr	r0, [r7, #32]
 80092f6:	f000 ff97 	bl	800a228 <xQueueReceiveFromISR>
 80092fa:	4603      	mov	r3, r0
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d003      	beq.n	8009308 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8009300:	f06f 0302 	mvn.w	r3, #2
 8009304:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009306:	e028      	b.n	800935a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d025      	beq.n	800935a <osMessageQueueGet+0xce>
 800930e:	4b17      	ldr	r3, [pc, #92]	; (800936c <osMessageQueueGet+0xe0>)
 8009310:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009314:	601a      	str	r2, [r3, #0]
 8009316:	f3bf 8f4f 	dsb	sy
 800931a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800931e:	e01c      	b.n	800935a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009320:	6a3b      	ldr	r3, [r7, #32]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d002      	beq.n	800932c <osMessageQueueGet+0xa0>
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d103      	bne.n	8009334 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800932c:	f06f 0303 	mvn.w	r3, #3
 8009330:	627b      	str	r3, [r7, #36]	; 0x24
 8009332:	e013      	b.n	800935c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009334:	683a      	ldr	r2, [r7, #0]
 8009336:	68b9      	ldr	r1, [r7, #8]
 8009338:	6a38      	ldr	r0, [r7, #32]
 800933a:	f000 fd89 	bl	8009e50 <xQueueReceive>
 800933e:	4603      	mov	r3, r0
 8009340:	2b01      	cmp	r3, #1
 8009342:	d00b      	beq.n	800935c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d003      	beq.n	8009352 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800934a:	f06f 0301 	mvn.w	r3, #1
 800934e:	627b      	str	r3, [r7, #36]	; 0x24
 8009350:	e004      	b.n	800935c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8009352:	f06f 0302 	mvn.w	r3, #2
 8009356:	627b      	str	r3, [r7, #36]	; 0x24
 8009358:	e000      	b.n	800935c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800935a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800935c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800935e:	4618      	mov	r0, r3
 8009360:	3728      	adds	r7, #40	; 0x28
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
 8009366:	bf00      	nop
 8009368:	20001968 	.word	0x20001968
 800936c:	e000ed04 	.word	0xe000ed04

08009370 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009370:	b480      	push	{r7}
 8009372:	b085      	sub	sp, #20
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	4a07      	ldr	r2, [pc, #28]	; (800939c <vApplicationGetIdleTaskMemory+0x2c>)
 8009380:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	4a06      	ldr	r2, [pc, #24]	; (80093a0 <vApplicationGetIdleTaskMemory+0x30>)
 8009386:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2280      	movs	r2, #128	; 0x80
 800938c:	601a      	str	r2, [r3, #0]
}
 800938e:	bf00      	nop
 8009390:	3714      	adds	r7, #20
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	2000196c 	.word	0x2000196c
 80093a0:	200019c8 	.word	0x200019c8

080093a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80093a4:	b480      	push	{r7}
 80093a6:	b085      	sub	sp, #20
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	4a07      	ldr	r2, [pc, #28]	; (80093d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80093b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	4a06      	ldr	r2, [pc, #24]	; (80093d4 <vApplicationGetTimerTaskMemory+0x30>)
 80093ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80093c2:	601a      	str	r2, [r3, #0]
}
 80093c4:	bf00      	nop
 80093c6:	3714      	adds	r7, #20
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr
 80093d0:	20001bc8 	.word	0x20001bc8
 80093d4:	20001c24 	.word	0x20001c24

080093d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f103 0208 	add.w	r2, r3, #8
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f04f 32ff 	mov.w	r2, #4294967295
 80093f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f103 0208 	add.w	r2, r3, #8
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f103 0208 	add.w	r2, r3, #8
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800940c:	bf00      	nop
 800940e:	370c      	adds	r7, #12
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009426:	bf00      	nop
 8009428:	370c      	adds	r7, #12
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr

08009432 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009432:	b480      	push	{r7}
 8009434:	b085      	sub	sp, #20
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
 800943a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	68fa      	ldr	r2, [r7, #12]
 8009446:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	689a      	ldr	r2, [r3, #8]
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	683a      	ldr	r2, [r7, #0]
 8009456:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	683a      	ldr	r2, [r7, #0]
 800945c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	1c5a      	adds	r2, r3, #1
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	601a      	str	r2, [r3, #0]
}
 800946e:	bf00      	nop
 8009470:	3714      	adds	r7, #20
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr

0800947a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800947a:	b480      	push	{r7}
 800947c:	b085      	sub	sp, #20
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
 8009482:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009490:	d103      	bne.n	800949a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	691b      	ldr	r3, [r3, #16]
 8009496:	60fb      	str	r3, [r7, #12]
 8009498:	e00c      	b.n	80094b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	3308      	adds	r3, #8
 800949e:	60fb      	str	r3, [r7, #12]
 80094a0:	e002      	b.n	80094a8 <vListInsert+0x2e>
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	60fb      	str	r3, [r7, #12]
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	68ba      	ldr	r2, [r7, #8]
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d2f6      	bcs.n	80094a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	685a      	ldr	r2, [r3, #4]
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	683a      	ldr	r2, [r7, #0]
 80094c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	68fa      	ldr	r2, [r7, #12]
 80094c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	683a      	ldr	r2, [r7, #0]
 80094ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	1c5a      	adds	r2, r3, #1
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	601a      	str	r2, [r3, #0]
}
 80094e0:	bf00      	nop
 80094e2:	3714      	adds	r7, #20
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80094ec:	b480      	push	{r7}
 80094ee:	b085      	sub	sp, #20
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	691b      	ldr	r3, [r3, #16]
 80094f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	6892      	ldr	r2, [r2, #8]
 8009502:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	689b      	ldr	r3, [r3, #8]
 8009508:	687a      	ldr	r2, [r7, #4]
 800950a:	6852      	ldr	r2, [r2, #4]
 800950c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	429a      	cmp	r2, r3
 8009516:	d103      	bne.n	8009520 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	689a      	ldr	r2, [r3, #8]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2200      	movs	r2, #0
 8009524:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	1e5a      	subs	r2, r3, #1
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
}
 8009534:	4618      	mov	r0, r3
 8009536:	3714      	adds	r7, #20
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d10a      	bne.n	800956a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009558:	f383 8811 	msr	BASEPRI, r3
 800955c:	f3bf 8f6f 	isb	sy
 8009560:	f3bf 8f4f 	dsb	sy
 8009564:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009566:	bf00      	nop
 8009568:	e7fe      	b.n	8009568 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800956a:	f002 fd4b 	bl	800c004 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009576:	68f9      	ldr	r1, [r7, #12]
 8009578:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800957a:	fb01 f303 	mul.w	r3, r1, r3
 800957e:	441a      	add	r2, r3
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2200      	movs	r2, #0
 8009588:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800959a:	3b01      	subs	r3, #1
 800959c:	68f9      	ldr	r1, [r7, #12]
 800959e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80095a0:	fb01 f303 	mul.w	r3, r1, r3
 80095a4:	441a      	add	r2, r3
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	22ff      	movs	r2, #255	; 0xff
 80095ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	22ff      	movs	r2, #255	; 0xff
 80095b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d114      	bne.n	80095ea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	691b      	ldr	r3, [r3, #16]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d01a      	beq.n	80095fe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	3310      	adds	r3, #16
 80095cc:	4618      	mov	r0, r3
 80095ce:	f001 fcf1 	bl	800afb4 <xTaskRemoveFromEventList>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d012      	beq.n	80095fe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80095d8:	4b0c      	ldr	r3, [pc, #48]	; (800960c <xQueueGenericReset+0xcc>)
 80095da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095de:	601a      	str	r2, [r3, #0]
 80095e0:	f3bf 8f4f 	dsb	sy
 80095e4:	f3bf 8f6f 	isb	sy
 80095e8:	e009      	b.n	80095fe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	3310      	adds	r3, #16
 80095ee:	4618      	mov	r0, r3
 80095f0:	f7ff fef2 	bl	80093d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	3324      	adds	r3, #36	; 0x24
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7ff feed 	bl	80093d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80095fe:	f002 fd31 	bl	800c064 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009602:	2301      	movs	r3, #1
}
 8009604:	4618      	mov	r0, r3
 8009606:	3710      	adds	r7, #16
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}
 800960c:	e000ed04 	.word	0xe000ed04

08009610 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009610:	b580      	push	{r7, lr}
 8009612:	b08e      	sub	sp, #56	; 0x38
 8009614:	af02      	add	r7, sp, #8
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	60b9      	str	r1, [r7, #8]
 800961a:	607a      	str	r2, [r7, #4]
 800961c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d10a      	bne.n	800963a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009628:	f383 8811 	msr	BASEPRI, r3
 800962c:	f3bf 8f6f 	isb	sy
 8009630:	f3bf 8f4f 	dsb	sy
 8009634:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009636:	bf00      	nop
 8009638:	e7fe      	b.n	8009638 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d10a      	bne.n	8009656 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009644:	f383 8811 	msr	BASEPRI, r3
 8009648:	f3bf 8f6f 	isb	sy
 800964c:	f3bf 8f4f 	dsb	sy
 8009650:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009652:	bf00      	nop
 8009654:	e7fe      	b.n	8009654 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d002      	beq.n	8009662 <xQueueGenericCreateStatic+0x52>
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d001      	beq.n	8009666 <xQueueGenericCreateStatic+0x56>
 8009662:	2301      	movs	r3, #1
 8009664:	e000      	b.n	8009668 <xQueueGenericCreateStatic+0x58>
 8009666:	2300      	movs	r3, #0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d10a      	bne.n	8009682 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800966c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009670:	f383 8811 	msr	BASEPRI, r3
 8009674:	f3bf 8f6f 	isb	sy
 8009678:	f3bf 8f4f 	dsb	sy
 800967c:	623b      	str	r3, [r7, #32]
}
 800967e:	bf00      	nop
 8009680:	e7fe      	b.n	8009680 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d102      	bne.n	800968e <xQueueGenericCreateStatic+0x7e>
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d101      	bne.n	8009692 <xQueueGenericCreateStatic+0x82>
 800968e:	2301      	movs	r3, #1
 8009690:	e000      	b.n	8009694 <xQueueGenericCreateStatic+0x84>
 8009692:	2300      	movs	r3, #0
 8009694:	2b00      	cmp	r3, #0
 8009696:	d10a      	bne.n	80096ae <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800969c:	f383 8811 	msr	BASEPRI, r3
 80096a0:	f3bf 8f6f 	isb	sy
 80096a4:	f3bf 8f4f 	dsb	sy
 80096a8:	61fb      	str	r3, [r7, #28]
}
 80096aa:	bf00      	nop
 80096ac:	e7fe      	b.n	80096ac <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80096ae:	2350      	movs	r3, #80	; 0x50
 80096b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	2b50      	cmp	r3, #80	; 0x50
 80096b6:	d00a      	beq.n	80096ce <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80096b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096bc:	f383 8811 	msr	BASEPRI, r3
 80096c0:	f3bf 8f6f 	isb	sy
 80096c4:	f3bf 8f4f 	dsb	sy
 80096c8:	61bb      	str	r3, [r7, #24]
}
 80096ca:	bf00      	nop
 80096cc:	e7fe      	b.n	80096cc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80096ce:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80096d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d00d      	beq.n	80096f6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80096da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096dc:	2201      	movs	r2, #1
 80096de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80096e2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80096e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e8:	9300      	str	r3, [sp, #0]
 80096ea:	4613      	mov	r3, r2
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	68b9      	ldr	r1, [r7, #8]
 80096f0:	68f8      	ldr	r0, [r7, #12]
 80096f2:	f000 f845 	bl	8009780 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80096f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3730      	adds	r7, #48	; 0x30
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009700:	b580      	push	{r7, lr}
 8009702:	b08a      	sub	sp, #40	; 0x28
 8009704:	af02      	add	r7, sp, #8
 8009706:	60f8      	str	r0, [r7, #12]
 8009708:	60b9      	str	r1, [r7, #8]
 800970a:	4613      	mov	r3, r2
 800970c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d10a      	bne.n	800972a <xQueueGenericCreate+0x2a>
	__asm volatile
 8009714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009718:	f383 8811 	msr	BASEPRI, r3
 800971c:	f3bf 8f6f 	isb	sy
 8009720:	f3bf 8f4f 	dsb	sy
 8009724:	613b      	str	r3, [r7, #16]
}
 8009726:	bf00      	nop
 8009728:	e7fe      	b.n	8009728 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d102      	bne.n	8009736 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009730:	2300      	movs	r3, #0
 8009732:	61fb      	str	r3, [r7, #28]
 8009734:	e004      	b.n	8009740 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	68ba      	ldr	r2, [r7, #8]
 800973a:	fb02 f303 	mul.w	r3, r2, r3
 800973e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009740:	69fb      	ldr	r3, [r7, #28]
 8009742:	3350      	adds	r3, #80	; 0x50
 8009744:	4618      	mov	r0, r3
 8009746:	f002 fd7f 	bl	800c248 <pvPortMalloc>
 800974a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800974c:	69bb      	ldr	r3, [r7, #24]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d011      	beq.n	8009776 <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009752:	69bb      	ldr	r3, [r7, #24]
 8009754:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	3350      	adds	r3, #80	; 0x50
 800975a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800975c:	69bb      	ldr	r3, [r7, #24]
 800975e:	2200      	movs	r2, #0
 8009760:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009764:	79fa      	ldrb	r2, [r7, #7]
 8009766:	69bb      	ldr	r3, [r7, #24]
 8009768:	9300      	str	r3, [sp, #0]
 800976a:	4613      	mov	r3, r2
 800976c:	697a      	ldr	r2, [r7, #20]
 800976e:	68b9      	ldr	r1, [r7, #8]
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f000 f805 	bl	8009780 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009776:	69bb      	ldr	r3, [r7, #24]
	}
 8009778:	4618      	mov	r0, r3
 800977a:	3720      	adds	r7, #32
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	607a      	str	r2, [r7, #4]
 800978c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d103      	bne.n	800979c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009794:	69bb      	ldr	r3, [r7, #24]
 8009796:	69ba      	ldr	r2, [r7, #24]
 8009798:	601a      	str	r2, [r3, #0]
 800979a:	e002      	b.n	80097a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800979c:	69bb      	ldr	r3, [r7, #24]
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80097a2:	69bb      	ldr	r3, [r7, #24]
 80097a4:	68fa      	ldr	r2, [r7, #12]
 80097a6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80097a8:	69bb      	ldr	r3, [r7, #24]
 80097aa:	68ba      	ldr	r2, [r7, #8]
 80097ac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80097ae:	2101      	movs	r1, #1
 80097b0:	69b8      	ldr	r0, [r7, #24]
 80097b2:	f7ff fec5 	bl	8009540 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80097b6:	69bb      	ldr	r3, [r7, #24]
 80097b8:	78fa      	ldrb	r2, [r7, #3]
 80097ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80097be:	bf00      	nop
 80097c0:	3710      	adds	r7, #16
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b082      	sub	sp, #8
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d00e      	beq.n	80097f2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2200      	movs	r2, #0
 80097de:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80097e6:	2300      	movs	r3, #0
 80097e8:	2200      	movs	r2, #0
 80097ea:	2100      	movs	r1, #0
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 f90b 	bl	8009a08 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80097f2:	bf00      	nop
 80097f4:	3708      	adds	r7, #8
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}

080097fa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80097fa:	b580      	push	{r7, lr}
 80097fc:	b086      	sub	sp, #24
 80097fe:	af00      	add	r7, sp, #0
 8009800:	4603      	mov	r3, r0
 8009802:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009804:	2301      	movs	r3, #1
 8009806:	617b      	str	r3, [r7, #20]
 8009808:	2300      	movs	r3, #0
 800980a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800980c:	79fb      	ldrb	r3, [r7, #7]
 800980e:	461a      	mov	r2, r3
 8009810:	6939      	ldr	r1, [r7, #16]
 8009812:	6978      	ldr	r0, [r7, #20]
 8009814:	f7ff ff74 	bl	8009700 <xQueueGenericCreate>
 8009818:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800981a:	68f8      	ldr	r0, [r7, #12]
 800981c:	f7ff ffd3 	bl	80097c6 <prvInitialiseMutex>

		return xNewQueue;
 8009820:	68fb      	ldr	r3, [r7, #12]
	}
 8009822:	4618      	mov	r0, r3
 8009824:	3718      	adds	r7, #24
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800982a:	b580      	push	{r7, lr}
 800982c:	b088      	sub	sp, #32
 800982e:	af02      	add	r7, sp, #8
 8009830:	4603      	mov	r3, r0
 8009832:	6039      	str	r1, [r7, #0]
 8009834:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009836:	2301      	movs	r3, #1
 8009838:	617b      	str	r3, [r7, #20]
 800983a:	2300      	movs	r3, #0
 800983c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800983e:	79fb      	ldrb	r3, [r7, #7]
 8009840:	9300      	str	r3, [sp, #0]
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	2200      	movs	r2, #0
 8009846:	6939      	ldr	r1, [r7, #16]
 8009848:	6978      	ldr	r0, [r7, #20]
 800984a:	f7ff fee1 	bl	8009610 <xQueueGenericCreateStatic>
 800984e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009850:	68f8      	ldr	r0, [r7, #12]
 8009852:	f7ff ffb8 	bl	80097c6 <prvInitialiseMutex>

		return xNewQueue;
 8009856:	68fb      	ldr	r3, [r7, #12]
	}
 8009858:	4618      	mov	r0, r3
 800985a:	3718      	adds	r7, #24
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009860:	b590      	push	{r4, r7, lr}
 8009862:	b087      	sub	sp, #28
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d10a      	bne.n	8009888 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8009872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009876:	f383 8811 	msr	BASEPRI, r3
 800987a:	f3bf 8f6f 	isb	sy
 800987e:	f3bf 8f4f 	dsb	sy
 8009882:	60fb      	str	r3, [r7, #12]
}
 8009884:	bf00      	nop
 8009886:	e7fe      	b.n	8009886 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	689c      	ldr	r4, [r3, #8]
 800988c:	f001 fd50 	bl	800b330 <xTaskGetCurrentTaskHandle>
 8009890:	4603      	mov	r3, r0
 8009892:	429c      	cmp	r4, r3
 8009894:	d111      	bne.n	80098ba <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	68db      	ldr	r3, [r3, #12]
 800989a:	1e5a      	subs	r2, r3, #1
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d105      	bne.n	80098b4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80098a8:	2300      	movs	r3, #0
 80098aa:	2200      	movs	r2, #0
 80098ac:	2100      	movs	r1, #0
 80098ae:	6938      	ldr	r0, [r7, #16]
 80098b0:	f000 f8aa 	bl	8009a08 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80098b4:	2301      	movs	r3, #1
 80098b6:	617b      	str	r3, [r7, #20]
 80098b8:	e001      	b.n	80098be <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80098ba:	2300      	movs	r3, #0
 80098bc:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80098be:	697b      	ldr	r3, [r7, #20]
	}
 80098c0:	4618      	mov	r0, r3
 80098c2:	371c      	adds	r7, #28
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd90      	pop	{r4, r7, pc}

080098c8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80098c8:	b590      	push	{r4, r7, lr}
 80098ca:	b087      	sub	sp, #28
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d10a      	bne.n	80098f2 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80098dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e0:	f383 8811 	msr	BASEPRI, r3
 80098e4:	f3bf 8f6f 	isb	sy
 80098e8:	f3bf 8f4f 	dsb	sy
 80098ec:	60fb      	str	r3, [r7, #12]
}
 80098ee:	bf00      	nop
 80098f0:	e7fe      	b.n	80098f0 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	689c      	ldr	r4, [r3, #8]
 80098f6:	f001 fd1b 	bl	800b330 <xTaskGetCurrentTaskHandle>
 80098fa:	4603      	mov	r3, r0
 80098fc:	429c      	cmp	r4, r3
 80098fe:	d107      	bne.n	8009910 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	1c5a      	adds	r2, r3, #1
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800990a:	2301      	movs	r3, #1
 800990c:	617b      	str	r3, [r7, #20]
 800990e:	e00c      	b.n	800992a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009910:	6839      	ldr	r1, [r7, #0]
 8009912:	6938      	ldr	r0, [r7, #16]
 8009914:	f000 fb7c 	bl	800a010 <xQueueSemaphoreTake>
 8009918:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d004      	beq.n	800992a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	1c5a      	adds	r2, r3, #1
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800992a:	697b      	ldr	r3, [r7, #20]
	}
 800992c:	4618      	mov	r0, r3
 800992e:	371c      	adds	r7, #28
 8009930:	46bd      	mov	sp, r7
 8009932:	bd90      	pop	{r4, r7, pc}

08009934 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009934:	b580      	push	{r7, lr}
 8009936:	b08a      	sub	sp, #40	; 0x28
 8009938:	af02      	add	r7, sp, #8
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d10a      	bne.n	800995c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994a:	f383 8811 	msr	BASEPRI, r3
 800994e:	f3bf 8f6f 	isb	sy
 8009952:	f3bf 8f4f 	dsb	sy
 8009956:	61bb      	str	r3, [r7, #24]
}
 8009958:	bf00      	nop
 800995a:	e7fe      	b.n	800995a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800995c:	68ba      	ldr	r2, [r7, #8]
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	429a      	cmp	r2, r3
 8009962:	d90a      	bls.n	800997a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009968:	f383 8811 	msr	BASEPRI, r3
 800996c:	f3bf 8f6f 	isb	sy
 8009970:	f3bf 8f4f 	dsb	sy
 8009974:	617b      	str	r3, [r7, #20]
}
 8009976:	bf00      	nop
 8009978:	e7fe      	b.n	8009978 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800997a:	2302      	movs	r3, #2
 800997c:	9300      	str	r3, [sp, #0]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2200      	movs	r2, #0
 8009982:	2100      	movs	r1, #0
 8009984:	68f8      	ldr	r0, [r7, #12]
 8009986:	f7ff fe43 	bl	8009610 <xQueueGenericCreateStatic>
 800998a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d002      	beq.n	8009998 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009992:	69fb      	ldr	r3, [r7, #28]
 8009994:	68ba      	ldr	r2, [r7, #8]
 8009996:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009998:	69fb      	ldr	r3, [r7, #28]
	}
 800999a:	4618      	mov	r0, r3
 800999c:	3720      	adds	r7, #32
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80099a2:	b580      	push	{r7, lr}
 80099a4:	b086      	sub	sp, #24
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
 80099aa:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d10a      	bne.n	80099c8 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80099b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b6:	f383 8811 	msr	BASEPRI, r3
 80099ba:	f3bf 8f6f 	isb	sy
 80099be:	f3bf 8f4f 	dsb	sy
 80099c2:	613b      	str	r3, [r7, #16]
}
 80099c4:	bf00      	nop
 80099c6:	e7fe      	b.n	80099c6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80099c8:	683a      	ldr	r2, [r7, #0]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	429a      	cmp	r2, r3
 80099ce:	d90a      	bls.n	80099e6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80099d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d4:	f383 8811 	msr	BASEPRI, r3
 80099d8:	f3bf 8f6f 	isb	sy
 80099dc:	f3bf 8f4f 	dsb	sy
 80099e0:	60fb      	str	r3, [r7, #12]
}
 80099e2:	bf00      	nop
 80099e4:	e7fe      	b.n	80099e4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80099e6:	2202      	movs	r2, #2
 80099e8:	2100      	movs	r1, #0
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f7ff fe88 	bl	8009700 <xQueueGenericCreate>
 80099f0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d002      	beq.n	80099fe <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	683a      	ldr	r2, [r7, #0]
 80099fc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80099fe:	697b      	ldr	r3, [r7, #20]
	}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3718      	adds	r7, #24
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b08e      	sub	sp, #56	; 0x38
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	60b9      	str	r1, [r7, #8]
 8009a12:	607a      	str	r2, [r7, #4]
 8009a14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009a16:	2300      	movs	r3, #0
 8009a18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d10a      	bne.n	8009a3a <xQueueGenericSend+0x32>
	__asm volatile
 8009a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a28:	f383 8811 	msr	BASEPRI, r3
 8009a2c:	f3bf 8f6f 	isb	sy
 8009a30:	f3bf 8f4f 	dsb	sy
 8009a34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009a36:	bf00      	nop
 8009a38:	e7fe      	b.n	8009a38 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d103      	bne.n	8009a48 <xQueueGenericSend+0x40>
 8009a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d101      	bne.n	8009a4c <xQueueGenericSend+0x44>
 8009a48:	2301      	movs	r3, #1
 8009a4a:	e000      	b.n	8009a4e <xQueueGenericSend+0x46>
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d10a      	bne.n	8009a68 <xQueueGenericSend+0x60>
	__asm volatile
 8009a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a56:	f383 8811 	msr	BASEPRI, r3
 8009a5a:	f3bf 8f6f 	isb	sy
 8009a5e:	f3bf 8f4f 	dsb	sy
 8009a62:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009a64:	bf00      	nop
 8009a66:	e7fe      	b.n	8009a66 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	d103      	bne.n	8009a76 <xQueueGenericSend+0x6e>
 8009a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d101      	bne.n	8009a7a <xQueueGenericSend+0x72>
 8009a76:	2301      	movs	r3, #1
 8009a78:	e000      	b.n	8009a7c <xQueueGenericSend+0x74>
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d10a      	bne.n	8009a96 <xQueueGenericSend+0x8e>
	__asm volatile
 8009a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a84:	f383 8811 	msr	BASEPRI, r3
 8009a88:	f3bf 8f6f 	isb	sy
 8009a8c:	f3bf 8f4f 	dsb	sy
 8009a90:	623b      	str	r3, [r7, #32]
}
 8009a92:	bf00      	nop
 8009a94:	e7fe      	b.n	8009a94 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a96:	f001 fc5b 	bl	800b350 <xTaskGetSchedulerState>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d102      	bne.n	8009aa6 <xQueueGenericSend+0x9e>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d101      	bne.n	8009aaa <xQueueGenericSend+0xa2>
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e000      	b.n	8009aac <xQueueGenericSend+0xa4>
 8009aaa:	2300      	movs	r3, #0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d10a      	bne.n	8009ac6 <xQueueGenericSend+0xbe>
	__asm volatile
 8009ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab4:	f383 8811 	msr	BASEPRI, r3
 8009ab8:	f3bf 8f6f 	isb	sy
 8009abc:	f3bf 8f4f 	dsb	sy
 8009ac0:	61fb      	str	r3, [r7, #28]
}
 8009ac2:	bf00      	nop
 8009ac4:	e7fe      	b.n	8009ac4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009ac6:	f002 fa9d 	bl	800c004 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009acc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d302      	bcc.n	8009adc <xQueueGenericSend+0xd4>
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	2b02      	cmp	r3, #2
 8009ada:	d129      	bne.n	8009b30 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009adc:	683a      	ldr	r2, [r7, #0]
 8009ade:	68b9      	ldr	r1, [r7, #8]
 8009ae0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ae2:	f000 fc5c 	bl	800a39e <prvCopyDataToQueue>
 8009ae6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d010      	beq.n	8009b12 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af2:	3324      	adds	r3, #36	; 0x24
 8009af4:	4618      	mov	r0, r3
 8009af6:	f001 fa5d 	bl	800afb4 <xTaskRemoveFromEventList>
 8009afa:	4603      	mov	r3, r0
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d013      	beq.n	8009b28 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009b00:	4b3f      	ldr	r3, [pc, #252]	; (8009c00 <xQueueGenericSend+0x1f8>)
 8009b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b06:	601a      	str	r2, [r3, #0]
 8009b08:	f3bf 8f4f 	dsb	sy
 8009b0c:	f3bf 8f6f 	isb	sy
 8009b10:	e00a      	b.n	8009b28 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d007      	beq.n	8009b28 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009b18:	4b39      	ldr	r3, [pc, #228]	; (8009c00 <xQueueGenericSend+0x1f8>)
 8009b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b1e:	601a      	str	r2, [r3, #0]
 8009b20:	f3bf 8f4f 	dsb	sy
 8009b24:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009b28:	f002 fa9c 	bl	800c064 <vPortExitCritical>
				return pdPASS;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	e063      	b.n	8009bf8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d103      	bne.n	8009b3e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009b36:	f002 fa95 	bl	800c064 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	e05c      	b.n	8009bf8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d106      	bne.n	8009b52 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b44:	f107 0314 	add.w	r3, r7, #20
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f001 fa97 	bl	800b07c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b52:	f002 fa87 	bl	800c064 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b56:	f000 fff7 	bl	800ab48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b5a:	f002 fa53 	bl	800c004 <vPortEnterCritical>
 8009b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b64:	b25b      	sxtb	r3, r3
 8009b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b6a:	d103      	bne.n	8009b74 <xQueueGenericSend+0x16c>
 8009b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6e:	2200      	movs	r2, #0
 8009b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b7a:	b25b      	sxtb	r3, r3
 8009b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b80:	d103      	bne.n	8009b8a <xQueueGenericSend+0x182>
 8009b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b84:	2200      	movs	r2, #0
 8009b86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b8a:	f002 fa6b 	bl	800c064 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b8e:	1d3a      	adds	r2, r7, #4
 8009b90:	f107 0314 	add.w	r3, r7, #20
 8009b94:	4611      	mov	r1, r2
 8009b96:	4618      	mov	r0, r3
 8009b98:	f001 fa86 	bl	800b0a8 <xTaskCheckForTimeOut>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d124      	bne.n	8009bec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009ba2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ba4:	f000 fcf3 	bl	800a58e <prvIsQueueFull>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d018      	beq.n	8009be0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb0:	3310      	adds	r3, #16
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	4611      	mov	r1, r2
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f001 f9ac 	bl	800af14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009bbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009bbe:	f000 fc7e 	bl	800a4be <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009bc2:	f000 ffcf 	bl	800ab64 <xTaskResumeAll>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	f47f af7c 	bne.w	8009ac6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009bce:	4b0c      	ldr	r3, [pc, #48]	; (8009c00 <xQueueGenericSend+0x1f8>)
 8009bd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bd4:	601a      	str	r2, [r3, #0]
 8009bd6:	f3bf 8f4f 	dsb	sy
 8009bda:	f3bf 8f6f 	isb	sy
 8009bde:	e772      	b.n	8009ac6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009be0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009be2:	f000 fc6c 	bl	800a4be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009be6:	f000 ffbd 	bl	800ab64 <xTaskResumeAll>
 8009bea:	e76c      	b.n	8009ac6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009bec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009bee:	f000 fc66 	bl	800a4be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009bf2:	f000 ffb7 	bl	800ab64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009bf6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3738      	adds	r7, #56	; 0x38
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}
 8009c00:	e000ed04 	.word	0xe000ed04

08009c04 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b08e      	sub	sp, #56	; 0x38
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	60b9      	str	r1, [r7, #8]
 8009c0e:	607a      	str	r2, [r7, #4]
 8009c10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d10a      	bne.n	8009c32 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c20:	f383 8811 	msr	BASEPRI, r3
 8009c24:	f3bf 8f6f 	isb	sy
 8009c28:	f3bf 8f4f 	dsb	sy
 8009c2c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009c2e:	bf00      	nop
 8009c30:	e7fe      	b.n	8009c30 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d103      	bne.n	8009c40 <xQueueGenericSendFromISR+0x3c>
 8009c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d101      	bne.n	8009c44 <xQueueGenericSendFromISR+0x40>
 8009c40:	2301      	movs	r3, #1
 8009c42:	e000      	b.n	8009c46 <xQueueGenericSendFromISR+0x42>
 8009c44:	2300      	movs	r3, #0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d10a      	bne.n	8009c60 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c4e:	f383 8811 	msr	BASEPRI, r3
 8009c52:	f3bf 8f6f 	isb	sy
 8009c56:	f3bf 8f4f 	dsb	sy
 8009c5a:	623b      	str	r3, [r7, #32]
}
 8009c5c:	bf00      	nop
 8009c5e:	e7fe      	b.n	8009c5e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	2b02      	cmp	r3, #2
 8009c64:	d103      	bne.n	8009c6e <xQueueGenericSendFromISR+0x6a>
 8009c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d101      	bne.n	8009c72 <xQueueGenericSendFromISR+0x6e>
 8009c6e:	2301      	movs	r3, #1
 8009c70:	e000      	b.n	8009c74 <xQueueGenericSendFromISR+0x70>
 8009c72:	2300      	movs	r3, #0
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d10a      	bne.n	8009c8e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c7c:	f383 8811 	msr	BASEPRI, r3
 8009c80:	f3bf 8f6f 	isb	sy
 8009c84:	f3bf 8f4f 	dsb	sy
 8009c88:	61fb      	str	r3, [r7, #28]
}
 8009c8a:	bf00      	nop
 8009c8c:	e7fe      	b.n	8009c8c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c8e:	f002 fa9b 	bl	800c1c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009c92:	f3ef 8211 	mrs	r2, BASEPRI
 8009c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9a:	f383 8811 	msr	BASEPRI, r3
 8009c9e:	f3bf 8f6f 	isb	sy
 8009ca2:	f3bf 8f4f 	dsb	sy
 8009ca6:	61ba      	str	r2, [r7, #24]
 8009ca8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009caa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009cac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d302      	bcc.n	8009cc0 <xQueueGenericSendFromISR+0xbc>
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	2b02      	cmp	r3, #2
 8009cbe:	d12c      	bne.n	8009d1a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009cca:	683a      	ldr	r2, [r7, #0]
 8009ccc:	68b9      	ldr	r1, [r7, #8]
 8009cce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009cd0:	f000 fb65 	bl	800a39e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009cd4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cdc:	d112      	bne.n	8009d04 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d016      	beq.n	8009d14 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce8:	3324      	adds	r3, #36	; 0x24
 8009cea:	4618      	mov	r0, r3
 8009cec:	f001 f962 	bl	800afb4 <xTaskRemoveFromEventList>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d00e      	beq.n	8009d14 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d00b      	beq.n	8009d14 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2201      	movs	r2, #1
 8009d00:	601a      	str	r2, [r3, #0]
 8009d02:	e007      	b.n	8009d14 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009d04:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009d08:	3301      	adds	r3, #1
 8009d0a:	b2db      	uxtb	r3, r3
 8009d0c:	b25a      	sxtb	r2, r3
 8009d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009d14:	2301      	movs	r3, #1
 8009d16:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009d18:	e001      	b.n	8009d1e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	637b      	str	r3, [r7, #52]	; 0x34
 8009d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d20:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009d28:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3738      	adds	r7, #56	; 0x38
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b08e      	sub	sp, #56	; 0x38
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d10a      	bne.n	8009d5e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d4c:	f383 8811 	msr	BASEPRI, r3
 8009d50:	f3bf 8f6f 	isb	sy
 8009d54:	f3bf 8f4f 	dsb	sy
 8009d58:	623b      	str	r3, [r7, #32]
}
 8009d5a:	bf00      	nop
 8009d5c:	e7fe      	b.n	8009d5c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d00a      	beq.n	8009d7c <xQueueGiveFromISR+0x48>
	__asm volatile
 8009d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d6a:	f383 8811 	msr	BASEPRI, r3
 8009d6e:	f3bf 8f6f 	isb	sy
 8009d72:	f3bf 8f4f 	dsb	sy
 8009d76:	61fb      	str	r3, [r7, #28]
}
 8009d78:	bf00      	nop
 8009d7a:	e7fe      	b.n	8009d7a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d103      	bne.n	8009d8c <xQueueGiveFromISR+0x58>
 8009d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d86:	689b      	ldr	r3, [r3, #8]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d101      	bne.n	8009d90 <xQueueGiveFromISR+0x5c>
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	e000      	b.n	8009d92 <xQueueGiveFromISR+0x5e>
 8009d90:	2300      	movs	r3, #0
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d10a      	bne.n	8009dac <xQueueGiveFromISR+0x78>
	__asm volatile
 8009d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d9a:	f383 8811 	msr	BASEPRI, r3
 8009d9e:	f3bf 8f6f 	isb	sy
 8009da2:	f3bf 8f4f 	dsb	sy
 8009da6:	61bb      	str	r3, [r7, #24]
}
 8009da8:	bf00      	nop
 8009daa:	e7fe      	b.n	8009daa <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009dac:	f002 fa0c 	bl	800c1c8 <vPortValidateInterruptPriority>
	__asm volatile
 8009db0:	f3ef 8211 	mrs	r2, BASEPRI
 8009db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db8:	f383 8811 	msr	BASEPRI, r3
 8009dbc:	f3bf 8f6f 	isb	sy
 8009dc0:	f3bf 8f4f 	dsb	sy
 8009dc4:	617a      	str	r2, [r7, #20]
 8009dc6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009dc8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009dca:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dd0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d22b      	bcs.n	8009e34 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de8:	1c5a      	adds	r2, r3, #1
 8009dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dec:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009dee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009df6:	d112      	bne.n	8009e1e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d016      	beq.n	8009e2e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e02:	3324      	adds	r3, #36	; 0x24
 8009e04:	4618      	mov	r0, r3
 8009e06:	f001 f8d5 	bl	800afb4 <xTaskRemoveFromEventList>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d00e      	beq.n	8009e2e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d00b      	beq.n	8009e2e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	2201      	movs	r2, #1
 8009e1a:	601a      	str	r2, [r3, #0]
 8009e1c:	e007      	b.n	8009e2e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009e1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e22:	3301      	adds	r3, #1
 8009e24:	b2db      	uxtb	r3, r3
 8009e26:	b25a      	sxtb	r2, r3
 8009e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	637b      	str	r3, [r7, #52]	; 0x34
 8009e32:	e001      	b.n	8009e38 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009e34:	2300      	movs	r3, #0
 8009e36:	637b      	str	r3, [r7, #52]	; 0x34
 8009e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e3a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f383 8811 	msr	BASEPRI, r3
}
 8009e42:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3738      	adds	r7, #56	; 0x38
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
	...

08009e50 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b08c      	sub	sp, #48	; 0x30
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	60f8      	str	r0, [r7, #12]
 8009e58:	60b9      	str	r1, [r7, #8]
 8009e5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d10a      	bne.n	8009e80 <xQueueReceive+0x30>
	__asm volatile
 8009e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e6e:	f383 8811 	msr	BASEPRI, r3
 8009e72:	f3bf 8f6f 	isb	sy
 8009e76:	f3bf 8f4f 	dsb	sy
 8009e7a:	623b      	str	r3, [r7, #32]
}
 8009e7c:	bf00      	nop
 8009e7e:	e7fe      	b.n	8009e7e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d103      	bne.n	8009e8e <xQueueReceive+0x3e>
 8009e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d101      	bne.n	8009e92 <xQueueReceive+0x42>
 8009e8e:	2301      	movs	r3, #1
 8009e90:	e000      	b.n	8009e94 <xQueueReceive+0x44>
 8009e92:	2300      	movs	r3, #0
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d10a      	bne.n	8009eae <xQueueReceive+0x5e>
	__asm volatile
 8009e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9c:	f383 8811 	msr	BASEPRI, r3
 8009ea0:	f3bf 8f6f 	isb	sy
 8009ea4:	f3bf 8f4f 	dsb	sy
 8009ea8:	61fb      	str	r3, [r7, #28]
}
 8009eaa:	bf00      	nop
 8009eac:	e7fe      	b.n	8009eac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009eae:	f001 fa4f 	bl	800b350 <xTaskGetSchedulerState>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d102      	bne.n	8009ebe <xQueueReceive+0x6e>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d101      	bne.n	8009ec2 <xQueueReceive+0x72>
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e000      	b.n	8009ec4 <xQueueReceive+0x74>
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d10a      	bne.n	8009ede <xQueueReceive+0x8e>
	__asm volatile
 8009ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ecc:	f383 8811 	msr	BASEPRI, r3
 8009ed0:	f3bf 8f6f 	isb	sy
 8009ed4:	f3bf 8f4f 	dsb	sy
 8009ed8:	61bb      	str	r3, [r7, #24]
}
 8009eda:	bf00      	nop
 8009edc:	e7fe      	b.n	8009edc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009ede:	f002 f891 	bl	800c004 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ee6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d01f      	beq.n	8009f2e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009eee:	68b9      	ldr	r1, [r7, #8]
 8009ef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ef2:	f000 fabe 	bl	800a472 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef8:	1e5a      	subs	r2, r3, #1
 8009efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009efc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f00:	691b      	ldr	r3, [r3, #16]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d00f      	beq.n	8009f26 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f08:	3310      	adds	r3, #16
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f001 f852 	bl	800afb4 <xTaskRemoveFromEventList>
 8009f10:	4603      	mov	r3, r0
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d007      	beq.n	8009f26 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009f16:	4b3d      	ldr	r3, [pc, #244]	; (800a00c <xQueueReceive+0x1bc>)
 8009f18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f1c:	601a      	str	r2, [r3, #0]
 8009f1e:	f3bf 8f4f 	dsb	sy
 8009f22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009f26:	f002 f89d 	bl	800c064 <vPortExitCritical>
				return pdPASS;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	e069      	b.n	800a002 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d103      	bne.n	8009f3c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009f34:	f002 f896 	bl	800c064 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	e062      	b.n	800a002 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d106      	bne.n	8009f50 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f42:	f107 0310 	add.w	r3, r7, #16
 8009f46:	4618      	mov	r0, r3
 8009f48:	f001 f898 	bl	800b07c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f50:	f002 f888 	bl	800c064 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f54:	f000 fdf8 	bl	800ab48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f58:	f002 f854 	bl	800c004 <vPortEnterCritical>
 8009f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f62:	b25b      	sxtb	r3, r3
 8009f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f68:	d103      	bne.n	8009f72 <xQueueReceive+0x122>
 8009f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f78:	b25b      	sxtb	r3, r3
 8009f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f7e:	d103      	bne.n	8009f88 <xQueueReceive+0x138>
 8009f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f82:	2200      	movs	r2, #0
 8009f84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f88:	f002 f86c 	bl	800c064 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f8c:	1d3a      	adds	r2, r7, #4
 8009f8e:	f107 0310 	add.w	r3, r7, #16
 8009f92:	4611      	mov	r1, r2
 8009f94:	4618      	mov	r0, r3
 8009f96:	f001 f887 	bl	800b0a8 <xTaskCheckForTimeOut>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d123      	bne.n	8009fe8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009fa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fa2:	f000 fade 	bl	800a562 <prvIsQueueEmpty>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d017      	beq.n	8009fdc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fae:	3324      	adds	r3, #36	; 0x24
 8009fb0:	687a      	ldr	r2, [r7, #4]
 8009fb2:	4611      	mov	r1, r2
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f000 ffad 	bl	800af14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009fba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fbc:	f000 fa7f 	bl	800a4be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009fc0:	f000 fdd0 	bl	800ab64 <xTaskResumeAll>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d189      	bne.n	8009ede <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009fca:	4b10      	ldr	r3, [pc, #64]	; (800a00c <xQueueReceive+0x1bc>)
 8009fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fd0:	601a      	str	r2, [r3, #0]
 8009fd2:	f3bf 8f4f 	dsb	sy
 8009fd6:	f3bf 8f6f 	isb	sy
 8009fda:	e780      	b.n	8009ede <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009fdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fde:	f000 fa6e 	bl	800a4be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009fe2:	f000 fdbf 	bl	800ab64 <xTaskResumeAll>
 8009fe6:	e77a      	b.n	8009ede <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009fe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fea:	f000 fa68 	bl	800a4be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009fee:	f000 fdb9 	bl	800ab64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ff2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ff4:	f000 fab5 	bl	800a562 <prvIsQueueEmpty>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	f43f af6f 	beq.w	8009ede <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a000:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a002:	4618      	mov	r0, r3
 800a004:	3730      	adds	r7, #48	; 0x30
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
 800a00a:	bf00      	nop
 800a00c:	e000ed04 	.word	0xe000ed04

0800a010 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b08e      	sub	sp, #56	; 0x38
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a01a:	2300      	movs	r3, #0
 800a01c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a022:	2300      	movs	r3, #0
 800a024:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d10a      	bne.n	800a042 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a030:	f383 8811 	msr	BASEPRI, r3
 800a034:	f3bf 8f6f 	isb	sy
 800a038:	f3bf 8f4f 	dsb	sy
 800a03c:	623b      	str	r3, [r7, #32]
}
 800a03e:	bf00      	nop
 800a040:	e7fe      	b.n	800a040 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a046:	2b00      	cmp	r3, #0
 800a048:	d00a      	beq.n	800a060 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04e:	f383 8811 	msr	BASEPRI, r3
 800a052:	f3bf 8f6f 	isb	sy
 800a056:	f3bf 8f4f 	dsb	sy
 800a05a:	61fb      	str	r3, [r7, #28]
}
 800a05c:	bf00      	nop
 800a05e:	e7fe      	b.n	800a05e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a060:	f001 f976 	bl	800b350 <xTaskGetSchedulerState>
 800a064:	4603      	mov	r3, r0
 800a066:	2b00      	cmp	r3, #0
 800a068:	d102      	bne.n	800a070 <xQueueSemaphoreTake+0x60>
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d101      	bne.n	800a074 <xQueueSemaphoreTake+0x64>
 800a070:	2301      	movs	r3, #1
 800a072:	e000      	b.n	800a076 <xQueueSemaphoreTake+0x66>
 800a074:	2300      	movs	r3, #0
 800a076:	2b00      	cmp	r3, #0
 800a078:	d10a      	bne.n	800a090 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07e:	f383 8811 	msr	BASEPRI, r3
 800a082:	f3bf 8f6f 	isb	sy
 800a086:	f3bf 8f4f 	dsb	sy
 800a08a:	61bb      	str	r3, [r7, #24]
}
 800a08c:	bf00      	nop
 800a08e:	e7fe      	b.n	800a08e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a090:	f001 ffb8 	bl	800c004 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a098:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d024      	beq.n	800a0ea <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a2:	1e5a      	subs	r2, r3, #1
 800a0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d104      	bne.n	800a0ba <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a0b0:	f001 fac4 	bl	800b63c <pvTaskIncrementMutexHeldCount>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0bc:	691b      	ldr	r3, [r3, #16]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d00f      	beq.n	800a0e2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c4:	3310      	adds	r3, #16
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f000 ff74 	bl	800afb4 <xTaskRemoveFromEventList>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d007      	beq.n	800a0e2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a0d2:	4b54      	ldr	r3, [pc, #336]	; (800a224 <xQueueSemaphoreTake+0x214>)
 800a0d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0d8:	601a      	str	r2, [r3, #0]
 800a0da:	f3bf 8f4f 	dsb	sy
 800a0de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a0e2:	f001 ffbf 	bl	800c064 <vPortExitCritical>
				return pdPASS;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	e097      	b.n	800a21a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d111      	bne.n	800a114 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d00a      	beq.n	800a10c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0fa:	f383 8811 	msr	BASEPRI, r3
 800a0fe:	f3bf 8f6f 	isb	sy
 800a102:	f3bf 8f4f 	dsb	sy
 800a106:	617b      	str	r3, [r7, #20]
}
 800a108:	bf00      	nop
 800a10a:	e7fe      	b.n	800a10a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a10c:	f001 ffaa 	bl	800c064 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a110:	2300      	movs	r3, #0
 800a112:	e082      	b.n	800a21a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a116:	2b00      	cmp	r3, #0
 800a118:	d106      	bne.n	800a128 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a11a:	f107 030c 	add.w	r3, r7, #12
 800a11e:	4618      	mov	r0, r3
 800a120:	f000 ffac 	bl	800b07c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a124:	2301      	movs	r3, #1
 800a126:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a128:	f001 ff9c 	bl	800c064 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a12c:	f000 fd0c 	bl	800ab48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a130:	f001 ff68 	bl	800c004 <vPortEnterCritical>
 800a134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a136:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a13a:	b25b      	sxtb	r3, r3
 800a13c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a140:	d103      	bne.n	800a14a <xQueueSemaphoreTake+0x13a>
 800a142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a144:	2200      	movs	r2, #0
 800a146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a14a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a14c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a150:	b25b      	sxtb	r3, r3
 800a152:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a156:	d103      	bne.n	800a160 <xQueueSemaphoreTake+0x150>
 800a158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a15a:	2200      	movs	r2, #0
 800a15c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a160:	f001 ff80 	bl	800c064 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a164:	463a      	mov	r2, r7
 800a166:	f107 030c 	add.w	r3, r7, #12
 800a16a:	4611      	mov	r1, r2
 800a16c:	4618      	mov	r0, r3
 800a16e:	f000 ff9b 	bl	800b0a8 <xTaskCheckForTimeOut>
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	d132      	bne.n	800a1de <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a178:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a17a:	f000 f9f2 	bl	800a562 <prvIsQueueEmpty>
 800a17e:	4603      	mov	r3, r0
 800a180:	2b00      	cmp	r3, #0
 800a182:	d026      	beq.n	800a1d2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d109      	bne.n	800a1a0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a18c:	f001 ff3a 	bl	800c004 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a192:	689b      	ldr	r3, [r3, #8]
 800a194:	4618      	mov	r0, r3
 800a196:	f001 f8f9 	bl	800b38c <xTaskPriorityInherit>
 800a19a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a19c:	f001 ff62 	bl	800c064 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a2:	3324      	adds	r3, #36	; 0x24
 800a1a4:	683a      	ldr	r2, [r7, #0]
 800a1a6:	4611      	mov	r1, r2
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f000 feb3 	bl	800af14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a1ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a1b0:	f000 f985 	bl	800a4be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a1b4:	f000 fcd6 	bl	800ab64 <xTaskResumeAll>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	f47f af68 	bne.w	800a090 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a1c0:	4b18      	ldr	r3, [pc, #96]	; (800a224 <xQueueSemaphoreTake+0x214>)
 800a1c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1c6:	601a      	str	r2, [r3, #0]
 800a1c8:	f3bf 8f4f 	dsb	sy
 800a1cc:	f3bf 8f6f 	isb	sy
 800a1d0:	e75e      	b.n	800a090 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a1d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a1d4:	f000 f973 	bl	800a4be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a1d8:	f000 fcc4 	bl	800ab64 <xTaskResumeAll>
 800a1dc:	e758      	b.n	800a090 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a1de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a1e0:	f000 f96d 	bl	800a4be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a1e4:	f000 fcbe 	bl	800ab64 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a1ea:	f000 f9ba 	bl	800a562 <prvIsQueueEmpty>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	f43f af4d 	beq.w	800a090 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d00d      	beq.n	800a218 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a1fc:	f001 ff02 	bl	800c004 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a200:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a202:	f000 f8b4 	bl	800a36e <prvGetDisinheritPriorityAfterTimeout>
 800a206:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a20a:	689b      	ldr	r3, [r3, #8]
 800a20c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a20e:	4618      	mov	r0, r3
 800a210:	f001 f992 	bl	800b538 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a214:	f001 ff26 	bl	800c064 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a218:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3738      	adds	r7, #56	; 0x38
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
 800a222:	bf00      	nop
 800a224:	e000ed04 	.word	0xe000ed04

0800a228 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b08e      	sub	sp, #56	; 0x38
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	60f8      	str	r0, [r7, #12]
 800a230:	60b9      	str	r1, [r7, #8]
 800a232:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d10a      	bne.n	800a254 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a242:	f383 8811 	msr	BASEPRI, r3
 800a246:	f3bf 8f6f 	isb	sy
 800a24a:	f3bf 8f4f 	dsb	sy
 800a24e:	623b      	str	r3, [r7, #32]
}
 800a250:	bf00      	nop
 800a252:	e7fe      	b.n	800a252 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d103      	bne.n	800a262 <xQueueReceiveFromISR+0x3a>
 800a25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a25c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d101      	bne.n	800a266 <xQueueReceiveFromISR+0x3e>
 800a262:	2301      	movs	r3, #1
 800a264:	e000      	b.n	800a268 <xQueueReceiveFromISR+0x40>
 800a266:	2300      	movs	r3, #0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d10a      	bne.n	800a282 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a270:	f383 8811 	msr	BASEPRI, r3
 800a274:	f3bf 8f6f 	isb	sy
 800a278:	f3bf 8f4f 	dsb	sy
 800a27c:	61fb      	str	r3, [r7, #28]
}
 800a27e:	bf00      	nop
 800a280:	e7fe      	b.n	800a280 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a282:	f001 ffa1 	bl	800c1c8 <vPortValidateInterruptPriority>
	__asm volatile
 800a286:	f3ef 8211 	mrs	r2, BASEPRI
 800a28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a28e:	f383 8811 	msr	BASEPRI, r3
 800a292:	f3bf 8f6f 	isb	sy
 800a296:	f3bf 8f4f 	dsb	sy
 800a29a:	61ba      	str	r2, [r7, #24]
 800a29c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a29e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a2a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d02f      	beq.n	800a30e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a2b8:	68b9      	ldr	r1, [r7, #8]
 800a2ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2bc:	f000 f8d9 	bl	800a472 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c2:	1e5a      	subs	r2, r3, #1
 800a2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a2c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a2cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2d0:	d112      	bne.n	800a2f8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d4:	691b      	ldr	r3, [r3, #16]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d016      	beq.n	800a308 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2dc:	3310      	adds	r3, #16
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f000 fe68 	bl	800afb4 <xTaskRemoveFromEventList>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d00e      	beq.n	800a308 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d00b      	beq.n	800a308 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	601a      	str	r2, [r3, #0]
 800a2f6:	e007      	b.n	800a308 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a2f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2fc:	3301      	adds	r3, #1
 800a2fe:	b2db      	uxtb	r3, r3
 800a300:	b25a      	sxtb	r2, r3
 800a302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a308:	2301      	movs	r3, #1
 800a30a:	637b      	str	r3, [r7, #52]	; 0x34
 800a30c:	e001      	b.n	800a312 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a30e:	2300      	movs	r3, #0
 800a310:	637b      	str	r3, [r7, #52]	; 0x34
 800a312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a314:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	f383 8811 	msr	BASEPRI, r3
}
 800a31c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a31e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a320:	4618      	mov	r0, r3
 800a322:	3738      	adds	r7, #56	; 0x38
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b084      	sub	sp, #16
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d10a      	bne.n	800a350 <vQueueDelete+0x28>
	__asm volatile
 800a33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a33e:	f383 8811 	msr	BASEPRI, r3
 800a342:	f3bf 8f6f 	isb	sy
 800a346:	f3bf 8f4f 	dsb	sy
 800a34a:	60bb      	str	r3, [r7, #8]
}
 800a34c:	bf00      	nop
 800a34e:	e7fe      	b.n	800a34e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a350:	68f8      	ldr	r0, [r7, #12]
 800a352:	f000 f95f 	bl	800a614 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d102      	bne.n	800a366 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a360:	68f8      	ldr	r0, [r7, #12]
 800a362:	f002 f835 	bl	800c3d0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a366:	bf00      	nop
 800a368:	3710      	adds	r7, #16
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}

0800a36e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a36e:	b480      	push	{r7}
 800a370:	b085      	sub	sp, #20
 800a372:	af00      	add	r7, sp, #0
 800a374:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d006      	beq.n	800a38c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a388:	60fb      	str	r3, [r7, #12]
 800a38a:	e001      	b.n	800a390 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a38c:	2300      	movs	r3, #0
 800a38e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a390:	68fb      	ldr	r3, [r7, #12]
	}
 800a392:	4618      	mov	r0, r3
 800a394:	3714      	adds	r7, #20
 800a396:	46bd      	mov	sp, r7
 800a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39c:	4770      	bx	lr

0800a39e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a39e:	b580      	push	{r7, lr}
 800a3a0:	b086      	sub	sp, #24
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	60f8      	str	r0, [r7, #12]
 800a3a6:	60b9      	str	r1, [r7, #8]
 800a3a8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3b2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d10d      	bne.n	800a3d8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d14d      	bne.n	800a460 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	689b      	ldr	r3, [r3, #8]
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f001 f847 	bl	800b45c <xTaskPriorityDisinherit>
 800a3ce:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	609a      	str	r2, [r3, #8]
 800a3d6:	e043      	b.n	800a460 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d119      	bne.n	800a412 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	6858      	ldr	r0, [r3, #4]
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	68b9      	ldr	r1, [r7, #8]
 800a3ea:	f015 ff37 	bl	802025c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	685a      	ldr	r2, [r3, #4]
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3f6:	441a      	add	r2, r3
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	685a      	ldr	r2, [r3, #4]
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	689b      	ldr	r3, [r3, #8]
 800a404:	429a      	cmp	r2, r3
 800a406:	d32b      	bcc.n	800a460 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	605a      	str	r2, [r3, #4]
 800a410:	e026      	b.n	800a460 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	68d8      	ldr	r0, [r3, #12]
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a41a:	461a      	mov	r2, r3
 800a41c:	68b9      	ldr	r1, [r7, #8]
 800a41e:	f015 ff1d 	bl	802025c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	68da      	ldr	r2, [r3, #12]
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a42a:	425b      	negs	r3, r3
 800a42c:	441a      	add	r2, r3
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	68da      	ldr	r2, [r3, #12]
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d207      	bcs.n	800a44e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	689a      	ldr	r2, [r3, #8]
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a446:	425b      	negs	r3, r3
 800a448:	441a      	add	r2, r3
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2b02      	cmp	r3, #2
 800a452:	d105      	bne.n	800a460 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d002      	beq.n	800a460 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	3b01      	subs	r3, #1
 800a45e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	1c5a      	adds	r2, r3, #1
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a468:	697b      	ldr	r3, [r7, #20]
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3718      	adds	r7, #24
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}

0800a472 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a472:	b580      	push	{r7, lr}
 800a474:	b082      	sub	sp, #8
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
 800a47a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a480:	2b00      	cmp	r3, #0
 800a482:	d018      	beq.n	800a4b6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	68da      	ldr	r2, [r3, #12]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a48c:	441a      	add	r2, r3
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	68da      	ldr	r2, [r3, #12]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	689b      	ldr	r3, [r3, #8]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d303      	bcc.n	800a4a6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681a      	ldr	r2, [r3, #0]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	68d9      	ldr	r1, [r3, #12]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	6838      	ldr	r0, [r7, #0]
 800a4b2:	f015 fed3 	bl	802025c <memcpy>
	}
}
 800a4b6:	bf00      	nop
 800a4b8:	3708      	adds	r7, #8
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}

0800a4be <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a4be:	b580      	push	{r7, lr}
 800a4c0:	b084      	sub	sp, #16
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a4c6:	f001 fd9d 	bl	800c004 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4d0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a4d2:	e011      	b.n	800a4f8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d012      	beq.n	800a502 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	3324      	adds	r3, #36	; 0x24
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f000 fd67 	bl	800afb4 <xTaskRemoveFromEventList>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d001      	beq.n	800a4f0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a4ec:	f000 fe3e 	bl	800b16c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a4f0:	7bfb      	ldrb	r3, [r7, #15]
 800a4f2:	3b01      	subs	r3, #1
 800a4f4:	b2db      	uxtb	r3, r3
 800a4f6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a4f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	dce9      	bgt.n	800a4d4 <prvUnlockQueue+0x16>
 800a500:	e000      	b.n	800a504 <prvUnlockQueue+0x46>
					break;
 800a502:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	22ff      	movs	r2, #255	; 0xff
 800a508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a50c:	f001 fdaa 	bl	800c064 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a510:	f001 fd78 	bl	800c004 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a51a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a51c:	e011      	b.n	800a542 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	691b      	ldr	r3, [r3, #16]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d012      	beq.n	800a54c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	3310      	adds	r3, #16
 800a52a:	4618      	mov	r0, r3
 800a52c:	f000 fd42 	bl	800afb4 <xTaskRemoveFromEventList>
 800a530:	4603      	mov	r3, r0
 800a532:	2b00      	cmp	r3, #0
 800a534:	d001      	beq.n	800a53a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a536:	f000 fe19 	bl	800b16c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a53a:	7bbb      	ldrb	r3, [r7, #14]
 800a53c:	3b01      	subs	r3, #1
 800a53e:	b2db      	uxtb	r3, r3
 800a540:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a542:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a546:	2b00      	cmp	r3, #0
 800a548:	dce9      	bgt.n	800a51e <prvUnlockQueue+0x60>
 800a54a:	e000      	b.n	800a54e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a54c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	22ff      	movs	r2, #255	; 0xff
 800a552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a556:	f001 fd85 	bl	800c064 <vPortExitCritical>
}
 800a55a:	bf00      	nop
 800a55c:	3710      	adds	r7, #16
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}

0800a562 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b084      	sub	sp, #16
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a56a:	f001 fd4b 	bl	800c004 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a572:	2b00      	cmp	r3, #0
 800a574:	d102      	bne.n	800a57c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a576:	2301      	movs	r3, #1
 800a578:	60fb      	str	r3, [r7, #12]
 800a57a:	e001      	b.n	800a580 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a57c:	2300      	movs	r3, #0
 800a57e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a580:	f001 fd70 	bl	800c064 <vPortExitCritical>

	return xReturn;
 800a584:	68fb      	ldr	r3, [r7, #12]
}
 800a586:	4618      	mov	r0, r3
 800a588:	3710      	adds	r7, #16
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}

0800a58e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a58e:	b580      	push	{r7, lr}
 800a590:	b084      	sub	sp, #16
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a596:	f001 fd35 	bl	800c004 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d102      	bne.n	800a5ac <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	60fb      	str	r3, [r7, #12]
 800a5aa:	e001      	b.n	800a5b0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a5b0:	f001 fd58 	bl	800c064 <vPortExitCritical>

	return xReturn;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3710      	adds	r7, #16
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
	...

0800a5c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b085      	sub	sp, #20
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	60fb      	str	r3, [r7, #12]
 800a5ce:	e014      	b.n	800a5fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a5d0:	4a0f      	ldr	r2, [pc, #60]	; (800a610 <vQueueAddToRegistry+0x50>)
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d10b      	bne.n	800a5f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a5dc:	490c      	ldr	r1, [pc, #48]	; (800a610 <vQueueAddToRegistry+0x50>)
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	683a      	ldr	r2, [r7, #0]
 800a5e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a5e6:	4a0a      	ldr	r2, [pc, #40]	; (800a610 <vQueueAddToRegistry+0x50>)
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	00db      	lsls	r3, r3, #3
 800a5ec:	4413      	add	r3, r2
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a5f2:	e006      	b.n	800a602 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	60fb      	str	r3, [r7, #12]
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	2b07      	cmp	r3, #7
 800a5fe:	d9e7      	bls.n	800a5d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a600:	bf00      	nop
 800a602:	bf00      	nop
 800a604:	3714      	adds	r7, #20
 800a606:	46bd      	mov	sp, r7
 800a608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60c:	4770      	bx	lr
 800a60e:	bf00      	nop
 800a610:	20007090 	.word	0x20007090

0800a614 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a614:	b480      	push	{r7}
 800a616:	b085      	sub	sp, #20
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a61c:	2300      	movs	r3, #0
 800a61e:	60fb      	str	r3, [r7, #12]
 800a620:	e016      	b.n	800a650 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a622:	4a10      	ldr	r2, [pc, #64]	; (800a664 <vQueueUnregisterQueue+0x50>)
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	00db      	lsls	r3, r3, #3
 800a628:	4413      	add	r3, r2
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	687a      	ldr	r2, [r7, #4]
 800a62e:	429a      	cmp	r2, r3
 800a630:	d10b      	bne.n	800a64a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a632:	4a0c      	ldr	r2, [pc, #48]	; (800a664 <vQueueUnregisterQueue+0x50>)
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2100      	movs	r1, #0
 800a638:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a63c:	4a09      	ldr	r2, [pc, #36]	; (800a664 <vQueueUnregisterQueue+0x50>)
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	00db      	lsls	r3, r3, #3
 800a642:	4413      	add	r3, r2
 800a644:	2200      	movs	r2, #0
 800a646:	605a      	str	r2, [r3, #4]
				break;
 800a648:	e006      	b.n	800a658 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	3301      	adds	r3, #1
 800a64e:	60fb      	str	r3, [r7, #12]
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2b07      	cmp	r3, #7
 800a654:	d9e5      	bls.n	800a622 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a656:	bf00      	nop
 800a658:	bf00      	nop
 800a65a:	3714      	adds	r7, #20
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr
 800a664:	20007090 	.word	0x20007090

0800a668 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b086      	sub	sp, #24
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	60f8      	str	r0, [r7, #12]
 800a670:	60b9      	str	r1, [r7, #8]
 800a672:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a678:	f001 fcc4 	bl	800c004 <vPortEnterCritical>
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a682:	b25b      	sxtb	r3, r3
 800a684:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a688:	d103      	bne.n	800a692 <vQueueWaitForMessageRestricted+0x2a>
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	2200      	movs	r2, #0
 800a68e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a698:	b25b      	sxtb	r3, r3
 800a69a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a69e:	d103      	bne.n	800a6a8 <vQueueWaitForMessageRestricted+0x40>
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6a8:	f001 fcdc 	bl	800c064 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d106      	bne.n	800a6c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	3324      	adds	r3, #36	; 0x24
 800a6b8:	687a      	ldr	r2, [r7, #4]
 800a6ba:	68b9      	ldr	r1, [r7, #8]
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f000 fc4d 	bl	800af5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a6c2:	6978      	ldr	r0, [r7, #20]
 800a6c4:	f7ff fefb 	bl	800a4be <prvUnlockQueue>
	}
 800a6c8:	bf00      	nop
 800a6ca:	3718      	adds	r7, #24
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}

0800a6d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b08e      	sub	sp, #56	; 0x38
 800a6d4:	af04      	add	r7, sp, #16
 800a6d6:	60f8      	str	r0, [r7, #12]
 800a6d8:	60b9      	str	r1, [r7, #8]
 800a6da:	607a      	str	r2, [r7, #4]
 800a6dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a6de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d10a      	bne.n	800a6fa <xTaskCreateStatic+0x2a>
	__asm volatile
 800a6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e8:	f383 8811 	msr	BASEPRI, r3
 800a6ec:	f3bf 8f6f 	isb	sy
 800a6f0:	f3bf 8f4f 	dsb	sy
 800a6f4:	623b      	str	r3, [r7, #32]
}
 800a6f6:	bf00      	nop
 800a6f8:	e7fe      	b.n	800a6f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a6fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d10a      	bne.n	800a716 <xTaskCreateStatic+0x46>
	__asm volatile
 800a700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a704:	f383 8811 	msr	BASEPRI, r3
 800a708:	f3bf 8f6f 	isb	sy
 800a70c:	f3bf 8f4f 	dsb	sy
 800a710:	61fb      	str	r3, [r7, #28]
}
 800a712:	bf00      	nop
 800a714:	e7fe      	b.n	800a714 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a716:	235c      	movs	r3, #92	; 0x5c
 800a718:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	2b5c      	cmp	r3, #92	; 0x5c
 800a71e:	d00a      	beq.n	800a736 <xTaskCreateStatic+0x66>
	__asm volatile
 800a720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a724:	f383 8811 	msr	BASEPRI, r3
 800a728:	f3bf 8f6f 	isb	sy
 800a72c:	f3bf 8f4f 	dsb	sy
 800a730:	61bb      	str	r3, [r7, #24]
}
 800a732:	bf00      	nop
 800a734:	e7fe      	b.n	800a734 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a736:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d01e      	beq.n	800a77c <xTaskCreateStatic+0xac>
 800a73e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a740:	2b00      	cmp	r3, #0
 800a742:	d01b      	beq.n	800a77c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a746:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a74c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a750:	2202      	movs	r2, #2
 800a752:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a756:	2300      	movs	r3, #0
 800a758:	9303      	str	r3, [sp, #12]
 800a75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75c:	9302      	str	r3, [sp, #8]
 800a75e:	f107 0314 	add.w	r3, r7, #20
 800a762:	9301      	str	r3, [sp, #4]
 800a764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a766:	9300      	str	r3, [sp, #0]
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	68b9      	ldr	r1, [r7, #8]
 800a76e:	68f8      	ldr	r0, [r7, #12]
 800a770:	f000 f850 	bl	800a814 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a774:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a776:	f000 f8dd 	bl	800a934 <prvAddNewTaskToReadyList>
 800a77a:	e001      	b.n	800a780 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a77c:	2300      	movs	r3, #0
 800a77e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a780:	697b      	ldr	r3, [r7, #20]
	}
 800a782:	4618      	mov	r0, r3
 800a784:	3728      	adds	r7, #40	; 0x28
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}

0800a78a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a78a:	b580      	push	{r7, lr}
 800a78c:	b08c      	sub	sp, #48	; 0x30
 800a78e:	af04      	add	r7, sp, #16
 800a790:	60f8      	str	r0, [r7, #12]
 800a792:	60b9      	str	r1, [r7, #8]
 800a794:	603b      	str	r3, [r7, #0]
 800a796:	4613      	mov	r3, r2
 800a798:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a79a:	88fb      	ldrh	r3, [r7, #6]
 800a79c:	009b      	lsls	r3, r3, #2
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f001 fd52 	bl	800c248 <pvPortMalloc>
 800a7a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d00e      	beq.n	800a7ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a7ac:	205c      	movs	r0, #92	; 0x5c
 800a7ae:	f001 fd4b 	bl	800c248 <pvPortMalloc>
 800a7b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a7b4:	69fb      	ldr	r3, [r7, #28]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d003      	beq.n	800a7c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a7ba:	69fb      	ldr	r3, [r7, #28]
 800a7bc:	697a      	ldr	r2, [r7, #20]
 800a7be:	631a      	str	r2, [r3, #48]	; 0x30
 800a7c0:	e005      	b.n	800a7ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a7c2:	6978      	ldr	r0, [r7, #20]
 800a7c4:	f001 fe04 	bl	800c3d0 <vPortFree>
 800a7c8:	e001      	b.n	800a7ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a7ce:	69fb      	ldr	r3, [r7, #28]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d017      	beq.n	800a804 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a7d4:	69fb      	ldr	r3, [r7, #28]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a7dc:	88fa      	ldrh	r2, [r7, #6]
 800a7de:	2300      	movs	r3, #0
 800a7e0:	9303      	str	r3, [sp, #12]
 800a7e2:	69fb      	ldr	r3, [r7, #28]
 800a7e4:	9302      	str	r3, [sp, #8]
 800a7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e8:	9301      	str	r3, [sp, #4]
 800a7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ec:	9300      	str	r3, [sp, #0]
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	68b9      	ldr	r1, [r7, #8]
 800a7f2:	68f8      	ldr	r0, [r7, #12]
 800a7f4:	f000 f80e 	bl	800a814 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a7f8:	69f8      	ldr	r0, [r7, #28]
 800a7fa:	f000 f89b 	bl	800a934 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a7fe:	2301      	movs	r3, #1
 800a800:	61bb      	str	r3, [r7, #24]
 800a802:	e002      	b.n	800a80a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a804:	f04f 33ff 	mov.w	r3, #4294967295
 800a808:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a80a:	69bb      	ldr	r3, [r7, #24]
	}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3720      	adds	r7, #32
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b088      	sub	sp, #32
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	607a      	str	r2, [r7, #4]
 800a820:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a824:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	009b      	lsls	r3, r3, #2
 800a82a:	461a      	mov	r2, r3
 800a82c:	21a5      	movs	r1, #165	; 0xa5
 800a82e:	f015 fd23 	bl	8020278 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a834:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a836:	6879      	ldr	r1, [r7, #4]
 800a838:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a83c:	440b      	add	r3, r1
 800a83e:	009b      	lsls	r3, r3, #2
 800a840:	4413      	add	r3, r2
 800a842:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a844:	69bb      	ldr	r3, [r7, #24]
 800a846:	f023 0307 	bic.w	r3, r3, #7
 800a84a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a84c:	69bb      	ldr	r3, [r7, #24]
 800a84e:	f003 0307 	and.w	r3, r3, #7
 800a852:	2b00      	cmp	r3, #0
 800a854:	d00a      	beq.n	800a86c <prvInitialiseNewTask+0x58>
	__asm volatile
 800a856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85a:	f383 8811 	msr	BASEPRI, r3
 800a85e:	f3bf 8f6f 	isb	sy
 800a862:	f3bf 8f4f 	dsb	sy
 800a866:	617b      	str	r3, [r7, #20]
}
 800a868:	bf00      	nop
 800a86a:	e7fe      	b.n	800a86a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d01f      	beq.n	800a8b2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a872:	2300      	movs	r3, #0
 800a874:	61fb      	str	r3, [r7, #28]
 800a876:	e012      	b.n	800a89e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a878:	68ba      	ldr	r2, [r7, #8]
 800a87a:	69fb      	ldr	r3, [r7, #28]
 800a87c:	4413      	add	r3, r2
 800a87e:	7819      	ldrb	r1, [r3, #0]
 800a880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a882:	69fb      	ldr	r3, [r7, #28]
 800a884:	4413      	add	r3, r2
 800a886:	3334      	adds	r3, #52	; 0x34
 800a888:	460a      	mov	r2, r1
 800a88a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a88c:	68ba      	ldr	r2, [r7, #8]
 800a88e:	69fb      	ldr	r3, [r7, #28]
 800a890:	4413      	add	r3, r2
 800a892:	781b      	ldrb	r3, [r3, #0]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d006      	beq.n	800a8a6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a898:	69fb      	ldr	r3, [r7, #28]
 800a89a:	3301      	adds	r3, #1
 800a89c:	61fb      	str	r3, [r7, #28]
 800a89e:	69fb      	ldr	r3, [r7, #28]
 800a8a0:	2b0f      	cmp	r3, #15
 800a8a2:	d9e9      	bls.n	800a878 <prvInitialiseNewTask+0x64>
 800a8a4:	e000      	b.n	800a8a8 <prvInitialiseNewTask+0x94>
			{
				break;
 800a8a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a8b0:	e003      	b.n	800a8ba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8bc:	2b37      	cmp	r3, #55	; 0x37
 800a8be:	d901      	bls.n	800a8c4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a8c0:	2337      	movs	r3, #55	; 0x37
 800a8c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d8:	3304      	adds	r3, #4
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7fe fd9c 	bl	8009418 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e2:	3318      	adds	r3, #24
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f7fe fd97 	bl	8009418 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a902:	2200      	movs	r2, #0
 800a904:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a908:	2200      	movs	r2, #0
 800a90a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a90e:	683a      	ldr	r2, [r7, #0]
 800a910:	68f9      	ldr	r1, [r7, #12]
 800a912:	69b8      	ldr	r0, [r7, #24]
 800a914:	f001 fa48 	bl	800bda8 <pxPortInitialiseStack>
 800a918:	4602      	mov	r2, r0
 800a91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a920:	2b00      	cmp	r3, #0
 800a922:	d002      	beq.n	800a92a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a926:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a928:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a92a:	bf00      	nop
 800a92c:	3720      	adds	r7, #32
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}
	...

0800a934 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b082      	sub	sp, #8
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a93c:	f001 fb62 	bl	800c004 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a940:	4b2d      	ldr	r3, [pc, #180]	; (800a9f8 <prvAddNewTaskToReadyList+0xc4>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	3301      	adds	r3, #1
 800a946:	4a2c      	ldr	r2, [pc, #176]	; (800a9f8 <prvAddNewTaskToReadyList+0xc4>)
 800a948:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a94a:	4b2c      	ldr	r3, [pc, #176]	; (800a9fc <prvAddNewTaskToReadyList+0xc8>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d109      	bne.n	800a966 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a952:	4a2a      	ldr	r2, [pc, #168]	; (800a9fc <prvAddNewTaskToReadyList+0xc8>)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a958:	4b27      	ldr	r3, [pc, #156]	; (800a9f8 <prvAddNewTaskToReadyList+0xc4>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d110      	bne.n	800a982 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a960:	f000 fc28 	bl	800b1b4 <prvInitialiseTaskLists>
 800a964:	e00d      	b.n	800a982 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a966:	4b26      	ldr	r3, [pc, #152]	; (800aa00 <prvAddNewTaskToReadyList+0xcc>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d109      	bne.n	800a982 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a96e:	4b23      	ldr	r3, [pc, #140]	; (800a9fc <prvAddNewTaskToReadyList+0xc8>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a978:	429a      	cmp	r2, r3
 800a97a:	d802      	bhi.n	800a982 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a97c:	4a1f      	ldr	r2, [pc, #124]	; (800a9fc <prvAddNewTaskToReadyList+0xc8>)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a982:	4b20      	ldr	r3, [pc, #128]	; (800aa04 <prvAddNewTaskToReadyList+0xd0>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	3301      	adds	r3, #1
 800a988:	4a1e      	ldr	r2, [pc, #120]	; (800aa04 <prvAddNewTaskToReadyList+0xd0>)
 800a98a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a98c:	4b1d      	ldr	r3, [pc, #116]	; (800aa04 <prvAddNewTaskToReadyList+0xd0>)
 800a98e:	681a      	ldr	r2, [r3, #0]
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a998:	4b1b      	ldr	r3, [pc, #108]	; (800aa08 <prvAddNewTaskToReadyList+0xd4>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	429a      	cmp	r2, r3
 800a99e:	d903      	bls.n	800a9a8 <prvAddNewTaskToReadyList+0x74>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9a4:	4a18      	ldr	r2, [pc, #96]	; (800aa08 <prvAddNewTaskToReadyList+0xd4>)
 800a9a6:	6013      	str	r3, [r2, #0]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9ac:	4613      	mov	r3, r2
 800a9ae:	009b      	lsls	r3, r3, #2
 800a9b0:	4413      	add	r3, r2
 800a9b2:	009b      	lsls	r3, r3, #2
 800a9b4:	4a15      	ldr	r2, [pc, #84]	; (800aa0c <prvAddNewTaskToReadyList+0xd8>)
 800a9b6:	441a      	add	r2, r3
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	3304      	adds	r3, #4
 800a9bc:	4619      	mov	r1, r3
 800a9be:	4610      	mov	r0, r2
 800a9c0:	f7fe fd37 	bl	8009432 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a9c4:	f001 fb4e 	bl	800c064 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a9c8:	4b0d      	ldr	r3, [pc, #52]	; (800aa00 <prvAddNewTaskToReadyList+0xcc>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d00e      	beq.n	800a9ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a9d0:	4b0a      	ldr	r3, [pc, #40]	; (800a9fc <prvAddNewTaskToReadyList+0xc8>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d207      	bcs.n	800a9ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a9de:	4b0c      	ldr	r3, [pc, #48]	; (800aa10 <prvAddNewTaskToReadyList+0xdc>)
 800a9e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9e4:	601a      	str	r2, [r3, #0]
 800a9e6:	f3bf 8f4f 	dsb	sy
 800a9ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a9ee:	bf00      	nop
 800a9f0:	3708      	adds	r7, #8
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
 800a9f6:	bf00      	nop
 800a9f8:	200024f8 	.word	0x200024f8
 800a9fc:	20002024 	.word	0x20002024
 800aa00:	20002504 	.word	0x20002504
 800aa04:	20002514 	.word	0x20002514
 800aa08:	20002500 	.word	0x20002500
 800aa0c:	20002028 	.word	0x20002028
 800aa10:	e000ed04 	.word	0xe000ed04

0800aa14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b084      	sub	sp, #16
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d017      	beq.n	800aa56 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800aa26:	4b13      	ldr	r3, [pc, #76]	; (800aa74 <vTaskDelay+0x60>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d00a      	beq.n	800aa44 <vTaskDelay+0x30>
	__asm volatile
 800aa2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa32:	f383 8811 	msr	BASEPRI, r3
 800aa36:	f3bf 8f6f 	isb	sy
 800aa3a:	f3bf 8f4f 	dsb	sy
 800aa3e:	60bb      	str	r3, [r7, #8]
}
 800aa40:	bf00      	nop
 800aa42:	e7fe      	b.n	800aa42 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800aa44:	f000 f880 	bl	800ab48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aa48:	2100      	movs	r1, #0
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f000 fe0a 	bl	800b664 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aa50:	f000 f888 	bl	800ab64 <xTaskResumeAll>
 800aa54:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d107      	bne.n	800aa6c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800aa5c:	4b06      	ldr	r3, [pc, #24]	; (800aa78 <vTaskDelay+0x64>)
 800aa5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa62:	601a      	str	r2, [r3, #0]
 800aa64:	f3bf 8f4f 	dsb	sy
 800aa68:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aa6c:	bf00      	nop
 800aa6e:	3710      	adds	r7, #16
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	20002520 	.word	0x20002520
 800aa78:	e000ed04 	.word	0xe000ed04

0800aa7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b08a      	sub	sp, #40	; 0x28
 800aa80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800aa82:	2300      	movs	r3, #0
 800aa84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800aa86:	2300      	movs	r3, #0
 800aa88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aa8a:	463a      	mov	r2, r7
 800aa8c:	1d39      	adds	r1, r7, #4
 800aa8e:	f107 0308 	add.w	r3, r7, #8
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7fe fc6c 	bl	8009370 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800aa98:	6839      	ldr	r1, [r7, #0]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	68ba      	ldr	r2, [r7, #8]
 800aa9e:	9202      	str	r2, [sp, #8]
 800aaa0:	9301      	str	r3, [sp, #4]
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	9300      	str	r3, [sp, #0]
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	460a      	mov	r2, r1
 800aaaa:	4921      	ldr	r1, [pc, #132]	; (800ab30 <vTaskStartScheduler+0xb4>)
 800aaac:	4821      	ldr	r0, [pc, #132]	; (800ab34 <vTaskStartScheduler+0xb8>)
 800aaae:	f7ff fe0f 	bl	800a6d0 <xTaskCreateStatic>
 800aab2:	4603      	mov	r3, r0
 800aab4:	4a20      	ldr	r2, [pc, #128]	; (800ab38 <vTaskStartScheduler+0xbc>)
 800aab6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aab8:	4b1f      	ldr	r3, [pc, #124]	; (800ab38 <vTaskStartScheduler+0xbc>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d002      	beq.n	800aac6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aac0:	2301      	movs	r3, #1
 800aac2:	617b      	str	r3, [r7, #20]
 800aac4:	e001      	b.n	800aaca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aac6:	2300      	movs	r3, #0
 800aac8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	2b01      	cmp	r3, #1
 800aace:	d102      	bne.n	800aad6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800aad0:	f000 fe1c 	bl	800b70c <xTimerCreateTimerTask>
 800aad4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	2b01      	cmp	r3, #1
 800aada:	d116      	bne.n	800ab0a <vTaskStartScheduler+0x8e>
	__asm volatile
 800aadc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae0:	f383 8811 	msr	BASEPRI, r3
 800aae4:	f3bf 8f6f 	isb	sy
 800aae8:	f3bf 8f4f 	dsb	sy
 800aaec:	613b      	str	r3, [r7, #16]
}
 800aaee:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aaf0:	4b12      	ldr	r3, [pc, #72]	; (800ab3c <vTaskStartScheduler+0xc0>)
 800aaf2:	f04f 32ff 	mov.w	r2, #4294967295
 800aaf6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aaf8:	4b11      	ldr	r3, [pc, #68]	; (800ab40 <vTaskStartScheduler+0xc4>)
 800aafa:	2201      	movs	r2, #1
 800aafc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aafe:	4b11      	ldr	r3, [pc, #68]	; (800ab44 <vTaskStartScheduler+0xc8>)
 800ab00:	2200      	movs	r2, #0
 800ab02:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ab04:	f001 f9dc 	bl	800bec0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ab08:	e00e      	b.n	800ab28 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab10:	d10a      	bne.n	800ab28 <vTaskStartScheduler+0xac>
	__asm volatile
 800ab12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab16:	f383 8811 	msr	BASEPRI, r3
 800ab1a:	f3bf 8f6f 	isb	sy
 800ab1e:	f3bf 8f4f 	dsb	sy
 800ab22:	60fb      	str	r3, [r7, #12]
}
 800ab24:	bf00      	nop
 800ab26:	e7fe      	b.n	800ab26 <vTaskStartScheduler+0xaa>
}
 800ab28:	bf00      	nop
 800ab2a:	3718      	adds	r7, #24
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}
 800ab30:	08021564 	.word	0x08021564
 800ab34:	0800b185 	.word	0x0800b185
 800ab38:	2000251c 	.word	0x2000251c
 800ab3c:	20002518 	.word	0x20002518
 800ab40:	20002504 	.word	0x20002504
 800ab44:	200024fc 	.word	0x200024fc

0800ab48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ab48:	b480      	push	{r7}
 800ab4a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ab4c:	4b04      	ldr	r3, [pc, #16]	; (800ab60 <vTaskSuspendAll+0x18>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	3301      	adds	r3, #1
 800ab52:	4a03      	ldr	r2, [pc, #12]	; (800ab60 <vTaskSuspendAll+0x18>)
 800ab54:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ab56:	bf00      	nop
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr
 800ab60:	20002520 	.word	0x20002520

0800ab64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b084      	sub	sp, #16
 800ab68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ab72:	4b42      	ldr	r3, [pc, #264]	; (800ac7c <xTaskResumeAll+0x118>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d10a      	bne.n	800ab90 <xTaskResumeAll+0x2c>
	__asm volatile
 800ab7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab7e:	f383 8811 	msr	BASEPRI, r3
 800ab82:	f3bf 8f6f 	isb	sy
 800ab86:	f3bf 8f4f 	dsb	sy
 800ab8a:	603b      	str	r3, [r7, #0]
}
 800ab8c:	bf00      	nop
 800ab8e:	e7fe      	b.n	800ab8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ab90:	f001 fa38 	bl	800c004 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ab94:	4b39      	ldr	r3, [pc, #228]	; (800ac7c <xTaskResumeAll+0x118>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	3b01      	subs	r3, #1
 800ab9a:	4a38      	ldr	r2, [pc, #224]	; (800ac7c <xTaskResumeAll+0x118>)
 800ab9c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab9e:	4b37      	ldr	r3, [pc, #220]	; (800ac7c <xTaskResumeAll+0x118>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d162      	bne.n	800ac6c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aba6:	4b36      	ldr	r3, [pc, #216]	; (800ac80 <xTaskResumeAll+0x11c>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d05e      	beq.n	800ac6c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800abae:	e02f      	b.n	800ac10 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abb0:	4b34      	ldr	r3, [pc, #208]	; (800ac84 <xTaskResumeAll+0x120>)
 800abb2:	68db      	ldr	r3, [r3, #12]
 800abb4:	68db      	ldr	r3, [r3, #12]
 800abb6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	3318      	adds	r3, #24
 800abbc:	4618      	mov	r0, r3
 800abbe:	f7fe fc95 	bl	80094ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	3304      	adds	r3, #4
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7fe fc90 	bl	80094ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abd0:	4b2d      	ldr	r3, [pc, #180]	; (800ac88 <xTaskResumeAll+0x124>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d903      	bls.n	800abe0 <xTaskResumeAll+0x7c>
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abdc:	4a2a      	ldr	r2, [pc, #168]	; (800ac88 <xTaskResumeAll+0x124>)
 800abde:	6013      	str	r3, [r2, #0]
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abe4:	4613      	mov	r3, r2
 800abe6:	009b      	lsls	r3, r3, #2
 800abe8:	4413      	add	r3, r2
 800abea:	009b      	lsls	r3, r3, #2
 800abec:	4a27      	ldr	r2, [pc, #156]	; (800ac8c <xTaskResumeAll+0x128>)
 800abee:	441a      	add	r2, r3
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	3304      	adds	r3, #4
 800abf4:	4619      	mov	r1, r3
 800abf6:	4610      	mov	r0, r2
 800abf8:	f7fe fc1b 	bl	8009432 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac00:	4b23      	ldr	r3, [pc, #140]	; (800ac90 <xTaskResumeAll+0x12c>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d302      	bcc.n	800ac10 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ac0a:	4b22      	ldr	r3, [pc, #136]	; (800ac94 <xTaskResumeAll+0x130>)
 800ac0c:	2201      	movs	r2, #1
 800ac0e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ac10:	4b1c      	ldr	r3, [pc, #112]	; (800ac84 <xTaskResumeAll+0x120>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d1cb      	bne.n	800abb0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d001      	beq.n	800ac22 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ac1e:	f000 fb67 	bl	800b2f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ac22:	4b1d      	ldr	r3, [pc, #116]	; (800ac98 <xTaskResumeAll+0x134>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d010      	beq.n	800ac50 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ac2e:	f000 f859 	bl	800ace4 <xTaskIncrementTick>
 800ac32:	4603      	mov	r3, r0
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d002      	beq.n	800ac3e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ac38:	4b16      	ldr	r3, [pc, #88]	; (800ac94 <xTaskResumeAll+0x130>)
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	3b01      	subs	r3, #1
 800ac42:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d1f1      	bne.n	800ac2e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800ac4a:	4b13      	ldr	r3, [pc, #76]	; (800ac98 <xTaskResumeAll+0x134>)
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ac50:	4b10      	ldr	r3, [pc, #64]	; (800ac94 <xTaskResumeAll+0x130>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d009      	beq.n	800ac6c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ac5c:	4b0f      	ldr	r3, [pc, #60]	; (800ac9c <xTaskResumeAll+0x138>)
 800ac5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac62:	601a      	str	r2, [r3, #0]
 800ac64:	f3bf 8f4f 	dsb	sy
 800ac68:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ac6c:	f001 f9fa 	bl	800c064 <vPortExitCritical>

	return xAlreadyYielded;
 800ac70:	68bb      	ldr	r3, [r7, #8]
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3710      	adds	r7, #16
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	bf00      	nop
 800ac7c:	20002520 	.word	0x20002520
 800ac80:	200024f8 	.word	0x200024f8
 800ac84:	200024b8 	.word	0x200024b8
 800ac88:	20002500 	.word	0x20002500
 800ac8c:	20002028 	.word	0x20002028
 800ac90:	20002024 	.word	0x20002024
 800ac94:	2000250c 	.word	0x2000250c
 800ac98:	20002508 	.word	0x20002508
 800ac9c:	e000ed04 	.word	0xe000ed04

0800aca0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aca0:	b480      	push	{r7}
 800aca2:	b083      	sub	sp, #12
 800aca4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aca6:	4b05      	ldr	r3, [pc, #20]	; (800acbc <xTaskGetTickCount+0x1c>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800acac:	687b      	ldr	r3, [r7, #4]
}
 800acae:	4618      	mov	r0, r3
 800acb0:	370c      	adds	r7, #12
 800acb2:	46bd      	mov	sp, r7
 800acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb8:	4770      	bx	lr
 800acba:	bf00      	nop
 800acbc:	200024fc 	.word	0x200024fc

0800acc0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800acc6:	f001 fa7f 	bl	800c1c8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800acca:	2300      	movs	r3, #0
 800accc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800acce:	4b04      	ldr	r3, [pc, #16]	; (800ace0 <xTaskGetTickCountFromISR+0x20>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800acd4:	683b      	ldr	r3, [r7, #0]
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3708      	adds	r7, #8
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	200024fc 	.word	0x200024fc

0800ace4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b086      	sub	sp, #24
 800ace8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800acea:	2300      	movs	r3, #0
 800acec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800acee:	4b4f      	ldr	r3, [pc, #316]	; (800ae2c <xTaskIncrementTick+0x148>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	f040 8089 	bne.w	800ae0a <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800acf8:	4b4d      	ldr	r3, [pc, #308]	; (800ae30 <xTaskIncrementTick+0x14c>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	3301      	adds	r3, #1
 800acfe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ad00:	4a4b      	ldr	r2, [pc, #300]	; (800ae30 <xTaskIncrementTick+0x14c>)
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d120      	bne.n	800ad4e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ad0c:	4b49      	ldr	r3, [pc, #292]	; (800ae34 <xTaskIncrementTick+0x150>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d00a      	beq.n	800ad2c <xTaskIncrementTick+0x48>
	__asm volatile
 800ad16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1a:	f383 8811 	msr	BASEPRI, r3
 800ad1e:	f3bf 8f6f 	isb	sy
 800ad22:	f3bf 8f4f 	dsb	sy
 800ad26:	603b      	str	r3, [r7, #0]
}
 800ad28:	bf00      	nop
 800ad2a:	e7fe      	b.n	800ad2a <xTaskIncrementTick+0x46>
 800ad2c:	4b41      	ldr	r3, [pc, #260]	; (800ae34 <xTaskIncrementTick+0x150>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	60fb      	str	r3, [r7, #12]
 800ad32:	4b41      	ldr	r3, [pc, #260]	; (800ae38 <xTaskIncrementTick+0x154>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4a3f      	ldr	r2, [pc, #252]	; (800ae34 <xTaskIncrementTick+0x150>)
 800ad38:	6013      	str	r3, [r2, #0]
 800ad3a:	4a3f      	ldr	r2, [pc, #252]	; (800ae38 <xTaskIncrementTick+0x154>)
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	6013      	str	r3, [r2, #0]
 800ad40:	4b3e      	ldr	r3, [pc, #248]	; (800ae3c <xTaskIncrementTick+0x158>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	3301      	adds	r3, #1
 800ad46:	4a3d      	ldr	r2, [pc, #244]	; (800ae3c <xTaskIncrementTick+0x158>)
 800ad48:	6013      	str	r3, [r2, #0]
 800ad4a:	f000 fad1 	bl	800b2f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ad4e:	4b3c      	ldr	r3, [pc, #240]	; (800ae40 <xTaskIncrementTick+0x15c>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	693a      	ldr	r2, [r7, #16]
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d349      	bcc.n	800adec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad58:	4b36      	ldr	r3, [pc, #216]	; (800ae34 <xTaskIncrementTick+0x150>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d104      	bne.n	800ad6c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad62:	4b37      	ldr	r3, [pc, #220]	; (800ae40 <xTaskIncrementTick+0x15c>)
 800ad64:	f04f 32ff 	mov.w	r2, #4294967295
 800ad68:	601a      	str	r2, [r3, #0]
					break;
 800ad6a:	e03f      	b.n	800adec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad6c:	4b31      	ldr	r3, [pc, #196]	; (800ae34 <xTaskIncrementTick+0x150>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	68db      	ldr	r3, [r3, #12]
 800ad72:	68db      	ldr	r3, [r3, #12]
 800ad74:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	685b      	ldr	r3, [r3, #4]
 800ad7a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ad7c:	693a      	ldr	r2, [r7, #16]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d203      	bcs.n	800ad8c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ad84:	4a2e      	ldr	r2, [pc, #184]	; (800ae40 <xTaskIncrementTick+0x15c>)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ad8a:	e02f      	b.n	800adec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	3304      	adds	r3, #4
 800ad90:	4618      	mov	r0, r3
 800ad92:	f7fe fbab 	bl	80094ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d004      	beq.n	800ada8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	3318      	adds	r3, #24
 800ada2:	4618      	mov	r0, r3
 800ada4:	f7fe fba2 	bl	80094ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adac:	4b25      	ldr	r3, [pc, #148]	; (800ae44 <xTaskIncrementTick+0x160>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d903      	bls.n	800adbc <xTaskIncrementTick+0xd8>
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb8:	4a22      	ldr	r2, [pc, #136]	; (800ae44 <xTaskIncrementTick+0x160>)
 800adba:	6013      	str	r3, [r2, #0]
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adc0:	4613      	mov	r3, r2
 800adc2:	009b      	lsls	r3, r3, #2
 800adc4:	4413      	add	r3, r2
 800adc6:	009b      	lsls	r3, r3, #2
 800adc8:	4a1f      	ldr	r2, [pc, #124]	; (800ae48 <xTaskIncrementTick+0x164>)
 800adca:	441a      	add	r2, r3
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	3304      	adds	r3, #4
 800add0:	4619      	mov	r1, r3
 800add2:	4610      	mov	r0, r2
 800add4:	f7fe fb2d 	bl	8009432 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800addc:	4b1b      	ldr	r3, [pc, #108]	; (800ae4c <xTaskIncrementTick+0x168>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d3b8      	bcc.n	800ad58 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ade6:	2301      	movs	r3, #1
 800ade8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800adea:	e7b5      	b.n	800ad58 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800adec:	4b17      	ldr	r3, [pc, #92]	; (800ae4c <xTaskIncrementTick+0x168>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adf2:	4915      	ldr	r1, [pc, #84]	; (800ae48 <xTaskIncrementTick+0x164>)
 800adf4:	4613      	mov	r3, r2
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	4413      	add	r3, r2
 800adfa:	009b      	lsls	r3, r3, #2
 800adfc:	440b      	add	r3, r1
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	2b01      	cmp	r3, #1
 800ae02:	d907      	bls.n	800ae14 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800ae04:	2301      	movs	r3, #1
 800ae06:	617b      	str	r3, [r7, #20]
 800ae08:	e004      	b.n	800ae14 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ae0a:	4b11      	ldr	r3, [pc, #68]	; (800ae50 <xTaskIncrementTick+0x16c>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	3301      	adds	r3, #1
 800ae10:	4a0f      	ldr	r2, [pc, #60]	; (800ae50 <xTaskIncrementTick+0x16c>)
 800ae12:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ae14:	4b0f      	ldr	r3, [pc, #60]	; (800ae54 <xTaskIncrementTick+0x170>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d001      	beq.n	800ae20 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ae20:	697b      	ldr	r3, [r7, #20]
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3718      	adds	r7, #24
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}
 800ae2a:	bf00      	nop
 800ae2c:	20002520 	.word	0x20002520
 800ae30:	200024fc 	.word	0x200024fc
 800ae34:	200024b0 	.word	0x200024b0
 800ae38:	200024b4 	.word	0x200024b4
 800ae3c:	20002510 	.word	0x20002510
 800ae40:	20002518 	.word	0x20002518
 800ae44:	20002500 	.word	0x20002500
 800ae48:	20002028 	.word	0x20002028
 800ae4c:	20002024 	.word	0x20002024
 800ae50:	20002508 	.word	0x20002508
 800ae54:	2000250c 	.word	0x2000250c

0800ae58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b085      	sub	sp, #20
 800ae5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ae5e:	4b28      	ldr	r3, [pc, #160]	; (800af00 <vTaskSwitchContext+0xa8>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d003      	beq.n	800ae6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ae66:	4b27      	ldr	r3, [pc, #156]	; (800af04 <vTaskSwitchContext+0xac>)
 800ae68:	2201      	movs	r2, #1
 800ae6a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ae6c:	e041      	b.n	800aef2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800ae6e:	4b25      	ldr	r3, [pc, #148]	; (800af04 <vTaskSwitchContext+0xac>)
 800ae70:	2200      	movs	r2, #0
 800ae72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae74:	4b24      	ldr	r3, [pc, #144]	; (800af08 <vTaskSwitchContext+0xb0>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	60fb      	str	r3, [r7, #12]
 800ae7a:	e010      	b.n	800ae9e <vTaskSwitchContext+0x46>
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d10a      	bne.n	800ae98 <vTaskSwitchContext+0x40>
	__asm volatile
 800ae82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae86:	f383 8811 	msr	BASEPRI, r3
 800ae8a:	f3bf 8f6f 	isb	sy
 800ae8e:	f3bf 8f4f 	dsb	sy
 800ae92:	607b      	str	r3, [r7, #4]
}
 800ae94:	bf00      	nop
 800ae96:	e7fe      	b.n	800ae96 <vTaskSwitchContext+0x3e>
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	3b01      	subs	r3, #1
 800ae9c:	60fb      	str	r3, [r7, #12]
 800ae9e:	491b      	ldr	r1, [pc, #108]	; (800af0c <vTaskSwitchContext+0xb4>)
 800aea0:	68fa      	ldr	r2, [r7, #12]
 800aea2:	4613      	mov	r3, r2
 800aea4:	009b      	lsls	r3, r3, #2
 800aea6:	4413      	add	r3, r2
 800aea8:	009b      	lsls	r3, r3, #2
 800aeaa:	440b      	add	r3, r1
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d0e4      	beq.n	800ae7c <vTaskSwitchContext+0x24>
 800aeb2:	68fa      	ldr	r2, [r7, #12]
 800aeb4:	4613      	mov	r3, r2
 800aeb6:	009b      	lsls	r3, r3, #2
 800aeb8:	4413      	add	r3, r2
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	4a13      	ldr	r2, [pc, #76]	; (800af0c <vTaskSwitchContext+0xb4>)
 800aebe:	4413      	add	r3, r2
 800aec0:	60bb      	str	r3, [r7, #8]
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	685a      	ldr	r2, [r3, #4]
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	605a      	str	r2, [r3, #4]
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	685a      	ldr	r2, [r3, #4]
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	3308      	adds	r3, #8
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d104      	bne.n	800aee2 <vTaskSwitchContext+0x8a>
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	685a      	ldr	r2, [r3, #4]
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	605a      	str	r2, [r3, #4]
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	685b      	ldr	r3, [r3, #4]
 800aee6:	68db      	ldr	r3, [r3, #12]
 800aee8:	4a09      	ldr	r2, [pc, #36]	; (800af10 <vTaskSwitchContext+0xb8>)
 800aeea:	6013      	str	r3, [r2, #0]
 800aeec:	4a06      	ldr	r2, [pc, #24]	; (800af08 <vTaskSwitchContext+0xb0>)
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	6013      	str	r3, [r2, #0]
}
 800aef2:	bf00      	nop
 800aef4:	3714      	adds	r7, #20
 800aef6:	46bd      	mov	sp, r7
 800aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefc:	4770      	bx	lr
 800aefe:	bf00      	nop
 800af00:	20002520 	.word	0x20002520
 800af04:	2000250c 	.word	0x2000250c
 800af08:	20002500 	.word	0x20002500
 800af0c:	20002028 	.word	0x20002028
 800af10:	20002024 	.word	0x20002024

0800af14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b084      	sub	sp, #16
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d10a      	bne.n	800af3a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800af24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af28:	f383 8811 	msr	BASEPRI, r3
 800af2c:	f3bf 8f6f 	isb	sy
 800af30:	f3bf 8f4f 	dsb	sy
 800af34:	60fb      	str	r3, [r7, #12]
}
 800af36:	bf00      	nop
 800af38:	e7fe      	b.n	800af38 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800af3a:	4b07      	ldr	r3, [pc, #28]	; (800af58 <vTaskPlaceOnEventList+0x44>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	3318      	adds	r3, #24
 800af40:	4619      	mov	r1, r3
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f7fe fa99 	bl	800947a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800af48:	2101      	movs	r1, #1
 800af4a:	6838      	ldr	r0, [r7, #0]
 800af4c:	f000 fb8a 	bl	800b664 <prvAddCurrentTaskToDelayedList>
}
 800af50:	bf00      	nop
 800af52:	3710      	adds	r7, #16
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}
 800af58:	20002024 	.word	0x20002024

0800af5c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b086      	sub	sp, #24
 800af60:	af00      	add	r7, sp, #0
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	60b9      	str	r1, [r7, #8]
 800af66:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d10a      	bne.n	800af84 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800af6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af72:	f383 8811 	msr	BASEPRI, r3
 800af76:	f3bf 8f6f 	isb	sy
 800af7a:	f3bf 8f4f 	dsb	sy
 800af7e:	617b      	str	r3, [r7, #20]
}
 800af80:	bf00      	nop
 800af82:	e7fe      	b.n	800af82 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800af84:	4b0a      	ldr	r3, [pc, #40]	; (800afb0 <vTaskPlaceOnEventListRestricted+0x54>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	3318      	adds	r3, #24
 800af8a:	4619      	mov	r1, r3
 800af8c:	68f8      	ldr	r0, [r7, #12]
 800af8e:	f7fe fa50 	bl	8009432 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d002      	beq.n	800af9e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800af98:	f04f 33ff 	mov.w	r3, #4294967295
 800af9c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800af9e:	6879      	ldr	r1, [r7, #4]
 800afa0:	68b8      	ldr	r0, [r7, #8]
 800afa2:	f000 fb5f 	bl	800b664 <prvAddCurrentTaskToDelayedList>
	}
 800afa6:	bf00      	nop
 800afa8:	3718      	adds	r7, #24
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
 800afae:	bf00      	nop
 800afb0:	20002024 	.word	0x20002024

0800afb4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b086      	sub	sp, #24
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	68db      	ldr	r3, [r3, #12]
 800afc0:	68db      	ldr	r3, [r3, #12]
 800afc2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d10a      	bne.n	800afe0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800afca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afce:	f383 8811 	msr	BASEPRI, r3
 800afd2:	f3bf 8f6f 	isb	sy
 800afd6:	f3bf 8f4f 	dsb	sy
 800afda:	60fb      	str	r3, [r7, #12]
}
 800afdc:	bf00      	nop
 800afde:	e7fe      	b.n	800afde <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	3318      	adds	r3, #24
 800afe4:	4618      	mov	r0, r3
 800afe6:	f7fe fa81 	bl	80094ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800afea:	4b1e      	ldr	r3, [pc, #120]	; (800b064 <xTaskRemoveFromEventList+0xb0>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d11d      	bne.n	800b02e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	3304      	adds	r3, #4
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7fe fa78 	bl	80094ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b000:	4b19      	ldr	r3, [pc, #100]	; (800b068 <xTaskRemoveFromEventList+0xb4>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	429a      	cmp	r2, r3
 800b006:	d903      	bls.n	800b010 <xTaskRemoveFromEventList+0x5c>
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b00c:	4a16      	ldr	r2, [pc, #88]	; (800b068 <xTaskRemoveFromEventList+0xb4>)
 800b00e:	6013      	str	r3, [r2, #0]
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b014:	4613      	mov	r3, r2
 800b016:	009b      	lsls	r3, r3, #2
 800b018:	4413      	add	r3, r2
 800b01a:	009b      	lsls	r3, r3, #2
 800b01c:	4a13      	ldr	r2, [pc, #76]	; (800b06c <xTaskRemoveFromEventList+0xb8>)
 800b01e:	441a      	add	r2, r3
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	3304      	adds	r3, #4
 800b024:	4619      	mov	r1, r3
 800b026:	4610      	mov	r0, r2
 800b028:	f7fe fa03 	bl	8009432 <vListInsertEnd>
 800b02c:	e005      	b.n	800b03a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	3318      	adds	r3, #24
 800b032:	4619      	mov	r1, r3
 800b034:	480e      	ldr	r0, [pc, #56]	; (800b070 <xTaskRemoveFromEventList+0xbc>)
 800b036:	f7fe f9fc 	bl	8009432 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b03e:	4b0d      	ldr	r3, [pc, #52]	; (800b074 <xTaskRemoveFromEventList+0xc0>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b044:	429a      	cmp	r2, r3
 800b046:	d905      	bls.n	800b054 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b048:	2301      	movs	r3, #1
 800b04a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b04c:	4b0a      	ldr	r3, [pc, #40]	; (800b078 <xTaskRemoveFromEventList+0xc4>)
 800b04e:	2201      	movs	r2, #1
 800b050:	601a      	str	r2, [r3, #0]
 800b052:	e001      	b.n	800b058 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b054:	2300      	movs	r3, #0
 800b056:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b058:	697b      	ldr	r3, [r7, #20]
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3718      	adds	r7, #24
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}
 800b062:	bf00      	nop
 800b064:	20002520 	.word	0x20002520
 800b068:	20002500 	.word	0x20002500
 800b06c:	20002028 	.word	0x20002028
 800b070:	200024b8 	.word	0x200024b8
 800b074:	20002024 	.word	0x20002024
 800b078:	2000250c 	.word	0x2000250c

0800b07c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b07c:	b480      	push	{r7}
 800b07e:	b083      	sub	sp, #12
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b084:	4b06      	ldr	r3, [pc, #24]	; (800b0a0 <vTaskInternalSetTimeOutState+0x24>)
 800b086:	681a      	ldr	r2, [r3, #0]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b08c:	4b05      	ldr	r3, [pc, #20]	; (800b0a4 <vTaskInternalSetTimeOutState+0x28>)
 800b08e:	681a      	ldr	r2, [r3, #0]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	605a      	str	r2, [r3, #4]
}
 800b094:	bf00      	nop
 800b096:	370c      	adds	r7, #12
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr
 800b0a0:	20002510 	.word	0x20002510
 800b0a4:	200024fc 	.word	0x200024fc

0800b0a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b088      	sub	sp, #32
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d10a      	bne.n	800b0ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0bc:	f383 8811 	msr	BASEPRI, r3
 800b0c0:	f3bf 8f6f 	isb	sy
 800b0c4:	f3bf 8f4f 	dsb	sy
 800b0c8:	613b      	str	r3, [r7, #16]
}
 800b0ca:	bf00      	nop
 800b0cc:	e7fe      	b.n	800b0cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d10a      	bne.n	800b0ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d8:	f383 8811 	msr	BASEPRI, r3
 800b0dc:	f3bf 8f6f 	isb	sy
 800b0e0:	f3bf 8f4f 	dsb	sy
 800b0e4:	60fb      	str	r3, [r7, #12]
}
 800b0e6:	bf00      	nop
 800b0e8:	e7fe      	b.n	800b0e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b0ea:	f000 ff8b 	bl	800c004 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b0ee:	4b1d      	ldr	r3, [pc, #116]	; (800b164 <xTaskCheckForTimeOut+0xbc>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	69ba      	ldr	r2, [r7, #24]
 800b0fa:	1ad3      	subs	r3, r2, r3
 800b0fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b106:	d102      	bne.n	800b10e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b108:	2300      	movs	r3, #0
 800b10a:	61fb      	str	r3, [r7, #28]
 800b10c:	e023      	b.n	800b156 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681a      	ldr	r2, [r3, #0]
 800b112:	4b15      	ldr	r3, [pc, #84]	; (800b168 <xTaskCheckForTimeOut+0xc0>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	429a      	cmp	r2, r3
 800b118:	d007      	beq.n	800b12a <xTaskCheckForTimeOut+0x82>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	69ba      	ldr	r2, [r7, #24]
 800b120:	429a      	cmp	r2, r3
 800b122:	d302      	bcc.n	800b12a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b124:	2301      	movs	r3, #1
 800b126:	61fb      	str	r3, [r7, #28]
 800b128:	e015      	b.n	800b156 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	697a      	ldr	r2, [r7, #20]
 800b130:	429a      	cmp	r2, r3
 800b132:	d20b      	bcs.n	800b14c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	681a      	ldr	r2, [r3, #0]
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	1ad2      	subs	r2, r2, r3
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f7ff ff9b 	bl	800b07c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b146:	2300      	movs	r3, #0
 800b148:	61fb      	str	r3, [r7, #28]
 800b14a:	e004      	b.n	800b156 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	2200      	movs	r2, #0
 800b150:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b152:	2301      	movs	r3, #1
 800b154:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b156:	f000 ff85 	bl	800c064 <vPortExitCritical>

	return xReturn;
 800b15a:	69fb      	ldr	r3, [r7, #28]
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3720      	adds	r7, #32
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}
 800b164:	200024fc 	.word	0x200024fc
 800b168:	20002510 	.word	0x20002510

0800b16c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b16c:	b480      	push	{r7}
 800b16e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b170:	4b03      	ldr	r3, [pc, #12]	; (800b180 <vTaskMissedYield+0x14>)
 800b172:	2201      	movs	r2, #1
 800b174:	601a      	str	r2, [r3, #0]
}
 800b176:	bf00      	nop
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr
 800b180:	2000250c 	.word	0x2000250c

0800b184 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b082      	sub	sp, #8
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b18c:	f000 f852 	bl	800b234 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b190:	4b06      	ldr	r3, [pc, #24]	; (800b1ac <prvIdleTask+0x28>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	2b01      	cmp	r3, #1
 800b196:	d9f9      	bls.n	800b18c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b198:	4b05      	ldr	r3, [pc, #20]	; (800b1b0 <prvIdleTask+0x2c>)
 800b19a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b19e:	601a      	str	r2, [r3, #0]
 800b1a0:	f3bf 8f4f 	dsb	sy
 800b1a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b1a8:	e7f0      	b.n	800b18c <prvIdleTask+0x8>
 800b1aa:	bf00      	nop
 800b1ac:	20002028 	.word	0x20002028
 800b1b0:	e000ed04 	.word	0xe000ed04

0800b1b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b082      	sub	sp, #8
 800b1b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	607b      	str	r3, [r7, #4]
 800b1be:	e00c      	b.n	800b1da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b1c0:	687a      	ldr	r2, [r7, #4]
 800b1c2:	4613      	mov	r3, r2
 800b1c4:	009b      	lsls	r3, r3, #2
 800b1c6:	4413      	add	r3, r2
 800b1c8:	009b      	lsls	r3, r3, #2
 800b1ca:	4a12      	ldr	r2, [pc, #72]	; (800b214 <prvInitialiseTaskLists+0x60>)
 800b1cc:	4413      	add	r3, r2
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f7fe f902 	bl	80093d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	3301      	adds	r3, #1
 800b1d8:	607b      	str	r3, [r7, #4]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2b37      	cmp	r3, #55	; 0x37
 800b1de:	d9ef      	bls.n	800b1c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b1e0:	480d      	ldr	r0, [pc, #52]	; (800b218 <prvInitialiseTaskLists+0x64>)
 800b1e2:	f7fe f8f9 	bl	80093d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b1e6:	480d      	ldr	r0, [pc, #52]	; (800b21c <prvInitialiseTaskLists+0x68>)
 800b1e8:	f7fe f8f6 	bl	80093d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b1ec:	480c      	ldr	r0, [pc, #48]	; (800b220 <prvInitialiseTaskLists+0x6c>)
 800b1ee:	f7fe f8f3 	bl	80093d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b1f2:	480c      	ldr	r0, [pc, #48]	; (800b224 <prvInitialiseTaskLists+0x70>)
 800b1f4:	f7fe f8f0 	bl	80093d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b1f8:	480b      	ldr	r0, [pc, #44]	; (800b228 <prvInitialiseTaskLists+0x74>)
 800b1fa:	f7fe f8ed 	bl	80093d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b1fe:	4b0b      	ldr	r3, [pc, #44]	; (800b22c <prvInitialiseTaskLists+0x78>)
 800b200:	4a05      	ldr	r2, [pc, #20]	; (800b218 <prvInitialiseTaskLists+0x64>)
 800b202:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b204:	4b0a      	ldr	r3, [pc, #40]	; (800b230 <prvInitialiseTaskLists+0x7c>)
 800b206:	4a05      	ldr	r2, [pc, #20]	; (800b21c <prvInitialiseTaskLists+0x68>)
 800b208:	601a      	str	r2, [r3, #0]
}
 800b20a:	bf00      	nop
 800b20c:	3708      	adds	r7, #8
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
 800b212:	bf00      	nop
 800b214:	20002028 	.word	0x20002028
 800b218:	20002488 	.word	0x20002488
 800b21c:	2000249c 	.word	0x2000249c
 800b220:	200024b8 	.word	0x200024b8
 800b224:	200024cc 	.word	0x200024cc
 800b228:	200024e4 	.word	0x200024e4
 800b22c:	200024b0 	.word	0x200024b0
 800b230:	200024b4 	.word	0x200024b4

0800b234 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b082      	sub	sp, #8
 800b238:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b23a:	e019      	b.n	800b270 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b23c:	f000 fee2 	bl	800c004 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b240:	4b10      	ldr	r3, [pc, #64]	; (800b284 <prvCheckTasksWaitingTermination+0x50>)
 800b242:	68db      	ldr	r3, [r3, #12]
 800b244:	68db      	ldr	r3, [r3, #12]
 800b246:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	3304      	adds	r3, #4
 800b24c:	4618      	mov	r0, r3
 800b24e:	f7fe f94d 	bl	80094ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b252:	4b0d      	ldr	r3, [pc, #52]	; (800b288 <prvCheckTasksWaitingTermination+0x54>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	3b01      	subs	r3, #1
 800b258:	4a0b      	ldr	r2, [pc, #44]	; (800b288 <prvCheckTasksWaitingTermination+0x54>)
 800b25a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b25c:	4b0b      	ldr	r3, [pc, #44]	; (800b28c <prvCheckTasksWaitingTermination+0x58>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	3b01      	subs	r3, #1
 800b262:	4a0a      	ldr	r2, [pc, #40]	; (800b28c <prvCheckTasksWaitingTermination+0x58>)
 800b264:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b266:	f000 fefd 	bl	800c064 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f000 f810 	bl	800b290 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b270:	4b06      	ldr	r3, [pc, #24]	; (800b28c <prvCheckTasksWaitingTermination+0x58>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d1e1      	bne.n	800b23c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b278:	bf00      	nop
 800b27a:	bf00      	nop
 800b27c:	3708      	adds	r7, #8
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
 800b282:	bf00      	nop
 800b284:	200024cc 	.word	0x200024cc
 800b288:	200024f8 	.word	0x200024f8
 800b28c:	200024e0 	.word	0x200024e0

0800b290 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d108      	bne.n	800b2b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f001 f892 	bl	800c3d0 <vPortFree>
				vPortFree( pxTCB );
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f001 f88f 	bl	800c3d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b2b2:	e018      	b.n	800b2e6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	d103      	bne.n	800b2c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f001 f886 	bl	800c3d0 <vPortFree>
	}
 800b2c4:	e00f      	b.n	800b2e6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b2cc:	2b02      	cmp	r3, #2
 800b2ce:	d00a      	beq.n	800b2e6 <prvDeleteTCB+0x56>
	__asm volatile
 800b2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d4:	f383 8811 	msr	BASEPRI, r3
 800b2d8:	f3bf 8f6f 	isb	sy
 800b2dc:	f3bf 8f4f 	dsb	sy
 800b2e0:	60fb      	str	r3, [r7, #12]
}
 800b2e2:	bf00      	nop
 800b2e4:	e7fe      	b.n	800b2e4 <prvDeleteTCB+0x54>
	}
 800b2e6:	bf00      	nop
 800b2e8:	3710      	adds	r7, #16
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
	...

0800b2f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b083      	sub	sp, #12
 800b2f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b2f6:	4b0c      	ldr	r3, [pc, #48]	; (800b328 <prvResetNextTaskUnblockTime+0x38>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d104      	bne.n	800b30a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b300:	4b0a      	ldr	r3, [pc, #40]	; (800b32c <prvResetNextTaskUnblockTime+0x3c>)
 800b302:	f04f 32ff 	mov.w	r2, #4294967295
 800b306:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b308:	e008      	b.n	800b31c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b30a:	4b07      	ldr	r3, [pc, #28]	; (800b328 <prvResetNextTaskUnblockTime+0x38>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	68db      	ldr	r3, [r3, #12]
 800b310:	68db      	ldr	r3, [r3, #12]
 800b312:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	4a04      	ldr	r2, [pc, #16]	; (800b32c <prvResetNextTaskUnblockTime+0x3c>)
 800b31a:	6013      	str	r3, [r2, #0]
}
 800b31c:	bf00      	nop
 800b31e:	370c      	adds	r7, #12
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr
 800b328:	200024b0 	.word	0x200024b0
 800b32c:	20002518 	.word	0x20002518

0800b330 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b330:	b480      	push	{r7}
 800b332:	b083      	sub	sp, #12
 800b334:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b336:	4b05      	ldr	r3, [pc, #20]	; (800b34c <xTaskGetCurrentTaskHandle+0x1c>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b33c:	687b      	ldr	r3, [r7, #4]
	}
 800b33e:	4618      	mov	r0, r3
 800b340:	370c      	adds	r7, #12
 800b342:	46bd      	mov	sp, r7
 800b344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b348:	4770      	bx	lr
 800b34a:	bf00      	nop
 800b34c:	20002024 	.word	0x20002024

0800b350 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b350:	b480      	push	{r7}
 800b352:	b083      	sub	sp, #12
 800b354:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b356:	4b0b      	ldr	r3, [pc, #44]	; (800b384 <xTaskGetSchedulerState+0x34>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d102      	bne.n	800b364 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b35e:	2301      	movs	r3, #1
 800b360:	607b      	str	r3, [r7, #4]
 800b362:	e008      	b.n	800b376 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b364:	4b08      	ldr	r3, [pc, #32]	; (800b388 <xTaskGetSchedulerState+0x38>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d102      	bne.n	800b372 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b36c:	2302      	movs	r3, #2
 800b36e:	607b      	str	r3, [r7, #4]
 800b370:	e001      	b.n	800b376 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b372:	2300      	movs	r3, #0
 800b374:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b376:	687b      	ldr	r3, [r7, #4]
	}
 800b378:	4618      	mov	r0, r3
 800b37a:	370c      	adds	r7, #12
 800b37c:	46bd      	mov	sp, r7
 800b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b382:	4770      	bx	lr
 800b384:	20002504 	.word	0x20002504
 800b388:	20002520 	.word	0x20002520

0800b38c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b084      	sub	sp, #16
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b398:	2300      	movs	r3, #0
 800b39a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d051      	beq.n	800b446 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3a6:	4b2a      	ldr	r3, [pc, #168]	; (800b450 <xTaskPriorityInherit+0xc4>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d241      	bcs.n	800b434 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	699b      	ldr	r3, [r3, #24]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	db06      	blt.n	800b3c6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3b8:	4b25      	ldr	r3, [pc, #148]	; (800b450 <xTaskPriorityInherit+0xc4>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	6959      	ldr	r1, [r3, #20]
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3ce:	4613      	mov	r3, r2
 800b3d0:	009b      	lsls	r3, r3, #2
 800b3d2:	4413      	add	r3, r2
 800b3d4:	009b      	lsls	r3, r3, #2
 800b3d6:	4a1f      	ldr	r2, [pc, #124]	; (800b454 <xTaskPriorityInherit+0xc8>)
 800b3d8:	4413      	add	r3, r2
 800b3da:	4299      	cmp	r1, r3
 800b3dc:	d122      	bne.n	800b424 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	3304      	adds	r3, #4
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f7fe f882 	bl	80094ec <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b3e8:	4b19      	ldr	r3, [pc, #100]	; (800b450 <xTaskPriorityInherit+0xc4>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3f6:	4b18      	ldr	r3, [pc, #96]	; (800b458 <xTaskPriorityInherit+0xcc>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d903      	bls.n	800b406 <xTaskPriorityInherit+0x7a>
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b402:	4a15      	ldr	r2, [pc, #84]	; (800b458 <xTaskPriorityInherit+0xcc>)
 800b404:	6013      	str	r3, [r2, #0]
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b40a:	4613      	mov	r3, r2
 800b40c:	009b      	lsls	r3, r3, #2
 800b40e:	4413      	add	r3, r2
 800b410:	009b      	lsls	r3, r3, #2
 800b412:	4a10      	ldr	r2, [pc, #64]	; (800b454 <xTaskPriorityInherit+0xc8>)
 800b414:	441a      	add	r2, r3
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	3304      	adds	r3, #4
 800b41a:	4619      	mov	r1, r3
 800b41c:	4610      	mov	r0, r2
 800b41e:	f7fe f808 	bl	8009432 <vListInsertEnd>
 800b422:	e004      	b.n	800b42e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b424:	4b0a      	ldr	r3, [pc, #40]	; (800b450 <xTaskPriorityInherit+0xc4>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b42e:	2301      	movs	r3, #1
 800b430:	60fb      	str	r3, [r7, #12]
 800b432:	e008      	b.n	800b446 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b438:	4b05      	ldr	r3, [pc, #20]	; (800b450 <xTaskPriorityInherit+0xc4>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b43e:	429a      	cmp	r2, r3
 800b440:	d201      	bcs.n	800b446 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b442:	2301      	movs	r3, #1
 800b444:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b446:	68fb      	ldr	r3, [r7, #12]
	}
 800b448:	4618      	mov	r0, r3
 800b44a:	3710      	adds	r7, #16
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}
 800b450:	20002024 	.word	0x20002024
 800b454:	20002028 	.word	0x20002028
 800b458:	20002500 	.word	0x20002500

0800b45c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b086      	sub	sp, #24
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b468:	2300      	movs	r3, #0
 800b46a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d056      	beq.n	800b520 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b472:	4b2e      	ldr	r3, [pc, #184]	; (800b52c <xTaskPriorityDisinherit+0xd0>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	693a      	ldr	r2, [r7, #16]
 800b478:	429a      	cmp	r2, r3
 800b47a:	d00a      	beq.n	800b492 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b480:	f383 8811 	msr	BASEPRI, r3
 800b484:	f3bf 8f6f 	isb	sy
 800b488:	f3bf 8f4f 	dsb	sy
 800b48c:	60fb      	str	r3, [r7, #12]
}
 800b48e:	bf00      	nop
 800b490:	e7fe      	b.n	800b490 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b496:	2b00      	cmp	r3, #0
 800b498:	d10a      	bne.n	800b4b0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b49e:	f383 8811 	msr	BASEPRI, r3
 800b4a2:	f3bf 8f6f 	isb	sy
 800b4a6:	f3bf 8f4f 	dsb	sy
 800b4aa:	60bb      	str	r3, [r7, #8]
}
 800b4ac:	bf00      	nop
 800b4ae:	e7fe      	b.n	800b4ae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4b4:	1e5a      	subs	r2, r3, #1
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b4ba:	693b      	ldr	r3, [r7, #16]
 800b4bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d02c      	beq.n	800b520 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d128      	bne.n	800b520 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	3304      	adds	r3, #4
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7fe f80a 	bl	80094ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4e4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b4ec:	693b      	ldr	r3, [r7, #16]
 800b4ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4f0:	4b0f      	ldr	r3, [pc, #60]	; (800b530 <xTaskPriorityDisinherit+0xd4>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d903      	bls.n	800b500 <xTaskPriorityDisinherit+0xa4>
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4fc:	4a0c      	ldr	r2, [pc, #48]	; (800b530 <xTaskPriorityDisinherit+0xd4>)
 800b4fe:	6013      	str	r3, [r2, #0]
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b504:	4613      	mov	r3, r2
 800b506:	009b      	lsls	r3, r3, #2
 800b508:	4413      	add	r3, r2
 800b50a:	009b      	lsls	r3, r3, #2
 800b50c:	4a09      	ldr	r2, [pc, #36]	; (800b534 <xTaskPriorityDisinherit+0xd8>)
 800b50e:	441a      	add	r2, r3
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	3304      	adds	r3, #4
 800b514:	4619      	mov	r1, r3
 800b516:	4610      	mov	r0, r2
 800b518:	f7fd ff8b 	bl	8009432 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b51c:	2301      	movs	r3, #1
 800b51e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b520:	697b      	ldr	r3, [r7, #20]
	}
 800b522:	4618      	mov	r0, r3
 800b524:	3718      	adds	r7, #24
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	bf00      	nop
 800b52c:	20002024 	.word	0x20002024
 800b530:	20002500 	.word	0x20002500
 800b534:	20002028 	.word	0x20002028

0800b538 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b088      	sub	sp, #32
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b546:	2301      	movs	r3, #1
 800b548:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d06a      	beq.n	800b626 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b550:	69bb      	ldr	r3, [r7, #24]
 800b552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b554:	2b00      	cmp	r3, #0
 800b556:	d10a      	bne.n	800b56e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b55c:	f383 8811 	msr	BASEPRI, r3
 800b560:	f3bf 8f6f 	isb	sy
 800b564:	f3bf 8f4f 	dsb	sy
 800b568:	60fb      	str	r3, [r7, #12]
}
 800b56a:	bf00      	nop
 800b56c:	e7fe      	b.n	800b56c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b56e:	69bb      	ldr	r3, [r7, #24]
 800b570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b572:	683a      	ldr	r2, [r7, #0]
 800b574:	429a      	cmp	r2, r3
 800b576:	d902      	bls.n	800b57e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	61fb      	str	r3, [r7, #28]
 800b57c:	e002      	b.n	800b584 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b57e:	69bb      	ldr	r3, [r7, #24]
 800b580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b582:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b584:	69bb      	ldr	r3, [r7, #24]
 800b586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b588:	69fa      	ldr	r2, [r7, #28]
 800b58a:	429a      	cmp	r2, r3
 800b58c:	d04b      	beq.n	800b626 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b58e:	69bb      	ldr	r3, [r7, #24]
 800b590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b592:	697a      	ldr	r2, [r7, #20]
 800b594:	429a      	cmp	r2, r3
 800b596:	d146      	bne.n	800b626 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b598:	4b25      	ldr	r3, [pc, #148]	; (800b630 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	69ba      	ldr	r2, [r7, #24]
 800b59e:	429a      	cmp	r2, r3
 800b5a0:	d10a      	bne.n	800b5b8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a6:	f383 8811 	msr	BASEPRI, r3
 800b5aa:	f3bf 8f6f 	isb	sy
 800b5ae:	f3bf 8f4f 	dsb	sy
 800b5b2:	60bb      	str	r3, [r7, #8]
}
 800b5b4:	bf00      	nop
 800b5b6:	e7fe      	b.n	800b5b6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b5b8:	69bb      	ldr	r3, [r7, #24]
 800b5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5bc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b5be:	69bb      	ldr	r3, [r7, #24]
 800b5c0:	69fa      	ldr	r2, [r7, #28]
 800b5c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b5c4:	69bb      	ldr	r3, [r7, #24]
 800b5c6:	699b      	ldr	r3, [r3, #24]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	db04      	blt.n	800b5d6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5cc:	69fb      	ldr	r3, [r7, #28]
 800b5ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b5d2:	69bb      	ldr	r3, [r7, #24]
 800b5d4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b5d6:	69bb      	ldr	r3, [r7, #24]
 800b5d8:	6959      	ldr	r1, [r3, #20]
 800b5da:	693a      	ldr	r2, [r7, #16]
 800b5dc:	4613      	mov	r3, r2
 800b5de:	009b      	lsls	r3, r3, #2
 800b5e0:	4413      	add	r3, r2
 800b5e2:	009b      	lsls	r3, r3, #2
 800b5e4:	4a13      	ldr	r2, [pc, #76]	; (800b634 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b5e6:	4413      	add	r3, r2
 800b5e8:	4299      	cmp	r1, r3
 800b5ea:	d11c      	bne.n	800b626 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b5ec:	69bb      	ldr	r3, [r7, #24]
 800b5ee:	3304      	adds	r3, #4
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	f7fd ff7b 	bl	80094ec <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b5f6:	69bb      	ldr	r3, [r7, #24]
 800b5f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5fa:	4b0f      	ldr	r3, [pc, #60]	; (800b638 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	429a      	cmp	r2, r3
 800b600:	d903      	bls.n	800b60a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b602:	69bb      	ldr	r3, [r7, #24]
 800b604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b606:	4a0c      	ldr	r2, [pc, #48]	; (800b638 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b608:	6013      	str	r3, [r2, #0]
 800b60a:	69bb      	ldr	r3, [r7, #24]
 800b60c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b60e:	4613      	mov	r3, r2
 800b610:	009b      	lsls	r3, r3, #2
 800b612:	4413      	add	r3, r2
 800b614:	009b      	lsls	r3, r3, #2
 800b616:	4a07      	ldr	r2, [pc, #28]	; (800b634 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b618:	441a      	add	r2, r3
 800b61a:	69bb      	ldr	r3, [r7, #24]
 800b61c:	3304      	adds	r3, #4
 800b61e:	4619      	mov	r1, r3
 800b620:	4610      	mov	r0, r2
 800b622:	f7fd ff06 	bl	8009432 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b626:	bf00      	nop
 800b628:	3720      	adds	r7, #32
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	bf00      	nop
 800b630:	20002024 	.word	0x20002024
 800b634:	20002028 	.word	0x20002028
 800b638:	20002500 	.word	0x20002500

0800b63c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b63c:	b480      	push	{r7}
 800b63e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b640:	4b07      	ldr	r3, [pc, #28]	; (800b660 <pvTaskIncrementMutexHeldCount+0x24>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d004      	beq.n	800b652 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b648:	4b05      	ldr	r3, [pc, #20]	; (800b660 <pvTaskIncrementMutexHeldCount+0x24>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b64e:	3201      	adds	r2, #1
 800b650:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b652:	4b03      	ldr	r3, [pc, #12]	; (800b660 <pvTaskIncrementMutexHeldCount+0x24>)
 800b654:	681b      	ldr	r3, [r3, #0]
	}
 800b656:	4618      	mov	r0, r3
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr
 800b660:	20002024 	.word	0x20002024

0800b664 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b084      	sub	sp, #16
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b66e:	4b21      	ldr	r3, [pc, #132]	; (800b6f4 <prvAddCurrentTaskToDelayedList+0x90>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b674:	4b20      	ldr	r3, [pc, #128]	; (800b6f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	3304      	adds	r3, #4
 800b67a:	4618      	mov	r0, r3
 800b67c:	f7fd ff36 	bl	80094ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b686:	d10a      	bne.n	800b69e <prvAddCurrentTaskToDelayedList+0x3a>
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d007      	beq.n	800b69e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b68e:	4b1a      	ldr	r3, [pc, #104]	; (800b6f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	3304      	adds	r3, #4
 800b694:	4619      	mov	r1, r3
 800b696:	4819      	ldr	r0, [pc, #100]	; (800b6fc <prvAddCurrentTaskToDelayedList+0x98>)
 800b698:	f7fd fecb 	bl	8009432 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b69c:	e026      	b.n	800b6ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b69e:	68fa      	ldr	r2, [r7, #12]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	4413      	add	r3, r2
 800b6a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b6a6:	4b14      	ldr	r3, [pc, #80]	; (800b6f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	68ba      	ldr	r2, [r7, #8]
 800b6ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b6ae:	68ba      	ldr	r2, [r7, #8]
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	d209      	bcs.n	800b6ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b6b6:	4b12      	ldr	r3, [pc, #72]	; (800b700 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b6b8:	681a      	ldr	r2, [r3, #0]
 800b6ba:	4b0f      	ldr	r3, [pc, #60]	; (800b6f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	3304      	adds	r3, #4
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	4610      	mov	r0, r2
 800b6c4:	f7fd fed9 	bl	800947a <vListInsert>
}
 800b6c8:	e010      	b.n	800b6ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b6ca:	4b0e      	ldr	r3, [pc, #56]	; (800b704 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b6cc:	681a      	ldr	r2, [r3, #0]
 800b6ce:	4b0a      	ldr	r3, [pc, #40]	; (800b6f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	3304      	adds	r3, #4
 800b6d4:	4619      	mov	r1, r3
 800b6d6:	4610      	mov	r0, r2
 800b6d8:	f7fd fecf 	bl	800947a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b6dc:	4b0a      	ldr	r3, [pc, #40]	; (800b708 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	68ba      	ldr	r2, [r7, #8]
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	d202      	bcs.n	800b6ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b6e6:	4a08      	ldr	r2, [pc, #32]	; (800b708 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	6013      	str	r3, [r2, #0]
}
 800b6ec:	bf00      	nop
 800b6ee:	3710      	adds	r7, #16
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}
 800b6f4:	200024fc 	.word	0x200024fc
 800b6f8:	20002024 	.word	0x20002024
 800b6fc:	200024e4 	.word	0x200024e4
 800b700:	200024b4 	.word	0x200024b4
 800b704:	200024b0 	.word	0x200024b0
 800b708:	20002518 	.word	0x20002518

0800b70c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b08a      	sub	sp, #40	; 0x28
 800b710:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b712:	2300      	movs	r3, #0
 800b714:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b716:	f000 fb07 	bl	800bd28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b71a:	4b1c      	ldr	r3, [pc, #112]	; (800b78c <xTimerCreateTimerTask+0x80>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d021      	beq.n	800b766 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b722:	2300      	movs	r3, #0
 800b724:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b726:	2300      	movs	r3, #0
 800b728:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b72a:	1d3a      	adds	r2, r7, #4
 800b72c:	f107 0108 	add.w	r1, r7, #8
 800b730:	f107 030c 	add.w	r3, r7, #12
 800b734:	4618      	mov	r0, r3
 800b736:	f7fd fe35 	bl	80093a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b73a:	6879      	ldr	r1, [r7, #4]
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	68fa      	ldr	r2, [r7, #12]
 800b740:	9202      	str	r2, [sp, #8]
 800b742:	9301      	str	r3, [sp, #4]
 800b744:	2302      	movs	r3, #2
 800b746:	9300      	str	r3, [sp, #0]
 800b748:	2300      	movs	r3, #0
 800b74a:	460a      	mov	r2, r1
 800b74c:	4910      	ldr	r1, [pc, #64]	; (800b790 <xTimerCreateTimerTask+0x84>)
 800b74e:	4811      	ldr	r0, [pc, #68]	; (800b794 <xTimerCreateTimerTask+0x88>)
 800b750:	f7fe ffbe 	bl	800a6d0 <xTaskCreateStatic>
 800b754:	4603      	mov	r3, r0
 800b756:	4a10      	ldr	r2, [pc, #64]	; (800b798 <xTimerCreateTimerTask+0x8c>)
 800b758:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b75a:	4b0f      	ldr	r3, [pc, #60]	; (800b798 <xTimerCreateTimerTask+0x8c>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d001      	beq.n	800b766 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b762:	2301      	movs	r3, #1
 800b764:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d10a      	bne.n	800b782 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b770:	f383 8811 	msr	BASEPRI, r3
 800b774:	f3bf 8f6f 	isb	sy
 800b778:	f3bf 8f4f 	dsb	sy
 800b77c:	613b      	str	r3, [r7, #16]
}
 800b77e:	bf00      	nop
 800b780:	e7fe      	b.n	800b780 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b782:	697b      	ldr	r3, [r7, #20]
}
 800b784:	4618      	mov	r0, r3
 800b786:	3718      	adds	r7, #24
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}
 800b78c:	20002554 	.word	0x20002554
 800b790:	0802156c 	.word	0x0802156c
 800b794:	0800b8d1 	.word	0x0800b8d1
 800b798:	20002558 	.word	0x20002558

0800b79c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b08a      	sub	sp, #40	; 0x28
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	60f8      	str	r0, [r7, #12]
 800b7a4:	60b9      	str	r1, [r7, #8]
 800b7a6:	607a      	str	r2, [r7, #4]
 800b7a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d10a      	bne.n	800b7ca <xTimerGenericCommand+0x2e>
	__asm volatile
 800b7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b8:	f383 8811 	msr	BASEPRI, r3
 800b7bc:	f3bf 8f6f 	isb	sy
 800b7c0:	f3bf 8f4f 	dsb	sy
 800b7c4:	623b      	str	r3, [r7, #32]
}
 800b7c6:	bf00      	nop
 800b7c8:	e7fe      	b.n	800b7c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b7ca:	4b1a      	ldr	r3, [pc, #104]	; (800b834 <xTimerGenericCommand+0x98>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d02a      	beq.n	800b828 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	2b05      	cmp	r3, #5
 800b7e2:	dc18      	bgt.n	800b816 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b7e4:	f7ff fdb4 	bl	800b350 <xTaskGetSchedulerState>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	2b02      	cmp	r3, #2
 800b7ec:	d109      	bne.n	800b802 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b7ee:	4b11      	ldr	r3, [pc, #68]	; (800b834 <xTimerGenericCommand+0x98>)
 800b7f0:	6818      	ldr	r0, [r3, #0]
 800b7f2:	f107 0110 	add.w	r1, r7, #16
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7fa:	f7fe f905 	bl	8009a08 <xQueueGenericSend>
 800b7fe:	6278      	str	r0, [r7, #36]	; 0x24
 800b800:	e012      	b.n	800b828 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b802:	4b0c      	ldr	r3, [pc, #48]	; (800b834 <xTimerGenericCommand+0x98>)
 800b804:	6818      	ldr	r0, [r3, #0]
 800b806:	f107 0110 	add.w	r1, r7, #16
 800b80a:	2300      	movs	r3, #0
 800b80c:	2200      	movs	r2, #0
 800b80e:	f7fe f8fb 	bl	8009a08 <xQueueGenericSend>
 800b812:	6278      	str	r0, [r7, #36]	; 0x24
 800b814:	e008      	b.n	800b828 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b816:	4b07      	ldr	r3, [pc, #28]	; (800b834 <xTimerGenericCommand+0x98>)
 800b818:	6818      	ldr	r0, [r3, #0]
 800b81a:	f107 0110 	add.w	r1, r7, #16
 800b81e:	2300      	movs	r3, #0
 800b820:	683a      	ldr	r2, [r7, #0]
 800b822:	f7fe f9ef 	bl	8009c04 <xQueueGenericSendFromISR>
 800b826:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3728      	adds	r7, #40	; 0x28
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}
 800b832:	bf00      	nop
 800b834:	20002554 	.word	0x20002554

0800b838 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b088      	sub	sp, #32
 800b83c:	af02      	add	r7, sp, #8
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b842:	4b22      	ldr	r3, [pc, #136]	; (800b8cc <prvProcessExpiredTimer+0x94>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	68db      	ldr	r3, [r3, #12]
 800b848:	68db      	ldr	r3, [r3, #12]
 800b84a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	3304      	adds	r3, #4
 800b850:	4618      	mov	r0, r3
 800b852:	f7fd fe4b 	bl	80094ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b85c:	f003 0304 	and.w	r3, r3, #4
 800b860:	2b00      	cmp	r3, #0
 800b862:	d022      	beq.n	800b8aa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	699a      	ldr	r2, [r3, #24]
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	18d1      	adds	r1, r2, r3
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	683a      	ldr	r2, [r7, #0]
 800b870:	6978      	ldr	r0, [r7, #20]
 800b872:	f000 f8d1 	bl	800ba18 <prvInsertTimerInActiveList>
 800b876:	4603      	mov	r3, r0
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d01f      	beq.n	800b8bc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b87c:	2300      	movs	r3, #0
 800b87e:	9300      	str	r3, [sp, #0]
 800b880:	2300      	movs	r3, #0
 800b882:	687a      	ldr	r2, [r7, #4]
 800b884:	2100      	movs	r1, #0
 800b886:	6978      	ldr	r0, [r7, #20]
 800b888:	f7ff ff88 	bl	800b79c <xTimerGenericCommand>
 800b88c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d113      	bne.n	800b8bc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b898:	f383 8811 	msr	BASEPRI, r3
 800b89c:	f3bf 8f6f 	isb	sy
 800b8a0:	f3bf 8f4f 	dsb	sy
 800b8a4:	60fb      	str	r3, [r7, #12]
}
 800b8a6:	bf00      	nop
 800b8a8:	e7fe      	b.n	800b8a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8b0:	f023 0301 	bic.w	r3, r3, #1
 800b8b4:	b2da      	uxtb	r2, r3
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	6a1b      	ldr	r3, [r3, #32]
 800b8c0:	6978      	ldr	r0, [r7, #20]
 800b8c2:	4798      	blx	r3
}
 800b8c4:	bf00      	nop
 800b8c6:	3718      	adds	r7, #24
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}
 800b8cc:	2000254c 	.word	0x2000254c

0800b8d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b084      	sub	sp, #16
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b8d8:	f107 0308 	add.w	r3, r7, #8
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f000 f857 	bl	800b990 <prvGetNextExpireTime>
 800b8e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	68f8      	ldr	r0, [r7, #12]
 800b8ea:	f000 f803 	bl	800b8f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b8ee:	f000 f8d5 	bl	800ba9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b8f2:	e7f1      	b.n	800b8d8 <prvTimerTask+0x8>

0800b8f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b084      	sub	sp, #16
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b8fe:	f7ff f923 	bl	800ab48 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b902:	f107 0308 	add.w	r3, r7, #8
 800b906:	4618      	mov	r0, r3
 800b908:	f000 f866 	bl	800b9d8 <prvSampleTimeNow>
 800b90c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d130      	bne.n	800b976 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d10a      	bne.n	800b930 <prvProcessTimerOrBlockTask+0x3c>
 800b91a:	687a      	ldr	r2, [r7, #4]
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	429a      	cmp	r2, r3
 800b920:	d806      	bhi.n	800b930 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b922:	f7ff f91f 	bl	800ab64 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b926:	68f9      	ldr	r1, [r7, #12]
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f7ff ff85 	bl	800b838 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b92e:	e024      	b.n	800b97a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d008      	beq.n	800b948 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b936:	4b13      	ldr	r3, [pc, #76]	; (800b984 <prvProcessTimerOrBlockTask+0x90>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d101      	bne.n	800b944 <prvProcessTimerOrBlockTask+0x50>
 800b940:	2301      	movs	r3, #1
 800b942:	e000      	b.n	800b946 <prvProcessTimerOrBlockTask+0x52>
 800b944:	2300      	movs	r3, #0
 800b946:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b948:	4b0f      	ldr	r3, [pc, #60]	; (800b988 <prvProcessTimerOrBlockTask+0x94>)
 800b94a:	6818      	ldr	r0, [r3, #0]
 800b94c:	687a      	ldr	r2, [r7, #4]
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	1ad3      	subs	r3, r2, r3
 800b952:	683a      	ldr	r2, [r7, #0]
 800b954:	4619      	mov	r1, r3
 800b956:	f7fe fe87 	bl	800a668 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b95a:	f7ff f903 	bl	800ab64 <xTaskResumeAll>
 800b95e:	4603      	mov	r3, r0
 800b960:	2b00      	cmp	r3, #0
 800b962:	d10a      	bne.n	800b97a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b964:	4b09      	ldr	r3, [pc, #36]	; (800b98c <prvProcessTimerOrBlockTask+0x98>)
 800b966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b96a:	601a      	str	r2, [r3, #0]
 800b96c:	f3bf 8f4f 	dsb	sy
 800b970:	f3bf 8f6f 	isb	sy
}
 800b974:	e001      	b.n	800b97a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b976:	f7ff f8f5 	bl	800ab64 <xTaskResumeAll>
}
 800b97a:	bf00      	nop
 800b97c:	3710      	adds	r7, #16
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}
 800b982:	bf00      	nop
 800b984:	20002550 	.word	0x20002550
 800b988:	20002554 	.word	0x20002554
 800b98c:	e000ed04 	.word	0xe000ed04

0800b990 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b990:	b480      	push	{r7}
 800b992:	b085      	sub	sp, #20
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b998:	4b0e      	ldr	r3, [pc, #56]	; (800b9d4 <prvGetNextExpireTime+0x44>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d101      	bne.n	800b9a6 <prvGetNextExpireTime+0x16>
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	e000      	b.n	800b9a8 <prvGetNextExpireTime+0x18>
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d105      	bne.n	800b9c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b9b4:	4b07      	ldr	r3, [pc, #28]	; (800b9d4 <prvGetNextExpireTime+0x44>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	68db      	ldr	r3, [r3, #12]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	60fb      	str	r3, [r7, #12]
 800b9be:	e001      	b.n	800b9c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3714      	adds	r7, #20
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d0:	4770      	bx	lr
 800b9d2:	bf00      	nop
 800b9d4:	2000254c 	.word	0x2000254c

0800b9d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b084      	sub	sp, #16
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b9e0:	f7ff f95e 	bl	800aca0 <xTaskGetTickCount>
 800b9e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b9e6:	4b0b      	ldr	r3, [pc, #44]	; (800ba14 <prvSampleTimeNow+0x3c>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	68fa      	ldr	r2, [r7, #12]
 800b9ec:	429a      	cmp	r2, r3
 800b9ee:	d205      	bcs.n	800b9fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b9f0:	f000 f936 	bl	800bc60 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	601a      	str	r2, [r3, #0]
 800b9fa:	e002      	b.n	800ba02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ba02:	4a04      	ldr	r2, [pc, #16]	; (800ba14 <prvSampleTimeNow+0x3c>)
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ba08:	68fb      	ldr	r3, [r7, #12]
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3710      	adds	r7, #16
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
 800ba12:	bf00      	nop
 800ba14:	2000255c 	.word	0x2000255c

0800ba18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b086      	sub	sp, #24
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	60f8      	str	r0, [r7, #12]
 800ba20:	60b9      	str	r1, [r7, #8]
 800ba22:	607a      	str	r2, [r7, #4]
 800ba24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ba26:	2300      	movs	r3, #0
 800ba28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	68ba      	ldr	r2, [r7, #8]
 800ba2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	68fa      	ldr	r2, [r7, #12]
 800ba34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ba36:	68ba      	ldr	r2, [r7, #8]
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	d812      	bhi.n	800ba64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba3e:	687a      	ldr	r2, [r7, #4]
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	1ad2      	subs	r2, r2, r3
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	699b      	ldr	r3, [r3, #24]
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d302      	bcc.n	800ba52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	617b      	str	r3, [r7, #20]
 800ba50:	e01b      	b.n	800ba8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ba52:	4b10      	ldr	r3, [pc, #64]	; (800ba94 <prvInsertTimerInActiveList+0x7c>)
 800ba54:	681a      	ldr	r2, [r3, #0]
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	3304      	adds	r3, #4
 800ba5a:	4619      	mov	r1, r3
 800ba5c:	4610      	mov	r0, r2
 800ba5e:	f7fd fd0c 	bl	800947a <vListInsert>
 800ba62:	e012      	b.n	800ba8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ba64:	687a      	ldr	r2, [r7, #4]
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d206      	bcs.n	800ba7a <prvInsertTimerInActiveList+0x62>
 800ba6c:	68ba      	ldr	r2, [r7, #8]
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d302      	bcc.n	800ba7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ba74:	2301      	movs	r3, #1
 800ba76:	617b      	str	r3, [r7, #20]
 800ba78:	e007      	b.n	800ba8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ba7a:	4b07      	ldr	r3, [pc, #28]	; (800ba98 <prvInsertTimerInActiveList+0x80>)
 800ba7c:	681a      	ldr	r2, [r3, #0]
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	3304      	adds	r3, #4
 800ba82:	4619      	mov	r1, r3
 800ba84:	4610      	mov	r0, r2
 800ba86:	f7fd fcf8 	bl	800947a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ba8a:	697b      	ldr	r3, [r7, #20]
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3718      	adds	r7, #24
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}
 800ba94:	20002550 	.word	0x20002550
 800ba98:	2000254c 	.word	0x2000254c

0800ba9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b08e      	sub	sp, #56	; 0x38
 800baa0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800baa2:	e0ca      	b.n	800bc3a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	da18      	bge.n	800badc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800baaa:	1d3b      	adds	r3, r7, #4
 800baac:	3304      	adds	r3, #4
 800baae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d10a      	bne.n	800bacc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baba:	f383 8811 	msr	BASEPRI, r3
 800babe:	f3bf 8f6f 	isb	sy
 800bac2:	f3bf 8f4f 	dsb	sy
 800bac6:	61fb      	str	r3, [r7, #28]
}
 800bac8:	bf00      	nop
 800baca:	e7fe      	b.n	800baca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bad2:	6850      	ldr	r0, [r2, #4]
 800bad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bad6:	6892      	ldr	r2, [r2, #8]
 800bad8:	4611      	mov	r1, r2
 800bada:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	f2c0 80aa 	blt.w	800bc38 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baea:	695b      	ldr	r3, [r3, #20]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d004      	beq.n	800bafa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800baf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf2:	3304      	adds	r3, #4
 800baf4:	4618      	mov	r0, r3
 800baf6:	f7fd fcf9 	bl	80094ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bafa:	463b      	mov	r3, r7
 800bafc:	4618      	mov	r0, r3
 800bafe:	f7ff ff6b 	bl	800b9d8 <prvSampleTimeNow>
 800bb02:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2b09      	cmp	r3, #9
 800bb08:	f200 8097 	bhi.w	800bc3a <prvProcessReceivedCommands+0x19e>
 800bb0c:	a201      	add	r2, pc, #4	; (adr r2, 800bb14 <prvProcessReceivedCommands+0x78>)
 800bb0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb12:	bf00      	nop
 800bb14:	0800bb3d 	.word	0x0800bb3d
 800bb18:	0800bb3d 	.word	0x0800bb3d
 800bb1c:	0800bb3d 	.word	0x0800bb3d
 800bb20:	0800bbb1 	.word	0x0800bbb1
 800bb24:	0800bbc5 	.word	0x0800bbc5
 800bb28:	0800bc0f 	.word	0x0800bc0f
 800bb2c:	0800bb3d 	.word	0x0800bb3d
 800bb30:	0800bb3d 	.word	0x0800bb3d
 800bb34:	0800bbb1 	.word	0x0800bbb1
 800bb38:	0800bbc5 	.word	0x0800bbc5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bb3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb42:	f043 0301 	orr.w	r3, r3, #1
 800bb46:	b2da      	uxtb	r2, r3
 800bb48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bb4e:	68ba      	ldr	r2, [r7, #8]
 800bb50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb52:	699b      	ldr	r3, [r3, #24]
 800bb54:	18d1      	adds	r1, r2, r3
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb5c:	f7ff ff5c 	bl	800ba18 <prvInsertTimerInActiveList>
 800bb60:	4603      	mov	r3, r0
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d069      	beq.n	800bc3a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb68:	6a1b      	ldr	r3, [r3, #32]
 800bb6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb6c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb74:	f003 0304 	and.w	r3, r3, #4
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d05e      	beq.n	800bc3a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bb7c:	68ba      	ldr	r2, [r7, #8]
 800bb7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb80:	699b      	ldr	r3, [r3, #24]
 800bb82:	441a      	add	r2, r3
 800bb84:	2300      	movs	r3, #0
 800bb86:	9300      	str	r3, [sp, #0]
 800bb88:	2300      	movs	r3, #0
 800bb8a:	2100      	movs	r1, #0
 800bb8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb8e:	f7ff fe05 	bl	800b79c <xTimerGenericCommand>
 800bb92:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bb94:	6a3b      	ldr	r3, [r7, #32]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d14f      	bne.n	800bc3a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bb9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb9e:	f383 8811 	msr	BASEPRI, r3
 800bba2:	f3bf 8f6f 	isb	sy
 800bba6:	f3bf 8f4f 	dsb	sy
 800bbaa:	61bb      	str	r3, [r7, #24]
}
 800bbac:	bf00      	nop
 800bbae:	e7fe      	b.n	800bbae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bbb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbb6:	f023 0301 	bic.w	r3, r3, #1
 800bbba:	b2da      	uxtb	r2, r3
 800bbbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bbc2:	e03a      	b.n	800bc3a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bbc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbca:	f043 0301 	orr.w	r3, r3, #1
 800bbce:	b2da      	uxtb	r2, r3
 800bbd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bbd6:	68ba      	ldr	r2, [r7, #8]
 800bbd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbda:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bbdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbde:	699b      	ldr	r3, [r3, #24]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d10a      	bne.n	800bbfa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bbe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe8:	f383 8811 	msr	BASEPRI, r3
 800bbec:	f3bf 8f6f 	isb	sy
 800bbf0:	f3bf 8f4f 	dsb	sy
 800bbf4:	617b      	str	r3, [r7, #20]
}
 800bbf6:	bf00      	nop
 800bbf8:	e7fe      	b.n	800bbf8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bbfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbfc:	699a      	ldr	r2, [r3, #24]
 800bbfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc00:	18d1      	adds	r1, r2, r3
 800bc02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc08:	f7ff ff06 	bl	800ba18 <prvInsertTimerInActiveList>
					break;
 800bc0c:	e015      	b.n	800bc3a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bc0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc14:	f003 0302 	and.w	r3, r3, #2
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d103      	bne.n	800bc24 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bc1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc1e:	f000 fbd7 	bl	800c3d0 <vPortFree>
 800bc22:	e00a      	b.n	800bc3a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc2a:	f023 0301 	bic.w	r3, r3, #1
 800bc2e:	b2da      	uxtb	r2, r3
 800bc30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bc36:	e000      	b.n	800bc3a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bc38:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bc3a:	4b08      	ldr	r3, [pc, #32]	; (800bc5c <prvProcessReceivedCommands+0x1c0>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	1d39      	adds	r1, r7, #4
 800bc40:	2200      	movs	r2, #0
 800bc42:	4618      	mov	r0, r3
 800bc44:	f7fe f904 	bl	8009e50 <xQueueReceive>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	f47f af2a 	bne.w	800baa4 <prvProcessReceivedCommands+0x8>
	}
}
 800bc50:	bf00      	nop
 800bc52:	bf00      	nop
 800bc54:	3730      	adds	r7, #48	; 0x30
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}
 800bc5a:	bf00      	nop
 800bc5c:	20002554 	.word	0x20002554

0800bc60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b088      	sub	sp, #32
 800bc64:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bc66:	e048      	b.n	800bcfa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bc68:	4b2d      	ldr	r3, [pc, #180]	; (800bd20 <prvSwitchTimerLists+0xc0>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	68db      	ldr	r3, [r3, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc72:	4b2b      	ldr	r3, [pc, #172]	; (800bd20 <prvSwitchTimerLists+0xc0>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	68db      	ldr	r3, [r3, #12]
 800bc78:	68db      	ldr	r3, [r3, #12]
 800bc7a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	3304      	adds	r3, #4
 800bc80:	4618      	mov	r0, r3
 800bc82:	f7fd fc33 	bl	80094ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	6a1b      	ldr	r3, [r3, #32]
 800bc8a:	68f8      	ldr	r0, [r7, #12]
 800bc8c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc94:	f003 0304 	and.w	r3, r3, #4
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d02e      	beq.n	800bcfa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	699b      	ldr	r3, [r3, #24]
 800bca0:	693a      	ldr	r2, [r7, #16]
 800bca2:	4413      	add	r3, r2
 800bca4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bca6:	68ba      	ldr	r2, [r7, #8]
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d90e      	bls.n	800bccc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	68ba      	ldr	r2, [r7, #8]
 800bcb2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	68fa      	ldr	r2, [r7, #12]
 800bcb8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bcba:	4b19      	ldr	r3, [pc, #100]	; (800bd20 <prvSwitchTimerLists+0xc0>)
 800bcbc:	681a      	ldr	r2, [r3, #0]
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	3304      	adds	r3, #4
 800bcc2:	4619      	mov	r1, r3
 800bcc4:	4610      	mov	r0, r2
 800bcc6:	f7fd fbd8 	bl	800947a <vListInsert>
 800bcca:	e016      	b.n	800bcfa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bccc:	2300      	movs	r3, #0
 800bcce:	9300      	str	r3, [sp, #0]
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	693a      	ldr	r2, [r7, #16]
 800bcd4:	2100      	movs	r1, #0
 800bcd6:	68f8      	ldr	r0, [r7, #12]
 800bcd8:	f7ff fd60 	bl	800b79c <xTimerGenericCommand>
 800bcdc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d10a      	bne.n	800bcfa <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce8:	f383 8811 	msr	BASEPRI, r3
 800bcec:	f3bf 8f6f 	isb	sy
 800bcf0:	f3bf 8f4f 	dsb	sy
 800bcf4:	603b      	str	r3, [r7, #0]
}
 800bcf6:	bf00      	nop
 800bcf8:	e7fe      	b.n	800bcf8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bcfa:	4b09      	ldr	r3, [pc, #36]	; (800bd20 <prvSwitchTimerLists+0xc0>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d1b1      	bne.n	800bc68 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bd04:	4b06      	ldr	r3, [pc, #24]	; (800bd20 <prvSwitchTimerLists+0xc0>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bd0a:	4b06      	ldr	r3, [pc, #24]	; (800bd24 <prvSwitchTimerLists+0xc4>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	4a04      	ldr	r2, [pc, #16]	; (800bd20 <prvSwitchTimerLists+0xc0>)
 800bd10:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bd12:	4a04      	ldr	r2, [pc, #16]	; (800bd24 <prvSwitchTimerLists+0xc4>)
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	6013      	str	r3, [r2, #0]
}
 800bd18:	bf00      	nop
 800bd1a:	3718      	adds	r7, #24
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}
 800bd20:	2000254c 	.word	0x2000254c
 800bd24:	20002550 	.word	0x20002550

0800bd28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b082      	sub	sp, #8
 800bd2c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bd2e:	f000 f969 	bl	800c004 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bd32:	4b15      	ldr	r3, [pc, #84]	; (800bd88 <prvCheckForValidListAndQueue+0x60>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d120      	bne.n	800bd7c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bd3a:	4814      	ldr	r0, [pc, #80]	; (800bd8c <prvCheckForValidListAndQueue+0x64>)
 800bd3c:	f7fd fb4c 	bl	80093d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bd40:	4813      	ldr	r0, [pc, #76]	; (800bd90 <prvCheckForValidListAndQueue+0x68>)
 800bd42:	f7fd fb49 	bl	80093d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bd46:	4b13      	ldr	r3, [pc, #76]	; (800bd94 <prvCheckForValidListAndQueue+0x6c>)
 800bd48:	4a10      	ldr	r2, [pc, #64]	; (800bd8c <prvCheckForValidListAndQueue+0x64>)
 800bd4a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bd4c:	4b12      	ldr	r3, [pc, #72]	; (800bd98 <prvCheckForValidListAndQueue+0x70>)
 800bd4e:	4a10      	ldr	r2, [pc, #64]	; (800bd90 <prvCheckForValidListAndQueue+0x68>)
 800bd50:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bd52:	2300      	movs	r3, #0
 800bd54:	9300      	str	r3, [sp, #0]
 800bd56:	4b11      	ldr	r3, [pc, #68]	; (800bd9c <prvCheckForValidListAndQueue+0x74>)
 800bd58:	4a11      	ldr	r2, [pc, #68]	; (800bda0 <prvCheckForValidListAndQueue+0x78>)
 800bd5a:	2110      	movs	r1, #16
 800bd5c:	200a      	movs	r0, #10
 800bd5e:	f7fd fc57 	bl	8009610 <xQueueGenericCreateStatic>
 800bd62:	4603      	mov	r3, r0
 800bd64:	4a08      	ldr	r2, [pc, #32]	; (800bd88 <prvCheckForValidListAndQueue+0x60>)
 800bd66:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bd68:	4b07      	ldr	r3, [pc, #28]	; (800bd88 <prvCheckForValidListAndQueue+0x60>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d005      	beq.n	800bd7c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bd70:	4b05      	ldr	r3, [pc, #20]	; (800bd88 <prvCheckForValidListAndQueue+0x60>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	490b      	ldr	r1, [pc, #44]	; (800bda4 <prvCheckForValidListAndQueue+0x7c>)
 800bd76:	4618      	mov	r0, r3
 800bd78:	f7fe fc22 	bl	800a5c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bd7c:	f000 f972 	bl	800c064 <vPortExitCritical>
}
 800bd80:	bf00      	nop
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}
 800bd86:	bf00      	nop
 800bd88:	20002554 	.word	0x20002554
 800bd8c:	20002524 	.word	0x20002524
 800bd90:	20002538 	.word	0x20002538
 800bd94:	2000254c 	.word	0x2000254c
 800bd98:	20002550 	.word	0x20002550
 800bd9c:	20002600 	.word	0x20002600
 800bda0:	20002560 	.word	0x20002560
 800bda4:	08021574 	.word	0x08021574

0800bda8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b085      	sub	sp, #20
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	60f8      	str	r0, [r7, #12]
 800bdb0:	60b9      	str	r1, [r7, #8]
 800bdb2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	3b04      	subs	r3, #4
 800bdb8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bdc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	3b04      	subs	r3, #4
 800bdc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	f023 0201 	bic.w	r2, r3, #1
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	3b04      	subs	r3, #4
 800bdd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bdd8:	4a0c      	ldr	r2, [pc, #48]	; (800be0c <pxPortInitialiseStack+0x64>)
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	3b14      	subs	r3, #20
 800bde2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bde4:	687a      	ldr	r2, [r7, #4]
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	3b04      	subs	r3, #4
 800bdee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	f06f 0202 	mvn.w	r2, #2
 800bdf6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	3b20      	subs	r3, #32
 800bdfc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
}
 800be00:	4618      	mov	r0, r3
 800be02:	3714      	adds	r7, #20
 800be04:	46bd      	mov	sp, r7
 800be06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0a:	4770      	bx	lr
 800be0c:	0800be11 	.word	0x0800be11

0800be10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800be10:	b480      	push	{r7}
 800be12:	b085      	sub	sp, #20
 800be14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800be16:	2300      	movs	r3, #0
 800be18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800be1a:	4b12      	ldr	r3, [pc, #72]	; (800be64 <prvTaskExitError+0x54>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be22:	d00a      	beq.n	800be3a <prvTaskExitError+0x2a>
	__asm volatile
 800be24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be28:	f383 8811 	msr	BASEPRI, r3
 800be2c:	f3bf 8f6f 	isb	sy
 800be30:	f3bf 8f4f 	dsb	sy
 800be34:	60fb      	str	r3, [r7, #12]
}
 800be36:	bf00      	nop
 800be38:	e7fe      	b.n	800be38 <prvTaskExitError+0x28>
	__asm volatile
 800be3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be3e:	f383 8811 	msr	BASEPRI, r3
 800be42:	f3bf 8f6f 	isb	sy
 800be46:	f3bf 8f4f 	dsb	sy
 800be4a:	60bb      	str	r3, [r7, #8]
}
 800be4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800be4e:	bf00      	nop
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d0fc      	beq.n	800be50 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800be56:	bf00      	nop
 800be58:	bf00      	nop
 800be5a:	3714      	adds	r7, #20
 800be5c:	46bd      	mov	sp, r7
 800be5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be62:	4770      	bx	lr
 800be64:	20000024 	.word	0x20000024
	...

0800be70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800be70:	4b07      	ldr	r3, [pc, #28]	; (800be90 <pxCurrentTCBConst2>)
 800be72:	6819      	ldr	r1, [r3, #0]
 800be74:	6808      	ldr	r0, [r1, #0]
 800be76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be7a:	f380 8809 	msr	PSP, r0
 800be7e:	f3bf 8f6f 	isb	sy
 800be82:	f04f 0000 	mov.w	r0, #0
 800be86:	f380 8811 	msr	BASEPRI, r0
 800be8a:	4770      	bx	lr
 800be8c:	f3af 8000 	nop.w

0800be90 <pxCurrentTCBConst2>:
 800be90:	20002024 	.word	0x20002024
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800be94:	bf00      	nop
 800be96:	bf00      	nop

0800be98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800be98:	4808      	ldr	r0, [pc, #32]	; (800bebc <prvPortStartFirstTask+0x24>)
 800be9a:	6800      	ldr	r0, [r0, #0]
 800be9c:	6800      	ldr	r0, [r0, #0]
 800be9e:	f380 8808 	msr	MSP, r0
 800bea2:	f04f 0000 	mov.w	r0, #0
 800bea6:	f380 8814 	msr	CONTROL, r0
 800beaa:	b662      	cpsie	i
 800beac:	b661      	cpsie	f
 800beae:	f3bf 8f4f 	dsb	sy
 800beb2:	f3bf 8f6f 	isb	sy
 800beb6:	df00      	svc	0
 800beb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800beba:	bf00      	nop
 800bebc:	e000ed08 	.word	0xe000ed08

0800bec0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b086      	sub	sp, #24
 800bec4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bec6:	4b46      	ldr	r3, [pc, #280]	; (800bfe0 <xPortStartScheduler+0x120>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	4a46      	ldr	r2, [pc, #280]	; (800bfe4 <xPortStartScheduler+0x124>)
 800becc:	4293      	cmp	r3, r2
 800bece:	d10a      	bne.n	800bee6 <xPortStartScheduler+0x26>
	__asm volatile
 800bed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed4:	f383 8811 	msr	BASEPRI, r3
 800bed8:	f3bf 8f6f 	isb	sy
 800bedc:	f3bf 8f4f 	dsb	sy
 800bee0:	613b      	str	r3, [r7, #16]
}
 800bee2:	bf00      	nop
 800bee4:	e7fe      	b.n	800bee4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bee6:	4b3e      	ldr	r3, [pc, #248]	; (800bfe0 <xPortStartScheduler+0x120>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	4a3f      	ldr	r2, [pc, #252]	; (800bfe8 <xPortStartScheduler+0x128>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d10a      	bne.n	800bf06 <xPortStartScheduler+0x46>
	__asm volatile
 800bef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef4:	f383 8811 	msr	BASEPRI, r3
 800bef8:	f3bf 8f6f 	isb	sy
 800befc:	f3bf 8f4f 	dsb	sy
 800bf00:	60fb      	str	r3, [r7, #12]
}
 800bf02:	bf00      	nop
 800bf04:	e7fe      	b.n	800bf04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bf06:	4b39      	ldr	r3, [pc, #228]	; (800bfec <xPortStartScheduler+0x12c>)
 800bf08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bf0a:	697b      	ldr	r3, [r7, #20]
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	b2db      	uxtb	r3, r3
 800bf10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	22ff      	movs	r2, #255	; 0xff
 800bf16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	781b      	ldrb	r3, [r3, #0]
 800bf1c:	b2db      	uxtb	r3, r3
 800bf1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bf20:	78fb      	ldrb	r3, [r7, #3]
 800bf22:	b2db      	uxtb	r3, r3
 800bf24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bf28:	b2da      	uxtb	r2, r3
 800bf2a:	4b31      	ldr	r3, [pc, #196]	; (800bff0 <xPortStartScheduler+0x130>)
 800bf2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bf2e:	4b31      	ldr	r3, [pc, #196]	; (800bff4 <xPortStartScheduler+0x134>)
 800bf30:	2207      	movs	r2, #7
 800bf32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf34:	e009      	b.n	800bf4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bf36:	4b2f      	ldr	r3, [pc, #188]	; (800bff4 <xPortStartScheduler+0x134>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	3b01      	subs	r3, #1
 800bf3c:	4a2d      	ldr	r2, [pc, #180]	; (800bff4 <xPortStartScheduler+0x134>)
 800bf3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bf40:	78fb      	ldrb	r3, [r7, #3]
 800bf42:	b2db      	uxtb	r3, r3
 800bf44:	005b      	lsls	r3, r3, #1
 800bf46:	b2db      	uxtb	r3, r3
 800bf48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf4a:	78fb      	ldrb	r3, [r7, #3]
 800bf4c:	b2db      	uxtb	r3, r3
 800bf4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf52:	2b80      	cmp	r3, #128	; 0x80
 800bf54:	d0ef      	beq.n	800bf36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bf56:	4b27      	ldr	r3, [pc, #156]	; (800bff4 <xPortStartScheduler+0x134>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f1c3 0307 	rsb	r3, r3, #7
 800bf5e:	2b04      	cmp	r3, #4
 800bf60:	d00a      	beq.n	800bf78 <xPortStartScheduler+0xb8>
	__asm volatile
 800bf62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf66:	f383 8811 	msr	BASEPRI, r3
 800bf6a:	f3bf 8f6f 	isb	sy
 800bf6e:	f3bf 8f4f 	dsb	sy
 800bf72:	60bb      	str	r3, [r7, #8]
}
 800bf74:	bf00      	nop
 800bf76:	e7fe      	b.n	800bf76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bf78:	4b1e      	ldr	r3, [pc, #120]	; (800bff4 <xPortStartScheduler+0x134>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	021b      	lsls	r3, r3, #8
 800bf7e:	4a1d      	ldr	r2, [pc, #116]	; (800bff4 <xPortStartScheduler+0x134>)
 800bf80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bf82:	4b1c      	ldr	r3, [pc, #112]	; (800bff4 <xPortStartScheduler+0x134>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bf8a:	4a1a      	ldr	r2, [pc, #104]	; (800bff4 <xPortStartScheduler+0x134>)
 800bf8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	b2da      	uxtb	r2, r3
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bf96:	4b18      	ldr	r3, [pc, #96]	; (800bff8 <xPortStartScheduler+0x138>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4a17      	ldr	r2, [pc, #92]	; (800bff8 <xPortStartScheduler+0x138>)
 800bf9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bfa0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bfa2:	4b15      	ldr	r3, [pc, #84]	; (800bff8 <xPortStartScheduler+0x138>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	4a14      	ldr	r2, [pc, #80]	; (800bff8 <xPortStartScheduler+0x138>)
 800bfa8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bfac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bfae:	f000 f8dd 	bl	800c16c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bfb2:	4b12      	ldr	r3, [pc, #72]	; (800bffc <xPortStartScheduler+0x13c>)
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bfb8:	f000 f8fc 	bl	800c1b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bfbc:	4b10      	ldr	r3, [pc, #64]	; (800c000 <xPortStartScheduler+0x140>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	4a0f      	ldr	r2, [pc, #60]	; (800c000 <xPortStartScheduler+0x140>)
 800bfc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bfc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bfc8:	f7ff ff66 	bl	800be98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bfcc:	f7fe ff44 	bl	800ae58 <vTaskSwitchContext>
	prvTaskExitError();
 800bfd0:	f7ff ff1e 	bl	800be10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bfd4:	2300      	movs	r3, #0
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3718      	adds	r7, #24
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}
 800bfde:	bf00      	nop
 800bfe0:	e000ed00 	.word	0xe000ed00
 800bfe4:	410fc271 	.word	0x410fc271
 800bfe8:	410fc270 	.word	0x410fc270
 800bfec:	e000e400 	.word	0xe000e400
 800bff0:	20002650 	.word	0x20002650
 800bff4:	20002654 	.word	0x20002654
 800bff8:	e000ed20 	.word	0xe000ed20
 800bffc:	20000024 	.word	0x20000024
 800c000:	e000ef34 	.word	0xe000ef34

0800c004 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c004:	b480      	push	{r7}
 800c006:	b083      	sub	sp, #12
 800c008:	af00      	add	r7, sp, #0
	__asm volatile
 800c00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c00e:	f383 8811 	msr	BASEPRI, r3
 800c012:	f3bf 8f6f 	isb	sy
 800c016:	f3bf 8f4f 	dsb	sy
 800c01a:	607b      	str	r3, [r7, #4]
}
 800c01c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c01e:	4b0f      	ldr	r3, [pc, #60]	; (800c05c <vPortEnterCritical+0x58>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	3301      	adds	r3, #1
 800c024:	4a0d      	ldr	r2, [pc, #52]	; (800c05c <vPortEnterCritical+0x58>)
 800c026:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c028:	4b0c      	ldr	r3, [pc, #48]	; (800c05c <vPortEnterCritical+0x58>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	2b01      	cmp	r3, #1
 800c02e:	d10f      	bne.n	800c050 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c030:	4b0b      	ldr	r3, [pc, #44]	; (800c060 <vPortEnterCritical+0x5c>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	b2db      	uxtb	r3, r3
 800c036:	2b00      	cmp	r3, #0
 800c038:	d00a      	beq.n	800c050 <vPortEnterCritical+0x4c>
	__asm volatile
 800c03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c03e:	f383 8811 	msr	BASEPRI, r3
 800c042:	f3bf 8f6f 	isb	sy
 800c046:	f3bf 8f4f 	dsb	sy
 800c04a:	603b      	str	r3, [r7, #0]
}
 800c04c:	bf00      	nop
 800c04e:	e7fe      	b.n	800c04e <vPortEnterCritical+0x4a>
	}
}
 800c050:	bf00      	nop
 800c052:	370c      	adds	r7, #12
 800c054:	46bd      	mov	sp, r7
 800c056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05a:	4770      	bx	lr
 800c05c:	20000024 	.word	0x20000024
 800c060:	e000ed04 	.word	0xe000ed04

0800c064 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c064:	b480      	push	{r7}
 800c066:	b083      	sub	sp, #12
 800c068:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c06a:	4b12      	ldr	r3, [pc, #72]	; (800c0b4 <vPortExitCritical+0x50>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d10a      	bne.n	800c088 <vPortExitCritical+0x24>
	__asm volatile
 800c072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c076:	f383 8811 	msr	BASEPRI, r3
 800c07a:	f3bf 8f6f 	isb	sy
 800c07e:	f3bf 8f4f 	dsb	sy
 800c082:	607b      	str	r3, [r7, #4]
}
 800c084:	bf00      	nop
 800c086:	e7fe      	b.n	800c086 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c088:	4b0a      	ldr	r3, [pc, #40]	; (800c0b4 <vPortExitCritical+0x50>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	3b01      	subs	r3, #1
 800c08e:	4a09      	ldr	r2, [pc, #36]	; (800c0b4 <vPortExitCritical+0x50>)
 800c090:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c092:	4b08      	ldr	r3, [pc, #32]	; (800c0b4 <vPortExitCritical+0x50>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d105      	bne.n	800c0a6 <vPortExitCritical+0x42>
 800c09a:	2300      	movs	r3, #0
 800c09c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	f383 8811 	msr	BASEPRI, r3
}
 800c0a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c0a6:	bf00      	nop
 800c0a8:	370c      	adds	r7, #12
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b0:	4770      	bx	lr
 800c0b2:	bf00      	nop
 800c0b4:	20000024 	.word	0x20000024
	...

0800c0c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c0c0:	f3ef 8009 	mrs	r0, PSP
 800c0c4:	f3bf 8f6f 	isb	sy
 800c0c8:	4b15      	ldr	r3, [pc, #84]	; (800c120 <pxCurrentTCBConst>)
 800c0ca:	681a      	ldr	r2, [r3, #0]
 800c0cc:	f01e 0f10 	tst.w	lr, #16
 800c0d0:	bf08      	it	eq
 800c0d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c0d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0da:	6010      	str	r0, [r2, #0]
 800c0dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c0e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c0e4:	f380 8811 	msr	BASEPRI, r0
 800c0e8:	f3bf 8f4f 	dsb	sy
 800c0ec:	f3bf 8f6f 	isb	sy
 800c0f0:	f7fe feb2 	bl	800ae58 <vTaskSwitchContext>
 800c0f4:	f04f 0000 	mov.w	r0, #0
 800c0f8:	f380 8811 	msr	BASEPRI, r0
 800c0fc:	bc09      	pop	{r0, r3}
 800c0fe:	6819      	ldr	r1, [r3, #0]
 800c100:	6808      	ldr	r0, [r1, #0]
 800c102:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c106:	f01e 0f10 	tst.w	lr, #16
 800c10a:	bf08      	it	eq
 800c10c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c110:	f380 8809 	msr	PSP, r0
 800c114:	f3bf 8f6f 	isb	sy
 800c118:	4770      	bx	lr
 800c11a:	bf00      	nop
 800c11c:	f3af 8000 	nop.w

0800c120 <pxCurrentTCBConst>:
 800c120:	20002024 	.word	0x20002024
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c124:	bf00      	nop
 800c126:	bf00      	nop

0800c128 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b082      	sub	sp, #8
 800c12c:	af00      	add	r7, sp, #0
	__asm volatile
 800c12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c132:	f383 8811 	msr	BASEPRI, r3
 800c136:	f3bf 8f6f 	isb	sy
 800c13a:	f3bf 8f4f 	dsb	sy
 800c13e:	607b      	str	r3, [r7, #4]
}
 800c140:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c142:	f7fe fdcf 	bl	800ace4 <xTaskIncrementTick>
 800c146:	4603      	mov	r3, r0
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d003      	beq.n	800c154 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c14c:	4b06      	ldr	r3, [pc, #24]	; (800c168 <SysTick_Handler+0x40>)
 800c14e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c152:	601a      	str	r2, [r3, #0]
 800c154:	2300      	movs	r3, #0
 800c156:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	f383 8811 	msr	BASEPRI, r3
}
 800c15e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c160:	bf00      	nop
 800c162:	3708      	adds	r7, #8
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}
 800c168:	e000ed04 	.word	0xe000ed04

0800c16c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c16c:	b480      	push	{r7}
 800c16e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c170:	4b0b      	ldr	r3, [pc, #44]	; (800c1a0 <vPortSetupTimerInterrupt+0x34>)
 800c172:	2200      	movs	r2, #0
 800c174:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c176:	4b0b      	ldr	r3, [pc, #44]	; (800c1a4 <vPortSetupTimerInterrupt+0x38>)
 800c178:	2200      	movs	r2, #0
 800c17a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c17c:	4b0a      	ldr	r3, [pc, #40]	; (800c1a8 <vPortSetupTimerInterrupt+0x3c>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4a0a      	ldr	r2, [pc, #40]	; (800c1ac <vPortSetupTimerInterrupt+0x40>)
 800c182:	fba2 2303 	umull	r2, r3, r2, r3
 800c186:	099b      	lsrs	r3, r3, #6
 800c188:	4a09      	ldr	r2, [pc, #36]	; (800c1b0 <vPortSetupTimerInterrupt+0x44>)
 800c18a:	3b01      	subs	r3, #1
 800c18c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c18e:	4b04      	ldr	r3, [pc, #16]	; (800c1a0 <vPortSetupTimerInterrupt+0x34>)
 800c190:	2207      	movs	r2, #7
 800c192:	601a      	str	r2, [r3, #0]
}
 800c194:	bf00      	nop
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr
 800c19e:	bf00      	nop
 800c1a0:	e000e010 	.word	0xe000e010
 800c1a4:	e000e018 	.word	0xe000e018
 800c1a8:	20000000 	.word	0x20000000
 800c1ac:	10624dd3 	.word	0x10624dd3
 800c1b0:	e000e014 	.word	0xe000e014

0800c1b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c1b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c1c4 <vPortEnableVFP+0x10>
 800c1b8:	6801      	ldr	r1, [r0, #0]
 800c1ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c1be:	6001      	str	r1, [r0, #0]
 800c1c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c1c2:	bf00      	nop
 800c1c4:	e000ed88 	.word	0xe000ed88

0800c1c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b085      	sub	sp, #20
 800c1cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c1ce:	f3ef 8305 	mrs	r3, IPSR
 800c1d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	2b0f      	cmp	r3, #15
 800c1d8:	d914      	bls.n	800c204 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c1da:	4a17      	ldr	r2, [pc, #92]	; (800c238 <vPortValidateInterruptPriority+0x70>)
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	4413      	add	r3, r2
 800c1e0:	781b      	ldrb	r3, [r3, #0]
 800c1e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c1e4:	4b15      	ldr	r3, [pc, #84]	; (800c23c <vPortValidateInterruptPriority+0x74>)
 800c1e6:	781b      	ldrb	r3, [r3, #0]
 800c1e8:	7afa      	ldrb	r2, [r7, #11]
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	d20a      	bcs.n	800c204 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f2:	f383 8811 	msr	BASEPRI, r3
 800c1f6:	f3bf 8f6f 	isb	sy
 800c1fa:	f3bf 8f4f 	dsb	sy
 800c1fe:	607b      	str	r3, [r7, #4]
}
 800c200:	bf00      	nop
 800c202:	e7fe      	b.n	800c202 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c204:	4b0e      	ldr	r3, [pc, #56]	; (800c240 <vPortValidateInterruptPriority+0x78>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c20c:	4b0d      	ldr	r3, [pc, #52]	; (800c244 <vPortValidateInterruptPriority+0x7c>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	429a      	cmp	r2, r3
 800c212:	d90a      	bls.n	800c22a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c218:	f383 8811 	msr	BASEPRI, r3
 800c21c:	f3bf 8f6f 	isb	sy
 800c220:	f3bf 8f4f 	dsb	sy
 800c224:	603b      	str	r3, [r7, #0]
}
 800c226:	bf00      	nop
 800c228:	e7fe      	b.n	800c228 <vPortValidateInterruptPriority+0x60>
	}
 800c22a:	bf00      	nop
 800c22c:	3714      	adds	r7, #20
 800c22e:	46bd      	mov	sp, r7
 800c230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c234:	4770      	bx	lr
 800c236:	bf00      	nop
 800c238:	e000e3f0 	.word	0xe000e3f0
 800c23c:	20002650 	.word	0x20002650
 800c240:	e000ed0c 	.word	0xe000ed0c
 800c244:	20002654 	.word	0x20002654

0800c248 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b08a      	sub	sp, #40	; 0x28
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c250:	2300      	movs	r3, #0
 800c252:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c254:	f7fe fc78 	bl	800ab48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c258:	4b58      	ldr	r3, [pc, #352]	; (800c3bc <pvPortMalloc+0x174>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d101      	bne.n	800c264 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c260:	f000 f910 	bl	800c484 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c264:	4b56      	ldr	r3, [pc, #344]	; (800c3c0 <pvPortMalloc+0x178>)
 800c266:	681a      	ldr	r2, [r3, #0]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	4013      	ands	r3, r2
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	f040 808e 	bne.w	800c38e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d01d      	beq.n	800c2b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c278:	2208      	movs	r2, #8
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	4413      	add	r3, r2
 800c27e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f003 0307 	and.w	r3, r3, #7
 800c286:	2b00      	cmp	r3, #0
 800c288:	d014      	beq.n	800c2b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f023 0307 	bic.w	r3, r3, #7
 800c290:	3308      	adds	r3, #8
 800c292:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f003 0307 	and.w	r3, r3, #7
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d00a      	beq.n	800c2b4 <pvPortMalloc+0x6c>
	__asm volatile
 800c29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a2:	f383 8811 	msr	BASEPRI, r3
 800c2a6:	f3bf 8f6f 	isb	sy
 800c2aa:	f3bf 8f4f 	dsb	sy
 800c2ae:	617b      	str	r3, [r7, #20]
}
 800c2b0:	bf00      	nop
 800c2b2:	e7fe      	b.n	800c2b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d069      	beq.n	800c38e <pvPortMalloc+0x146>
 800c2ba:	4b42      	ldr	r3, [pc, #264]	; (800c3c4 <pvPortMalloc+0x17c>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	687a      	ldr	r2, [r7, #4]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d864      	bhi.n	800c38e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c2c4:	4b40      	ldr	r3, [pc, #256]	; (800c3c8 <pvPortMalloc+0x180>)
 800c2c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c2c8:	4b3f      	ldr	r3, [pc, #252]	; (800c3c8 <pvPortMalloc+0x180>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2ce:	e004      	b.n	800c2da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d903      	bls.n	800c2ec <pvPortMalloc+0xa4>
 800c2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d1f1      	bne.n	800c2d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c2ec:	4b33      	ldr	r3, [pc, #204]	; (800c3bc <pvPortMalloc+0x174>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d04b      	beq.n	800c38e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c2f6:	6a3b      	ldr	r3, [r7, #32]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2208      	movs	r2, #8
 800c2fc:	4413      	add	r3, r2
 800c2fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c302:	681a      	ldr	r2, [r3, #0]
 800c304:	6a3b      	ldr	r3, [r7, #32]
 800c306:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c30a:	685a      	ldr	r2, [r3, #4]
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	1ad2      	subs	r2, r2, r3
 800c310:	2308      	movs	r3, #8
 800c312:	005b      	lsls	r3, r3, #1
 800c314:	429a      	cmp	r2, r3
 800c316:	d91f      	bls.n	800c358 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	4413      	add	r3, r2
 800c31e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c320:	69bb      	ldr	r3, [r7, #24]
 800c322:	f003 0307 	and.w	r3, r3, #7
 800c326:	2b00      	cmp	r3, #0
 800c328:	d00a      	beq.n	800c340 <pvPortMalloc+0xf8>
	__asm volatile
 800c32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c32e:	f383 8811 	msr	BASEPRI, r3
 800c332:	f3bf 8f6f 	isb	sy
 800c336:	f3bf 8f4f 	dsb	sy
 800c33a:	613b      	str	r3, [r7, #16]
}
 800c33c:	bf00      	nop
 800c33e:	e7fe      	b.n	800c33e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c342:	685a      	ldr	r2, [r3, #4]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	1ad2      	subs	r2, r2, r3
 800c348:	69bb      	ldr	r3, [r7, #24]
 800c34a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c34e:	687a      	ldr	r2, [r7, #4]
 800c350:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c352:	69b8      	ldr	r0, [r7, #24]
 800c354:	f000 f8f8 	bl	800c548 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c358:	4b1a      	ldr	r3, [pc, #104]	; (800c3c4 <pvPortMalloc+0x17c>)
 800c35a:	681a      	ldr	r2, [r3, #0]
 800c35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c35e:	685b      	ldr	r3, [r3, #4]
 800c360:	1ad3      	subs	r3, r2, r3
 800c362:	4a18      	ldr	r2, [pc, #96]	; (800c3c4 <pvPortMalloc+0x17c>)
 800c364:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c366:	4b17      	ldr	r3, [pc, #92]	; (800c3c4 <pvPortMalloc+0x17c>)
 800c368:	681a      	ldr	r2, [r3, #0]
 800c36a:	4b18      	ldr	r3, [pc, #96]	; (800c3cc <pvPortMalloc+0x184>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	429a      	cmp	r2, r3
 800c370:	d203      	bcs.n	800c37a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c372:	4b14      	ldr	r3, [pc, #80]	; (800c3c4 <pvPortMalloc+0x17c>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4a15      	ldr	r2, [pc, #84]	; (800c3cc <pvPortMalloc+0x184>)
 800c378:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c37c:	685a      	ldr	r2, [r3, #4]
 800c37e:	4b10      	ldr	r3, [pc, #64]	; (800c3c0 <pvPortMalloc+0x178>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	431a      	orrs	r2, r3
 800c384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c386:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c38a:	2200      	movs	r2, #0
 800c38c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c38e:	f7fe fbe9 	bl	800ab64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c392:	69fb      	ldr	r3, [r7, #28]
 800c394:	f003 0307 	and.w	r3, r3, #7
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d00a      	beq.n	800c3b2 <pvPortMalloc+0x16a>
	__asm volatile
 800c39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a0:	f383 8811 	msr	BASEPRI, r3
 800c3a4:	f3bf 8f6f 	isb	sy
 800c3a8:	f3bf 8f4f 	dsb	sy
 800c3ac:	60fb      	str	r3, [r7, #12]
}
 800c3ae:	bf00      	nop
 800c3b0:	e7fe      	b.n	800c3b0 <pvPortMalloc+0x168>
	return pvReturn;
 800c3b2:	69fb      	ldr	r3, [r7, #28]
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3728      	adds	r7, #40	; 0x28
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}
 800c3bc:	20006260 	.word	0x20006260
 800c3c0:	2000626c 	.word	0x2000626c
 800c3c4:	20006264 	.word	0x20006264
 800c3c8:	20006258 	.word	0x20006258
 800c3cc:	20006268 	.word	0x20006268

0800c3d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b086      	sub	sp, #24
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d048      	beq.n	800c474 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c3e2:	2308      	movs	r3, #8
 800c3e4:	425b      	negs	r3, r3
 800c3e6:	697a      	ldr	r2, [r7, #20]
 800c3e8:	4413      	add	r3, r2
 800c3ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c3ec:	697b      	ldr	r3, [r7, #20]
 800c3ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c3f0:	693b      	ldr	r3, [r7, #16]
 800c3f2:	685a      	ldr	r2, [r3, #4]
 800c3f4:	4b21      	ldr	r3, [pc, #132]	; (800c47c <vPortFree+0xac>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	4013      	ands	r3, r2
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d10a      	bne.n	800c414 <vPortFree+0x44>
	__asm volatile
 800c3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c402:	f383 8811 	msr	BASEPRI, r3
 800c406:	f3bf 8f6f 	isb	sy
 800c40a:	f3bf 8f4f 	dsb	sy
 800c40e:	60fb      	str	r3, [r7, #12]
}
 800c410:	bf00      	nop
 800c412:	e7fe      	b.n	800c412 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c414:	693b      	ldr	r3, [r7, #16]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d00a      	beq.n	800c432 <vPortFree+0x62>
	__asm volatile
 800c41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c420:	f383 8811 	msr	BASEPRI, r3
 800c424:	f3bf 8f6f 	isb	sy
 800c428:	f3bf 8f4f 	dsb	sy
 800c42c:	60bb      	str	r3, [r7, #8]
}
 800c42e:	bf00      	nop
 800c430:	e7fe      	b.n	800c430 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c432:	693b      	ldr	r3, [r7, #16]
 800c434:	685a      	ldr	r2, [r3, #4]
 800c436:	4b11      	ldr	r3, [pc, #68]	; (800c47c <vPortFree+0xac>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4013      	ands	r3, r2
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d019      	beq.n	800c474 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d115      	bne.n	800c474 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c448:	693b      	ldr	r3, [r7, #16]
 800c44a:	685a      	ldr	r2, [r3, #4]
 800c44c:	4b0b      	ldr	r3, [pc, #44]	; (800c47c <vPortFree+0xac>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	43db      	mvns	r3, r3
 800c452:	401a      	ands	r2, r3
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c458:	f7fe fb76 	bl	800ab48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	685a      	ldr	r2, [r3, #4]
 800c460:	4b07      	ldr	r3, [pc, #28]	; (800c480 <vPortFree+0xb0>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	4413      	add	r3, r2
 800c466:	4a06      	ldr	r2, [pc, #24]	; (800c480 <vPortFree+0xb0>)
 800c468:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c46a:	6938      	ldr	r0, [r7, #16]
 800c46c:	f000 f86c 	bl	800c548 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c470:	f7fe fb78 	bl	800ab64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c474:	bf00      	nop
 800c476:	3718      	adds	r7, #24
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}
 800c47c:	2000626c 	.word	0x2000626c
 800c480:	20006264 	.word	0x20006264

0800c484 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c484:	b480      	push	{r7}
 800c486:	b085      	sub	sp, #20
 800c488:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c48a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c48e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c490:	4b27      	ldr	r3, [pc, #156]	; (800c530 <prvHeapInit+0xac>)
 800c492:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	f003 0307 	and.w	r3, r3, #7
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d00c      	beq.n	800c4b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	3307      	adds	r3, #7
 800c4a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	f023 0307 	bic.w	r3, r3, #7
 800c4aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c4ac:	68ba      	ldr	r2, [r7, #8]
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	1ad3      	subs	r3, r2, r3
 800c4b2:	4a1f      	ldr	r2, [pc, #124]	; (800c530 <prvHeapInit+0xac>)
 800c4b4:	4413      	add	r3, r2
 800c4b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c4bc:	4a1d      	ldr	r2, [pc, #116]	; (800c534 <prvHeapInit+0xb0>)
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c4c2:	4b1c      	ldr	r3, [pc, #112]	; (800c534 <prvHeapInit+0xb0>)
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	68ba      	ldr	r2, [r7, #8]
 800c4cc:	4413      	add	r3, r2
 800c4ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c4d0:	2208      	movs	r2, #8
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	1a9b      	subs	r3, r3, r2
 800c4d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	f023 0307 	bic.w	r3, r3, #7
 800c4de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	4a15      	ldr	r2, [pc, #84]	; (800c538 <prvHeapInit+0xb4>)
 800c4e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c4e6:	4b14      	ldr	r3, [pc, #80]	; (800c538 <prvHeapInit+0xb4>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c4ee:	4b12      	ldr	r3, [pc, #72]	; (800c538 <prvHeapInit+0xb4>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	68fa      	ldr	r2, [r7, #12]
 800c4fe:	1ad2      	subs	r2, r2, r3
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c504:	4b0c      	ldr	r3, [pc, #48]	; (800c538 <prvHeapInit+0xb4>)
 800c506:	681a      	ldr	r2, [r3, #0]
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	685b      	ldr	r3, [r3, #4]
 800c510:	4a0a      	ldr	r2, [pc, #40]	; (800c53c <prvHeapInit+0xb8>)
 800c512:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	685b      	ldr	r3, [r3, #4]
 800c518:	4a09      	ldr	r2, [pc, #36]	; (800c540 <prvHeapInit+0xbc>)
 800c51a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c51c:	4b09      	ldr	r3, [pc, #36]	; (800c544 <prvHeapInit+0xc0>)
 800c51e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c522:	601a      	str	r2, [r3, #0]
}
 800c524:	bf00      	nop
 800c526:	3714      	adds	r7, #20
 800c528:	46bd      	mov	sp, r7
 800c52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52e:	4770      	bx	lr
 800c530:	20002658 	.word	0x20002658
 800c534:	20006258 	.word	0x20006258
 800c538:	20006260 	.word	0x20006260
 800c53c:	20006268 	.word	0x20006268
 800c540:	20006264 	.word	0x20006264
 800c544:	2000626c 	.word	0x2000626c

0800c548 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c548:	b480      	push	{r7}
 800c54a:	b085      	sub	sp, #20
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c550:	4b28      	ldr	r3, [pc, #160]	; (800c5f4 <prvInsertBlockIntoFreeList+0xac>)
 800c552:	60fb      	str	r3, [r7, #12]
 800c554:	e002      	b.n	800c55c <prvInsertBlockIntoFreeList+0x14>
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	60fb      	str	r3, [r7, #12]
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	687a      	ldr	r2, [r7, #4]
 800c562:	429a      	cmp	r2, r3
 800c564:	d8f7      	bhi.n	800c556 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	685b      	ldr	r3, [r3, #4]
 800c56e:	68ba      	ldr	r2, [r7, #8]
 800c570:	4413      	add	r3, r2
 800c572:	687a      	ldr	r2, [r7, #4]
 800c574:	429a      	cmp	r2, r3
 800c576:	d108      	bne.n	800c58a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	685a      	ldr	r2, [r3, #4]
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	685b      	ldr	r3, [r3, #4]
 800c580:	441a      	add	r2, r3
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	685b      	ldr	r3, [r3, #4]
 800c592:	68ba      	ldr	r2, [r7, #8]
 800c594:	441a      	add	r2, r3
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	429a      	cmp	r2, r3
 800c59c:	d118      	bne.n	800c5d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	681a      	ldr	r2, [r3, #0]
 800c5a2:	4b15      	ldr	r3, [pc, #84]	; (800c5f8 <prvInsertBlockIntoFreeList+0xb0>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d00d      	beq.n	800c5c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	685a      	ldr	r2, [r3, #4]
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	685b      	ldr	r3, [r3, #4]
 800c5b4:	441a      	add	r2, r3
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	681a      	ldr	r2, [r3, #0]
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	601a      	str	r2, [r3, #0]
 800c5c4:	e008      	b.n	800c5d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c5c6:	4b0c      	ldr	r3, [pc, #48]	; (800c5f8 <prvInsertBlockIntoFreeList+0xb0>)
 800c5c8:	681a      	ldr	r2, [r3, #0]
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	601a      	str	r2, [r3, #0]
 800c5ce:	e003      	b.n	800c5d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	681a      	ldr	r2, [r3, #0]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c5d8:	68fa      	ldr	r2, [r7, #12]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	429a      	cmp	r2, r3
 800c5de:	d002      	beq.n	800c5e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	687a      	ldr	r2, [r7, #4]
 800c5e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c5e6:	bf00      	nop
 800c5e8:	3714      	adds	r7, #20
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f0:	4770      	bx	lr
 800c5f2:	bf00      	nop
 800c5f4:	20006258 	.word	0x20006258
 800c5f8:	20006260 	.word	0x20006260

0800c5fc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b084      	sub	sp, #16
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
 800c604:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800c606:	f008 facd 	bl	8014ba4 <sys_timeouts_sleeptime>
 800c60a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c612:	d10b      	bne.n	800c62c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800c614:	4813      	ldr	r0, [pc, #76]	; (800c664 <tcpip_timeouts_mbox_fetch+0x68>)
 800c616:	f00f fc2c 	bl	801be72 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800c61a:	2200      	movs	r2, #0
 800c61c:	6839      	ldr	r1, [r7, #0]
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f00f fb94 	bl	801bd4c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800c624:	480f      	ldr	r0, [pc, #60]	; (800c664 <tcpip_timeouts_mbox_fetch+0x68>)
 800c626:	f00f fc15 	bl	801be54 <sys_mutex_lock>
    return;
 800c62a:	e018      	b.n	800c65e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d102      	bne.n	800c638 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800c632:	f008 fa7d 	bl	8014b30 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c636:	e7e6      	b.n	800c606 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800c638:	480a      	ldr	r0, [pc, #40]	; (800c664 <tcpip_timeouts_mbox_fetch+0x68>)
 800c63a:	f00f fc1a 	bl	801be72 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800c63e:	68fa      	ldr	r2, [r7, #12]
 800c640:	6839      	ldr	r1, [r7, #0]
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f00f fb82 	bl	801bd4c <sys_arch_mbox_fetch>
 800c648:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800c64a:	4806      	ldr	r0, [pc, #24]	; (800c664 <tcpip_timeouts_mbox_fetch+0x68>)
 800c64c:	f00f fc02 	bl	801be54 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c656:	d102      	bne.n	800c65e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800c658:	f008 fa6a 	bl	8014b30 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c65c:	e7d3      	b.n	800c606 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800c65e:	3710      	adds	r7, #16
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}
 800c664:	200070d0 	.word	0x200070d0

0800c668 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b084      	sub	sp, #16
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800c670:	4812      	ldr	r0, [pc, #72]	; (800c6bc <tcpip_thread+0x54>)
 800c672:	f00f fbef 	bl	801be54 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800c676:	4b12      	ldr	r3, [pc, #72]	; (800c6c0 <tcpip_thread+0x58>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d005      	beq.n	800c68a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800c67e:	4b10      	ldr	r3, [pc, #64]	; (800c6c0 <tcpip_thread+0x58>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	4a10      	ldr	r2, [pc, #64]	; (800c6c4 <tcpip_thread+0x5c>)
 800c684:	6812      	ldr	r2, [r2, #0]
 800c686:	4610      	mov	r0, r2
 800c688:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c68a:	f107 030c 	add.w	r3, r7, #12
 800c68e:	4619      	mov	r1, r3
 800c690:	480d      	ldr	r0, [pc, #52]	; (800c6c8 <tcpip_thread+0x60>)
 800c692:	f7ff ffb3 	bl	800c5fc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d109      	bne.n	800c6b0 <tcpip_thread+0x48>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
 800c69c:	480b      	ldr	r0, [pc, #44]	; (800c6cc <tcpip_thread+0x64>)
 800c69e:	f013 ff39 	bl	8020514 <puts>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c6a2:	4b0b      	ldr	r3, [pc, #44]	; (800c6d0 <tcpip_thread+0x68>)
 800c6a4:	2291      	movs	r2, #145	; 0x91
 800c6a6:	490b      	ldr	r1, [pc, #44]	; (800c6d4 <tcpip_thread+0x6c>)
 800c6a8:	480b      	ldr	r0, [pc, #44]	; (800c6d8 <tcpip_thread+0x70>)
 800c6aa:	f013 fe97 	bl	80203dc <iprintf>
      continue;
 800c6ae:	e003      	b.n	800c6b8 <tcpip_thread+0x50>
    }
    tcpip_thread_handle_msg(msg);
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f000 f812 	bl	800c6dc <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c6b8:	e7e7      	b.n	800c68a <tcpip_thread+0x22>
 800c6ba:	bf00      	nop
 800c6bc:	200070d0 	.word	0x200070d0
 800c6c0:	20006270 	.word	0x20006270
 800c6c4:	20006274 	.word	0x20006274
 800c6c8:	20006278 	.word	0x20006278
 800c6cc:	0802157c 	.word	0x0802157c
 800c6d0:	080215a0 	.word	0x080215a0
 800c6d4:	080215d0 	.word	0x080215d0
 800c6d8:	080215f0 	.word	0x080215f0

0800c6dc <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b082      	sub	sp, #8
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	2b02      	cmp	r3, #2
 800c6ea:	d02e      	beq.n	800c74a <tcpip_thread_handle_msg+0x6e>
 800c6ec:	2b02      	cmp	r3, #2
 800c6ee:	dc37      	bgt.n	800c760 <tcpip_thread_handle_msg+0x84>
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d002      	beq.n	800c6fa <tcpip_thread_handle_msg+0x1e>
 800c6f4:	2b01      	cmp	r3, #1
 800c6f6:	d019      	beq.n	800c72c <tcpip_thread_handle_msg+0x50>
 800c6f8:	e032      	b.n	800c760 <tcpip_thread_handle_msg+0x84>
      break;
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
 800c6fa:	6879      	ldr	r1, [r7, #4]
 800c6fc:	4821      	ldr	r0, [pc, #132]	; (800c784 <tcpip_thread_handle_msg+0xa8>)
 800c6fe:	f013 fe6d 	bl	80203dc <iprintf>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	68db      	ldr	r3, [r3, #12]
 800c706:	687a      	ldr	r2, [r7, #4]
 800c708:	6850      	ldr	r0, [r2, #4]
 800c70a:	687a      	ldr	r2, [r7, #4]
 800c70c:	6892      	ldr	r2, [r2, #8]
 800c70e:	4611      	mov	r1, r2
 800c710:	4798      	blx	r3
 800c712:	4603      	mov	r3, r0
 800c714:	2b00      	cmp	r3, #0
 800c716:	d004      	beq.n	800c722 <tcpip_thread_handle_msg+0x46>
        pbuf_free(msg->msg.inp.p);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	4618      	mov	r0, r3
 800c71e:	f002 fab7 	bl	800ec90 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c722:	6879      	ldr	r1, [r7, #4]
 800c724:	2009      	movs	r0, #9
 800c726:	f001 faf7 	bl	800dd18 <memp_free>
      break;
 800c72a:	e026      	b.n	800c77a <tcpip_thread_handle_msg+0x9e>
      memp_free(MEMP_TCPIP_MSG_API, msg);
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
 800c72c:	6879      	ldr	r1, [r7, #4]
 800c72e:	4816      	ldr	r0, [pc, #88]	; (800c788 <tcpip_thread_handle_msg+0xac>)
 800c730:	f013 fe54 	bl	80203dc <iprintf>
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	685b      	ldr	r3, [r3, #4]
 800c738:	687a      	ldr	r2, [r7, #4]
 800c73a:	6892      	ldr	r2, [r2, #8]
 800c73c:	4610      	mov	r0, r2
 800c73e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800c740:	6879      	ldr	r1, [r7, #4]
 800c742:	2008      	movs	r0, #8
 800c744:	f001 fae8 	bl	800dd18 <memp_free>
      break;
 800c748:	e017      	b.n	800c77a <tcpip_thread_handle_msg+0x9e>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
 800c74a:	6879      	ldr	r1, [r7, #4]
 800c74c:	480f      	ldr	r0, [pc, #60]	; (800c78c <tcpip_thread_handle_msg+0xb0>)
 800c74e:	f013 fe45 	bl	80203dc <iprintf>
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	685b      	ldr	r3, [r3, #4]
 800c756:	687a      	ldr	r2, [r7, #4]
 800c758:	6892      	ldr	r2, [r2, #8]
 800c75a:	4610      	mov	r0, r2
 800c75c:	4798      	blx	r3
      break;
 800c75e:	e00c      	b.n	800c77a <tcpip_thread_handle_msg+0x9e>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	781b      	ldrb	r3, [r3, #0]
 800c764:	4619      	mov	r1, r3
 800c766:	480a      	ldr	r0, [pc, #40]	; (800c790 <tcpip_thread_handle_msg+0xb4>)
 800c768:	f013 fe38 	bl	80203dc <iprintf>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c76c:	4b09      	ldr	r3, [pc, #36]	; (800c794 <tcpip_thread_handle_msg+0xb8>)
 800c76e:	22cf      	movs	r2, #207	; 0xcf
 800c770:	4909      	ldr	r1, [pc, #36]	; (800c798 <tcpip_thread_handle_msg+0xbc>)
 800c772:	480a      	ldr	r0, [pc, #40]	; (800c79c <tcpip_thread_handle_msg+0xc0>)
 800c774:	f013 fe32 	bl	80203dc <iprintf>
      break;
 800c778:	bf00      	nop
  }
}
 800c77a:	bf00      	nop
 800c77c:	3708      	adds	r7, #8
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}
 800c782:	bf00      	nop
 800c784:	08021618 	.word	0x08021618
 800c788:	08021634 	.word	0x08021634
 800c78c:	08021650 	.word	0x08021650
 800c790:	08021674 	.word	0x08021674
 800c794:	080215a0 	.word	0x080215a0
 800c798:	080215d0 	.word	0x080215d0
 800c79c:	080215f0 	.word	0x080215f0

0800c7a0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b086      	sub	sp, #24
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	60f8      	str	r0, [r7, #12]
 800c7a8:	60b9      	str	r1, [r7, #8]
 800c7aa:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c7ac:	481a      	ldr	r0, [pc, #104]	; (800c818 <tcpip_inpkt+0x78>)
 800c7ae:	f00f fafe 	bl	801bdae <sys_mbox_valid>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d105      	bne.n	800c7c4 <tcpip_inpkt+0x24>
 800c7b8:	4b18      	ldr	r3, [pc, #96]	; (800c81c <tcpip_inpkt+0x7c>)
 800c7ba:	22fc      	movs	r2, #252	; 0xfc
 800c7bc:	4918      	ldr	r1, [pc, #96]	; (800c820 <tcpip_inpkt+0x80>)
 800c7be:	4819      	ldr	r0, [pc, #100]	; (800c824 <tcpip_inpkt+0x84>)
 800c7c0:	f013 fe0c 	bl	80203dc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800c7c4:	2009      	movs	r0, #9
 800c7c6:	f001 fa2b 	bl	800dc20 <memp_malloc>
 800c7ca:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d102      	bne.n	800c7d8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800c7d2:	f04f 33ff 	mov.w	r3, #4294967295
 800c7d6:	e01a      	b.n	800c80e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	68fa      	ldr	r2, [r7, #12]
 800c7e2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	68ba      	ldr	r2, [r7, #8]
 800c7e8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	687a      	ldr	r2, [r7, #4]
 800c7ee:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c7f0:	6979      	ldr	r1, [r7, #20]
 800c7f2:	4809      	ldr	r0, [pc, #36]	; (800c818 <tcpip_inpkt+0x78>)
 800c7f4:	f00f fa86 	bl	801bd04 <sys_mbox_trypost>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d006      	beq.n	800c80c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c7fe:	6979      	ldr	r1, [r7, #20]
 800c800:	2009      	movs	r0, #9
 800c802:	f001 fa89 	bl	800dd18 <memp_free>
    return ERR_MEM;
 800c806:	f04f 33ff 	mov.w	r3, #4294967295
 800c80a:	e000      	b.n	800c80e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800c80c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3718      	adds	r7, #24
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}
 800c816:	bf00      	nop
 800c818:	20006278 	.word	0x20006278
 800c81c:	080215a0 	.word	0x080215a0
 800c820:	08021698 	.word	0x08021698
 800c824:	080215f0 	.word	0x080215f0

0800c828 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b082      	sub	sp, #8
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
 800c830:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c838:	f003 0318 	and.w	r3, r3, #24
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d006      	beq.n	800c84e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800c840:	4a08      	ldr	r2, [pc, #32]	; (800c864 <tcpip_input+0x3c>)
 800c842:	6839      	ldr	r1, [r7, #0]
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f7ff ffab 	bl	800c7a0 <tcpip_inpkt>
 800c84a:	4603      	mov	r3, r0
 800c84c:	e005      	b.n	800c85a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800c84e:	4a06      	ldr	r2, [pc, #24]	; (800c868 <tcpip_input+0x40>)
 800c850:	6839      	ldr	r1, [r7, #0]
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f7ff ffa4 	bl	800c7a0 <tcpip_inpkt>
 800c858:	4603      	mov	r3, r0
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3708      	adds	r7, #8
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}
 800c862:	bf00      	nop
 800c864:	0801b9c9 	.word	0x0801b9c9
 800c868:	0801a079 	.word	0x0801a079

0800c86c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b084      	sub	sp, #16
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c876:	4819      	ldr	r0, [pc, #100]	; (800c8dc <tcpip_try_callback+0x70>)
 800c878:	f00f fa99 	bl	801bdae <sys_mbox_valid>
 800c87c:	4603      	mov	r3, r0
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d106      	bne.n	800c890 <tcpip_try_callback+0x24>
 800c882:	4b17      	ldr	r3, [pc, #92]	; (800c8e0 <tcpip_try_callback+0x74>)
 800c884:	f240 125d 	movw	r2, #349	; 0x15d
 800c888:	4916      	ldr	r1, [pc, #88]	; (800c8e4 <tcpip_try_callback+0x78>)
 800c88a:	4817      	ldr	r0, [pc, #92]	; (800c8e8 <tcpip_try_callback+0x7c>)
 800c88c:	f013 fda6 	bl	80203dc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800c890:	2008      	movs	r0, #8
 800c892:	f001 f9c5 	bl	800dc20 <memp_malloc>
 800c896:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d102      	bne.n	800c8a4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800c89e:	f04f 33ff 	mov.w	r3, #4294967295
 800c8a2:	e017      	b.n	800c8d4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2201      	movs	r2, #1
 800c8a8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	687a      	ldr	r2, [r7, #4]
 800c8ae:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	683a      	ldr	r2, [r7, #0]
 800c8b4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c8b6:	68f9      	ldr	r1, [r7, #12]
 800c8b8:	4808      	ldr	r0, [pc, #32]	; (800c8dc <tcpip_try_callback+0x70>)
 800c8ba:	f00f fa23 	bl	801bd04 <sys_mbox_trypost>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d006      	beq.n	800c8d2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800c8c4:	68f9      	ldr	r1, [r7, #12]
 800c8c6:	2008      	movs	r0, #8
 800c8c8:	f001 fa26 	bl	800dd18 <memp_free>
    return ERR_MEM;
 800c8cc:	f04f 33ff 	mov.w	r3, #4294967295
 800c8d0:	e000      	b.n	800c8d4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800c8d2:	2300      	movs	r3, #0
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3710      	adds	r7, #16
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}
 800c8dc:	20006278 	.word	0x20006278
 800c8e0:	080215a0 	.word	0x080215a0
 800c8e4:	08021698 	.word	0x08021698
 800c8e8:	080215f0 	.word	0x080215f0

0800c8ec <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b084      	sub	sp, #16
 800c8f0:	af02      	add	r7, sp, #8
 800c8f2:	6078      	str	r0, [r7, #4]
 800c8f4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800c8f6:	f000 fc1a 	bl	800d12e <lwip_init>

  tcpip_init_done = initfunc;
 800c8fa:	4a17      	ldr	r2, [pc, #92]	; (800c958 <tcpip_init+0x6c>)
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800c900:	4a16      	ldr	r2, [pc, #88]	; (800c95c <tcpip_init+0x70>)
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800c906:	2106      	movs	r1, #6
 800c908:	4815      	ldr	r0, [pc, #84]	; (800c960 <tcpip_init+0x74>)
 800c90a:	f00f f9c9 	bl	801bca0 <sys_mbox_new>
 800c90e:	4603      	mov	r3, r0
 800c910:	2b00      	cmp	r3, #0
 800c912:	d006      	beq.n	800c922 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800c914:	4b13      	ldr	r3, [pc, #76]	; (800c964 <tcpip_init+0x78>)
 800c916:	f240 2261 	movw	r2, #609	; 0x261
 800c91a:	4913      	ldr	r1, [pc, #76]	; (800c968 <tcpip_init+0x7c>)
 800c91c:	4813      	ldr	r0, [pc, #76]	; (800c96c <tcpip_init+0x80>)
 800c91e:	f013 fd5d 	bl	80203dc <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800c922:	4813      	ldr	r0, [pc, #76]	; (800c970 <tcpip_init+0x84>)
 800c924:	f00f fa60 	bl	801bde8 <sys_mutex_new>
 800c928:	4603      	mov	r3, r0
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d006      	beq.n	800c93c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800c92e:	4b0d      	ldr	r3, [pc, #52]	; (800c964 <tcpip_init+0x78>)
 800c930:	f240 2265 	movw	r2, #613	; 0x265
 800c934:	490f      	ldr	r1, [pc, #60]	; (800c974 <tcpip_init+0x88>)
 800c936:	480d      	ldr	r0, [pc, #52]	; (800c96c <tcpip_init+0x80>)
 800c938:	f013 fd50 	bl	80203dc <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800c93c:	2318      	movs	r3, #24
 800c93e:	9300      	str	r3, [sp, #0]
 800c940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c944:	2200      	movs	r2, #0
 800c946:	490c      	ldr	r1, [pc, #48]	; (800c978 <tcpip_init+0x8c>)
 800c948:	480c      	ldr	r0, [pc, #48]	; (800c97c <tcpip_init+0x90>)
 800c94a:	f00f fa9f 	bl	801be8c <sys_thread_new>
}
 800c94e:	bf00      	nop
 800c950:	3708      	adds	r7, #8
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}
 800c956:	bf00      	nop
 800c958:	20006270 	.word	0x20006270
 800c95c:	20006274 	.word	0x20006274
 800c960:	20006278 	.word	0x20006278
 800c964:	080215a0 	.word	0x080215a0
 800c968:	080216a8 	.word	0x080216a8
 800c96c:	080215f0 	.word	0x080215f0
 800c970:	200070d0 	.word	0x200070d0
 800c974:	080216cc 	.word	0x080216cc
 800c978:	0800c669 	.word	0x0800c669
 800c97c:	080216f0 	.word	0x080216f0

0800c980 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c980:	b480      	push	{r7}
 800c982:	b083      	sub	sp, #12
 800c984:	af00      	add	r7, sp, #0
 800c986:	4603      	mov	r3, r0
 800c988:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c98a:	88fb      	ldrh	r3, [r7, #6]
 800c98c:	021b      	lsls	r3, r3, #8
 800c98e:	b21a      	sxth	r2, r3
 800c990:	88fb      	ldrh	r3, [r7, #6]
 800c992:	0a1b      	lsrs	r3, r3, #8
 800c994:	b29b      	uxth	r3, r3
 800c996:	b21b      	sxth	r3, r3
 800c998:	4313      	orrs	r3, r2
 800c99a:	b21b      	sxth	r3, r3
 800c99c:	b29b      	uxth	r3, r3
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	370c      	adds	r7, #12
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a8:	4770      	bx	lr

0800c9aa <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c9aa:	b480      	push	{r7}
 800c9ac:	b083      	sub	sp, #12
 800c9ae:	af00      	add	r7, sp, #0
 800c9b0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	061a      	lsls	r2, r3, #24
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	021b      	lsls	r3, r3, #8
 800c9ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c9be:	431a      	orrs	r2, r3
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	0a1b      	lsrs	r3, r3, #8
 800c9c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c9c8:	431a      	orrs	r2, r3
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	0e1b      	lsrs	r3, r3, #24
 800c9ce:	4313      	orrs	r3, r2
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	370c      	adds	r7, #12
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9da:	4770      	bx	lr

0800c9dc <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 800c9dc:	b480      	push	{r7}
 800c9de:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 800c9e0:	bf00      	nop
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e8:	4770      	bx	lr
	...

0800c9ec <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b083      	sub	sp, #12
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	6039      	str	r1, [r7, #0]
 800c9f6:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 800c9f8:	79fb      	ldrb	r3, [r7, #7]
 800c9fa:	2b01      	cmp	r3, #1
 800c9fc:	d80f      	bhi.n	800ca1e <dns_setserver+0x32>
    if (dnsserver != NULL) {
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d006      	beq.n	800ca12 <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 800ca04:	79fb      	ldrb	r3, [r7, #7]
 800ca06:	4909      	ldr	r1, [pc, #36]	; (800ca2c <dns_setserver+0x40>)
 800ca08:	683a      	ldr	r2, [r7, #0]
 800ca0a:	6812      	ldr	r2, [r2, #0]
 800ca0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 800ca10:	e005      	b.n	800ca1e <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 800ca12:	79fb      	ldrb	r3, [r7, #7]
 800ca14:	4905      	ldr	r1, [pc, #20]	; (800ca2c <dns_setserver+0x40>)
 800ca16:	4a06      	ldr	r2, [pc, #24]	; (800ca30 <dns_setserver+0x44>)
 800ca18:	6812      	ldr	r2, [r2, #0]
 800ca1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800ca1e:	bf00      	nop
 800ca20:	370c      	adds	r7, #12
 800ca22:	46bd      	mov	sp, r7
 800ca24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca28:	4770      	bx	lr
 800ca2a:	bf00      	nop
 800ca2c:	200066fc 	.word	0x200066fc
 800ca30:	08026bf4 	.word	0x08026bf4

0800ca34 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 800ca38:	f000 faa8 	bl	800cf8c <dns_check_entries>
}
 800ca3c:	bf00      	nop
 800ca3e:	bd80      	pop	{r7, pc}

0800ca40 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b090      	sub	sp, #64	; 0x40
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	4603      	mov	r3, r0
 800ca48:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 800ca4a:	79fa      	ldrb	r2, [r7, #7]
 800ca4c:	4613      	mov	r3, r2
 800ca4e:	011b      	lsls	r3, r3, #4
 800ca50:	4413      	add	r3, r2
 800ca52:	011b      	lsls	r3, r3, #4
 800ca54:	4a6c      	ldr	r2, [pc, #432]	; (800cc08 <dns_send+0x1c8>)
 800ca56:	4413      	add	r3, r2
 800ca58:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 800ca5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca5c:	7adb      	ldrb	r3, [r3, #11]
 800ca5e:	2b01      	cmp	r3, #1
 800ca60:	d906      	bls.n	800ca70 <dns_send+0x30>
 800ca62:	4b6a      	ldr	r3, [pc, #424]	; (800cc0c <dns_send+0x1cc>)
 800ca64:	f240 22fa 	movw	r2, #762	; 0x2fa
 800ca68:	4969      	ldr	r1, [pc, #420]	; (800cc10 <dns_send+0x1d0>)
 800ca6a:	486a      	ldr	r0, [pc, #424]	; (800cc14 <dns_send+0x1d4>)
 800ca6c:	f013 fcb6 	bl	80203dc <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 800ca70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca72:	7adb      	ldrb	r3, [r3, #11]
 800ca74:	461a      	mov	r2, r3
 800ca76:	4b68      	ldr	r3, [pc, #416]	; (800cc18 <dns_send+0x1d8>)
 800ca78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d109      	bne.n	800ca94 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 800ca80:	79fb      	ldrb	r3, [r7, #7]
 800ca82:	2100      	movs	r1, #0
 800ca84:	4618      	mov	r0, r3
 800ca86:	f000 f8cb 	bl	800cc20 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 800ca8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 800ca90:	2300      	movs	r3, #0
 800ca92:	e0b4      	b.n	800cbfe <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 800ca94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca96:	3310      	adds	r3, #16
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f7f3 fc21 	bl	80002e0 <strlen>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	b29b      	uxth	r3, r3
 800caa2:	3312      	adds	r3, #18
 800caa4:	b29b      	uxth	r3, r3
 800caa6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800caaa:	4619      	mov	r1, r3
 800caac:	2036      	movs	r0, #54	; 0x36
 800caae:	f001 fe0b 	bl	800e6c8 <pbuf_alloc>
 800cab2:	62f8      	str	r0, [r7, #44]	; 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 800cab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	f000 8095 	beq.w	800cbe6 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 800cabc:	f107 0310 	add.w	r3, r7, #16
 800cac0:	220c      	movs	r2, #12
 800cac2:	2100      	movs	r1, #0
 800cac4:	4618      	mov	r0, r3
 800cac6:	f013 fbd7 	bl	8020278 <memset>
    hdr.id = lwip_htons(entry->txid);
 800caca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cacc:	891b      	ldrh	r3, [r3, #8]
 800cace:	4618      	mov	r0, r3
 800cad0:	f7ff ff56 	bl	800c980 <lwip_htons>
 800cad4:	4603      	mov	r3, r0
 800cad6:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 800cad8:	2301      	movs	r3, #1
 800cada:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 800cadc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cae0:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800cae2:	f107 0310 	add.w	r3, r7, #16
 800cae6:	220c      	movs	r2, #12
 800cae8:	4619      	mov	r1, r3
 800caea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800caec:	f002 fb84 	bl	800f1f8 <pbuf_take>
    hostname = entry->name;
 800caf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf2:	3310      	adds	r3, #16
 800caf4:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 800caf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf8:	3b01      	subs	r3, #1
 800cafa:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 800cafc:	230c      	movs	r3, #12
 800cafe:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 800cb00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb02:	3301      	adds	r3, #1
 800cb04:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 800cb06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb08:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800cb10:	e007      	b.n	800cb22 <dns_send+0xe2>
        ++n;
 800cb12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cb16:	3301      	adds	r3, #1
 800cb18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800cb1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb1e:	3301      	adds	r3, #1
 800cb20:	63bb      	str	r3, [r7, #56]	; 0x38
 800cb22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb24:	781b      	ldrb	r3, [r3, #0]
 800cb26:	2b2e      	cmp	r3, #46	; 0x2e
 800cb28:	d003      	beq.n	800cb32 <dns_send+0xf2>
 800cb2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb2c:	781b      	ldrb	r3, [r3, #0]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d1ef      	bne.n	800cb12 <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 800cb32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb36:	1ad3      	subs	r3, r2, r3
 800cb38:	84fb      	strh	r3, [r7, #38]	; 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 800cb3a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800cb3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cb40:	4413      	add	r3, r2
 800cb42:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800cb46:	4293      	cmp	r3, r2
 800cb48:	dc53      	bgt.n	800cbf2 <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 800cb4a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800cb4e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cb50:	4619      	mov	r1, r3
 800cb52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb54:	f002 fc7e 	bl	800f454 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 800cb58:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cb5a:	3301      	adds	r3, #1
 800cb5c:	b29b      	uxth	r3, r3
 800cb5e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cb60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb64:	f002 fbda 	bl	800f31c <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 800cb68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cb6c:	b29a      	uxth	r2, r3
 800cb6e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cb70:	4413      	add	r3, r2
 800cb72:	b29b      	uxth	r3, r3
 800cb74:	3301      	adds	r3, #1
 800cb76:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 800cb78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb7a:	781b      	ldrb	r3, [r3, #0]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d1bf      	bne.n	800cb00 <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 800cb80:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cb82:	2200      	movs	r2, #0
 800cb84:	4619      	mov	r1, r3
 800cb86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb88:	f002 fc64 	bl	800f454 <pbuf_put_at>
    query_idx++;
 800cb8c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cb8e:	3301      	adds	r3, #1
 800cb90:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 800cb92:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cb96:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 800cb98:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cb9c:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 800cb9e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cba0:	f107 010c 	add.w	r1, r7, #12
 800cba4:	2204      	movs	r2, #4
 800cba6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cba8:	f002 fbb8 	bl	800f31c <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 800cbac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbae:	7bdb      	ldrb	r3, [r3, #15]
 800cbb0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 800cbb4:	2335      	movs	r3, #53	; 0x35
 800cbb6:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 800cbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbba:	7adb      	ldrb	r3, [r3, #11]
 800cbbc:	009b      	lsls	r3, r3, #2
 800cbbe:	4a16      	ldr	r2, [pc, #88]	; (800cc18 <dns_send+0x1d8>)
 800cbc0:	4413      	add	r3, r2
 800cbc2:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 800cbc4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800cbc8:	4a14      	ldr	r2, [pc, #80]	; (800cc1c <dns_send+0x1dc>)
 800cbca:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800cbce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cbd0:	69fa      	ldr	r2, [r7, #28]
 800cbd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cbd4:	f008 face 	bl	8015174 <udp_sendto>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 800cbde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cbe0:	f002 f856 	bl	800ec90 <pbuf_free>
 800cbe4:	e002      	b.n	800cbec <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 800cbe6:	23ff      	movs	r3, #255	; 0xff
 800cbe8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 800cbec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cbf0:	e005      	b.n	800cbfe <dns_send+0x1be>
        goto overflow_return;
 800cbf2:	bf00      	nop
overflow_return:
  pbuf_free(p);
 800cbf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cbf6:	f002 f84b 	bl	800ec90 <pbuf_free>
  return ERR_VAL;
 800cbfa:	f06f 0305 	mvn.w	r3, #5
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	3740      	adds	r7, #64	; 0x40
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}
 800cc06:	bf00      	nop
 800cc08:	2000628c 	.word	0x2000628c
 800cc0c:	08021700 	.word	0x08021700
 800cc10:	08021730 	.word	0x08021730
 800cc14:	08021748 	.word	0x08021748
 800cc18:	200066fc 	.word	0x200066fc
 800cc1c:	2000627c 	.word	0x2000627c

0800cc20 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 800cc20:	b590      	push	{r4, r7, lr}
 800cc22:	b085      	sub	sp, #20
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	4603      	mov	r3, r0
 800cc28:	6039      	str	r1, [r7, #0]
 800cc2a:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	73fb      	strb	r3, [r7, #15]
 800cc30:	e03d      	b.n	800ccae <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 800cc32:	7bfa      	ldrb	r2, [r7, #15]
 800cc34:	4957      	ldr	r1, [pc, #348]	; (800cd94 <dns_call_found+0x174>)
 800cc36:	4613      	mov	r3, r2
 800cc38:	005b      	lsls	r3, r3, #1
 800cc3a:	4413      	add	r3, r2
 800cc3c:	009b      	lsls	r3, r3, #2
 800cc3e:	440b      	add	r3, r1
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d030      	beq.n	800cca8 <dns_call_found+0x88>
 800cc46:	7bfa      	ldrb	r2, [r7, #15]
 800cc48:	4952      	ldr	r1, [pc, #328]	; (800cd94 <dns_call_found+0x174>)
 800cc4a:	4613      	mov	r3, r2
 800cc4c:	005b      	lsls	r3, r3, #1
 800cc4e:	4413      	add	r3, r2
 800cc50:	009b      	lsls	r3, r3, #2
 800cc52:	440b      	add	r3, r1
 800cc54:	3308      	adds	r3, #8
 800cc56:	781b      	ldrb	r3, [r3, #0]
 800cc58:	79fa      	ldrb	r2, [r7, #7]
 800cc5a:	429a      	cmp	r2, r3
 800cc5c:	d124      	bne.n	800cca8 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 800cc5e:	7bfa      	ldrb	r2, [r7, #15]
 800cc60:	494c      	ldr	r1, [pc, #304]	; (800cd94 <dns_call_found+0x174>)
 800cc62:	4613      	mov	r3, r2
 800cc64:	005b      	lsls	r3, r3, #1
 800cc66:	4413      	add	r3, r2
 800cc68:	009b      	lsls	r3, r3, #2
 800cc6a:	440b      	add	r3, r1
 800cc6c:	681c      	ldr	r4, [r3, #0]
 800cc6e:	79fa      	ldrb	r2, [r7, #7]
 800cc70:	4613      	mov	r3, r2
 800cc72:	011b      	lsls	r3, r3, #4
 800cc74:	4413      	add	r3, r2
 800cc76:	011b      	lsls	r3, r3, #4
 800cc78:	3310      	adds	r3, #16
 800cc7a:	4a47      	ldr	r2, [pc, #284]	; (800cd98 <dns_call_found+0x178>)
 800cc7c:	1898      	adds	r0, r3, r2
 800cc7e:	7bfa      	ldrb	r2, [r7, #15]
 800cc80:	4944      	ldr	r1, [pc, #272]	; (800cd94 <dns_call_found+0x174>)
 800cc82:	4613      	mov	r3, r2
 800cc84:	005b      	lsls	r3, r3, #1
 800cc86:	4413      	add	r3, r2
 800cc88:	009b      	lsls	r3, r3, #2
 800cc8a:	440b      	add	r3, r1
 800cc8c:	3304      	adds	r3, #4
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	461a      	mov	r2, r3
 800cc92:	6839      	ldr	r1, [r7, #0]
 800cc94:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 800cc96:	7bfa      	ldrb	r2, [r7, #15]
 800cc98:	493e      	ldr	r1, [pc, #248]	; (800cd94 <dns_call_found+0x174>)
 800cc9a:	4613      	mov	r3, r2
 800cc9c:	005b      	lsls	r3, r3, #1
 800cc9e:	4413      	add	r3, r2
 800cca0:	009b      	lsls	r3, r3, #2
 800cca2:	440b      	add	r3, r1
 800cca4:	2200      	movs	r2, #0
 800cca6:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800cca8:	7bfb      	ldrb	r3, [r7, #15]
 800ccaa:	3301      	adds	r3, #1
 800ccac:	73fb      	strb	r3, [r7, #15]
 800ccae:	7bfb      	ldrb	r3, [r7, #15]
 800ccb0:	2b03      	cmp	r3, #3
 800ccb2:	d9be      	bls.n	800cc32 <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	73fb      	strb	r3, [r7, #15]
 800ccb8:	e031      	b.n	800cd1e <dns_call_found+0xfe>
    if (i == idx) {
 800ccba:	7bfa      	ldrb	r2, [r7, #15]
 800ccbc:	79fb      	ldrb	r3, [r7, #7]
 800ccbe:	429a      	cmp	r2, r3
 800ccc0:	d029      	beq.n	800cd16 <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 800ccc2:	7bfa      	ldrb	r2, [r7, #15]
 800ccc4:	4934      	ldr	r1, [pc, #208]	; (800cd98 <dns_call_found+0x178>)
 800ccc6:	4613      	mov	r3, r2
 800ccc8:	011b      	lsls	r3, r3, #4
 800ccca:	4413      	add	r3, r2
 800cccc:	011b      	lsls	r3, r3, #4
 800ccce:	440b      	add	r3, r1
 800ccd0:	330a      	adds	r3, #10
 800ccd2:	781b      	ldrb	r3, [r3, #0]
 800ccd4:	2b02      	cmp	r3, #2
 800ccd6:	d11f      	bne.n	800cd18 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 800ccd8:	7bfa      	ldrb	r2, [r7, #15]
 800ccda:	492f      	ldr	r1, [pc, #188]	; (800cd98 <dns_call_found+0x178>)
 800ccdc:	4613      	mov	r3, r2
 800ccde:	011b      	lsls	r3, r3, #4
 800cce0:	4413      	add	r3, r2
 800cce2:	011b      	lsls	r3, r3, #4
 800cce4:	440b      	add	r3, r1
 800cce6:	330f      	adds	r3, #15
 800cce8:	7819      	ldrb	r1, [r3, #0]
 800ccea:	79fa      	ldrb	r2, [r7, #7]
 800ccec:	482a      	ldr	r0, [pc, #168]	; (800cd98 <dns_call_found+0x178>)
 800ccee:	4613      	mov	r3, r2
 800ccf0:	011b      	lsls	r3, r3, #4
 800ccf2:	4413      	add	r3, r2
 800ccf4:	011b      	lsls	r3, r3, #4
 800ccf6:	4403      	add	r3, r0
 800ccf8:	330f      	adds	r3, #15
 800ccfa:	781b      	ldrb	r3, [r3, #0]
 800ccfc:	4299      	cmp	r1, r3
 800ccfe:	d10b      	bne.n	800cd18 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800cd00:	79fa      	ldrb	r2, [r7, #7]
 800cd02:	4925      	ldr	r1, [pc, #148]	; (800cd98 <dns_call_found+0x178>)
 800cd04:	4613      	mov	r3, r2
 800cd06:	011b      	lsls	r3, r3, #4
 800cd08:	4413      	add	r3, r2
 800cd0a:	011b      	lsls	r3, r3, #4
 800cd0c:	440b      	add	r3, r1
 800cd0e:	330f      	adds	r3, #15
 800cd10:	2204      	movs	r2, #4
 800cd12:	701a      	strb	r2, [r3, #0]
        break;
 800cd14:	e006      	b.n	800cd24 <dns_call_found+0x104>
      continue; /* only check other requests */
 800cd16:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800cd18:	7bfb      	ldrb	r3, [r7, #15]
 800cd1a:	3301      	adds	r3, #1
 800cd1c:	73fb      	strb	r3, [r7, #15]
 800cd1e:	7bfb      	ldrb	r3, [r7, #15]
 800cd20:	2b03      	cmp	r3, #3
 800cd22:	d9ca      	bls.n	800ccba <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 800cd24:	79fa      	ldrb	r2, [r7, #7]
 800cd26:	491c      	ldr	r1, [pc, #112]	; (800cd98 <dns_call_found+0x178>)
 800cd28:	4613      	mov	r3, r2
 800cd2a:	011b      	lsls	r3, r3, #4
 800cd2c:	4413      	add	r3, r2
 800cd2e:	011b      	lsls	r3, r3, #4
 800cd30:	440b      	add	r3, r1
 800cd32:	330f      	adds	r3, #15
 800cd34:	781b      	ldrb	r3, [r3, #0]
 800cd36:	2b03      	cmp	r3, #3
 800cd38:	d827      	bhi.n	800cd8a <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 800cd3a:	79fa      	ldrb	r2, [r7, #7]
 800cd3c:	4916      	ldr	r1, [pc, #88]	; (800cd98 <dns_call_found+0x178>)
 800cd3e:	4613      	mov	r3, r2
 800cd40:	011b      	lsls	r3, r3, #4
 800cd42:	4413      	add	r3, r2
 800cd44:	011b      	lsls	r3, r3, #4
 800cd46:	440b      	add	r3, r1
 800cd48:	330f      	adds	r3, #15
 800cd4a:	781b      	ldrb	r3, [r3, #0]
 800cd4c:	461a      	mov	r2, r3
 800cd4e:	4b13      	ldr	r3, [pc, #76]	; (800cd9c <dns_call_found+0x17c>)
 800cd50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd54:	4618      	mov	r0, r3
 800cd56:	f008 fe57 	bl	8015a08 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 800cd5a:	79fa      	ldrb	r2, [r7, #7]
 800cd5c:	490e      	ldr	r1, [pc, #56]	; (800cd98 <dns_call_found+0x178>)
 800cd5e:	4613      	mov	r3, r2
 800cd60:	011b      	lsls	r3, r3, #4
 800cd62:	4413      	add	r3, r2
 800cd64:	011b      	lsls	r3, r3, #4
 800cd66:	440b      	add	r3, r1
 800cd68:	330f      	adds	r3, #15
 800cd6a:	781b      	ldrb	r3, [r3, #0]
 800cd6c:	4619      	mov	r1, r3
 800cd6e:	4b0b      	ldr	r3, [pc, #44]	; (800cd9c <dns_call_found+0x17c>)
 800cd70:	2200      	movs	r2, #0
 800cd72:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800cd76:	79fa      	ldrb	r2, [r7, #7]
 800cd78:	4907      	ldr	r1, [pc, #28]	; (800cd98 <dns_call_found+0x178>)
 800cd7a:	4613      	mov	r3, r2
 800cd7c:	011b      	lsls	r3, r3, #4
 800cd7e:	4413      	add	r3, r2
 800cd80:	011b      	lsls	r3, r3, #4
 800cd82:	440b      	add	r3, r1
 800cd84:	330f      	adds	r3, #15
 800cd86:	2204      	movs	r2, #4
 800cd88:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 800cd8a:	bf00      	nop
 800cd8c:	3714      	adds	r7, #20
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bd90      	pop	{r4, r7, pc}
 800cd92:	bf00      	nop
 800cd94:	200066cc 	.word	0x200066cc
 800cd98:	2000628c 	.word	0x2000628c
 800cd9c:	2000627c 	.word	0x2000627c

0800cda0 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b082      	sub	sp, #8
 800cda4:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 800cda6:	f013 fbbd 	bl	8020524 <rand>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800cdae:	2300      	movs	r3, #0
 800cdb0:	71fb      	strb	r3, [r7, #7]
 800cdb2:	e01a      	b.n	800cdea <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800cdb4:	79fa      	ldrb	r2, [r7, #7]
 800cdb6:	4911      	ldr	r1, [pc, #68]	; (800cdfc <dns_create_txid+0x5c>)
 800cdb8:	4613      	mov	r3, r2
 800cdba:	011b      	lsls	r3, r3, #4
 800cdbc:	4413      	add	r3, r2
 800cdbe:	011b      	lsls	r3, r3, #4
 800cdc0:	440b      	add	r3, r1
 800cdc2:	330a      	adds	r3, #10
 800cdc4:	781b      	ldrb	r3, [r3, #0]
 800cdc6:	2b02      	cmp	r3, #2
 800cdc8:	d10c      	bne.n	800cde4 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 800cdca:	79fa      	ldrb	r2, [r7, #7]
 800cdcc:	490b      	ldr	r1, [pc, #44]	; (800cdfc <dns_create_txid+0x5c>)
 800cdce:	4613      	mov	r3, r2
 800cdd0:	011b      	lsls	r3, r3, #4
 800cdd2:	4413      	add	r3, r2
 800cdd4:	011b      	lsls	r3, r3, #4
 800cdd6:	440b      	add	r3, r1
 800cdd8:	3308      	adds	r3, #8
 800cdda:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800cddc:	88ba      	ldrh	r2, [r7, #4]
 800cdde:	429a      	cmp	r2, r3
 800cde0:	d100      	bne.n	800cde4 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 800cde2:	e7e0      	b.n	800cda6 <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800cde4:	79fb      	ldrb	r3, [r7, #7]
 800cde6:	3301      	adds	r3, #1
 800cde8:	71fb      	strb	r3, [r7, #7]
 800cdea:	79fb      	ldrb	r3, [r7, #7]
 800cdec:	2b03      	cmp	r3, #3
 800cdee:	d9e1      	bls.n	800cdb4 <dns_create_txid+0x14>
    }
  }

  return txid;
 800cdf0:	88bb      	ldrh	r3, [r7, #4]
}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	3708      	adds	r7, #8
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}
 800cdfa:	bf00      	nop
 800cdfc:	2000628c 	.word	0x2000628c

0800ce00 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 800ce00:	b480      	push	{r7}
 800ce02:	b085      	sub	sp, #20
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d00d      	beq.n	800ce2e <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	7adb      	ldrb	r3, [r3, #11]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d109      	bne.n	800ce2e <dns_backupserver_available+0x2e>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	7adb      	ldrb	r3, [r3, #11]
 800ce1e:	3301      	adds	r3, #1
 800ce20:	4a06      	ldr	r2, [pc, #24]	; (800ce3c <dns_backupserver_available+0x3c>)
 800ce22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d001      	beq.n	800ce2e <dns_backupserver_available+0x2e>
      ret = 1;
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800ce2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3714      	adds	r7, #20
 800ce34:	46bd      	mov	sp, r7
 800ce36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3a:	4770      	bx	lr
 800ce3c:	200066fc 	.word	0x200066fc

0800ce40 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b084      	sub	sp, #16
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	4603      	mov	r3, r0
 800ce48:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 800ce4a:	79fa      	ldrb	r2, [r7, #7]
 800ce4c:	4613      	mov	r3, r2
 800ce4e:	011b      	lsls	r3, r3, #4
 800ce50:	4413      	add	r3, r2
 800ce52:	011b      	lsls	r3, r3, #4
 800ce54:	4a48      	ldr	r2, [pc, #288]	; (800cf78 <dns_check_entry+0x138>)
 800ce56:	4413      	add	r3, r2
 800ce58:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 800ce5a:	79fb      	ldrb	r3, [r7, #7]
 800ce5c:	2b03      	cmp	r3, #3
 800ce5e:	d906      	bls.n	800ce6e <dns_check_entry+0x2e>
 800ce60:	4b46      	ldr	r3, [pc, #280]	; (800cf7c <dns_check_entry+0x13c>)
 800ce62:	f240 421c 	movw	r2, #1052	; 0x41c
 800ce66:	4946      	ldr	r1, [pc, #280]	; (800cf80 <dns_check_entry+0x140>)
 800ce68:	4846      	ldr	r0, [pc, #280]	; (800cf84 <dns_check_entry+0x144>)
 800ce6a:	f013 fab7 	bl	80203dc <iprintf>

  switch (entry->state) {
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	7a9b      	ldrb	r3, [r3, #10]
 800ce72:	2b03      	cmp	r3, #3
 800ce74:	d86f      	bhi.n	800cf56 <dns_check_entry+0x116>
 800ce76:	a201      	add	r2, pc, #4	; (adr r2, 800ce7c <dns_check_entry+0x3c>)
 800ce78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce7c:	0800cf67 	.word	0x0800cf67
 800ce80:	0800ce8d 	.word	0x0800ce8d
 800ce84:	0800cebf 	.word	0x0800cebf
 800ce88:	0800cf35 	.word	0x0800cf35
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 800ce8c:	f7ff ff88 	bl	800cda0 <dns_create_txid>
 800ce90:	4603      	mov	r3, r0
 800ce92:	461a      	mov	r2, r3
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	2202      	movs	r2, #2
 800ce9c:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	2200      	movs	r2, #0
 800cea2:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	2201      	movs	r2, #1
 800cea8:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	2200      	movs	r2, #0
 800ceae:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 800ceb0:	79fb      	ldrb	r3, [r7, #7]
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f7ff fdc4 	bl	800ca40 <dns_send>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 800cebc:	e058      	b.n	800cf70 <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	7b1b      	ldrb	r3, [r3, #12]
 800cec2:	3b01      	subs	r3, #1
 800cec4:	b2da      	uxtb	r2, r3
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	731a      	strb	r2, [r3, #12]
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	7b1b      	ldrb	r3, [r3, #12]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d14b      	bne.n	800cf6a <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	7b5b      	ldrb	r3, [r3, #13]
 800ced6:	3301      	adds	r3, #1
 800ced8:	b2da      	uxtb	r2, r3
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	735a      	strb	r2, [r3, #13]
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	7b5b      	ldrb	r3, [r3, #13]
 800cee2:	2b04      	cmp	r3, #4
 800cee4:	d11b      	bne.n	800cf1e <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 800cee6:	68f8      	ldr	r0, [r7, #12]
 800cee8:	f7ff ff8a 	bl	800ce00 <dns_backupserver_available>
 800ceec:	4603      	mov	r3, r0
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d00c      	beq.n	800cf0c <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	7adb      	ldrb	r3, [r3, #11]
 800cef6:	3301      	adds	r3, #1
 800cef8:	b2da      	uxtb	r2, r3
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	2201      	movs	r2, #1
 800cf02:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	2200      	movs	r2, #0
 800cf08:	735a      	strb	r2, [r3, #13]
 800cf0a:	e00c      	b.n	800cf26 <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 800cf0c:	79fb      	ldrb	r3, [r7, #7]
 800cf0e:	2100      	movs	r1, #0
 800cf10:	4618      	mov	r0, r3
 800cf12:	f7ff fe85 	bl	800cc20 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	729a      	strb	r2, [r3, #10]
            break;
 800cf1c:	e028      	b.n	800cf70 <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	7b5a      	ldrb	r2, [r3, #13]
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 800cf26:	79fb      	ldrb	r3, [r7, #7]
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f7ff fd89 	bl	800ca40 <dns_send>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 800cf32:	e01a      	b.n	800cf6a <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d008      	beq.n	800cf4e <dns_check_entry+0x10e>
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	1e5a      	subs	r2, r3, #1
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	601a      	str	r2, [r3, #0]
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d10f      	bne.n	800cf6e <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	2200      	movs	r2, #0
 800cf52:	729a      	strb	r2, [r3, #10]
      }
      break;
 800cf54:	e00b      	b.n	800cf6e <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 800cf56:	4b09      	ldr	r3, [pc, #36]	; (800cf7c <dns_check_entry+0x13c>)
 800cf58:	f240 425b 	movw	r2, #1115	; 0x45b
 800cf5c:	490a      	ldr	r1, [pc, #40]	; (800cf88 <dns_check_entry+0x148>)
 800cf5e:	4809      	ldr	r0, [pc, #36]	; (800cf84 <dns_check_entry+0x144>)
 800cf60:	f013 fa3c 	bl	80203dc <iprintf>
      break;
 800cf64:	e004      	b.n	800cf70 <dns_check_entry+0x130>
      break;
 800cf66:	bf00      	nop
 800cf68:	e002      	b.n	800cf70 <dns_check_entry+0x130>
      break;
 800cf6a:	bf00      	nop
 800cf6c:	e000      	b.n	800cf70 <dns_check_entry+0x130>
      break;
 800cf6e:	bf00      	nop
  }
}
 800cf70:	bf00      	nop
 800cf72:	3710      	adds	r7, #16
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}
 800cf78:	2000628c 	.word	0x2000628c
 800cf7c:	08021700 	.word	0x08021700
 800cf80:	08021770 	.word	0x08021770
 800cf84:	08021748 	.word	0x08021748
 800cf88:	0802178c 	.word	0x0802178c

0800cf8c <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b082      	sub	sp, #8
 800cf90:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800cf92:	2300      	movs	r3, #0
 800cf94:	71fb      	strb	r3, [r7, #7]
 800cf96:	e006      	b.n	800cfa6 <dns_check_entries+0x1a>
    dns_check_entry(i);
 800cf98:	79fb      	ldrb	r3, [r7, #7]
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f7ff ff50 	bl	800ce40 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800cfa0:	79fb      	ldrb	r3, [r7, #7]
 800cfa2:	3301      	adds	r3, #1
 800cfa4:	71fb      	strb	r3, [r7, #7]
 800cfa6:	79fb      	ldrb	r3, [r7, #7]
 800cfa8:	2b03      	cmp	r3, #3
 800cfaa:	d9f5      	bls.n	800cf98 <dns_check_entries+0xc>
  }
}
 800cfac:	bf00      	nop
 800cfae:	bf00      	nop
 800cfb0:	3708      	adds	r7, #8
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}

0800cfb6 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800cfb6:	b480      	push	{r7}
 800cfb8:	b089      	sub	sp, #36	; 0x24
 800cfba:	af00      	add	r7, sp, #0
 800cfbc:	6078      	str	r0, [r7, #4]
 800cfbe:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800cfc8:	2300      	movs	r3, #0
 800cfca:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800cfcc:	69fb      	ldr	r3, [r7, #28]
 800cfce:	f003 0301 	and.w	r3, r3, #1
 800cfd2:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800cfd4:	693b      	ldr	r3, [r7, #16]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d00d      	beq.n	800cff6 <lwip_standard_chksum+0x40>
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	dd0a      	ble.n	800cff6 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800cfe0:	69fa      	ldr	r2, [r7, #28]
 800cfe2:	1c53      	adds	r3, r2, #1
 800cfe4:	61fb      	str	r3, [r7, #28]
 800cfe6:	f107 030e 	add.w	r3, r7, #14
 800cfea:	3301      	adds	r3, #1
 800cfec:	7812      	ldrb	r2, [r2, #0]
 800cfee:	701a      	strb	r2, [r3, #0]
    len--;
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	3b01      	subs	r3, #1
 800cff4:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800cff6:	69fb      	ldr	r3, [r7, #28]
 800cff8:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800cffa:	e00a      	b.n	800d012 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800cffc:	69bb      	ldr	r3, [r7, #24]
 800cffe:	1c9a      	adds	r2, r3, #2
 800d000:	61ba      	str	r2, [r7, #24]
 800d002:	881b      	ldrh	r3, [r3, #0]
 800d004:	461a      	mov	r2, r3
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	4413      	add	r3, r2
 800d00a:	617b      	str	r3, [r7, #20]
    len -= 2;
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	3b02      	subs	r3, #2
 800d010:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	2b01      	cmp	r3, #1
 800d016:	dcf1      	bgt.n	800cffc <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	dd04      	ble.n	800d028 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800d01e:	f107 030e 	add.w	r3, r7, #14
 800d022:	69ba      	ldr	r2, [r7, #24]
 800d024:	7812      	ldrb	r2, [r2, #0]
 800d026:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800d028:	89fb      	ldrh	r3, [r7, #14]
 800d02a:	461a      	mov	r2, r3
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	4413      	add	r3, r2
 800d030:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800d032:	697b      	ldr	r3, [r7, #20]
 800d034:	0c1a      	lsrs	r2, r3, #16
 800d036:	697b      	ldr	r3, [r7, #20]
 800d038:	b29b      	uxth	r3, r3
 800d03a:	4413      	add	r3, r2
 800d03c:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800d03e:	697b      	ldr	r3, [r7, #20]
 800d040:	0c1a      	lsrs	r2, r3, #16
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	b29b      	uxth	r3, r3
 800d046:	4413      	add	r3, r2
 800d048:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d007      	beq.n	800d060 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800d050:	697b      	ldr	r3, [r7, #20]
 800d052:	021b      	lsls	r3, r3, #8
 800d054:	b29a      	uxth	r2, r3
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	0a1b      	lsrs	r3, r3, #8
 800d05a:	b2db      	uxtb	r3, r3
 800d05c:	4313      	orrs	r3, r2
 800d05e:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800d060:	697b      	ldr	r3, [r7, #20]
 800d062:	b29b      	uxth	r3, r3
}
 800d064:	4618      	mov	r0, r3
 800d066:	3724      	adds	r7, #36	; 0x24
 800d068:	46bd      	mov	sp, r7
 800d06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06e:	4770      	bx	lr

0800d070 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b082      	sub	sp, #8
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
 800d078:	460b      	mov	r3, r1
 800d07a:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800d07c:	887b      	ldrh	r3, [r7, #2]
 800d07e:	4619      	mov	r1, r3
 800d080:	6878      	ldr	r0, [r7, #4]
 800d082:	f7ff ff98 	bl	800cfb6 <lwip_standard_chksum>
 800d086:	4603      	mov	r3, r0
 800d088:	43db      	mvns	r3, r3
 800d08a:	b29b      	uxth	r3, r3
}
 800d08c:	4618      	mov	r0, r3
 800d08e:	3708      	adds	r7, #8
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}

0800d094 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b086      	sub	sp, #24
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800d09c:	2300      	movs	r3, #0
 800d09e:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	613b      	str	r3, [r7, #16]
 800d0a8:	e02b      	b.n	800d102 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	685a      	ldr	r2, [r3, #4]
 800d0ae:	693b      	ldr	r3, [r7, #16]
 800d0b0:	895b      	ldrh	r3, [r3, #10]
 800d0b2:	4619      	mov	r1, r3
 800d0b4:	4610      	mov	r0, r2
 800d0b6:	f7ff ff7e 	bl	800cfb6 <lwip_standard_chksum>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	461a      	mov	r2, r3
 800d0be:	697b      	ldr	r3, [r7, #20]
 800d0c0:	4413      	add	r3, r2
 800d0c2:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	0c1a      	lsrs	r2, r3, #16
 800d0c8:	697b      	ldr	r3, [r7, #20]
 800d0ca:	b29b      	uxth	r3, r3
 800d0cc:	4413      	add	r3, r2
 800d0ce:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800d0d0:	693b      	ldr	r3, [r7, #16]
 800d0d2:	895b      	ldrh	r3, [r3, #10]
 800d0d4:	f003 0301 	and.w	r3, r3, #1
 800d0d8:	b29b      	uxth	r3, r3
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d00e      	beq.n	800d0fc <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	bf0c      	ite	eq
 800d0e4:	2301      	moveq	r3, #1
 800d0e6:	2300      	movne	r3, #0
 800d0e8:	b2db      	uxtb	r3, r3
 800d0ea:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800d0ec:	697b      	ldr	r3, [r7, #20]
 800d0ee:	021b      	lsls	r3, r3, #8
 800d0f0:	b29a      	uxth	r2, r3
 800d0f2:	697b      	ldr	r3, [r7, #20]
 800d0f4:	0a1b      	lsrs	r3, r3, #8
 800d0f6:	b2db      	uxtb	r3, r3
 800d0f8:	4313      	orrs	r3, r2
 800d0fa:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800d0fc:	693b      	ldr	r3, [r7, #16]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	613b      	str	r3, [r7, #16]
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d1d0      	bne.n	800d0aa <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d007      	beq.n	800d11e <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800d10e:	697b      	ldr	r3, [r7, #20]
 800d110:	021b      	lsls	r3, r3, #8
 800d112:	b29a      	uxth	r2, r3
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	0a1b      	lsrs	r3, r3, #8
 800d118:	b2db      	uxtb	r3, r3
 800d11a:	4313      	orrs	r3, r2
 800d11c:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	b29b      	uxth	r3, r3
 800d122:	43db      	mvns	r3, r3
 800d124:	b29b      	uxth	r3, r3
}
 800d126:	4618      	mov	r0, r3
 800d128:	3718      	adds	r7, #24
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}

0800d12e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800d12e:	b580      	push	{r7, lr}
 800d130:	b082      	sub	sp, #8
 800d132:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800d134:	2300      	movs	r3, #0
 800d136:	607b      	str	r3, [r7, #4]
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 800d138:	f002 f9ae 	bl	800f498 <stats_init>
#if !NO_SYS
  sys_init();
 800d13c:	f00e fe48 	bl	801bdd0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800d140:	f000 f8d8 	bl	800d2f4 <mem_init>
  memp_init();
 800d144:	f000 fcd6 	bl	800daf4 <memp_init>
  pbuf_init();
  netif_init();
 800d148:	f000 fe10 	bl	800dd6c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800d14c:	f007 fd62 	bl	8014c14 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800d150:	f002 f9b2 	bl	800f4b8 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
 800d154:	f00c f97a 	bl	801944c <igmp_init>
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 800d158:	f7ff fc40 	bl	800c9dc <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800d15c:	f007 fca0 	bl	8014aa0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800d160:	bf00      	nop
 800d162:	3708      	adds	r7, #8
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}

0800d168 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800d168:	b480      	push	{r7}
 800d16a:	b083      	sub	sp, #12
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	4603      	mov	r3, r0
 800d170:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800d172:	4b05      	ldr	r3, [pc, #20]	; (800d188 <ptr_to_mem+0x20>)
 800d174:	681a      	ldr	r2, [r3, #0]
 800d176:	88fb      	ldrh	r3, [r7, #6]
 800d178:	4413      	add	r3, r2
}
 800d17a:	4618      	mov	r0, r3
 800d17c:	370c      	adds	r7, #12
 800d17e:	46bd      	mov	sp, r7
 800d180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d184:	4770      	bx	lr
 800d186:	bf00      	nop
 800d188:	20006704 	.word	0x20006704

0800d18c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800d18c:	b480      	push	{r7}
 800d18e:	b083      	sub	sp, #12
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800d194:	4b05      	ldr	r3, [pc, #20]	; (800d1ac <mem_to_ptr+0x20>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	687a      	ldr	r2, [r7, #4]
 800d19a:	1ad3      	subs	r3, r2, r3
 800d19c:	b29b      	uxth	r3, r3
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	370c      	adds	r7, #12
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a8:	4770      	bx	lr
 800d1aa:	bf00      	nop
 800d1ac:	20006704 	.word	0x20006704

0800d1b0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800d1b0:	b590      	push	{r4, r7, lr}
 800d1b2:	b085      	sub	sp, #20
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800d1b8:	4b45      	ldr	r3, [pc, #276]	; (800d2d0 <plug_holes+0x120>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	687a      	ldr	r2, [r7, #4]
 800d1be:	429a      	cmp	r2, r3
 800d1c0:	d206      	bcs.n	800d1d0 <plug_holes+0x20>
 800d1c2:	4b44      	ldr	r3, [pc, #272]	; (800d2d4 <plug_holes+0x124>)
 800d1c4:	f240 12df 	movw	r2, #479	; 0x1df
 800d1c8:	4943      	ldr	r1, [pc, #268]	; (800d2d8 <plug_holes+0x128>)
 800d1ca:	4844      	ldr	r0, [pc, #272]	; (800d2dc <plug_holes+0x12c>)
 800d1cc:	f013 f906 	bl	80203dc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800d1d0:	4b43      	ldr	r3, [pc, #268]	; (800d2e0 <plug_holes+0x130>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	687a      	ldr	r2, [r7, #4]
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	d306      	bcc.n	800d1e8 <plug_holes+0x38>
 800d1da:	4b3e      	ldr	r3, [pc, #248]	; (800d2d4 <plug_holes+0x124>)
 800d1dc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d1e0:	4940      	ldr	r1, [pc, #256]	; (800d2e4 <plug_holes+0x134>)
 800d1e2:	483e      	ldr	r0, [pc, #248]	; (800d2dc <plug_holes+0x12c>)
 800d1e4:	f013 f8fa 	bl	80203dc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	791b      	ldrb	r3, [r3, #4]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d006      	beq.n	800d1fe <plug_holes+0x4e>
 800d1f0:	4b38      	ldr	r3, [pc, #224]	; (800d2d4 <plug_holes+0x124>)
 800d1f2:	f240 12e1 	movw	r2, #481	; 0x1e1
 800d1f6:	493c      	ldr	r1, [pc, #240]	; (800d2e8 <plug_holes+0x138>)
 800d1f8:	4838      	ldr	r0, [pc, #224]	; (800d2dc <plug_holes+0x12c>)
 800d1fa:	f013 f8ef 	bl	80203dc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	881b      	ldrh	r3, [r3, #0]
 800d202:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d206:	d906      	bls.n	800d216 <plug_holes+0x66>
 800d208:	4b32      	ldr	r3, [pc, #200]	; (800d2d4 <plug_holes+0x124>)
 800d20a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800d20e:	4937      	ldr	r1, [pc, #220]	; (800d2ec <plug_holes+0x13c>)
 800d210:	4832      	ldr	r0, [pc, #200]	; (800d2dc <plug_holes+0x12c>)
 800d212:	f013 f8e3 	bl	80203dc <iprintf>

  nmem = ptr_to_mem(mem->next);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	881b      	ldrh	r3, [r3, #0]
 800d21a:	4618      	mov	r0, r3
 800d21c:	f7ff ffa4 	bl	800d168 <ptr_to_mem>
 800d220:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800d222:	687a      	ldr	r2, [r7, #4]
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	429a      	cmp	r2, r3
 800d228:	d024      	beq.n	800d274 <plug_holes+0xc4>
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	791b      	ldrb	r3, [r3, #4]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d120      	bne.n	800d274 <plug_holes+0xc4>
 800d232:	4b2b      	ldr	r3, [pc, #172]	; (800d2e0 <plug_holes+0x130>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	68fa      	ldr	r2, [r7, #12]
 800d238:	429a      	cmp	r2, r3
 800d23a:	d01b      	beq.n	800d274 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800d23c:	4b2c      	ldr	r3, [pc, #176]	; (800d2f0 <plug_holes+0x140>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	68fa      	ldr	r2, [r7, #12]
 800d242:	429a      	cmp	r2, r3
 800d244:	d102      	bne.n	800d24c <plug_holes+0x9c>
      lfree = mem;
 800d246:	4a2a      	ldr	r2, [pc, #168]	; (800d2f0 <plug_holes+0x140>)
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	881a      	ldrh	r2, [r3, #0]
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	881b      	ldrh	r3, [r3, #0]
 800d258:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d25c:	d00a      	beq.n	800d274 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	881b      	ldrh	r3, [r3, #0]
 800d262:	4618      	mov	r0, r3
 800d264:	f7ff ff80 	bl	800d168 <ptr_to_mem>
 800d268:	4604      	mov	r4, r0
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f7ff ff8e 	bl	800d18c <mem_to_ptr>
 800d270:	4603      	mov	r3, r0
 800d272:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	885b      	ldrh	r3, [r3, #2]
 800d278:	4618      	mov	r0, r3
 800d27a:	f7ff ff75 	bl	800d168 <ptr_to_mem>
 800d27e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800d280:	68ba      	ldr	r2, [r7, #8]
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	429a      	cmp	r2, r3
 800d286:	d01f      	beq.n	800d2c8 <plug_holes+0x118>
 800d288:	68bb      	ldr	r3, [r7, #8]
 800d28a:	791b      	ldrb	r3, [r3, #4]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d11b      	bne.n	800d2c8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800d290:	4b17      	ldr	r3, [pc, #92]	; (800d2f0 <plug_holes+0x140>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	687a      	ldr	r2, [r7, #4]
 800d296:	429a      	cmp	r2, r3
 800d298:	d102      	bne.n	800d2a0 <plug_holes+0xf0>
      lfree = pmem;
 800d29a:	4a15      	ldr	r2, [pc, #84]	; (800d2f0 <plug_holes+0x140>)
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	881a      	ldrh	r2, [r3, #0]
 800d2a4:	68bb      	ldr	r3, [r7, #8]
 800d2a6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	881b      	ldrh	r3, [r3, #0]
 800d2ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d2b0:	d00a      	beq.n	800d2c8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	881b      	ldrh	r3, [r3, #0]
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f7ff ff56 	bl	800d168 <ptr_to_mem>
 800d2bc:	4604      	mov	r4, r0
 800d2be:	68b8      	ldr	r0, [r7, #8]
 800d2c0:	f7ff ff64 	bl	800d18c <mem_to_ptr>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800d2c8:	bf00      	nop
 800d2ca:	3714      	adds	r7, #20
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd90      	pop	{r4, r7, pc}
 800d2d0:	20006704 	.word	0x20006704
 800d2d4:	080217ac 	.word	0x080217ac
 800d2d8:	080217dc 	.word	0x080217dc
 800d2dc:	080217f4 	.word	0x080217f4
 800d2e0:	20006708 	.word	0x20006708
 800d2e4:	0802181c 	.word	0x0802181c
 800d2e8:	08021838 	.word	0x08021838
 800d2ec:	08021854 	.word	0x08021854
 800d2f0:	20006710 	.word	0x20006710

0800d2f4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d2fa:	4b1f      	ldr	r3, [pc, #124]	; (800d378 <mem_init+0x84>)
 800d2fc:	4a1f      	ldr	r2, [pc, #124]	; (800d37c <mem_init+0x88>)
 800d2fe:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d300:	4b1d      	ldr	r3, [pc, #116]	; (800d378 <mem_init+0x84>)
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d30c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2200      	movs	r2, #0
 800d312:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2200      	movs	r2, #0
 800d318:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d31a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800d31e:	f7ff ff23 	bl	800d168 <ptr_to_mem>
 800d322:	4603      	mov	r3, r0
 800d324:	4a16      	ldr	r2, [pc, #88]	; (800d380 <mem_init+0x8c>)
 800d326:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800d328:	4b15      	ldr	r3, [pc, #84]	; (800d380 <mem_init+0x8c>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	2201      	movs	r2, #1
 800d32e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d330:	4b13      	ldr	r3, [pc, #76]	; (800d380 <mem_init+0x8c>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d338:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d33a:	4b11      	ldr	r3, [pc, #68]	; (800d380 <mem_init+0x8c>)
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d342:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d344:	4b0c      	ldr	r3, [pc, #48]	; (800d378 <mem_init+0x84>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	4a0e      	ldr	r2, [pc, #56]	; (800d384 <mem_init+0x90>)
 800d34a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 800d34c:	4b0e      	ldr	r3, [pc, #56]	; (800d388 <mem_init+0x94>)
 800d34e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d352:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800d356:	480d      	ldr	r0, [pc, #52]	; (800d38c <mem_init+0x98>)
 800d358:	f00e fd46 	bl	801bde8 <sys_mutex_new>
 800d35c:	4603      	mov	r3, r0
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d006      	beq.n	800d370 <mem_init+0x7c>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800d362:	4b0b      	ldr	r3, [pc, #44]	; (800d390 <mem_init+0x9c>)
 800d364:	f240 221f 	movw	r2, #543	; 0x21f
 800d368:	490a      	ldr	r1, [pc, #40]	; (800d394 <mem_init+0xa0>)
 800d36a:	480b      	ldr	r0, [pc, #44]	; (800d398 <mem_init+0xa4>)
 800d36c:	f013 f836 	bl	80203dc <iprintf>
  }
}
 800d370:	bf00      	nop
 800d372:	3708      	adds	r7, #8
 800d374:	46bd      	mov	sp, r7
 800d376:	bd80      	pop	{r7, pc}
 800d378:	20006704 	.word	0x20006704
 800d37c:	30044000 	.word	0x30044000
 800d380:	20006708 	.word	0x20006708
 800d384:	20006710 	.word	0x20006710
 800d388:	2000a3ec 	.word	0x2000a3ec
 800d38c:	2000670c 	.word	0x2000670c
 800d390:	080217ac 	.word	0x080217ac
 800d394:	08021880 	.word	0x08021880
 800d398:	080217f4 	.word	0x080217f4

0800d39c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b086      	sub	sp, #24
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f7ff fef1 	bl	800d18c <mem_to_ptr>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	881b      	ldrh	r3, [r3, #0]
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f7ff fed8 	bl	800d168 <ptr_to_mem>
 800d3b8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	885b      	ldrh	r3, [r3, #2]
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f7ff fed2 	bl	800d168 <ptr_to_mem>
 800d3c4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	881b      	ldrh	r3, [r3, #0]
 800d3ca:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d3ce:	d818      	bhi.n	800d402 <mem_link_valid+0x66>
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	885b      	ldrh	r3, [r3, #2]
 800d3d4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d3d8:	d813      	bhi.n	800d402 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d3de:	8afa      	ldrh	r2, [r7, #22]
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	d004      	beq.n	800d3ee <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	881b      	ldrh	r3, [r3, #0]
 800d3e8:	8afa      	ldrh	r2, [r7, #22]
 800d3ea:	429a      	cmp	r2, r3
 800d3ec:	d109      	bne.n	800d402 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d3ee:	4b08      	ldr	r3, [pc, #32]	; (800d410 <mem_link_valid+0x74>)
 800d3f0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d3f2:	693a      	ldr	r2, [r7, #16]
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d006      	beq.n	800d406 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	885b      	ldrh	r3, [r3, #2]
 800d3fc:	8afa      	ldrh	r2, [r7, #22]
 800d3fe:	429a      	cmp	r2, r3
 800d400:	d001      	beq.n	800d406 <mem_link_valid+0x6a>
    return 0;
 800d402:	2300      	movs	r3, #0
 800d404:	e000      	b.n	800d408 <mem_link_valid+0x6c>
  }
  return 1;
 800d406:	2301      	movs	r3, #1
}
 800d408:	4618      	mov	r0, r3
 800d40a:	3718      	adds	r7, #24
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}
 800d410:	20006708 	.word	0x20006708

0800d414 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b088      	sub	sp, #32
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	f000 80a2 	beq.w	800d568 <mem_free+0x154>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f003 0303 	and.w	r3, r3, #3
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d015      	beq.n	800d45a <mem_free+0x46>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d42e:	4b50      	ldr	r3, [pc, #320]	; (800d570 <mem_free+0x15c>)
 800d430:	f240 2273 	movw	r2, #627	; 0x273
 800d434:	494f      	ldr	r1, [pc, #316]	; (800d574 <mem_free+0x160>)
 800d436:	4850      	ldr	r0, [pc, #320]	; (800d578 <mem_free+0x164>)
 800d438:	f012 ffd0 	bl	80203dc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d43c:	f00e fd46 	bl	801becc <sys_arch_protect>
 800d440:	60f8      	str	r0, [r7, #12]
 800d442:	4b4e      	ldr	r3, [pc, #312]	; (800d57c <mem_free+0x168>)
 800d444:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800d448:	3301      	adds	r3, #1
 800d44a:	b29a      	uxth	r2, r3
 800d44c:	4b4b      	ldr	r3, [pc, #300]	; (800d57c <mem_free+0x168>)
 800d44e:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
 800d452:	68f8      	ldr	r0, [r7, #12]
 800d454:	f00e fd48 	bl	801bee8 <sys_arch_unprotect>
    return;
 800d458:	e087      	b.n	800d56a <mem_free+0x156>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	3b08      	subs	r3, #8
 800d45e:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d460:	4b47      	ldr	r3, [pc, #284]	; (800d580 <mem_free+0x16c>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	69fa      	ldr	r2, [r7, #28]
 800d466:	429a      	cmp	r2, r3
 800d468:	d306      	bcc.n	800d478 <mem_free+0x64>
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f103 020c 	add.w	r2, r3, #12
 800d470:	4b44      	ldr	r3, [pc, #272]	; (800d584 <mem_free+0x170>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	429a      	cmp	r2, r3
 800d476:	d915      	bls.n	800d4a4 <mem_free+0x90>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d478:	4b3d      	ldr	r3, [pc, #244]	; (800d570 <mem_free+0x15c>)
 800d47a:	f240 227f 	movw	r2, #639	; 0x27f
 800d47e:	4942      	ldr	r1, [pc, #264]	; (800d588 <mem_free+0x174>)
 800d480:	483d      	ldr	r0, [pc, #244]	; (800d578 <mem_free+0x164>)
 800d482:	f012 ffab 	bl	80203dc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d486:	f00e fd21 	bl	801becc <sys_arch_protect>
 800d48a:	6138      	str	r0, [r7, #16]
 800d48c:	4b3b      	ldr	r3, [pc, #236]	; (800d57c <mem_free+0x168>)
 800d48e:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800d492:	3301      	adds	r3, #1
 800d494:	b29a      	uxth	r2, r3
 800d496:	4b39      	ldr	r3, [pc, #228]	; (800d57c <mem_free+0x168>)
 800d498:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
 800d49c:	6938      	ldr	r0, [r7, #16]
 800d49e:	f00e fd23 	bl	801bee8 <sys_arch_unprotect>
    return;
 800d4a2:	e062      	b.n	800d56a <mem_free+0x156>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d4a4:	4839      	ldr	r0, [pc, #228]	; (800d58c <mem_free+0x178>)
 800d4a6:	f00e fcd5 	bl	801be54 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800d4aa:	69fb      	ldr	r3, [r7, #28]
 800d4ac:	791b      	ldrb	r3, [r3, #4]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d118      	bne.n	800d4e4 <mem_free+0xd0>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d4b2:	4b2f      	ldr	r3, [pc, #188]	; (800d570 <mem_free+0x15c>)
 800d4b4:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800d4b8:	4935      	ldr	r1, [pc, #212]	; (800d590 <mem_free+0x17c>)
 800d4ba:	482f      	ldr	r0, [pc, #188]	; (800d578 <mem_free+0x164>)
 800d4bc:	f012 ff8e 	bl	80203dc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d4c0:	4832      	ldr	r0, [pc, #200]	; (800d58c <mem_free+0x178>)
 800d4c2:	f00e fcd6 	bl	801be72 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d4c6:	f00e fd01 	bl	801becc <sys_arch_protect>
 800d4ca:	6178      	str	r0, [r7, #20]
 800d4cc:	4b2b      	ldr	r3, [pc, #172]	; (800d57c <mem_free+0x168>)
 800d4ce:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800d4d2:	3301      	adds	r3, #1
 800d4d4:	b29a      	uxth	r2, r3
 800d4d6:	4b29      	ldr	r3, [pc, #164]	; (800d57c <mem_free+0x168>)
 800d4d8:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
 800d4dc:	6978      	ldr	r0, [r7, #20]
 800d4de:	f00e fd03 	bl	801bee8 <sys_arch_unprotect>
    return;
 800d4e2:	e042      	b.n	800d56a <mem_free+0x156>
  }

  if (!mem_link_valid(mem)) {
 800d4e4:	69f8      	ldr	r0, [r7, #28]
 800d4e6:	f7ff ff59 	bl	800d39c <mem_link_valid>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d118      	bne.n	800d522 <mem_free+0x10e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d4f0:	4b1f      	ldr	r3, [pc, #124]	; (800d570 <mem_free+0x15c>)
 800d4f2:	f240 2295 	movw	r2, #661	; 0x295
 800d4f6:	4927      	ldr	r1, [pc, #156]	; (800d594 <mem_free+0x180>)
 800d4f8:	481f      	ldr	r0, [pc, #124]	; (800d578 <mem_free+0x164>)
 800d4fa:	f012 ff6f 	bl	80203dc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d4fe:	4823      	ldr	r0, [pc, #140]	; (800d58c <mem_free+0x178>)
 800d500:	f00e fcb7 	bl	801be72 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d504:	f00e fce2 	bl	801becc <sys_arch_protect>
 800d508:	61b8      	str	r0, [r7, #24]
 800d50a:	4b1c      	ldr	r3, [pc, #112]	; (800d57c <mem_free+0x168>)
 800d50c:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800d510:	3301      	adds	r3, #1
 800d512:	b29a      	uxth	r2, r3
 800d514:	4b19      	ldr	r3, [pc, #100]	; (800d57c <mem_free+0x168>)
 800d516:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
 800d51a:	69b8      	ldr	r0, [r7, #24]
 800d51c:	f00e fce4 	bl	801bee8 <sys_arch_unprotect>
    return;
 800d520:	e023      	b.n	800d56a <mem_free+0x156>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d522:	69fb      	ldr	r3, [r7, #28]
 800d524:	2200      	movs	r2, #0
 800d526:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d528:	4b1b      	ldr	r3, [pc, #108]	; (800d598 <mem_free+0x184>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	69fa      	ldr	r2, [r7, #28]
 800d52e:	429a      	cmp	r2, r3
 800d530:	d202      	bcs.n	800d538 <mem_free+0x124>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d532:	4a19      	ldr	r2, [pc, #100]	; (800d598 <mem_free+0x184>)
 800d534:	69fb      	ldr	r3, [r7, #28]
 800d536:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 800d538:	4b10      	ldr	r3, [pc, #64]	; (800d57c <mem_free+0x168>)
 800d53a:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
 800d53e:	4b10      	ldr	r3, [pc, #64]	; (800d580 <mem_free+0x16c>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	69f9      	ldr	r1, [r7, #28]
 800d544:	1acb      	subs	r3, r1, r3
 800d546:	b299      	uxth	r1, r3
 800d548:	69fb      	ldr	r3, [r7, #28]
 800d54a:	881b      	ldrh	r3, [r3, #0]
 800d54c:	1acb      	subs	r3, r1, r3
 800d54e:	b29b      	uxth	r3, r3
 800d550:	4413      	add	r3, r2
 800d552:	b29a      	uxth	r2, r3
 800d554:	4b09      	ldr	r3, [pc, #36]	; (800d57c <mem_free+0x168>)
 800d556:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d55a:	69f8      	ldr	r0, [r7, #28]
 800d55c:	f7ff fe28 	bl	800d1b0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d560:	480a      	ldr	r0, [pc, #40]	; (800d58c <mem_free+0x178>)
 800d562:	f00e fc86 	bl	801be72 <sys_mutex_unlock>
 800d566:	e000      	b.n	800d56a <mem_free+0x156>
    return;
 800d568:	bf00      	nop
}
 800d56a:	3720      	adds	r7, #32
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}
 800d570:	080217ac 	.word	0x080217ac
 800d574:	0802189c 	.word	0x0802189c
 800d578:	080217f4 	.word	0x080217f4
 800d57c:	2000a3ec 	.word	0x2000a3ec
 800d580:	20006704 	.word	0x20006704
 800d584:	20006708 	.word	0x20006708
 800d588:	080218c0 	.word	0x080218c0
 800d58c:	2000670c 	.word	0x2000670c
 800d590:	080218dc 	.word	0x080218dc
 800d594:	08021904 	.word	0x08021904
 800d598:	20006710 	.word	0x20006710

0800d59c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b088      	sub	sp, #32
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
 800d5a4:	460b      	mov	r3, r1
 800d5a6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d5a8:	887b      	ldrh	r3, [r7, #2]
 800d5aa:	3303      	adds	r3, #3
 800d5ac:	b29b      	uxth	r3, r3
 800d5ae:	f023 0303 	bic.w	r3, r3, #3
 800d5b2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d5b4:	8bfb      	ldrh	r3, [r7, #30]
 800d5b6:	2b0b      	cmp	r3, #11
 800d5b8:	d801      	bhi.n	800d5be <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d5ba:	230c      	movs	r3, #12
 800d5bc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d5be:	8bfb      	ldrh	r3, [r7, #30]
 800d5c0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d5c4:	d803      	bhi.n	800d5ce <mem_trim+0x32>
 800d5c6:	8bfa      	ldrh	r2, [r7, #30]
 800d5c8:	887b      	ldrh	r3, [r7, #2]
 800d5ca:	429a      	cmp	r2, r3
 800d5cc:	d201      	bcs.n	800d5d2 <mem_trim+0x36>
    return NULL;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	e0f8      	b.n	800d7c4 <mem_trim+0x228>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d5d2:	4b7e      	ldr	r3, [pc, #504]	; (800d7cc <mem_trim+0x230>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	687a      	ldr	r2, [r7, #4]
 800d5d8:	429a      	cmp	r2, r3
 800d5da:	d304      	bcc.n	800d5e6 <mem_trim+0x4a>
 800d5dc:	4b7c      	ldr	r3, [pc, #496]	; (800d7d0 <mem_trim+0x234>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	687a      	ldr	r2, [r7, #4]
 800d5e2:	429a      	cmp	r2, r3
 800d5e4:	d306      	bcc.n	800d5f4 <mem_trim+0x58>
 800d5e6:	4b7b      	ldr	r3, [pc, #492]	; (800d7d4 <mem_trim+0x238>)
 800d5e8:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d5ec:	497a      	ldr	r1, [pc, #488]	; (800d7d8 <mem_trim+0x23c>)
 800d5ee:	487b      	ldr	r0, [pc, #492]	; (800d7dc <mem_trim+0x240>)
 800d5f0:	f012 fef4 	bl	80203dc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d5f4:	4b75      	ldr	r3, [pc, #468]	; (800d7cc <mem_trim+0x230>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	687a      	ldr	r2, [r7, #4]
 800d5fa:	429a      	cmp	r2, r3
 800d5fc:	d304      	bcc.n	800d608 <mem_trim+0x6c>
 800d5fe:	4b74      	ldr	r3, [pc, #464]	; (800d7d0 <mem_trim+0x234>)
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	687a      	ldr	r2, [r7, #4]
 800d604:	429a      	cmp	r2, r3
 800d606:	d30f      	bcc.n	800d628 <mem_trim+0x8c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d608:	f00e fc60 	bl	801becc <sys_arch_protect>
 800d60c:	60b8      	str	r0, [r7, #8]
 800d60e:	4b74      	ldr	r3, [pc, #464]	; (800d7e0 <mem_trim+0x244>)
 800d610:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800d614:	3301      	adds	r3, #1
 800d616:	b29a      	uxth	r2, r3
 800d618:	4b71      	ldr	r3, [pc, #452]	; (800d7e0 <mem_trim+0x244>)
 800d61a:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
 800d61e:	68b8      	ldr	r0, [r7, #8]
 800d620:	f00e fc62 	bl	801bee8 <sys_arch_unprotect>
    return rmem;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	e0cd      	b.n	800d7c4 <mem_trim+0x228>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	3b08      	subs	r3, #8
 800d62c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d62e:	69b8      	ldr	r0, [r7, #24]
 800d630:	f7ff fdac 	bl	800d18c <mem_to_ptr>
 800d634:	4603      	mov	r3, r0
 800d636:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d638:	69bb      	ldr	r3, [r7, #24]
 800d63a:	881a      	ldrh	r2, [r3, #0]
 800d63c:	8afb      	ldrh	r3, [r7, #22]
 800d63e:	1ad3      	subs	r3, r2, r3
 800d640:	b29b      	uxth	r3, r3
 800d642:	3b08      	subs	r3, #8
 800d644:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d646:	8bfa      	ldrh	r2, [r7, #30]
 800d648:	8abb      	ldrh	r3, [r7, #20]
 800d64a:	429a      	cmp	r2, r3
 800d64c:	d906      	bls.n	800d65c <mem_trim+0xc0>
 800d64e:	4b61      	ldr	r3, [pc, #388]	; (800d7d4 <mem_trim+0x238>)
 800d650:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800d654:	4963      	ldr	r1, [pc, #396]	; (800d7e4 <mem_trim+0x248>)
 800d656:	4861      	ldr	r0, [pc, #388]	; (800d7dc <mem_trim+0x240>)
 800d658:	f012 fec0 	bl	80203dc <iprintf>
  if (newsize > size) {
 800d65c:	8bfa      	ldrh	r2, [r7, #30]
 800d65e:	8abb      	ldrh	r3, [r7, #20]
 800d660:	429a      	cmp	r2, r3
 800d662:	d901      	bls.n	800d668 <mem_trim+0xcc>
    /* not supported */
    return NULL;
 800d664:	2300      	movs	r3, #0
 800d666:	e0ad      	b.n	800d7c4 <mem_trim+0x228>
  }
  if (newsize == size) {
 800d668:	8bfa      	ldrh	r2, [r7, #30]
 800d66a:	8abb      	ldrh	r3, [r7, #20]
 800d66c:	429a      	cmp	r2, r3
 800d66e:	d101      	bne.n	800d674 <mem_trim+0xd8>
    /* No change in size, simply return */
    return rmem;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	e0a7      	b.n	800d7c4 <mem_trim+0x228>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d674:	485c      	ldr	r0, [pc, #368]	; (800d7e8 <mem_trim+0x24c>)
 800d676:	f00e fbed 	bl	801be54 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800d67a:	69bb      	ldr	r3, [r7, #24]
 800d67c:	881b      	ldrh	r3, [r3, #0]
 800d67e:	4618      	mov	r0, r3
 800d680:	f7ff fd72 	bl	800d168 <ptr_to_mem>
 800d684:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d686:	693b      	ldr	r3, [r7, #16]
 800d688:	791b      	ldrb	r3, [r3, #4]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d14b      	bne.n	800d726 <mem_trim+0x18a>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d68e:	69bb      	ldr	r3, [r7, #24]
 800d690:	881b      	ldrh	r3, [r3, #0]
 800d692:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d696:	d106      	bne.n	800d6a6 <mem_trim+0x10a>
 800d698:	4b4e      	ldr	r3, [pc, #312]	; (800d7d4 <mem_trim+0x238>)
 800d69a:	f240 22f5 	movw	r2, #757	; 0x2f5
 800d69e:	4953      	ldr	r1, [pc, #332]	; (800d7ec <mem_trim+0x250>)
 800d6a0:	484e      	ldr	r0, [pc, #312]	; (800d7dc <mem_trim+0x240>)
 800d6a2:	f012 fe9b 	bl	80203dc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d6a6:	693b      	ldr	r3, [r7, #16]
 800d6a8:	881b      	ldrh	r3, [r3, #0]
 800d6aa:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d6ac:	8afa      	ldrh	r2, [r7, #22]
 800d6ae:	8bfb      	ldrh	r3, [r7, #30]
 800d6b0:	4413      	add	r3, r2
 800d6b2:	b29b      	uxth	r3, r3
 800d6b4:	3308      	adds	r3, #8
 800d6b6:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d6b8:	4b4d      	ldr	r3, [pc, #308]	; (800d7f0 <mem_trim+0x254>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	693a      	ldr	r2, [r7, #16]
 800d6be:	429a      	cmp	r2, r3
 800d6c0:	d106      	bne.n	800d6d0 <mem_trim+0x134>
      lfree = ptr_to_mem(ptr2);
 800d6c2:	89fb      	ldrh	r3, [r7, #14]
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f7ff fd4f 	bl	800d168 <ptr_to_mem>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	4a48      	ldr	r2, [pc, #288]	; (800d7f0 <mem_trim+0x254>)
 800d6ce:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d6d0:	89fb      	ldrh	r3, [r7, #14]
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f7ff fd48 	bl	800d168 <ptr_to_mem>
 800d6d8:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d6da:	693b      	ldr	r3, [r7, #16]
 800d6dc:	2200      	movs	r2, #0
 800d6de:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	89ba      	ldrh	r2, [r7, #12]
 800d6e4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d6e6:	693b      	ldr	r3, [r7, #16]
 800d6e8:	8afa      	ldrh	r2, [r7, #22]
 800d6ea:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d6ec:	69bb      	ldr	r3, [r7, #24]
 800d6ee:	89fa      	ldrh	r2, [r7, #14]
 800d6f0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d6f2:	693b      	ldr	r3, [r7, #16]
 800d6f4:	881b      	ldrh	r3, [r3, #0]
 800d6f6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d6fa:	d007      	beq.n	800d70c <mem_trim+0x170>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d6fc:	693b      	ldr	r3, [r7, #16]
 800d6fe:	881b      	ldrh	r3, [r3, #0]
 800d700:	4618      	mov	r0, r3
 800d702:	f7ff fd31 	bl	800d168 <ptr_to_mem>
 800d706:	4602      	mov	r2, r0
 800d708:	89fb      	ldrh	r3, [r7, #14]
 800d70a:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 800d70c:	4b34      	ldr	r3, [pc, #208]	; (800d7e0 <mem_trim+0x244>)
 800d70e:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
 800d712:	8bf9      	ldrh	r1, [r7, #30]
 800d714:	8abb      	ldrh	r3, [r7, #20]
 800d716:	1acb      	subs	r3, r1, r3
 800d718:	b29b      	uxth	r3, r3
 800d71a:	4413      	add	r3, r2
 800d71c:	b29a      	uxth	r2, r3
 800d71e:	4b30      	ldr	r3, [pc, #192]	; (800d7e0 <mem_trim+0x244>)
 800d720:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 800d724:	e04a      	b.n	800d7bc <mem_trim+0x220>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d726:	8bfb      	ldrh	r3, [r7, #30]
 800d728:	f103 0214 	add.w	r2, r3, #20
 800d72c:	8abb      	ldrh	r3, [r7, #20]
 800d72e:	429a      	cmp	r2, r3
 800d730:	d844      	bhi.n	800d7bc <mem_trim+0x220>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d732:	8afa      	ldrh	r2, [r7, #22]
 800d734:	8bfb      	ldrh	r3, [r7, #30]
 800d736:	4413      	add	r3, r2
 800d738:	b29b      	uxth	r3, r3
 800d73a:	3308      	adds	r3, #8
 800d73c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d73e:	69bb      	ldr	r3, [r7, #24]
 800d740:	881b      	ldrh	r3, [r3, #0]
 800d742:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d746:	d106      	bne.n	800d756 <mem_trim+0x1ba>
 800d748:	4b22      	ldr	r3, [pc, #136]	; (800d7d4 <mem_trim+0x238>)
 800d74a:	f240 3216 	movw	r2, #790	; 0x316
 800d74e:	4927      	ldr	r1, [pc, #156]	; (800d7ec <mem_trim+0x250>)
 800d750:	4822      	ldr	r0, [pc, #136]	; (800d7dc <mem_trim+0x240>)
 800d752:	f012 fe43 	bl	80203dc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d756:	89fb      	ldrh	r3, [r7, #14]
 800d758:	4618      	mov	r0, r3
 800d75a:	f7ff fd05 	bl	800d168 <ptr_to_mem>
 800d75e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d760:	4b23      	ldr	r3, [pc, #140]	; (800d7f0 <mem_trim+0x254>)
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	693a      	ldr	r2, [r7, #16]
 800d766:	429a      	cmp	r2, r3
 800d768:	d202      	bcs.n	800d770 <mem_trim+0x1d4>
      lfree = mem2;
 800d76a:	4a21      	ldr	r2, [pc, #132]	; (800d7f0 <mem_trim+0x254>)
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	2200      	movs	r2, #0
 800d774:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d776:	69bb      	ldr	r3, [r7, #24]
 800d778:	881a      	ldrh	r2, [r3, #0]
 800d77a:	693b      	ldr	r3, [r7, #16]
 800d77c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d77e:	693b      	ldr	r3, [r7, #16]
 800d780:	8afa      	ldrh	r2, [r7, #22]
 800d782:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d784:	69bb      	ldr	r3, [r7, #24]
 800d786:	89fa      	ldrh	r2, [r7, #14]
 800d788:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d78a:	693b      	ldr	r3, [r7, #16]
 800d78c:	881b      	ldrh	r3, [r3, #0]
 800d78e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d792:	d007      	beq.n	800d7a4 <mem_trim+0x208>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d794:	693b      	ldr	r3, [r7, #16]
 800d796:	881b      	ldrh	r3, [r3, #0]
 800d798:	4618      	mov	r0, r3
 800d79a:	f7ff fce5 	bl	800d168 <ptr_to_mem>
 800d79e:	4602      	mov	r2, r0
 800d7a0:	89fb      	ldrh	r3, [r7, #14]
 800d7a2:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 800d7a4:	4b0e      	ldr	r3, [pc, #56]	; (800d7e0 <mem_trim+0x244>)
 800d7a6:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
 800d7aa:	8bf9      	ldrh	r1, [r7, #30]
 800d7ac:	8abb      	ldrh	r3, [r7, #20]
 800d7ae:	1acb      	subs	r3, r1, r3
 800d7b0:	b29b      	uxth	r3, r3
 800d7b2:	4413      	add	r3, r2
 800d7b4:	b29a      	uxth	r2, r3
 800d7b6:	4b0a      	ldr	r3, [pc, #40]	; (800d7e0 <mem_trim+0x244>)
 800d7b8:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d7bc:	480a      	ldr	r0, [pc, #40]	; (800d7e8 <mem_trim+0x24c>)
 800d7be:	f00e fb58 	bl	801be72 <sys_mutex_unlock>
  return rmem;
 800d7c2:	687b      	ldr	r3, [r7, #4]
}
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	3720      	adds	r7, #32
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}
 800d7cc:	20006704 	.word	0x20006704
 800d7d0:	20006708 	.word	0x20006708
 800d7d4:	080217ac 	.word	0x080217ac
 800d7d8:	08021938 	.word	0x08021938
 800d7dc:	080217f4 	.word	0x080217f4
 800d7e0:	2000a3ec 	.word	0x2000a3ec
 800d7e4:	08021950 	.word	0x08021950
 800d7e8:	2000670c 	.word	0x2000670c
 800d7ec:	08021970 	.word	0x08021970
 800d7f0:	20006710 	.word	0x20006710

0800d7f4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d7f4:	b590      	push	{r4, r7, lr}
 800d7f6:	b089      	sub	sp, #36	; 0x24
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d7fe:	88fb      	ldrh	r3, [r7, #6]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d101      	bne.n	800d808 <mem_malloc+0x14>
    return NULL;
 800d804:	2300      	movs	r3, #0
 800d806:	e121      	b.n	800da4c <mem_malloc+0x258>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d808:	88fb      	ldrh	r3, [r7, #6]
 800d80a:	3303      	adds	r3, #3
 800d80c:	b29b      	uxth	r3, r3
 800d80e:	f023 0303 	bic.w	r3, r3, #3
 800d812:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d814:	8bbb      	ldrh	r3, [r7, #28]
 800d816:	2b0b      	cmp	r3, #11
 800d818:	d801      	bhi.n	800d81e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d81a:	230c      	movs	r3, #12
 800d81c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d81e:	8bbb      	ldrh	r3, [r7, #28]
 800d820:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d824:	d803      	bhi.n	800d82e <mem_malloc+0x3a>
 800d826:	8bba      	ldrh	r2, [r7, #28]
 800d828:	88fb      	ldrh	r3, [r7, #6]
 800d82a:	429a      	cmp	r2, r3
 800d82c:	d201      	bcs.n	800d832 <mem_malloc+0x3e>
    return NULL;
 800d82e:	2300      	movs	r3, #0
 800d830:	e10c      	b.n	800da4c <mem_malloc+0x258>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800d832:	4888      	ldr	r0, [pc, #544]	; (800da54 <mem_malloc+0x260>)
 800d834:	f00e fb0e 	bl	801be54 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d838:	4b87      	ldr	r3, [pc, #540]	; (800da58 <mem_malloc+0x264>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	4618      	mov	r0, r3
 800d83e:	f7ff fca5 	bl	800d18c <mem_to_ptr>
 800d842:	4603      	mov	r3, r0
 800d844:	83fb      	strh	r3, [r7, #30]
 800d846:	e0ee      	b.n	800da26 <mem_malloc+0x232>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d848:	8bfb      	ldrh	r3, [r7, #30]
 800d84a:	4618      	mov	r0, r3
 800d84c:	f7ff fc8c 	bl	800d168 <ptr_to_mem>
 800d850:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d852:	697b      	ldr	r3, [r7, #20]
 800d854:	791b      	ldrb	r3, [r3, #4]
 800d856:	2b00      	cmp	r3, #0
 800d858:	f040 80de 	bne.w	800da18 <mem_malloc+0x224>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d85c:	697b      	ldr	r3, [r7, #20]
 800d85e:	881b      	ldrh	r3, [r3, #0]
 800d860:	461a      	mov	r2, r3
 800d862:	8bfb      	ldrh	r3, [r7, #30]
 800d864:	1ad3      	subs	r3, r2, r3
 800d866:	f1a3 0208 	sub.w	r2, r3, #8
 800d86a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d86c:	429a      	cmp	r2, r3
 800d86e:	f0c0 80d3 	bcc.w	800da18 <mem_malloc+0x224>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d872:	697b      	ldr	r3, [r7, #20]
 800d874:	881b      	ldrh	r3, [r3, #0]
 800d876:	461a      	mov	r2, r3
 800d878:	8bfb      	ldrh	r3, [r7, #30]
 800d87a:	1ad3      	subs	r3, r2, r3
 800d87c:	f1a3 0208 	sub.w	r2, r3, #8
 800d880:	8bbb      	ldrh	r3, [r7, #28]
 800d882:	3314      	adds	r3, #20
 800d884:	429a      	cmp	r2, r3
 800d886:	d34c      	bcc.n	800d922 <mem_malloc+0x12e>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d888:	8bfa      	ldrh	r2, [r7, #30]
 800d88a:	8bbb      	ldrh	r3, [r7, #28]
 800d88c:	4413      	add	r3, r2
 800d88e:	b29b      	uxth	r3, r3
 800d890:	3308      	adds	r3, #8
 800d892:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d894:	8a7b      	ldrh	r3, [r7, #18]
 800d896:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d89a:	d106      	bne.n	800d8aa <mem_malloc+0xb6>
 800d89c:	4b6f      	ldr	r3, [pc, #444]	; (800da5c <mem_malloc+0x268>)
 800d89e:	f240 3287 	movw	r2, #903	; 0x387
 800d8a2:	496f      	ldr	r1, [pc, #444]	; (800da60 <mem_malloc+0x26c>)
 800d8a4:	486f      	ldr	r0, [pc, #444]	; (800da64 <mem_malloc+0x270>)
 800d8a6:	f012 fd99 	bl	80203dc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d8aa:	8a7b      	ldrh	r3, [r7, #18]
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f7ff fc5b 	bl	800d168 <ptr_to_mem>
 800d8b2:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	881a      	ldrh	r2, [r3, #0]
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	8bfa      	ldrh	r2, [r7, #30]
 800d8c6:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d8c8:	697b      	ldr	r3, [r7, #20]
 800d8ca:	8a7a      	ldrh	r2, [r7, #18]
 800d8cc:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d8ce:	697b      	ldr	r3, [r7, #20]
 800d8d0:	2201      	movs	r2, #1
 800d8d2:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	881b      	ldrh	r3, [r3, #0]
 800d8d8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d8dc:	d007      	beq.n	800d8ee <mem_malloc+0xfa>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	881b      	ldrh	r3, [r3, #0]
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f7ff fc40 	bl	800d168 <ptr_to_mem>
 800d8e8:	4602      	mov	r2, r0
 800d8ea:	8a7b      	ldrh	r3, [r7, #18]
 800d8ec:	8053      	strh	r3, [r2, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 800d8ee:	4b5e      	ldr	r3, [pc, #376]	; (800da68 <mem_malloc+0x274>)
 800d8f0:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
 800d8f4:	8bbb      	ldrh	r3, [r7, #28]
 800d8f6:	4413      	add	r3, r2
 800d8f8:	b29b      	uxth	r3, r3
 800d8fa:	3308      	adds	r3, #8
 800d8fc:	b29a      	uxth	r2, r3
 800d8fe:	4b5a      	ldr	r3, [pc, #360]	; (800da68 <mem_malloc+0x274>)
 800d900:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 800d904:	4b58      	ldr	r3, [pc, #352]	; (800da68 <mem_malloc+0x274>)
 800d906:	f8b3 20ce 	ldrh.w	r2, [r3, #206]	; 0xce
 800d90a:	4b57      	ldr	r3, [pc, #348]	; (800da68 <mem_malloc+0x274>)
 800d90c:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 800d910:	429a      	cmp	r2, r3
 800d912:	d227      	bcs.n	800d964 <mem_malloc+0x170>
 800d914:	4b54      	ldr	r3, [pc, #336]	; (800da68 <mem_malloc+0x274>)
 800d916:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
 800d91a:	4b53      	ldr	r3, [pc, #332]	; (800da68 <mem_malloc+0x274>)
 800d91c:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
 800d920:	e020      	b.n	800d964 <mem_malloc+0x170>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d922:	697b      	ldr	r3, [r7, #20]
 800d924:	2201      	movs	r2, #1
 800d926:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 800d928:	4b4f      	ldr	r3, [pc, #316]	; (800da68 <mem_malloc+0x274>)
 800d92a:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	881b      	ldrh	r3, [r3, #0]
 800d932:	4413      	add	r3, r2
 800d934:	b29c      	uxth	r4, r3
 800d936:	6978      	ldr	r0, [r7, #20]
 800d938:	f7ff fc28 	bl	800d18c <mem_to_ptr>
 800d93c:	4603      	mov	r3, r0
 800d93e:	1ae3      	subs	r3, r4, r3
 800d940:	b29a      	uxth	r2, r3
 800d942:	4b49      	ldr	r3, [pc, #292]	; (800da68 <mem_malloc+0x274>)
 800d944:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 800d948:	4b47      	ldr	r3, [pc, #284]	; (800da68 <mem_malloc+0x274>)
 800d94a:	f8b3 20ce 	ldrh.w	r2, [r3, #206]	; 0xce
 800d94e:	4b46      	ldr	r3, [pc, #280]	; (800da68 <mem_malloc+0x274>)
 800d950:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 800d954:	429a      	cmp	r2, r3
 800d956:	d205      	bcs.n	800d964 <mem_malloc+0x170>
 800d958:	4b43      	ldr	r3, [pc, #268]	; (800da68 <mem_malloc+0x274>)
 800d95a:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
 800d95e:	4b42      	ldr	r3, [pc, #264]	; (800da68 <mem_malloc+0x274>)
 800d960:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d964:	4b3c      	ldr	r3, [pc, #240]	; (800da58 <mem_malloc+0x264>)
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	697a      	ldr	r2, [r7, #20]
 800d96a:	429a      	cmp	r2, r3
 800d96c:	d127      	bne.n	800d9be <mem_malloc+0x1ca>
          struct mem *cur = lfree;
 800d96e:	4b3a      	ldr	r3, [pc, #232]	; (800da58 <mem_malloc+0x264>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d974:	e005      	b.n	800d982 <mem_malloc+0x18e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d976:	69bb      	ldr	r3, [r7, #24]
 800d978:	881b      	ldrh	r3, [r3, #0]
 800d97a:	4618      	mov	r0, r3
 800d97c:	f7ff fbf4 	bl	800d168 <ptr_to_mem>
 800d980:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d982:	69bb      	ldr	r3, [r7, #24]
 800d984:	791b      	ldrb	r3, [r3, #4]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d004      	beq.n	800d994 <mem_malloc+0x1a0>
 800d98a:	4b38      	ldr	r3, [pc, #224]	; (800da6c <mem_malloc+0x278>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	69ba      	ldr	r2, [r7, #24]
 800d990:	429a      	cmp	r2, r3
 800d992:	d1f0      	bne.n	800d976 <mem_malloc+0x182>
          }
          lfree = cur;
 800d994:	4a30      	ldr	r2, [pc, #192]	; (800da58 <mem_malloc+0x264>)
 800d996:	69bb      	ldr	r3, [r7, #24]
 800d998:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d99a:	4b2f      	ldr	r3, [pc, #188]	; (800da58 <mem_malloc+0x264>)
 800d99c:	681a      	ldr	r2, [r3, #0]
 800d99e:	4b33      	ldr	r3, [pc, #204]	; (800da6c <mem_malloc+0x278>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	429a      	cmp	r2, r3
 800d9a4:	d00b      	beq.n	800d9be <mem_malloc+0x1ca>
 800d9a6:	4b2c      	ldr	r3, [pc, #176]	; (800da58 <mem_malloc+0x264>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	791b      	ldrb	r3, [r3, #4]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d006      	beq.n	800d9be <mem_malloc+0x1ca>
 800d9b0:	4b2a      	ldr	r3, [pc, #168]	; (800da5c <mem_malloc+0x268>)
 800d9b2:	f240 32b5 	movw	r2, #949	; 0x3b5
 800d9b6:	492e      	ldr	r1, [pc, #184]	; (800da70 <mem_malloc+0x27c>)
 800d9b8:	482a      	ldr	r0, [pc, #168]	; (800da64 <mem_malloc+0x270>)
 800d9ba:	f012 fd0f 	bl	80203dc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800d9be:	4825      	ldr	r0, [pc, #148]	; (800da54 <mem_malloc+0x260>)
 800d9c0:	f00e fa57 	bl	801be72 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d9c4:	8bba      	ldrh	r2, [r7, #28]
 800d9c6:	697b      	ldr	r3, [r7, #20]
 800d9c8:	4413      	add	r3, r2
 800d9ca:	3308      	adds	r3, #8
 800d9cc:	4a27      	ldr	r2, [pc, #156]	; (800da6c <mem_malloc+0x278>)
 800d9ce:	6812      	ldr	r2, [r2, #0]
 800d9d0:	4293      	cmp	r3, r2
 800d9d2:	d906      	bls.n	800d9e2 <mem_malloc+0x1ee>
 800d9d4:	4b21      	ldr	r3, [pc, #132]	; (800da5c <mem_malloc+0x268>)
 800d9d6:	f240 32b9 	movw	r2, #953	; 0x3b9
 800d9da:	4926      	ldr	r1, [pc, #152]	; (800da74 <mem_malloc+0x280>)
 800d9dc:	4821      	ldr	r0, [pc, #132]	; (800da64 <mem_malloc+0x270>)
 800d9de:	f012 fcfd 	bl	80203dc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d9e2:	697b      	ldr	r3, [r7, #20]
 800d9e4:	f003 0303 	and.w	r3, r3, #3
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d006      	beq.n	800d9fa <mem_malloc+0x206>
 800d9ec:	4b1b      	ldr	r3, [pc, #108]	; (800da5c <mem_malloc+0x268>)
 800d9ee:	f240 32bb 	movw	r2, #955	; 0x3bb
 800d9f2:	4921      	ldr	r1, [pc, #132]	; (800da78 <mem_malloc+0x284>)
 800d9f4:	481b      	ldr	r0, [pc, #108]	; (800da64 <mem_malloc+0x270>)
 800d9f6:	f012 fcf1 	bl	80203dc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d9fa:	697b      	ldr	r3, [r7, #20]
 800d9fc:	f003 0303 	and.w	r3, r3, #3
 800da00:	2b00      	cmp	r3, #0
 800da02:	d006      	beq.n	800da12 <mem_malloc+0x21e>
 800da04:	4b15      	ldr	r3, [pc, #84]	; (800da5c <mem_malloc+0x268>)
 800da06:	f240 32bd 	movw	r2, #957	; 0x3bd
 800da0a:	491c      	ldr	r1, [pc, #112]	; (800da7c <mem_malloc+0x288>)
 800da0c:	4815      	ldr	r0, [pc, #84]	; (800da64 <mem_malloc+0x270>)
 800da0e:	f012 fce5 	bl	80203dc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800da12:	697b      	ldr	r3, [r7, #20]
 800da14:	3308      	adds	r3, #8
 800da16:	e019      	b.n	800da4c <mem_malloc+0x258>
         ptr = ptr_to_mem(ptr)->next) {
 800da18:	8bfb      	ldrh	r3, [r7, #30]
 800da1a:	4618      	mov	r0, r3
 800da1c:	f7ff fba4 	bl	800d168 <ptr_to_mem>
 800da20:	4603      	mov	r3, r0
 800da22:	881b      	ldrh	r3, [r3, #0]
 800da24:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800da26:	8bfa      	ldrh	r2, [r7, #30]
 800da28:	8bbb      	ldrh	r3, [r7, #28]
 800da2a:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800da2e:	429a      	cmp	r2, r3
 800da30:	f4ff af0a 	bcc.w	800d848 <mem_malloc+0x54>
    }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
 800da34:	4b0c      	ldr	r3, [pc, #48]	; (800da68 <mem_malloc+0x274>)
 800da36:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 800da3a:	3301      	adds	r3, #1
 800da3c:	b29a      	uxth	r2, r3
 800da3e:	4b0a      	ldr	r3, [pc, #40]	; (800da68 <mem_malloc+0x274>)
 800da40:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800da44:	4803      	ldr	r0, [pc, #12]	; (800da54 <mem_malloc+0x260>)
 800da46:	f00e fa14 	bl	801be72 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800da4a:	2300      	movs	r3, #0
}
 800da4c:	4618      	mov	r0, r3
 800da4e:	3724      	adds	r7, #36	; 0x24
 800da50:	46bd      	mov	sp, r7
 800da52:	bd90      	pop	{r4, r7, pc}
 800da54:	2000670c 	.word	0x2000670c
 800da58:	20006710 	.word	0x20006710
 800da5c:	080217ac 	.word	0x080217ac
 800da60:	08021970 	.word	0x08021970
 800da64:	080217f4 	.word	0x080217f4
 800da68:	2000a3ec 	.word	0x2000a3ec
 800da6c:	20006708 	.word	0x20006708
 800da70:	08021984 	.word	0x08021984
 800da74:	080219a0 	.word	0x080219a0
 800da78:	080219d0 	.word	0x080219d0
 800da7c:	08021a00 	.word	0x08021a00

0800da80 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800da80:	b480      	push	{r7}
 800da82:	b085      	sub	sp, #20
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	691b      	ldr	r3, [r3, #16]
 800da8c:	2200      	movs	r2, #0
 800da8e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	68db      	ldr	r3, [r3, #12]
 800da94:	3303      	adds	r3, #3
 800da96:	f023 0303 	bic.w	r3, r3, #3
 800da9a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800da9c:	2300      	movs	r3, #0
 800da9e:	60fb      	str	r3, [r7, #12]
 800daa0:	e011      	b.n	800dac6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	691b      	ldr	r3, [r3, #16]
 800daa6:	681a      	ldr	r2, [r3, #0]
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	691b      	ldr	r3, [r3, #16]
 800dab0:	68ba      	ldr	r2, [r7, #8]
 800dab2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	891b      	ldrh	r3, [r3, #8]
 800dab8:	461a      	mov	r2, r3
 800daba:	68bb      	ldr	r3, [r7, #8]
 800dabc:	4413      	add	r3, r2
 800dabe:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	3301      	adds	r3, #1
 800dac4:	60fb      	str	r3, [r7, #12]
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	895b      	ldrh	r3, [r3, #10]
 800daca:	461a      	mov	r2, r3
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	4293      	cmp	r3, r2
 800dad0:	dbe7      	blt.n	800daa2 <memp_init_pool+0x22>
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                  );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	685b      	ldr	r3, [r3, #4]
 800dad6:	687a      	ldr	r2, [r7, #4]
 800dad8:	8952      	ldrh	r2, [r2, #10]
 800dada:	80da      	strh	r2, [r3, #6]
#endif /* MEMP_STATS */
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	685b      	ldr	r3, [r3, #4]
 800dae0:	687a      	ldr	r2, [r7, #4]
 800dae2:	6812      	ldr	r2, [r2, #0]
 800dae4:	601a      	str	r2, [r3, #0]
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800dae6:	bf00      	nop
 800dae8:	3714      	adds	r7, #20
 800daea:	46bd      	mov	sp, r7
 800daec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf0:	4770      	bx	lr
	...

0800daf4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b082      	sub	sp, #8
 800daf8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800dafa:	2300      	movs	r3, #0
 800dafc:	80fb      	strh	r3, [r7, #6]
 800dafe:	e014      	b.n	800db2a <memp_init+0x36>
    memp_init_pool(memp_pools[i]);
 800db00:	88fb      	ldrh	r3, [r7, #6]
 800db02:	4a0e      	ldr	r2, [pc, #56]	; (800db3c <memp_init+0x48>)
 800db04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db08:	4618      	mov	r0, r3
 800db0a:	f7ff ffb9 	bl	800da80 <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
 800db0e:	88fb      	ldrh	r3, [r7, #6]
 800db10:	4a0a      	ldr	r2, [pc, #40]	; (800db3c <memp_init+0x48>)
 800db12:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800db16:	88fb      	ldrh	r3, [r7, #6]
 800db18:	6852      	ldr	r2, [r2, #4]
 800db1a:	4909      	ldr	r1, [pc, #36]	; (800db40 <memp_init+0x4c>)
 800db1c:	3334      	adds	r3, #52	; 0x34
 800db1e:	009b      	lsls	r3, r3, #2
 800db20:	440b      	add	r3, r1
 800db22:	605a      	str	r2, [r3, #4]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800db24:	88fb      	ldrh	r3, [r7, #6]
 800db26:	3301      	adds	r3, #1
 800db28:	80fb      	strh	r3, [r7, #6]
 800db2a:	88fb      	ldrh	r3, [r7, #6]
 800db2c:	2b0e      	cmp	r3, #14
 800db2e:	d9e7      	bls.n	800db00 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800db30:	bf00      	nop
 800db32:	bf00      	nop
 800db34:	3708      	adds	r7, #8
 800db36:	46bd      	mov	sp, r7
 800db38:	bd80      	pop	{r7, pc}
 800db3a:	bf00      	nop
 800db3c:	08026b58 	.word	0x08026b58
 800db40:	2000a3ec 	.word	0x2000a3ec

0800db44 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b084      	sub	sp, #16
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800db4c:	f00e f9be 	bl	801becc <sys_arch_protect>
 800db50:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	691b      	ldr	r3, [r3, #16]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d029      	beq.n	800dbb4 <do_memp_malloc_pool+0x70>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	691b      	ldr	r3, [r3, #16]
 800db64:	68ba      	ldr	r2, [r7, #8]
 800db66:	6812      	ldr	r2, [r2, #0]
 800db68:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800db6a:	68bb      	ldr	r3, [r7, #8]
 800db6c:	f003 0303 	and.w	r3, r3, #3
 800db70:	2b00      	cmp	r3, #0
 800db72:	d006      	beq.n	800db82 <do_memp_malloc_pool+0x3e>
 800db74:	4b16      	ldr	r3, [pc, #88]	; (800dbd0 <do_memp_malloc_pool+0x8c>)
 800db76:	f44f 728c 	mov.w	r2, #280	; 0x118
 800db7a:	4916      	ldr	r1, [pc, #88]	; (800dbd4 <do_memp_malloc_pool+0x90>)
 800db7c:	4816      	ldr	r0, [pc, #88]	; (800dbd8 <do_memp_malloc_pool+0x94>)
 800db7e:	f012 fc2d 	bl	80203dc <iprintf>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	685b      	ldr	r3, [r3, #4]
 800db86:	891a      	ldrh	r2, [r3, #8]
 800db88:	3201      	adds	r2, #1
 800db8a:	b292      	uxth	r2, r2
 800db8c:	811a      	strh	r2, [r3, #8]
    if (desc->stats->used > desc->stats->max) {
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	685b      	ldr	r3, [r3, #4]
 800db92:	891a      	ldrh	r2, [r3, #8]
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	685b      	ldr	r3, [r3, #4]
 800db98:	895b      	ldrh	r3, [r3, #10]
 800db9a:	429a      	cmp	r2, r3
 800db9c:	d905      	bls.n	800dbaa <do_memp_malloc_pool+0x66>
      desc->stats->max = desc->stats->used;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	685a      	ldr	r2, [r3, #4]
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	685b      	ldr	r3, [r3, #4]
 800dba6:	8912      	ldrh	r2, [r2, #8]
 800dba8:	815a      	strh	r2, [r3, #10]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800dbaa:	68f8      	ldr	r0, [r7, #12]
 800dbac:	f00e f99c 	bl	801bee8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	e009      	b.n	800dbc8 <do_memp_malloc_pool+0x84>
  } else {
#if MEMP_STATS
    desc->stats->err++;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	685b      	ldr	r3, [r3, #4]
 800dbb8:	889a      	ldrh	r2, [r3, #4]
 800dbba:	3201      	adds	r2, #1
 800dbbc:	b292      	uxth	r2, r2
 800dbbe:	809a      	strh	r2, [r3, #4]
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800dbc0:	68f8      	ldr	r0, [r7, #12]
 800dbc2:	f00e f991 	bl	801bee8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800dbc6:	2300      	movs	r3, #0
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3710      	adds	r7, #16
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}
 800dbd0:	08021ad0 	.word	0x08021ad0
 800dbd4:	08021b00 	.word	0x08021b00
 800dbd8:	08021b24 	.word	0x08021b24

0800dbdc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b082      	sub	sp, #8
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d106      	bne.n	800dbf8 <memp_malloc_pool+0x1c>
 800dbea:	4b0a      	ldr	r3, [pc, #40]	; (800dc14 <memp_malloc_pool+0x38>)
 800dbec:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800dbf0:	4909      	ldr	r1, [pc, #36]	; (800dc18 <memp_malloc_pool+0x3c>)
 800dbf2:	480a      	ldr	r0, [pc, #40]	; (800dc1c <memp_malloc_pool+0x40>)
 800dbf4:	f012 fbf2 	bl	80203dc <iprintf>
  if (desc == NULL) {
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d101      	bne.n	800dc02 <memp_malloc_pool+0x26>
    return NULL;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	e003      	b.n	800dc0a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f7ff ff9e 	bl	800db44 <do_memp_malloc_pool>
 800dc08:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3708      	adds	r7, #8
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}
 800dc12:	bf00      	nop
 800dc14:	08021ad0 	.word	0x08021ad0
 800dc18:	08021b4c 	.word	0x08021b4c
 800dc1c:	08021b24 	.word	0x08021b24

0800dc20 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b084      	sub	sp, #16
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	4603      	mov	r3, r0
 800dc28:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800dc2a:	79fb      	ldrb	r3, [r7, #7]
 800dc2c:	2b0e      	cmp	r3, #14
 800dc2e:	d908      	bls.n	800dc42 <memp_malloc+0x22>
 800dc30:	4b0a      	ldr	r3, [pc, #40]	; (800dc5c <memp_malloc+0x3c>)
 800dc32:	f240 1257 	movw	r2, #343	; 0x157
 800dc36:	490a      	ldr	r1, [pc, #40]	; (800dc60 <memp_malloc+0x40>)
 800dc38:	480a      	ldr	r0, [pc, #40]	; (800dc64 <memp_malloc+0x44>)
 800dc3a:	f012 fbcf 	bl	80203dc <iprintf>
 800dc3e:	2300      	movs	r3, #0
 800dc40:	e008      	b.n	800dc54 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800dc42:	79fb      	ldrb	r3, [r7, #7]
 800dc44:	4a08      	ldr	r2, [pc, #32]	; (800dc68 <memp_malloc+0x48>)
 800dc46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f7ff ff7a 	bl	800db44 <do_memp_malloc_pool>
 800dc50:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800dc52:	68fb      	ldr	r3, [r7, #12]
}
 800dc54:	4618      	mov	r0, r3
 800dc56:	3710      	adds	r7, #16
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	bd80      	pop	{r7, pc}
 800dc5c:	08021ad0 	.word	0x08021ad0
 800dc60:	08021b60 	.word	0x08021b60
 800dc64:	08021b24 	.word	0x08021b24
 800dc68:	08026b58 	.word	0x08026b58

0800dc6c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b084      	sub	sp, #16
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
 800dc74:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	f003 0303 	and.w	r3, r3, #3
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d006      	beq.n	800dc8e <do_memp_free_pool+0x22>
 800dc80:	4b10      	ldr	r3, [pc, #64]	; (800dcc4 <do_memp_free_pool+0x58>)
 800dc82:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800dc86:	4910      	ldr	r1, [pc, #64]	; (800dcc8 <do_memp_free_pool+0x5c>)
 800dc88:	4810      	ldr	r0, [pc, #64]	; (800dccc <do_memp_free_pool+0x60>)
 800dc8a:	f012 fba7 	bl	80203dc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800dc92:	f00e f91b 	bl	801becc <sys_arch_protect>
 800dc96:	60b8      	str	r0, [r7, #8]
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	685b      	ldr	r3, [r3, #4]
 800dc9c:	891a      	ldrh	r2, [r3, #8]
 800dc9e:	3a01      	subs	r2, #1
 800dca0:	b292      	uxth	r2, r2
 800dca2:	811a      	strh	r2, [r3, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	691b      	ldr	r3, [r3, #16]
 800dca8:	681a      	ldr	r2, [r3, #0]
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	691b      	ldr	r3, [r3, #16]
 800dcb2:	68fa      	ldr	r2, [r7, #12]
 800dcb4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800dcb6:	68b8      	ldr	r0, [r7, #8]
 800dcb8:	f00e f916 	bl	801bee8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800dcbc:	bf00      	nop
 800dcbe:	3710      	adds	r7, #16
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd80      	pop	{r7, pc}
 800dcc4:	08021ad0 	.word	0x08021ad0
 800dcc8:	08021b80 	.word	0x08021b80
 800dccc:	08021b24 	.word	0x08021b24

0800dcd0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b082      	sub	sp, #8
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
 800dcd8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d106      	bne.n	800dcee <memp_free_pool+0x1e>
 800dce0:	4b0a      	ldr	r3, [pc, #40]	; (800dd0c <memp_free_pool+0x3c>)
 800dce2:	f240 1295 	movw	r2, #405	; 0x195
 800dce6:	490a      	ldr	r1, [pc, #40]	; (800dd10 <memp_free_pool+0x40>)
 800dce8:	480a      	ldr	r0, [pc, #40]	; (800dd14 <memp_free_pool+0x44>)
 800dcea:	f012 fb77 	bl	80203dc <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d007      	beq.n	800dd04 <memp_free_pool+0x34>
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d004      	beq.n	800dd04 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800dcfa:	6839      	ldr	r1, [r7, #0]
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f7ff ffb5 	bl	800dc6c <do_memp_free_pool>
 800dd02:	e000      	b.n	800dd06 <memp_free_pool+0x36>
    return;
 800dd04:	bf00      	nop
}
 800dd06:	3708      	adds	r7, #8
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}
 800dd0c:	08021ad0 	.word	0x08021ad0
 800dd10:	08021b4c 	.word	0x08021b4c
 800dd14:	08021b24 	.word	0x08021b24

0800dd18 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b082      	sub	sp, #8
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	4603      	mov	r3, r0
 800dd20:	6039      	str	r1, [r7, #0]
 800dd22:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800dd24:	79fb      	ldrb	r3, [r7, #7]
 800dd26:	2b0e      	cmp	r3, #14
 800dd28:	d907      	bls.n	800dd3a <memp_free+0x22>
 800dd2a:	4b0c      	ldr	r3, [pc, #48]	; (800dd5c <memp_free+0x44>)
 800dd2c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800dd30:	490b      	ldr	r1, [pc, #44]	; (800dd60 <memp_free+0x48>)
 800dd32:	480c      	ldr	r0, [pc, #48]	; (800dd64 <memp_free+0x4c>)
 800dd34:	f012 fb52 	bl	80203dc <iprintf>
 800dd38:	e00c      	b.n	800dd54 <memp_free+0x3c>

  if (mem == NULL) {
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d008      	beq.n	800dd52 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800dd40:	79fb      	ldrb	r3, [r7, #7]
 800dd42:	4a09      	ldr	r2, [pc, #36]	; (800dd68 <memp_free+0x50>)
 800dd44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd48:	6839      	ldr	r1, [r7, #0]
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	f7ff ff8e 	bl	800dc6c <do_memp_free_pool>
 800dd50:	e000      	b.n	800dd54 <memp_free+0x3c>
    return;
 800dd52:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800dd54:	3708      	adds	r7, #8
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}
 800dd5a:	bf00      	nop
 800dd5c:	08021ad0 	.word	0x08021ad0
 800dd60:	08021ba0 	.word	0x08021ba0
 800dd64:	08021b24 	.word	0x08021b24
 800dd68:	08026b58 	.word	0x08026b58

0800dd6c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800dd6c:	b480      	push	{r7}
 800dd6e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800dd70:	bf00      	nop
 800dd72:	46bd      	mov	sp, r7
 800dd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd78:	4770      	bx	lr
	...

0800dd7c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b088      	sub	sp, #32
 800dd80:	af02      	add	r7, sp, #8
 800dd82:	60f8      	str	r0, [r7, #12]
 800dd84:	60b9      	str	r1, [r7, #8]
 800dd86:	607a      	str	r2, [r7, #4]
 800dd88:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d108      	bne.n	800dda2 <netif_add+0x26>
 800dd90:	4ba0      	ldr	r3, [pc, #640]	; (800e014 <netif_add+0x298>)
 800dd92:	f240 1227 	movw	r2, #295	; 0x127
 800dd96:	49a0      	ldr	r1, [pc, #640]	; (800e018 <netif_add+0x29c>)
 800dd98:	48a0      	ldr	r0, [pc, #640]	; (800e01c <netif_add+0x2a0>)
 800dd9a:	f012 fb1f 	bl	80203dc <iprintf>
 800dd9e:	2300      	movs	r3, #0
 800dda0:	e160      	b.n	800e064 <netif_add+0x2e8>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800dda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d108      	bne.n	800ddba <netif_add+0x3e>
 800dda8:	4b9a      	ldr	r3, [pc, #616]	; (800e014 <netif_add+0x298>)
 800ddaa:	f44f 7294 	mov.w	r2, #296	; 0x128
 800ddae:	499c      	ldr	r1, [pc, #624]	; (800e020 <netif_add+0x2a4>)
 800ddb0:	489a      	ldr	r0, [pc, #616]	; (800e01c <netif_add+0x2a0>)
 800ddb2:	f012 fb13 	bl	80203dc <iprintf>
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	e154      	b.n	800e064 <netif_add+0x2e8>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d101      	bne.n	800ddc4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800ddc0:	4b98      	ldr	r3, [pc, #608]	; (800e024 <netif_add+0x2a8>)
 800ddc2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d101      	bne.n	800ddce <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800ddca:	4b96      	ldr	r3, [pc, #600]	; (800e024 <netif_add+0x2a8>)
 800ddcc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d101      	bne.n	800ddd8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800ddd4:	4b93      	ldr	r3, [pc, #588]	; (800e024 <netif_add+0x2a8>)
 800ddd6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	2200      	movs	r2, #0
 800dddc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	2200      	movs	r2, #0
 800dde2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	2200      	movs	r2, #0
 800dde8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	4a8e      	ldr	r2, [pc, #568]	; (800e028 <netif_add+0x2ac>)
 800ddee:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	859a      	strh	r2, [r3, #44]	; 0x2c
  netif->flags = 0;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	3324      	adds	r3, #36	; 0x24
 800de02:	2208      	movs	r2, #8
 800de04:	2100      	movs	r1, #0
 800de06:	4618      	mov	r0, r3
 800de08:	f012 fa36 	bl	8020278 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	2200      	movs	r2, #0
 800de10:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_LINK_CALLBACK */
#if LWIP_IGMP
  netif->igmp_mac_filter = NULL;
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	2200      	movs	r2, #0
 800de16:	63da      	str	r2, [r3, #60]	; 0x3c
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	6a3a      	ldr	r2, [r7, #32]
 800de1c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800de1e:	4b83      	ldr	r3, [pc, #524]	; (800e02c <netif_add+0x2b0>)
 800de20:	781a      	ldrb	r2, [r3, #0]
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  netif->input = input;
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de2c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800de2e:	683b      	ldr	r3, [r7, #0]
 800de30:	687a      	ldr	r2, [r7, #4]
 800de32:	68b9      	ldr	r1, [r7, #8]
 800de34:	68f8      	ldr	r0, [r7, #12]
 800de36:	f000 f9ff 	bl	800e238 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800de3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de3c:	68f8      	ldr	r0, [r7, #12]
 800de3e:	4798      	blx	r3
 800de40:	4603      	mov	r3, r0
 800de42:	2b00      	cmp	r3, #0
 800de44:	d001      	beq.n	800de4a <netif_add+0xce>
    return NULL;
 800de46:	2300      	movs	r3, #0
 800de48:	e10c      	b.n	800e064 <netif_add+0x2e8>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800de50:	2bff      	cmp	r3, #255	; 0xff
 800de52:	d103      	bne.n	800de5c <netif_add+0xe0>
        netif->num = 0;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	2200      	movs	r2, #0
 800de58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      }
      num_netifs = 0;
 800de5c:	2300      	movs	r3, #0
 800de5e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800de60:	4b73      	ldr	r3, [pc, #460]	; (800e030 <netif_add+0x2b4>)
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	617b      	str	r3, [r7, #20]
 800de66:	e02b      	b.n	800dec0 <netif_add+0x144>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800de68:	697a      	ldr	r2, [r7, #20]
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	429a      	cmp	r2, r3
 800de6e:	d106      	bne.n	800de7e <netif_add+0x102>
 800de70:	4b68      	ldr	r3, [pc, #416]	; (800e014 <netif_add+0x298>)
 800de72:	f240 128b 	movw	r2, #395	; 0x18b
 800de76:	496f      	ldr	r1, [pc, #444]	; (800e034 <netif_add+0x2b8>)
 800de78:	4868      	ldr	r0, [pc, #416]	; (800e01c <netif_add+0x2a0>)
 800de7a:	f012 faaf 	bl	80203dc <iprintf>
        num_netifs++;
 800de7e:	693b      	ldr	r3, [r7, #16]
 800de80:	3301      	adds	r3, #1
 800de82:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800de84:	693b      	ldr	r3, [r7, #16]
 800de86:	2bff      	cmp	r3, #255	; 0xff
 800de88:	dd06      	ble.n	800de98 <netif_add+0x11c>
 800de8a:	4b62      	ldr	r3, [pc, #392]	; (800e014 <netif_add+0x298>)
 800de8c:	f240 128d 	movw	r2, #397	; 0x18d
 800de90:	4969      	ldr	r1, [pc, #420]	; (800e038 <netif_add+0x2bc>)
 800de92:	4862      	ldr	r0, [pc, #392]	; (800e01c <netif_add+0x2a0>)
 800de94:	f012 faa2 	bl	80203dc <iprintf>
        if (netif2->num == netif->num) {
 800de98:	697b      	ldr	r3, [r7, #20]
 800de9a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800dea4:	429a      	cmp	r2, r3
 800dea6:	d108      	bne.n	800deba <netif_add+0x13e>
          netif->num++;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800deae:	3301      	adds	r3, #1
 800deb0:	b2da      	uxtb	r2, r3
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          break;
 800deb8:	e005      	b.n	800dec6 <netif_add+0x14a>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	617b      	str	r3, [r7, #20]
 800dec0:	697b      	ldr	r3, [r7, #20]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d1d0      	bne.n	800de68 <netif_add+0xec>
        }
      }
    } while (netif2 != NULL);
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d1be      	bne.n	800de4a <netif_add+0xce>
  }
  if (netif->num == 254) {
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ded2:	2bfe      	cmp	r3, #254	; 0xfe
 800ded4:	d103      	bne.n	800dede <netif_add+0x162>
    netif_num = 0;
 800ded6:	4b55      	ldr	r3, [pc, #340]	; (800e02c <netif_add+0x2b0>)
 800ded8:	2200      	movs	r2, #0
 800deda:	701a      	strb	r2, [r3, #0]
 800dedc:	e006      	b.n	800deec <netif_add+0x170>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800dee4:	3301      	adds	r3, #1
 800dee6:	b2da      	uxtb	r2, r3
 800dee8:	4b50      	ldr	r3, [pc, #320]	; (800e02c <netif_add+0x2b0>)
 800deea:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800deec:	4b50      	ldr	r3, [pc, #320]	; (800e030 <netif_add+0x2b4>)
 800deee:	681a      	ldr	r2, [r3, #0]
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800def4:	4a4e      	ldr	r2, [pc, #312]	; (800e030 <netif_add+0x2b4>)
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	6013      	str	r3, [r2, #0]
#endif /* "LWIP_SINGLE_NETIF */
  mib2_netif_added(netif);

#if LWIP_IGMP
  /* start IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800df00:	f003 0320 	and.w	r3, r3, #32
 800df04:	2b00      	cmp	r3, #0
 800df06:	d002      	beq.n	800df0e <netif_add+0x192>
    igmp_start(netif);
 800df08:	68f8      	ldr	r0, [r7, #12]
 800df0a:	f00b fab5 	bl	8019478 <igmp_start>
  }
#endif /* LWIP_IGMP */

  LWIP_DEBUGF(NETIF_DEBUG, ("netif: added interface %c%c IP",
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800df14:	4619      	mov	r1, r3
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800df1c:	461a      	mov	r2, r3
 800df1e:	4847      	ldr	r0, [pc, #284]	; (800e03c <netif_add+0x2c0>)
 800df20:	f012 fa5c 	bl	80203dc <iprintf>
                            netif->name[0], netif->name[1]));
#if LWIP_IPV4
  LWIP_DEBUGF(NETIF_DEBUG, (" addr "));
 800df24:	4846      	ldr	r0, [pc, #280]	; (800e040 <netif_add+0x2c4>)
 800df26:	f012 fa59 	bl	80203dc <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, ipaddr);
 800df2a:	68bb      	ldr	r3, [r7, #8]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d003      	beq.n	800df38 <netif_add+0x1bc>
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	781b      	ldrb	r3, [r3, #0]
 800df34:	4619      	mov	r1, r3
 800df36:	e000      	b.n	800df3a <netif_add+0x1be>
 800df38:	2100      	movs	r1, #0
 800df3a:	68bb      	ldr	r3, [r7, #8]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d004      	beq.n	800df4a <netif_add+0x1ce>
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	3301      	adds	r3, #1
 800df44:	781b      	ldrb	r3, [r3, #0]
 800df46:	461a      	mov	r2, r3
 800df48:	e000      	b.n	800df4c <netif_add+0x1d0>
 800df4a:	2200      	movs	r2, #0
 800df4c:	68bb      	ldr	r3, [r7, #8]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d004      	beq.n	800df5c <netif_add+0x1e0>
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	3302      	adds	r3, #2
 800df56:	781b      	ldrb	r3, [r3, #0]
 800df58:	4618      	mov	r0, r3
 800df5a:	e000      	b.n	800df5e <netif_add+0x1e2>
 800df5c:	2000      	movs	r0, #0
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d003      	beq.n	800df6c <netif_add+0x1f0>
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	3303      	adds	r3, #3
 800df68:	781b      	ldrb	r3, [r3, #0]
 800df6a:	e000      	b.n	800df6e <netif_add+0x1f2>
 800df6c:	2300      	movs	r3, #0
 800df6e:	9300      	str	r3, [sp, #0]
 800df70:	4603      	mov	r3, r0
 800df72:	4834      	ldr	r0, [pc, #208]	; (800e044 <netif_add+0x2c8>)
 800df74:	f012 fa32 	bl	80203dc <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
 800df78:	4833      	ldr	r0, [pc, #204]	; (800e048 <netif_add+0x2cc>)
 800df7a:	f012 fa2f 	bl	80203dc <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d003      	beq.n	800df8c <netif_add+0x210>
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	781b      	ldrb	r3, [r3, #0]
 800df88:	4619      	mov	r1, r3
 800df8a:	e000      	b.n	800df8e <netif_add+0x212>
 800df8c:	2100      	movs	r1, #0
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d004      	beq.n	800df9e <netif_add+0x222>
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	3301      	adds	r3, #1
 800df98:	781b      	ldrb	r3, [r3, #0]
 800df9a:	461a      	mov	r2, r3
 800df9c:	e000      	b.n	800dfa0 <netif_add+0x224>
 800df9e:	2200      	movs	r2, #0
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d004      	beq.n	800dfb0 <netif_add+0x234>
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	3302      	adds	r3, #2
 800dfaa:	781b      	ldrb	r3, [r3, #0]
 800dfac:	4618      	mov	r0, r3
 800dfae:	e000      	b.n	800dfb2 <netif_add+0x236>
 800dfb0:	2000      	movs	r0, #0
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d003      	beq.n	800dfc0 <netif_add+0x244>
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	3303      	adds	r3, #3
 800dfbc:	781b      	ldrb	r3, [r3, #0]
 800dfbe:	e000      	b.n	800dfc2 <netif_add+0x246>
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	9300      	str	r3, [sp, #0]
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	481f      	ldr	r0, [pc, #124]	; (800e044 <netif_add+0x2c8>)
 800dfc8:	f012 fa08 	bl	80203dc <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
 800dfcc:	481f      	ldr	r0, [pc, #124]	; (800e04c <netif_add+0x2d0>)
 800dfce:	f012 fa05 	bl	80203dc <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, gw);
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d003      	beq.n	800dfe0 <netif_add+0x264>
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	781b      	ldrb	r3, [r3, #0]
 800dfdc:	4619      	mov	r1, r3
 800dfde:	e000      	b.n	800dfe2 <netif_add+0x266>
 800dfe0:	2100      	movs	r1, #0
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d004      	beq.n	800dff2 <netif_add+0x276>
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	3301      	adds	r3, #1
 800dfec:	781b      	ldrb	r3, [r3, #0]
 800dfee:	461a      	mov	r2, r3
 800dff0:	e000      	b.n	800dff4 <netif_add+0x278>
 800dff2:	2200      	movs	r2, #0
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d004      	beq.n	800e004 <netif_add+0x288>
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	3302      	adds	r3, #2
 800dffe:	781b      	ldrb	r3, [r3, #0]
 800e000:	4618      	mov	r0, r3
 800e002:	e000      	b.n	800e006 <netif_add+0x28a>
 800e004:	2000      	movs	r0, #0
 800e006:	683b      	ldr	r3, [r7, #0]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d021      	beq.n	800e050 <netif_add+0x2d4>
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	3303      	adds	r3, #3
 800e010:	781b      	ldrb	r3, [r3, #0]
 800e012:	e01e      	b.n	800e052 <netif_add+0x2d6>
 800e014:	08021bbc 	.word	0x08021bbc
 800e018:	08021c50 	.word	0x08021c50
 800e01c:	08021c0c 	.word	0x08021c0c
 800e020:	08021c6c 	.word	0x08021c6c
 800e024:	08026bf4 	.word	0x08026bf4
 800e028:	0800e557 	.word	0x0800e557
 800e02c:	20006840 	.word	0x20006840
 800e030:	2000a3e0 	.word	0x2000a3e0
 800e034:	08021c90 	.word	0x08021c90
 800e038:	08021ca4 	.word	0x08021ca4
 800e03c:	08021cd4 	.word	0x08021cd4
 800e040:	08021cf4 	.word	0x08021cf4
 800e044:	08021cfc 	.word	0x08021cfc
 800e048:	08021d0c 	.word	0x08021d0c
 800e04c:	08021d18 	.word	0x08021d18
 800e050:	2300      	movs	r3, #0
 800e052:	9300      	str	r3, [sp, #0]
 800e054:	4603      	mov	r3, r0
 800e056:	4805      	ldr	r0, [pc, #20]	; (800e06c <netif_add+0x2f0>)
 800e058:	f012 f9c0 	bl	80203dc <iprintf>
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
 800e05c:	200a      	movs	r0, #10
 800e05e:	f012 f9d5 	bl	802040c <putchar>

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800e062:	68fb      	ldr	r3, [r7, #12]
}
 800e064:	4618      	mov	r0, r3
 800e066:	3718      	adds	r7, #24
 800e068:	46bd      	mov	sp, r7
 800e06a:	bd80      	pop	{r7, pc}
 800e06c:	08021cfc 	.word	0x08021cfc

0800e070 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b082      	sub	sp, #8
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
 800e078:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800e07a:	6839      	ldr	r1, [r7, #0]
 800e07c:	6878      	ldr	r0, [r7, #4]
 800e07e:	f002 fd93 	bl	8010ba8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800e082:	6839      	ldr	r1, [r7, #0]
 800e084:	6878      	ldr	r0, [r7, #4]
 800e086:	f007 fd1b 	bl	8015ac0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800e08a:	bf00      	nop
 800e08c:	3708      	adds	r7, #8
 800e08e:	46bd      	mov	sp, r7
 800e090:	bd80      	pop	{r7, pc}
	...

0800e094 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b086      	sub	sp, #24
 800e098:	af00      	add	r7, sp, #0
 800e09a:	60f8      	str	r0, [r7, #12]
 800e09c:	60b9      	str	r1, [r7, #8]
 800e09e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d106      	bne.n	800e0b4 <netif_do_set_ipaddr+0x20>
 800e0a6:	4b1e      	ldr	r3, [pc, #120]	; (800e120 <netif_do_set_ipaddr+0x8c>)
 800e0a8:	f240 12cb 	movw	r2, #459	; 0x1cb
 800e0ac:	491d      	ldr	r1, [pc, #116]	; (800e124 <netif_do_set_ipaddr+0x90>)
 800e0ae:	481e      	ldr	r0, [pc, #120]	; (800e128 <netif_do_set_ipaddr+0x94>)
 800e0b0:	f012 f994 	bl	80203dc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d106      	bne.n	800e0c8 <netif_do_set_ipaddr+0x34>
 800e0ba:	4b19      	ldr	r3, [pc, #100]	; (800e120 <netif_do_set_ipaddr+0x8c>)
 800e0bc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800e0c0:	4918      	ldr	r1, [pc, #96]	; (800e124 <netif_do_set_ipaddr+0x90>)
 800e0c2:	4819      	ldr	r0, [pc, #100]	; (800e128 <netif_do_set_ipaddr+0x94>)
 800e0c4:	f012 f98a 	bl	80203dc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800e0c8:	68bb      	ldr	r3, [r7, #8]
 800e0ca:	681a      	ldr	r2, [r3, #0]
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	3304      	adds	r3, #4
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	429a      	cmp	r2, r3
 800e0d4:	d01f      	beq.n	800e116 <netif_do_set_ipaddr+0x82>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	3304      	adds	r3, #4
 800e0e0:	681a      	ldr	r2, [r3, #0]
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
 800e0e6:	4811      	ldr	r0, [pc, #68]	; (800e12c <netif_do_set_ipaddr+0x98>)
 800e0e8:	f012 fa14 	bl	8020514 <puts>
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800e0ec:	f107 0314 	add.w	r3, r7, #20
 800e0f0:	4619      	mov	r1, r3
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	f7ff ffbc 	bl	800e070 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800e0f8:	68bb      	ldr	r3, [r7, #8]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d002      	beq.n	800e104 <netif_do_set_ipaddr+0x70>
 800e0fe:	68bb      	ldr	r3, [r7, #8]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	e000      	b.n	800e106 <netif_do_set_ipaddr+0x72>
 800e104:	2300      	movs	r3, #0
 800e106:	68fa      	ldr	r2, [r7, #12]
 800e108:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800e10a:	2101      	movs	r1, #1
 800e10c:	68f8      	ldr	r0, [r7, #12]
 800e10e:	f000 f92d 	bl	800e36c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800e112:	2301      	movs	r3, #1
 800e114:	e000      	b.n	800e118 <netif_do_set_ipaddr+0x84>
  }
  return 0; /* address unchanged */
 800e116:	2300      	movs	r3, #0
}
 800e118:	4618      	mov	r0, r3
 800e11a:	3718      	adds	r7, #24
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}
 800e120:	08021bbc 	.word	0x08021bbc
 800e124:	08021d20 	.word	0x08021d20
 800e128:	08021c0c 	.word	0x08021c0c
 800e12c:	08021d30 	.word	0x08021d30

0800e130 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800e130:	b5b0      	push	{r4, r5, r7, lr}
 800e132:	b088      	sub	sp, #32
 800e134:	af04      	add	r7, sp, #16
 800e136:	60f8      	str	r0, [r7, #12]
 800e138:	60b9      	str	r1, [r7, #8]
 800e13a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800e13c:	68bb      	ldr	r3, [r7, #8]
 800e13e:	681a      	ldr	r2, [r3, #0]
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	3308      	adds	r3, #8
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	429a      	cmp	r2, r3
 800e148:	d02d      	beq.n	800e1a6 <netif_do_set_netmask+0x76>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d002      	beq.n	800e156 <netif_do_set_netmask+0x26>
 800e150:	68bb      	ldr	r3, [r7, #8]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	e000      	b.n	800e158 <netif_do_set_netmask+0x28>
 800e156:	2300      	movs	r3, #0
 800e158:	68fa      	ldr	r2, [r7, #12]
 800e15a:	6093      	str	r3, [r2, #8]
    IP_SET_TYPE_VAL(netif->netmask, IPADDR_TYPE_V4);
    mib2_add_route_ip4(0, netif);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: netmask of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800e162:	4618      	mov	r0, r3
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800e16a:	461c      	mov	r4, r3
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	3308      	adds	r3, #8
 800e170:	781b      	ldrb	r3, [r3, #0]
 800e172:	461d      	mov	r5, r3
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	3308      	adds	r3, #8
 800e178:	3301      	adds	r3, #1
 800e17a:	781b      	ldrb	r3, [r3, #0]
 800e17c:	461a      	mov	r2, r3
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	3308      	adds	r3, #8
 800e182:	3302      	adds	r3, #2
 800e184:	781b      	ldrb	r3, [r3, #0]
 800e186:	4619      	mov	r1, r3
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	3308      	adds	r3, #8
 800e18c:	3303      	adds	r3, #3
 800e18e:	781b      	ldrb	r3, [r3, #0]
 800e190:	9302      	str	r3, [sp, #8]
 800e192:	9101      	str	r1, [sp, #4]
 800e194:	9200      	str	r2, [sp, #0]
 800e196:	462b      	mov	r3, r5
 800e198:	4622      	mov	r2, r4
 800e19a:	4601      	mov	r1, r0
 800e19c:	4804      	ldr	r0, [pc, #16]	; (800e1b0 <netif_do_set_netmask+0x80>)
 800e19e:	f012 f91d 	bl	80203dc <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	e000      	b.n	800e1a8 <netif_do_set_netmask+0x78>
  }
  return 0; /* netmask unchanged */
 800e1a6:	2300      	movs	r3, #0
}
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	3710      	adds	r7, #16
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bdb0      	pop	{r4, r5, r7, pc}
 800e1b0:	08021d80 	.word	0x08021d80

0800e1b4 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800e1b4:	b5b0      	push	{r4, r5, r7, lr}
 800e1b6:	b088      	sub	sp, #32
 800e1b8:	af04      	add	r7, sp, #16
 800e1ba:	60f8      	str	r0, [r7, #12]
 800e1bc:	60b9      	str	r1, [r7, #8]
 800e1be:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800e1c0:	68bb      	ldr	r3, [r7, #8]
 800e1c2:	681a      	ldr	r2, [r3, #0]
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	330c      	adds	r3, #12
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	429a      	cmp	r2, r3
 800e1cc:	d02d      	beq.n	800e22a <netif_do_set_gw+0x76>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d002      	beq.n	800e1da <netif_do_set_gw+0x26>
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	e000      	b.n	800e1dc <netif_do_set_gw+0x28>
 800e1da:	2300      	movs	r3, #0
 800e1dc:	68fa      	ldr	r2, [r7, #12]
 800e1de:	60d3      	str	r3, [r2, #12]
    IP_SET_TYPE_VAL(netif->gw, IPADDR_TYPE_V4);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: GW address of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800e1ee:	461c      	mov	r4, r3
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	330c      	adds	r3, #12
 800e1f4:	781b      	ldrb	r3, [r3, #0]
 800e1f6:	461d      	mov	r5, r3
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	330c      	adds	r3, #12
 800e1fc:	3301      	adds	r3, #1
 800e1fe:	781b      	ldrb	r3, [r3, #0]
 800e200:	461a      	mov	r2, r3
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	330c      	adds	r3, #12
 800e206:	3302      	adds	r3, #2
 800e208:	781b      	ldrb	r3, [r3, #0]
 800e20a:	4619      	mov	r1, r3
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	330c      	adds	r3, #12
 800e210:	3303      	adds	r3, #3
 800e212:	781b      	ldrb	r3, [r3, #0]
 800e214:	9302      	str	r3, [sp, #8]
 800e216:	9101      	str	r1, [sp, #4]
 800e218:	9200      	str	r2, [sp, #0]
 800e21a:	462b      	mov	r3, r5
 800e21c:	4622      	mov	r2, r4
 800e21e:	4601      	mov	r1, r0
 800e220:	4804      	ldr	r0, [pc, #16]	; (800e234 <netif_do_set_gw+0x80>)
 800e222:	f012 f8db 	bl	80203dc <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800e226:	2301      	movs	r3, #1
 800e228:	e000      	b.n	800e22c <netif_do_set_gw+0x78>
  }
  return 0; /* gateway unchanged */
 800e22a:	2300      	movs	r3, #0
}
 800e22c:	4618      	mov	r0, r3
 800e22e:	3710      	adds	r7, #16
 800e230:	46bd      	mov	sp, r7
 800e232:	bdb0      	pop	{r4, r5, r7, pc}
 800e234:	08021de0 	.word	0x08021de0

0800e238 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b088      	sub	sp, #32
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	60f8      	str	r0, [r7, #12]
 800e240:	60b9      	str	r1, [r7, #8]
 800e242:	607a      	str	r2, [r7, #4]
 800e244:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800e246:	2300      	movs	r3, #0
 800e248:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800e24a:	2300      	movs	r3, #0
 800e24c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e24e:	68bb      	ldr	r3, [r7, #8]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d101      	bne.n	800e258 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800e254:	4b1c      	ldr	r3, [pc, #112]	; (800e2c8 <netif_set_addr+0x90>)
 800e256:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d101      	bne.n	800e262 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800e25e:	4b1a      	ldr	r3, [pc, #104]	; (800e2c8 <netif_set_addr+0x90>)
 800e260:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d101      	bne.n	800e26c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800e268:	4b17      	ldr	r3, [pc, #92]	; (800e2c8 <netif_set_addr+0x90>)
 800e26a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800e26c:	68bb      	ldr	r3, [r7, #8]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d003      	beq.n	800e27a <netif_set_addr+0x42>
 800e272:	68bb      	ldr	r3, [r7, #8]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d101      	bne.n	800e27e <netif_set_addr+0x46>
 800e27a:	2301      	movs	r3, #1
 800e27c:	e000      	b.n	800e280 <netif_set_addr+0x48>
 800e27e:	2300      	movs	r3, #0
 800e280:	617b      	str	r3, [r7, #20]
  if (remove) {
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d006      	beq.n	800e296 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e288:	f107 0310 	add.w	r3, r7, #16
 800e28c:	461a      	mov	r2, r3
 800e28e:	68b9      	ldr	r1, [r7, #8]
 800e290:	68f8      	ldr	r0, [r7, #12]
 800e292:	f7ff feff 	bl	800e094 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800e296:	69fa      	ldr	r2, [r7, #28]
 800e298:	6879      	ldr	r1, [r7, #4]
 800e29a:	68f8      	ldr	r0, [r7, #12]
 800e29c:	f7ff ff48 	bl	800e130 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800e2a0:	69ba      	ldr	r2, [r7, #24]
 800e2a2:	6839      	ldr	r1, [r7, #0]
 800e2a4:	68f8      	ldr	r0, [r7, #12]
 800e2a6:	f7ff ff85 	bl	800e1b4 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800e2aa:	697b      	ldr	r3, [r7, #20]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d106      	bne.n	800e2be <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e2b0:	f107 0310 	add.w	r3, r7, #16
 800e2b4:	461a      	mov	r2, r3
 800e2b6:	68b9      	ldr	r1, [r7, #8]
 800e2b8:	68f8      	ldr	r0, [r7, #12]
 800e2ba:	f7ff feeb 	bl	800e094 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800e2be:	bf00      	nop
 800e2c0:	3720      	adds	r7, #32
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd80      	pop	{r7, pc}
 800e2c6:	bf00      	nop
 800e2c8:	08026bf4 	.word	0x08026bf4

0800e2cc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b082      	sub	sp, #8
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800e2d4:	4a0d      	ldr	r2, [pc, #52]	; (800e30c <netif_set_default+0x40>)
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d004      	beq.n	800e2ea <netif_set_default+0x1e>
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800e2e6:	4619      	mov	r1, r3
 800e2e8:	e000      	b.n	800e2ec <netif_set_default+0x20>
 800e2ea:	2127      	movs	r1, #39	; 0x27
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d003      	beq.n	800e2fa <netif_set_default+0x2e>
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800e2f8:	e000      	b.n	800e2fc <netif_set_default+0x30>
 800e2fa:	2327      	movs	r3, #39	; 0x27
 800e2fc:	461a      	mov	r2, r3
 800e2fe:	4804      	ldr	r0, [pc, #16]	; (800e310 <netif_set_default+0x44>)
 800e300:	f012 f86c 	bl	80203dc <iprintf>
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800e304:	bf00      	nop
 800e306:	3708      	adds	r7, #8
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}
 800e30c:	2000a3e4 	.word	0x2000a3e4
 800e310:	08021e54 	.word	0x08021e54

0800e314 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800e314:	b580      	push	{r7, lr}
 800e316:	b082      	sub	sp, #8
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d107      	bne.n	800e332 <netif_set_up+0x1e>
 800e322:	4b0f      	ldr	r3, [pc, #60]	; (800e360 <netif_set_up+0x4c>)
 800e324:	f44f 7254 	mov.w	r2, #848	; 0x350
 800e328:	490e      	ldr	r1, [pc, #56]	; (800e364 <netif_set_up+0x50>)
 800e32a:	480f      	ldr	r0, [pc, #60]	; (800e368 <netif_set_up+0x54>)
 800e32c:	f012 f856 	bl	80203dc <iprintf>
 800e330:	e013      	b.n	800e35a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e338:	f003 0301 	and.w	r3, r3, #1
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d10c      	bne.n	800e35a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e346:	f043 0301 	orr.w	r3, r3, #1
 800e34a:	b2da      	uxtb	r2, r3
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e352:	2103      	movs	r1, #3
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	f000 f809 	bl	800e36c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800e35a:	3708      	adds	r7, #8
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd80      	pop	{r7, pc}
 800e360:	08021bbc 	.word	0x08021bbc
 800e364:	08021e7c 	.word	0x08021e7c
 800e368:	08021c0c 	.word	0x08021c0c

0800e36c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b082      	sub	sp, #8
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
 800e374:	460b      	mov	r3, r1
 800e376:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d106      	bne.n	800e38c <netif_issue_reports+0x20>
 800e37e:	4b1d      	ldr	r3, [pc, #116]	; (800e3f4 <netif_issue_reports+0x88>)
 800e380:	f240 326d 	movw	r2, #877	; 0x36d
 800e384:	491c      	ldr	r1, [pc, #112]	; (800e3f8 <netif_issue_reports+0x8c>)
 800e386:	481d      	ldr	r0, [pc, #116]	; (800e3fc <netif_issue_reports+0x90>)
 800e388:	f012 f828 	bl	80203dc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e392:	f003 0304 	and.w	r3, r3, #4
 800e396:	2b00      	cmp	r3, #0
 800e398:	d028      	beq.n	800e3ec <netif_issue_reports+0x80>
      !(netif->flags & NETIF_FLAG_UP)) {
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e3a0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d021      	beq.n	800e3ec <netif_issue_reports+0x80>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e3a8:	78fb      	ldrb	r3, [r7, #3]
 800e3aa:	f003 0301 	and.w	r3, r3, #1
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d01d      	beq.n	800e3ee <netif_issue_reports+0x82>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	3304      	adds	r3, #4
 800e3b6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d018      	beq.n	800e3ee <netif_issue_reports+0x82>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e3c2:	f003 0308 	and.w	r3, r3, #8
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d005      	beq.n	800e3d6 <netif_issue_reports+0x6a>
      etharp_gratuitous(netif);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	3304      	adds	r3, #4
 800e3ce:	4619      	mov	r1, r3
 800e3d0:	6878      	ldr	r0, [r7, #4]
 800e3d2:	f00a fe27 	bl	8019024 <etharp_request>
    }
#endif /* LWIP_ARP */

#if LWIP_IGMP
    /* resend IGMP memberships */
    if (netif->flags & NETIF_FLAG_IGMP) {
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e3dc:	f003 0320 	and.w	r3, r3, #32
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d004      	beq.n	800e3ee <netif_issue_reports+0x82>
      igmp_report_groups(netif);
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f00b f871 	bl	80194cc <igmp_report_groups>
 800e3ea:	e000      	b.n	800e3ee <netif_issue_reports+0x82>
    return;
 800e3ec:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800e3ee:	3708      	adds	r7, #8
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	bd80      	pop	{r7, pc}
 800e3f4:	08021bbc 	.word	0x08021bbc
 800e3f8:	08021e98 	.word	0x08021e98
 800e3fc:	08021c0c 	.word	0x08021c0c

0800e400 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b082      	sub	sp, #8
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d107      	bne.n	800e41e <netif_set_down+0x1e>
 800e40e:	4b12      	ldr	r3, [pc, #72]	; (800e458 <netif_set_down+0x58>)
 800e410:	f240 329b 	movw	r2, #923	; 0x39b
 800e414:	4911      	ldr	r1, [pc, #68]	; (800e45c <netif_set_down+0x5c>)
 800e416:	4812      	ldr	r0, [pc, #72]	; (800e460 <netif_set_down+0x60>)
 800e418:	f011 ffe0 	bl	80203dc <iprintf>
 800e41c:	e019      	b.n	800e452 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e424:	f003 0301 	and.w	r3, r3, #1
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d012      	beq.n	800e452 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e432:	f023 0301 	bic.w	r3, r3, #1
 800e436:	b2da      	uxtb	r2, r3
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e444:	f003 0308 	and.w	r3, r3, #8
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d002      	beq.n	800e452 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800e44c:	6878      	ldr	r0, [r7, #4]
 800e44e:	f00a f8f7 	bl	8018640 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800e452:	3708      	adds	r7, #8
 800e454:	46bd      	mov	sp, r7
 800e456:	bd80      	pop	{r7, pc}
 800e458:	08021bbc 	.word	0x08021bbc
 800e45c:	08021ebc 	.word	0x08021ebc
 800e460:	08021c0c 	.word	0x08021c0c

0800e464 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b082      	sub	sp, #8
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d107      	bne.n	800e482 <netif_set_link_up+0x1e>
 800e472:	4b15      	ldr	r3, [pc, #84]	; (800e4c8 <netif_set_link_up+0x64>)
 800e474:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800e478:	4914      	ldr	r1, [pc, #80]	; (800e4cc <netif_set_link_up+0x68>)
 800e47a:	4815      	ldr	r0, [pc, #84]	; (800e4d0 <netif_set_link_up+0x6c>)
 800e47c:	f011 ffae 	bl	80203dc <iprintf>
 800e480:	e01e      	b.n	800e4c0 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e488:	f003 0304 	and.w	r3, r3, #4
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d117      	bne.n	800e4c0 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e496:	f043 0304 	orr.w	r3, r3, #4
 800e49a:	b2da      	uxtb	r2, r3
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	f008 f894 	bl	80165d0 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e4a8:	2103      	movs	r1, #3
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f7ff ff5e 	bl	800e36c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	69db      	ldr	r3, [r3, #28]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d003      	beq.n	800e4c0 <netif_set_link_up+0x5c>
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	69db      	ldr	r3, [r3, #28]
 800e4bc:	6878      	ldr	r0, [r7, #4]
 800e4be:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e4c0:	3708      	adds	r7, #8
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bd80      	pop	{r7, pc}
 800e4c6:	bf00      	nop
 800e4c8:	08021bbc 	.word	0x08021bbc
 800e4cc:	08021edc 	.word	0x08021edc
 800e4d0:	08021c0c 	.word	0x08021c0c

0800e4d4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b082      	sub	sp, #8
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d107      	bne.n	800e4f2 <netif_set_link_down+0x1e>
 800e4e2:	4b11      	ldr	r3, [pc, #68]	; (800e528 <netif_set_link_down+0x54>)
 800e4e4:	f240 4206 	movw	r2, #1030	; 0x406
 800e4e8:	4910      	ldr	r1, [pc, #64]	; (800e52c <netif_set_link_down+0x58>)
 800e4ea:	4811      	ldr	r0, [pc, #68]	; (800e530 <netif_set_link_down+0x5c>)
 800e4ec:	f011 ff76 	bl	80203dc <iprintf>
 800e4f0:	e017      	b.n	800e522 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e4f8:	f003 0304 	and.w	r3, r3, #4
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d010      	beq.n	800e522 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e506:	f023 0304 	bic.w	r3, r3, #4
 800e50a:	b2da      	uxtb	r2, r3
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    NETIF_LINK_CALLBACK(netif);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	69db      	ldr	r3, [r3, #28]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d003      	beq.n	800e522 <netif_set_link_down+0x4e>
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	69db      	ldr	r3, [r3, #28]
 800e51e:	6878      	ldr	r0, [r7, #4]
 800e520:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e522:	3708      	adds	r7, #8
 800e524:	46bd      	mov	sp, r7
 800e526:	bd80      	pop	{r7, pc}
 800e528:	08021bbc 	.word	0x08021bbc
 800e52c:	08021f00 	.word	0x08021f00
 800e530:	08021c0c 	.word	0x08021c0c

0800e534 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800e534:	b480      	push	{r7}
 800e536:	b083      	sub	sp, #12
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
 800e53c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d002      	beq.n	800e54a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	683a      	ldr	r2, [r7, #0]
 800e548:	61da      	str	r2, [r3, #28]
  }
}
 800e54a:	bf00      	nop
 800e54c:	370c      	adds	r7, #12
 800e54e:	46bd      	mov	sp, r7
 800e550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e554:	4770      	bx	lr

0800e556 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800e556:	b480      	push	{r7}
 800e558:	b085      	sub	sp, #20
 800e55a:	af00      	add	r7, sp, #0
 800e55c:	60f8      	str	r0, [r7, #12]
 800e55e:	60b9      	str	r1, [r7, #8]
 800e560:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800e562:	f06f 030b 	mvn.w	r3, #11
}
 800e566:	4618      	mov	r0, r3
 800e568:	3714      	adds	r7, #20
 800e56a:	46bd      	mov	sp, r7
 800e56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e570:	4770      	bx	lr
	...

0800e574 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800e574:	b480      	push	{r7}
 800e576:	b085      	sub	sp, #20
 800e578:	af00      	add	r7, sp, #0
 800e57a:	4603      	mov	r3, r0
 800e57c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800e57e:	79fb      	ldrb	r3, [r7, #7]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d013      	beq.n	800e5ac <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800e584:	4b0d      	ldr	r3, [pc, #52]	; (800e5bc <netif_get_by_index+0x48>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	60fb      	str	r3, [r7, #12]
 800e58a:	e00c      	b.n	800e5a6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e592:	3301      	adds	r3, #1
 800e594:	b2db      	uxtb	r3, r3
 800e596:	79fa      	ldrb	r2, [r7, #7]
 800e598:	429a      	cmp	r2, r3
 800e59a:	d101      	bne.n	800e5a0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	e006      	b.n	800e5ae <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	60fb      	str	r3, [r7, #12]
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d1ef      	bne.n	800e58c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800e5ac:	2300      	movs	r3, #0
}
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	3714      	adds	r7, #20
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b8:	4770      	bx	lr
 800e5ba:	bf00      	nop
 800e5bc:	2000a3e0 	.word	0x2000a3e0

0800e5c0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b082      	sub	sp, #8
 800e5c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800e5c6:	f00d fc81 	bl	801becc <sys_arch_protect>
 800e5ca:	6038      	str	r0, [r7, #0]
 800e5cc:	4b0d      	ldr	r3, [pc, #52]	; (800e604 <pbuf_free_ooseq+0x44>)
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	701a      	strb	r2, [r3, #0]
 800e5d2:	6838      	ldr	r0, [r7, #0]
 800e5d4:	f00d fc88 	bl	801bee8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e5d8:	4b0b      	ldr	r3, [pc, #44]	; (800e608 <pbuf_free_ooseq+0x48>)
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	607b      	str	r3, [r7, #4]
 800e5de:	e00a      	b.n	800e5f6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d003      	beq.n	800e5f0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f002 fb1b 	bl	8010c24 <tcp_free_ooseq>
      return;
 800e5ee:	e005      	b.n	800e5fc <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	68db      	ldr	r3, [r3, #12]
 800e5f4:	607b      	str	r3, [r7, #4]
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d1f1      	bne.n	800e5e0 <pbuf_free_ooseq+0x20>
    }
  }
}
 800e5fc:	3708      	adds	r7, #8
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd80      	pop	{r7, pc}
 800e602:	bf00      	nop
 800e604:	2000a3e8 	.word	0x2000a3e8
 800e608:	2000a514 	.word	0x2000a514

0800e60c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b082      	sub	sp, #8
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800e614:	f7ff ffd4 	bl	800e5c0 <pbuf_free_ooseq>
}
 800e618:	bf00      	nop
 800e61a:	3708      	adds	r7, #8
 800e61c:	46bd      	mov	sp, r7
 800e61e:	bd80      	pop	{r7, pc}

0800e620 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b082      	sub	sp, #8
 800e624:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800e626:	f00d fc51 	bl	801becc <sys_arch_protect>
 800e62a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800e62c:	4b0f      	ldr	r3, [pc, #60]	; (800e66c <pbuf_pool_is_empty+0x4c>)
 800e62e:	781b      	ldrb	r3, [r3, #0]
 800e630:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800e632:	4b0e      	ldr	r3, [pc, #56]	; (800e66c <pbuf_pool_is_empty+0x4c>)
 800e634:	2201      	movs	r2, #1
 800e636:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800e638:	6878      	ldr	r0, [r7, #4]
 800e63a:	f00d fc55 	bl	801bee8 <sys_arch_unprotect>

  if (!queued) {
 800e63e:	78fb      	ldrb	r3, [r7, #3]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d10f      	bne.n	800e664 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800e644:	2100      	movs	r1, #0
 800e646:	480a      	ldr	r0, [pc, #40]	; (800e670 <pbuf_pool_is_empty+0x50>)
 800e648:	f7fe f910 	bl	800c86c <tcpip_try_callback>
 800e64c:	4603      	mov	r3, r0
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d008      	beq.n	800e664 <pbuf_pool_is_empty+0x44>
 800e652:	f00d fc3b 	bl	801becc <sys_arch_protect>
 800e656:	6078      	str	r0, [r7, #4]
 800e658:	4b04      	ldr	r3, [pc, #16]	; (800e66c <pbuf_pool_is_empty+0x4c>)
 800e65a:	2200      	movs	r2, #0
 800e65c:	701a      	strb	r2, [r3, #0]
 800e65e:	6878      	ldr	r0, [r7, #4]
 800e660:	f00d fc42 	bl	801bee8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800e664:	bf00      	nop
 800e666:	3708      	adds	r7, #8
 800e668:	46bd      	mov	sp, r7
 800e66a:	bd80      	pop	{r7, pc}
 800e66c:	2000a3e8 	.word	0x2000a3e8
 800e670:	0800e60d 	.word	0x0800e60d

0800e674 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800e674:	b480      	push	{r7}
 800e676:	b085      	sub	sp, #20
 800e678:	af00      	add	r7, sp, #0
 800e67a:	60f8      	str	r0, [r7, #12]
 800e67c:	60b9      	str	r1, [r7, #8]
 800e67e:	4611      	mov	r1, r2
 800e680:	461a      	mov	r2, r3
 800e682:	460b      	mov	r3, r1
 800e684:	80fb      	strh	r3, [r7, #6]
 800e686:	4613      	mov	r3, r2
 800e688:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	2200      	movs	r2, #0
 800e68e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	68ba      	ldr	r2, [r7, #8]
 800e694:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	88fa      	ldrh	r2, [r7, #6]
 800e69a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	88ba      	ldrh	r2, [r7, #4]
 800e6a0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800e6a2:	8b3b      	ldrh	r3, [r7, #24]
 800e6a4:	b2da      	uxtb	r2, r3
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	7f3a      	ldrb	r2, [r7, #28]
 800e6ae:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	2201      	movs	r2, #1
 800e6b4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	73da      	strb	r2, [r3, #15]
}
 800e6bc:	bf00      	nop
 800e6be:	3714      	adds	r7, #20
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c6:	4770      	bx	lr

0800e6c8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b08c      	sub	sp, #48	; 0x30
 800e6cc:	af02      	add	r7, sp, #8
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	71fb      	strb	r3, [r7, #7]
 800e6d2:	460b      	mov	r3, r1
 800e6d4:	80bb      	strh	r3, [r7, #4]
 800e6d6:	4613      	mov	r3, r2
 800e6d8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800e6da:	79fb      	ldrb	r3, [r7, #7]
 800e6dc:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800e6de:	887b      	ldrh	r3, [r7, #2]
 800e6e0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e6e4:	d07f      	beq.n	800e7e6 <pbuf_alloc+0x11e>
 800e6e6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e6ea:	f300 80c8 	bgt.w	800e87e <pbuf_alloc+0x1b6>
 800e6ee:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e6f2:	d010      	beq.n	800e716 <pbuf_alloc+0x4e>
 800e6f4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e6f8:	f300 80c1 	bgt.w	800e87e <pbuf_alloc+0x1b6>
 800e6fc:	2b01      	cmp	r3, #1
 800e6fe:	d002      	beq.n	800e706 <pbuf_alloc+0x3e>
 800e700:	2b41      	cmp	r3, #65	; 0x41
 800e702:	f040 80bc 	bne.w	800e87e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800e706:	887a      	ldrh	r2, [r7, #2]
 800e708:	88bb      	ldrh	r3, [r7, #4]
 800e70a:	4619      	mov	r1, r3
 800e70c:	2000      	movs	r0, #0
 800e70e:	f000 f8d1 	bl	800e8b4 <pbuf_alloc_reference>
 800e712:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800e714:	e0bd      	b.n	800e892 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800e716:	2300      	movs	r3, #0
 800e718:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800e71a:	2300      	movs	r3, #0
 800e71c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800e71e:	88bb      	ldrh	r3, [r7, #4]
 800e720:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800e722:	200e      	movs	r0, #14
 800e724:	f7ff fa7c 	bl	800dc20 <memp_malloc>
 800e728:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800e72a:	693b      	ldr	r3, [r7, #16]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d109      	bne.n	800e744 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800e730:	f7ff ff76 	bl	800e620 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800e734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e736:	2b00      	cmp	r3, #0
 800e738:	d002      	beq.n	800e740 <pbuf_alloc+0x78>
            pbuf_free(p);
 800e73a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e73c:	f000 faa8 	bl	800ec90 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800e740:	2300      	movs	r3, #0
 800e742:	e0a7      	b.n	800e894 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800e744:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e746:	3303      	adds	r3, #3
 800e748:	b29b      	uxth	r3, r3
 800e74a:	f023 0303 	bic.w	r3, r3, #3
 800e74e:	b29b      	uxth	r3, r3
 800e750:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800e754:	b29b      	uxth	r3, r3
 800e756:	8b7a      	ldrh	r2, [r7, #26]
 800e758:	4293      	cmp	r3, r2
 800e75a:	bf28      	it	cs
 800e75c:	4613      	movcs	r3, r2
 800e75e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800e760:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e762:	3310      	adds	r3, #16
 800e764:	693a      	ldr	r2, [r7, #16]
 800e766:	4413      	add	r3, r2
 800e768:	3303      	adds	r3, #3
 800e76a:	f023 0303 	bic.w	r3, r3, #3
 800e76e:	4618      	mov	r0, r3
 800e770:	89f9      	ldrh	r1, [r7, #14]
 800e772:	8b7a      	ldrh	r2, [r7, #26]
 800e774:	2300      	movs	r3, #0
 800e776:	9301      	str	r3, [sp, #4]
 800e778:	887b      	ldrh	r3, [r7, #2]
 800e77a:	9300      	str	r3, [sp, #0]
 800e77c:	460b      	mov	r3, r1
 800e77e:	4601      	mov	r1, r0
 800e780:	6938      	ldr	r0, [r7, #16]
 800e782:	f7ff ff77 	bl	800e674 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e786:	693b      	ldr	r3, [r7, #16]
 800e788:	685b      	ldr	r3, [r3, #4]
 800e78a:	f003 0303 	and.w	r3, r3, #3
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d006      	beq.n	800e7a0 <pbuf_alloc+0xd8>
 800e792:	4b42      	ldr	r3, [pc, #264]	; (800e89c <pbuf_alloc+0x1d4>)
 800e794:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e798:	4941      	ldr	r1, [pc, #260]	; (800e8a0 <pbuf_alloc+0x1d8>)
 800e79a:	4842      	ldr	r0, [pc, #264]	; (800e8a4 <pbuf_alloc+0x1dc>)
 800e79c:	f011 fe1e 	bl	80203dc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e7a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e7a2:	3303      	adds	r3, #3
 800e7a4:	f023 0303 	bic.w	r3, r3, #3
 800e7a8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800e7ac:	d106      	bne.n	800e7bc <pbuf_alloc+0xf4>
 800e7ae:	4b3b      	ldr	r3, [pc, #236]	; (800e89c <pbuf_alloc+0x1d4>)
 800e7b0:	f44f 7281 	mov.w	r2, #258	; 0x102
 800e7b4:	493c      	ldr	r1, [pc, #240]	; (800e8a8 <pbuf_alloc+0x1e0>)
 800e7b6:	483b      	ldr	r0, [pc, #236]	; (800e8a4 <pbuf_alloc+0x1dc>)
 800e7b8:	f011 fe10 	bl	80203dc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d102      	bne.n	800e7c8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e7c2:	693b      	ldr	r3, [r7, #16]
 800e7c4:	627b      	str	r3, [r7, #36]	; 0x24
 800e7c6:	e002      	b.n	800e7ce <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e7c8:	69fb      	ldr	r3, [r7, #28]
 800e7ca:	693a      	ldr	r2, [r7, #16]
 800e7cc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e7ce:	693b      	ldr	r3, [r7, #16]
 800e7d0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e7d2:	8b7a      	ldrh	r2, [r7, #26]
 800e7d4:	89fb      	ldrh	r3, [r7, #14]
 800e7d6:	1ad3      	subs	r3, r2, r3
 800e7d8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e7da:	2300      	movs	r3, #0
 800e7dc:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800e7de:	8b7b      	ldrh	r3, [r7, #26]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d19e      	bne.n	800e722 <pbuf_alloc+0x5a>
      break;
 800e7e4:	e055      	b.n	800e892 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e7e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e7e8:	3303      	adds	r3, #3
 800e7ea:	b29b      	uxth	r3, r3
 800e7ec:	f023 0303 	bic.w	r3, r3, #3
 800e7f0:	b29a      	uxth	r2, r3
 800e7f2:	88bb      	ldrh	r3, [r7, #4]
 800e7f4:	3303      	adds	r3, #3
 800e7f6:	b29b      	uxth	r3, r3
 800e7f8:	f023 0303 	bic.w	r3, r3, #3
 800e7fc:	b29b      	uxth	r3, r3
 800e7fe:	4413      	add	r3, r2
 800e800:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e802:	8b3b      	ldrh	r3, [r7, #24]
 800e804:	3310      	adds	r3, #16
 800e806:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e808:	8b3a      	ldrh	r2, [r7, #24]
 800e80a:	88bb      	ldrh	r3, [r7, #4]
 800e80c:	3303      	adds	r3, #3
 800e80e:	f023 0303 	bic.w	r3, r3, #3
 800e812:	429a      	cmp	r2, r3
 800e814:	d306      	bcc.n	800e824 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e816:	8afa      	ldrh	r2, [r7, #22]
 800e818:	88bb      	ldrh	r3, [r7, #4]
 800e81a:	3303      	adds	r3, #3
 800e81c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e820:	429a      	cmp	r2, r3
 800e822:	d201      	bcs.n	800e828 <pbuf_alloc+0x160>
        return NULL;
 800e824:	2300      	movs	r3, #0
 800e826:	e035      	b.n	800e894 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e828:	8afb      	ldrh	r3, [r7, #22]
 800e82a:	4618      	mov	r0, r3
 800e82c:	f7fe ffe2 	bl	800d7f4 <mem_malloc>
 800e830:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800e832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e834:	2b00      	cmp	r3, #0
 800e836:	d101      	bne.n	800e83c <pbuf_alloc+0x174>
        return NULL;
 800e838:	2300      	movs	r3, #0
 800e83a:	e02b      	b.n	800e894 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e83c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e83e:	3310      	adds	r3, #16
 800e840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e842:	4413      	add	r3, r2
 800e844:	3303      	adds	r3, #3
 800e846:	f023 0303 	bic.w	r3, r3, #3
 800e84a:	4618      	mov	r0, r3
 800e84c:	88b9      	ldrh	r1, [r7, #4]
 800e84e:	88ba      	ldrh	r2, [r7, #4]
 800e850:	2300      	movs	r3, #0
 800e852:	9301      	str	r3, [sp, #4]
 800e854:	887b      	ldrh	r3, [r7, #2]
 800e856:	9300      	str	r3, [sp, #0]
 800e858:	460b      	mov	r3, r1
 800e85a:	4601      	mov	r1, r0
 800e85c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e85e:	f7ff ff09 	bl	800e674 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e864:	685b      	ldr	r3, [r3, #4]
 800e866:	f003 0303 	and.w	r3, r3, #3
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d010      	beq.n	800e890 <pbuf_alloc+0x1c8>
 800e86e:	4b0b      	ldr	r3, [pc, #44]	; (800e89c <pbuf_alloc+0x1d4>)
 800e870:	f44f 7291 	mov.w	r2, #290	; 0x122
 800e874:	490d      	ldr	r1, [pc, #52]	; (800e8ac <pbuf_alloc+0x1e4>)
 800e876:	480b      	ldr	r0, [pc, #44]	; (800e8a4 <pbuf_alloc+0x1dc>)
 800e878:	f011 fdb0 	bl	80203dc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e87c:	e008      	b.n	800e890 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e87e:	4b07      	ldr	r3, [pc, #28]	; (800e89c <pbuf_alloc+0x1d4>)
 800e880:	f240 1227 	movw	r2, #295	; 0x127
 800e884:	490a      	ldr	r1, [pc, #40]	; (800e8b0 <pbuf_alloc+0x1e8>)
 800e886:	4807      	ldr	r0, [pc, #28]	; (800e8a4 <pbuf_alloc+0x1dc>)
 800e888:	f011 fda8 	bl	80203dc <iprintf>
      return NULL;
 800e88c:	2300      	movs	r3, #0
 800e88e:	e001      	b.n	800e894 <pbuf_alloc+0x1cc>
      break;
 800e890:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e894:	4618      	mov	r0, r3
 800e896:	3728      	adds	r7, #40	; 0x28
 800e898:	46bd      	mov	sp, r7
 800e89a:	bd80      	pop	{r7, pc}
 800e89c:	08021f5c 	.word	0x08021f5c
 800e8a0:	08021f8c 	.word	0x08021f8c
 800e8a4:	08021fbc 	.word	0x08021fbc
 800e8a8:	08021fe4 	.word	0x08021fe4
 800e8ac:	08022018 	.word	0x08022018
 800e8b0:	08022044 	.word	0x08022044

0800e8b4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b086      	sub	sp, #24
 800e8b8:	af02      	add	r7, sp, #8
 800e8ba:	6078      	str	r0, [r7, #4]
 800e8bc:	460b      	mov	r3, r1
 800e8be:	807b      	strh	r3, [r7, #2]
 800e8c0:	4613      	mov	r3, r2
 800e8c2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e8c4:	883b      	ldrh	r3, [r7, #0]
 800e8c6:	2b41      	cmp	r3, #65	; 0x41
 800e8c8:	d009      	beq.n	800e8de <pbuf_alloc_reference+0x2a>
 800e8ca:	883b      	ldrh	r3, [r7, #0]
 800e8cc:	2b01      	cmp	r3, #1
 800e8ce:	d006      	beq.n	800e8de <pbuf_alloc_reference+0x2a>
 800e8d0:	4b0f      	ldr	r3, [pc, #60]	; (800e910 <pbuf_alloc_reference+0x5c>)
 800e8d2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800e8d6:	490f      	ldr	r1, [pc, #60]	; (800e914 <pbuf_alloc_reference+0x60>)
 800e8d8:	480f      	ldr	r0, [pc, #60]	; (800e918 <pbuf_alloc_reference+0x64>)
 800e8da:	f011 fd7f 	bl	80203dc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e8de:	200d      	movs	r0, #13
 800e8e0:	f7ff f99e 	bl	800dc20 <memp_malloc>
 800e8e4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d101      	bne.n	800e8f0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	e00b      	b.n	800e908 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e8f0:	8879      	ldrh	r1, [r7, #2]
 800e8f2:	887a      	ldrh	r2, [r7, #2]
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	9301      	str	r3, [sp, #4]
 800e8f8:	883b      	ldrh	r3, [r7, #0]
 800e8fa:	9300      	str	r3, [sp, #0]
 800e8fc:	460b      	mov	r3, r1
 800e8fe:	6879      	ldr	r1, [r7, #4]
 800e900:	68f8      	ldr	r0, [r7, #12]
 800e902:	f7ff feb7 	bl	800e674 <pbuf_init_alloced_pbuf>
  return p;
 800e906:	68fb      	ldr	r3, [r7, #12]
}
 800e908:	4618      	mov	r0, r3
 800e90a:	3710      	adds	r7, #16
 800e90c:	46bd      	mov	sp, r7
 800e90e:	bd80      	pop	{r7, pc}
 800e910:	08021f5c 	.word	0x08021f5c
 800e914:	08022060 	.word	0x08022060
 800e918:	08021fbc 	.word	0x08021fbc

0800e91c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b088      	sub	sp, #32
 800e920:	af02      	add	r7, sp, #8
 800e922:	607b      	str	r3, [r7, #4]
 800e924:	4603      	mov	r3, r0
 800e926:	73fb      	strb	r3, [r7, #15]
 800e928:	460b      	mov	r3, r1
 800e92a:	81bb      	strh	r3, [r7, #12]
 800e92c:	4613      	mov	r3, r2
 800e92e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e930:	7bfb      	ldrb	r3, [r7, #15]
 800e932:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e934:	8a7b      	ldrh	r3, [r7, #18]
 800e936:	3303      	adds	r3, #3
 800e938:	f023 0203 	bic.w	r2, r3, #3
 800e93c:	89bb      	ldrh	r3, [r7, #12]
 800e93e:	441a      	add	r2, r3
 800e940:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e942:	429a      	cmp	r2, r3
 800e944:	d901      	bls.n	800e94a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e946:	2300      	movs	r3, #0
 800e948:	e018      	b.n	800e97c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e94a:	6a3b      	ldr	r3, [r7, #32]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d007      	beq.n	800e960 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e950:	8a7b      	ldrh	r3, [r7, #18]
 800e952:	3303      	adds	r3, #3
 800e954:	f023 0303 	bic.w	r3, r3, #3
 800e958:	6a3a      	ldr	r2, [r7, #32]
 800e95a:	4413      	add	r3, r2
 800e95c:	617b      	str	r3, [r7, #20]
 800e95e:	e001      	b.n	800e964 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e960:	2300      	movs	r3, #0
 800e962:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e964:	6878      	ldr	r0, [r7, #4]
 800e966:	89b9      	ldrh	r1, [r7, #12]
 800e968:	89ba      	ldrh	r2, [r7, #12]
 800e96a:	2302      	movs	r3, #2
 800e96c:	9301      	str	r3, [sp, #4]
 800e96e:	897b      	ldrh	r3, [r7, #10]
 800e970:	9300      	str	r3, [sp, #0]
 800e972:	460b      	mov	r3, r1
 800e974:	6979      	ldr	r1, [r7, #20]
 800e976:	f7ff fe7d 	bl	800e674 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e97a:	687b      	ldr	r3, [r7, #4]
}
 800e97c:	4618      	mov	r0, r3
 800e97e:	3718      	adds	r7, #24
 800e980:	46bd      	mov	sp, r7
 800e982:	bd80      	pop	{r7, pc}

0800e984 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b084      	sub	sp, #16
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
 800e98c:	460b      	mov	r3, r1
 800e98e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d106      	bne.n	800e9a4 <pbuf_realloc+0x20>
 800e996:	4b3a      	ldr	r3, [pc, #232]	; (800ea80 <pbuf_realloc+0xfc>)
 800e998:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800e99c:	4939      	ldr	r1, [pc, #228]	; (800ea84 <pbuf_realloc+0x100>)
 800e99e:	483a      	ldr	r0, [pc, #232]	; (800ea88 <pbuf_realloc+0x104>)
 800e9a0:	f011 fd1c 	bl	80203dc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	891b      	ldrh	r3, [r3, #8]
 800e9a8:	887a      	ldrh	r2, [r7, #2]
 800e9aa:	429a      	cmp	r2, r3
 800e9ac:	d263      	bcs.n	800ea76 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	891a      	ldrh	r2, [r3, #8]
 800e9b2:	887b      	ldrh	r3, [r7, #2]
 800e9b4:	1ad3      	subs	r3, r2, r3
 800e9b6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e9b8:	887b      	ldrh	r3, [r7, #2]
 800e9ba:	817b      	strh	r3, [r7, #10]
  q = p;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e9c0:	e018      	b.n	800e9f4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	895b      	ldrh	r3, [r3, #10]
 800e9c6:	897a      	ldrh	r2, [r7, #10]
 800e9c8:	1ad3      	subs	r3, r2, r3
 800e9ca:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	891a      	ldrh	r2, [r3, #8]
 800e9d0:	893b      	ldrh	r3, [r7, #8]
 800e9d2:	1ad3      	subs	r3, r2, r3
 800e9d4:	b29a      	uxth	r2, r3
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d106      	bne.n	800e9f4 <pbuf_realloc+0x70>
 800e9e6:	4b26      	ldr	r3, [pc, #152]	; (800ea80 <pbuf_realloc+0xfc>)
 800e9e8:	f240 12af 	movw	r2, #431	; 0x1af
 800e9ec:	4927      	ldr	r1, [pc, #156]	; (800ea8c <pbuf_realloc+0x108>)
 800e9ee:	4826      	ldr	r0, [pc, #152]	; (800ea88 <pbuf_realloc+0x104>)
 800e9f0:	f011 fcf4 	bl	80203dc <iprintf>
  while (rem_len > q->len) {
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	895b      	ldrh	r3, [r3, #10]
 800e9f8:	897a      	ldrh	r2, [r7, #10]
 800e9fa:	429a      	cmp	r2, r3
 800e9fc:	d8e1      	bhi.n	800e9c2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	7b1b      	ldrb	r3, [r3, #12]
 800ea02:	f003 030f 	and.w	r3, r3, #15
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d121      	bne.n	800ea4e <pbuf_realloc+0xca>
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	895b      	ldrh	r3, [r3, #10]
 800ea0e:	897a      	ldrh	r2, [r7, #10]
 800ea10:	429a      	cmp	r2, r3
 800ea12:	d01c      	beq.n	800ea4e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	7b5b      	ldrb	r3, [r3, #13]
 800ea18:	f003 0302 	and.w	r3, r3, #2
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d116      	bne.n	800ea4e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	685a      	ldr	r2, [r3, #4]
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	1ad3      	subs	r3, r2, r3
 800ea28:	b29a      	uxth	r2, r3
 800ea2a:	897b      	ldrh	r3, [r7, #10]
 800ea2c:	4413      	add	r3, r2
 800ea2e:	b29b      	uxth	r3, r3
 800ea30:	4619      	mov	r1, r3
 800ea32:	68f8      	ldr	r0, [r7, #12]
 800ea34:	f7fe fdb2 	bl	800d59c <mem_trim>
 800ea38:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d106      	bne.n	800ea4e <pbuf_realloc+0xca>
 800ea40:	4b0f      	ldr	r3, [pc, #60]	; (800ea80 <pbuf_realloc+0xfc>)
 800ea42:	f240 12bd 	movw	r2, #445	; 0x1bd
 800ea46:	4912      	ldr	r1, [pc, #72]	; (800ea90 <pbuf_realloc+0x10c>)
 800ea48:	480f      	ldr	r0, [pc, #60]	; (800ea88 <pbuf_realloc+0x104>)
 800ea4a:	f011 fcc7 	bl	80203dc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	897a      	ldrh	r2, [r7, #10]
 800ea52:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	895a      	ldrh	r2, [r3, #10]
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d004      	beq.n	800ea6e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f000 f911 	bl	800ec90 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	2200      	movs	r2, #0
 800ea72:	601a      	str	r2, [r3, #0]
 800ea74:	e000      	b.n	800ea78 <pbuf_realloc+0xf4>
    return;
 800ea76:	bf00      	nop

}
 800ea78:	3710      	adds	r7, #16
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}
 800ea7e:	bf00      	nop
 800ea80:	08021f5c 	.word	0x08021f5c
 800ea84:	08022074 	.word	0x08022074
 800ea88:	08021fbc 	.word	0x08021fbc
 800ea8c:	0802208c 	.word	0x0802208c
 800ea90:	080220a4 	.word	0x080220a4

0800ea94 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b086      	sub	sp, #24
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	60f8      	str	r0, [r7, #12]
 800ea9c:	60b9      	str	r1, [r7, #8]
 800ea9e:	4613      	mov	r3, r2
 800eaa0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d106      	bne.n	800eab6 <pbuf_add_header_impl+0x22>
 800eaa8:	4b2b      	ldr	r3, [pc, #172]	; (800eb58 <pbuf_add_header_impl+0xc4>)
 800eaaa:	f240 12df 	movw	r2, #479	; 0x1df
 800eaae:	492b      	ldr	r1, [pc, #172]	; (800eb5c <pbuf_add_header_impl+0xc8>)
 800eab0:	482b      	ldr	r0, [pc, #172]	; (800eb60 <pbuf_add_header_impl+0xcc>)
 800eab2:	f011 fc93 	bl	80203dc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d003      	beq.n	800eac4 <pbuf_add_header_impl+0x30>
 800eabc:	68bb      	ldr	r3, [r7, #8]
 800eabe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eac2:	d301      	bcc.n	800eac8 <pbuf_add_header_impl+0x34>
    return 1;
 800eac4:	2301      	movs	r3, #1
 800eac6:	e043      	b.n	800eb50 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800eac8:	68bb      	ldr	r3, [r7, #8]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d101      	bne.n	800ead2 <pbuf_add_header_impl+0x3e>
    return 0;
 800eace:	2300      	movs	r3, #0
 800ead0:	e03e      	b.n	800eb50 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	891a      	ldrh	r2, [r3, #8]
 800eada:	8a7b      	ldrh	r3, [r7, #18]
 800eadc:	4413      	add	r3, r2
 800eade:	b29b      	uxth	r3, r3
 800eae0:	8a7a      	ldrh	r2, [r7, #18]
 800eae2:	429a      	cmp	r2, r3
 800eae4:	d901      	bls.n	800eaea <pbuf_add_header_impl+0x56>
    return 1;
 800eae6:	2301      	movs	r3, #1
 800eae8:	e032      	b.n	800eb50 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	7b1b      	ldrb	r3, [r3, #12]
 800eaee:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800eaf0:	8a3b      	ldrh	r3, [r7, #16]
 800eaf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d00c      	beq.n	800eb14 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	685a      	ldr	r2, [r3, #4]
 800eafe:	68bb      	ldr	r3, [r7, #8]
 800eb00:	425b      	negs	r3, r3
 800eb02:	4413      	add	r3, r2
 800eb04:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	3310      	adds	r3, #16
 800eb0a:	697a      	ldr	r2, [r7, #20]
 800eb0c:	429a      	cmp	r2, r3
 800eb0e:	d20d      	bcs.n	800eb2c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800eb10:	2301      	movs	r3, #1
 800eb12:	e01d      	b.n	800eb50 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800eb14:	79fb      	ldrb	r3, [r7, #7]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d006      	beq.n	800eb28 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	685a      	ldr	r2, [r3, #4]
 800eb1e:	68bb      	ldr	r3, [r7, #8]
 800eb20:	425b      	negs	r3, r3
 800eb22:	4413      	add	r3, r2
 800eb24:	617b      	str	r3, [r7, #20]
 800eb26:	e001      	b.n	800eb2c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800eb28:	2301      	movs	r3, #1
 800eb2a:	e011      	b.n	800eb50 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	697a      	ldr	r2, [r7, #20]
 800eb30:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	895a      	ldrh	r2, [r3, #10]
 800eb36:	8a7b      	ldrh	r3, [r7, #18]
 800eb38:	4413      	add	r3, r2
 800eb3a:	b29a      	uxth	r2, r3
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	891a      	ldrh	r2, [r3, #8]
 800eb44:	8a7b      	ldrh	r3, [r7, #18]
 800eb46:	4413      	add	r3, r2
 800eb48:	b29a      	uxth	r2, r3
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	811a      	strh	r2, [r3, #8]


  return 0;
 800eb4e:	2300      	movs	r3, #0
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	3718      	adds	r7, #24
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}
 800eb58:	08021f5c 	.word	0x08021f5c
 800eb5c:	080220c0 	.word	0x080220c0
 800eb60:	08021fbc 	.word	0x08021fbc

0800eb64 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b082      	sub	sp, #8
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
 800eb6c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800eb6e:	2200      	movs	r2, #0
 800eb70:	6839      	ldr	r1, [r7, #0]
 800eb72:	6878      	ldr	r0, [r7, #4]
 800eb74:	f7ff ff8e 	bl	800ea94 <pbuf_add_header_impl>
 800eb78:	4603      	mov	r3, r0
}
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	3708      	adds	r7, #8
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}
	...

0800eb84 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b084      	sub	sp, #16
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
 800eb8c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d106      	bne.n	800eba2 <pbuf_remove_header+0x1e>
 800eb94:	4b20      	ldr	r3, [pc, #128]	; (800ec18 <pbuf_remove_header+0x94>)
 800eb96:	f240 224b 	movw	r2, #587	; 0x24b
 800eb9a:	4920      	ldr	r1, [pc, #128]	; (800ec1c <pbuf_remove_header+0x98>)
 800eb9c:	4820      	ldr	r0, [pc, #128]	; (800ec20 <pbuf_remove_header+0x9c>)
 800eb9e:	f011 fc1d 	bl	80203dc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d003      	beq.n	800ebb0 <pbuf_remove_header+0x2c>
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ebae:	d301      	bcc.n	800ebb4 <pbuf_remove_header+0x30>
    return 1;
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	e02c      	b.n	800ec0e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d101      	bne.n	800ebbe <pbuf_remove_header+0x3a>
    return 0;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	e027      	b.n	800ec0e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ebbe:	683b      	ldr	r3, [r7, #0]
 800ebc0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	895b      	ldrh	r3, [r3, #10]
 800ebc6:	89fa      	ldrh	r2, [r7, #14]
 800ebc8:	429a      	cmp	r2, r3
 800ebca:	d908      	bls.n	800ebde <pbuf_remove_header+0x5a>
 800ebcc:	4b12      	ldr	r3, [pc, #72]	; (800ec18 <pbuf_remove_header+0x94>)
 800ebce:	f240 2255 	movw	r2, #597	; 0x255
 800ebd2:	4914      	ldr	r1, [pc, #80]	; (800ec24 <pbuf_remove_header+0xa0>)
 800ebd4:	4812      	ldr	r0, [pc, #72]	; (800ec20 <pbuf_remove_header+0x9c>)
 800ebd6:	f011 fc01 	bl	80203dc <iprintf>
 800ebda:	2301      	movs	r3, #1
 800ebdc:	e017      	b.n	800ec0e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	685b      	ldr	r3, [r3, #4]
 800ebe2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	685a      	ldr	r2, [r3, #4]
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	441a      	add	r2, r3
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	895a      	ldrh	r2, [r3, #10]
 800ebf4:	89fb      	ldrh	r3, [r7, #14]
 800ebf6:	1ad3      	subs	r3, r2, r3
 800ebf8:	b29a      	uxth	r2, r3
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	891a      	ldrh	r2, [r3, #8]
 800ec02:	89fb      	ldrh	r3, [r7, #14]
 800ec04:	1ad3      	subs	r3, r2, r3
 800ec06:	b29a      	uxth	r2, r3
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800ec0c:	2300      	movs	r3, #0
}
 800ec0e:	4618      	mov	r0, r3
 800ec10:	3710      	adds	r7, #16
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd80      	pop	{r7, pc}
 800ec16:	bf00      	nop
 800ec18:	08021f5c 	.word	0x08021f5c
 800ec1c:	080220c0 	.word	0x080220c0
 800ec20:	08021fbc 	.word	0x08021fbc
 800ec24:	080220cc 	.word	0x080220cc

0800ec28 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b082      	sub	sp, #8
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
 800ec30:	460b      	mov	r3, r1
 800ec32:	807b      	strh	r3, [r7, #2]
 800ec34:	4613      	mov	r3, r2
 800ec36:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800ec38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	da08      	bge.n	800ec52 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ec40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ec44:	425b      	negs	r3, r3
 800ec46:	4619      	mov	r1, r3
 800ec48:	6878      	ldr	r0, [r7, #4]
 800ec4a:	f7ff ff9b 	bl	800eb84 <pbuf_remove_header>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	e007      	b.n	800ec62 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ec52:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ec56:	787a      	ldrb	r2, [r7, #1]
 800ec58:	4619      	mov	r1, r3
 800ec5a:	6878      	ldr	r0, [r7, #4]
 800ec5c:	f7ff ff1a 	bl	800ea94 <pbuf_add_header_impl>
 800ec60:	4603      	mov	r3, r0
  }
}
 800ec62:	4618      	mov	r0, r3
 800ec64:	3708      	adds	r7, #8
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bd80      	pop	{r7, pc}

0800ec6a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ec6a:	b580      	push	{r7, lr}
 800ec6c:	b082      	sub	sp, #8
 800ec6e:	af00      	add	r7, sp, #0
 800ec70:	6078      	str	r0, [r7, #4]
 800ec72:	460b      	mov	r3, r1
 800ec74:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ec76:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ec7a:	2201      	movs	r2, #1
 800ec7c:	4619      	mov	r1, r3
 800ec7e:	6878      	ldr	r0, [r7, #4]
 800ec80:	f7ff ffd2 	bl	800ec28 <pbuf_header_impl>
 800ec84:	4603      	mov	r3, r0
}
 800ec86:	4618      	mov	r0, r3
 800ec88:	3708      	adds	r7, #8
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}
	...

0800ec90 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b088      	sub	sp, #32
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d10b      	bne.n	800ecb6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d106      	bne.n	800ecb2 <pbuf_free+0x22>
 800eca4:	4b3b      	ldr	r3, [pc, #236]	; (800ed94 <pbuf_free+0x104>)
 800eca6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ecaa:	493b      	ldr	r1, [pc, #236]	; (800ed98 <pbuf_free+0x108>)
 800ecac:	483b      	ldr	r0, [pc, #236]	; (800ed9c <pbuf_free+0x10c>)
 800ecae:	f011 fb95 	bl	80203dc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	e069      	b.n	800ed8a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ecba:	e062      	b.n	800ed82 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800ecbc:	f00d f906 	bl	801becc <sys_arch_protect>
 800ecc0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	7b9b      	ldrb	r3, [r3, #14]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d106      	bne.n	800ecd8 <pbuf_free+0x48>
 800ecca:	4b32      	ldr	r3, [pc, #200]	; (800ed94 <pbuf_free+0x104>)
 800eccc:	f240 22f1 	movw	r2, #753	; 0x2f1
 800ecd0:	4933      	ldr	r1, [pc, #204]	; (800eda0 <pbuf_free+0x110>)
 800ecd2:	4832      	ldr	r0, [pc, #200]	; (800ed9c <pbuf_free+0x10c>)
 800ecd4:	f011 fb82 	bl	80203dc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	7b9b      	ldrb	r3, [r3, #14]
 800ecdc:	3b01      	subs	r3, #1
 800ecde:	b2da      	uxtb	r2, r3
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	739a      	strb	r2, [r3, #14]
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	7b9b      	ldrb	r3, [r3, #14]
 800ece8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800ecea:	69b8      	ldr	r0, [r7, #24]
 800ecec:	f00d f8fc 	bl	801bee8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800ecf0:	7dfb      	ldrb	r3, [r7, #23]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d143      	bne.n	800ed7e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	7b1b      	ldrb	r3, [r3, #12]
 800ed00:	f003 030f 	and.w	r3, r3, #15
 800ed04:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	7b5b      	ldrb	r3, [r3, #13]
 800ed0a:	f003 0302 	and.w	r3, r3, #2
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d011      	beq.n	800ed36 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ed16:	68bb      	ldr	r3, [r7, #8]
 800ed18:	691b      	ldr	r3, [r3, #16]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d106      	bne.n	800ed2c <pbuf_free+0x9c>
 800ed1e:	4b1d      	ldr	r3, [pc, #116]	; (800ed94 <pbuf_free+0x104>)
 800ed20:	f240 22ff 	movw	r2, #767	; 0x2ff
 800ed24:	491f      	ldr	r1, [pc, #124]	; (800eda4 <pbuf_free+0x114>)
 800ed26:	481d      	ldr	r0, [pc, #116]	; (800ed9c <pbuf_free+0x10c>)
 800ed28:	f011 fb58 	bl	80203dc <iprintf>
        pc->custom_free_function(p);
 800ed2c:	68bb      	ldr	r3, [r7, #8]
 800ed2e:	691b      	ldr	r3, [r3, #16]
 800ed30:	6878      	ldr	r0, [r7, #4]
 800ed32:	4798      	blx	r3
 800ed34:	e01d      	b.n	800ed72 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ed36:	7bfb      	ldrb	r3, [r7, #15]
 800ed38:	2b02      	cmp	r3, #2
 800ed3a:	d104      	bne.n	800ed46 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800ed3c:	6879      	ldr	r1, [r7, #4]
 800ed3e:	200e      	movs	r0, #14
 800ed40:	f7fe ffea 	bl	800dd18 <memp_free>
 800ed44:	e015      	b.n	800ed72 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800ed46:	7bfb      	ldrb	r3, [r7, #15]
 800ed48:	2b01      	cmp	r3, #1
 800ed4a:	d104      	bne.n	800ed56 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800ed4c:	6879      	ldr	r1, [r7, #4]
 800ed4e:	200d      	movs	r0, #13
 800ed50:	f7fe ffe2 	bl	800dd18 <memp_free>
 800ed54:	e00d      	b.n	800ed72 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800ed56:	7bfb      	ldrb	r3, [r7, #15]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d103      	bne.n	800ed64 <pbuf_free+0xd4>
          mem_free(p);
 800ed5c:	6878      	ldr	r0, [r7, #4]
 800ed5e:	f7fe fb59 	bl	800d414 <mem_free>
 800ed62:	e006      	b.n	800ed72 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800ed64:	4b0b      	ldr	r3, [pc, #44]	; (800ed94 <pbuf_free+0x104>)
 800ed66:	f240 320f 	movw	r2, #783	; 0x30f
 800ed6a:	490f      	ldr	r1, [pc, #60]	; (800eda8 <pbuf_free+0x118>)
 800ed6c:	480b      	ldr	r0, [pc, #44]	; (800ed9c <pbuf_free+0x10c>)
 800ed6e:	f011 fb35 	bl	80203dc <iprintf>
        }
      }
      count++;
 800ed72:	7ffb      	ldrb	r3, [r7, #31]
 800ed74:	3301      	adds	r3, #1
 800ed76:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800ed78:	693b      	ldr	r3, [r7, #16]
 800ed7a:	607b      	str	r3, [r7, #4]
 800ed7c:	e001      	b.n	800ed82 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800ed7e:	2300      	movs	r3, #0
 800ed80:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d199      	bne.n	800ecbc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ed88:	7ffb      	ldrb	r3, [r7, #31]
}
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	3720      	adds	r7, #32
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}
 800ed92:	bf00      	nop
 800ed94:	08021f5c 	.word	0x08021f5c
 800ed98:	080220c0 	.word	0x080220c0
 800ed9c:	08021fbc 	.word	0x08021fbc
 800eda0:	080220ec 	.word	0x080220ec
 800eda4:	08022104 	.word	0x08022104
 800eda8:	08022128 	.word	0x08022128

0800edac <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800edac:	b480      	push	{r7}
 800edae:	b085      	sub	sp, #20
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800edb4:	2300      	movs	r3, #0
 800edb6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800edb8:	e005      	b.n	800edc6 <pbuf_clen+0x1a>
    ++len;
 800edba:	89fb      	ldrh	r3, [r7, #14]
 800edbc:	3301      	adds	r3, #1
 800edbe:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d1f6      	bne.n	800edba <pbuf_clen+0xe>
  }
  return len;
 800edcc:	89fb      	ldrh	r3, [r7, #14]
}
 800edce:	4618      	mov	r0, r3
 800edd0:	3714      	adds	r7, #20
 800edd2:	46bd      	mov	sp, r7
 800edd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd8:	4770      	bx	lr
	...

0800eddc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b084      	sub	sp, #16
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d016      	beq.n	800ee18 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800edea:	f00d f86f 	bl	801becc <sys_arch_protect>
 800edee:	60f8      	str	r0, [r7, #12]
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	7b9b      	ldrb	r3, [r3, #14]
 800edf4:	3301      	adds	r3, #1
 800edf6:	b2da      	uxtb	r2, r3
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	739a      	strb	r2, [r3, #14]
 800edfc:	68f8      	ldr	r0, [r7, #12]
 800edfe:	f00d f873 	bl	801bee8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	7b9b      	ldrb	r3, [r3, #14]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d106      	bne.n	800ee18 <pbuf_ref+0x3c>
 800ee0a:	4b05      	ldr	r3, [pc, #20]	; (800ee20 <pbuf_ref+0x44>)
 800ee0c:	f240 3242 	movw	r2, #834	; 0x342
 800ee10:	4904      	ldr	r1, [pc, #16]	; (800ee24 <pbuf_ref+0x48>)
 800ee12:	4805      	ldr	r0, [pc, #20]	; (800ee28 <pbuf_ref+0x4c>)
 800ee14:	f011 fae2 	bl	80203dc <iprintf>
  }
}
 800ee18:	bf00      	nop
 800ee1a:	3710      	adds	r7, #16
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bd80      	pop	{r7, pc}
 800ee20:	08021f5c 	.word	0x08021f5c
 800ee24:	0802213c 	.word	0x0802213c
 800ee28:	08021fbc 	.word	0x08021fbc

0800ee2c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b084      	sub	sp, #16
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
 800ee34:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d002      	beq.n	800ee42 <pbuf_cat+0x16>
 800ee3c:	683b      	ldr	r3, [r7, #0]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d107      	bne.n	800ee52 <pbuf_cat+0x26>
 800ee42:	4b20      	ldr	r3, [pc, #128]	; (800eec4 <pbuf_cat+0x98>)
 800ee44:	f240 3259 	movw	r2, #857	; 0x359
 800ee48:	491f      	ldr	r1, [pc, #124]	; (800eec8 <pbuf_cat+0x9c>)
 800ee4a:	4820      	ldr	r0, [pc, #128]	; (800eecc <pbuf_cat+0xa0>)
 800ee4c:	f011 fac6 	bl	80203dc <iprintf>
 800ee50:	e034      	b.n	800eebc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	60fb      	str	r3, [r7, #12]
 800ee56:	e00a      	b.n	800ee6e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	891a      	ldrh	r2, [r3, #8]
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	891b      	ldrh	r3, [r3, #8]
 800ee60:	4413      	add	r3, r2
 800ee62:	b29a      	uxth	r2, r3
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	60fb      	str	r3, [r7, #12]
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d1f0      	bne.n	800ee58 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	891a      	ldrh	r2, [r3, #8]
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	895b      	ldrh	r3, [r3, #10]
 800ee7e:	429a      	cmp	r2, r3
 800ee80:	d006      	beq.n	800ee90 <pbuf_cat+0x64>
 800ee82:	4b10      	ldr	r3, [pc, #64]	; (800eec4 <pbuf_cat+0x98>)
 800ee84:	f240 3262 	movw	r2, #866	; 0x362
 800ee88:	4911      	ldr	r1, [pc, #68]	; (800eed0 <pbuf_cat+0xa4>)
 800ee8a:	4810      	ldr	r0, [pc, #64]	; (800eecc <pbuf_cat+0xa0>)
 800ee8c:	f011 faa6 	bl	80203dc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d006      	beq.n	800eea6 <pbuf_cat+0x7a>
 800ee98:	4b0a      	ldr	r3, [pc, #40]	; (800eec4 <pbuf_cat+0x98>)
 800ee9a:	f240 3263 	movw	r2, #867	; 0x363
 800ee9e:	490d      	ldr	r1, [pc, #52]	; (800eed4 <pbuf_cat+0xa8>)
 800eea0:	480a      	ldr	r0, [pc, #40]	; (800eecc <pbuf_cat+0xa0>)
 800eea2:	f011 fa9b 	bl	80203dc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	891a      	ldrh	r2, [r3, #8]
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	891b      	ldrh	r3, [r3, #8]
 800eeae:	4413      	add	r3, r2
 800eeb0:	b29a      	uxth	r2, r3
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	683a      	ldr	r2, [r7, #0]
 800eeba:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800eebc:	3710      	adds	r7, #16
 800eebe:	46bd      	mov	sp, r7
 800eec0:	bd80      	pop	{r7, pc}
 800eec2:	bf00      	nop
 800eec4:	08021f5c 	.word	0x08021f5c
 800eec8:	08022150 	.word	0x08022150
 800eecc:	08021fbc 	.word	0x08021fbc
 800eed0:	08022188 	.word	0x08022188
 800eed4:	080221b8 	.word	0x080221b8

0800eed8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b082      	sub	sp, #8
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
 800eee0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800eee2:	6839      	ldr	r1, [r7, #0]
 800eee4:	6878      	ldr	r0, [r7, #4]
 800eee6:	f7ff ffa1 	bl	800ee2c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800eeea:	6838      	ldr	r0, [r7, #0]
 800eeec:	f7ff ff76 	bl	800eddc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800eef0:	bf00      	nop
 800eef2:	3708      	adds	r7, #8
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd80      	pop	{r7, pc}

0800eef8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b086      	sub	sp, #24
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
 800ef00:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800ef02:	2300      	movs	r3, #0
 800ef04:	617b      	str	r3, [r7, #20]
 800ef06:	2300      	movs	r3, #0
 800ef08:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d008      	beq.n	800ef22 <pbuf_copy+0x2a>
 800ef10:	683b      	ldr	r3, [r7, #0]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d005      	beq.n	800ef22 <pbuf_copy+0x2a>
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	891a      	ldrh	r2, [r3, #8]
 800ef1a:	683b      	ldr	r3, [r7, #0]
 800ef1c:	891b      	ldrh	r3, [r3, #8]
 800ef1e:	429a      	cmp	r2, r3
 800ef20:	d209      	bcs.n	800ef36 <pbuf_copy+0x3e>
 800ef22:	4b57      	ldr	r3, [pc, #348]	; (800f080 <pbuf_copy+0x188>)
 800ef24:	f240 32c9 	movw	r2, #969	; 0x3c9
 800ef28:	4956      	ldr	r1, [pc, #344]	; (800f084 <pbuf_copy+0x18c>)
 800ef2a:	4857      	ldr	r0, [pc, #348]	; (800f088 <pbuf_copy+0x190>)
 800ef2c:	f011 fa56 	bl	80203dc <iprintf>
 800ef30:	f06f 030f 	mvn.w	r3, #15
 800ef34:	e09f      	b.n	800f076 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	895b      	ldrh	r3, [r3, #10]
 800ef3a:	461a      	mov	r2, r3
 800ef3c:	697b      	ldr	r3, [r7, #20]
 800ef3e:	1ad2      	subs	r2, r2, r3
 800ef40:	683b      	ldr	r3, [r7, #0]
 800ef42:	895b      	ldrh	r3, [r3, #10]
 800ef44:	4619      	mov	r1, r3
 800ef46:	693b      	ldr	r3, [r7, #16]
 800ef48:	1acb      	subs	r3, r1, r3
 800ef4a:	429a      	cmp	r2, r3
 800ef4c:	d306      	bcc.n	800ef5c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800ef4e:	683b      	ldr	r3, [r7, #0]
 800ef50:	895b      	ldrh	r3, [r3, #10]
 800ef52:	461a      	mov	r2, r3
 800ef54:	693b      	ldr	r3, [r7, #16]
 800ef56:	1ad3      	subs	r3, r2, r3
 800ef58:	60fb      	str	r3, [r7, #12]
 800ef5a:	e005      	b.n	800ef68 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	895b      	ldrh	r3, [r3, #10]
 800ef60:	461a      	mov	r2, r3
 800ef62:	697b      	ldr	r3, [r7, #20]
 800ef64:	1ad3      	subs	r3, r2, r3
 800ef66:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	685a      	ldr	r2, [r3, #4]
 800ef6c:	697b      	ldr	r3, [r7, #20]
 800ef6e:	18d0      	adds	r0, r2, r3
 800ef70:	683b      	ldr	r3, [r7, #0]
 800ef72:	685a      	ldr	r2, [r3, #4]
 800ef74:	693b      	ldr	r3, [r7, #16]
 800ef76:	4413      	add	r3, r2
 800ef78:	68fa      	ldr	r2, [r7, #12]
 800ef7a:	4619      	mov	r1, r3
 800ef7c:	f011 f96e 	bl	802025c <memcpy>
    offset_to += len;
 800ef80:	697a      	ldr	r2, [r7, #20]
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	4413      	add	r3, r2
 800ef86:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800ef88:	693a      	ldr	r2, [r7, #16]
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	4413      	add	r3, r2
 800ef8e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	895b      	ldrh	r3, [r3, #10]
 800ef94:	461a      	mov	r2, r3
 800ef96:	697b      	ldr	r3, [r7, #20]
 800ef98:	4293      	cmp	r3, r2
 800ef9a:	d906      	bls.n	800efaa <pbuf_copy+0xb2>
 800ef9c:	4b38      	ldr	r3, [pc, #224]	; (800f080 <pbuf_copy+0x188>)
 800ef9e:	f240 32d9 	movw	r2, #985	; 0x3d9
 800efa2:	493a      	ldr	r1, [pc, #232]	; (800f08c <pbuf_copy+0x194>)
 800efa4:	4838      	ldr	r0, [pc, #224]	; (800f088 <pbuf_copy+0x190>)
 800efa6:	f011 fa19 	bl	80203dc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800efaa:	683b      	ldr	r3, [r7, #0]
 800efac:	895b      	ldrh	r3, [r3, #10]
 800efae:	461a      	mov	r2, r3
 800efb0:	693b      	ldr	r3, [r7, #16]
 800efb2:	4293      	cmp	r3, r2
 800efb4:	d906      	bls.n	800efc4 <pbuf_copy+0xcc>
 800efb6:	4b32      	ldr	r3, [pc, #200]	; (800f080 <pbuf_copy+0x188>)
 800efb8:	f240 32da 	movw	r2, #986	; 0x3da
 800efbc:	4934      	ldr	r1, [pc, #208]	; (800f090 <pbuf_copy+0x198>)
 800efbe:	4832      	ldr	r0, [pc, #200]	; (800f088 <pbuf_copy+0x190>)
 800efc0:	f011 fa0c 	bl	80203dc <iprintf>
    if (offset_from >= p_from->len) {
 800efc4:	683b      	ldr	r3, [r7, #0]
 800efc6:	895b      	ldrh	r3, [r3, #10]
 800efc8:	461a      	mov	r2, r3
 800efca:	693b      	ldr	r3, [r7, #16]
 800efcc:	4293      	cmp	r3, r2
 800efce:	d304      	bcc.n	800efda <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800efd0:	2300      	movs	r3, #0
 800efd2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	895b      	ldrh	r3, [r3, #10]
 800efde:	461a      	mov	r2, r3
 800efe0:	697b      	ldr	r3, [r7, #20]
 800efe2:	4293      	cmp	r3, r2
 800efe4:	d114      	bne.n	800f010 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800efe6:	2300      	movs	r3, #0
 800efe8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d10c      	bne.n	800f010 <pbuf_copy+0x118>
 800eff6:	683b      	ldr	r3, [r7, #0]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d009      	beq.n	800f010 <pbuf_copy+0x118>
 800effc:	4b20      	ldr	r3, [pc, #128]	; (800f080 <pbuf_copy+0x188>)
 800effe:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800f002:	4924      	ldr	r1, [pc, #144]	; (800f094 <pbuf_copy+0x19c>)
 800f004:	4820      	ldr	r0, [pc, #128]	; (800f088 <pbuf_copy+0x190>)
 800f006:	f011 f9e9 	bl	80203dc <iprintf>
 800f00a:	f06f 030f 	mvn.w	r3, #15
 800f00e:	e032      	b.n	800f076 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800f010:	683b      	ldr	r3, [r7, #0]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d013      	beq.n	800f03e <pbuf_copy+0x146>
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	895a      	ldrh	r2, [r3, #10]
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	891b      	ldrh	r3, [r3, #8]
 800f01e:	429a      	cmp	r2, r3
 800f020:	d10d      	bne.n	800f03e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f022:	683b      	ldr	r3, [r7, #0]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d009      	beq.n	800f03e <pbuf_copy+0x146>
 800f02a:	4b15      	ldr	r3, [pc, #84]	; (800f080 <pbuf_copy+0x188>)
 800f02c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800f030:	4919      	ldr	r1, [pc, #100]	; (800f098 <pbuf_copy+0x1a0>)
 800f032:	4815      	ldr	r0, [pc, #84]	; (800f088 <pbuf_copy+0x190>)
 800f034:	f011 f9d2 	bl	80203dc <iprintf>
 800f038:	f06f 0305 	mvn.w	r3, #5
 800f03c:	e01b      	b.n	800f076 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d013      	beq.n	800f06c <pbuf_copy+0x174>
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	895a      	ldrh	r2, [r3, #10]
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	891b      	ldrh	r3, [r3, #8]
 800f04c:	429a      	cmp	r2, r3
 800f04e:	d10d      	bne.n	800f06c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d009      	beq.n	800f06c <pbuf_copy+0x174>
 800f058:	4b09      	ldr	r3, [pc, #36]	; (800f080 <pbuf_copy+0x188>)
 800f05a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800f05e:	490e      	ldr	r1, [pc, #56]	; (800f098 <pbuf_copy+0x1a0>)
 800f060:	4809      	ldr	r0, [pc, #36]	; (800f088 <pbuf_copy+0x190>)
 800f062:	f011 f9bb 	bl	80203dc <iprintf>
 800f066:	f06f 0305 	mvn.w	r3, #5
 800f06a:	e004      	b.n	800f076 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	f47f af61 	bne.w	800ef36 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800f074:	2300      	movs	r3, #0
}
 800f076:	4618      	mov	r0, r3
 800f078:	3718      	adds	r7, #24
 800f07a:	46bd      	mov	sp, r7
 800f07c:	bd80      	pop	{r7, pc}
 800f07e:	bf00      	nop
 800f080:	08021f5c 	.word	0x08021f5c
 800f084:	08022204 	.word	0x08022204
 800f088:	08021fbc 	.word	0x08021fbc
 800f08c:	08022234 	.word	0x08022234
 800f090:	0802224c 	.word	0x0802224c
 800f094:	08022268 	.word	0x08022268
 800f098:	08022278 	.word	0x08022278

0800f09c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b088      	sub	sp, #32
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	60f8      	str	r0, [r7, #12]
 800f0a4:	60b9      	str	r1, [r7, #8]
 800f0a6:	4611      	mov	r1, r2
 800f0a8:	461a      	mov	r2, r3
 800f0aa:	460b      	mov	r3, r1
 800f0ac:	80fb      	strh	r3, [r7, #6]
 800f0ae:	4613      	mov	r3, r2
 800f0b0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d108      	bne.n	800f0d2 <pbuf_copy_partial+0x36>
 800f0c0:	4b2b      	ldr	r3, [pc, #172]	; (800f170 <pbuf_copy_partial+0xd4>)
 800f0c2:	f240 420a 	movw	r2, #1034	; 0x40a
 800f0c6:	492b      	ldr	r1, [pc, #172]	; (800f174 <pbuf_copy_partial+0xd8>)
 800f0c8:	482b      	ldr	r0, [pc, #172]	; (800f178 <pbuf_copy_partial+0xdc>)
 800f0ca:	f011 f987 	bl	80203dc <iprintf>
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	e04a      	b.n	800f168 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800f0d2:	68bb      	ldr	r3, [r7, #8]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d108      	bne.n	800f0ea <pbuf_copy_partial+0x4e>
 800f0d8:	4b25      	ldr	r3, [pc, #148]	; (800f170 <pbuf_copy_partial+0xd4>)
 800f0da:	f240 420b 	movw	r2, #1035	; 0x40b
 800f0de:	4927      	ldr	r1, [pc, #156]	; (800f17c <pbuf_copy_partial+0xe0>)
 800f0e0:	4825      	ldr	r0, [pc, #148]	; (800f178 <pbuf_copy_partial+0xdc>)
 800f0e2:	f011 f97b 	bl	80203dc <iprintf>
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	e03e      	b.n	800f168 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	61fb      	str	r3, [r7, #28]
 800f0ee:	e034      	b.n	800f15a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800f0f0:	88bb      	ldrh	r3, [r7, #4]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d00a      	beq.n	800f10c <pbuf_copy_partial+0x70>
 800f0f6:	69fb      	ldr	r3, [r7, #28]
 800f0f8:	895b      	ldrh	r3, [r3, #10]
 800f0fa:	88ba      	ldrh	r2, [r7, #4]
 800f0fc:	429a      	cmp	r2, r3
 800f0fe:	d305      	bcc.n	800f10c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800f100:	69fb      	ldr	r3, [r7, #28]
 800f102:	895b      	ldrh	r3, [r3, #10]
 800f104:	88ba      	ldrh	r2, [r7, #4]
 800f106:	1ad3      	subs	r3, r2, r3
 800f108:	80bb      	strh	r3, [r7, #4]
 800f10a:	e023      	b.n	800f154 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800f10c:	69fb      	ldr	r3, [r7, #28]
 800f10e:	895a      	ldrh	r2, [r3, #10]
 800f110:	88bb      	ldrh	r3, [r7, #4]
 800f112:	1ad3      	subs	r3, r2, r3
 800f114:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800f116:	8b3a      	ldrh	r2, [r7, #24]
 800f118:	88fb      	ldrh	r3, [r7, #6]
 800f11a:	429a      	cmp	r2, r3
 800f11c:	d901      	bls.n	800f122 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800f11e:	88fb      	ldrh	r3, [r7, #6]
 800f120:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800f122:	8b7b      	ldrh	r3, [r7, #26]
 800f124:	68ba      	ldr	r2, [r7, #8]
 800f126:	18d0      	adds	r0, r2, r3
 800f128:	69fb      	ldr	r3, [r7, #28]
 800f12a:	685a      	ldr	r2, [r3, #4]
 800f12c:	88bb      	ldrh	r3, [r7, #4]
 800f12e:	4413      	add	r3, r2
 800f130:	8b3a      	ldrh	r2, [r7, #24]
 800f132:	4619      	mov	r1, r3
 800f134:	f011 f892 	bl	802025c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800f138:	8afa      	ldrh	r2, [r7, #22]
 800f13a:	8b3b      	ldrh	r3, [r7, #24]
 800f13c:	4413      	add	r3, r2
 800f13e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800f140:	8b7a      	ldrh	r2, [r7, #26]
 800f142:	8b3b      	ldrh	r3, [r7, #24]
 800f144:	4413      	add	r3, r2
 800f146:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800f148:	88fa      	ldrh	r2, [r7, #6]
 800f14a:	8b3b      	ldrh	r3, [r7, #24]
 800f14c:	1ad3      	subs	r3, r2, r3
 800f14e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800f150:	2300      	movs	r3, #0
 800f152:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f154:	69fb      	ldr	r3, [r7, #28]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	61fb      	str	r3, [r7, #28]
 800f15a:	88fb      	ldrh	r3, [r7, #6]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d002      	beq.n	800f166 <pbuf_copy_partial+0xca>
 800f160:	69fb      	ldr	r3, [r7, #28]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d1c4      	bne.n	800f0f0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800f166:	8afb      	ldrh	r3, [r7, #22]
}
 800f168:	4618      	mov	r0, r3
 800f16a:	3720      	adds	r7, #32
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bd80      	pop	{r7, pc}
 800f170:	08021f5c 	.word	0x08021f5c
 800f174:	080222a4 	.word	0x080222a4
 800f178:	08021fbc 	.word	0x08021fbc
 800f17c:	080222c4 	.word	0x080222c4

0800f180 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800f180:	b480      	push	{r7}
 800f182:	b087      	sub	sp, #28
 800f184:	af00      	add	r7, sp, #0
 800f186:	60f8      	str	r0, [r7, #12]
 800f188:	460b      	mov	r3, r1
 800f18a:	607a      	str	r2, [r7, #4]
 800f18c:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800f18e:	897b      	ldrh	r3, [r7, #10]
 800f190:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800f196:	e007      	b.n	800f1a8 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800f198:	693b      	ldr	r3, [r7, #16]
 800f19a:	895b      	ldrh	r3, [r3, #10]
 800f19c:	8afa      	ldrh	r2, [r7, #22]
 800f19e:	1ad3      	subs	r3, r2, r3
 800f1a0:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800f1a2:	693b      	ldr	r3, [r7, #16]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800f1a8:	693b      	ldr	r3, [r7, #16]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d004      	beq.n	800f1b8 <pbuf_skip_const+0x38>
 800f1ae:	693b      	ldr	r3, [r7, #16]
 800f1b0:	895b      	ldrh	r3, [r3, #10]
 800f1b2:	8afa      	ldrh	r2, [r7, #22]
 800f1b4:	429a      	cmp	r2, r3
 800f1b6:	d2ef      	bcs.n	800f198 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d002      	beq.n	800f1c4 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	8afa      	ldrh	r2, [r7, #22]
 800f1c2:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800f1c4:	693b      	ldr	r3, [r7, #16]
}
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	371c      	adds	r7, #28
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d0:	4770      	bx	lr

0800f1d2 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800f1d2:	b580      	push	{r7, lr}
 800f1d4:	b086      	sub	sp, #24
 800f1d6:	af00      	add	r7, sp, #0
 800f1d8:	60f8      	str	r0, [r7, #12]
 800f1da:	460b      	mov	r3, r1
 800f1dc:	607a      	str	r2, [r7, #4]
 800f1de:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 800f1e0:	897b      	ldrh	r3, [r7, #10]
 800f1e2:	687a      	ldr	r2, [r7, #4]
 800f1e4:	4619      	mov	r1, r3
 800f1e6:	68f8      	ldr	r0, [r7, #12]
 800f1e8:	f7ff ffca 	bl	800f180 <pbuf_skip_const>
 800f1ec:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 800f1ee:	697b      	ldr	r3, [r7, #20]
}
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	3718      	adds	r7, #24
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	bd80      	pop	{r7, pc}

0800f1f8 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b088      	sub	sp, #32
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	60f8      	str	r0, [r7, #12]
 800f200:	60b9      	str	r1, [r7, #8]
 800f202:	4613      	mov	r3, r2
 800f204:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800f206:	88fb      	ldrh	r3, [r7, #6]
 800f208:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800f20a:	2300      	movs	r3, #0
 800f20c:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d109      	bne.n	800f228 <pbuf_take+0x30>
 800f214:	4b3a      	ldr	r3, [pc, #232]	; (800f300 <pbuf_take+0x108>)
 800f216:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800f21a:	493a      	ldr	r1, [pc, #232]	; (800f304 <pbuf_take+0x10c>)
 800f21c:	483a      	ldr	r0, [pc, #232]	; (800f308 <pbuf_take+0x110>)
 800f21e:	f011 f8dd 	bl	80203dc <iprintf>
 800f222:	f06f 030f 	mvn.w	r3, #15
 800f226:	e067      	b.n	800f2f8 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800f228:	68bb      	ldr	r3, [r7, #8]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d109      	bne.n	800f242 <pbuf_take+0x4a>
 800f22e:	4b34      	ldr	r3, [pc, #208]	; (800f300 <pbuf_take+0x108>)
 800f230:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800f234:	4935      	ldr	r1, [pc, #212]	; (800f30c <pbuf_take+0x114>)
 800f236:	4834      	ldr	r0, [pc, #208]	; (800f308 <pbuf_take+0x110>)
 800f238:	f011 f8d0 	bl	80203dc <iprintf>
 800f23c:	f06f 030f 	mvn.w	r3, #15
 800f240:	e05a      	b.n	800f2f8 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	891b      	ldrh	r3, [r3, #8]
 800f246:	88fa      	ldrh	r2, [r7, #6]
 800f248:	429a      	cmp	r2, r3
 800f24a:	d909      	bls.n	800f260 <pbuf_take+0x68>
 800f24c:	4b2c      	ldr	r3, [pc, #176]	; (800f300 <pbuf_take+0x108>)
 800f24e:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800f252:	492f      	ldr	r1, [pc, #188]	; (800f310 <pbuf_take+0x118>)
 800f254:	482c      	ldr	r0, [pc, #176]	; (800f308 <pbuf_take+0x110>)
 800f256:	f011 f8c1 	bl	80203dc <iprintf>
 800f25a:	f04f 33ff 	mov.w	r3, #4294967295
 800f25e:	e04b      	b.n	800f2f8 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d007      	beq.n	800f276 <pbuf_take+0x7e>
 800f266:	68bb      	ldr	r3, [r7, #8]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d004      	beq.n	800f276 <pbuf_take+0x7e>
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	891b      	ldrh	r3, [r3, #8]
 800f270:	88fa      	ldrh	r2, [r7, #6]
 800f272:	429a      	cmp	r2, r3
 800f274:	d902      	bls.n	800f27c <pbuf_take+0x84>
    return ERR_ARG;
 800f276:	f06f 030f 	mvn.w	r3, #15
 800f27a:	e03d      	b.n	800f2f8 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	61fb      	str	r3, [r7, #28]
 800f280:	e028      	b.n	800f2d4 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800f282:	69fb      	ldr	r3, [r7, #28]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d106      	bne.n	800f296 <pbuf_take+0x9e>
 800f288:	4b1d      	ldr	r3, [pc, #116]	; (800f300 <pbuf_take+0x108>)
 800f28a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800f28e:	4921      	ldr	r1, [pc, #132]	; (800f314 <pbuf_take+0x11c>)
 800f290:	481d      	ldr	r0, [pc, #116]	; (800f308 <pbuf_take+0x110>)
 800f292:	f011 f8a3 	bl	80203dc <iprintf>
    buf_copy_len = total_copy_len;
 800f296:	697b      	ldr	r3, [r7, #20]
 800f298:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800f29a:	69fb      	ldr	r3, [r7, #28]
 800f29c:	895b      	ldrh	r3, [r3, #10]
 800f29e:	461a      	mov	r2, r3
 800f2a0:	69bb      	ldr	r3, [r7, #24]
 800f2a2:	4293      	cmp	r3, r2
 800f2a4:	d902      	bls.n	800f2ac <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800f2a6:	69fb      	ldr	r3, [r7, #28]
 800f2a8:	895b      	ldrh	r3, [r3, #10]
 800f2aa:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800f2ac:	69fb      	ldr	r3, [r7, #28]
 800f2ae:	6858      	ldr	r0, [r3, #4]
 800f2b0:	68ba      	ldr	r2, [r7, #8]
 800f2b2:	693b      	ldr	r3, [r7, #16]
 800f2b4:	4413      	add	r3, r2
 800f2b6:	69ba      	ldr	r2, [r7, #24]
 800f2b8:	4619      	mov	r1, r3
 800f2ba:	f010 ffcf 	bl	802025c <memcpy>
    total_copy_len -= buf_copy_len;
 800f2be:	697a      	ldr	r2, [r7, #20]
 800f2c0:	69bb      	ldr	r3, [r7, #24]
 800f2c2:	1ad3      	subs	r3, r2, r3
 800f2c4:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800f2c6:	693a      	ldr	r2, [r7, #16]
 800f2c8:	69bb      	ldr	r3, [r7, #24]
 800f2ca:	4413      	add	r3, r2
 800f2cc:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800f2ce:	69fb      	ldr	r3, [r7, #28]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	61fb      	str	r3, [r7, #28]
 800f2d4:	697b      	ldr	r3, [r7, #20]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d1d3      	bne.n	800f282 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800f2da:	697b      	ldr	r3, [r7, #20]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d103      	bne.n	800f2e8 <pbuf_take+0xf0>
 800f2e0:	88fb      	ldrh	r3, [r7, #6]
 800f2e2:	693a      	ldr	r2, [r7, #16]
 800f2e4:	429a      	cmp	r2, r3
 800f2e6:	d006      	beq.n	800f2f6 <pbuf_take+0xfe>
 800f2e8:	4b05      	ldr	r3, [pc, #20]	; (800f300 <pbuf_take+0x108>)
 800f2ea:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800f2ee:	490a      	ldr	r1, [pc, #40]	; (800f318 <pbuf_take+0x120>)
 800f2f0:	4805      	ldr	r0, [pc, #20]	; (800f308 <pbuf_take+0x110>)
 800f2f2:	f011 f873 	bl	80203dc <iprintf>
  return ERR_OK;
 800f2f6:	2300      	movs	r3, #0
}
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	3720      	adds	r7, #32
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd80      	pop	{r7, pc}
 800f300:	08021f5c 	.word	0x08021f5c
 800f304:	08022334 	.word	0x08022334
 800f308:	08021fbc 	.word	0x08021fbc
 800f30c:	0802234c 	.word	0x0802234c
 800f310:	08022368 	.word	0x08022368
 800f314:	08022388 	.word	0x08022388
 800f318:	080223a0 	.word	0x080223a0

0800f31c <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b088      	sub	sp, #32
 800f320:	af00      	add	r7, sp, #0
 800f322:	60f8      	str	r0, [r7, #12]
 800f324:	60b9      	str	r1, [r7, #8]
 800f326:	4611      	mov	r1, r2
 800f328:	461a      	mov	r2, r3
 800f32a:	460b      	mov	r3, r1
 800f32c:	80fb      	strh	r3, [r7, #6]
 800f32e:	4613      	mov	r3, r2
 800f330:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 800f332:	f107 0210 	add.w	r2, r7, #16
 800f336:	88bb      	ldrh	r3, [r7, #4]
 800f338:	4619      	mov	r1, r3
 800f33a:	68f8      	ldr	r0, [r7, #12]
 800f33c:	f7ff ff49 	bl	800f1d2 <pbuf_skip>
 800f340:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 800f342:	69fb      	ldr	r3, [r7, #28]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d047      	beq.n	800f3d8 <pbuf_take_at+0xbc>
 800f348:	69fb      	ldr	r3, [r7, #28]
 800f34a:	891b      	ldrh	r3, [r3, #8]
 800f34c:	461a      	mov	r2, r3
 800f34e:	8a3b      	ldrh	r3, [r7, #16]
 800f350:	4619      	mov	r1, r3
 800f352:	88fb      	ldrh	r3, [r7, #6]
 800f354:	440b      	add	r3, r1
 800f356:	429a      	cmp	r2, r3
 800f358:	db3e      	blt.n	800f3d8 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 800f35a:	88fb      	ldrh	r3, [r7, #6]
 800f35c:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 800f35e:	68bb      	ldr	r3, [r7, #8]
 800f360:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 800f362:	69fb      	ldr	r3, [r7, #28]
 800f364:	895a      	ldrh	r2, [r3, #10]
 800f366:	8a3b      	ldrh	r3, [r7, #16]
 800f368:	429a      	cmp	r2, r3
 800f36a:	d806      	bhi.n	800f37a <pbuf_take_at+0x5e>
 800f36c:	4b1d      	ldr	r3, [pc, #116]	; (800f3e4 <pbuf_take_at+0xc8>)
 800f36e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800f372:	491d      	ldr	r1, [pc, #116]	; (800f3e8 <pbuf_take_at+0xcc>)
 800f374:	481d      	ldr	r0, [pc, #116]	; (800f3ec <pbuf_take_at+0xd0>)
 800f376:	f011 f831 	bl	80203dc <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 800f37a:	69fb      	ldr	r3, [r7, #28]
 800f37c:	895b      	ldrh	r3, [r3, #10]
 800f37e:	461a      	mov	r2, r3
 800f380:	8a3b      	ldrh	r3, [r7, #16]
 800f382:	1ad2      	subs	r2, r2, r3
 800f384:	88fb      	ldrh	r3, [r7, #6]
 800f386:	429a      	cmp	r2, r3
 800f388:	da05      	bge.n	800f396 <pbuf_take_at+0x7a>
 800f38a:	69fb      	ldr	r3, [r7, #28]
 800f38c:	895a      	ldrh	r2, [r3, #10]
 800f38e:	8a3b      	ldrh	r3, [r7, #16]
 800f390:	1ad3      	subs	r3, r2, r3
 800f392:	b29b      	uxth	r3, r3
 800f394:	e000      	b.n	800f398 <pbuf_take_at+0x7c>
 800f396:	88fb      	ldrh	r3, [r7, #6]
 800f398:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 800f39a:	69fb      	ldr	r3, [r7, #28]
 800f39c:	685b      	ldr	r3, [r3, #4]
 800f39e:	8a3a      	ldrh	r2, [r7, #16]
 800f3a0:	4413      	add	r3, r2
 800f3a2:	8a7a      	ldrh	r2, [r7, #18]
 800f3a4:	68b9      	ldr	r1, [r7, #8]
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f010 ff58 	bl	802025c <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 800f3ac:	8b7a      	ldrh	r2, [r7, #26]
 800f3ae:	8a7b      	ldrh	r3, [r7, #18]
 800f3b0:	1ad3      	subs	r3, r2, r3
 800f3b2:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 800f3b4:	8a7b      	ldrh	r3, [r7, #18]
 800f3b6:	697a      	ldr	r2, [r7, #20]
 800f3b8:	4413      	add	r3, r2
 800f3ba:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 800f3bc:	8b7b      	ldrh	r3, [r7, #26]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d008      	beq.n	800f3d4 <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 800f3c2:	69fb      	ldr	r3, [r7, #28]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	8b7a      	ldrh	r2, [r7, #26]
 800f3c8:	6979      	ldr	r1, [r7, #20]
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	f7ff ff14 	bl	800f1f8 <pbuf_take>
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	e003      	b.n	800f3dc <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	e001      	b.n	800f3dc <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 800f3d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f3dc:	4618      	mov	r0, r3
 800f3de:	3720      	adds	r7, #32
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	bd80      	pop	{r7, pc}
 800f3e4:	08021f5c 	.word	0x08021f5c
 800f3e8:	080223b8 	.word	0x080223b8
 800f3ec:	08021fbc 	.word	0x08021fbc

0800f3f0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b084      	sub	sp, #16
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	603a      	str	r2, [r7, #0]
 800f3fa:	71fb      	strb	r3, [r7, #7]
 800f3fc:	460b      	mov	r3, r1
 800f3fe:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	8919      	ldrh	r1, [r3, #8]
 800f404:	88ba      	ldrh	r2, [r7, #4]
 800f406:	79fb      	ldrb	r3, [r7, #7]
 800f408:	4618      	mov	r0, r3
 800f40a:	f7ff f95d 	bl	800e6c8 <pbuf_alloc>
 800f40e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d101      	bne.n	800f41a <pbuf_clone+0x2a>
    return NULL;
 800f416:	2300      	movs	r3, #0
 800f418:	e011      	b.n	800f43e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800f41a:	6839      	ldr	r1, [r7, #0]
 800f41c:	68f8      	ldr	r0, [r7, #12]
 800f41e:	f7ff fd6b 	bl	800eef8 <pbuf_copy>
 800f422:	4603      	mov	r3, r0
 800f424:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800f426:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d006      	beq.n	800f43c <pbuf_clone+0x4c>
 800f42e:	4b06      	ldr	r3, [pc, #24]	; (800f448 <pbuf_clone+0x58>)
 800f430:	f240 5224 	movw	r2, #1316	; 0x524
 800f434:	4905      	ldr	r1, [pc, #20]	; (800f44c <pbuf_clone+0x5c>)
 800f436:	4806      	ldr	r0, [pc, #24]	; (800f450 <pbuf_clone+0x60>)
 800f438:	f010 ffd0 	bl	80203dc <iprintf>
  return q;
 800f43c:	68fb      	ldr	r3, [r7, #12]
}
 800f43e:	4618      	mov	r0, r3
 800f440:	3710      	adds	r7, #16
 800f442:	46bd      	mov	sp, r7
 800f444:	bd80      	pop	{r7, pc}
 800f446:	bf00      	nop
 800f448:	08021f5c 	.word	0x08021f5c
 800f44c:	080223d0 	.word	0x080223d0
 800f450:	08021fbc 	.word	0x08021fbc

0800f454 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b084      	sub	sp, #16
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
 800f45c:	460b      	mov	r3, r1
 800f45e:	807b      	strh	r3, [r7, #2]
 800f460:	4613      	mov	r3, r2
 800f462:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 800f464:	f107 020a 	add.w	r2, r7, #10
 800f468:	887b      	ldrh	r3, [r7, #2]
 800f46a:	4619      	mov	r1, r3
 800f46c:	6878      	ldr	r0, [r7, #4]
 800f46e:	f7ff feb0 	bl	800f1d2 <pbuf_skip>
 800f472:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d00a      	beq.n	800f490 <pbuf_put_at+0x3c>
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	895a      	ldrh	r2, [r3, #10]
 800f47e:	897b      	ldrh	r3, [r7, #10]
 800f480:	429a      	cmp	r2, r3
 800f482:	d905      	bls.n	800f490 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	685b      	ldr	r3, [r3, #4]
 800f488:	897a      	ldrh	r2, [r7, #10]
 800f48a:	4413      	add	r3, r2
 800f48c:	787a      	ldrb	r2, [r7, #1]
 800f48e:	701a      	strb	r2, [r3, #0]
  }
}
 800f490:	bf00      	nop
 800f492:	3710      	adds	r7, #16
 800f494:	46bd      	mov	sp, r7
 800f496:	bd80      	pop	{r7, pc}

0800f498 <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
 800f498:	b480      	push	{r7}
 800f49a:	af00      	add	r7, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
 800f49c:	4b04      	ldr	r3, [pc, #16]	; (800f4b0 <stats_init+0x18>)
 800f49e:	4a05      	ldr	r2, [pc, #20]	; (800f4b4 <stats_init+0x1c>)
 800f4a0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 800f4a4:	bf00      	nop
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ac:	4770      	bx	lr
 800f4ae:	bf00      	nop
 800f4b0:	2000a3ec 	.word	0x2000a3ec
 800f4b4:	080223e4 	.word	0x080223e4

0800f4b8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f4bc:	f011 f832 	bl	8020524 <rand>
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	b29b      	uxth	r3, r3
 800f4c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f4c8:	b29b      	uxth	r3, r3
 800f4ca:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800f4ce:	b29a      	uxth	r2, r3
 800f4d0:	4b01      	ldr	r3, [pc, #4]	; (800f4d8 <tcp_init+0x20>)
 800f4d2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f4d4:	bf00      	nop
 800f4d6:	bd80      	pop	{r7, pc}
 800f4d8:	20000028 	.word	0x20000028

0800f4dc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b082      	sub	sp, #8
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	7d1b      	ldrb	r3, [r3, #20]
 800f4e8:	2b01      	cmp	r3, #1
 800f4ea:	d105      	bne.n	800f4f8 <tcp_free+0x1c>
 800f4ec:	4b06      	ldr	r3, [pc, #24]	; (800f508 <tcp_free+0x2c>)
 800f4ee:	22d4      	movs	r2, #212	; 0xd4
 800f4f0:	4906      	ldr	r1, [pc, #24]	; (800f50c <tcp_free+0x30>)
 800f4f2:	4807      	ldr	r0, [pc, #28]	; (800f510 <tcp_free+0x34>)
 800f4f4:	f010 ff72 	bl	80203dc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800f4f8:	6879      	ldr	r1, [r7, #4]
 800f4fa:	2001      	movs	r0, #1
 800f4fc:	f7fe fc0c 	bl	800dd18 <memp_free>
}
 800f500:	bf00      	nop
 800f502:	3708      	adds	r7, #8
 800f504:	46bd      	mov	sp, r7
 800f506:	bd80      	pop	{r7, pc}
 800f508:	08022460 	.word	0x08022460
 800f50c:	08022490 	.word	0x08022490
 800f510:	080224a4 	.word	0x080224a4

0800f514 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b082      	sub	sp, #8
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	7d1b      	ldrb	r3, [r3, #20]
 800f520:	2b01      	cmp	r3, #1
 800f522:	d105      	bne.n	800f530 <tcp_free_listen+0x1c>
 800f524:	4b06      	ldr	r3, [pc, #24]	; (800f540 <tcp_free_listen+0x2c>)
 800f526:	22df      	movs	r2, #223	; 0xdf
 800f528:	4906      	ldr	r1, [pc, #24]	; (800f544 <tcp_free_listen+0x30>)
 800f52a:	4807      	ldr	r0, [pc, #28]	; (800f548 <tcp_free_listen+0x34>)
 800f52c:	f010 ff56 	bl	80203dc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800f530:	6879      	ldr	r1, [r7, #4]
 800f532:	2002      	movs	r0, #2
 800f534:	f7fe fbf0 	bl	800dd18 <memp_free>
}
 800f538:	bf00      	nop
 800f53a:	3708      	adds	r7, #8
 800f53c:	46bd      	mov	sp, r7
 800f53e:	bd80      	pop	{r7, pc}
 800f540:	08022460 	.word	0x08022460
 800f544:	080224cc 	.word	0x080224cc
 800f548:	080224a4 	.word	0x080224a4

0800f54c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800f550:	f000 fea2 	bl	8010298 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800f554:	4b07      	ldr	r3, [pc, #28]	; (800f574 <tcp_tmr+0x28>)
 800f556:	781b      	ldrb	r3, [r3, #0]
 800f558:	3301      	adds	r3, #1
 800f55a:	b2da      	uxtb	r2, r3
 800f55c:	4b05      	ldr	r3, [pc, #20]	; (800f574 <tcp_tmr+0x28>)
 800f55e:	701a      	strb	r2, [r3, #0]
 800f560:	4b04      	ldr	r3, [pc, #16]	; (800f574 <tcp_tmr+0x28>)
 800f562:	781b      	ldrb	r3, [r3, #0]
 800f564:	f003 0301 	and.w	r3, r3, #1
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d001      	beq.n	800f570 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800f56c:	f000 fb54 	bl	800fc18 <tcp_slowtmr>
  }
}
 800f570:	bf00      	nop
 800f572:	bd80      	pop	{r7, pc}
 800f574:	20006841 	.word	0x20006841

0800f578 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b084      	sub	sp, #16
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
 800f580:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d105      	bne.n	800f594 <tcp_remove_listener+0x1c>
 800f588:	4b0d      	ldr	r3, [pc, #52]	; (800f5c0 <tcp_remove_listener+0x48>)
 800f58a:	22ff      	movs	r2, #255	; 0xff
 800f58c:	490d      	ldr	r1, [pc, #52]	; (800f5c4 <tcp_remove_listener+0x4c>)
 800f58e:	480e      	ldr	r0, [pc, #56]	; (800f5c8 <tcp_remove_listener+0x50>)
 800f590:	f010 ff24 	bl	80203dc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	60fb      	str	r3, [r7, #12]
 800f598:	e00a      	b.n	800f5b0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f59e:	683a      	ldr	r2, [r7, #0]
 800f5a0:	429a      	cmp	r2, r3
 800f5a2:	d102      	bne.n	800f5aa <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	68db      	ldr	r3, [r3, #12]
 800f5ae:	60fb      	str	r3, [r7, #12]
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d1f1      	bne.n	800f59a <tcp_remove_listener+0x22>
    }
  }
}
 800f5b6:	bf00      	nop
 800f5b8:	bf00      	nop
 800f5ba:	3710      	adds	r7, #16
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	bd80      	pop	{r7, pc}
 800f5c0:	08022460 	.word	0x08022460
 800f5c4:	080224e8 	.word	0x080224e8
 800f5c8:	080224a4 	.word	0x080224a4

0800f5cc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b084      	sub	sp, #16
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d106      	bne.n	800f5e8 <tcp_listen_closed+0x1c>
 800f5da:	4b14      	ldr	r3, [pc, #80]	; (800f62c <tcp_listen_closed+0x60>)
 800f5dc:	f240 1211 	movw	r2, #273	; 0x111
 800f5e0:	4913      	ldr	r1, [pc, #76]	; (800f630 <tcp_listen_closed+0x64>)
 800f5e2:	4814      	ldr	r0, [pc, #80]	; (800f634 <tcp_listen_closed+0x68>)
 800f5e4:	f010 fefa 	bl	80203dc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	7d1b      	ldrb	r3, [r3, #20]
 800f5ec:	2b01      	cmp	r3, #1
 800f5ee:	d006      	beq.n	800f5fe <tcp_listen_closed+0x32>
 800f5f0:	4b0e      	ldr	r3, [pc, #56]	; (800f62c <tcp_listen_closed+0x60>)
 800f5f2:	f44f 7289 	mov.w	r2, #274	; 0x112
 800f5f6:	4910      	ldr	r1, [pc, #64]	; (800f638 <tcp_listen_closed+0x6c>)
 800f5f8:	480e      	ldr	r0, [pc, #56]	; (800f634 <tcp_listen_closed+0x68>)
 800f5fa:	f010 feef 	bl	80203dc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f5fe:	2301      	movs	r3, #1
 800f600:	60fb      	str	r3, [r7, #12]
 800f602:	e00b      	b.n	800f61c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800f604:	4a0d      	ldr	r2, [pc, #52]	; (800f63c <tcp_listen_closed+0x70>)
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	6879      	ldr	r1, [r7, #4]
 800f610:	4618      	mov	r0, r3
 800f612:	f7ff ffb1 	bl	800f578 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	3301      	adds	r3, #1
 800f61a:	60fb      	str	r3, [r7, #12]
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	2b03      	cmp	r3, #3
 800f620:	d9f0      	bls.n	800f604 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800f622:	bf00      	nop
 800f624:	bf00      	nop
 800f626:	3710      	adds	r7, #16
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd80      	pop	{r7, pc}
 800f62c:	08022460 	.word	0x08022460
 800f630:	08022510 	.word	0x08022510
 800f634:	080224a4 	.word	0x080224a4
 800f638:	0802251c 	.word	0x0802251c
 800f63c:	08026bac 	.word	0x08026bac

0800f640 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800f640:	b5b0      	push	{r4, r5, r7, lr}
 800f642:	b088      	sub	sp, #32
 800f644:	af04      	add	r7, sp, #16
 800f646:	6078      	str	r0, [r7, #4]
 800f648:	460b      	mov	r3, r1
 800f64a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d106      	bne.n	800f660 <tcp_close_shutdown+0x20>
 800f652:	4b63      	ldr	r3, [pc, #396]	; (800f7e0 <tcp_close_shutdown+0x1a0>)
 800f654:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800f658:	4962      	ldr	r1, [pc, #392]	; (800f7e4 <tcp_close_shutdown+0x1a4>)
 800f65a:	4863      	ldr	r0, [pc, #396]	; (800f7e8 <tcp_close_shutdown+0x1a8>)
 800f65c:	f010 febe 	bl	80203dc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800f660:	78fb      	ldrb	r3, [r7, #3]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d066      	beq.n	800f734 <tcp_close_shutdown+0xf4>
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	7d1b      	ldrb	r3, [r3, #20]
 800f66a:	2b04      	cmp	r3, #4
 800f66c:	d003      	beq.n	800f676 <tcp_close_shutdown+0x36>
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	7d1b      	ldrb	r3, [r3, #20]
 800f672:	2b07      	cmp	r3, #7
 800f674:	d15e      	bne.n	800f734 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d104      	bne.n	800f688 <tcp_close_shutdown+0x48>
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f682:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f686:	d055      	beq.n	800f734 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	8b5b      	ldrh	r3, [r3, #26]
 800f68c:	f003 0310 	and.w	r3, r3, #16
 800f690:	2b00      	cmp	r3, #0
 800f692:	d106      	bne.n	800f6a2 <tcp_close_shutdown+0x62>
 800f694:	4b52      	ldr	r3, [pc, #328]	; (800f7e0 <tcp_close_shutdown+0x1a0>)
 800f696:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800f69a:	4954      	ldr	r1, [pc, #336]	; (800f7ec <tcp_close_shutdown+0x1ac>)
 800f69c:	4852      	ldr	r0, [pc, #328]	; (800f7e8 <tcp_close_shutdown+0x1a8>)
 800f69e:	f010 fe9d 	bl	80203dc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f6aa:	687d      	ldr	r5, [r7, #4]
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	3304      	adds	r3, #4
 800f6b0:	687a      	ldr	r2, [r7, #4]
 800f6b2:	8ad2      	ldrh	r2, [r2, #22]
 800f6b4:	6879      	ldr	r1, [r7, #4]
 800f6b6:	8b09      	ldrh	r1, [r1, #24]
 800f6b8:	9102      	str	r1, [sp, #8]
 800f6ba:	9201      	str	r2, [sp, #4]
 800f6bc:	9300      	str	r3, [sp, #0]
 800f6be:	462b      	mov	r3, r5
 800f6c0:	4622      	mov	r2, r4
 800f6c2:	4601      	mov	r1, r0
 800f6c4:	6878      	ldr	r0, [r7, #4]
 800f6c6:	f004 ff69 	bl	801459c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800f6ca:	6878      	ldr	r0, [r7, #4]
 800f6cc:	f001 f8f0 	bl	80108b0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f6d0:	4b47      	ldr	r3, [pc, #284]	; (800f7f0 <tcp_close_shutdown+0x1b0>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	687a      	ldr	r2, [r7, #4]
 800f6d6:	429a      	cmp	r2, r3
 800f6d8:	d105      	bne.n	800f6e6 <tcp_close_shutdown+0xa6>
 800f6da:	4b45      	ldr	r3, [pc, #276]	; (800f7f0 <tcp_close_shutdown+0x1b0>)
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	68db      	ldr	r3, [r3, #12]
 800f6e0:	4a43      	ldr	r2, [pc, #268]	; (800f7f0 <tcp_close_shutdown+0x1b0>)
 800f6e2:	6013      	str	r3, [r2, #0]
 800f6e4:	e013      	b.n	800f70e <tcp_close_shutdown+0xce>
 800f6e6:	4b42      	ldr	r3, [pc, #264]	; (800f7f0 <tcp_close_shutdown+0x1b0>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	60fb      	str	r3, [r7, #12]
 800f6ec:	e00c      	b.n	800f708 <tcp_close_shutdown+0xc8>
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	68db      	ldr	r3, [r3, #12]
 800f6f2:	687a      	ldr	r2, [r7, #4]
 800f6f4:	429a      	cmp	r2, r3
 800f6f6:	d104      	bne.n	800f702 <tcp_close_shutdown+0xc2>
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	68da      	ldr	r2, [r3, #12]
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	60da      	str	r2, [r3, #12]
 800f700:	e005      	b.n	800f70e <tcp_close_shutdown+0xce>
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	68db      	ldr	r3, [r3, #12]
 800f706:	60fb      	str	r3, [r7, #12]
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d1ef      	bne.n	800f6ee <tcp_close_shutdown+0xae>
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	2200      	movs	r2, #0
 800f712:	60da      	str	r2, [r3, #12]
 800f714:	4b37      	ldr	r3, [pc, #220]	; (800f7f4 <tcp_close_shutdown+0x1b4>)
 800f716:	2201      	movs	r2, #1
 800f718:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800f71a:	4b37      	ldr	r3, [pc, #220]	; (800f7f8 <tcp_close_shutdown+0x1b8>)
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	687a      	ldr	r2, [r7, #4]
 800f720:	429a      	cmp	r2, r3
 800f722:	d102      	bne.n	800f72a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800f724:	f003 fdea 	bl	80132fc <tcp_trigger_input_pcb_close>
 800f728:	e002      	b.n	800f730 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800f72a:	6878      	ldr	r0, [r7, #4]
 800f72c:	f7ff fed6 	bl	800f4dc <tcp_free>
      }
      return ERR_OK;
 800f730:	2300      	movs	r3, #0
 800f732:	e050      	b.n	800f7d6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	7d1b      	ldrb	r3, [r3, #20]
 800f738:	2b02      	cmp	r3, #2
 800f73a:	d03b      	beq.n	800f7b4 <tcp_close_shutdown+0x174>
 800f73c:	2b02      	cmp	r3, #2
 800f73e:	dc44      	bgt.n	800f7ca <tcp_close_shutdown+0x18a>
 800f740:	2b00      	cmp	r3, #0
 800f742:	d002      	beq.n	800f74a <tcp_close_shutdown+0x10a>
 800f744:	2b01      	cmp	r3, #1
 800f746:	d02a      	beq.n	800f79e <tcp_close_shutdown+0x15e>
 800f748:	e03f      	b.n	800f7ca <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	8adb      	ldrh	r3, [r3, #22]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d021      	beq.n	800f796 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f752:	4b2a      	ldr	r3, [pc, #168]	; (800f7fc <tcp_close_shutdown+0x1bc>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	687a      	ldr	r2, [r7, #4]
 800f758:	429a      	cmp	r2, r3
 800f75a:	d105      	bne.n	800f768 <tcp_close_shutdown+0x128>
 800f75c:	4b27      	ldr	r3, [pc, #156]	; (800f7fc <tcp_close_shutdown+0x1bc>)
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	68db      	ldr	r3, [r3, #12]
 800f762:	4a26      	ldr	r2, [pc, #152]	; (800f7fc <tcp_close_shutdown+0x1bc>)
 800f764:	6013      	str	r3, [r2, #0]
 800f766:	e013      	b.n	800f790 <tcp_close_shutdown+0x150>
 800f768:	4b24      	ldr	r3, [pc, #144]	; (800f7fc <tcp_close_shutdown+0x1bc>)
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	60bb      	str	r3, [r7, #8]
 800f76e:	e00c      	b.n	800f78a <tcp_close_shutdown+0x14a>
 800f770:	68bb      	ldr	r3, [r7, #8]
 800f772:	68db      	ldr	r3, [r3, #12]
 800f774:	687a      	ldr	r2, [r7, #4]
 800f776:	429a      	cmp	r2, r3
 800f778:	d104      	bne.n	800f784 <tcp_close_shutdown+0x144>
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	68da      	ldr	r2, [r3, #12]
 800f77e:	68bb      	ldr	r3, [r7, #8]
 800f780:	60da      	str	r2, [r3, #12]
 800f782:	e005      	b.n	800f790 <tcp_close_shutdown+0x150>
 800f784:	68bb      	ldr	r3, [r7, #8]
 800f786:	68db      	ldr	r3, [r3, #12]
 800f788:	60bb      	str	r3, [r7, #8]
 800f78a:	68bb      	ldr	r3, [r7, #8]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d1ef      	bne.n	800f770 <tcp_close_shutdown+0x130>
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	2200      	movs	r2, #0
 800f794:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800f796:	6878      	ldr	r0, [r7, #4]
 800f798:	f7ff fea0 	bl	800f4dc <tcp_free>
      break;
 800f79c:	e01a      	b.n	800f7d4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800f79e:	6878      	ldr	r0, [r7, #4]
 800f7a0:	f7ff ff14 	bl	800f5cc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800f7a4:	6879      	ldr	r1, [r7, #4]
 800f7a6:	4816      	ldr	r0, [pc, #88]	; (800f800 <tcp_close_shutdown+0x1c0>)
 800f7a8:	f001 f8d2 	bl	8010950 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800f7ac:	6878      	ldr	r0, [r7, #4]
 800f7ae:	f7ff feb1 	bl	800f514 <tcp_free_listen>
      break;
 800f7b2:	e00f      	b.n	800f7d4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f7b4:	6879      	ldr	r1, [r7, #4]
 800f7b6:	480e      	ldr	r0, [pc, #56]	; (800f7f0 <tcp_close_shutdown+0x1b0>)
 800f7b8:	f001 f8ca 	bl	8010950 <tcp_pcb_remove>
 800f7bc:	4b0d      	ldr	r3, [pc, #52]	; (800f7f4 <tcp_close_shutdown+0x1b4>)
 800f7be:	2201      	movs	r2, #1
 800f7c0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800f7c2:	6878      	ldr	r0, [r7, #4]
 800f7c4:	f7ff fe8a 	bl	800f4dc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800f7c8:	e004      	b.n	800f7d4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800f7ca:	6878      	ldr	r0, [r7, #4]
 800f7cc:	f000 f81a 	bl	800f804 <tcp_close_shutdown_fin>
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	e000      	b.n	800f7d6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800f7d4:	2300      	movs	r3, #0
}
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	3710      	adds	r7, #16
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bdb0      	pop	{r4, r5, r7, pc}
 800f7de:	bf00      	nop
 800f7e0:	08022460 	.word	0x08022460
 800f7e4:	08022534 	.word	0x08022534
 800f7e8:	080224a4 	.word	0x080224a4
 800f7ec:	08022554 	.word	0x08022554
 800f7f0:	2000a514 	.word	0x2000a514
 800f7f4:	2000a510 	.word	0x2000a510
 800f7f8:	2000a528 	.word	0x2000a528
 800f7fc:	2000a520 	.word	0x2000a520
 800f800:	2000a51c 	.word	0x2000a51c

0800f804 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800f804:	b580      	push	{r7, lr}
 800f806:	b084      	sub	sp, #16
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d106      	bne.n	800f820 <tcp_close_shutdown_fin+0x1c>
 800f812:	4b2e      	ldr	r3, [pc, #184]	; (800f8cc <tcp_close_shutdown_fin+0xc8>)
 800f814:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800f818:	492d      	ldr	r1, [pc, #180]	; (800f8d0 <tcp_close_shutdown_fin+0xcc>)
 800f81a:	482e      	ldr	r0, [pc, #184]	; (800f8d4 <tcp_close_shutdown_fin+0xd0>)
 800f81c:	f010 fdde 	bl	80203dc <iprintf>

  switch (pcb->state) {
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	7d1b      	ldrb	r3, [r3, #20]
 800f824:	2b07      	cmp	r3, #7
 800f826:	d020      	beq.n	800f86a <tcp_close_shutdown_fin+0x66>
 800f828:	2b07      	cmp	r3, #7
 800f82a:	dc2b      	bgt.n	800f884 <tcp_close_shutdown_fin+0x80>
 800f82c:	2b03      	cmp	r3, #3
 800f82e:	d002      	beq.n	800f836 <tcp_close_shutdown_fin+0x32>
 800f830:	2b04      	cmp	r3, #4
 800f832:	d00d      	beq.n	800f850 <tcp_close_shutdown_fin+0x4c>
 800f834:	e026      	b.n	800f884 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800f836:	6878      	ldr	r0, [r7, #4]
 800f838:	f003 ff8c 	bl	8013754 <tcp_send_fin>
 800f83c:	4603      	mov	r3, r0
 800f83e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f840:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d11f      	bne.n	800f888 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	2205      	movs	r2, #5
 800f84c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f84e:	e01b      	b.n	800f888 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800f850:	6878      	ldr	r0, [r7, #4]
 800f852:	f003 ff7f 	bl	8013754 <tcp_send_fin>
 800f856:	4603      	mov	r3, r0
 800f858:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f85a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d114      	bne.n	800f88c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	2205      	movs	r2, #5
 800f866:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f868:	e010      	b.n	800f88c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800f86a:	6878      	ldr	r0, [r7, #4]
 800f86c:	f003 ff72 	bl	8013754 <tcp_send_fin>
 800f870:	4603      	mov	r3, r0
 800f872:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f874:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d109      	bne.n	800f890 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	2209      	movs	r2, #9
 800f880:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f882:	e005      	b.n	800f890 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800f884:	2300      	movs	r3, #0
 800f886:	e01c      	b.n	800f8c2 <tcp_close_shutdown_fin+0xbe>
      break;
 800f888:	bf00      	nop
 800f88a:	e002      	b.n	800f892 <tcp_close_shutdown_fin+0x8e>
      break;
 800f88c:	bf00      	nop
 800f88e:	e000      	b.n	800f892 <tcp_close_shutdown_fin+0x8e>
      break;
 800f890:	bf00      	nop
  }

  if (err == ERR_OK) {
 800f892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d103      	bne.n	800f8a2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800f89a:	6878      	ldr	r0, [r7, #4]
 800f89c:	f004 f8aa 	bl	80139f4 <tcp_output>
 800f8a0:	e00d      	b.n	800f8be <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800f8a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f8a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8aa:	d108      	bne.n	800f8be <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	8b5b      	ldrh	r3, [r3, #26]
 800f8b0:	f043 0308 	orr.w	r3, r3, #8
 800f8b4:	b29a      	uxth	r2, r3
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	e001      	b.n	800f8c2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800f8be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	3710      	adds	r7, #16
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	bd80      	pop	{r7, pc}
 800f8ca:	bf00      	nop
 800f8cc:	08022460 	.word	0x08022460
 800f8d0:	08022510 	.word	0x08022510
 800f8d4:	080224a4 	.word	0x080224a4

0800f8d8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b082      	sub	sp, #8
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d109      	bne.n	800f8fa <tcp_close+0x22>
 800f8e6:	4b0f      	ldr	r3, [pc, #60]	; (800f924 <tcp_close+0x4c>)
 800f8e8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800f8ec:	490e      	ldr	r1, [pc, #56]	; (800f928 <tcp_close+0x50>)
 800f8ee:	480f      	ldr	r0, [pc, #60]	; (800f92c <tcp_close+0x54>)
 800f8f0:	f010 fd74 	bl	80203dc <iprintf>
 800f8f4:	f06f 030f 	mvn.w	r3, #15
 800f8f8:	e00f      	b.n	800f91a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	7d1b      	ldrb	r3, [r3, #20]
 800f8fe:	2b01      	cmp	r3, #1
 800f900:	d006      	beq.n	800f910 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	8b5b      	ldrh	r3, [r3, #26]
 800f906:	f043 0310 	orr.w	r3, r3, #16
 800f90a:	b29a      	uxth	r2, r3
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800f910:	2101      	movs	r1, #1
 800f912:	6878      	ldr	r0, [r7, #4]
 800f914:	f7ff fe94 	bl	800f640 <tcp_close_shutdown>
 800f918:	4603      	mov	r3, r0
}
 800f91a:	4618      	mov	r0, r3
 800f91c:	3708      	adds	r7, #8
 800f91e:	46bd      	mov	sp, r7
 800f920:	bd80      	pop	{r7, pc}
 800f922:	bf00      	nop
 800f924:	08022460 	.word	0x08022460
 800f928:	08022570 	.word	0x08022570
 800f92c:	080224a4 	.word	0x080224a4

0800f930 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800f930:	b580      	push	{r7, lr}
 800f932:	b08e      	sub	sp, #56	; 0x38
 800f934:	af04      	add	r7, sp, #16
 800f936:	6078      	str	r0, [r7, #4]
 800f938:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d107      	bne.n	800f950 <tcp_abandon+0x20>
 800f940:	4b52      	ldr	r3, [pc, #328]	; (800fa8c <tcp_abandon+0x15c>)
 800f942:	f240 223d 	movw	r2, #573	; 0x23d
 800f946:	4952      	ldr	r1, [pc, #328]	; (800fa90 <tcp_abandon+0x160>)
 800f948:	4852      	ldr	r0, [pc, #328]	; (800fa94 <tcp_abandon+0x164>)
 800f94a:	f010 fd47 	bl	80203dc <iprintf>
 800f94e:	e099      	b.n	800fa84 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	7d1b      	ldrb	r3, [r3, #20]
 800f954:	2b01      	cmp	r3, #1
 800f956:	d106      	bne.n	800f966 <tcp_abandon+0x36>
 800f958:	4b4c      	ldr	r3, [pc, #304]	; (800fa8c <tcp_abandon+0x15c>)
 800f95a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800f95e:	494e      	ldr	r1, [pc, #312]	; (800fa98 <tcp_abandon+0x168>)
 800f960:	484c      	ldr	r0, [pc, #304]	; (800fa94 <tcp_abandon+0x164>)
 800f962:	f010 fd3b 	bl	80203dc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	7d1b      	ldrb	r3, [r3, #20]
 800f96a:	2b0a      	cmp	r3, #10
 800f96c:	d107      	bne.n	800f97e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800f96e:	6879      	ldr	r1, [r7, #4]
 800f970:	484a      	ldr	r0, [pc, #296]	; (800fa9c <tcp_abandon+0x16c>)
 800f972:	f000 ffed 	bl	8010950 <tcp_pcb_remove>
    tcp_free(pcb);
 800f976:	6878      	ldr	r0, [r7, #4]
 800f978:	f7ff fdb0 	bl	800f4dc <tcp_free>
 800f97c:	e082      	b.n	800fa84 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800f97e:	2300      	movs	r3, #0
 800f980:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800f982:	2300      	movs	r3, #0
 800f984:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f98a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f990:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f998:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	691b      	ldr	r3, [r3, #16]
 800f99e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	7d1b      	ldrb	r3, [r3, #20]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d126      	bne.n	800f9f6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	8adb      	ldrh	r3, [r3, #22]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d02e      	beq.n	800fa0e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f9b0:	4b3b      	ldr	r3, [pc, #236]	; (800faa0 <tcp_abandon+0x170>)
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	687a      	ldr	r2, [r7, #4]
 800f9b6:	429a      	cmp	r2, r3
 800f9b8:	d105      	bne.n	800f9c6 <tcp_abandon+0x96>
 800f9ba:	4b39      	ldr	r3, [pc, #228]	; (800faa0 <tcp_abandon+0x170>)
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	68db      	ldr	r3, [r3, #12]
 800f9c0:	4a37      	ldr	r2, [pc, #220]	; (800faa0 <tcp_abandon+0x170>)
 800f9c2:	6013      	str	r3, [r2, #0]
 800f9c4:	e013      	b.n	800f9ee <tcp_abandon+0xbe>
 800f9c6:	4b36      	ldr	r3, [pc, #216]	; (800faa0 <tcp_abandon+0x170>)
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	61fb      	str	r3, [r7, #28]
 800f9cc:	e00c      	b.n	800f9e8 <tcp_abandon+0xb8>
 800f9ce:	69fb      	ldr	r3, [r7, #28]
 800f9d0:	68db      	ldr	r3, [r3, #12]
 800f9d2:	687a      	ldr	r2, [r7, #4]
 800f9d4:	429a      	cmp	r2, r3
 800f9d6:	d104      	bne.n	800f9e2 <tcp_abandon+0xb2>
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	68da      	ldr	r2, [r3, #12]
 800f9dc:	69fb      	ldr	r3, [r7, #28]
 800f9de:	60da      	str	r2, [r3, #12]
 800f9e0:	e005      	b.n	800f9ee <tcp_abandon+0xbe>
 800f9e2:	69fb      	ldr	r3, [r7, #28]
 800f9e4:	68db      	ldr	r3, [r3, #12]
 800f9e6:	61fb      	str	r3, [r7, #28]
 800f9e8:	69fb      	ldr	r3, [r7, #28]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d1ef      	bne.n	800f9ce <tcp_abandon+0x9e>
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	60da      	str	r2, [r3, #12]
 800f9f4:	e00b      	b.n	800fa0e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800f9f6:	683b      	ldr	r3, [r7, #0]
 800f9f8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	8adb      	ldrh	r3, [r3, #22]
 800f9fe:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800fa00:	6879      	ldr	r1, [r7, #4]
 800fa02:	4828      	ldr	r0, [pc, #160]	; (800faa4 <tcp_abandon+0x174>)
 800fa04:	f000 ffa4 	bl	8010950 <tcp_pcb_remove>
 800fa08:	4b27      	ldr	r3, [pc, #156]	; (800faa8 <tcp_abandon+0x178>)
 800fa0a:	2201      	movs	r2, #1
 800fa0c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d004      	beq.n	800fa20 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	f000 fd1c 	bl	8010458 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d004      	beq.n	800fa32 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	f000 fd13 	bl	8010458 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d004      	beq.n	800fa44 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa3e:	4618      	mov	r0, r3
 800fa40:	f000 fd0a 	bl	8010458 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800fa44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d00e      	beq.n	800fa68 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800fa4a:	6879      	ldr	r1, [r7, #4]
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	3304      	adds	r3, #4
 800fa50:	687a      	ldr	r2, [r7, #4]
 800fa52:	8b12      	ldrh	r2, [r2, #24]
 800fa54:	9202      	str	r2, [sp, #8]
 800fa56:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fa58:	9201      	str	r2, [sp, #4]
 800fa5a:	9300      	str	r3, [sp, #0]
 800fa5c:	460b      	mov	r3, r1
 800fa5e:	697a      	ldr	r2, [r7, #20]
 800fa60:	69b9      	ldr	r1, [r7, #24]
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	f004 fd9a 	bl	801459c <tcp_rst>
    }
    last_state = pcb->state;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	7d1b      	ldrb	r3, [r3, #20]
 800fa6c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800fa6e:	6878      	ldr	r0, [r7, #4]
 800fa70:	f7ff fd34 	bl	800f4dc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800fa74:	693b      	ldr	r3, [r7, #16]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d004      	beq.n	800fa84 <tcp_abandon+0x154>
 800fa7a:	693b      	ldr	r3, [r7, #16]
 800fa7c:	f06f 010c 	mvn.w	r1, #12
 800fa80:	68f8      	ldr	r0, [r7, #12]
 800fa82:	4798      	blx	r3
  }
}
 800fa84:	3728      	adds	r7, #40	; 0x28
 800fa86:	46bd      	mov	sp, r7
 800fa88:	bd80      	pop	{r7, pc}
 800fa8a:	bf00      	nop
 800fa8c:	08022460 	.word	0x08022460
 800fa90:	080225a4 	.word	0x080225a4
 800fa94:	080224a4 	.word	0x080224a4
 800fa98:	080225c0 	.word	0x080225c0
 800fa9c:	2000a524 	.word	0x2000a524
 800faa0:	2000a520 	.word	0x2000a520
 800faa4:	2000a514 	.word	0x2000a514
 800faa8:	2000a510 	.word	0x2000a510

0800faac <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800faac:	b580      	push	{r7, lr}
 800faae:	b082      	sub	sp, #8
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800fab4:	2101      	movs	r1, #1
 800fab6:	6878      	ldr	r0, [r7, #4]
 800fab8:	f7ff ff3a 	bl	800f930 <tcp_abandon>
}
 800fabc:	bf00      	nop
 800fabe:	3708      	adds	r7, #8
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bd80      	pop	{r7, pc}

0800fac4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b084      	sub	sp, #16
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d106      	bne.n	800fae0 <tcp_update_rcv_ann_wnd+0x1c>
 800fad2:	4b25      	ldr	r3, [pc, #148]	; (800fb68 <tcp_update_rcv_ann_wnd+0xa4>)
 800fad4:	f240 32a6 	movw	r2, #934	; 0x3a6
 800fad8:	4924      	ldr	r1, [pc, #144]	; (800fb6c <tcp_update_rcv_ann_wnd+0xa8>)
 800fada:	4825      	ldr	r0, [pc, #148]	; (800fb70 <tcp_update_rcv_ann_wnd+0xac>)
 800fadc:	f010 fc7e 	bl	80203dc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fae4:	687a      	ldr	r2, [r7, #4]
 800fae6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800fae8:	4413      	add	r3, r2
 800faea:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800faf0:	687a      	ldr	r2, [r7, #4]
 800faf2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800faf4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800faf8:	bf28      	it	cs
 800fafa:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800fafe:	b292      	uxth	r2, r2
 800fb00:	4413      	add	r3, r2
 800fb02:	68fa      	ldr	r2, [r7, #12]
 800fb04:	1ad3      	subs	r3, r2, r3
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	db08      	blt.n	800fb1c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb16:	68fa      	ldr	r2, [r7, #12]
 800fb18:	1ad3      	subs	r3, r2, r3
 800fb1a:	e020      	b.n	800fb5e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb24:	1ad3      	subs	r3, r2, r3
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	dd03      	ble.n	800fb32 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800fb30:	e014      	b.n	800fb5c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb3a:	1ad3      	subs	r3, r2, r3
 800fb3c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800fb3e:	68bb      	ldr	r3, [r7, #8]
 800fb40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb44:	d306      	bcc.n	800fb54 <tcp_update_rcv_ann_wnd+0x90>
 800fb46:	4b08      	ldr	r3, [pc, #32]	; (800fb68 <tcp_update_rcv_ann_wnd+0xa4>)
 800fb48:	f240 32b6 	movw	r2, #950	; 0x3b6
 800fb4c:	4909      	ldr	r1, [pc, #36]	; (800fb74 <tcp_update_rcv_ann_wnd+0xb0>)
 800fb4e:	4808      	ldr	r0, [pc, #32]	; (800fb70 <tcp_update_rcv_ann_wnd+0xac>)
 800fb50:	f010 fc44 	bl	80203dc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800fb54:	68bb      	ldr	r3, [r7, #8]
 800fb56:	b29a      	uxth	r2, r3
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800fb5c:	2300      	movs	r3, #0
  }
}
 800fb5e:	4618      	mov	r0, r3
 800fb60:	3710      	adds	r7, #16
 800fb62:	46bd      	mov	sp, r7
 800fb64:	bd80      	pop	{r7, pc}
 800fb66:	bf00      	nop
 800fb68:	08022460 	.word	0x08022460
 800fb6c:	080226bc 	.word	0x080226bc
 800fb70:	080224a4 	.word	0x080224a4
 800fb74:	080226e0 	.word	0x080226e0

0800fb78 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b084      	sub	sp, #16
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
 800fb80:	460b      	mov	r3, r1
 800fb82:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d107      	bne.n	800fb9a <tcp_recved+0x22>
 800fb8a:	4b1f      	ldr	r3, [pc, #124]	; (800fc08 <tcp_recved+0x90>)
 800fb8c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800fb90:	491e      	ldr	r1, [pc, #120]	; (800fc0c <tcp_recved+0x94>)
 800fb92:	481f      	ldr	r0, [pc, #124]	; (800fc10 <tcp_recved+0x98>)
 800fb94:	f010 fc22 	bl	80203dc <iprintf>
 800fb98:	e032      	b.n	800fc00 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	7d1b      	ldrb	r3, [r3, #20]
 800fb9e:	2b01      	cmp	r3, #1
 800fba0:	d106      	bne.n	800fbb0 <tcp_recved+0x38>
 800fba2:	4b19      	ldr	r3, [pc, #100]	; (800fc08 <tcp_recved+0x90>)
 800fba4:	f240 32d2 	movw	r2, #978	; 0x3d2
 800fba8:	491a      	ldr	r1, [pc, #104]	; (800fc14 <tcp_recved+0x9c>)
 800fbaa:	4819      	ldr	r0, [pc, #100]	; (800fc10 <tcp_recved+0x98>)
 800fbac:	f010 fc16 	bl	80203dc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fbb4:	887b      	ldrh	r3, [r7, #2]
 800fbb6:	4413      	add	r3, r2
 800fbb8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800fbba:	89fb      	ldrh	r3, [r7, #14]
 800fbbc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fbc0:	d804      	bhi.n	800fbcc <tcp_recved+0x54>
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fbc6:	89fa      	ldrh	r2, [r7, #14]
 800fbc8:	429a      	cmp	r2, r3
 800fbca:	d204      	bcs.n	800fbd6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800fbd2:	851a      	strh	r2, [r3, #40]	; 0x28
 800fbd4:	e002      	b.n	800fbdc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	89fa      	ldrh	r2, [r7, #14]
 800fbda:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800fbdc:	6878      	ldr	r0, [r7, #4]
 800fbde:	f7ff ff71 	bl	800fac4 <tcp_update_rcv_ann_wnd>
 800fbe2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800fbe4:	68bb      	ldr	r3, [r7, #8]
 800fbe6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800fbea:	d309      	bcc.n	800fc00 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	8b5b      	ldrh	r3, [r3, #26]
 800fbf0:	f043 0302 	orr.w	r3, r3, #2
 800fbf4:	b29a      	uxth	r2, r3
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fbfa:	6878      	ldr	r0, [r7, #4]
 800fbfc:	f003 fefa 	bl	80139f4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800fc00:	3710      	adds	r7, #16
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd80      	pop	{r7, pc}
 800fc06:	bf00      	nop
 800fc08:	08022460 	.word	0x08022460
 800fc0c:	080226fc 	.word	0x080226fc
 800fc10:	080224a4 	.word	0x080224a4
 800fc14:	08022714 	.word	0x08022714

0800fc18 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800fc18:	b5b0      	push	{r4, r5, r7, lr}
 800fc1a:	b090      	sub	sp, #64	; 0x40
 800fc1c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800fc1e:	2300      	movs	r3, #0
 800fc20:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800fc24:	4b94      	ldr	r3, [pc, #592]	; (800fe78 <tcp_slowtmr+0x260>)
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	3301      	adds	r3, #1
 800fc2a:	4a93      	ldr	r2, [pc, #588]	; (800fe78 <tcp_slowtmr+0x260>)
 800fc2c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800fc2e:	4b93      	ldr	r3, [pc, #588]	; (800fe7c <tcp_slowtmr+0x264>)
 800fc30:	781b      	ldrb	r3, [r3, #0]
 800fc32:	3301      	adds	r3, #1
 800fc34:	b2da      	uxtb	r2, r3
 800fc36:	4b91      	ldr	r3, [pc, #580]	; (800fe7c <tcp_slowtmr+0x264>)
 800fc38:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800fc3e:	4b90      	ldr	r3, [pc, #576]	; (800fe80 <tcp_slowtmr+0x268>)
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800fc44:	e29d      	b.n	8010182 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800fc46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc48:	7d1b      	ldrb	r3, [r3, #20]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d106      	bne.n	800fc5c <tcp_slowtmr+0x44>
 800fc4e:	4b8d      	ldr	r3, [pc, #564]	; (800fe84 <tcp_slowtmr+0x26c>)
 800fc50:	f240 42be 	movw	r2, #1214	; 0x4be
 800fc54:	498c      	ldr	r1, [pc, #560]	; (800fe88 <tcp_slowtmr+0x270>)
 800fc56:	488d      	ldr	r0, [pc, #564]	; (800fe8c <tcp_slowtmr+0x274>)
 800fc58:	f010 fbc0 	bl	80203dc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800fc5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc5e:	7d1b      	ldrb	r3, [r3, #20]
 800fc60:	2b01      	cmp	r3, #1
 800fc62:	d106      	bne.n	800fc72 <tcp_slowtmr+0x5a>
 800fc64:	4b87      	ldr	r3, [pc, #540]	; (800fe84 <tcp_slowtmr+0x26c>)
 800fc66:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800fc6a:	4989      	ldr	r1, [pc, #548]	; (800fe90 <tcp_slowtmr+0x278>)
 800fc6c:	4887      	ldr	r0, [pc, #540]	; (800fe8c <tcp_slowtmr+0x274>)
 800fc6e:	f010 fbb5 	bl	80203dc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800fc72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc74:	7d1b      	ldrb	r3, [r3, #20]
 800fc76:	2b0a      	cmp	r3, #10
 800fc78:	d106      	bne.n	800fc88 <tcp_slowtmr+0x70>
 800fc7a:	4b82      	ldr	r3, [pc, #520]	; (800fe84 <tcp_slowtmr+0x26c>)
 800fc7c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800fc80:	4984      	ldr	r1, [pc, #528]	; (800fe94 <tcp_slowtmr+0x27c>)
 800fc82:	4882      	ldr	r0, [pc, #520]	; (800fe8c <tcp_slowtmr+0x274>)
 800fc84:	f010 fbaa 	bl	80203dc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800fc88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc8a:	7f9a      	ldrb	r2, [r3, #30]
 800fc8c:	4b7b      	ldr	r3, [pc, #492]	; (800fe7c <tcp_slowtmr+0x264>)
 800fc8e:	781b      	ldrb	r3, [r3, #0]
 800fc90:	429a      	cmp	r2, r3
 800fc92:	d105      	bne.n	800fca0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800fc94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc96:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fc98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc9a:	68db      	ldr	r3, [r3, #12]
 800fc9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800fc9e:	e270      	b.n	8010182 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800fca0:	4b76      	ldr	r3, [pc, #472]	; (800fe7c <tcp_slowtmr+0x264>)
 800fca2:	781a      	ldrb	r2, [r3, #0]
 800fca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fca6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800fca8:	2300      	movs	r3, #0
 800fcaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800fcae:	2300      	movs	r3, #0
 800fcb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800fcb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcb6:	7d1b      	ldrb	r3, [r3, #20]
 800fcb8:	2b02      	cmp	r3, #2
 800fcba:	d10a      	bne.n	800fcd2 <tcp_slowtmr+0xba>
 800fcbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fcc2:	2b05      	cmp	r3, #5
 800fcc4:	d905      	bls.n	800fcd2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800fcc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fcca:	3301      	adds	r3, #1
 800fccc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 800fcd0:	e11e      	b.n	800ff10 <tcp_slowtmr+0x2f8>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800fcd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcd4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fcd8:	2b0b      	cmp	r3, #11
 800fcda:	d905      	bls.n	800fce8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800fcdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fce0:	3301      	adds	r3, #1
 800fce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fce6:	e113      	b.n	800ff10 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800fce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d075      	beq.n	800fdde <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800fcf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d006      	beq.n	800fd08 <tcp_slowtmr+0xf0>
 800fcfa:	4b62      	ldr	r3, [pc, #392]	; (800fe84 <tcp_slowtmr+0x26c>)
 800fcfc:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800fd00:	4965      	ldr	r1, [pc, #404]	; (800fe98 <tcp_slowtmr+0x280>)
 800fd02:	4862      	ldr	r0, [pc, #392]	; (800fe8c <tcp_slowtmr+0x274>)
 800fd04:	f010 fb6a 	bl	80203dc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800fd08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d106      	bne.n	800fd1e <tcp_slowtmr+0x106>
 800fd10:	4b5c      	ldr	r3, [pc, #368]	; (800fe84 <tcp_slowtmr+0x26c>)
 800fd12:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800fd16:	4961      	ldr	r1, [pc, #388]	; (800fe9c <tcp_slowtmr+0x284>)
 800fd18:	485c      	ldr	r0, [pc, #368]	; (800fe8c <tcp_slowtmr+0x274>)
 800fd1a:	f010 fb5f 	bl	80203dc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800fd1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd20:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fd24:	2b0b      	cmp	r3, #11
 800fd26:	d905      	bls.n	800fd34 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800fd28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd2c:	3301      	adds	r3, #1
 800fd2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fd32:	e0ed      	b.n	800ff10 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800fd34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd36:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fd3a:	3b01      	subs	r3, #1
 800fd3c:	4a58      	ldr	r2, [pc, #352]	; (800fea0 <tcp_slowtmr+0x288>)
 800fd3e:	5cd3      	ldrb	r3, [r2, r3]
 800fd40:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800fd42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd44:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fd48:	7c7a      	ldrb	r2, [r7, #17]
 800fd4a:	429a      	cmp	r2, r3
 800fd4c:	d907      	bls.n	800fd5e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800fd4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd50:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fd54:	3301      	adds	r3, #1
 800fd56:	b2da      	uxtb	r2, r3
 800fd58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd5a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800fd5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd60:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fd64:	7c7a      	ldrb	r2, [r7, #17]
 800fd66:	429a      	cmp	r2, r3
 800fd68:	f200 80d2 	bhi.w	800ff10 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800fd6c:	2301      	movs	r3, #1
 800fd6e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800fd70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d108      	bne.n	800fd8c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800fd7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fd7c:	f004 fd02 	bl	8014784 <tcp_zero_window_probe>
 800fd80:	4603      	mov	r3, r0
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d014      	beq.n	800fdb0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800fd86:	2300      	movs	r3, #0
 800fd88:	623b      	str	r3, [r7, #32]
 800fd8a:	e011      	b.n	800fdb0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800fd8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fd92:	4619      	mov	r1, r3
 800fd94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fd96:	f003 fb87 	bl	80134a8 <tcp_split_unsent_seg>
 800fd9a:	4603      	mov	r3, r0
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d107      	bne.n	800fdb0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800fda0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fda2:	f003 fe27 	bl	80139f4 <tcp_output>
 800fda6:	4603      	mov	r3, r0
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d101      	bne.n	800fdb0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800fdac:	2300      	movs	r3, #0
 800fdae:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800fdb0:	6a3b      	ldr	r3, [r7, #32]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	f000 80ac 	beq.w	800ff10 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800fdb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdba:	2200      	movs	r2, #0
 800fdbc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800fdc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdc2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fdc6:	2b06      	cmp	r3, #6
 800fdc8:	f200 80a2 	bhi.w	800ff10 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800fdcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdce:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fdd2:	3301      	adds	r3, #1
 800fdd4:	b2da      	uxtb	r2, r3
 800fdd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdd8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800fddc:	e098      	b.n	800ff10 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800fdde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fde0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	db0f      	blt.n	800fe08 <tcp_slowtmr+0x1f0>
 800fde8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdea:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fdee:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fdf2:	4293      	cmp	r3, r2
 800fdf4:	d008      	beq.n	800fe08 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800fdf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdf8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fdfc:	b29b      	uxth	r3, r3
 800fdfe:	3301      	adds	r3, #1
 800fe00:	b29b      	uxth	r3, r3
 800fe02:	b21a      	sxth	r2, r3
 800fe04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe06:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800fe08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe0a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800fe0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe10:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fe14:	429a      	cmp	r2, r3
 800fe16:	db7b      	blt.n	800ff10 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800fe18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fe1a:	f004 f8e9 	bl	8013ff0 <tcp_rexmit_rto_prepare>
 800fe1e:	4603      	mov	r3, r0
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d007      	beq.n	800fe34 <tcp_slowtmr+0x21c>
 800fe24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d171      	bne.n	800ff10 <tcp_slowtmr+0x2f8>
 800fe2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d06d      	beq.n	800ff10 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800fe34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe36:	7d1b      	ldrb	r3, [r3, #20]
 800fe38:	2b02      	cmp	r3, #2
 800fe3a:	d03a      	beq.n	800feb2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800fe3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fe42:	2b0c      	cmp	r3, #12
 800fe44:	bf28      	it	cs
 800fe46:	230c      	movcs	r3, #12
 800fe48:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800fe4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe4c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fe50:	10db      	asrs	r3, r3, #3
 800fe52:	b21b      	sxth	r3, r3
 800fe54:	461a      	mov	r2, r3
 800fe56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe58:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fe5c:	4413      	add	r3, r2
 800fe5e:	7efa      	ldrb	r2, [r7, #27]
 800fe60:	4910      	ldr	r1, [pc, #64]	; (800fea4 <tcp_slowtmr+0x28c>)
 800fe62:	5c8a      	ldrb	r2, [r1, r2]
 800fe64:	4093      	lsls	r3, r2
 800fe66:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800fe68:	697b      	ldr	r3, [r7, #20]
 800fe6a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800fe6e:	4293      	cmp	r3, r2
 800fe70:	dc1a      	bgt.n	800fea8 <tcp_slowtmr+0x290>
 800fe72:	697b      	ldr	r3, [r7, #20]
 800fe74:	b21a      	sxth	r2, r3
 800fe76:	e019      	b.n	800feac <tcp_slowtmr+0x294>
 800fe78:	2000a518 	.word	0x2000a518
 800fe7c:	20006842 	.word	0x20006842
 800fe80:	2000a514 	.word	0x2000a514
 800fe84:	08022460 	.word	0x08022460
 800fe88:	080227a4 	.word	0x080227a4
 800fe8c:	080224a4 	.word	0x080224a4
 800fe90:	080227d0 	.word	0x080227d0
 800fe94:	080227fc 	.word	0x080227fc
 800fe98:	0802282c 	.word	0x0802282c
 800fe9c:	08022860 	.word	0x08022860
 800fea0:	08026ba4 	.word	0x08026ba4
 800fea4:	08026b94 	.word	0x08026b94
 800fea8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800feac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800feb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feb4:	2200      	movs	r2, #0
 800feb6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800feb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800febe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fec0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fec4:	4293      	cmp	r3, r2
 800fec6:	bf28      	it	cs
 800fec8:	4613      	movcs	r3, r2
 800feca:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800fecc:	8a7b      	ldrh	r3, [r7, #18]
 800fece:	085b      	lsrs	r3, r3, #1
 800fed0:	b29a      	uxth	r2, r3
 800fed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fed4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800fed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feda:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fee0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fee2:	005b      	lsls	r3, r3, #1
 800fee4:	b29b      	uxth	r3, r3
 800fee6:	429a      	cmp	r2, r3
 800fee8:	d206      	bcs.n	800fef8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800feea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800feee:	005b      	lsls	r3, r3, #1
 800fef0:	b29a      	uxth	r2, r3
 800fef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fef4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800fef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fefa:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800fefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fefe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800ff02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff04:	2200      	movs	r2, #0
 800ff06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800ff0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ff0c:	f004 f8ea 	bl	80140e4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800ff10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff12:	7d1b      	ldrb	r3, [r3, #20]
 800ff14:	2b06      	cmp	r3, #6
 800ff16:	d111      	bne.n	800ff3c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800ff18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff1a:	8b5b      	ldrh	r3, [r3, #26]
 800ff1c:	f003 0310 	and.w	r3, r3, #16
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d00b      	beq.n	800ff3c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ff24:	4b9c      	ldr	r3, [pc, #624]	; (8010198 <tcp_slowtmr+0x580>)
 800ff26:	681a      	ldr	r2, [r3, #0]
 800ff28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff2a:	6a1b      	ldr	r3, [r3, #32]
 800ff2c:	1ad3      	subs	r3, r2, r3
 800ff2e:	2b28      	cmp	r3, #40	; 0x28
 800ff30:	d904      	bls.n	800ff3c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800ff32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff36:	3301      	adds	r3, #1
 800ff38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ff3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff3e:	7a5b      	ldrb	r3, [r3, #9]
 800ff40:	f003 0308 	and.w	r3, r3, #8
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d04a      	beq.n	800ffde <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800ff48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff4a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ff4c:	2b04      	cmp	r3, #4
 800ff4e:	d003      	beq.n	800ff58 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800ff50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff52:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ff54:	2b07      	cmp	r3, #7
 800ff56:	d142      	bne.n	800ffde <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ff58:	4b8f      	ldr	r3, [pc, #572]	; (8010198 <tcp_slowtmr+0x580>)
 800ff5a:	681a      	ldr	r2, [r3, #0]
 800ff5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff5e:	6a1b      	ldr	r3, [r3, #32]
 800ff60:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ff62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff64:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ff68:	4b8c      	ldr	r3, [pc, #560]	; (801019c <tcp_slowtmr+0x584>)
 800ff6a:	440b      	add	r3, r1
 800ff6c:	498c      	ldr	r1, [pc, #560]	; (80101a0 <tcp_slowtmr+0x588>)
 800ff6e:	fba1 1303 	umull	r1, r3, r1, r3
 800ff72:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ff74:	429a      	cmp	r2, r3
 800ff76:	d90a      	bls.n	800ff8e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800ff78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff7c:	3301      	adds	r3, #1
 800ff7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800ff82:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ff86:	3301      	adds	r3, #1
 800ff88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ff8c:	e027      	b.n	800ffde <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ff8e:	4b82      	ldr	r3, [pc, #520]	; (8010198 <tcp_slowtmr+0x580>)
 800ff90:	681a      	ldr	r2, [r3, #0]
 800ff92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff94:	6a1b      	ldr	r3, [r3, #32]
 800ff96:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ff98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff9a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ff9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffa0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	4b7f      	ldr	r3, [pc, #508]	; (80101a4 <tcp_slowtmr+0x58c>)
 800ffa8:	fb03 f300 	mul.w	r3, r3, r0
 800ffac:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800ffae:	497c      	ldr	r1, [pc, #496]	; (80101a0 <tcp_slowtmr+0x588>)
 800ffb0:	fba1 1303 	umull	r1, r3, r1, r3
 800ffb4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ffb6:	429a      	cmp	r2, r3
 800ffb8:	d911      	bls.n	800ffde <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800ffba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ffbc:	f004 fba2 	bl	8014704 <tcp_keepalive>
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800ffc6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d107      	bne.n	800ffde <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800ffce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffd0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ffd4:	3301      	adds	r3, #1
 800ffd6:	b2da      	uxtb	r2, r3
 800ffd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffda:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800ffde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d011      	beq.n	801000a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800ffe6:	4b6c      	ldr	r3, [pc, #432]	; (8010198 <tcp_slowtmr+0x580>)
 800ffe8:	681a      	ldr	r2, [r3, #0]
 800ffea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffec:	6a1b      	ldr	r3, [r3, #32]
 800ffee:	1ad2      	subs	r2, r2, r3
 800fff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fff2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fff6:	4619      	mov	r1, r3
 800fff8:	460b      	mov	r3, r1
 800fffa:	005b      	lsls	r3, r3, #1
 800fffc:	440b      	add	r3, r1
 800fffe:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8010000:	429a      	cmp	r2, r3
 8010002:	d302      	bcc.n	801000a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8010004:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010006:	f000 fe0d 	bl	8010c24 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801000a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801000c:	7d1b      	ldrb	r3, [r3, #20]
 801000e:	2b03      	cmp	r3, #3
 8010010:	d10b      	bne.n	801002a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010012:	4b61      	ldr	r3, [pc, #388]	; (8010198 <tcp_slowtmr+0x580>)
 8010014:	681a      	ldr	r2, [r3, #0]
 8010016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010018:	6a1b      	ldr	r3, [r3, #32]
 801001a:	1ad3      	subs	r3, r2, r3
 801001c:	2b28      	cmp	r3, #40	; 0x28
 801001e:	d904      	bls.n	801002a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8010020:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010024:	3301      	adds	r3, #1
 8010026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801002a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801002c:	7d1b      	ldrb	r3, [r3, #20]
 801002e:	2b09      	cmp	r3, #9
 8010030:	d10b      	bne.n	801004a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010032:	4b59      	ldr	r3, [pc, #356]	; (8010198 <tcp_slowtmr+0x580>)
 8010034:	681a      	ldr	r2, [r3, #0]
 8010036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010038:	6a1b      	ldr	r3, [r3, #32]
 801003a:	1ad3      	subs	r3, r2, r3
 801003c:	2bf0      	cmp	r3, #240	; 0xf0
 801003e:	d904      	bls.n	801004a <tcp_slowtmr+0x432>
        ++pcb_remove;
 8010040:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010044:	3301      	adds	r3, #1
 8010046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801004a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801004e:	2b00      	cmp	r3, #0
 8010050:	d060      	beq.n	8010114 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8010052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010058:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801005a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801005c:	f000 fc28 	bl	80108b0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8010060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010062:	2b00      	cmp	r3, #0
 8010064:	d010      	beq.n	8010088 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8010066:	4b50      	ldr	r3, [pc, #320]	; (80101a8 <tcp_slowtmr+0x590>)
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801006c:	429a      	cmp	r2, r3
 801006e:	d106      	bne.n	801007e <tcp_slowtmr+0x466>
 8010070:	4b4e      	ldr	r3, [pc, #312]	; (80101ac <tcp_slowtmr+0x594>)
 8010072:	f240 526d 	movw	r2, #1389	; 0x56d
 8010076:	494e      	ldr	r1, [pc, #312]	; (80101b0 <tcp_slowtmr+0x598>)
 8010078:	484e      	ldr	r0, [pc, #312]	; (80101b4 <tcp_slowtmr+0x59c>)
 801007a:	f010 f9af 	bl	80203dc <iprintf>
        prev->next = pcb->next;
 801007e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010080:	68da      	ldr	r2, [r3, #12]
 8010082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010084:	60da      	str	r2, [r3, #12]
 8010086:	e00f      	b.n	80100a8 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8010088:	4b47      	ldr	r3, [pc, #284]	; (80101a8 <tcp_slowtmr+0x590>)
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801008e:	429a      	cmp	r2, r3
 8010090:	d006      	beq.n	80100a0 <tcp_slowtmr+0x488>
 8010092:	4b46      	ldr	r3, [pc, #280]	; (80101ac <tcp_slowtmr+0x594>)
 8010094:	f240 5271 	movw	r2, #1393	; 0x571
 8010098:	4947      	ldr	r1, [pc, #284]	; (80101b8 <tcp_slowtmr+0x5a0>)
 801009a:	4846      	ldr	r0, [pc, #280]	; (80101b4 <tcp_slowtmr+0x59c>)
 801009c:	f010 f99e 	bl	80203dc <iprintf>
        tcp_active_pcbs = pcb->next;
 80100a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100a2:	68db      	ldr	r3, [r3, #12]
 80100a4:	4a40      	ldr	r2, [pc, #256]	; (80101a8 <tcp_slowtmr+0x590>)
 80100a6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80100a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d013      	beq.n	80100d8 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80100b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100b2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80100b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100b6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80100b8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80100ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100bc:	3304      	adds	r3, #4
 80100be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80100c0:	8ad2      	ldrh	r2, [r2, #22]
 80100c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80100c4:	8b09      	ldrh	r1, [r1, #24]
 80100c6:	9102      	str	r1, [sp, #8]
 80100c8:	9201      	str	r2, [sp, #4]
 80100ca:	9300      	str	r3, [sp, #0]
 80100cc:	462b      	mov	r3, r5
 80100ce:	4622      	mov	r2, r4
 80100d0:	4601      	mov	r1, r0
 80100d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80100d4:	f004 fa62 	bl	801459c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80100d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100da:	691b      	ldr	r3, [r3, #16]
 80100dc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80100de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100e0:	7d1b      	ldrb	r3, [r3, #20]
 80100e2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80100e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100e6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80100e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ea:	68db      	ldr	r3, [r3, #12]
 80100ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80100ee:	6838      	ldr	r0, [r7, #0]
 80100f0:	f7ff f9f4 	bl	800f4dc <tcp_free>

      tcp_active_pcbs_changed = 0;
 80100f4:	4b31      	ldr	r3, [pc, #196]	; (80101bc <tcp_slowtmr+0x5a4>)
 80100f6:	2200      	movs	r2, #0
 80100f8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d004      	beq.n	801010a <tcp_slowtmr+0x4f2>
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	f06f 010c 	mvn.w	r1, #12
 8010106:	68b8      	ldr	r0, [r7, #8]
 8010108:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801010a:	4b2c      	ldr	r3, [pc, #176]	; (80101bc <tcp_slowtmr+0x5a4>)
 801010c:	781b      	ldrb	r3, [r3, #0]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d037      	beq.n	8010182 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8010112:	e592      	b.n	800fc3a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8010114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010116:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801011a:	68db      	ldr	r3, [r3, #12]
 801011c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801011e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010120:	7f1b      	ldrb	r3, [r3, #28]
 8010122:	3301      	adds	r3, #1
 8010124:	b2da      	uxtb	r2, r3
 8010126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010128:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801012a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801012c:	7f1a      	ldrb	r2, [r3, #28]
 801012e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010130:	7f5b      	ldrb	r3, [r3, #29]
 8010132:	429a      	cmp	r2, r3
 8010134:	d325      	bcc.n	8010182 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8010136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010138:	2200      	movs	r2, #0
 801013a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 801013c:	4b1f      	ldr	r3, [pc, #124]	; (80101bc <tcp_slowtmr+0x5a4>)
 801013e:	2200      	movs	r2, #0
 8010140:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8010142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010144:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010148:	2b00      	cmp	r3, #0
 801014a:	d00b      	beq.n	8010164 <tcp_slowtmr+0x54c>
 801014c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801014e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010152:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010154:	6912      	ldr	r2, [r2, #16]
 8010156:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010158:	4610      	mov	r0, r2
 801015a:	4798      	blx	r3
 801015c:	4603      	mov	r3, r0
 801015e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8010162:	e002      	b.n	801016a <tcp_slowtmr+0x552>
 8010164:	2300      	movs	r3, #0
 8010166:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801016a:	4b14      	ldr	r3, [pc, #80]	; (80101bc <tcp_slowtmr+0x5a4>)
 801016c:	781b      	ldrb	r3, [r3, #0]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d000      	beq.n	8010174 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8010172:	e562      	b.n	800fc3a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8010174:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8010178:	2b00      	cmp	r3, #0
 801017a:	d102      	bne.n	8010182 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 801017c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801017e:	f003 fc39 	bl	80139f4 <tcp_output>
  while (pcb != NULL) {
 8010182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010184:	2b00      	cmp	r3, #0
 8010186:	f47f ad5e 	bne.w	800fc46 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801018a:	2300      	movs	r3, #0
 801018c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801018e:	4b0c      	ldr	r3, [pc, #48]	; (80101c0 <tcp_slowtmr+0x5a8>)
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8010194:	e069      	b.n	801026a <tcp_slowtmr+0x652>
 8010196:	bf00      	nop
 8010198:	2000a518 	.word	0x2000a518
 801019c:	000a4cb8 	.word	0x000a4cb8
 80101a0:	10624dd3 	.word	0x10624dd3
 80101a4:	000124f8 	.word	0x000124f8
 80101a8:	2000a514 	.word	0x2000a514
 80101ac:	08022460 	.word	0x08022460
 80101b0:	08022898 	.word	0x08022898
 80101b4:	080224a4 	.word	0x080224a4
 80101b8:	080228c4 	.word	0x080228c4
 80101bc:	2000a510 	.word	0x2000a510
 80101c0:	2000a524 	.word	0x2000a524
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80101c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101c6:	7d1b      	ldrb	r3, [r3, #20]
 80101c8:	2b0a      	cmp	r3, #10
 80101ca:	d006      	beq.n	80101da <tcp_slowtmr+0x5c2>
 80101cc:	4b2b      	ldr	r3, [pc, #172]	; (801027c <tcp_slowtmr+0x664>)
 80101ce:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80101d2:	492b      	ldr	r1, [pc, #172]	; (8010280 <tcp_slowtmr+0x668>)
 80101d4:	482b      	ldr	r0, [pc, #172]	; (8010284 <tcp_slowtmr+0x66c>)
 80101d6:	f010 f901 	bl	80203dc <iprintf>
    pcb_remove = 0;
 80101da:	2300      	movs	r3, #0
 80101dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80101e0:	4b29      	ldr	r3, [pc, #164]	; (8010288 <tcp_slowtmr+0x670>)
 80101e2:	681a      	ldr	r2, [r3, #0]
 80101e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101e6:	6a1b      	ldr	r3, [r3, #32]
 80101e8:	1ad3      	subs	r3, r2, r3
 80101ea:	2bf0      	cmp	r3, #240	; 0xf0
 80101ec:	d904      	bls.n	80101f8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80101ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80101f2:	3301      	adds	r3, #1
 80101f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80101f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d02f      	beq.n	8010260 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8010200:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010202:	f000 fb55 	bl	80108b0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8010206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010208:	2b00      	cmp	r3, #0
 801020a:	d010      	beq.n	801022e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801020c:	4b1f      	ldr	r3, [pc, #124]	; (801028c <tcp_slowtmr+0x674>)
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010212:	429a      	cmp	r2, r3
 8010214:	d106      	bne.n	8010224 <tcp_slowtmr+0x60c>
 8010216:	4b19      	ldr	r3, [pc, #100]	; (801027c <tcp_slowtmr+0x664>)
 8010218:	f240 52af 	movw	r2, #1455	; 0x5af
 801021c:	491c      	ldr	r1, [pc, #112]	; (8010290 <tcp_slowtmr+0x678>)
 801021e:	4819      	ldr	r0, [pc, #100]	; (8010284 <tcp_slowtmr+0x66c>)
 8010220:	f010 f8dc 	bl	80203dc <iprintf>
        prev->next = pcb->next;
 8010224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010226:	68da      	ldr	r2, [r3, #12]
 8010228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801022a:	60da      	str	r2, [r3, #12]
 801022c:	e00f      	b.n	801024e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801022e:	4b17      	ldr	r3, [pc, #92]	; (801028c <tcp_slowtmr+0x674>)
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010234:	429a      	cmp	r2, r3
 8010236:	d006      	beq.n	8010246 <tcp_slowtmr+0x62e>
 8010238:	4b10      	ldr	r3, [pc, #64]	; (801027c <tcp_slowtmr+0x664>)
 801023a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801023e:	4915      	ldr	r1, [pc, #84]	; (8010294 <tcp_slowtmr+0x67c>)
 8010240:	4810      	ldr	r0, [pc, #64]	; (8010284 <tcp_slowtmr+0x66c>)
 8010242:	f010 f8cb 	bl	80203dc <iprintf>
        tcp_tw_pcbs = pcb->next;
 8010246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010248:	68db      	ldr	r3, [r3, #12]
 801024a:	4a10      	ldr	r2, [pc, #64]	; (801028c <tcp_slowtmr+0x674>)
 801024c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801024e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010250:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8010252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010254:	68db      	ldr	r3, [r3, #12]
 8010256:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8010258:	69f8      	ldr	r0, [r7, #28]
 801025a:	f7ff f93f 	bl	800f4dc <tcp_free>
 801025e:	e004      	b.n	801026a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8010260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010262:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010266:	68db      	ldr	r3, [r3, #12]
 8010268:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801026a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801026c:	2b00      	cmp	r3, #0
 801026e:	d1a9      	bne.n	80101c4 <tcp_slowtmr+0x5ac>
    }
  }
}
 8010270:	bf00      	nop
 8010272:	bf00      	nop
 8010274:	3730      	adds	r7, #48	; 0x30
 8010276:	46bd      	mov	sp, r7
 8010278:	bdb0      	pop	{r4, r5, r7, pc}
 801027a:	bf00      	nop
 801027c:	08022460 	.word	0x08022460
 8010280:	080228f0 	.word	0x080228f0
 8010284:	080224a4 	.word	0x080224a4
 8010288:	2000a518 	.word	0x2000a518
 801028c:	2000a524 	.word	0x2000a524
 8010290:	08022920 	.word	0x08022920
 8010294:	08022948 	.word	0x08022948

08010298 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8010298:	b580      	push	{r7, lr}
 801029a:	b082      	sub	sp, #8
 801029c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801029e:	4b2d      	ldr	r3, [pc, #180]	; (8010354 <tcp_fasttmr+0xbc>)
 80102a0:	781b      	ldrb	r3, [r3, #0]
 80102a2:	3301      	adds	r3, #1
 80102a4:	b2da      	uxtb	r2, r3
 80102a6:	4b2b      	ldr	r3, [pc, #172]	; (8010354 <tcp_fasttmr+0xbc>)
 80102a8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80102aa:	4b2b      	ldr	r3, [pc, #172]	; (8010358 <tcp_fasttmr+0xc0>)
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80102b0:	e048      	b.n	8010344 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	7f9a      	ldrb	r2, [r3, #30]
 80102b6:	4b27      	ldr	r3, [pc, #156]	; (8010354 <tcp_fasttmr+0xbc>)
 80102b8:	781b      	ldrb	r3, [r3, #0]
 80102ba:	429a      	cmp	r2, r3
 80102bc:	d03f      	beq.n	801033e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80102be:	4b25      	ldr	r3, [pc, #148]	; (8010354 <tcp_fasttmr+0xbc>)
 80102c0:	781a      	ldrb	r2, [r3, #0]
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	8b5b      	ldrh	r3, [r3, #26]
 80102ca:	f003 0301 	and.w	r3, r3, #1
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d010      	beq.n	80102f4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	8b5b      	ldrh	r3, [r3, #26]
 80102d6:	f043 0302 	orr.w	r3, r3, #2
 80102da:	b29a      	uxth	r2, r3
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80102e0:	6878      	ldr	r0, [r7, #4]
 80102e2:	f003 fb87 	bl	80139f4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	8b5b      	ldrh	r3, [r3, #26]
 80102ea:	f023 0303 	bic.w	r3, r3, #3
 80102ee:	b29a      	uxth	r2, r3
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	8b5b      	ldrh	r3, [r3, #26]
 80102f8:	f003 0308 	and.w	r3, r3, #8
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d009      	beq.n	8010314 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	8b5b      	ldrh	r3, [r3, #26]
 8010304:	f023 0308 	bic.w	r3, r3, #8
 8010308:	b29a      	uxth	r2, r3
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801030e:	6878      	ldr	r0, [r7, #4]
 8010310:	f7ff fa78 	bl	800f804 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	68db      	ldr	r3, [r3, #12]
 8010318:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801031e:	2b00      	cmp	r3, #0
 8010320:	d00a      	beq.n	8010338 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8010322:	4b0e      	ldr	r3, [pc, #56]	; (801035c <tcp_fasttmr+0xc4>)
 8010324:	2200      	movs	r2, #0
 8010326:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8010328:	6878      	ldr	r0, [r7, #4]
 801032a:	f000 f819 	bl	8010360 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801032e:	4b0b      	ldr	r3, [pc, #44]	; (801035c <tcp_fasttmr+0xc4>)
 8010330:	781b      	ldrb	r3, [r3, #0]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d000      	beq.n	8010338 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8010336:	e7b8      	b.n	80102aa <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	607b      	str	r3, [r7, #4]
 801033c:	e002      	b.n	8010344 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	68db      	ldr	r3, [r3, #12]
 8010342:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d1b3      	bne.n	80102b2 <tcp_fasttmr+0x1a>
    }
  }
}
 801034a:	bf00      	nop
 801034c:	bf00      	nop
 801034e:	3708      	adds	r7, #8
 8010350:	46bd      	mov	sp, r7
 8010352:	bd80      	pop	{r7, pc}
 8010354:	20006842 	.word	0x20006842
 8010358:	2000a514 	.word	0x2000a514
 801035c:	2000a510 	.word	0x2000a510

08010360 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8010360:	b590      	push	{r4, r7, lr}
 8010362:	b085      	sub	sp, #20
 8010364:	af00      	add	r7, sp, #0
 8010366:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d109      	bne.n	8010382 <tcp_process_refused_data+0x22>
 801036e:	4b37      	ldr	r3, [pc, #220]	; (801044c <tcp_process_refused_data+0xec>)
 8010370:	f240 6209 	movw	r2, #1545	; 0x609
 8010374:	4936      	ldr	r1, [pc, #216]	; (8010450 <tcp_process_refused_data+0xf0>)
 8010376:	4837      	ldr	r0, [pc, #220]	; (8010454 <tcp_process_refused_data+0xf4>)
 8010378:	f010 f830 	bl	80203dc <iprintf>
 801037c:	f06f 030f 	mvn.w	r3, #15
 8010380:	e060      	b.n	8010444 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010386:	7b5b      	ldrb	r3, [r3, #13]
 8010388:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801038e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	2200      	movs	r2, #0
 8010394:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801039c:	2b00      	cmp	r3, #0
 801039e:	d00b      	beq.n	80103b8 <tcp_process_refused_data+0x58>
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	6918      	ldr	r0, [r3, #16]
 80103aa:	2300      	movs	r3, #0
 80103ac:	68ba      	ldr	r2, [r7, #8]
 80103ae:	6879      	ldr	r1, [r7, #4]
 80103b0:	47a0      	blx	r4
 80103b2:	4603      	mov	r3, r0
 80103b4:	73fb      	strb	r3, [r7, #15]
 80103b6:	e007      	b.n	80103c8 <tcp_process_refused_data+0x68>
 80103b8:	2300      	movs	r3, #0
 80103ba:	68ba      	ldr	r2, [r7, #8]
 80103bc:	6879      	ldr	r1, [r7, #4]
 80103be:	2000      	movs	r0, #0
 80103c0:	f000 f8a4 	bl	801050c <tcp_recv_null>
 80103c4:	4603      	mov	r3, r0
 80103c6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80103c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d12a      	bne.n	8010426 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80103d0:	7bbb      	ldrb	r3, [r7, #14]
 80103d2:	f003 0320 	and.w	r3, r3, #32
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d033      	beq.n	8010442 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80103de:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80103e2:	d005      	beq.n	80103f0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80103e8:	3301      	adds	r3, #1
 80103ea:	b29a      	uxth	r2, r3
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d00b      	beq.n	8010412 <tcp_process_refused_data+0xb2>
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	6918      	ldr	r0, [r3, #16]
 8010404:	2300      	movs	r3, #0
 8010406:	2200      	movs	r2, #0
 8010408:	6879      	ldr	r1, [r7, #4]
 801040a:	47a0      	blx	r4
 801040c:	4603      	mov	r3, r0
 801040e:	73fb      	strb	r3, [r7, #15]
 8010410:	e001      	b.n	8010416 <tcp_process_refused_data+0xb6>
 8010412:	2300      	movs	r3, #0
 8010414:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8010416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801041a:	f113 0f0d 	cmn.w	r3, #13
 801041e:	d110      	bne.n	8010442 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8010420:	f06f 030c 	mvn.w	r3, #12
 8010424:	e00e      	b.n	8010444 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8010426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801042a:	f113 0f0d 	cmn.w	r3, #13
 801042e:	d102      	bne.n	8010436 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8010430:	f06f 030c 	mvn.w	r3, #12
 8010434:	e006      	b.n	8010444 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	68ba      	ldr	r2, [r7, #8]
 801043a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 801043c:	f06f 0304 	mvn.w	r3, #4
 8010440:	e000      	b.n	8010444 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8010442:	2300      	movs	r3, #0
}
 8010444:	4618      	mov	r0, r3
 8010446:	3714      	adds	r7, #20
 8010448:	46bd      	mov	sp, r7
 801044a:	bd90      	pop	{r4, r7, pc}
 801044c:	08022460 	.word	0x08022460
 8010450:	08022970 	.word	0x08022970
 8010454:	080224a4 	.word	0x080224a4

08010458 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8010458:	b580      	push	{r7, lr}
 801045a:	b084      	sub	sp, #16
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8010460:	e007      	b.n	8010472 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8010468:	6878      	ldr	r0, [r7, #4]
 801046a:	f000 f80a 	bl	8010482 <tcp_seg_free>
    seg = next;
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d1f4      	bne.n	8010462 <tcp_segs_free+0xa>
  }
}
 8010478:	bf00      	nop
 801047a:	bf00      	nop
 801047c:	3710      	adds	r7, #16
 801047e:	46bd      	mov	sp, r7
 8010480:	bd80      	pop	{r7, pc}

08010482 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8010482:	b580      	push	{r7, lr}
 8010484:	b082      	sub	sp, #8
 8010486:	af00      	add	r7, sp, #0
 8010488:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d00c      	beq.n	80104aa <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	685b      	ldr	r3, [r3, #4]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d004      	beq.n	80104a2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	685b      	ldr	r3, [r3, #4]
 801049c:	4618      	mov	r0, r3
 801049e:	f7fe fbf7 	bl	800ec90 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80104a2:	6879      	ldr	r1, [r7, #4]
 80104a4:	2003      	movs	r0, #3
 80104a6:	f7fd fc37 	bl	800dd18 <memp_free>
  }
}
 80104aa:	bf00      	nop
 80104ac:	3708      	adds	r7, #8
 80104ae:	46bd      	mov	sp, r7
 80104b0:	bd80      	pop	{r7, pc}
	...

080104b4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b084      	sub	sp, #16
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d106      	bne.n	80104d0 <tcp_seg_copy+0x1c>
 80104c2:	4b0f      	ldr	r3, [pc, #60]	; (8010500 <tcp_seg_copy+0x4c>)
 80104c4:	f240 6282 	movw	r2, #1666	; 0x682
 80104c8:	490e      	ldr	r1, [pc, #56]	; (8010504 <tcp_seg_copy+0x50>)
 80104ca:	480f      	ldr	r0, [pc, #60]	; (8010508 <tcp_seg_copy+0x54>)
 80104cc:	f00f ff86 	bl	80203dc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80104d0:	2003      	movs	r0, #3
 80104d2:	f7fd fba5 	bl	800dc20 <memp_malloc>
 80104d6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d101      	bne.n	80104e2 <tcp_seg_copy+0x2e>
    return NULL;
 80104de:	2300      	movs	r3, #0
 80104e0:	e00a      	b.n	80104f8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80104e2:	2214      	movs	r2, #20
 80104e4:	6879      	ldr	r1, [r7, #4]
 80104e6:	68f8      	ldr	r0, [r7, #12]
 80104e8:	f00f feb8 	bl	802025c <memcpy>
  pbuf_ref(cseg->p);
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	685b      	ldr	r3, [r3, #4]
 80104f0:	4618      	mov	r0, r3
 80104f2:	f7fe fc73 	bl	800eddc <pbuf_ref>
  return cseg;
 80104f6:	68fb      	ldr	r3, [r7, #12]
}
 80104f8:	4618      	mov	r0, r3
 80104fa:	3710      	adds	r7, #16
 80104fc:	46bd      	mov	sp, r7
 80104fe:	bd80      	pop	{r7, pc}
 8010500:	08022460 	.word	0x08022460
 8010504:	080229b4 	.word	0x080229b4
 8010508:	080224a4 	.word	0x080224a4

0801050c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801050c:	b580      	push	{r7, lr}
 801050e:	b084      	sub	sp, #16
 8010510:	af00      	add	r7, sp, #0
 8010512:	60f8      	str	r0, [r7, #12]
 8010514:	60b9      	str	r1, [r7, #8]
 8010516:	607a      	str	r2, [r7, #4]
 8010518:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801051a:	68bb      	ldr	r3, [r7, #8]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d109      	bne.n	8010534 <tcp_recv_null+0x28>
 8010520:	4b12      	ldr	r3, [pc, #72]	; (801056c <tcp_recv_null+0x60>)
 8010522:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010526:	4912      	ldr	r1, [pc, #72]	; (8010570 <tcp_recv_null+0x64>)
 8010528:	4812      	ldr	r0, [pc, #72]	; (8010574 <tcp_recv_null+0x68>)
 801052a:	f00f ff57 	bl	80203dc <iprintf>
 801052e:	f06f 030f 	mvn.w	r3, #15
 8010532:	e016      	b.n	8010562 <tcp_recv_null+0x56>

  if (p != NULL) {
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d009      	beq.n	801054e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	891b      	ldrh	r3, [r3, #8]
 801053e:	4619      	mov	r1, r3
 8010540:	68b8      	ldr	r0, [r7, #8]
 8010542:	f7ff fb19 	bl	800fb78 <tcp_recved>
    pbuf_free(p);
 8010546:	6878      	ldr	r0, [r7, #4]
 8010548:	f7fe fba2 	bl	800ec90 <pbuf_free>
 801054c:	e008      	b.n	8010560 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801054e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d104      	bne.n	8010560 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8010556:	68b8      	ldr	r0, [r7, #8]
 8010558:	f7ff f9be 	bl	800f8d8 <tcp_close>
 801055c:	4603      	mov	r3, r0
 801055e:	e000      	b.n	8010562 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8010560:	2300      	movs	r3, #0
}
 8010562:	4618      	mov	r0, r3
 8010564:	3710      	adds	r7, #16
 8010566:	46bd      	mov	sp, r7
 8010568:	bd80      	pop	{r7, pc}
 801056a:	bf00      	nop
 801056c:	08022460 	.word	0x08022460
 8010570:	080229d0 	.word	0x080229d0
 8010574:	080224a4 	.word	0x080224a4

08010578 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8010578:	b580      	push	{r7, lr}
 801057a:	b086      	sub	sp, #24
 801057c:	af00      	add	r7, sp, #0
 801057e:	4603      	mov	r3, r0
 8010580:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8010582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010586:	2b00      	cmp	r3, #0
 8010588:	db01      	blt.n	801058e <tcp_kill_prio+0x16>
 801058a:	79fb      	ldrb	r3, [r7, #7]
 801058c:	e000      	b.n	8010590 <tcp_kill_prio+0x18>
 801058e:	237f      	movs	r3, #127	; 0x7f
 8010590:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8010592:	7afb      	ldrb	r3, [r7, #11]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d034      	beq.n	8010602 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8010598:	7afb      	ldrb	r3, [r7, #11]
 801059a:	3b01      	subs	r3, #1
 801059c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801059e:	2300      	movs	r3, #0
 80105a0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80105a2:	2300      	movs	r3, #0
 80105a4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80105a6:	4b19      	ldr	r3, [pc, #100]	; (801060c <tcp_kill_prio+0x94>)
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	617b      	str	r3, [r7, #20]
 80105ac:	e01f      	b.n	80105ee <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80105ae:	697b      	ldr	r3, [r7, #20]
 80105b0:	7d5b      	ldrb	r3, [r3, #21]
 80105b2:	7afa      	ldrb	r2, [r7, #11]
 80105b4:	429a      	cmp	r2, r3
 80105b6:	d80c      	bhi.n	80105d2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80105b8:	697b      	ldr	r3, [r7, #20]
 80105ba:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80105bc:	7afa      	ldrb	r2, [r7, #11]
 80105be:	429a      	cmp	r2, r3
 80105c0:	d112      	bne.n	80105e8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80105c2:	4b13      	ldr	r3, [pc, #76]	; (8010610 <tcp_kill_prio+0x98>)
 80105c4:	681a      	ldr	r2, [r3, #0]
 80105c6:	697b      	ldr	r3, [r7, #20]
 80105c8:	6a1b      	ldr	r3, [r3, #32]
 80105ca:	1ad3      	subs	r3, r2, r3
 80105cc:	68fa      	ldr	r2, [r7, #12]
 80105ce:	429a      	cmp	r2, r3
 80105d0:	d80a      	bhi.n	80105e8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80105d2:	4b0f      	ldr	r3, [pc, #60]	; (8010610 <tcp_kill_prio+0x98>)
 80105d4:	681a      	ldr	r2, [r3, #0]
 80105d6:	697b      	ldr	r3, [r7, #20]
 80105d8:	6a1b      	ldr	r3, [r3, #32]
 80105da:	1ad3      	subs	r3, r2, r3
 80105dc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80105de:	697b      	ldr	r3, [r7, #20]
 80105e0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80105e2:	697b      	ldr	r3, [r7, #20]
 80105e4:	7d5b      	ldrb	r3, [r3, #21]
 80105e6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80105e8:	697b      	ldr	r3, [r7, #20]
 80105ea:	68db      	ldr	r3, [r3, #12]
 80105ec:	617b      	str	r3, [r7, #20]
 80105ee:	697b      	ldr	r3, [r7, #20]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d1dc      	bne.n	80105ae <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80105f4:	693b      	ldr	r3, [r7, #16]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d004      	beq.n	8010604 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80105fa:	6938      	ldr	r0, [r7, #16]
 80105fc:	f7ff fa56 	bl	800faac <tcp_abort>
 8010600:	e000      	b.n	8010604 <tcp_kill_prio+0x8c>
    return;
 8010602:	bf00      	nop
  }
}
 8010604:	3718      	adds	r7, #24
 8010606:	46bd      	mov	sp, r7
 8010608:	bd80      	pop	{r7, pc}
 801060a:	bf00      	nop
 801060c:	2000a514 	.word	0x2000a514
 8010610:	2000a518 	.word	0x2000a518

08010614 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b086      	sub	sp, #24
 8010618:	af00      	add	r7, sp, #0
 801061a:	4603      	mov	r3, r0
 801061c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801061e:	79fb      	ldrb	r3, [r7, #7]
 8010620:	2b08      	cmp	r3, #8
 8010622:	d009      	beq.n	8010638 <tcp_kill_state+0x24>
 8010624:	79fb      	ldrb	r3, [r7, #7]
 8010626:	2b09      	cmp	r3, #9
 8010628:	d006      	beq.n	8010638 <tcp_kill_state+0x24>
 801062a:	4b1a      	ldr	r3, [pc, #104]	; (8010694 <tcp_kill_state+0x80>)
 801062c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8010630:	4919      	ldr	r1, [pc, #100]	; (8010698 <tcp_kill_state+0x84>)
 8010632:	481a      	ldr	r0, [pc, #104]	; (801069c <tcp_kill_state+0x88>)
 8010634:	f00f fed2 	bl	80203dc <iprintf>

  inactivity = 0;
 8010638:	2300      	movs	r3, #0
 801063a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801063c:	2300      	movs	r3, #0
 801063e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010640:	4b17      	ldr	r3, [pc, #92]	; (80106a0 <tcp_kill_state+0x8c>)
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	617b      	str	r3, [r7, #20]
 8010646:	e017      	b.n	8010678 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8010648:	697b      	ldr	r3, [r7, #20]
 801064a:	7d1b      	ldrb	r3, [r3, #20]
 801064c:	79fa      	ldrb	r2, [r7, #7]
 801064e:	429a      	cmp	r2, r3
 8010650:	d10f      	bne.n	8010672 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010652:	4b14      	ldr	r3, [pc, #80]	; (80106a4 <tcp_kill_state+0x90>)
 8010654:	681a      	ldr	r2, [r3, #0]
 8010656:	697b      	ldr	r3, [r7, #20]
 8010658:	6a1b      	ldr	r3, [r3, #32]
 801065a:	1ad3      	subs	r3, r2, r3
 801065c:	68fa      	ldr	r2, [r7, #12]
 801065e:	429a      	cmp	r2, r3
 8010660:	d807      	bhi.n	8010672 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8010662:	4b10      	ldr	r3, [pc, #64]	; (80106a4 <tcp_kill_state+0x90>)
 8010664:	681a      	ldr	r2, [r3, #0]
 8010666:	697b      	ldr	r3, [r7, #20]
 8010668:	6a1b      	ldr	r3, [r3, #32]
 801066a:	1ad3      	subs	r3, r2, r3
 801066c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801066e:	697b      	ldr	r3, [r7, #20]
 8010670:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010672:	697b      	ldr	r3, [r7, #20]
 8010674:	68db      	ldr	r3, [r3, #12]
 8010676:	617b      	str	r3, [r7, #20]
 8010678:	697b      	ldr	r3, [r7, #20]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d1e4      	bne.n	8010648 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801067e:	693b      	ldr	r3, [r7, #16]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d003      	beq.n	801068c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010684:	2100      	movs	r1, #0
 8010686:	6938      	ldr	r0, [r7, #16]
 8010688:	f7ff f952 	bl	800f930 <tcp_abandon>
  }
}
 801068c:	bf00      	nop
 801068e:	3718      	adds	r7, #24
 8010690:	46bd      	mov	sp, r7
 8010692:	bd80      	pop	{r7, pc}
 8010694:	08022460 	.word	0x08022460
 8010698:	080229ec 	.word	0x080229ec
 801069c:	080224a4 	.word	0x080224a4
 80106a0:	2000a514 	.word	0x2000a514
 80106a4:	2000a518 	.word	0x2000a518

080106a8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b084      	sub	sp, #16
 80106ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80106ae:	2300      	movs	r3, #0
 80106b0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80106b2:	2300      	movs	r3, #0
 80106b4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80106b6:	4b12      	ldr	r3, [pc, #72]	; (8010700 <tcp_kill_timewait+0x58>)
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	60fb      	str	r3, [r7, #12]
 80106bc:	e012      	b.n	80106e4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80106be:	4b11      	ldr	r3, [pc, #68]	; (8010704 <tcp_kill_timewait+0x5c>)
 80106c0:	681a      	ldr	r2, [r3, #0]
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	6a1b      	ldr	r3, [r3, #32]
 80106c6:	1ad3      	subs	r3, r2, r3
 80106c8:	687a      	ldr	r2, [r7, #4]
 80106ca:	429a      	cmp	r2, r3
 80106cc:	d807      	bhi.n	80106de <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80106ce:	4b0d      	ldr	r3, [pc, #52]	; (8010704 <tcp_kill_timewait+0x5c>)
 80106d0:	681a      	ldr	r2, [r3, #0]
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	6a1b      	ldr	r3, [r3, #32]
 80106d6:	1ad3      	subs	r3, r2, r3
 80106d8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	68db      	ldr	r3, [r3, #12]
 80106e2:	60fb      	str	r3, [r7, #12]
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d1e9      	bne.n	80106be <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80106ea:	68bb      	ldr	r3, [r7, #8]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d002      	beq.n	80106f6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80106f0:	68b8      	ldr	r0, [r7, #8]
 80106f2:	f7ff f9db 	bl	800faac <tcp_abort>
  }
}
 80106f6:	bf00      	nop
 80106f8:	3710      	adds	r7, #16
 80106fa:	46bd      	mov	sp, r7
 80106fc:	bd80      	pop	{r7, pc}
 80106fe:	bf00      	nop
 8010700:	2000a524 	.word	0x2000a524
 8010704:	2000a518 	.word	0x2000a518

08010708 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b082      	sub	sp, #8
 801070c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801070e:	4b10      	ldr	r3, [pc, #64]	; (8010750 <tcp_handle_closepend+0x48>)
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010714:	e014      	b.n	8010740 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	68db      	ldr	r3, [r3, #12]
 801071a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	8b5b      	ldrh	r3, [r3, #26]
 8010720:	f003 0308 	and.w	r3, r3, #8
 8010724:	2b00      	cmp	r3, #0
 8010726:	d009      	beq.n	801073c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	8b5b      	ldrh	r3, [r3, #26]
 801072c:	f023 0308 	bic.w	r3, r3, #8
 8010730:	b29a      	uxth	r2, r3
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8010736:	6878      	ldr	r0, [r7, #4]
 8010738:	f7ff f864 	bl	800f804 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801073c:	683b      	ldr	r3, [r7, #0]
 801073e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d1e7      	bne.n	8010716 <tcp_handle_closepend+0xe>
  }
}
 8010746:	bf00      	nop
 8010748:	bf00      	nop
 801074a:	3708      	adds	r7, #8
 801074c:	46bd      	mov	sp, r7
 801074e:	bd80      	pop	{r7, pc}
 8010750:	2000a514 	.word	0x2000a514

08010754 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010754:	b580      	push	{r7, lr}
 8010756:	b084      	sub	sp, #16
 8010758:	af00      	add	r7, sp, #0
 801075a:	4603      	mov	r3, r0
 801075c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801075e:	2001      	movs	r0, #1
 8010760:	f7fd fa5e 	bl	800dc20 <memp_malloc>
 8010764:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d14e      	bne.n	801080a <tcp_alloc+0xb6>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801076c:	f7ff ffcc 	bl	8010708 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8010770:	f7ff ff9a 	bl	80106a8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010774:	2001      	movs	r0, #1
 8010776:	f7fd fa53 	bl	800dc20 <memp_malloc>
 801077a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d139      	bne.n	80107f6 <tcp_alloc+0xa2>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8010782:	2009      	movs	r0, #9
 8010784:	f7ff ff46 	bl	8010614 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010788:	2001      	movs	r0, #1
 801078a:	f7fd fa49 	bl	800dc20 <memp_malloc>
 801078e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d125      	bne.n	80107e2 <tcp_alloc+0x8e>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8010796:	2008      	movs	r0, #8
 8010798:	f7ff ff3c 	bl	8010614 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801079c:	2001      	movs	r0, #1
 801079e:	f7fd fa3f 	bl	800dc20 <memp_malloc>
 80107a2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d111      	bne.n	80107ce <tcp_alloc+0x7a>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80107aa:	79fb      	ldrb	r3, [r7, #7]
 80107ac:	4618      	mov	r0, r3
 80107ae:	f7ff fee3 	bl	8010578 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80107b2:	2001      	movs	r0, #1
 80107b4:	f7fd fa34 	bl	800dc20 <memp_malloc>
 80107b8:	60f8      	str	r0, [r7, #12]
          if (pcb != NULL) {
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d006      	beq.n	80107ce <tcp_alloc+0x7a>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80107c0:	4b36      	ldr	r3, [pc, #216]	; (801089c <tcp_alloc+0x148>)
 80107c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80107c6:	889a      	ldrh	r2, [r3, #4]
 80107c8:	3a01      	subs	r2, #1
 80107ca:	b292      	uxth	r2, r2
 80107cc:	809a      	strh	r2, [r3, #4]
          }
        }
        if (pcb != NULL) {
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d006      	beq.n	80107e2 <tcp_alloc+0x8e>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80107d4:	4b31      	ldr	r3, [pc, #196]	; (801089c <tcp_alloc+0x148>)
 80107d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80107da:	889a      	ldrh	r2, [r3, #4]
 80107dc:	3a01      	subs	r2, #1
 80107de:	b292      	uxth	r2, r2
 80107e0:	809a      	strh	r2, [r3, #4]
        }
      }
      if (pcb != NULL) {
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d006      	beq.n	80107f6 <tcp_alloc+0xa2>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80107e8:	4b2c      	ldr	r3, [pc, #176]	; (801089c <tcp_alloc+0x148>)
 80107ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80107ee:	889a      	ldrh	r2, [r3, #4]
 80107f0:	3a01      	subs	r2, #1
 80107f2:	b292      	uxth	r2, r2
 80107f4:	809a      	strh	r2, [r3, #4]
      }
    }
    if (pcb != NULL) {
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d006      	beq.n	801080a <tcp_alloc+0xb6>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80107fc:	4b27      	ldr	r3, [pc, #156]	; (801089c <tcp_alloc+0x148>)
 80107fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010802:	889a      	ldrh	r2, [r3, #4]
 8010804:	3a01      	subs	r2, #1
 8010806:	b292      	uxth	r2, r2
 8010808:	809a      	strh	r2, [r3, #4]
    }
  }
  if (pcb != NULL) {
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d03f      	beq.n	8010890 <tcp_alloc+0x13c>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8010810:	229c      	movs	r2, #156	; 0x9c
 8010812:	2100      	movs	r1, #0
 8010814:	68f8      	ldr	r0, [r7, #12]
 8010816:	f00f fd2f 	bl	8020278 <memset>
    pcb->prio = prio;
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	79fa      	ldrb	r2, [r7, #7]
 801081e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010826:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8010830:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	22ff      	movs	r2, #255	; 0xff
 801083e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010846:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	2206      	movs	r2, #6
 801084c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	2206      	movs	r2, #6
 8010854:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801085c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	2201      	movs	r2, #1
 8010862:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8010866:	4b0e      	ldr	r3, [pc, #56]	; (80108a0 <tcp_alloc+0x14c>)
 8010868:	681a      	ldr	r2, [r3, #0]
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801086e:	4b0d      	ldr	r3, [pc, #52]	; (80108a4 <tcp_alloc+0x150>)
 8010870:	781a      	ldrb	r2, [r3, #0]
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801087c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	4a09      	ldr	r2, [pc, #36]	; (80108a8 <tcp_alloc+0x154>)
 8010884:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	4a08      	ldr	r2, [pc, #32]	; (80108ac <tcp_alloc+0x158>)
 801088c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8010890:	68fb      	ldr	r3, [r7, #12]
}
 8010892:	4618      	mov	r0, r3
 8010894:	3710      	adds	r7, #16
 8010896:	46bd      	mov	sp, r7
 8010898:	bd80      	pop	{r7, pc}
 801089a:	bf00      	nop
 801089c:	2000a3ec 	.word	0x2000a3ec
 80108a0:	2000a518 	.word	0x2000a518
 80108a4:	20006842 	.word	0x20006842
 80108a8:	0801050d 	.word	0x0801050d
 80108ac:	006ddd00 	.word	0x006ddd00

080108b0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b082      	sub	sp, #8
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d107      	bne.n	80108ce <tcp_pcb_purge+0x1e>
 80108be:	4b21      	ldr	r3, [pc, #132]	; (8010944 <tcp_pcb_purge+0x94>)
 80108c0:	f640 0251 	movw	r2, #2129	; 0x851
 80108c4:	4920      	ldr	r1, [pc, #128]	; (8010948 <tcp_pcb_purge+0x98>)
 80108c6:	4821      	ldr	r0, [pc, #132]	; (801094c <tcp_pcb_purge+0x9c>)
 80108c8:	f00f fd88 	bl	80203dc <iprintf>
 80108cc:	e037      	b.n	801093e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	7d1b      	ldrb	r3, [r3, #20]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d033      	beq.n	801093e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80108da:	2b0a      	cmp	r3, #10
 80108dc:	d02f      	beq.n	801093e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80108e2:	2b01      	cmp	r3, #1
 80108e4:	d02b      	beq.n	801093e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d007      	beq.n	80108fe <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80108f2:	4618      	mov	r0, r3
 80108f4:	f7fe f9cc 	bl	800ec90 <pbuf_free>
      pcb->refused_data = NULL;
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	2200      	movs	r2, #0
 80108fc:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010902:	2b00      	cmp	r3, #0
 8010904:	d002      	beq.n	801090c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8010906:	6878      	ldr	r0, [r7, #4]
 8010908:	f000 f98c 	bl	8010c24 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010912:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010918:	4618      	mov	r0, r3
 801091a:	f7ff fd9d 	bl	8010458 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010922:	4618      	mov	r0, r3
 8010924:	f7ff fd98 	bl	8010458 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	2200      	movs	r2, #0
 801092c:	66da      	str	r2, [r3, #108]	; 0x6c
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	2200      	movs	r2, #0
 801093a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801093e:	3708      	adds	r7, #8
 8010940:	46bd      	mov	sp, r7
 8010942:	bd80      	pop	{r7, pc}
 8010944:	08022460 	.word	0x08022460
 8010948:	08022aac 	.word	0x08022aac
 801094c:	080224a4 	.word	0x080224a4

08010950 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b084      	sub	sp, #16
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
 8010958:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801095a:	683b      	ldr	r3, [r7, #0]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d106      	bne.n	801096e <tcp_pcb_remove+0x1e>
 8010960:	4b3e      	ldr	r3, [pc, #248]	; (8010a5c <tcp_pcb_remove+0x10c>)
 8010962:	f640 0283 	movw	r2, #2179	; 0x883
 8010966:	493e      	ldr	r1, [pc, #248]	; (8010a60 <tcp_pcb_remove+0x110>)
 8010968:	483e      	ldr	r0, [pc, #248]	; (8010a64 <tcp_pcb_remove+0x114>)
 801096a:	f00f fd37 	bl	80203dc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d106      	bne.n	8010982 <tcp_pcb_remove+0x32>
 8010974:	4b39      	ldr	r3, [pc, #228]	; (8010a5c <tcp_pcb_remove+0x10c>)
 8010976:	f640 0284 	movw	r2, #2180	; 0x884
 801097a:	493b      	ldr	r1, [pc, #236]	; (8010a68 <tcp_pcb_remove+0x118>)
 801097c:	4839      	ldr	r0, [pc, #228]	; (8010a64 <tcp_pcb_remove+0x114>)
 801097e:	f00f fd2d 	bl	80203dc <iprintf>

  TCP_RMV(pcblist, pcb);
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	683a      	ldr	r2, [r7, #0]
 8010988:	429a      	cmp	r2, r3
 801098a:	d105      	bne.n	8010998 <tcp_pcb_remove+0x48>
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	68da      	ldr	r2, [r3, #12]
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	601a      	str	r2, [r3, #0]
 8010996:	e013      	b.n	80109c0 <tcp_pcb_remove+0x70>
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	60fb      	str	r3, [r7, #12]
 801099e:	e00c      	b.n	80109ba <tcp_pcb_remove+0x6a>
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	68db      	ldr	r3, [r3, #12]
 80109a4:	683a      	ldr	r2, [r7, #0]
 80109a6:	429a      	cmp	r2, r3
 80109a8:	d104      	bne.n	80109b4 <tcp_pcb_remove+0x64>
 80109aa:	683b      	ldr	r3, [r7, #0]
 80109ac:	68da      	ldr	r2, [r3, #12]
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	60da      	str	r2, [r3, #12]
 80109b2:	e005      	b.n	80109c0 <tcp_pcb_remove+0x70>
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	68db      	ldr	r3, [r3, #12]
 80109b8:	60fb      	str	r3, [r7, #12]
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d1ef      	bne.n	80109a0 <tcp_pcb_remove+0x50>
 80109c0:	683b      	ldr	r3, [r7, #0]
 80109c2:	2200      	movs	r2, #0
 80109c4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80109c6:	6838      	ldr	r0, [r7, #0]
 80109c8:	f7ff ff72 	bl	80108b0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80109cc:	683b      	ldr	r3, [r7, #0]
 80109ce:	7d1b      	ldrb	r3, [r3, #20]
 80109d0:	2b0a      	cmp	r3, #10
 80109d2:	d013      	beq.n	80109fc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80109d4:	683b      	ldr	r3, [r7, #0]
 80109d6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80109d8:	2b01      	cmp	r3, #1
 80109da:	d00f      	beq.n	80109fc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80109dc:	683b      	ldr	r3, [r7, #0]
 80109de:	8b5b      	ldrh	r3, [r3, #26]
 80109e0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d009      	beq.n	80109fc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80109e8:	683b      	ldr	r3, [r7, #0]
 80109ea:	8b5b      	ldrh	r3, [r3, #26]
 80109ec:	f043 0302 	orr.w	r3, r3, #2
 80109f0:	b29a      	uxth	r2, r3
 80109f2:	683b      	ldr	r3, [r7, #0]
 80109f4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80109f6:	6838      	ldr	r0, [r7, #0]
 80109f8:	f002 fffc 	bl	80139f4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80109fc:	683b      	ldr	r3, [r7, #0]
 80109fe:	7d1b      	ldrb	r3, [r3, #20]
 8010a00:	2b01      	cmp	r3, #1
 8010a02:	d020      	beq.n	8010a46 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010a04:	683b      	ldr	r3, [r7, #0]
 8010a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d006      	beq.n	8010a1a <tcp_pcb_remove+0xca>
 8010a0c:	4b13      	ldr	r3, [pc, #76]	; (8010a5c <tcp_pcb_remove+0x10c>)
 8010a0e:	f640 0293 	movw	r2, #2195	; 0x893
 8010a12:	4916      	ldr	r1, [pc, #88]	; (8010a6c <tcp_pcb_remove+0x11c>)
 8010a14:	4813      	ldr	r0, [pc, #76]	; (8010a64 <tcp_pcb_remove+0x114>)
 8010a16:	f00f fce1 	bl	80203dc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8010a1a:	683b      	ldr	r3, [r7, #0]
 8010a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d006      	beq.n	8010a30 <tcp_pcb_remove+0xe0>
 8010a22:	4b0e      	ldr	r3, [pc, #56]	; (8010a5c <tcp_pcb_remove+0x10c>)
 8010a24:	f640 0294 	movw	r2, #2196	; 0x894
 8010a28:	4911      	ldr	r1, [pc, #68]	; (8010a70 <tcp_pcb_remove+0x120>)
 8010a2a:	480e      	ldr	r0, [pc, #56]	; (8010a64 <tcp_pcb_remove+0x114>)
 8010a2c:	f00f fcd6 	bl	80203dc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8010a30:	683b      	ldr	r3, [r7, #0]
 8010a32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d006      	beq.n	8010a46 <tcp_pcb_remove+0xf6>
 8010a38:	4b08      	ldr	r3, [pc, #32]	; (8010a5c <tcp_pcb_remove+0x10c>)
 8010a3a:	f640 0296 	movw	r2, #2198	; 0x896
 8010a3e:	490d      	ldr	r1, [pc, #52]	; (8010a74 <tcp_pcb_remove+0x124>)
 8010a40:	4808      	ldr	r0, [pc, #32]	; (8010a64 <tcp_pcb_remove+0x114>)
 8010a42:	f00f fccb 	bl	80203dc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8010a46:	683b      	ldr	r3, [r7, #0]
 8010a48:	2200      	movs	r2, #0
 8010a4a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010a4c:	683b      	ldr	r3, [r7, #0]
 8010a4e:	2200      	movs	r2, #0
 8010a50:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8010a52:	bf00      	nop
 8010a54:	3710      	adds	r7, #16
 8010a56:	46bd      	mov	sp, r7
 8010a58:	bd80      	pop	{r7, pc}
 8010a5a:	bf00      	nop
 8010a5c:	08022460 	.word	0x08022460
 8010a60:	08022ac8 	.word	0x08022ac8
 8010a64:	080224a4 	.word	0x080224a4
 8010a68:	08022ae4 	.word	0x08022ae4
 8010a6c:	08022b04 	.word	0x08022b04
 8010a70:	08022b1c 	.word	0x08022b1c
 8010a74:	08022b38 	.word	0x08022b38

08010a78 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b082      	sub	sp, #8
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d106      	bne.n	8010a94 <tcp_next_iss+0x1c>
 8010a86:	4b0a      	ldr	r3, [pc, #40]	; (8010ab0 <tcp_next_iss+0x38>)
 8010a88:	f640 02af 	movw	r2, #2223	; 0x8af
 8010a8c:	4909      	ldr	r1, [pc, #36]	; (8010ab4 <tcp_next_iss+0x3c>)
 8010a8e:	480a      	ldr	r0, [pc, #40]	; (8010ab8 <tcp_next_iss+0x40>)
 8010a90:	f00f fca4 	bl	80203dc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8010a94:	4b09      	ldr	r3, [pc, #36]	; (8010abc <tcp_next_iss+0x44>)
 8010a96:	681a      	ldr	r2, [r3, #0]
 8010a98:	4b09      	ldr	r3, [pc, #36]	; (8010ac0 <tcp_next_iss+0x48>)
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	4413      	add	r3, r2
 8010a9e:	4a07      	ldr	r2, [pc, #28]	; (8010abc <tcp_next_iss+0x44>)
 8010aa0:	6013      	str	r3, [r2, #0]
  return iss;
 8010aa2:	4b06      	ldr	r3, [pc, #24]	; (8010abc <tcp_next_iss+0x44>)
 8010aa4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	3708      	adds	r7, #8
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bd80      	pop	{r7, pc}
 8010aae:	bf00      	nop
 8010ab0:	08022460 	.word	0x08022460
 8010ab4:	08022b50 	.word	0x08022b50
 8010ab8:	080224a4 	.word	0x080224a4
 8010abc:	2000002c 	.word	0x2000002c
 8010ac0:	2000a518 	.word	0x2000a518

08010ac4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b086      	sub	sp, #24
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	4603      	mov	r3, r0
 8010acc:	60b9      	str	r1, [r7, #8]
 8010ace:	607a      	str	r2, [r7, #4]
 8010ad0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d106      	bne.n	8010ae6 <tcp_eff_send_mss_netif+0x22>
 8010ad8:	4b14      	ldr	r3, [pc, #80]	; (8010b2c <tcp_eff_send_mss_netif+0x68>)
 8010ada:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8010ade:	4914      	ldr	r1, [pc, #80]	; (8010b30 <tcp_eff_send_mss_netif+0x6c>)
 8010ae0:	4814      	ldr	r0, [pc, #80]	; (8010b34 <tcp_eff_send_mss_netif+0x70>)
 8010ae2:	f00f fc7b 	bl	80203dc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8010ae6:	68bb      	ldr	r3, [r7, #8]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d101      	bne.n	8010af0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8010aec:	89fb      	ldrh	r3, [r7, #14]
 8010aee:	e019      	b.n	8010b24 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8010af0:	68bb      	ldr	r3, [r7, #8]
 8010af2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010af4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8010af6:	8afb      	ldrh	r3, [r7, #22]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d012      	beq.n	8010b22 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8010afc:	2328      	movs	r3, #40	; 0x28
 8010afe:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8010b00:	8afa      	ldrh	r2, [r7, #22]
 8010b02:	8abb      	ldrh	r3, [r7, #20]
 8010b04:	429a      	cmp	r2, r3
 8010b06:	d904      	bls.n	8010b12 <tcp_eff_send_mss_netif+0x4e>
 8010b08:	8afa      	ldrh	r2, [r7, #22]
 8010b0a:	8abb      	ldrh	r3, [r7, #20]
 8010b0c:	1ad3      	subs	r3, r2, r3
 8010b0e:	b29b      	uxth	r3, r3
 8010b10:	e000      	b.n	8010b14 <tcp_eff_send_mss_netif+0x50>
 8010b12:	2300      	movs	r3, #0
 8010b14:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8010b16:	8a7a      	ldrh	r2, [r7, #18]
 8010b18:	89fb      	ldrh	r3, [r7, #14]
 8010b1a:	4293      	cmp	r3, r2
 8010b1c:	bf28      	it	cs
 8010b1e:	4613      	movcs	r3, r2
 8010b20:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8010b22:	89fb      	ldrh	r3, [r7, #14]
}
 8010b24:	4618      	mov	r0, r3
 8010b26:	3718      	adds	r7, #24
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	bd80      	pop	{r7, pc}
 8010b2c:	08022460 	.word	0x08022460
 8010b30:	08022b6c 	.word	0x08022b6c
 8010b34:	080224a4 	.word	0x080224a4

08010b38 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b084      	sub	sp, #16
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
 8010b40:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8010b42:	683b      	ldr	r3, [r7, #0]
 8010b44:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d11d      	bne.n	8010b88 <tcp_netif_ip_addr_changed_pcblist+0x50>
 8010b4c:	4b12      	ldr	r3, [pc, #72]	; (8010b98 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8010b4e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8010b52:	4912      	ldr	r1, [pc, #72]	; (8010b9c <tcp_netif_ip_addr_changed_pcblist+0x64>)
 8010b54:	4812      	ldr	r0, [pc, #72]	; (8010ba0 <tcp_netif_ip_addr_changed_pcblist+0x68>)
 8010b56:	f00f fc41 	bl	80203dc <iprintf>

  while (pcb != NULL) {
 8010b5a:	e015      	b.n	8010b88 <tcp_netif_ip_addr_changed_pcblist+0x50>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	681a      	ldr	r2, [r3, #0]
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	429a      	cmp	r2, r3
 8010b66:	d10c      	bne.n	8010b82 <tcp_netif_ip_addr_changed_pcblist+0x4a>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	68db      	ldr	r3, [r3, #12]
 8010b6c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
 8010b6e:	68f9      	ldr	r1, [r7, #12]
 8010b70:	480c      	ldr	r0, [pc, #48]	; (8010ba4 <tcp_netif_ip_addr_changed_pcblist+0x6c>)
 8010b72:	f00f fc33 	bl	80203dc <iprintf>
      tcp_abort(pcb);
 8010b76:	68f8      	ldr	r0, [r7, #12]
 8010b78:	f7fe ff98 	bl	800faac <tcp_abort>
      pcb = next;
 8010b7c:	68bb      	ldr	r3, [r7, #8]
 8010b7e:	60fb      	str	r3, [r7, #12]
 8010b80:	e002      	b.n	8010b88 <tcp_netif_ip_addr_changed_pcblist+0x50>
    } else {
      pcb = pcb->next;
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	68db      	ldr	r3, [r3, #12]
 8010b86:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d1e6      	bne.n	8010b5c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8010b8e:	bf00      	nop
 8010b90:	bf00      	nop
 8010b92:	3710      	adds	r7, #16
 8010b94:	46bd      	mov	sp, r7
 8010b96:	bd80      	pop	{r7, pc}
 8010b98:	08022460 	.word	0x08022460
 8010b9c:	08022b94 	.word	0x08022b94
 8010ba0:	080224a4 	.word	0x080224a4
 8010ba4:	08022bc8 	.word	0x08022bc8

08010ba8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b084      	sub	sp, #16
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
 8010bb0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d02a      	beq.n	8010c0e <tcp_netif_ip_addr_changed+0x66>
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d026      	beq.n	8010c0e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010bc0:	4b15      	ldr	r3, [pc, #84]	; (8010c18 <tcp_netif_ip_addr_changed+0x70>)
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	4619      	mov	r1, r3
 8010bc6:	6878      	ldr	r0, [r7, #4]
 8010bc8:	f7ff ffb6 	bl	8010b38 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010bcc:	4b13      	ldr	r3, [pc, #76]	; (8010c1c <tcp_netif_ip_addr_changed+0x74>)
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	4619      	mov	r1, r3
 8010bd2:	6878      	ldr	r0, [r7, #4]
 8010bd4:	f7ff ffb0 	bl	8010b38 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010bd8:	683b      	ldr	r3, [r7, #0]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d017      	beq.n	8010c0e <tcp_netif_ip_addr_changed+0x66>
 8010bde:	683b      	ldr	r3, [r7, #0]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d013      	beq.n	8010c0e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010be6:	4b0e      	ldr	r3, [pc, #56]	; (8010c20 <tcp_netif_ip_addr_changed+0x78>)
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	60fb      	str	r3, [r7, #12]
 8010bec:	e00c      	b.n	8010c08 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	681a      	ldr	r2, [r3, #0]
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	429a      	cmp	r2, r3
 8010bf8:	d103      	bne.n	8010c02 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8010bfa:	683b      	ldr	r3, [r7, #0]
 8010bfc:	681a      	ldr	r2, [r3, #0]
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	68db      	ldr	r3, [r3, #12]
 8010c06:	60fb      	str	r3, [r7, #12]
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d1ef      	bne.n	8010bee <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8010c0e:	bf00      	nop
 8010c10:	3710      	adds	r7, #16
 8010c12:	46bd      	mov	sp, r7
 8010c14:	bd80      	pop	{r7, pc}
 8010c16:	bf00      	nop
 8010c18:	2000a514 	.word	0x2000a514
 8010c1c:	2000a520 	.word	0x2000a520
 8010c20:	2000a51c 	.word	0x2000a51c

08010c24 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8010c24:	b580      	push	{r7, lr}
 8010c26:	b082      	sub	sp, #8
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d007      	beq.n	8010c44 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c38:	4618      	mov	r0, r3
 8010c3a:	f7ff fc0d 	bl	8010458 <tcp_segs_free>
    pcb->ooseq = NULL;
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	2200      	movs	r2, #0
 8010c42:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010c44:	bf00      	nop
 8010c46:	3708      	adds	r7, #8
 8010c48:	46bd      	mov	sp, r7
 8010c4a:	bd80      	pop	{r7, pc}

08010c4c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010c4c:	b590      	push	{r4, r7, lr}
 8010c4e:	b08d      	sub	sp, #52	; 0x34
 8010c50:	af04      	add	r7, sp, #16
 8010c52:	6078      	str	r0, [r7, #4]
 8010c54:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d105      	bne.n	8010c68 <tcp_input+0x1c>
 8010c5c:	4b9b      	ldr	r3, [pc, #620]	; (8010ecc <tcp_input+0x280>)
 8010c5e:	2283      	movs	r2, #131	; 0x83
 8010c60:	499b      	ldr	r1, [pc, #620]	; (8010ed0 <tcp_input+0x284>)
 8010c62:	489c      	ldr	r0, [pc, #624]	; (8010ed4 <tcp_input+0x288>)
 8010c64:	f00f fbba 	bl	80203dc <iprintf>

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 8010c68:	4b9b      	ldr	r3, [pc, #620]	; (8010ed8 <tcp_input+0x28c>)
 8010c6a:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8010c6e:	3301      	adds	r3, #1
 8010c70:	b29a      	uxth	r2, r3
 8010c72:	4b99      	ldr	r3, [pc, #612]	; (8010ed8 <tcp_input+0x28c>)
 8010c74:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	685b      	ldr	r3, [r3, #4]
 8010c7c:	4a97      	ldr	r2, [pc, #604]	; (8010edc <tcp_input+0x290>)
 8010c7e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	895b      	ldrh	r3, [r3, #10]
 8010c84:	2b13      	cmp	r3, #19
 8010c86:	d809      	bhi.n	8010c9c <tcp_input+0x50>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 8010c88:	4b93      	ldr	r3, [pc, #588]	; (8010ed8 <tcp_input+0x28c>)
 8010c8a:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 8010c8e:	3301      	adds	r3, #1
 8010c90:	b29a      	uxth	r2, r3
 8010c92:	4b91      	ldr	r3, [pc, #580]	; (8010ed8 <tcp_input+0x28c>)
 8010c94:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
    goto dropped;
 8010c98:	f000 bc1a 	b.w	80114d0 <tcp_input+0x884>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010c9c:	4b90      	ldr	r3, [pc, #576]	; (8010ee0 <tcp_input+0x294>)
 8010c9e:	695b      	ldr	r3, [r3, #20]
 8010ca0:	4a8f      	ldr	r2, [pc, #572]	; (8010ee0 <tcp_input+0x294>)
 8010ca2:	6812      	ldr	r2, [r2, #0]
 8010ca4:	4611      	mov	r1, r2
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	f009 feb6 	bl	801aa18 <ip4_addr_isbroadcast_u32>
 8010cac:	4603      	mov	r3, r0
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d105      	bne.n	8010cbe <tcp_input+0x72>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010cb2:	4b8b      	ldr	r3, [pc, #556]	; (8010ee0 <tcp_input+0x294>)
 8010cb4:	695b      	ldr	r3, [r3, #20]
 8010cb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010cba:	2be0      	cmp	r3, #224	; 0xe0
 8010cbc:	d108      	bne.n	8010cd0 <tcp_input+0x84>
    TCP_STATS_INC(tcp.proterr);
 8010cbe:	4b86      	ldr	r3, [pc, #536]	; (8010ed8 <tcp_input+0x28c>)
 8010cc0:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8010cc4:	3301      	adds	r3, #1
 8010cc6:	b29a      	uxth	r2, r3
 8010cc8:	4b83      	ldr	r3, [pc, #524]	; (8010ed8 <tcp_input+0x28c>)
 8010cca:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
    goto dropped;
 8010cce:	e3ff      	b.n	80114d0 <tcp_input+0x884>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010cd0:	4b82      	ldr	r3, [pc, #520]	; (8010edc <tcp_input+0x290>)
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	899b      	ldrh	r3, [r3, #12]
 8010cd6:	b29b      	uxth	r3, r3
 8010cd8:	4618      	mov	r0, r3
 8010cda:	f7fb fe51 	bl	800c980 <lwip_htons>
 8010cde:	4603      	mov	r3, r0
 8010ce0:	0b1b      	lsrs	r3, r3, #12
 8010ce2:	b29b      	uxth	r3, r3
 8010ce4:	b2db      	uxtb	r3, r3
 8010ce6:	009b      	lsls	r3, r3, #2
 8010ce8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010cea:	7cbb      	ldrb	r3, [r7, #18]
 8010cec:	2b13      	cmp	r3, #19
 8010cee:	d905      	bls.n	8010cfc <tcp_input+0xb0>
 8010cf0:	7cbb      	ldrb	r3, [r7, #18]
 8010cf2:	b29a      	uxth	r2, r3
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	891b      	ldrh	r3, [r3, #8]
 8010cf8:	429a      	cmp	r2, r3
 8010cfa:	d908      	bls.n	8010d0e <tcp_input+0xc2>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
 8010cfc:	4b76      	ldr	r3, [pc, #472]	; (8010ed8 <tcp_input+0x28c>)
 8010cfe:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 8010d02:	3301      	adds	r3, #1
 8010d04:	b29a      	uxth	r2, r3
 8010d06:	4b74      	ldr	r3, [pc, #464]	; (8010ed8 <tcp_input+0x28c>)
 8010d08:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
    goto dropped;
 8010d0c:	e3e0      	b.n	80114d0 <tcp_input+0x884>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010d0e:	7cbb      	ldrb	r3, [r7, #18]
 8010d10:	b29b      	uxth	r3, r3
 8010d12:	3b14      	subs	r3, #20
 8010d14:	b29a      	uxth	r2, r3
 8010d16:	4b73      	ldr	r3, [pc, #460]	; (8010ee4 <tcp_input+0x298>)
 8010d18:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010d1a:	4b73      	ldr	r3, [pc, #460]	; (8010ee8 <tcp_input+0x29c>)
 8010d1c:	2200      	movs	r2, #0
 8010d1e:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	895a      	ldrh	r2, [r3, #10]
 8010d24:	7cbb      	ldrb	r3, [r7, #18]
 8010d26:	b29b      	uxth	r3, r3
 8010d28:	429a      	cmp	r2, r3
 8010d2a:	d309      	bcc.n	8010d40 <tcp_input+0xf4>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010d2c:	4b6d      	ldr	r3, [pc, #436]	; (8010ee4 <tcp_input+0x298>)
 8010d2e:	881a      	ldrh	r2, [r3, #0]
 8010d30:	4b6e      	ldr	r3, [pc, #440]	; (8010eec <tcp_input+0x2a0>)
 8010d32:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8010d34:	7cbb      	ldrb	r3, [r7, #18]
 8010d36:	4619      	mov	r1, r3
 8010d38:	6878      	ldr	r0, [r7, #4]
 8010d3a:	f7fd ff23 	bl	800eb84 <pbuf_remove_header>
 8010d3e:	e056      	b.n	8010dee <tcp_input+0x1a2>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d105      	bne.n	8010d54 <tcp_input+0x108>
 8010d48:	4b60      	ldr	r3, [pc, #384]	; (8010ecc <tcp_input+0x280>)
 8010d4a:	22c2      	movs	r2, #194	; 0xc2
 8010d4c:	4968      	ldr	r1, [pc, #416]	; (8010ef0 <tcp_input+0x2a4>)
 8010d4e:	4861      	ldr	r0, [pc, #388]	; (8010ed4 <tcp_input+0x288>)
 8010d50:	f00f fb44 	bl	80203dc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8010d54:	2114      	movs	r1, #20
 8010d56:	6878      	ldr	r0, [r7, #4]
 8010d58:	f7fd ff14 	bl	800eb84 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	895a      	ldrh	r2, [r3, #10]
 8010d60:	4b62      	ldr	r3, [pc, #392]	; (8010eec <tcp_input+0x2a0>)
 8010d62:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010d64:	4b5f      	ldr	r3, [pc, #380]	; (8010ee4 <tcp_input+0x298>)
 8010d66:	881a      	ldrh	r2, [r3, #0]
 8010d68:	4b60      	ldr	r3, [pc, #384]	; (8010eec <tcp_input+0x2a0>)
 8010d6a:	881b      	ldrh	r3, [r3, #0]
 8010d6c:	1ad3      	subs	r3, r2, r3
 8010d6e:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8010d70:	4b5e      	ldr	r3, [pc, #376]	; (8010eec <tcp_input+0x2a0>)
 8010d72:	881b      	ldrh	r3, [r3, #0]
 8010d74:	4619      	mov	r1, r3
 8010d76:	6878      	ldr	r0, [r7, #4]
 8010d78:	f7fd ff04 	bl	800eb84 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	895b      	ldrh	r3, [r3, #10]
 8010d82:	8a3a      	ldrh	r2, [r7, #16]
 8010d84:	429a      	cmp	r2, r3
 8010d86:	d908      	bls.n	8010d9a <tcp_input+0x14e>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
 8010d88:	4b53      	ldr	r3, [pc, #332]	; (8010ed8 <tcp_input+0x28c>)
 8010d8a:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 8010d8e:	3301      	adds	r3, #1
 8010d90:	b29a      	uxth	r2, r3
 8010d92:	4b51      	ldr	r3, [pc, #324]	; (8010ed8 <tcp_input+0x28c>)
 8010d94:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
      goto dropped;
 8010d98:	e39a      	b.n	80114d0 <tcp_input+0x884>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	685b      	ldr	r3, [r3, #4]
 8010da0:	4a51      	ldr	r2, [pc, #324]	; (8010ee8 <tcp_input+0x29c>)
 8010da2:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	8a3a      	ldrh	r2, [r7, #16]
 8010daa:	4611      	mov	r1, r2
 8010dac:	4618      	mov	r0, r3
 8010dae:	f7fd fee9 	bl	800eb84 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	891a      	ldrh	r2, [r3, #8]
 8010db6:	8a3b      	ldrh	r3, [r7, #16]
 8010db8:	1ad3      	subs	r3, r2, r3
 8010dba:	b29a      	uxth	r2, r3
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	895b      	ldrh	r3, [r3, #10]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d005      	beq.n	8010dd4 <tcp_input+0x188>
 8010dc8:	4b40      	ldr	r3, [pc, #256]	; (8010ecc <tcp_input+0x280>)
 8010dca:	22df      	movs	r2, #223	; 0xdf
 8010dcc:	4949      	ldr	r1, [pc, #292]	; (8010ef4 <tcp_input+0x2a8>)
 8010dce:	4841      	ldr	r0, [pc, #260]	; (8010ed4 <tcp_input+0x288>)
 8010dd0:	f00f fb04 	bl	80203dc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	891a      	ldrh	r2, [r3, #8]
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	891b      	ldrh	r3, [r3, #8]
 8010dde:	429a      	cmp	r2, r3
 8010de0:	d005      	beq.n	8010dee <tcp_input+0x1a2>
 8010de2:	4b3a      	ldr	r3, [pc, #232]	; (8010ecc <tcp_input+0x280>)
 8010de4:	22e0      	movs	r2, #224	; 0xe0
 8010de6:	4944      	ldr	r1, [pc, #272]	; (8010ef8 <tcp_input+0x2ac>)
 8010de8:	483a      	ldr	r0, [pc, #232]	; (8010ed4 <tcp_input+0x288>)
 8010dea:	f00f faf7 	bl	80203dc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010dee:	4b3b      	ldr	r3, [pc, #236]	; (8010edc <tcp_input+0x290>)
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	881b      	ldrh	r3, [r3, #0]
 8010df4:	b29b      	uxth	r3, r3
 8010df6:	4a39      	ldr	r2, [pc, #228]	; (8010edc <tcp_input+0x290>)
 8010df8:	6814      	ldr	r4, [r2, #0]
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	f7fb fdc0 	bl	800c980 <lwip_htons>
 8010e00:	4603      	mov	r3, r0
 8010e02:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010e04:	4b35      	ldr	r3, [pc, #212]	; (8010edc <tcp_input+0x290>)
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	885b      	ldrh	r3, [r3, #2]
 8010e0a:	b29b      	uxth	r3, r3
 8010e0c:	4a33      	ldr	r2, [pc, #204]	; (8010edc <tcp_input+0x290>)
 8010e0e:	6814      	ldr	r4, [r2, #0]
 8010e10:	4618      	mov	r0, r3
 8010e12:	f7fb fdb5 	bl	800c980 <lwip_htons>
 8010e16:	4603      	mov	r3, r0
 8010e18:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010e1a:	4b30      	ldr	r3, [pc, #192]	; (8010edc <tcp_input+0x290>)
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	685b      	ldr	r3, [r3, #4]
 8010e20:	4a2e      	ldr	r2, [pc, #184]	; (8010edc <tcp_input+0x290>)
 8010e22:	6814      	ldr	r4, [r2, #0]
 8010e24:	4618      	mov	r0, r3
 8010e26:	f7fb fdc0 	bl	800c9aa <lwip_htonl>
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	6063      	str	r3, [r4, #4]
 8010e2e:	6863      	ldr	r3, [r4, #4]
 8010e30:	4a32      	ldr	r2, [pc, #200]	; (8010efc <tcp_input+0x2b0>)
 8010e32:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010e34:	4b29      	ldr	r3, [pc, #164]	; (8010edc <tcp_input+0x290>)
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	689b      	ldr	r3, [r3, #8]
 8010e3a:	4a28      	ldr	r2, [pc, #160]	; (8010edc <tcp_input+0x290>)
 8010e3c:	6814      	ldr	r4, [r2, #0]
 8010e3e:	4618      	mov	r0, r3
 8010e40:	f7fb fdb3 	bl	800c9aa <lwip_htonl>
 8010e44:	4603      	mov	r3, r0
 8010e46:	60a3      	str	r3, [r4, #8]
 8010e48:	68a3      	ldr	r3, [r4, #8]
 8010e4a:	4a2d      	ldr	r2, [pc, #180]	; (8010f00 <tcp_input+0x2b4>)
 8010e4c:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010e4e:	4b23      	ldr	r3, [pc, #140]	; (8010edc <tcp_input+0x290>)
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	89db      	ldrh	r3, [r3, #14]
 8010e54:	b29b      	uxth	r3, r3
 8010e56:	4a21      	ldr	r2, [pc, #132]	; (8010edc <tcp_input+0x290>)
 8010e58:	6814      	ldr	r4, [r2, #0]
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	f7fb fd90 	bl	800c980 <lwip_htons>
 8010e60:	4603      	mov	r3, r0
 8010e62:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010e64:	4b1d      	ldr	r3, [pc, #116]	; (8010edc <tcp_input+0x290>)
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	899b      	ldrh	r3, [r3, #12]
 8010e6a:	b29b      	uxth	r3, r3
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	f7fb fd87 	bl	800c980 <lwip_htons>
 8010e72:	4603      	mov	r3, r0
 8010e74:	b2db      	uxtb	r3, r3
 8010e76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010e7a:	b2da      	uxtb	r2, r3
 8010e7c:	4b21      	ldr	r3, [pc, #132]	; (8010f04 <tcp_input+0x2b8>)
 8010e7e:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	891a      	ldrh	r2, [r3, #8]
 8010e84:	4b20      	ldr	r3, [pc, #128]	; (8010f08 <tcp_input+0x2bc>)
 8010e86:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010e88:	4b1e      	ldr	r3, [pc, #120]	; (8010f04 <tcp_input+0x2b8>)
 8010e8a:	781b      	ldrb	r3, [r3, #0]
 8010e8c:	f003 0303 	and.w	r3, r3, #3
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d014      	beq.n	8010ebe <tcp_input+0x272>
    tcplen++;
 8010e94:	4b1c      	ldr	r3, [pc, #112]	; (8010f08 <tcp_input+0x2bc>)
 8010e96:	881b      	ldrh	r3, [r3, #0]
 8010e98:	3301      	adds	r3, #1
 8010e9a:	b29a      	uxth	r2, r3
 8010e9c:	4b1a      	ldr	r3, [pc, #104]	; (8010f08 <tcp_input+0x2bc>)
 8010e9e:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	891a      	ldrh	r2, [r3, #8]
 8010ea4:	4b18      	ldr	r3, [pc, #96]	; (8010f08 <tcp_input+0x2bc>)
 8010ea6:	881b      	ldrh	r3, [r3, #0]
 8010ea8:	429a      	cmp	r2, r3
 8010eaa:	d908      	bls.n	8010ebe <tcp_input+0x272>
      /* u16_t overflow, cannot handle this */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: length u16_t overflow, cannot handle this\n"));
      TCP_STATS_INC(tcp.lenerr);
 8010eac:	4b0a      	ldr	r3, [pc, #40]	; (8010ed8 <tcp_input+0x28c>)
 8010eae:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 8010eb2:	3301      	adds	r3, #1
 8010eb4:	b29a      	uxth	r2, r3
 8010eb6:	4b08      	ldr	r3, [pc, #32]	; (8010ed8 <tcp_input+0x28c>)
 8010eb8:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
      goto dropped;
 8010ebc:	e308      	b.n	80114d0 <tcp_input+0x884>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010ec2:	4b12      	ldr	r3, [pc, #72]	; (8010f0c <tcp_input+0x2c0>)
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	61bb      	str	r3, [r7, #24]
 8010ec8:	e0a2      	b.n	8011010 <tcp_input+0x3c4>
 8010eca:	bf00      	nop
 8010ecc:	08022bf0 	.word	0x08022bf0
 8010ed0:	08022c24 	.word	0x08022c24
 8010ed4:	08022c3c 	.word	0x08022c3c
 8010ed8:	2000a3ec 	.word	0x2000a3ec
 8010edc:	20006858 	.word	0x20006858
 8010ee0:	200070d4 	.word	0x200070d4
 8010ee4:	2000685c 	.word	0x2000685c
 8010ee8:	20006860 	.word	0x20006860
 8010eec:	2000685e 	.word	0x2000685e
 8010ef0:	08022c64 	.word	0x08022c64
 8010ef4:	08022c74 	.word	0x08022c74
 8010ef8:	08022c80 	.word	0x08022c80
 8010efc:	20006868 	.word	0x20006868
 8010f00:	2000686c 	.word	0x2000686c
 8010f04:	20006874 	.word	0x20006874
 8010f08:	20006872 	.word	0x20006872
 8010f0c:	2000a514 	.word	0x2000a514
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010f10:	69bb      	ldr	r3, [r7, #24]
 8010f12:	7d1b      	ldrb	r3, [r3, #20]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d105      	bne.n	8010f24 <tcp_input+0x2d8>
 8010f18:	4b91      	ldr	r3, [pc, #580]	; (8011160 <tcp_input+0x514>)
 8010f1a:	22fb      	movs	r2, #251	; 0xfb
 8010f1c:	4991      	ldr	r1, [pc, #580]	; (8011164 <tcp_input+0x518>)
 8010f1e:	4892      	ldr	r0, [pc, #584]	; (8011168 <tcp_input+0x51c>)
 8010f20:	f00f fa5c 	bl	80203dc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010f24:	69bb      	ldr	r3, [r7, #24]
 8010f26:	7d1b      	ldrb	r3, [r3, #20]
 8010f28:	2b0a      	cmp	r3, #10
 8010f2a:	d105      	bne.n	8010f38 <tcp_input+0x2ec>
 8010f2c:	4b8c      	ldr	r3, [pc, #560]	; (8011160 <tcp_input+0x514>)
 8010f2e:	22fc      	movs	r2, #252	; 0xfc
 8010f30:	498e      	ldr	r1, [pc, #568]	; (801116c <tcp_input+0x520>)
 8010f32:	488d      	ldr	r0, [pc, #564]	; (8011168 <tcp_input+0x51c>)
 8010f34:	f00f fa52 	bl	80203dc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010f38:	69bb      	ldr	r3, [r7, #24]
 8010f3a:	7d1b      	ldrb	r3, [r3, #20]
 8010f3c:	2b01      	cmp	r3, #1
 8010f3e:	d105      	bne.n	8010f4c <tcp_input+0x300>
 8010f40:	4b87      	ldr	r3, [pc, #540]	; (8011160 <tcp_input+0x514>)
 8010f42:	22fd      	movs	r2, #253	; 0xfd
 8010f44:	498a      	ldr	r1, [pc, #552]	; (8011170 <tcp_input+0x524>)
 8010f46:	4888      	ldr	r0, [pc, #544]	; (8011168 <tcp_input+0x51c>)
 8010f48:	f00f fa48 	bl	80203dc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010f4c:	69bb      	ldr	r3, [r7, #24]
 8010f4e:	7a1b      	ldrb	r3, [r3, #8]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d00c      	beq.n	8010f6e <tcp_input+0x322>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010f54:	69bb      	ldr	r3, [r7, #24]
 8010f56:	7a1a      	ldrb	r2, [r3, #8]
 8010f58:	4b86      	ldr	r3, [pc, #536]	; (8011174 <tcp_input+0x528>)
 8010f5a:	685b      	ldr	r3, [r3, #4]
 8010f5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010f60:	3301      	adds	r3, #1
 8010f62:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010f64:	429a      	cmp	r2, r3
 8010f66:	d002      	beq.n	8010f6e <tcp_input+0x322>
      prev = pcb;
 8010f68:	69bb      	ldr	r3, [r7, #24]
 8010f6a:	61fb      	str	r3, [r7, #28]
      continue;
 8010f6c:	e04d      	b.n	801100a <tcp_input+0x3be>
    }

    if (pcb->remote_port == tcphdr->src &&
 8010f6e:	69bb      	ldr	r3, [r7, #24]
 8010f70:	8b1a      	ldrh	r2, [r3, #24]
 8010f72:	4b81      	ldr	r3, [pc, #516]	; (8011178 <tcp_input+0x52c>)
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	881b      	ldrh	r3, [r3, #0]
 8010f78:	b29b      	uxth	r3, r3
 8010f7a:	429a      	cmp	r2, r3
 8010f7c:	d143      	bne.n	8011006 <tcp_input+0x3ba>
        pcb->local_port == tcphdr->dest &&
 8010f7e:	69bb      	ldr	r3, [r7, #24]
 8010f80:	8ada      	ldrh	r2, [r3, #22]
 8010f82:	4b7d      	ldr	r3, [pc, #500]	; (8011178 <tcp_input+0x52c>)
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	885b      	ldrh	r3, [r3, #2]
 8010f88:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010f8a:	429a      	cmp	r2, r3
 8010f8c:	d13b      	bne.n	8011006 <tcp_input+0x3ba>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010f8e:	69bb      	ldr	r3, [r7, #24]
 8010f90:	685a      	ldr	r2, [r3, #4]
 8010f92:	4b78      	ldr	r3, [pc, #480]	; (8011174 <tcp_input+0x528>)
 8010f94:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010f96:	429a      	cmp	r2, r3
 8010f98:	d135      	bne.n	8011006 <tcp_input+0x3ba>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010f9a:	69bb      	ldr	r3, [r7, #24]
 8010f9c:	681a      	ldr	r2, [r3, #0]
 8010f9e:	4b75      	ldr	r3, [pc, #468]	; (8011174 <tcp_input+0x528>)
 8010fa0:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010fa2:	429a      	cmp	r2, r3
 8010fa4:	d12f      	bne.n	8011006 <tcp_input+0x3ba>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010fa6:	69bb      	ldr	r3, [r7, #24]
 8010fa8:	68db      	ldr	r3, [r3, #12]
 8010faa:	69ba      	ldr	r2, [r7, #24]
 8010fac:	429a      	cmp	r2, r3
 8010fae:	d106      	bne.n	8010fbe <tcp_input+0x372>
 8010fb0:	4b6b      	ldr	r3, [pc, #428]	; (8011160 <tcp_input+0x514>)
 8010fb2:	f240 120d 	movw	r2, #269	; 0x10d
 8010fb6:	4971      	ldr	r1, [pc, #452]	; (801117c <tcp_input+0x530>)
 8010fb8:	486b      	ldr	r0, [pc, #428]	; (8011168 <tcp_input+0x51c>)
 8010fba:	f00f fa0f 	bl	80203dc <iprintf>
      if (prev != NULL) {
 8010fbe:	69fb      	ldr	r3, [r7, #28]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d00b      	beq.n	8010fdc <tcp_input+0x390>
        prev->next = pcb->next;
 8010fc4:	69bb      	ldr	r3, [r7, #24]
 8010fc6:	68da      	ldr	r2, [r3, #12]
 8010fc8:	69fb      	ldr	r3, [r7, #28]
 8010fca:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010fcc:	4b6c      	ldr	r3, [pc, #432]	; (8011180 <tcp_input+0x534>)
 8010fce:	681a      	ldr	r2, [r3, #0]
 8010fd0:	69bb      	ldr	r3, [r7, #24]
 8010fd2:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010fd4:	4a6a      	ldr	r2, [pc, #424]	; (8011180 <tcp_input+0x534>)
 8010fd6:	69bb      	ldr	r3, [r7, #24]
 8010fd8:	6013      	str	r3, [r2, #0]
 8010fda:	e007      	b.n	8010fec <tcp_input+0x3a0>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8010fdc:	4b69      	ldr	r3, [pc, #420]	; (8011184 <tcp_input+0x538>)
 8010fde:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8010fe2:	3301      	adds	r3, #1
 8010fe4:	b29a      	uxth	r2, r3
 8010fe6:	4b67      	ldr	r3, [pc, #412]	; (8011184 <tcp_input+0x538>)
 8010fe8:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010fec:	69bb      	ldr	r3, [r7, #24]
 8010fee:	68db      	ldr	r3, [r3, #12]
 8010ff0:	69ba      	ldr	r2, [r7, #24]
 8010ff2:	429a      	cmp	r2, r3
 8010ff4:	d111      	bne.n	801101a <tcp_input+0x3ce>
 8010ff6:	4b5a      	ldr	r3, [pc, #360]	; (8011160 <tcp_input+0x514>)
 8010ff8:	f240 1215 	movw	r2, #277	; 0x115
 8010ffc:	4962      	ldr	r1, [pc, #392]	; (8011188 <tcp_input+0x53c>)
 8010ffe:	485a      	ldr	r0, [pc, #360]	; (8011168 <tcp_input+0x51c>)
 8011000:	f00f f9ec 	bl	80203dc <iprintf>
      break;
 8011004:	e009      	b.n	801101a <tcp_input+0x3ce>
    }
    prev = pcb;
 8011006:	69bb      	ldr	r3, [r7, #24]
 8011008:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801100a:	69bb      	ldr	r3, [r7, #24]
 801100c:	68db      	ldr	r3, [r3, #12]
 801100e:	61bb      	str	r3, [r7, #24]
 8011010:	69bb      	ldr	r3, [r7, #24]
 8011012:	2b00      	cmp	r3, #0
 8011014:	f47f af7c 	bne.w	8010f10 <tcp_input+0x2c4>
 8011018:	e000      	b.n	801101c <tcp_input+0x3d0>
      break;
 801101a:	bf00      	nop
  }

  if (pcb == NULL) {
 801101c:	69bb      	ldr	r3, [r7, #24]
 801101e:	2b00      	cmp	r3, #0
 8011020:	f040 80ba 	bne.w	8011198 <tcp_input+0x54c>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011024:	4b59      	ldr	r3, [pc, #356]	; (801118c <tcp_input+0x540>)
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	61bb      	str	r3, [r7, #24]
 801102a:	e03f      	b.n	80110ac <tcp_input+0x460>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801102c:	69bb      	ldr	r3, [r7, #24]
 801102e:	7d1b      	ldrb	r3, [r3, #20]
 8011030:	2b0a      	cmp	r3, #10
 8011032:	d006      	beq.n	8011042 <tcp_input+0x3f6>
 8011034:	4b4a      	ldr	r3, [pc, #296]	; (8011160 <tcp_input+0x514>)
 8011036:	f240 121f 	movw	r2, #287	; 0x11f
 801103a:	4955      	ldr	r1, [pc, #340]	; (8011190 <tcp_input+0x544>)
 801103c:	484a      	ldr	r0, [pc, #296]	; (8011168 <tcp_input+0x51c>)
 801103e:	f00f f9cd 	bl	80203dc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011042:	69bb      	ldr	r3, [r7, #24]
 8011044:	7a1b      	ldrb	r3, [r3, #8]
 8011046:	2b00      	cmp	r3, #0
 8011048:	d009      	beq.n	801105e <tcp_input+0x412>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801104a:	69bb      	ldr	r3, [r7, #24]
 801104c:	7a1a      	ldrb	r2, [r3, #8]
 801104e:	4b49      	ldr	r3, [pc, #292]	; (8011174 <tcp_input+0x528>)
 8011050:	685b      	ldr	r3, [r3, #4]
 8011052:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011056:	3301      	adds	r3, #1
 8011058:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801105a:	429a      	cmp	r2, r3
 801105c:	d122      	bne.n	80110a4 <tcp_input+0x458>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801105e:	69bb      	ldr	r3, [r7, #24]
 8011060:	8b1a      	ldrh	r2, [r3, #24]
 8011062:	4b45      	ldr	r3, [pc, #276]	; (8011178 <tcp_input+0x52c>)
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	881b      	ldrh	r3, [r3, #0]
 8011068:	b29b      	uxth	r3, r3
 801106a:	429a      	cmp	r2, r3
 801106c:	d11b      	bne.n	80110a6 <tcp_input+0x45a>
          pcb->local_port == tcphdr->dest &&
 801106e:	69bb      	ldr	r3, [r7, #24]
 8011070:	8ada      	ldrh	r2, [r3, #22]
 8011072:	4b41      	ldr	r3, [pc, #260]	; (8011178 <tcp_input+0x52c>)
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	885b      	ldrh	r3, [r3, #2]
 8011078:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801107a:	429a      	cmp	r2, r3
 801107c:	d113      	bne.n	80110a6 <tcp_input+0x45a>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801107e:	69bb      	ldr	r3, [r7, #24]
 8011080:	685a      	ldr	r2, [r3, #4]
 8011082:	4b3c      	ldr	r3, [pc, #240]	; (8011174 <tcp_input+0x528>)
 8011084:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8011086:	429a      	cmp	r2, r3
 8011088:	d10d      	bne.n	80110a6 <tcp_input+0x45a>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801108a:	69bb      	ldr	r3, [r7, #24]
 801108c:	681a      	ldr	r2, [r3, #0]
 801108e:	4b39      	ldr	r3, [pc, #228]	; (8011174 <tcp_input+0x528>)
 8011090:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011092:	429a      	cmp	r2, r3
 8011094:	d107      	bne.n	80110a6 <tcp_input+0x45a>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8011096:	69b8      	ldr	r0, [r7, #24]
 8011098:	f000 fb80 	bl	801179c <tcp_timewait_input>
        }
        pbuf_free(p);
 801109c:	6878      	ldr	r0, [r7, #4]
 801109e:	f7fd fdf7 	bl	800ec90 <pbuf_free>
        return;
 80110a2:	e222      	b.n	80114ea <tcp_input+0x89e>
        continue;
 80110a4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80110a6:	69bb      	ldr	r3, [r7, #24]
 80110a8:	68db      	ldr	r3, [r3, #12]
 80110aa:	61bb      	str	r3, [r7, #24]
 80110ac:	69bb      	ldr	r3, [r7, #24]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d1bc      	bne.n	801102c <tcp_input+0x3e0>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80110b2:	2300      	movs	r3, #0
 80110b4:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80110b6:	4b37      	ldr	r3, [pc, #220]	; (8011194 <tcp_input+0x548>)
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	617b      	str	r3, [r7, #20]
 80110bc:	e02a      	b.n	8011114 <tcp_input+0x4c8>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80110be:	697b      	ldr	r3, [r7, #20]
 80110c0:	7a1b      	ldrb	r3, [r3, #8]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d00c      	beq.n	80110e0 <tcp_input+0x494>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80110c6:	697b      	ldr	r3, [r7, #20]
 80110c8:	7a1a      	ldrb	r2, [r3, #8]
 80110ca:	4b2a      	ldr	r3, [pc, #168]	; (8011174 <tcp_input+0x528>)
 80110cc:	685b      	ldr	r3, [r3, #4]
 80110ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80110d2:	3301      	adds	r3, #1
 80110d4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80110d6:	429a      	cmp	r2, r3
 80110d8:	d002      	beq.n	80110e0 <tcp_input+0x494>
        prev = (struct tcp_pcb *)lpcb;
 80110da:	697b      	ldr	r3, [r7, #20]
 80110dc:	61fb      	str	r3, [r7, #28]
        continue;
 80110de:	e016      	b.n	801110e <tcp_input+0x4c2>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80110e0:	697b      	ldr	r3, [r7, #20]
 80110e2:	8ada      	ldrh	r2, [r3, #22]
 80110e4:	4b24      	ldr	r3, [pc, #144]	; (8011178 <tcp_input+0x52c>)
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	885b      	ldrh	r3, [r3, #2]
 80110ea:	b29b      	uxth	r3, r3
 80110ec:	429a      	cmp	r2, r3
 80110ee:	d10c      	bne.n	801110a <tcp_input+0x4be>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80110f0:	697b      	ldr	r3, [r7, #20]
 80110f2:	681a      	ldr	r2, [r3, #0]
 80110f4:	4b1f      	ldr	r3, [pc, #124]	; (8011174 <tcp_input+0x528>)
 80110f6:	695b      	ldr	r3, [r3, #20]
 80110f8:	429a      	cmp	r2, r3
 80110fa:	d00f      	beq.n	801111c <tcp_input+0x4d0>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80110fc:	697b      	ldr	r3, [r7, #20]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d00d      	beq.n	801111e <tcp_input+0x4d2>
 8011102:	697b      	ldr	r3, [r7, #20]
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	2b00      	cmp	r3, #0
 8011108:	d009      	beq.n	801111e <tcp_input+0x4d2>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801110a:	697b      	ldr	r3, [r7, #20]
 801110c:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801110e:	697b      	ldr	r3, [r7, #20]
 8011110:	68db      	ldr	r3, [r3, #12]
 8011112:	617b      	str	r3, [r7, #20]
 8011114:	697b      	ldr	r3, [r7, #20]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d1d1      	bne.n	80110be <tcp_input+0x472>
 801111a:	e000      	b.n	801111e <tcp_input+0x4d2>
            break;
 801111c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801111e:	697b      	ldr	r3, [r7, #20]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d039      	beq.n	8011198 <tcp_input+0x54c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8011124:	69fb      	ldr	r3, [r7, #28]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d00b      	beq.n	8011142 <tcp_input+0x4f6>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801112a:	697b      	ldr	r3, [r7, #20]
 801112c:	68da      	ldr	r2, [r3, #12]
 801112e:	69fb      	ldr	r3, [r7, #28]
 8011130:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8011132:	4b18      	ldr	r3, [pc, #96]	; (8011194 <tcp_input+0x548>)
 8011134:	681a      	ldr	r2, [r3, #0]
 8011136:	697b      	ldr	r3, [r7, #20]
 8011138:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801113a:	4a16      	ldr	r2, [pc, #88]	; (8011194 <tcp_input+0x548>)
 801113c:	697b      	ldr	r3, [r7, #20]
 801113e:	6013      	str	r3, [r2, #0]
 8011140:	e007      	b.n	8011152 <tcp_input+0x506>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8011142:	4b10      	ldr	r3, [pc, #64]	; (8011184 <tcp_input+0x538>)
 8011144:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8011148:	3301      	adds	r3, #1
 801114a:	b29a      	uxth	r2, r3
 801114c:	4b0d      	ldr	r3, [pc, #52]	; (8011184 <tcp_input+0x538>)
 801114e:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8011152:	6978      	ldr	r0, [r7, #20]
 8011154:	f000 fa1a 	bl	801158c <tcp_listen_input>
      }
      pbuf_free(p);
 8011158:	6878      	ldr	r0, [r7, #4]
 801115a:	f7fd fd99 	bl	800ec90 <pbuf_free>
      return;
 801115e:	e1c4      	b.n	80114ea <tcp_input+0x89e>
 8011160:	08022bf0 	.word	0x08022bf0
 8011164:	08022ca0 	.word	0x08022ca0
 8011168:	08022c3c 	.word	0x08022c3c
 801116c:	08022cc8 	.word	0x08022cc8
 8011170:	08022cf4 	.word	0x08022cf4
 8011174:	200070d4 	.word	0x200070d4
 8011178:	20006858 	.word	0x20006858
 801117c:	08022d1c 	.word	0x08022d1c
 8011180:	2000a514 	.word	0x2000a514
 8011184:	2000a3ec 	.word	0x2000a3ec
 8011188:	08022d48 	.word	0x08022d48
 801118c:	2000a524 	.word	0x2000a524
 8011190:	08022d74 	.word	0x08022d74
 8011194:	2000a51c 	.word	0x2000a51c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8011198:	69bb      	ldr	r3, [r7, #24]
 801119a:	2b00      	cmp	r3, #0
 801119c:	f000 815e 	beq.w	801145c <tcp_input+0x810>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80111a0:	4ba1      	ldr	r3, [pc, #644]	; (8011428 <tcp_input+0x7dc>)
 80111a2:	2200      	movs	r2, #0
 80111a4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	891a      	ldrh	r2, [r3, #8]
 80111aa:	4b9f      	ldr	r3, [pc, #636]	; (8011428 <tcp_input+0x7dc>)
 80111ac:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80111ae:	4a9e      	ldr	r2, [pc, #632]	; (8011428 <tcp_input+0x7dc>)
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80111b4:	4b9d      	ldr	r3, [pc, #628]	; (801142c <tcp_input+0x7e0>)
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	4a9b      	ldr	r2, [pc, #620]	; (8011428 <tcp_input+0x7dc>)
 80111ba:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 80111bc:	4b9c      	ldr	r3, [pc, #624]	; (8011430 <tcp_input+0x7e4>)
 80111be:	2200      	movs	r2, #0
 80111c0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80111c2:	4b9c      	ldr	r3, [pc, #624]	; (8011434 <tcp_input+0x7e8>)
 80111c4:	2200      	movs	r2, #0
 80111c6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80111c8:	4b9b      	ldr	r3, [pc, #620]	; (8011438 <tcp_input+0x7ec>)
 80111ca:	2200      	movs	r2, #0
 80111cc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80111ce:	4b9b      	ldr	r3, [pc, #620]	; (801143c <tcp_input+0x7f0>)
 80111d0:	781b      	ldrb	r3, [r3, #0]
 80111d2:	f003 0308 	and.w	r3, r3, #8
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d006      	beq.n	80111e8 <tcp_input+0x59c>
      p->flags |= PBUF_FLAG_PUSH;
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	7b5b      	ldrb	r3, [r3, #13]
 80111de:	f043 0301 	orr.w	r3, r3, #1
 80111e2:	b2da      	uxtb	r2, r3
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80111e8:	69bb      	ldr	r3, [r7, #24]
 80111ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d01e      	beq.n	801122e <tcp_input+0x5e2>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80111f0:	69b8      	ldr	r0, [r7, #24]
 80111f2:	f7ff f8b5 	bl	8010360 <tcp_process_refused_data>
 80111f6:	4603      	mov	r3, r0
 80111f8:	f113 0f0d 	cmn.w	r3, #13
 80111fc:	d007      	beq.n	801120e <tcp_input+0x5c2>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80111fe:	69bb      	ldr	r3, [r7, #24]
 8011200:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011202:	2b00      	cmp	r3, #0
 8011204:	d013      	beq.n	801122e <tcp_input+0x5e2>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011206:	4b8e      	ldr	r3, [pc, #568]	; (8011440 <tcp_input+0x7f4>)
 8011208:	881b      	ldrh	r3, [r3, #0]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d00f      	beq.n	801122e <tcp_input+0x5e2>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801120e:	69bb      	ldr	r3, [r7, #24]
 8011210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011212:	2b00      	cmp	r3, #0
 8011214:	d102      	bne.n	801121c <tcp_input+0x5d0>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8011216:	69b8      	ldr	r0, [r7, #24]
 8011218:	f003 fa12 	bl	8014640 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
 801121c:	4b89      	ldr	r3, [pc, #548]	; (8011444 <tcp_input+0x7f8>)
 801121e:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8011222:	3301      	adds	r3, #1
 8011224:	b29a      	uxth	r2, r3
 8011226:	4b87      	ldr	r3, [pc, #540]	; (8011444 <tcp_input+0x7f8>)
 8011228:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801122c:	e0e9      	b.n	8011402 <tcp_input+0x7b6>
      }
    }
    tcp_input_pcb = pcb;
 801122e:	4a86      	ldr	r2, [pc, #536]	; (8011448 <tcp_input+0x7fc>)
 8011230:	69bb      	ldr	r3, [r7, #24]
 8011232:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8011234:	69b8      	ldr	r0, [r7, #24]
 8011236:	f000 fb2b 	bl	8011890 <tcp_process>
 801123a:	4603      	mov	r3, r0
 801123c:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801123e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011242:	f113 0f0d 	cmn.w	r3, #13
 8011246:	f000 80d1 	beq.w	80113ec <tcp_input+0x7a0>
      if (recv_flags & TF_RESET) {
 801124a:	4b7a      	ldr	r3, [pc, #488]	; (8011434 <tcp_input+0x7e8>)
 801124c:	781b      	ldrb	r3, [r3, #0]
 801124e:	f003 0308 	and.w	r3, r3, #8
 8011252:	2b00      	cmp	r3, #0
 8011254:	d015      	beq.n	8011282 <tcp_input+0x636>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8011256:	69bb      	ldr	r3, [r7, #24]
 8011258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801125c:	2b00      	cmp	r3, #0
 801125e:	d008      	beq.n	8011272 <tcp_input+0x626>
 8011260:	69bb      	ldr	r3, [r7, #24]
 8011262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011266:	69ba      	ldr	r2, [r7, #24]
 8011268:	6912      	ldr	r2, [r2, #16]
 801126a:	f06f 010d 	mvn.w	r1, #13
 801126e:	4610      	mov	r0, r2
 8011270:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011272:	69b9      	ldr	r1, [r7, #24]
 8011274:	4875      	ldr	r0, [pc, #468]	; (801144c <tcp_input+0x800>)
 8011276:	f7ff fb6b 	bl	8010950 <tcp_pcb_remove>
        tcp_free(pcb);
 801127a:	69b8      	ldr	r0, [r7, #24]
 801127c:	f7fe f92e 	bl	800f4dc <tcp_free>
 8011280:	e0bf      	b.n	8011402 <tcp_input+0x7b6>
      } else {
        err = ERR_OK;
 8011282:	2300      	movs	r3, #0
 8011284:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8011286:	4b6c      	ldr	r3, [pc, #432]	; (8011438 <tcp_input+0x7ec>)
 8011288:	881b      	ldrh	r3, [r3, #0]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d01d      	beq.n	80112ca <tcp_input+0x67e>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801128e:	4b6a      	ldr	r3, [pc, #424]	; (8011438 <tcp_input+0x7ec>)
 8011290:	881b      	ldrh	r3, [r3, #0]
 8011292:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8011294:	69bb      	ldr	r3, [r7, #24]
 8011296:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801129a:	2b00      	cmp	r3, #0
 801129c:	d00a      	beq.n	80112b4 <tcp_input+0x668>
 801129e:	69bb      	ldr	r3, [r7, #24]
 80112a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80112a4:	69ba      	ldr	r2, [r7, #24]
 80112a6:	6910      	ldr	r0, [r2, #16]
 80112a8:	89fa      	ldrh	r2, [r7, #14]
 80112aa:	69b9      	ldr	r1, [r7, #24]
 80112ac:	4798      	blx	r3
 80112ae:	4603      	mov	r3, r0
 80112b0:	74fb      	strb	r3, [r7, #19]
 80112b2:	e001      	b.n	80112b8 <tcp_input+0x66c>
 80112b4:	2300      	movs	r3, #0
 80112b6:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80112b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80112bc:	f113 0f0d 	cmn.w	r3, #13
 80112c0:	f000 8096 	beq.w	80113f0 <tcp_input+0x7a4>
              goto aborted;
            }
          }
          recv_acked = 0;
 80112c4:	4b5c      	ldr	r3, [pc, #368]	; (8011438 <tcp_input+0x7ec>)
 80112c6:	2200      	movs	r2, #0
 80112c8:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80112ca:	69b8      	ldr	r0, [r7, #24]
 80112cc:	f000 f91e 	bl	801150c <tcp_input_delayed_close>
 80112d0:	4603      	mov	r3, r0
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	f040 808e 	bne.w	80113f4 <tcp_input+0x7a8>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80112d8:	4b55      	ldr	r3, [pc, #340]	; (8011430 <tcp_input+0x7e4>)
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d041      	beq.n	8011364 <tcp_input+0x718>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80112e0:	69bb      	ldr	r3, [r7, #24]
 80112e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d006      	beq.n	80112f6 <tcp_input+0x6aa>
 80112e8:	4b59      	ldr	r3, [pc, #356]	; (8011450 <tcp_input+0x804>)
 80112ea:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80112ee:	4959      	ldr	r1, [pc, #356]	; (8011454 <tcp_input+0x808>)
 80112f0:	4859      	ldr	r0, [pc, #356]	; (8011458 <tcp_input+0x80c>)
 80112f2:	f00f f873 	bl	80203dc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80112f6:	69bb      	ldr	r3, [r7, #24]
 80112f8:	8b5b      	ldrh	r3, [r3, #26]
 80112fa:	f003 0310 	and.w	r3, r3, #16
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d008      	beq.n	8011314 <tcp_input+0x6c8>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8011302:	4b4b      	ldr	r3, [pc, #300]	; (8011430 <tcp_input+0x7e4>)
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	4618      	mov	r0, r3
 8011308:	f7fd fcc2 	bl	800ec90 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801130c:	69b8      	ldr	r0, [r7, #24]
 801130e:	f7fe fbcd 	bl	800faac <tcp_abort>
            goto aborted;
 8011312:	e076      	b.n	8011402 <tcp_input+0x7b6>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8011314:	69bb      	ldr	r3, [r7, #24]
 8011316:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801131a:	2b00      	cmp	r3, #0
 801131c:	d00c      	beq.n	8011338 <tcp_input+0x6ec>
 801131e:	69bb      	ldr	r3, [r7, #24]
 8011320:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011324:	69bb      	ldr	r3, [r7, #24]
 8011326:	6918      	ldr	r0, [r3, #16]
 8011328:	4b41      	ldr	r3, [pc, #260]	; (8011430 <tcp_input+0x7e4>)
 801132a:	681a      	ldr	r2, [r3, #0]
 801132c:	2300      	movs	r3, #0
 801132e:	69b9      	ldr	r1, [r7, #24]
 8011330:	47a0      	blx	r4
 8011332:	4603      	mov	r3, r0
 8011334:	74fb      	strb	r3, [r7, #19]
 8011336:	e008      	b.n	801134a <tcp_input+0x6fe>
 8011338:	4b3d      	ldr	r3, [pc, #244]	; (8011430 <tcp_input+0x7e4>)
 801133a:	681a      	ldr	r2, [r3, #0]
 801133c:	2300      	movs	r3, #0
 801133e:	69b9      	ldr	r1, [r7, #24]
 8011340:	2000      	movs	r0, #0
 8011342:	f7ff f8e3 	bl	801050c <tcp_recv_null>
 8011346:	4603      	mov	r3, r0
 8011348:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801134a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801134e:	f113 0f0d 	cmn.w	r3, #13
 8011352:	d051      	beq.n	80113f8 <tcp_input+0x7ac>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8011354:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d003      	beq.n	8011364 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801135c:	4b34      	ldr	r3, [pc, #208]	; (8011430 <tcp_input+0x7e4>)
 801135e:	681a      	ldr	r2, [r3, #0]
 8011360:	69bb      	ldr	r3, [r7, #24]
 8011362:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8011364:	4b33      	ldr	r3, [pc, #204]	; (8011434 <tcp_input+0x7e8>)
 8011366:	781b      	ldrb	r3, [r3, #0]
 8011368:	f003 0320 	and.w	r3, r3, #32
 801136c:	2b00      	cmp	r3, #0
 801136e:	d030      	beq.n	80113d2 <tcp_input+0x786>
          if (pcb->refused_data != NULL) {
 8011370:	69bb      	ldr	r3, [r7, #24]
 8011372:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011374:	2b00      	cmp	r3, #0
 8011376:	d009      	beq.n	801138c <tcp_input+0x740>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8011378:	69bb      	ldr	r3, [r7, #24]
 801137a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801137c:	7b5a      	ldrb	r2, [r3, #13]
 801137e:	69bb      	ldr	r3, [r7, #24]
 8011380:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011382:	f042 0220 	orr.w	r2, r2, #32
 8011386:	b2d2      	uxtb	r2, r2
 8011388:	735a      	strb	r2, [r3, #13]
 801138a:	e022      	b.n	80113d2 <tcp_input+0x786>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801138c:	69bb      	ldr	r3, [r7, #24]
 801138e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011390:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011394:	d005      	beq.n	80113a2 <tcp_input+0x756>
              pcb->rcv_wnd++;
 8011396:	69bb      	ldr	r3, [r7, #24]
 8011398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801139a:	3301      	adds	r3, #1
 801139c:	b29a      	uxth	r2, r3
 801139e:	69bb      	ldr	r3, [r7, #24]
 80113a0:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80113a2:	69bb      	ldr	r3, [r7, #24]
 80113a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d00b      	beq.n	80113c4 <tcp_input+0x778>
 80113ac:	69bb      	ldr	r3, [r7, #24]
 80113ae:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80113b2:	69bb      	ldr	r3, [r7, #24]
 80113b4:	6918      	ldr	r0, [r3, #16]
 80113b6:	2300      	movs	r3, #0
 80113b8:	2200      	movs	r2, #0
 80113ba:	69b9      	ldr	r1, [r7, #24]
 80113bc:	47a0      	blx	r4
 80113be:	4603      	mov	r3, r0
 80113c0:	74fb      	strb	r3, [r7, #19]
 80113c2:	e001      	b.n	80113c8 <tcp_input+0x77c>
 80113c4:	2300      	movs	r3, #0
 80113c6:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80113c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80113cc:	f113 0f0d 	cmn.w	r3, #13
 80113d0:	d014      	beq.n	80113fc <tcp_input+0x7b0>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80113d2:	4b1d      	ldr	r3, [pc, #116]	; (8011448 <tcp_input+0x7fc>)
 80113d4:	2200      	movs	r2, #0
 80113d6:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80113d8:	69b8      	ldr	r0, [r7, #24]
 80113da:	f000 f897 	bl	801150c <tcp_input_delayed_close>
 80113de:	4603      	mov	r3, r0
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d10d      	bne.n	8011400 <tcp_input+0x7b4>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80113e4:	69b8      	ldr	r0, [r7, #24]
 80113e6:	f002 fb05 	bl	80139f4 <tcp_output>
 80113ea:	e00a      	b.n	8011402 <tcp_input+0x7b6>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80113ec:	bf00      	nop
 80113ee:	e008      	b.n	8011402 <tcp_input+0x7b6>
              goto aborted;
 80113f0:	bf00      	nop
 80113f2:	e006      	b.n	8011402 <tcp_input+0x7b6>
          goto aborted;
 80113f4:	bf00      	nop
 80113f6:	e004      	b.n	8011402 <tcp_input+0x7b6>
            goto aborted;
 80113f8:	bf00      	nop
 80113fa:	e002      	b.n	8011402 <tcp_input+0x7b6>
              goto aborted;
 80113fc:	bf00      	nop
 80113fe:	e000      	b.n	8011402 <tcp_input+0x7b6>
          goto aborted;
 8011400:	bf00      	nop
    tcp_input_pcb = NULL;
 8011402:	4b11      	ldr	r3, [pc, #68]	; (8011448 <tcp_input+0x7fc>)
 8011404:	2200      	movs	r2, #0
 8011406:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8011408:	4b09      	ldr	r3, [pc, #36]	; (8011430 <tcp_input+0x7e4>)
 801140a:	2200      	movs	r2, #0
 801140c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801140e:	4b06      	ldr	r3, [pc, #24]	; (8011428 <tcp_input+0x7dc>)
 8011410:	685b      	ldr	r3, [r3, #4]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d068      	beq.n	80114e8 <tcp_input+0x89c>
      pbuf_free(inseg.p);
 8011416:	4b04      	ldr	r3, [pc, #16]	; (8011428 <tcp_input+0x7dc>)
 8011418:	685b      	ldr	r3, [r3, #4]
 801141a:	4618      	mov	r0, r3
 801141c:	f7fd fc38 	bl	800ec90 <pbuf_free>
      inseg.p = NULL;
 8011420:	4b01      	ldr	r3, [pc, #4]	; (8011428 <tcp_input+0x7dc>)
 8011422:	2200      	movs	r2, #0
 8011424:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8011426:	e05f      	b.n	80114e8 <tcp_input+0x89c>
 8011428:	20006844 	.word	0x20006844
 801142c:	20006858 	.word	0x20006858
 8011430:	20006878 	.word	0x20006878
 8011434:	20006875 	.word	0x20006875
 8011438:	20006870 	.word	0x20006870
 801143c:	20006874 	.word	0x20006874
 8011440:	20006872 	.word	0x20006872
 8011444:	2000a3ec 	.word	0x2000a3ec
 8011448:	2000a528 	.word	0x2000a528
 801144c:	2000a514 	.word	0x2000a514
 8011450:	08022bf0 	.word	0x08022bf0
 8011454:	08022da4 	.word	0x08022da4
 8011458:	08022c3c 	.word	0x08022c3c
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801145c:	4b24      	ldr	r3, [pc, #144]	; (80114f0 <tcp_input+0x8a4>)
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	899b      	ldrh	r3, [r3, #12]
 8011462:	b29b      	uxth	r3, r3
 8011464:	4618      	mov	r0, r3
 8011466:	f7fb fa8b 	bl	800c980 <lwip_htons>
 801146a:	4603      	mov	r3, r0
 801146c:	b2db      	uxtb	r3, r3
 801146e:	f003 0304 	and.w	r3, r3, #4
 8011472:	2b00      	cmp	r3, #0
 8011474:	d128      	bne.n	80114c8 <tcp_input+0x87c>
      TCP_STATS_INC(tcp.proterr);
 8011476:	4b1f      	ldr	r3, [pc, #124]	; (80114f4 <tcp_input+0x8a8>)
 8011478:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 801147c:	3301      	adds	r3, #1
 801147e:	b29a      	uxth	r2, r3
 8011480:	4b1c      	ldr	r3, [pc, #112]	; (80114f4 <tcp_input+0x8a8>)
 8011482:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
      TCP_STATS_INC(tcp.drop);
 8011486:	4b1b      	ldr	r3, [pc, #108]	; (80114f4 <tcp_input+0x8a8>)
 8011488:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 801148c:	3301      	adds	r3, #1
 801148e:	b29a      	uxth	r2, r3
 8011490:	4b18      	ldr	r3, [pc, #96]	; (80114f4 <tcp_input+0x8a8>)
 8011492:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011496:	4b18      	ldr	r3, [pc, #96]	; (80114f8 <tcp_input+0x8ac>)
 8011498:	6819      	ldr	r1, [r3, #0]
 801149a:	4b18      	ldr	r3, [pc, #96]	; (80114fc <tcp_input+0x8b0>)
 801149c:	881b      	ldrh	r3, [r3, #0]
 801149e:	461a      	mov	r2, r3
 80114a0:	4b17      	ldr	r3, [pc, #92]	; (8011500 <tcp_input+0x8b4>)
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80114a6:	4b12      	ldr	r3, [pc, #72]	; (80114f0 <tcp_input+0x8a4>)
 80114a8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80114aa:	885b      	ldrh	r3, [r3, #2]
 80114ac:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80114ae:	4a10      	ldr	r2, [pc, #64]	; (80114f0 <tcp_input+0x8a4>)
 80114b0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80114b2:	8812      	ldrh	r2, [r2, #0]
 80114b4:	b292      	uxth	r2, r2
 80114b6:	9202      	str	r2, [sp, #8]
 80114b8:	9301      	str	r3, [sp, #4]
 80114ba:	4b12      	ldr	r3, [pc, #72]	; (8011504 <tcp_input+0x8b8>)
 80114bc:	9300      	str	r3, [sp, #0]
 80114be:	4b12      	ldr	r3, [pc, #72]	; (8011508 <tcp_input+0x8bc>)
 80114c0:	4602      	mov	r2, r0
 80114c2:	2000      	movs	r0, #0
 80114c4:	f003 f86a 	bl	801459c <tcp_rst>
    pbuf_free(p);
 80114c8:	6878      	ldr	r0, [r7, #4]
 80114ca:	f7fd fbe1 	bl	800ec90 <pbuf_free>
  return;
 80114ce:	e00b      	b.n	80114e8 <tcp_input+0x89c>
dropped:
  TCP_STATS_INC(tcp.drop);
 80114d0:	4b08      	ldr	r3, [pc, #32]	; (80114f4 <tcp_input+0x8a8>)
 80114d2:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 80114d6:	3301      	adds	r3, #1
 80114d8:	b29a      	uxth	r2, r3
 80114da:	4b06      	ldr	r3, [pc, #24]	; (80114f4 <tcp_input+0x8a8>)
 80114dc:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80114e0:	6878      	ldr	r0, [r7, #4]
 80114e2:	f7fd fbd5 	bl	800ec90 <pbuf_free>
 80114e6:	e000      	b.n	80114ea <tcp_input+0x89e>
  return;
 80114e8:	bf00      	nop
}
 80114ea:	3724      	adds	r7, #36	; 0x24
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bd90      	pop	{r4, r7, pc}
 80114f0:	20006858 	.word	0x20006858
 80114f4:	2000a3ec 	.word	0x2000a3ec
 80114f8:	2000686c 	.word	0x2000686c
 80114fc:	20006872 	.word	0x20006872
 8011500:	20006868 	.word	0x20006868
 8011504:	200070e4 	.word	0x200070e4
 8011508:	200070e8 	.word	0x200070e8

0801150c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801150c:	b580      	push	{r7, lr}
 801150e:	b082      	sub	sp, #8
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d106      	bne.n	8011528 <tcp_input_delayed_close+0x1c>
 801151a:	4b17      	ldr	r3, [pc, #92]	; (8011578 <tcp_input_delayed_close+0x6c>)
 801151c:	f240 225a 	movw	r2, #602	; 0x25a
 8011520:	4916      	ldr	r1, [pc, #88]	; (801157c <tcp_input_delayed_close+0x70>)
 8011522:	4817      	ldr	r0, [pc, #92]	; (8011580 <tcp_input_delayed_close+0x74>)
 8011524:	f00e ff5a 	bl	80203dc <iprintf>

  if (recv_flags & TF_CLOSED) {
 8011528:	4b16      	ldr	r3, [pc, #88]	; (8011584 <tcp_input_delayed_close+0x78>)
 801152a:	781b      	ldrb	r3, [r3, #0]
 801152c:	f003 0310 	and.w	r3, r3, #16
 8011530:	2b00      	cmp	r3, #0
 8011532:	d01c      	beq.n	801156e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	8b5b      	ldrh	r3, [r3, #26]
 8011538:	f003 0310 	and.w	r3, r3, #16
 801153c:	2b00      	cmp	r3, #0
 801153e:	d10d      	bne.n	801155c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011546:	2b00      	cmp	r3, #0
 8011548:	d008      	beq.n	801155c <tcp_input_delayed_close+0x50>
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011550:	687a      	ldr	r2, [r7, #4]
 8011552:	6912      	ldr	r2, [r2, #16]
 8011554:	f06f 010e 	mvn.w	r1, #14
 8011558:	4610      	mov	r0, r2
 801155a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801155c:	6879      	ldr	r1, [r7, #4]
 801155e:	480a      	ldr	r0, [pc, #40]	; (8011588 <tcp_input_delayed_close+0x7c>)
 8011560:	f7ff f9f6 	bl	8010950 <tcp_pcb_remove>
    tcp_free(pcb);
 8011564:	6878      	ldr	r0, [r7, #4]
 8011566:	f7fd ffb9 	bl	800f4dc <tcp_free>
    return 1;
 801156a:	2301      	movs	r3, #1
 801156c:	e000      	b.n	8011570 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801156e:	2300      	movs	r3, #0
}
 8011570:	4618      	mov	r0, r3
 8011572:	3708      	adds	r7, #8
 8011574:	46bd      	mov	sp, r7
 8011576:	bd80      	pop	{r7, pc}
 8011578:	08022bf0 	.word	0x08022bf0
 801157c:	08022dc0 	.word	0x08022dc0
 8011580:	08022c3c 	.word	0x08022c3c
 8011584:	20006875 	.word	0x20006875
 8011588:	2000a514 	.word	0x2000a514

0801158c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801158c:	b590      	push	{r4, r7, lr}
 801158e:	b08b      	sub	sp, #44	; 0x2c
 8011590:	af04      	add	r7, sp, #16
 8011592:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011594:	4b73      	ldr	r3, [pc, #460]	; (8011764 <tcp_listen_input+0x1d8>)
 8011596:	781b      	ldrb	r3, [r3, #0]
 8011598:	f003 0304 	and.w	r3, r3, #4
 801159c:	2b00      	cmp	r3, #0
 801159e:	f040 80da 	bne.w	8011756 <tcp_listen_input+0x1ca>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d106      	bne.n	80115b6 <tcp_listen_input+0x2a>
 80115a8:	4b6f      	ldr	r3, [pc, #444]	; (8011768 <tcp_listen_input+0x1dc>)
 80115aa:	f240 2281 	movw	r2, #641	; 0x281
 80115ae:	496f      	ldr	r1, [pc, #444]	; (801176c <tcp_listen_input+0x1e0>)
 80115b0:	486f      	ldr	r0, [pc, #444]	; (8011770 <tcp_listen_input+0x1e4>)
 80115b2:	f00e ff13 	bl	80203dc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80115b6:	4b6b      	ldr	r3, [pc, #428]	; (8011764 <tcp_listen_input+0x1d8>)
 80115b8:	781b      	ldrb	r3, [r3, #0]
 80115ba:	f003 0310 	and.w	r3, r3, #16
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d019      	beq.n	80115f6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80115c2:	4b6c      	ldr	r3, [pc, #432]	; (8011774 <tcp_listen_input+0x1e8>)
 80115c4:	6819      	ldr	r1, [r3, #0]
 80115c6:	4b6c      	ldr	r3, [pc, #432]	; (8011778 <tcp_listen_input+0x1ec>)
 80115c8:	881b      	ldrh	r3, [r3, #0]
 80115ca:	461a      	mov	r2, r3
 80115cc:	4b6b      	ldr	r3, [pc, #428]	; (801177c <tcp_listen_input+0x1f0>)
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80115d2:	4b6b      	ldr	r3, [pc, #428]	; (8011780 <tcp_listen_input+0x1f4>)
 80115d4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80115d6:	885b      	ldrh	r3, [r3, #2]
 80115d8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80115da:	4a69      	ldr	r2, [pc, #420]	; (8011780 <tcp_listen_input+0x1f4>)
 80115dc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80115de:	8812      	ldrh	r2, [r2, #0]
 80115e0:	b292      	uxth	r2, r2
 80115e2:	9202      	str	r2, [sp, #8]
 80115e4:	9301      	str	r3, [sp, #4]
 80115e6:	4b67      	ldr	r3, [pc, #412]	; (8011784 <tcp_listen_input+0x1f8>)
 80115e8:	9300      	str	r3, [sp, #0]
 80115ea:	4b67      	ldr	r3, [pc, #412]	; (8011788 <tcp_listen_input+0x1fc>)
 80115ec:	4602      	mov	r2, r0
 80115ee:	6878      	ldr	r0, [r7, #4]
 80115f0:	f002 ffd4 	bl	801459c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80115f4:	e0b1      	b.n	801175a <tcp_listen_input+0x1ce>
  } else if (flags & TCP_SYN) {
 80115f6:	4b5b      	ldr	r3, [pc, #364]	; (8011764 <tcp_listen_input+0x1d8>)
 80115f8:	781b      	ldrb	r3, [r3, #0]
 80115fa:	f003 0302 	and.w	r3, r3, #2
 80115fe:	2b00      	cmp	r3, #0
 8011600:	f000 80ab 	beq.w	801175a <tcp_listen_input+0x1ce>
    npcb = tcp_alloc(pcb->prio);
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	7d5b      	ldrb	r3, [r3, #21]
 8011608:	4618      	mov	r0, r3
 801160a:	f7ff f8a3 	bl	8010754 <tcp_alloc>
 801160e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011610:	697b      	ldr	r3, [r7, #20]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d119      	bne.n	801164a <tcp_listen_input+0xbe>
      TCP_STATS_INC(tcp.memerr);
 8011616:	4b5d      	ldr	r3, [pc, #372]	; (801178c <tcp_listen_input+0x200>)
 8011618:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 801161c:	3301      	adds	r3, #1
 801161e:	b29a      	uxth	r2, r3
 8011620:	4b5a      	ldr	r3, [pc, #360]	; (801178c <tcp_listen_input+0x200>)
 8011622:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	699b      	ldr	r3, [r3, #24]
 801162a:	2b00      	cmp	r3, #0
 801162c:	d00a      	beq.n	8011644 <tcp_listen_input+0xb8>
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	699b      	ldr	r3, [r3, #24]
 8011632:	687a      	ldr	r2, [r7, #4]
 8011634:	6910      	ldr	r0, [r2, #16]
 8011636:	f04f 32ff 	mov.w	r2, #4294967295
 801163a:	2100      	movs	r1, #0
 801163c:	4798      	blx	r3
 801163e:	4603      	mov	r3, r0
 8011640:	73bb      	strb	r3, [r7, #14]
      return;
 8011642:	e08b      	b.n	801175c <tcp_listen_input+0x1d0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011644:	23f0      	movs	r3, #240	; 0xf0
 8011646:	73bb      	strb	r3, [r7, #14]
      return;
 8011648:	e088      	b.n	801175c <tcp_listen_input+0x1d0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801164a:	4b51      	ldr	r3, [pc, #324]	; (8011790 <tcp_listen_input+0x204>)
 801164c:	695a      	ldr	r2, [r3, #20]
 801164e:	697b      	ldr	r3, [r7, #20]
 8011650:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011652:	4b4f      	ldr	r3, [pc, #316]	; (8011790 <tcp_listen_input+0x204>)
 8011654:	691a      	ldr	r2, [r3, #16]
 8011656:	697b      	ldr	r3, [r7, #20]
 8011658:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	8ada      	ldrh	r2, [r3, #22]
 801165e:	697b      	ldr	r3, [r7, #20]
 8011660:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011662:	4b47      	ldr	r3, [pc, #284]	; (8011780 <tcp_listen_input+0x1f4>)
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	881b      	ldrh	r3, [r3, #0]
 8011668:	b29a      	uxth	r2, r3
 801166a:	697b      	ldr	r3, [r7, #20]
 801166c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801166e:	697b      	ldr	r3, [r7, #20]
 8011670:	2203      	movs	r2, #3
 8011672:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011674:	4b41      	ldr	r3, [pc, #260]	; (801177c <tcp_listen_input+0x1f0>)
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	1c5a      	adds	r2, r3, #1
 801167a:	697b      	ldr	r3, [r7, #20]
 801167c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801167e:	697b      	ldr	r3, [r7, #20]
 8011680:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011682:	697b      	ldr	r3, [r7, #20]
 8011684:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8011686:	6978      	ldr	r0, [r7, #20]
 8011688:	f7ff f9f6 	bl	8010a78 <tcp_next_iss>
 801168c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801168e:	697b      	ldr	r3, [r7, #20]
 8011690:	693a      	ldr	r2, [r7, #16]
 8011692:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8011694:	697b      	ldr	r3, [r7, #20]
 8011696:	693a      	ldr	r2, [r7, #16]
 8011698:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801169a:	697b      	ldr	r3, [r7, #20]
 801169c:	693a      	ldr	r2, [r7, #16]
 801169e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80116a0:	697b      	ldr	r3, [r7, #20]
 80116a2:	693a      	ldr	r2, [r7, #16]
 80116a4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80116a6:	4b35      	ldr	r3, [pc, #212]	; (801177c <tcp_listen_input+0x1f0>)
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	1e5a      	subs	r2, r3, #1
 80116ac:	697b      	ldr	r3, [r7, #20]
 80116ae:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	691a      	ldr	r2, [r3, #16]
 80116b4:	697b      	ldr	r3, [r7, #20]
 80116b6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80116b8:	697b      	ldr	r3, [r7, #20]
 80116ba:	687a      	ldr	r2, [r7, #4]
 80116bc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	7a5b      	ldrb	r3, [r3, #9]
 80116c2:	f003 030c 	and.w	r3, r3, #12
 80116c6:	b2da      	uxtb	r2, r3
 80116c8:	697b      	ldr	r3, [r7, #20]
 80116ca:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	7a1a      	ldrb	r2, [r3, #8]
 80116d0:	697b      	ldr	r3, [r7, #20]
 80116d2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80116d4:	4b2f      	ldr	r3, [pc, #188]	; (8011794 <tcp_listen_input+0x208>)
 80116d6:	681a      	ldr	r2, [r3, #0]
 80116d8:	697b      	ldr	r3, [r7, #20]
 80116da:	60da      	str	r2, [r3, #12]
 80116dc:	4a2d      	ldr	r2, [pc, #180]	; (8011794 <tcp_listen_input+0x208>)
 80116de:	697b      	ldr	r3, [r7, #20]
 80116e0:	6013      	str	r3, [r2, #0]
 80116e2:	f003 f91d 	bl	8014920 <tcp_timer_needed>
 80116e6:	4b2c      	ldr	r3, [pc, #176]	; (8011798 <tcp_listen_input+0x20c>)
 80116e8:	2201      	movs	r2, #1
 80116ea:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80116ec:	6978      	ldr	r0, [r7, #20]
 80116ee:	f001 fd8f 	bl	8013210 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80116f2:	4b23      	ldr	r3, [pc, #140]	; (8011780 <tcp_listen_input+0x1f4>)
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	89db      	ldrh	r3, [r3, #14]
 80116f8:	b29a      	uxth	r2, r3
 80116fa:	697b      	ldr	r3, [r7, #20]
 80116fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011700:	697b      	ldr	r3, [r7, #20]
 8011702:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011706:	697b      	ldr	r3, [r7, #20]
 8011708:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801170c:	697b      	ldr	r3, [r7, #20]
 801170e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011710:	697b      	ldr	r3, [r7, #20]
 8011712:	3304      	adds	r3, #4
 8011714:	4618      	mov	r0, r3
 8011716:	f008 fbb7 	bl	8019e88 <ip4_route>
 801171a:	4601      	mov	r1, r0
 801171c:	697b      	ldr	r3, [r7, #20]
 801171e:	3304      	adds	r3, #4
 8011720:	461a      	mov	r2, r3
 8011722:	4620      	mov	r0, r4
 8011724:	f7ff f9ce 	bl	8010ac4 <tcp_eff_send_mss_netif>
 8011728:	4603      	mov	r3, r0
 801172a:	461a      	mov	r2, r3
 801172c:	697b      	ldr	r3, [r7, #20]
 801172e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011730:	2112      	movs	r1, #18
 8011732:	6978      	ldr	r0, [r7, #20]
 8011734:	f002 f85e 	bl	80137f4 <tcp_enqueue_flags>
 8011738:	4603      	mov	r3, r0
 801173a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801173c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011740:	2b00      	cmp	r3, #0
 8011742:	d004      	beq.n	801174e <tcp_listen_input+0x1c2>
      tcp_abandon(npcb, 0);
 8011744:	2100      	movs	r1, #0
 8011746:	6978      	ldr	r0, [r7, #20]
 8011748:	f7fe f8f2 	bl	800f930 <tcp_abandon>
      return;
 801174c:	e006      	b.n	801175c <tcp_listen_input+0x1d0>
    tcp_output(npcb);
 801174e:	6978      	ldr	r0, [r7, #20]
 8011750:	f002 f950 	bl	80139f4 <tcp_output>
  return;
 8011754:	e001      	b.n	801175a <tcp_listen_input+0x1ce>
    return;
 8011756:	bf00      	nop
 8011758:	e000      	b.n	801175c <tcp_listen_input+0x1d0>
  return;
 801175a:	bf00      	nop
}
 801175c:	371c      	adds	r7, #28
 801175e:	46bd      	mov	sp, r7
 8011760:	bd90      	pop	{r4, r7, pc}
 8011762:	bf00      	nop
 8011764:	20006874 	.word	0x20006874
 8011768:	08022bf0 	.word	0x08022bf0
 801176c:	08022de8 	.word	0x08022de8
 8011770:	08022c3c 	.word	0x08022c3c
 8011774:	2000686c 	.word	0x2000686c
 8011778:	20006872 	.word	0x20006872
 801177c:	20006868 	.word	0x20006868
 8011780:	20006858 	.word	0x20006858
 8011784:	200070e4 	.word	0x200070e4
 8011788:	200070e8 	.word	0x200070e8
 801178c:	2000a3ec 	.word	0x2000a3ec
 8011790:	200070d4 	.word	0x200070d4
 8011794:	2000a514 	.word	0x2000a514
 8011798:	2000a510 	.word	0x2000a510

0801179c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801179c:	b580      	push	{r7, lr}
 801179e:	b086      	sub	sp, #24
 80117a0:	af04      	add	r7, sp, #16
 80117a2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80117a4:	4b2f      	ldr	r3, [pc, #188]	; (8011864 <tcp_timewait_input+0xc8>)
 80117a6:	781b      	ldrb	r3, [r3, #0]
 80117a8:	f003 0304 	and.w	r3, r3, #4
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d153      	bne.n	8011858 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d106      	bne.n	80117c4 <tcp_timewait_input+0x28>
 80117b6:	4b2c      	ldr	r3, [pc, #176]	; (8011868 <tcp_timewait_input+0xcc>)
 80117b8:	f240 22ee 	movw	r2, #750	; 0x2ee
 80117bc:	492b      	ldr	r1, [pc, #172]	; (801186c <tcp_timewait_input+0xd0>)
 80117be:	482c      	ldr	r0, [pc, #176]	; (8011870 <tcp_timewait_input+0xd4>)
 80117c0:	f00e fe0c 	bl	80203dc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80117c4:	4b27      	ldr	r3, [pc, #156]	; (8011864 <tcp_timewait_input+0xc8>)
 80117c6:	781b      	ldrb	r3, [r3, #0]
 80117c8:	f003 0302 	and.w	r3, r3, #2
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d02a      	beq.n	8011826 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80117d0:	4b28      	ldr	r3, [pc, #160]	; (8011874 <tcp_timewait_input+0xd8>)
 80117d2:	681a      	ldr	r2, [r3, #0]
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117d8:	1ad3      	subs	r3, r2, r3
 80117da:	2b00      	cmp	r3, #0
 80117dc:	db2d      	blt.n	801183a <tcp_timewait_input+0x9e>
 80117de:	4b25      	ldr	r3, [pc, #148]	; (8011874 <tcp_timewait_input+0xd8>)
 80117e0:	681a      	ldr	r2, [r3, #0]
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117e6:	6879      	ldr	r1, [r7, #4]
 80117e8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80117ea:	440b      	add	r3, r1
 80117ec:	1ad3      	subs	r3, r2, r3
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	dc23      	bgt.n	801183a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80117f2:	4b21      	ldr	r3, [pc, #132]	; (8011878 <tcp_timewait_input+0xdc>)
 80117f4:	6819      	ldr	r1, [r3, #0]
 80117f6:	4b21      	ldr	r3, [pc, #132]	; (801187c <tcp_timewait_input+0xe0>)
 80117f8:	881b      	ldrh	r3, [r3, #0]
 80117fa:	461a      	mov	r2, r3
 80117fc:	4b1d      	ldr	r3, [pc, #116]	; (8011874 <tcp_timewait_input+0xd8>)
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011802:	4b1f      	ldr	r3, [pc, #124]	; (8011880 <tcp_timewait_input+0xe4>)
 8011804:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011806:	885b      	ldrh	r3, [r3, #2]
 8011808:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801180a:	4a1d      	ldr	r2, [pc, #116]	; (8011880 <tcp_timewait_input+0xe4>)
 801180c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801180e:	8812      	ldrh	r2, [r2, #0]
 8011810:	b292      	uxth	r2, r2
 8011812:	9202      	str	r2, [sp, #8]
 8011814:	9301      	str	r3, [sp, #4]
 8011816:	4b1b      	ldr	r3, [pc, #108]	; (8011884 <tcp_timewait_input+0xe8>)
 8011818:	9300      	str	r3, [sp, #0]
 801181a:	4b1b      	ldr	r3, [pc, #108]	; (8011888 <tcp_timewait_input+0xec>)
 801181c:	4602      	mov	r2, r0
 801181e:	6878      	ldr	r0, [r7, #4]
 8011820:	f002 febc 	bl	801459c <tcp_rst>
      return;
 8011824:	e01b      	b.n	801185e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8011826:	4b0f      	ldr	r3, [pc, #60]	; (8011864 <tcp_timewait_input+0xc8>)
 8011828:	781b      	ldrb	r3, [r3, #0]
 801182a:	f003 0301 	and.w	r3, r3, #1
 801182e:	2b00      	cmp	r3, #0
 8011830:	d003      	beq.n	801183a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8011832:	4b16      	ldr	r3, [pc, #88]	; (801188c <tcp_timewait_input+0xf0>)
 8011834:	681a      	ldr	r2, [r3, #0]
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801183a:	4b10      	ldr	r3, [pc, #64]	; (801187c <tcp_timewait_input+0xe0>)
 801183c:	881b      	ldrh	r3, [r3, #0]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d00c      	beq.n	801185c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	8b5b      	ldrh	r3, [r3, #26]
 8011846:	f043 0302 	orr.w	r3, r3, #2
 801184a:	b29a      	uxth	r2, r3
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011850:	6878      	ldr	r0, [r7, #4]
 8011852:	f002 f8cf 	bl	80139f4 <tcp_output>
  }
  return;
 8011856:	e001      	b.n	801185c <tcp_timewait_input+0xc0>
    return;
 8011858:	bf00      	nop
 801185a:	e000      	b.n	801185e <tcp_timewait_input+0xc2>
  return;
 801185c:	bf00      	nop
}
 801185e:	3708      	adds	r7, #8
 8011860:	46bd      	mov	sp, r7
 8011862:	bd80      	pop	{r7, pc}
 8011864:	20006874 	.word	0x20006874
 8011868:	08022bf0 	.word	0x08022bf0
 801186c:	08022e08 	.word	0x08022e08
 8011870:	08022c3c 	.word	0x08022c3c
 8011874:	20006868 	.word	0x20006868
 8011878:	2000686c 	.word	0x2000686c
 801187c:	20006872 	.word	0x20006872
 8011880:	20006858 	.word	0x20006858
 8011884:	200070e4 	.word	0x200070e4
 8011888:	200070e8 	.word	0x200070e8
 801188c:	2000a518 	.word	0x2000a518

08011890 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8011890:	b590      	push	{r4, r7, lr}
 8011892:	b08d      	sub	sp, #52	; 0x34
 8011894:	af04      	add	r7, sp, #16
 8011896:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011898:	2300      	movs	r3, #0
 801189a:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 801189c:	2300      	movs	r3, #0
 801189e:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d106      	bne.n	80118b4 <tcp_process+0x24>
 80118a6:	4ba5      	ldr	r3, [pc, #660]	; (8011b3c <tcp_process+0x2ac>)
 80118a8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80118ac:	49a4      	ldr	r1, [pc, #656]	; (8011b40 <tcp_process+0x2b0>)
 80118ae:	48a5      	ldr	r0, [pc, #660]	; (8011b44 <tcp_process+0x2b4>)
 80118b0:	f00e fd94 	bl	80203dc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80118b4:	4ba4      	ldr	r3, [pc, #656]	; (8011b48 <tcp_process+0x2b8>)
 80118b6:	781b      	ldrb	r3, [r3, #0]
 80118b8:	f003 0304 	and.w	r3, r3, #4
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d04e      	beq.n	801195e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	7d1b      	ldrb	r3, [r3, #20]
 80118c4:	2b02      	cmp	r3, #2
 80118c6:	d108      	bne.n	80118da <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80118cc:	4b9f      	ldr	r3, [pc, #636]	; (8011b4c <tcp_process+0x2bc>)
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	429a      	cmp	r2, r3
 80118d2:	d123      	bne.n	801191c <tcp_process+0x8c>
        acceptable = 1;
 80118d4:	2301      	movs	r3, #1
 80118d6:	77fb      	strb	r3, [r7, #31]
 80118d8:	e020      	b.n	801191c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80118de:	4b9c      	ldr	r3, [pc, #624]	; (8011b50 <tcp_process+0x2c0>)
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	429a      	cmp	r2, r3
 80118e4:	d102      	bne.n	80118ec <tcp_process+0x5c>
        acceptable = 1;
 80118e6:	2301      	movs	r3, #1
 80118e8:	77fb      	strb	r3, [r7, #31]
 80118ea:	e017      	b.n	801191c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80118ec:	4b98      	ldr	r3, [pc, #608]	; (8011b50 <tcp_process+0x2c0>)
 80118ee:	681a      	ldr	r2, [r3, #0]
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118f4:	1ad3      	subs	r3, r2, r3
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	db10      	blt.n	801191c <tcp_process+0x8c>
 80118fa:	4b95      	ldr	r3, [pc, #596]	; (8011b50 <tcp_process+0x2c0>)
 80118fc:	681a      	ldr	r2, [r3, #0]
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011902:	6879      	ldr	r1, [r7, #4]
 8011904:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011906:	440b      	add	r3, r1
 8011908:	1ad3      	subs	r3, r2, r3
 801190a:	2b00      	cmp	r3, #0
 801190c:	dc06      	bgt.n	801191c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	8b5b      	ldrh	r3, [r3, #26]
 8011912:	f043 0302 	orr.w	r3, r3, #2
 8011916:	b29a      	uxth	r2, r3
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801191c:	7ffb      	ldrb	r3, [r7, #31]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d01b      	beq.n	801195a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	7d1b      	ldrb	r3, [r3, #20]
 8011926:	2b00      	cmp	r3, #0
 8011928:	d106      	bne.n	8011938 <tcp_process+0xa8>
 801192a:	4b84      	ldr	r3, [pc, #528]	; (8011b3c <tcp_process+0x2ac>)
 801192c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8011930:	4988      	ldr	r1, [pc, #544]	; (8011b54 <tcp_process+0x2c4>)
 8011932:	4884      	ldr	r0, [pc, #528]	; (8011b44 <tcp_process+0x2b4>)
 8011934:	f00e fd52 	bl	80203dc <iprintf>
      recv_flags |= TF_RESET;
 8011938:	4b87      	ldr	r3, [pc, #540]	; (8011b58 <tcp_process+0x2c8>)
 801193a:	781b      	ldrb	r3, [r3, #0]
 801193c:	f043 0308 	orr.w	r3, r3, #8
 8011940:	b2da      	uxtb	r2, r3
 8011942:	4b85      	ldr	r3, [pc, #532]	; (8011b58 <tcp_process+0x2c8>)
 8011944:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	8b5b      	ldrh	r3, [r3, #26]
 801194a:	f023 0301 	bic.w	r3, r3, #1
 801194e:	b29a      	uxth	r2, r3
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011954:	f06f 030d 	mvn.w	r3, #13
 8011958:	e37a      	b.n	8012050 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801195a:	2300      	movs	r3, #0
 801195c:	e378      	b.n	8012050 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801195e:	4b7a      	ldr	r3, [pc, #488]	; (8011b48 <tcp_process+0x2b8>)
 8011960:	781b      	ldrb	r3, [r3, #0]
 8011962:	f003 0302 	and.w	r3, r3, #2
 8011966:	2b00      	cmp	r3, #0
 8011968:	d010      	beq.n	801198c <tcp_process+0xfc>
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	7d1b      	ldrb	r3, [r3, #20]
 801196e:	2b02      	cmp	r3, #2
 8011970:	d00c      	beq.n	801198c <tcp_process+0xfc>
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	7d1b      	ldrb	r3, [r3, #20]
 8011976:	2b03      	cmp	r3, #3
 8011978:	d008      	beq.n	801198c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	8b5b      	ldrh	r3, [r3, #26]
 801197e:	f043 0302 	orr.w	r3, r3, #2
 8011982:	b29a      	uxth	r2, r3
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011988:	2300      	movs	r3, #0
 801198a:	e361      	b.n	8012050 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	8b5b      	ldrh	r3, [r3, #26]
 8011990:	f003 0310 	and.w	r3, r3, #16
 8011994:	2b00      	cmp	r3, #0
 8011996:	d103      	bne.n	80119a0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011998:	4b70      	ldr	r3, [pc, #448]	; (8011b5c <tcp_process+0x2cc>)
 801199a:	681a      	ldr	r2, [r3, #0]
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	2200      	movs	r2, #0
 80119a4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	2200      	movs	r2, #0
 80119ac:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80119b0:	6878      	ldr	r0, [r7, #4]
 80119b2:	f001 fc2d 	bl	8013210 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	7d1b      	ldrb	r3, [r3, #20]
 80119ba:	3b02      	subs	r3, #2
 80119bc:	2b07      	cmp	r3, #7
 80119be:	f200 8337 	bhi.w	8012030 <tcp_process+0x7a0>
 80119c2:	a201      	add	r2, pc, #4	; (adr r2, 80119c8 <tcp_process+0x138>)
 80119c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119c8:	080119e9 	.word	0x080119e9
 80119cc:	08011c19 	.word	0x08011c19
 80119d0:	08011d91 	.word	0x08011d91
 80119d4:	08011dbb 	.word	0x08011dbb
 80119d8:	08011edf 	.word	0x08011edf
 80119dc:	08011d91 	.word	0x08011d91
 80119e0:	08011f6b 	.word	0x08011f6b
 80119e4:	08011ffb 	.word	0x08011ffb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80119e8:	4b57      	ldr	r3, [pc, #348]	; (8011b48 <tcp_process+0x2b8>)
 80119ea:	781b      	ldrb	r3, [r3, #0]
 80119ec:	f003 0310 	and.w	r3, r3, #16
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	f000 80e4 	beq.w	8011bbe <tcp_process+0x32e>
 80119f6:	4b54      	ldr	r3, [pc, #336]	; (8011b48 <tcp_process+0x2b8>)
 80119f8:	781b      	ldrb	r3, [r3, #0]
 80119fa:	f003 0302 	and.w	r3, r3, #2
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	f000 80dd 	beq.w	8011bbe <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a08:	1c5a      	adds	r2, r3, #1
 8011a0a:	4b50      	ldr	r3, [pc, #320]	; (8011b4c <tcp_process+0x2bc>)
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	429a      	cmp	r2, r3
 8011a10:	f040 80d5 	bne.w	8011bbe <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8011a14:	4b4e      	ldr	r3, [pc, #312]	; (8011b50 <tcp_process+0x2c0>)
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	1c5a      	adds	r2, r3, #1
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8011a26:	4b49      	ldr	r3, [pc, #292]	; (8011b4c <tcp_process+0x2bc>)
 8011a28:	681a      	ldr	r2, [r3, #0]
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8011a2e:	4b4c      	ldr	r3, [pc, #304]	; (8011b60 <tcp_process+0x2d0>)
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	89db      	ldrh	r3, [r3, #14]
 8011a34:	b29a      	uxth	r2, r3
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011a48:	4b41      	ldr	r3, [pc, #260]	; (8011b50 <tcp_process+0x2c0>)
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	1e5a      	subs	r2, r3, #1
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	2204      	movs	r2, #4
 8011a56:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	3304      	adds	r3, #4
 8011a60:	4618      	mov	r0, r3
 8011a62:	f008 fa11 	bl	8019e88 <ip4_route>
 8011a66:	4601      	mov	r1, r0
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	3304      	adds	r3, #4
 8011a6c:	461a      	mov	r2, r3
 8011a6e:	4620      	mov	r0, r4
 8011a70:	f7ff f828 	bl	8010ac4 <tcp_eff_send_mss_netif>
 8011a74:	4603      	mov	r3, r0
 8011a76:	461a      	mov	r2, r3
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a80:	009a      	lsls	r2, r3, #2
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a86:	005b      	lsls	r3, r3, #1
 8011a88:	f241 111c 	movw	r1, #4380	; 0x111c
 8011a8c:	428b      	cmp	r3, r1
 8011a8e:	bf38      	it	cc
 8011a90:	460b      	movcc	r3, r1
 8011a92:	429a      	cmp	r2, r3
 8011a94:	d204      	bcs.n	8011aa0 <tcp_process+0x210>
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a9a:	009b      	lsls	r3, r3, #2
 8011a9c:	b29b      	uxth	r3, r3
 8011a9e:	e00d      	b.n	8011abc <tcp_process+0x22c>
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011aa4:	005b      	lsls	r3, r3, #1
 8011aa6:	f241 121c 	movw	r2, #4380	; 0x111c
 8011aaa:	4293      	cmp	r3, r2
 8011aac:	d904      	bls.n	8011ab8 <tcp_process+0x228>
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ab2:	005b      	lsls	r3, r3, #1
 8011ab4:	b29b      	uxth	r3, r3
 8011ab6:	e001      	b.n	8011abc <tcp_process+0x22c>
 8011ab8:	f241 131c 	movw	r3, #4380	; 0x111c
 8011abc:	687a      	ldr	r2, [r7, #4]
 8011abe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d106      	bne.n	8011ada <tcp_process+0x24a>
 8011acc:	4b1b      	ldr	r3, [pc, #108]	; (8011b3c <tcp_process+0x2ac>)
 8011ace:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8011ad2:	4924      	ldr	r1, [pc, #144]	; (8011b64 <tcp_process+0x2d4>)
 8011ad4:	481b      	ldr	r0, [pc, #108]	; (8011b44 <tcp_process+0x2b4>)
 8011ad6:	f00e fc81 	bl	80203dc <iprintf>
        --pcb->snd_queuelen;
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011ae0:	3b01      	subs	r3, #1
 8011ae2:	b29a      	uxth	r2, r3
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011aee:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 8011af0:	697b      	ldr	r3, [r7, #20]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d111      	bne.n	8011b1a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011afa:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8011afc:	697b      	ldr	r3, [r7, #20]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d106      	bne.n	8011b10 <tcp_process+0x280>
 8011b02:	4b0e      	ldr	r3, [pc, #56]	; (8011b3c <tcp_process+0x2ac>)
 8011b04:	f44f 725d 	mov.w	r2, #884	; 0x374
 8011b08:	4917      	ldr	r1, [pc, #92]	; (8011b68 <tcp_process+0x2d8>)
 8011b0a:	480e      	ldr	r0, [pc, #56]	; (8011b44 <tcp_process+0x2b4>)
 8011b0c:	f00e fc66 	bl	80203dc <iprintf>
          pcb->unsent = rseg->next;
 8011b10:	697b      	ldr	r3, [r7, #20]
 8011b12:	681a      	ldr	r2, [r3, #0]
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	66da      	str	r2, [r3, #108]	; 0x6c
 8011b18:	e003      	b.n	8011b22 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8011b1a:	697b      	ldr	r3, [r7, #20]
 8011b1c:	681a      	ldr	r2, [r3, #0]
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8011b22:	6978      	ldr	r0, [r7, #20]
 8011b24:	f7fe fcad 	bl	8010482 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d11d      	bne.n	8011b6c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011b36:	861a      	strh	r2, [r3, #48]	; 0x30
 8011b38:	e01f      	b.n	8011b7a <tcp_process+0x2ea>
 8011b3a:	bf00      	nop
 8011b3c:	08022bf0 	.word	0x08022bf0
 8011b40:	08022e28 	.word	0x08022e28
 8011b44:	08022c3c 	.word	0x08022c3c
 8011b48:	20006874 	.word	0x20006874
 8011b4c:	2000686c 	.word	0x2000686c
 8011b50:	20006868 	.word	0x20006868
 8011b54:	08022e44 	.word	0x08022e44
 8011b58:	20006875 	.word	0x20006875
 8011b5c:	2000a518 	.word	0x2000a518
 8011b60:	20006858 	.word	0x20006858
 8011b64:	08022e64 	.word	0x08022e64
 8011b68:	08022e7c 	.word	0x08022e7c
        } else {
          pcb->rtime = 0;
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	2200      	movs	r2, #0
 8011b70:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	2200      	movs	r2, #0
 8011b76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d00a      	beq.n	8011b9a <tcp_process+0x30a>
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011b8a:	687a      	ldr	r2, [r7, #4]
 8011b8c:	6910      	ldr	r0, [r2, #16]
 8011b8e:	2200      	movs	r2, #0
 8011b90:	6879      	ldr	r1, [r7, #4]
 8011b92:	4798      	blx	r3
 8011b94:	4603      	mov	r3, r0
 8011b96:	77bb      	strb	r3, [r7, #30]
 8011b98:	e001      	b.n	8011b9e <tcp_process+0x30e>
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 8011b9e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8011ba2:	f113 0f0d 	cmn.w	r3, #13
 8011ba6:	d102      	bne.n	8011bae <tcp_process+0x31e>
          return ERR_ABRT;
 8011ba8:	f06f 030c 	mvn.w	r3, #12
 8011bac:	e250      	b.n	8012050 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	8b5b      	ldrh	r3, [r3, #26]
 8011bb2:	f043 0302 	orr.w	r3, r3, #2
 8011bb6:	b29a      	uxth	r2, r3
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8011bbc:	e23a      	b.n	8012034 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8011bbe:	4b9d      	ldr	r3, [pc, #628]	; (8011e34 <tcp_process+0x5a4>)
 8011bc0:	781b      	ldrb	r3, [r3, #0]
 8011bc2:	f003 0310 	and.w	r3, r3, #16
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	f000 8234 	beq.w	8012034 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011bcc:	4b9a      	ldr	r3, [pc, #616]	; (8011e38 <tcp_process+0x5a8>)
 8011bce:	6819      	ldr	r1, [r3, #0]
 8011bd0:	4b9a      	ldr	r3, [pc, #616]	; (8011e3c <tcp_process+0x5ac>)
 8011bd2:	881b      	ldrh	r3, [r3, #0]
 8011bd4:	461a      	mov	r2, r3
 8011bd6:	4b9a      	ldr	r3, [pc, #616]	; (8011e40 <tcp_process+0x5b0>)
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011bdc:	4b99      	ldr	r3, [pc, #612]	; (8011e44 <tcp_process+0x5b4>)
 8011bde:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011be0:	885b      	ldrh	r3, [r3, #2]
 8011be2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011be4:	4a97      	ldr	r2, [pc, #604]	; (8011e44 <tcp_process+0x5b4>)
 8011be6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011be8:	8812      	ldrh	r2, [r2, #0]
 8011bea:	b292      	uxth	r2, r2
 8011bec:	9202      	str	r2, [sp, #8]
 8011bee:	9301      	str	r3, [sp, #4]
 8011bf0:	4b95      	ldr	r3, [pc, #596]	; (8011e48 <tcp_process+0x5b8>)
 8011bf2:	9300      	str	r3, [sp, #0]
 8011bf4:	4b95      	ldr	r3, [pc, #596]	; (8011e4c <tcp_process+0x5bc>)
 8011bf6:	4602      	mov	r2, r0
 8011bf8:	6878      	ldr	r0, [r7, #4]
 8011bfa:	f002 fccf 	bl	801459c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011c04:	2b05      	cmp	r3, #5
 8011c06:	f200 8215 	bhi.w	8012034 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	2200      	movs	r2, #0
 8011c0e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8011c10:	6878      	ldr	r0, [r7, #4]
 8011c12:	f002 fa8f 	bl	8014134 <tcp_rexmit_rto>
      break;
 8011c16:	e20d      	b.n	8012034 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8011c18:	4b86      	ldr	r3, [pc, #536]	; (8011e34 <tcp_process+0x5a4>)
 8011c1a:	781b      	ldrb	r3, [r3, #0]
 8011c1c:	f003 0310 	and.w	r3, r3, #16
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	f000 80a1 	beq.w	8011d68 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011c26:	4b84      	ldr	r3, [pc, #528]	; (8011e38 <tcp_process+0x5a8>)
 8011c28:	681a      	ldr	r2, [r3, #0]
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c2e:	1ad3      	subs	r3, r2, r3
 8011c30:	3b01      	subs	r3, #1
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	db7e      	blt.n	8011d34 <tcp_process+0x4a4>
 8011c36:	4b80      	ldr	r3, [pc, #512]	; (8011e38 <tcp_process+0x5a8>)
 8011c38:	681a      	ldr	r2, [r3, #0]
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c3e:	1ad3      	subs	r3, r2, r3
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	dc77      	bgt.n	8011d34 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	2204      	movs	r2, #4
 8011c48:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d102      	bne.n	8011c58 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8011c52:	23fa      	movs	r3, #250	; 0xfa
 8011c54:	77bb      	strb	r3, [r7, #30]
 8011c56:	e01d      	b.n	8011c94 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c5c:	699b      	ldr	r3, [r3, #24]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d106      	bne.n	8011c70 <tcp_process+0x3e0>
 8011c62:	4b7b      	ldr	r3, [pc, #492]	; (8011e50 <tcp_process+0x5c0>)
 8011c64:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8011c68:	497a      	ldr	r1, [pc, #488]	; (8011e54 <tcp_process+0x5c4>)
 8011c6a:	487b      	ldr	r0, [pc, #492]	; (8011e58 <tcp_process+0x5c8>)
 8011c6c:	f00e fbb6 	bl	80203dc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c74:	699b      	ldr	r3, [r3, #24]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d00a      	beq.n	8011c90 <tcp_process+0x400>
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c7e:	699b      	ldr	r3, [r3, #24]
 8011c80:	687a      	ldr	r2, [r7, #4]
 8011c82:	6910      	ldr	r0, [r2, #16]
 8011c84:	2200      	movs	r2, #0
 8011c86:	6879      	ldr	r1, [r7, #4]
 8011c88:	4798      	blx	r3
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	77bb      	strb	r3, [r7, #30]
 8011c8e:	e001      	b.n	8011c94 <tcp_process+0x404>
 8011c90:	23f0      	movs	r3, #240	; 0xf0
 8011c92:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 8011c94:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d00a      	beq.n	8011cb2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8011c9c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8011ca0:	f113 0f0d 	cmn.w	r3, #13
 8011ca4:	d002      	beq.n	8011cac <tcp_process+0x41c>
              tcp_abort(pcb);
 8011ca6:	6878      	ldr	r0, [r7, #4]
 8011ca8:	f7fd ff00 	bl	800faac <tcp_abort>
            }
            return ERR_ABRT;
 8011cac:	f06f 030c 	mvn.w	r3, #12
 8011cb0:	e1ce      	b.n	8012050 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8011cb2:	6878      	ldr	r0, [r7, #4]
 8011cb4:	f000 fae0 	bl	8012278 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011cb8:	4b68      	ldr	r3, [pc, #416]	; (8011e5c <tcp_process+0x5cc>)
 8011cba:	881b      	ldrh	r3, [r3, #0]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d005      	beq.n	8011ccc <tcp_process+0x43c>
            recv_acked--;
 8011cc0:	4b66      	ldr	r3, [pc, #408]	; (8011e5c <tcp_process+0x5cc>)
 8011cc2:	881b      	ldrh	r3, [r3, #0]
 8011cc4:	3b01      	subs	r3, #1
 8011cc6:	b29a      	uxth	r2, r3
 8011cc8:	4b64      	ldr	r3, [pc, #400]	; (8011e5c <tcp_process+0x5cc>)
 8011cca:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011cd0:	009a      	lsls	r2, r3, #2
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011cd6:	005b      	lsls	r3, r3, #1
 8011cd8:	f241 111c 	movw	r1, #4380	; 0x111c
 8011cdc:	428b      	cmp	r3, r1
 8011cde:	bf38      	it	cc
 8011ce0:	460b      	movcc	r3, r1
 8011ce2:	429a      	cmp	r2, r3
 8011ce4:	d204      	bcs.n	8011cf0 <tcp_process+0x460>
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011cea:	009b      	lsls	r3, r3, #2
 8011cec:	b29b      	uxth	r3, r3
 8011cee:	e00d      	b.n	8011d0c <tcp_process+0x47c>
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011cf4:	005b      	lsls	r3, r3, #1
 8011cf6:	f241 121c 	movw	r2, #4380	; 0x111c
 8011cfa:	4293      	cmp	r3, r2
 8011cfc:	d904      	bls.n	8011d08 <tcp_process+0x478>
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011d02:	005b      	lsls	r3, r3, #1
 8011d04:	b29b      	uxth	r3, r3
 8011d06:	e001      	b.n	8011d0c <tcp_process+0x47c>
 8011d08:	f241 131c 	movw	r3, #4380	; 0x111c
 8011d0c:	687a      	ldr	r2, [r7, #4]
 8011d0e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8011d12:	4b53      	ldr	r3, [pc, #332]	; (8011e60 <tcp_process+0x5d0>)
 8011d14:	781b      	ldrb	r3, [r3, #0]
 8011d16:	f003 0320 	and.w	r3, r3, #32
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d037      	beq.n	8011d8e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	8b5b      	ldrh	r3, [r3, #26]
 8011d22:	f043 0302 	orr.w	r3, r3, #2
 8011d26:	b29a      	uxth	r2, r3
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	2207      	movs	r2, #7
 8011d30:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8011d32:	e02c      	b.n	8011d8e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011d34:	4b40      	ldr	r3, [pc, #256]	; (8011e38 <tcp_process+0x5a8>)
 8011d36:	6819      	ldr	r1, [r3, #0]
 8011d38:	4b40      	ldr	r3, [pc, #256]	; (8011e3c <tcp_process+0x5ac>)
 8011d3a:	881b      	ldrh	r3, [r3, #0]
 8011d3c:	461a      	mov	r2, r3
 8011d3e:	4b40      	ldr	r3, [pc, #256]	; (8011e40 <tcp_process+0x5b0>)
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011d44:	4b3f      	ldr	r3, [pc, #252]	; (8011e44 <tcp_process+0x5b4>)
 8011d46:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011d48:	885b      	ldrh	r3, [r3, #2]
 8011d4a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011d4c:	4a3d      	ldr	r2, [pc, #244]	; (8011e44 <tcp_process+0x5b4>)
 8011d4e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011d50:	8812      	ldrh	r2, [r2, #0]
 8011d52:	b292      	uxth	r2, r2
 8011d54:	9202      	str	r2, [sp, #8]
 8011d56:	9301      	str	r3, [sp, #4]
 8011d58:	4b3b      	ldr	r3, [pc, #236]	; (8011e48 <tcp_process+0x5b8>)
 8011d5a:	9300      	str	r3, [sp, #0]
 8011d5c:	4b3b      	ldr	r3, [pc, #236]	; (8011e4c <tcp_process+0x5bc>)
 8011d5e:	4602      	mov	r2, r0
 8011d60:	6878      	ldr	r0, [r7, #4]
 8011d62:	f002 fc1b 	bl	801459c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011d66:	e167      	b.n	8012038 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011d68:	4b32      	ldr	r3, [pc, #200]	; (8011e34 <tcp_process+0x5a4>)
 8011d6a:	781b      	ldrb	r3, [r3, #0]
 8011d6c:	f003 0302 	and.w	r3, r3, #2
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	f000 8161 	beq.w	8012038 <tcp_process+0x7a8>
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d7a:	1e5a      	subs	r2, r3, #1
 8011d7c:	4b30      	ldr	r3, [pc, #192]	; (8011e40 <tcp_process+0x5b0>)
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	429a      	cmp	r2, r3
 8011d82:	f040 8159 	bne.w	8012038 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011d86:	6878      	ldr	r0, [r7, #4]
 8011d88:	f002 f9f6 	bl	8014178 <tcp_rexmit>
      break;
 8011d8c:	e154      	b.n	8012038 <tcp_process+0x7a8>
 8011d8e:	e153      	b.n	8012038 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011d90:	6878      	ldr	r0, [r7, #4]
 8011d92:	f000 fa71 	bl	8012278 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011d96:	4b32      	ldr	r3, [pc, #200]	; (8011e60 <tcp_process+0x5d0>)
 8011d98:	781b      	ldrb	r3, [r3, #0]
 8011d9a:	f003 0320 	and.w	r3, r3, #32
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	f000 814c 	beq.w	801203c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	8b5b      	ldrh	r3, [r3, #26]
 8011da8:	f043 0302 	orr.w	r3, r3, #2
 8011dac:	b29a      	uxth	r2, r3
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	2207      	movs	r2, #7
 8011db6:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011db8:	e140      	b.n	801203c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011dba:	6878      	ldr	r0, [r7, #4]
 8011dbc:	f000 fa5c 	bl	8012278 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011dc0:	4b27      	ldr	r3, [pc, #156]	; (8011e60 <tcp_process+0x5d0>)
 8011dc2:	781b      	ldrb	r3, [r3, #0]
 8011dc4:	f003 0320 	and.w	r3, r3, #32
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d071      	beq.n	8011eb0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011dcc:	4b19      	ldr	r3, [pc, #100]	; (8011e34 <tcp_process+0x5a4>)
 8011dce:	781b      	ldrb	r3, [r3, #0]
 8011dd0:	f003 0310 	and.w	r3, r3, #16
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d060      	beq.n	8011e9a <tcp_process+0x60a>
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011ddc:	4b16      	ldr	r3, [pc, #88]	; (8011e38 <tcp_process+0x5a8>)
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	429a      	cmp	r2, r3
 8011de2:	d15a      	bne.n	8011e9a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d156      	bne.n	8011e9a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	8b5b      	ldrh	r3, [r3, #26]
 8011df0:	f043 0302 	orr.w	r3, r3, #2
 8011df4:	b29a      	uxth	r2, r3
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8011dfa:	6878      	ldr	r0, [r7, #4]
 8011dfc:	f7fe fd58 	bl	80108b0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011e00:	4b18      	ldr	r3, [pc, #96]	; (8011e64 <tcp_process+0x5d4>)
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	687a      	ldr	r2, [r7, #4]
 8011e06:	429a      	cmp	r2, r3
 8011e08:	d105      	bne.n	8011e16 <tcp_process+0x586>
 8011e0a:	4b16      	ldr	r3, [pc, #88]	; (8011e64 <tcp_process+0x5d4>)
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	68db      	ldr	r3, [r3, #12]
 8011e10:	4a14      	ldr	r2, [pc, #80]	; (8011e64 <tcp_process+0x5d4>)
 8011e12:	6013      	str	r3, [r2, #0]
 8011e14:	e02e      	b.n	8011e74 <tcp_process+0x5e4>
 8011e16:	4b13      	ldr	r3, [pc, #76]	; (8011e64 <tcp_process+0x5d4>)
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	613b      	str	r3, [r7, #16]
 8011e1c:	e027      	b.n	8011e6e <tcp_process+0x5de>
 8011e1e:	693b      	ldr	r3, [r7, #16]
 8011e20:	68db      	ldr	r3, [r3, #12]
 8011e22:	687a      	ldr	r2, [r7, #4]
 8011e24:	429a      	cmp	r2, r3
 8011e26:	d11f      	bne.n	8011e68 <tcp_process+0x5d8>
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	68da      	ldr	r2, [r3, #12]
 8011e2c:	693b      	ldr	r3, [r7, #16]
 8011e2e:	60da      	str	r2, [r3, #12]
 8011e30:	e020      	b.n	8011e74 <tcp_process+0x5e4>
 8011e32:	bf00      	nop
 8011e34:	20006874 	.word	0x20006874
 8011e38:	2000686c 	.word	0x2000686c
 8011e3c:	20006872 	.word	0x20006872
 8011e40:	20006868 	.word	0x20006868
 8011e44:	20006858 	.word	0x20006858
 8011e48:	200070e4 	.word	0x200070e4
 8011e4c:	200070e8 	.word	0x200070e8
 8011e50:	08022bf0 	.word	0x08022bf0
 8011e54:	08022e90 	.word	0x08022e90
 8011e58:	08022c3c 	.word	0x08022c3c
 8011e5c:	20006870 	.word	0x20006870
 8011e60:	20006875 	.word	0x20006875
 8011e64:	2000a514 	.word	0x2000a514
 8011e68:	693b      	ldr	r3, [r7, #16]
 8011e6a:	68db      	ldr	r3, [r3, #12]
 8011e6c:	613b      	str	r3, [r7, #16]
 8011e6e:	693b      	ldr	r3, [r7, #16]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d1d4      	bne.n	8011e1e <tcp_process+0x58e>
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	2200      	movs	r2, #0
 8011e78:	60da      	str	r2, [r3, #12]
 8011e7a:	4b77      	ldr	r3, [pc, #476]	; (8012058 <tcp_process+0x7c8>)
 8011e7c:	2201      	movs	r2, #1
 8011e7e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	220a      	movs	r2, #10
 8011e84:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011e86:	4b75      	ldr	r3, [pc, #468]	; (801205c <tcp_process+0x7cc>)
 8011e88:	681a      	ldr	r2, [r3, #0]
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	60da      	str	r2, [r3, #12]
 8011e8e:	4a73      	ldr	r2, [pc, #460]	; (801205c <tcp_process+0x7cc>)
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	6013      	str	r3, [r2, #0]
 8011e94:	f002 fd44 	bl	8014920 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011e98:	e0d2      	b.n	8012040 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	8b5b      	ldrh	r3, [r3, #26]
 8011e9e:	f043 0302 	orr.w	r3, r3, #2
 8011ea2:	b29a      	uxth	r2, r3
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	2208      	movs	r2, #8
 8011eac:	751a      	strb	r2, [r3, #20]
      break;
 8011eae:	e0c7      	b.n	8012040 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011eb0:	4b6b      	ldr	r3, [pc, #428]	; (8012060 <tcp_process+0x7d0>)
 8011eb2:	781b      	ldrb	r3, [r3, #0]
 8011eb4:	f003 0310 	and.w	r3, r3, #16
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	f000 80c1 	beq.w	8012040 <tcp_process+0x7b0>
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011ec2:	4b68      	ldr	r3, [pc, #416]	; (8012064 <tcp_process+0x7d4>)
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	429a      	cmp	r2, r3
 8011ec8:	f040 80ba 	bne.w	8012040 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	f040 80b5 	bne.w	8012040 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	2206      	movs	r2, #6
 8011eda:	751a      	strb	r2, [r3, #20]
      break;
 8011edc:	e0b0      	b.n	8012040 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8011ede:	6878      	ldr	r0, [r7, #4]
 8011ee0:	f000 f9ca 	bl	8012278 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011ee4:	4b60      	ldr	r3, [pc, #384]	; (8012068 <tcp_process+0x7d8>)
 8011ee6:	781b      	ldrb	r3, [r3, #0]
 8011ee8:	f003 0320 	and.w	r3, r3, #32
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	f000 80a9 	beq.w	8012044 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	8b5b      	ldrh	r3, [r3, #26]
 8011ef6:	f043 0302 	orr.w	r3, r3, #2
 8011efa:	b29a      	uxth	r2, r3
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011f00:	6878      	ldr	r0, [r7, #4]
 8011f02:	f7fe fcd5 	bl	80108b0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011f06:	4b59      	ldr	r3, [pc, #356]	; (801206c <tcp_process+0x7dc>)
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	687a      	ldr	r2, [r7, #4]
 8011f0c:	429a      	cmp	r2, r3
 8011f0e:	d105      	bne.n	8011f1c <tcp_process+0x68c>
 8011f10:	4b56      	ldr	r3, [pc, #344]	; (801206c <tcp_process+0x7dc>)
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	68db      	ldr	r3, [r3, #12]
 8011f16:	4a55      	ldr	r2, [pc, #340]	; (801206c <tcp_process+0x7dc>)
 8011f18:	6013      	str	r3, [r2, #0]
 8011f1a:	e013      	b.n	8011f44 <tcp_process+0x6b4>
 8011f1c:	4b53      	ldr	r3, [pc, #332]	; (801206c <tcp_process+0x7dc>)
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	60fb      	str	r3, [r7, #12]
 8011f22:	e00c      	b.n	8011f3e <tcp_process+0x6ae>
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	68db      	ldr	r3, [r3, #12]
 8011f28:	687a      	ldr	r2, [r7, #4]
 8011f2a:	429a      	cmp	r2, r3
 8011f2c:	d104      	bne.n	8011f38 <tcp_process+0x6a8>
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	68da      	ldr	r2, [r3, #12]
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	60da      	str	r2, [r3, #12]
 8011f36:	e005      	b.n	8011f44 <tcp_process+0x6b4>
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	68db      	ldr	r3, [r3, #12]
 8011f3c:	60fb      	str	r3, [r7, #12]
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d1ef      	bne.n	8011f24 <tcp_process+0x694>
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	2200      	movs	r2, #0
 8011f48:	60da      	str	r2, [r3, #12]
 8011f4a:	4b43      	ldr	r3, [pc, #268]	; (8012058 <tcp_process+0x7c8>)
 8011f4c:	2201      	movs	r2, #1
 8011f4e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	220a      	movs	r2, #10
 8011f54:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011f56:	4b41      	ldr	r3, [pc, #260]	; (801205c <tcp_process+0x7cc>)
 8011f58:	681a      	ldr	r2, [r3, #0]
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	60da      	str	r2, [r3, #12]
 8011f5e:	4a3f      	ldr	r2, [pc, #252]	; (801205c <tcp_process+0x7cc>)
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	6013      	str	r3, [r2, #0]
 8011f64:	f002 fcdc 	bl	8014920 <tcp_timer_needed>
      }
      break;
 8011f68:	e06c      	b.n	8012044 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8011f6a:	6878      	ldr	r0, [r7, #4]
 8011f6c:	f000 f984 	bl	8012278 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011f70:	4b3b      	ldr	r3, [pc, #236]	; (8012060 <tcp_process+0x7d0>)
 8011f72:	781b      	ldrb	r3, [r3, #0]
 8011f74:	f003 0310 	and.w	r3, r3, #16
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d065      	beq.n	8012048 <tcp_process+0x7b8>
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011f80:	4b38      	ldr	r3, [pc, #224]	; (8012064 <tcp_process+0x7d4>)
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	429a      	cmp	r2, r3
 8011f86:	d15f      	bne.n	8012048 <tcp_process+0x7b8>
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d15b      	bne.n	8012048 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011f90:	6878      	ldr	r0, [r7, #4]
 8011f92:	f7fe fc8d 	bl	80108b0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011f96:	4b35      	ldr	r3, [pc, #212]	; (801206c <tcp_process+0x7dc>)
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	687a      	ldr	r2, [r7, #4]
 8011f9c:	429a      	cmp	r2, r3
 8011f9e:	d105      	bne.n	8011fac <tcp_process+0x71c>
 8011fa0:	4b32      	ldr	r3, [pc, #200]	; (801206c <tcp_process+0x7dc>)
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	68db      	ldr	r3, [r3, #12]
 8011fa6:	4a31      	ldr	r2, [pc, #196]	; (801206c <tcp_process+0x7dc>)
 8011fa8:	6013      	str	r3, [r2, #0]
 8011faa:	e013      	b.n	8011fd4 <tcp_process+0x744>
 8011fac:	4b2f      	ldr	r3, [pc, #188]	; (801206c <tcp_process+0x7dc>)
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	61bb      	str	r3, [r7, #24]
 8011fb2:	e00c      	b.n	8011fce <tcp_process+0x73e>
 8011fb4:	69bb      	ldr	r3, [r7, #24]
 8011fb6:	68db      	ldr	r3, [r3, #12]
 8011fb8:	687a      	ldr	r2, [r7, #4]
 8011fba:	429a      	cmp	r2, r3
 8011fbc:	d104      	bne.n	8011fc8 <tcp_process+0x738>
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	68da      	ldr	r2, [r3, #12]
 8011fc2:	69bb      	ldr	r3, [r7, #24]
 8011fc4:	60da      	str	r2, [r3, #12]
 8011fc6:	e005      	b.n	8011fd4 <tcp_process+0x744>
 8011fc8:	69bb      	ldr	r3, [r7, #24]
 8011fca:	68db      	ldr	r3, [r3, #12]
 8011fcc:	61bb      	str	r3, [r7, #24]
 8011fce:	69bb      	ldr	r3, [r7, #24]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d1ef      	bne.n	8011fb4 <tcp_process+0x724>
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	2200      	movs	r2, #0
 8011fd8:	60da      	str	r2, [r3, #12]
 8011fda:	4b1f      	ldr	r3, [pc, #124]	; (8012058 <tcp_process+0x7c8>)
 8011fdc:	2201      	movs	r2, #1
 8011fde:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	220a      	movs	r2, #10
 8011fe4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011fe6:	4b1d      	ldr	r3, [pc, #116]	; (801205c <tcp_process+0x7cc>)
 8011fe8:	681a      	ldr	r2, [r3, #0]
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	60da      	str	r2, [r3, #12]
 8011fee:	4a1b      	ldr	r2, [pc, #108]	; (801205c <tcp_process+0x7cc>)
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	6013      	str	r3, [r2, #0]
 8011ff4:	f002 fc94 	bl	8014920 <tcp_timer_needed>
      }
      break;
 8011ff8:	e026      	b.n	8012048 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011ffa:	6878      	ldr	r0, [r7, #4]
 8011ffc:	f000 f93c 	bl	8012278 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012000:	4b17      	ldr	r3, [pc, #92]	; (8012060 <tcp_process+0x7d0>)
 8012002:	781b      	ldrb	r3, [r3, #0]
 8012004:	f003 0310 	and.w	r3, r3, #16
 8012008:	2b00      	cmp	r3, #0
 801200a:	d01f      	beq.n	801204c <tcp_process+0x7bc>
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012010:	4b14      	ldr	r3, [pc, #80]	; (8012064 <tcp_process+0x7d4>)
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	429a      	cmp	r2, r3
 8012016:	d119      	bne.n	801204c <tcp_process+0x7bc>
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801201c:	2b00      	cmp	r3, #0
 801201e:	d115      	bne.n	801204c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8012020:	4b11      	ldr	r3, [pc, #68]	; (8012068 <tcp_process+0x7d8>)
 8012022:	781b      	ldrb	r3, [r3, #0]
 8012024:	f043 0310 	orr.w	r3, r3, #16
 8012028:	b2da      	uxtb	r2, r3
 801202a:	4b0f      	ldr	r3, [pc, #60]	; (8012068 <tcp_process+0x7d8>)
 801202c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801202e:	e00d      	b.n	801204c <tcp_process+0x7bc>
    default:
      break;
 8012030:	bf00      	nop
 8012032:	e00c      	b.n	801204e <tcp_process+0x7be>
      break;
 8012034:	bf00      	nop
 8012036:	e00a      	b.n	801204e <tcp_process+0x7be>
      break;
 8012038:	bf00      	nop
 801203a:	e008      	b.n	801204e <tcp_process+0x7be>
      break;
 801203c:	bf00      	nop
 801203e:	e006      	b.n	801204e <tcp_process+0x7be>
      break;
 8012040:	bf00      	nop
 8012042:	e004      	b.n	801204e <tcp_process+0x7be>
      break;
 8012044:	bf00      	nop
 8012046:	e002      	b.n	801204e <tcp_process+0x7be>
      break;
 8012048:	bf00      	nop
 801204a:	e000      	b.n	801204e <tcp_process+0x7be>
      break;
 801204c:	bf00      	nop
  }
  return ERR_OK;
 801204e:	2300      	movs	r3, #0
}
 8012050:	4618      	mov	r0, r3
 8012052:	3724      	adds	r7, #36	; 0x24
 8012054:	46bd      	mov	sp, r7
 8012056:	bd90      	pop	{r4, r7, pc}
 8012058:	2000a510 	.word	0x2000a510
 801205c:	2000a524 	.word	0x2000a524
 8012060:	20006874 	.word	0x20006874
 8012064:	2000686c 	.word	0x2000686c
 8012068:	20006875 	.word	0x20006875
 801206c:	2000a514 	.word	0x2000a514

08012070 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8012070:	b590      	push	{r4, r7, lr}
 8012072:	b085      	sub	sp, #20
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
 8012078:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d106      	bne.n	801208e <tcp_oos_insert_segment+0x1e>
 8012080:	4b3b      	ldr	r3, [pc, #236]	; (8012170 <tcp_oos_insert_segment+0x100>)
 8012082:	f240 421f 	movw	r2, #1055	; 0x41f
 8012086:	493b      	ldr	r1, [pc, #236]	; (8012174 <tcp_oos_insert_segment+0x104>)
 8012088:	483b      	ldr	r0, [pc, #236]	; (8012178 <tcp_oos_insert_segment+0x108>)
 801208a:	f00e f9a7 	bl	80203dc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	691b      	ldr	r3, [r3, #16]
 8012092:	899b      	ldrh	r3, [r3, #12]
 8012094:	b29b      	uxth	r3, r3
 8012096:	4618      	mov	r0, r3
 8012098:	f7fa fc72 	bl	800c980 <lwip_htons>
 801209c:	4603      	mov	r3, r0
 801209e:	b2db      	uxtb	r3, r3
 80120a0:	f003 0301 	and.w	r3, r3, #1
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d028      	beq.n	80120fa <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80120a8:	6838      	ldr	r0, [r7, #0]
 80120aa:	f7fe f9d5 	bl	8010458 <tcp_segs_free>
    next = NULL;
 80120ae:	2300      	movs	r3, #0
 80120b0:	603b      	str	r3, [r7, #0]
 80120b2:	e056      	b.n	8012162 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80120b4:	683b      	ldr	r3, [r7, #0]
 80120b6:	691b      	ldr	r3, [r3, #16]
 80120b8:	899b      	ldrh	r3, [r3, #12]
 80120ba:	b29b      	uxth	r3, r3
 80120bc:	4618      	mov	r0, r3
 80120be:	f7fa fc5f 	bl	800c980 <lwip_htons>
 80120c2:	4603      	mov	r3, r0
 80120c4:	b2db      	uxtb	r3, r3
 80120c6:	f003 0301 	and.w	r3, r3, #1
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d00d      	beq.n	80120ea <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	691b      	ldr	r3, [r3, #16]
 80120d2:	899b      	ldrh	r3, [r3, #12]
 80120d4:	b29c      	uxth	r4, r3
 80120d6:	2001      	movs	r0, #1
 80120d8:	f7fa fc52 	bl	800c980 <lwip_htons>
 80120dc:	4603      	mov	r3, r0
 80120de:	461a      	mov	r2, r3
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	691b      	ldr	r3, [r3, #16]
 80120e4:	4322      	orrs	r2, r4
 80120e6:	b292      	uxth	r2, r2
 80120e8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80120ea:	683b      	ldr	r3, [r7, #0]
 80120ec:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80120ee:	683b      	ldr	r3, [r7, #0]
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80120f4:	68f8      	ldr	r0, [r7, #12]
 80120f6:	f7fe f9c4 	bl	8010482 <tcp_seg_free>
    while (next &&
 80120fa:	683b      	ldr	r3, [r7, #0]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d00e      	beq.n	801211e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	891b      	ldrh	r3, [r3, #8]
 8012104:	461a      	mov	r2, r3
 8012106:	4b1d      	ldr	r3, [pc, #116]	; (801217c <tcp_oos_insert_segment+0x10c>)
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	441a      	add	r2, r3
 801210c:	683b      	ldr	r3, [r7, #0]
 801210e:	691b      	ldr	r3, [r3, #16]
 8012110:	685b      	ldr	r3, [r3, #4]
 8012112:	6839      	ldr	r1, [r7, #0]
 8012114:	8909      	ldrh	r1, [r1, #8]
 8012116:	440b      	add	r3, r1
 8012118:	1ad3      	subs	r3, r2, r3
    while (next &&
 801211a:	2b00      	cmp	r3, #0
 801211c:	daca      	bge.n	80120b4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801211e:	683b      	ldr	r3, [r7, #0]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d01e      	beq.n	8012162 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	891b      	ldrh	r3, [r3, #8]
 8012128:	461a      	mov	r2, r3
 801212a:	4b14      	ldr	r3, [pc, #80]	; (801217c <tcp_oos_insert_segment+0x10c>)
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	441a      	add	r2, r3
 8012130:	683b      	ldr	r3, [r7, #0]
 8012132:	691b      	ldr	r3, [r3, #16]
 8012134:	685b      	ldr	r3, [r3, #4]
 8012136:	1ad3      	subs	r3, r2, r3
    if (next &&
 8012138:	2b00      	cmp	r3, #0
 801213a:	dd12      	ble.n	8012162 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801213c:	683b      	ldr	r3, [r7, #0]
 801213e:	691b      	ldr	r3, [r3, #16]
 8012140:	685b      	ldr	r3, [r3, #4]
 8012142:	b29a      	uxth	r2, r3
 8012144:	4b0d      	ldr	r3, [pc, #52]	; (801217c <tcp_oos_insert_segment+0x10c>)
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	b29b      	uxth	r3, r3
 801214a:	1ad3      	subs	r3, r2, r3
 801214c:	b29a      	uxth	r2, r3
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	685a      	ldr	r2, [r3, #4]
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	891b      	ldrh	r3, [r3, #8]
 801215a:	4619      	mov	r1, r3
 801215c:	4610      	mov	r0, r2
 801215e:	f7fc fc11 	bl	800e984 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	683a      	ldr	r2, [r7, #0]
 8012166:	601a      	str	r2, [r3, #0]
}
 8012168:	bf00      	nop
 801216a:	3714      	adds	r7, #20
 801216c:	46bd      	mov	sp, r7
 801216e:	bd90      	pop	{r4, r7, pc}
 8012170:	08022bf0 	.word	0x08022bf0
 8012174:	08022eb0 	.word	0x08022eb0
 8012178:	08022c3c 	.word	0x08022c3c
 801217c:	20006868 	.word	0x20006868

08012180 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8012180:	b5b0      	push	{r4, r5, r7, lr}
 8012182:	b086      	sub	sp, #24
 8012184:	af00      	add	r7, sp, #0
 8012186:	60f8      	str	r0, [r7, #12]
 8012188:	60b9      	str	r1, [r7, #8]
 801218a:	607a      	str	r2, [r7, #4]
 801218c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801218e:	e03e      	b.n	801220e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8012190:	68bb      	ldr	r3, [r7, #8]
 8012192:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8012194:	68bb      	ldr	r3, [r7, #8]
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801219a:	697b      	ldr	r3, [r7, #20]
 801219c:	685b      	ldr	r3, [r3, #4]
 801219e:	4618      	mov	r0, r3
 80121a0:	f7fc fe04 	bl	800edac <pbuf_clen>
 80121a4:	4603      	mov	r3, r0
 80121a6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80121ae:	8a7a      	ldrh	r2, [r7, #18]
 80121b0:	429a      	cmp	r2, r3
 80121b2:	d906      	bls.n	80121c2 <tcp_free_acked_segments+0x42>
 80121b4:	4b2a      	ldr	r3, [pc, #168]	; (8012260 <tcp_free_acked_segments+0xe0>)
 80121b6:	f240 4257 	movw	r2, #1111	; 0x457
 80121ba:	492a      	ldr	r1, [pc, #168]	; (8012264 <tcp_free_acked_segments+0xe4>)
 80121bc:	482a      	ldr	r0, [pc, #168]	; (8012268 <tcp_free_acked_segments+0xe8>)
 80121be:	f00e f90d 	bl	80203dc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80121c8:	8a7b      	ldrh	r3, [r7, #18]
 80121ca:	1ad3      	subs	r3, r2, r3
 80121cc:	b29a      	uxth	r2, r3
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80121d4:	697b      	ldr	r3, [r7, #20]
 80121d6:	891a      	ldrh	r2, [r3, #8]
 80121d8:	4b24      	ldr	r3, [pc, #144]	; (801226c <tcp_free_acked_segments+0xec>)
 80121da:	881b      	ldrh	r3, [r3, #0]
 80121dc:	4413      	add	r3, r2
 80121de:	b29a      	uxth	r2, r3
 80121e0:	4b22      	ldr	r3, [pc, #136]	; (801226c <tcp_free_acked_segments+0xec>)
 80121e2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80121e4:	6978      	ldr	r0, [r7, #20]
 80121e6:	f7fe f94c 	bl	8010482 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d00c      	beq.n	801220e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80121f4:	68bb      	ldr	r3, [r7, #8]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d109      	bne.n	801220e <tcp_free_acked_segments+0x8e>
 80121fa:	683b      	ldr	r3, [r7, #0]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d106      	bne.n	801220e <tcp_free_acked_segments+0x8e>
 8012200:	4b17      	ldr	r3, [pc, #92]	; (8012260 <tcp_free_acked_segments+0xe0>)
 8012202:	f240 4261 	movw	r2, #1121	; 0x461
 8012206:	491a      	ldr	r1, [pc, #104]	; (8012270 <tcp_free_acked_segments+0xf0>)
 8012208:	4817      	ldr	r0, [pc, #92]	; (8012268 <tcp_free_acked_segments+0xe8>)
 801220a:	f00e f8e7 	bl	80203dc <iprintf>
  while (seg_list != NULL &&
 801220e:	68bb      	ldr	r3, [r7, #8]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d020      	beq.n	8012256 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8012214:	68bb      	ldr	r3, [r7, #8]
 8012216:	691b      	ldr	r3, [r3, #16]
 8012218:	685b      	ldr	r3, [r3, #4]
 801221a:	4618      	mov	r0, r3
 801221c:	f7fa fbc5 	bl	800c9aa <lwip_htonl>
 8012220:	4604      	mov	r4, r0
 8012222:	68bb      	ldr	r3, [r7, #8]
 8012224:	891b      	ldrh	r3, [r3, #8]
 8012226:	461d      	mov	r5, r3
 8012228:	68bb      	ldr	r3, [r7, #8]
 801222a:	691b      	ldr	r3, [r3, #16]
 801222c:	899b      	ldrh	r3, [r3, #12]
 801222e:	b29b      	uxth	r3, r3
 8012230:	4618      	mov	r0, r3
 8012232:	f7fa fba5 	bl	800c980 <lwip_htons>
 8012236:	4603      	mov	r3, r0
 8012238:	b2db      	uxtb	r3, r3
 801223a:	f003 0303 	and.w	r3, r3, #3
 801223e:	2b00      	cmp	r3, #0
 8012240:	d001      	beq.n	8012246 <tcp_free_acked_segments+0xc6>
 8012242:	2301      	movs	r3, #1
 8012244:	e000      	b.n	8012248 <tcp_free_acked_segments+0xc8>
 8012246:	2300      	movs	r3, #0
 8012248:	442b      	add	r3, r5
 801224a:	18e2      	adds	r2, r4, r3
 801224c:	4b09      	ldr	r3, [pc, #36]	; (8012274 <tcp_free_acked_segments+0xf4>)
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8012252:	2b00      	cmp	r3, #0
 8012254:	dd9c      	ble.n	8012190 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8012256:	68bb      	ldr	r3, [r7, #8]
}
 8012258:	4618      	mov	r0, r3
 801225a:	3718      	adds	r7, #24
 801225c:	46bd      	mov	sp, r7
 801225e:	bdb0      	pop	{r4, r5, r7, pc}
 8012260:	08022bf0 	.word	0x08022bf0
 8012264:	08022ed8 	.word	0x08022ed8
 8012268:	08022c3c 	.word	0x08022c3c
 801226c:	20006870 	.word	0x20006870
 8012270:	08022f00 	.word	0x08022f00
 8012274:	2000686c 	.word	0x2000686c

08012278 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8012278:	b5b0      	push	{r4, r5, r7, lr}
 801227a:	b094      	sub	sp, #80	; 0x50
 801227c:	af00      	add	r7, sp, #0
 801227e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8012280:	2300      	movs	r3, #0
 8012282:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d106      	bne.n	8012298 <tcp_receive+0x20>
 801228a:	4ba6      	ldr	r3, [pc, #664]	; (8012524 <tcp_receive+0x2ac>)
 801228c:	f240 427b 	movw	r2, #1147	; 0x47b
 8012290:	49a5      	ldr	r1, [pc, #660]	; (8012528 <tcp_receive+0x2b0>)
 8012292:	48a6      	ldr	r0, [pc, #664]	; (801252c <tcp_receive+0x2b4>)
 8012294:	f00e f8a2 	bl	80203dc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	7d1b      	ldrb	r3, [r3, #20]
 801229c:	2b03      	cmp	r3, #3
 801229e:	d806      	bhi.n	80122ae <tcp_receive+0x36>
 80122a0:	4ba0      	ldr	r3, [pc, #640]	; (8012524 <tcp_receive+0x2ac>)
 80122a2:	f240 427c 	movw	r2, #1148	; 0x47c
 80122a6:	49a2      	ldr	r1, [pc, #648]	; (8012530 <tcp_receive+0x2b8>)
 80122a8:	48a0      	ldr	r0, [pc, #640]	; (801252c <tcp_receive+0x2b4>)
 80122aa:	f00e f897 	bl	80203dc <iprintf>

  if (flags & TCP_ACK) {
 80122ae:	4ba1      	ldr	r3, [pc, #644]	; (8012534 <tcp_receive+0x2bc>)
 80122b0:	781b      	ldrb	r3, [r3, #0]
 80122b2:	f003 0310 	and.w	r3, r3, #16
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	f000 8263 	beq.w	8012782 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80122c2:	461a      	mov	r2, r3
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80122c8:	4413      	add	r3, r2
 80122ca:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80122d0:	4b99      	ldr	r3, [pc, #612]	; (8012538 <tcp_receive+0x2c0>)
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	1ad3      	subs	r3, r2, r3
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	db1b      	blt.n	8012312 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80122de:	4b96      	ldr	r3, [pc, #600]	; (8012538 <tcp_receive+0x2c0>)
 80122e0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80122e2:	429a      	cmp	r2, r3
 80122e4:	d106      	bne.n	80122f4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80122ea:	4b94      	ldr	r3, [pc, #592]	; (801253c <tcp_receive+0x2c4>)
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	1ad3      	subs	r3, r2, r3
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	db0e      	blt.n	8012312 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80122f8:	4b90      	ldr	r3, [pc, #576]	; (801253c <tcp_receive+0x2c4>)
 80122fa:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80122fc:	429a      	cmp	r2, r3
 80122fe:	d125      	bne.n	801234c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012300:	4b8f      	ldr	r3, [pc, #572]	; (8012540 <tcp_receive+0x2c8>)
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	89db      	ldrh	r3, [r3, #14]
 8012306:	b29a      	uxth	r2, r3
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801230e:	429a      	cmp	r2, r3
 8012310:	d91c      	bls.n	801234c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8012312:	4b8b      	ldr	r3, [pc, #556]	; (8012540 <tcp_receive+0x2c8>)
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	89db      	ldrh	r3, [r3, #14]
 8012318:	b29a      	uxth	r2, r3
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801232c:	429a      	cmp	r2, r3
 801232e:	d205      	bcs.n	801233c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801233c:	4b7e      	ldr	r3, [pc, #504]	; (8012538 <tcp_receive+0x2c0>)
 801233e:	681a      	ldr	r2, [r3, #0]
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8012344:	4b7d      	ldr	r3, [pc, #500]	; (801253c <tcp_receive+0x2c4>)
 8012346:	681a      	ldr	r2, [r3, #0]
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801234c:	4b7b      	ldr	r3, [pc, #492]	; (801253c <tcp_receive+0x2c4>)
 801234e:	681a      	ldr	r2, [r3, #0]
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012354:	1ad3      	subs	r3, r2, r3
 8012356:	2b00      	cmp	r3, #0
 8012358:	dc58      	bgt.n	801240c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801235a:	4b7a      	ldr	r3, [pc, #488]	; (8012544 <tcp_receive+0x2cc>)
 801235c:	881b      	ldrh	r3, [r3, #0]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d14b      	bne.n	80123fa <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012366:	687a      	ldr	r2, [r7, #4]
 8012368:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801236c:	4413      	add	r3, r2
 801236e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012370:	429a      	cmp	r2, r3
 8012372:	d142      	bne.n	80123fa <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801237a:	2b00      	cmp	r3, #0
 801237c:	db3d      	blt.n	80123fa <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012382:	4b6e      	ldr	r3, [pc, #440]	; (801253c <tcp_receive+0x2c4>)
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	429a      	cmp	r2, r3
 8012388:	d137      	bne.n	80123fa <tcp_receive+0x182>
              found_dupack = 1;
 801238a:	2301      	movs	r3, #1
 801238c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012394:	2bff      	cmp	r3, #255	; 0xff
 8012396:	d007      	beq.n	80123a8 <tcp_receive+0x130>
                ++pcb->dupacks;
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801239e:	3301      	adds	r3, #1
 80123a0:	b2da      	uxtb	r2, r3
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80123ae:	2b03      	cmp	r3, #3
 80123b0:	d91b      	bls.n	80123ea <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80123bc:	4413      	add	r3, r2
 80123be:	b29a      	uxth	r2, r3
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80123c6:	429a      	cmp	r2, r3
 80123c8:	d30a      	bcc.n	80123e0 <tcp_receive+0x168>
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80123d4:	4413      	add	r3, r2
 80123d6:	b29a      	uxth	r2, r3
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80123de:	e004      	b.n	80123ea <tcp_receive+0x172>
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80123e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80123f0:	2b02      	cmp	r3, #2
 80123f2:	d902      	bls.n	80123fa <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80123f4:	6878      	ldr	r0, [r7, #4]
 80123f6:	f001 ff2b 	bl	8014250 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80123fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	f040 8160 	bne.w	80126c2 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	2200      	movs	r2, #0
 8012406:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801240a:	e15a      	b.n	80126c2 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801240c:	4b4b      	ldr	r3, [pc, #300]	; (801253c <tcp_receive+0x2c4>)
 801240e:	681a      	ldr	r2, [r3, #0]
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012414:	1ad3      	subs	r3, r2, r3
 8012416:	3b01      	subs	r3, #1
 8012418:	2b00      	cmp	r3, #0
 801241a:	f2c0 814d 	blt.w	80126b8 <tcp_receive+0x440>
 801241e:	4b47      	ldr	r3, [pc, #284]	; (801253c <tcp_receive+0x2c4>)
 8012420:	681a      	ldr	r2, [r3, #0]
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012426:	1ad3      	subs	r3, r2, r3
 8012428:	2b00      	cmp	r3, #0
 801242a:	f300 8145 	bgt.w	80126b8 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	8b5b      	ldrh	r3, [r3, #26]
 8012432:	f003 0304 	and.w	r3, r3, #4
 8012436:	2b00      	cmp	r3, #0
 8012438:	d010      	beq.n	801245c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	8b5b      	ldrh	r3, [r3, #26]
 801243e:	f023 0304 	bic.w	r3, r3, #4
 8012442:	b29a      	uxth	r2, r3
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	2200      	movs	r2, #0
 8012458:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	2200      	movs	r2, #0
 8012460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801246a:	10db      	asrs	r3, r3, #3
 801246c:	b21b      	sxth	r3, r3
 801246e:	b29a      	uxth	r2, r3
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012476:	b29b      	uxth	r3, r3
 8012478:	4413      	add	r3, r2
 801247a:	b29b      	uxth	r3, r3
 801247c:	b21a      	sxth	r2, r3
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8012484:	4b2d      	ldr	r3, [pc, #180]	; (801253c <tcp_receive+0x2c4>)
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	b29a      	uxth	r2, r3
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801248e:	b29b      	uxth	r3, r3
 8012490:	1ad3      	subs	r3, r2, r3
 8012492:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	2200      	movs	r2, #0
 8012498:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801249c:	4b27      	ldr	r3, [pc, #156]	; (801253c <tcp_receive+0x2c4>)
 801249e:	681a      	ldr	r2, [r3, #0]
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	7d1b      	ldrb	r3, [r3, #20]
 80124a8:	2b03      	cmp	r3, #3
 80124aa:	f240 8096 	bls.w	80125da <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80124ba:	429a      	cmp	r2, r3
 80124bc:	d244      	bcs.n	8012548 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	8b5b      	ldrh	r3, [r3, #26]
 80124c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d001      	beq.n	80124ce <tcp_receive+0x256>
 80124ca:	2301      	movs	r3, #1
 80124cc:	e000      	b.n	80124d0 <tcp_receive+0x258>
 80124ce:	2302      	movs	r3, #2
 80124d0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80124d4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80124d8:	b29a      	uxth	r2, r3
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80124de:	fb12 f303 	smulbb	r3, r2, r3
 80124e2:	b29b      	uxth	r3, r3
 80124e4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80124e6:	4293      	cmp	r3, r2
 80124e8:	bf28      	it	cs
 80124ea:	4613      	movcs	r3, r2
 80124ec:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80124f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80124f6:	4413      	add	r3, r2
 80124f8:	b29a      	uxth	r2, r3
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012500:	429a      	cmp	r2, r3
 8012502:	d309      	bcc.n	8012518 <tcp_receive+0x2a0>
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801250a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801250c:	4413      	add	r3, r2
 801250e:	b29a      	uxth	r2, r3
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012516:	e060      	b.n	80125da <tcp_receive+0x362>
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801251e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012522:	e05a      	b.n	80125da <tcp_receive+0x362>
 8012524:	08022bf0 	.word	0x08022bf0
 8012528:	08022f20 	.word	0x08022f20
 801252c:	08022c3c 	.word	0x08022c3c
 8012530:	08022f3c 	.word	0x08022f3c
 8012534:	20006874 	.word	0x20006874
 8012538:	20006868 	.word	0x20006868
 801253c:	2000686c 	.word	0x2000686c
 8012540:	20006858 	.word	0x20006858
 8012544:	20006872 	.word	0x20006872
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801254e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012550:	4413      	add	r3, r2
 8012552:	b29a      	uxth	r2, r3
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801255a:	429a      	cmp	r2, r3
 801255c:	d309      	bcc.n	8012572 <tcp_receive+0x2fa>
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012564:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012566:	4413      	add	r3, r2
 8012568:	b29a      	uxth	r2, r3
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8012570:	e004      	b.n	801257c <tcp_receive+0x304>
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012578:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012588:	429a      	cmp	r2, r3
 801258a:	d326      	bcc.n	80125da <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012598:	1ad3      	subs	r3, r2, r3
 801259a:	b29a      	uxth	r2, r3
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80125ac:	4413      	add	r3, r2
 80125ae:	b29a      	uxth	r2, r3
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80125b6:	429a      	cmp	r2, r3
 80125b8:	d30a      	bcc.n	80125d0 <tcp_receive+0x358>
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80125c4:	4413      	add	r3, r2
 80125c6:	b29a      	uxth	r2, r3
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80125ce:	e004      	b.n	80125da <tcp_receive+0x362>
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80125d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125e2:	4a98      	ldr	r2, [pc, #608]	; (8012844 <tcp_receive+0x5cc>)
 80125e4:	6878      	ldr	r0, [r7, #4]
 80125e6:	f7ff fdcb 	bl	8012180 <tcp_free_acked_segments>
 80125ea:	4602      	mov	r2, r0
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80125f8:	4a93      	ldr	r2, [pc, #588]	; (8012848 <tcp_receive+0x5d0>)
 80125fa:	6878      	ldr	r0, [r7, #4]
 80125fc:	f7ff fdc0 	bl	8012180 <tcp_free_acked_segments>
 8012600:	4602      	mov	r2, r0
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801260a:	2b00      	cmp	r3, #0
 801260c:	d104      	bne.n	8012618 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012614:	861a      	strh	r2, [r3, #48]	; 0x30
 8012616:	e002      	b.n	801261e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	2200      	movs	r2, #0
 801261c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	2200      	movs	r2, #0
 8012622:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012628:	2b00      	cmp	r3, #0
 801262a:	d103      	bne.n	8012634 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	2200      	movs	r2, #0
 8012630:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801263a:	4b84      	ldr	r3, [pc, #528]	; (801284c <tcp_receive+0x5d4>)
 801263c:	881b      	ldrh	r3, [r3, #0]
 801263e:	4413      	add	r3, r2
 8012640:	b29a      	uxth	r2, r3
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	8b5b      	ldrh	r3, [r3, #26]
 801264c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012650:	2b00      	cmp	r3, #0
 8012652:	d035      	beq.n	80126c0 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012658:	2b00      	cmp	r3, #0
 801265a:	d118      	bne.n	801268e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012660:	2b00      	cmp	r3, #0
 8012662:	d00c      	beq.n	801267e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801266c:	691b      	ldr	r3, [r3, #16]
 801266e:	685b      	ldr	r3, [r3, #4]
 8012670:	4618      	mov	r0, r3
 8012672:	f7fa f99a 	bl	800c9aa <lwip_htonl>
 8012676:	4603      	mov	r3, r0
 8012678:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801267a:	2b00      	cmp	r3, #0
 801267c:	dc20      	bgt.n	80126c0 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	8b5b      	ldrh	r3, [r3, #26]
 8012682:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012686:	b29a      	uxth	r2, r3
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801268c:	e018      	b.n	80126c0 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012696:	691b      	ldr	r3, [r3, #16]
 8012698:	685b      	ldr	r3, [r3, #4]
 801269a:	4618      	mov	r0, r3
 801269c:	f7fa f985 	bl	800c9aa <lwip_htonl>
 80126a0:	4603      	mov	r3, r0
 80126a2:	1ae3      	subs	r3, r4, r3
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	dc0b      	bgt.n	80126c0 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	8b5b      	ldrh	r3, [r3, #26]
 80126ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80126b0:	b29a      	uxth	r2, r3
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80126b6:	e003      	b.n	80126c0 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80126b8:	6878      	ldr	r0, [r7, #4]
 80126ba:	f001 ffc1 	bl	8014640 <tcp_send_empty_ack>
 80126be:	e000      	b.n	80126c2 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80126c0:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d05b      	beq.n	8012782 <tcp_receive+0x50a>
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80126ce:	4b60      	ldr	r3, [pc, #384]	; (8012850 <tcp_receive+0x5d8>)
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	1ad3      	subs	r3, r2, r3
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	da54      	bge.n	8012782 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80126d8:	4b5e      	ldr	r3, [pc, #376]	; (8012854 <tcp_receive+0x5dc>)
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	b29a      	uxth	r2, r3
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126e2:	b29b      	uxth	r3, r3
 80126e4:	1ad3      	subs	r3, r2, r3
 80126e6:	b29b      	uxth	r3, r3
 80126e8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80126ec:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80126f6:	10db      	asrs	r3, r3, #3
 80126f8:	b21b      	sxth	r3, r3
 80126fa:	b29b      	uxth	r3, r3
 80126fc:	1ad3      	subs	r3, r2, r3
 80126fe:	b29b      	uxth	r3, r3
 8012700:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801270a:	b29a      	uxth	r2, r3
 801270c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012710:	4413      	add	r3, r2
 8012712:	b29b      	uxth	r3, r3
 8012714:	b21a      	sxth	r2, r3
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801271a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801271e:	2b00      	cmp	r3, #0
 8012720:	da05      	bge.n	801272e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8012722:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012726:	425b      	negs	r3, r3
 8012728:	b29b      	uxth	r3, r3
 801272a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801272e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012738:	109b      	asrs	r3, r3, #2
 801273a:	b21b      	sxth	r3, r3
 801273c:	b29b      	uxth	r3, r3
 801273e:	1ad3      	subs	r3, r2, r3
 8012740:	b29b      	uxth	r3, r3
 8012742:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801274c:	b29a      	uxth	r2, r3
 801274e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012752:	4413      	add	r3, r2
 8012754:	b29b      	uxth	r3, r3
 8012756:	b21a      	sxth	r2, r3
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012762:	10db      	asrs	r3, r3, #3
 8012764:	b21b      	sxth	r3, r3
 8012766:	b29a      	uxth	r2, r3
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801276e:	b29b      	uxth	r3, r3
 8012770:	4413      	add	r3, r2
 8012772:	b29b      	uxth	r3, r3
 8012774:	b21a      	sxth	r2, r3
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	2200      	movs	r2, #0
 8012780:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8012782:	4b35      	ldr	r3, [pc, #212]	; (8012858 <tcp_receive+0x5e0>)
 8012784:	881b      	ldrh	r3, [r3, #0]
 8012786:	2b00      	cmp	r3, #0
 8012788:	f000 84e1 	beq.w	801314e <tcp_receive+0xed6>
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	7d1b      	ldrb	r3, [r3, #20]
 8012790:	2b06      	cmp	r3, #6
 8012792:	f200 84dc 	bhi.w	801314e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801279a:	4b30      	ldr	r3, [pc, #192]	; (801285c <tcp_receive+0x5e4>)
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	1ad3      	subs	r3, r2, r3
 80127a0:	3b01      	subs	r3, #1
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	f2c0 808e 	blt.w	80128c4 <tcp_receive+0x64c>
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80127ac:	4b2a      	ldr	r3, [pc, #168]	; (8012858 <tcp_receive+0x5e0>)
 80127ae:	881b      	ldrh	r3, [r3, #0]
 80127b0:	4619      	mov	r1, r3
 80127b2:	4b2a      	ldr	r3, [pc, #168]	; (801285c <tcp_receive+0x5e4>)
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	440b      	add	r3, r1
 80127b8:	1ad3      	subs	r3, r2, r3
 80127ba:	3301      	adds	r3, #1
 80127bc:	2b00      	cmp	r3, #0
 80127be:	f300 8081 	bgt.w	80128c4 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80127c2:	4b27      	ldr	r3, [pc, #156]	; (8012860 <tcp_receive+0x5e8>)
 80127c4:	685b      	ldr	r3, [r3, #4]
 80127c6:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80127cc:	4b23      	ldr	r3, [pc, #140]	; (801285c <tcp_receive+0x5e4>)
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	1ad3      	subs	r3, r2, r3
 80127d2:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80127d4:	4b22      	ldr	r3, [pc, #136]	; (8012860 <tcp_receive+0x5e8>)
 80127d6:	685b      	ldr	r3, [r3, #4]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d106      	bne.n	80127ea <tcp_receive+0x572>
 80127dc:	4b21      	ldr	r3, [pc, #132]	; (8012864 <tcp_receive+0x5ec>)
 80127de:	f240 5294 	movw	r2, #1428	; 0x594
 80127e2:	4921      	ldr	r1, [pc, #132]	; (8012868 <tcp_receive+0x5f0>)
 80127e4:	4821      	ldr	r0, [pc, #132]	; (801286c <tcp_receive+0x5f4>)
 80127e6:	f00d fdf9 	bl	80203dc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80127ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127ec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80127f0:	4293      	cmp	r3, r2
 80127f2:	d906      	bls.n	8012802 <tcp_receive+0x58a>
 80127f4:	4b1b      	ldr	r3, [pc, #108]	; (8012864 <tcp_receive+0x5ec>)
 80127f6:	f240 5295 	movw	r2, #1429	; 0x595
 80127fa:	491d      	ldr	r1, [pc, #116]	; (8012870 <tcp_receive+0x5f8>)
 80127fc:	481b      	ldr	r0, [pc, #108]	; (801286c <tcp_receive+0x5f4>)
 80127fe:	f00d fded 	bl	80203dc <iprintf>
      off = (u16_t)off32;
 8012802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012804:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8012808:	4b15      	ldr	r3, [pc, #84]	; (8012860 <tcp_receive+0x5e8>)
 801280a:	685b      	ldr	r3, [r3, #4]
 801280c:	891b      	ldrh	r3, [r3, #8]
 801280e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012812:	429a      	cmp	r2, r3
 8012814:	d906      	bls.n	8012824 <tcp_receive+0x5ac>
 8012816:	4b13      	ldr	r3, [pc, #76]	; (8012864 <tcp_receive+0x5ec>)
 8012818:	f240 5297 	movw	r2, #1431	; 0x597
 801281c:	4915      	ldr	r1, [pc, #84]	; (8012874 <tcp_receive+0x5fc>)
 801281e:	4813      	ldr	r0, [pc, #76]	; (801286c <tcp_receive+0x5f4>)
 8012820:	f00d fddc 	bl	80203dc <iprintf>
      inseg.len -= off;
 8012824:	4b0e      	ldr	r3, [pc, #56]	; (8012860 <tcp_receive+0x5e8>)
 8012826:	891a      	ldrh	r2, [r3, #8]
 8012828:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801282c:	1ad3      	subs	r3, r2, r3
 801282e:	b29a      	uxth	r2, r3
 8012830:	4b0b      	ldr	r3, [pc, #44]	; (8012860 <tcp_receive+0x5e8>)
 8012832:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012834:	4b0a      	ldr	r3, [pc, #40]	; (8012860 <tcp_receive+0x5e8>)
 8012836:	685b      	ldr	r3, [r3, #4]
 8012838:	891a      	ldrh	r2, [r3, #8]
 801283a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801283e:	1ad3      	subs	r3, r2, r3
 8012840:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8012842:	e029      	b.n	8012898 <tcp_receive+0x620>
 8012844:	08022f58 	.word	0x08022f58
 8012848:	08022f60 	.word	0x08022f60
 801284c:	20006870 	.word	0x20006870
 8012850:	2000686c 	.word	0x2000686c
 8012854:	2000a518 	.word	0x2000a518
 8012858:	20006872 	.word	0x20006872
 801285c:	20006868 	.word	0x20006868
 8012860:	20006844 	.word	0x20006844
 8012864:	08022bf0 	.word	0x08022bf0
 8012868:	08022f68 	.word	0x08022f68
 801286c:	08022c3c 	.word	0x08022c3c
 8012870:	08022f78 	.word	0x08022f78
 8012874:	08022f88 	.word	0x08022f88
        off -= p->len;
 8012878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801287a:	895b      	ldrh	r3, [r3, #10]
 801287c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012880:	1ad3      	subs	r3, r2, r3
 8012882:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8012886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012888:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801288a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801288c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801288e:	2200      	movs	r2, #0
 8012890:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8012892:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8012898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801289a:	895b      	ldrh	r3, [r3, #10]
 801289c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80128a0:	429a      	cmp	r2, r3
 80128a2:	d8e9      	bhi.n	8012878 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80128a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80128a8:	4619      	mov	r1, r3
 80128aa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80128ac:	f7fc f96a 	bl	800eb84 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128b4:	4a91      	ldr	r2, [pc, #580]	; (8012afc <tcp_receive+0x884>)
 80128b6:	6013      	str	r3, [r2, #0]
 80128b8:	4b91      	ldr	r3, [pc, #580]	; (8012b00 <tcp_receive+0x888>)
 80128ba:	691b      	ldr	r3, [r3, #16]
 80128bc:	4a8f      	ldr	r2, [pc, #572]	; (8012afc <tcp_receive+0x884>)
 80128be:	6812      	ldr	r2, [r2, #0]
 80128c0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80128c2:	e00d      	b.n	80128e0 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80128c4:	4b8d      	ldr	r3, [pc, #564]	; (8012afc <tcp_receive+0x884>)
 80128c6:	681a      	ldr	r2, [r3, #0]
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128cc:	1ad3      	subs	r3, r2, r3
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	da06      	bge.n	80128e0 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	8b5b      	ldrh	r3, [r3, #26]
 80128d6:	f043 0302 	orr.w	r3, r3, #2
 80128da:	b29a      	uxth	r2, r3
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80128e0:	4b86      	ldr	r3, [pc, #536]	; (8012afc <tcp_receive+0x884>)
 80128e2:	681a      	ldr	r2, [r3, #0]
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128e8:	1ad3      	subs	r3, r2, r3
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	f2c0 842a 	blt.w	8013144 <tcp_receive+0xecc>
 80128f0:	4b82      	ldr	r3, [pc, #520]	; (8012afc <tcp_receive+0x884>)
 80128f2:	681a      	ldr	r2, [r3, #0]
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128f8:	6879      	ldr	r1, [r7, #4]
 80128fa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80128fc:	440b      	add	r3, r1
 80128fe:	1ad3      	subs	r3, r2, r3
 8012900:	3301      	adds	r3, #1
 8012902:	2b00      	cmp	r3, #0
 8012904:	f300 841e 	bgt.w	8013144 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801290c:	4b7b      	ldr	r3, [pc, #492]	; (8012afc <tcp_receive+0x884>)
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	429a      	cmp	r2, r3
 8012912:	f040 829a 	bne.w	8012e4a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8012916:	4b7a      	ldr	r3, [pc, #488]	; (8012b00 <tcp_receive+0x888>)
 8012918:	891c      	ldrh	r4, [r3, #8]
 801291a:	4b79      	ldr	r3, [pc, #484]	; (8012b00 <tcp_receive+0x888>)
 801291c:	691b      	ldr	r3, [r3, #16]
 801291e:	899b      	ldrh	r3, [r3, #12]
 8012920:	b29b      	uxth	r3, r3
 8012922:	4618      	mov	r0, r3
 8012924:	f7fa f82c 	bl	800c980 <lwip_htons>
 8012928:	4603      	mov	r3, r0
 801292a:	b2db      	uxtb	r3, r3
 801292c:	f003 0303 	and.w	r3, r3, #3
 8012930:	2b00      	cmp	r3, #0
 8012932:	d001      	beq.n	8012938 <tcp_receive+0x6c0>
 8012934:	2301      	movs	r3, #1
 8012936:	e000      	b.n	801293a <tcp_receive+0x6c2>
 8012938:	2300      	movs	r3, #0
 801293a:	4423      	add	r3, r4
 801293c:	b29a      	uxth	r2, r3
 801293e:	4b71      	ldr	r3, [pc, #452]	; (8012b04 <tcp_receive+0x88c>)
 8012940:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012946:	4b6f      	ldr	r3, [pc, #444]	; (8012b04 <tcp_receive+0x88c>)
 8012948:	881b      	ldrh	r3, [r3, #0]
 801294a:	429a      	cmp	r2, r3
 801294c:	d275      	bcs.n	8012a3a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801294e:	4b6c      	ldr	r3, [pc, #432]	; (8012b00 <tcp_receive+0x888>)
 8012950:	691b      	ldr	r3, [r3, #16]
 8012952:	899b      	ldrh	r3, [r3, #12]
 8012954:	b29b      	uxth	r3, r3
 8012956:	4618      	mov	r0, r3
 8012958:	f7fa f812 	bl	800c980 <lwip_htons>
 801295c:	4603      	mov	r3, r0
 801295e:	b2db      	uxtb	r3, r3
 8012960:	f003 0301 	and.w	r3, r3, #1
 8012964:	2b00      	cmp	r3, #0
 8012966:	d01f      	beq.n	80129a8 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012968:	4b65      	ldr	r3, [pc, #404]	; (8012b00 <tcp_receive+0x888>)
 801296a:	691b      	ldr	r3, [r3, #16]
 801296c:	899b      	ldrh	r3, [r3, #12]
 801296e:	b29b      	uxth	r3, r3
 8012970:	b21b      	sxth	r3, r3
 8012972:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012976:	b21c      	sxth	r4, r3
 8012978:	4b61      	ldr	r3, [pc, #388]	; (8012b00 <tcp_receive+0x888>)
 801297a:	691b      	ldr	r3, [r3, #16]
 801297c:	899b      	ldrh	r3, [r3, #12]
 801297e:	b29b      	uxth	r3, r3
 8012980:	4618      	mov	r0, r3
 8012982:	f7f9 fffd 	bl	800c980 <lwip_htons>
 8012986:	4603      	mov	r3, r0
 8012988:	b2db      	uxtb	r3, r3
 801298a:	b29b      	uxth	r3, r3
 801298c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012990:	b29b      	uxth	r3, r3
 8012992:	4618      	mov	r0, r3
 8012994:	f7f9 fff4 	bl	800c980 <lwip_htons>
 8012998:	4603      	mov	r3, r0
 801299a:	b21b      	sxth	r3, r3
 801299c:	4323      	orrs	r3, r4
 801299e:	b21a      	sxth	r2, r3
 80129a0:	4b57      	ldr	r3, [pc, #348]	; (8012b00 <tcp_receive+0x888>)
 80129a2:	691b      	ldr	r3, [r3, #16]
 80129a4:	b292      	uxth	r2, r2
 80129a6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80129ac:	4b54      	ldr	r3, [pc, #336]	; (8012b00 <tcp_receive+0x888>)
 80129ae:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80129b0:	4b53      	ldr	r3, [pc, #332]	; (8012b00 <tcp_receive+0x888>)
 80129b2:	691b      	ldr	r3, [r3, #16]
 80129b4:	899b      	ldrh	r3, [r3, #12]
 80129b6:	b29b      	uxth	r3, r3
 80129b8:	4618      	mov	r0, r3
 80129ba:	f7f9 ffe1 	bl	800c980 <lwip_htons>
 80129be:	4603      	mov	r3, r0
 80129c0:	b2db      	uxtb	r3, r3
 80129c2:	f003 0302 	and.w	r3, r3, #2
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d005      	beq.n	80129d6 <tcp_receive+0x75e>
            inseg.len -= 1;
 80129ca:	4b4d      	ldr	r3, [pc, #308]	; (8012b00 <tcp_receive+0x888>)
 80129cc:	891b      	ldrh	r3, [r3, #8]
 80129ce:	3b01      	subs	r3, #1
 80129d0:	b29a      	uxth	r2, r3
 80129d2:	4b4b      	ldr	r3, [pc, #300]	; (8012b00 <tcp_receive+0x888>)
 80129d4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80129d6:	4b4a      	ldr	r3, [pc, #296]	; (8012b00 <tcp_receive+0x888>)
 80129d8:	685b      	ldr	r3, [r3, #4]
 80129da:	4a49      	ldr	r2, [pc, #292]	; (8012b00 <tcp_receive+0x888>)
 80129dc:	8912      	ldrh	r2, [r2, #8]
 80129de:	4611      	mov	r1, r2
 80129e0:	4618      	mov	r0, r3
 80129e2:	f7fb ffcf 	bl	800e984 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80129e6:	4b46      	ldr	r3, [pc, #280]	; (8012b00 <tcp_receive+0x888>)
 80129e8:	891c      	ldrh	r4, [r3, #8]
 80129ea:	4b45      	ldr	r3, [pc, #276]	; (8012b00 <tcp_receive+0x888>)
 80129ec:	691b      	ldr	r3, [r3, #16]
 80129ee:	899b      	ldrh	r3, [r3, #12]
 80129f0:	b29b      	uxth	r3, r3
 80129f2:	4618      	mov	r0, r3
 80129f4:	f7f9 ffc4 	bl	800c980 <lwip_htons>
 80129f8:	4603      	mov	r3, r0
 80129fa:	b2db      	uxtb	r3, r3
 80129fc:	f003 0303 	and.w	r3, r3, #3
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d001      	beq.n	8012a08 <tcp_receive+0x790>
 8012a04:	2301      	movs	r3, #1
 8012a06:	e000      	b.n	8012a0a <tcp_receive+0x792>
 8012a08:	2300      	movs	r3, #0
 8012a0a:	4423      	add	r3, r4
 8012a0c:	b29a      	uxth	r2, r3
 8012a0e:	4b3d      	ldr	r3, [pc, #244]	; (8012b04 <tcp_receive+0x88c>)
 8012a10:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012a12:	4b3c      	ldr	r3, [pc, #240]	; (8012b04 <tcp_receive+0x88c>)
 8012a14:	881b      	ldrh	r3, [r3, #0]
 8012a16:	461a      	mov	r2, r3
 8012a18:	4b38      	ldr	r3, [pc, #224]	; (8012afc <tcp_receive+0x884>)
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	441a      	add	r2, r3
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a22:	6879      	ldr	r1, [r7, #4]
 8012a24:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012a26:	440b      	add	r3, r1
 8012a28:	429a      	cmp	r2, r3
 8012a2a:	d006      	beq.n	8012a3a <tcp_receive+0x7c2>
 8012a2c:	4b36      	ldr	r3, [pc, #216]	; (8012b08 <tcp_receive+0x890>)
 8012a2e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8012a32:	4936      	ldr	r1, [pc, #216]	; (8012b0c <tcp_receive+0x894>)
 8012a34:	4836      	ldr	r0, [pc, #216]	; (8012b10 <tcp_receive+0x898>)
 8012a36:	f00d fcd1 	bl	80203dc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	f000 80e7 	beq.w	8012c12 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012a44:	4b2e      	ldr	r3, [pc, #184]	; (8012b00 <tcp_receive+0x888>)
 8012a46:	691b      	ldr	r3, [r3, #16]
 8012a48:	899b      	ldrh	r3, [r3, #12]
 8012a4a:	b29b      	uxth	r3, r3
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	f7f9 ff97 	bl	800c980 <lwip_htons>
 8012a52:	4603      	mov	r3, r0
 8012a54:	b2db      	uxtb	r3, r3
 8012a56:	f003 0301 	and.w	r3, r3, #1
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d010      	beq.n	8012a80 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8012a5e:	e00a      	b.n	8012a76 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a64:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a6a:	681a      	ldr	r2, [r3, #0]
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8012a70:	68f8      	ldr	r0, [r7, #12]
 8012a72:	f7fd fd06 	bl	8010482 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d1f0      	bne.n	8012a60 <tcp_receive+0x7e8>
 8012a7e:	e0c8      	b.n	8012c12 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a84:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8012a86:	e052      	b.n	8012b2e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a8a:	691b      	ldr	r3, [r3, #16]
 8012a8c:	899b      	ldrh	r3, [r3, #12]
 8012a8e:	b29b      	uxth	r3, r3
 8012a90:	4618      	mov	r0, r3
 8012a92:	f7f9 ff75 	bl	800c980 <lwip_htons>
 8012a96:	4603      	mov	r3, r0
 8012a98:	b2db      	uxtb	r3, r3
 8012a9a:	f003 0301 	and.w	r3, r3, #1
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d03d      	beq.n	8012b1e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8012aa2:	4b17      	ldr	r3, [pc, #92]	; (8012b00 <tcp_receive+0x888>)
 8012aa4:	691b      	ldr	r3, [r3, #16]
 8012aa6:	899b      	ldrh	r3, [r3, #12]
 8012aa8:	b29b      	uxth	r3, r3
 8012aaa:	4618      	mov	r0, r3
 8012aac:	f7f9 ff68 	bl	800c980 <lwip_htons>
 8012ab0:	4603      	mov	r3, r0
 8012ab2:	b2db      	uxtb	r3, r3
 8012ab4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d130      	bne.n	8012b1e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8012abc:	4b10      	ldr	r3, [pc, #64]	; (8012b00 <tcp_receive+0x888>)
 8012abe:	691b      	ldr	r3, [r3, #16]
 8012ac0:	899b      	ldrh	r3, [r3, #12]
 8012ac2:	b29c      	uxth	r4, r3
 8012ac4:	2001      	movs	r0, #1
 8012ac6:	f7f9 ff5b 	bl	800c980 <lwip_htons>
 8012aca:	4603      	mov	r3, r0
 8012acc:	461a      	mov	r2, r3
 8012ace:	4b0c      	ldr	r3, [pc, #48]	; (8012b00 <tcp_receive+0x888>)
 8012ad0:	691b      	ldr	r3, [r3, #16]
 8012ad2:	4322      	orrs	r2, r4
 8012ad4:	b292      	uxth	r2, r2
 8012ad6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012ad8:	4b09      	ldr	r3, [pc, #36]	; (8012b00 <tcp_receive+0x888>)
 8012ada:	891c      	ldrh	r4, [r3, #8]
 8012adc:	4b08      	ldr	r3, [pc, #32]	; (8012b00 <tcp_receive+0x888>)
 8012ade:	691b      	ldr	r3, [r3, #16]
 8012ae0:	899b      	ldrh	r3, [r3, #12]
 8012ae2:	b29b      	uxth	r3, r3
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	f7f9 ff4b 	bl	800c980 <lwip_htons>
 8012aea:	4603      	mov	r3, r0
 8012aec:	b2db      	uxtb	r3, r3
 8012aee:	f003 0303 	and.w	r3, r3, #3
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d00e      	beq.n	8012b14 <tcp_receive+0x89c>
 8012af6:	2301      	movs	r3, #1
 8012af8:	e00d      	b.n	8012b16 <tcp_receive+0x89e>
 8012afa:	bf00      	nop
 8012afc:	20006868 	.word	0x20006868
 8012b00:	20006844 	.word	0x20006844
 8012b04:	20006872 	.word	0x20006872
 8012b08:	08022bf0 	.word	0x08022bf0
 8012b0c:	08022f98 	.word	0x08022f98
 8012b10:	08022c3c 	.word	0x08022c3c
 8012b14:	2300      	movs	r3, #0
 8012b16:	4423      	add	r3, r4
 8012b18:	b29a      	uxth	r2, r3
 8012b1a:	4b98      	ldr	r3, [pc, #608]	; (8012d7c <tcp_receive+0xb04>)
 8012b1c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8012b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b20:	613b      	str	r3, [r7, #16]
              next = next->next;
 8012b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8012b28:	6938      	ldr	r0, [r7, #16]
 8012b2a:	f7fd fcaa 	bl	8010482 <tcp_seg_free>
            while (next &&
 8012b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d00e      	beq.n	8012b52 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8012b34:	4b91      	ldr	r3, [pc, #580]	; (8012d7c <tcp_receive+0xb04>)
 8012b36:	881b      	ldrh	r3, [r3, #0]
 8012b38:	461a      	mov	r2, r3
 8012b3a:	4b91      	ldr	r3, [pc, #580]	; (8012d80 <tcp_receive+0xb08>)
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	441a      	add	r2, r3
 8012b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b42:	691b      	ldr	r3, [r3, #16]
 8012b44:	685b      	ldr	r3, [r3, #4]
 8012b46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012b48:	8909      	ldrh	r1, [r1, #8]
 8012b4a:	440b      	add	r3, r1
 8012b4c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	da9a      	bge.n	8012a88 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8012b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d059      	beq.n	8012c0c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8012b58:	4b88      	ldr	r3, [pc, #544]	; (8012d7c <tcp_receive+0xb04>)
 8012b5a:	881b      	ldrh	r3, [r3, #0]
 8012b5c:	461a      	mov	r2, r3
 8012b5e:	4b88      	ldr	r3, [pc, #544]	; (8012d80 <tcp_receive+0xb08>)
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	441a      	add	r2, r3
 8012b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b66:	691b      	ldr	r3, [r3, #16]
 8012b68:	685b      	ldr	r3, [r3, #4]
 8012b6a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	dd4d      	ble.n	8012c0c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b72:	691b      	ldr	r3, [r3, #16]
 8012b74:	685b      	ldr	r3, [r3, #4]
 8012b76:	b29a      	uxth	r2, r3
 8012b78:	4b81      	ldr	r3, [pc, #516]	; (8012d80 <tcp_receive+0xb08>)
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	b29b      	uxth	r3, r3
 8012b7e:	1ad3      	subs	r3, r2, r3
 8012b80:	b29a      	uxth	r2, r3
 8012b82:	4b80      	ldr	r3, [pc, #512]	; (8012d84 <tcp_receive+0xb0c>)
 8012b84:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012b86:	4b7f      	ldr	r3, [pc, #508]	; (8012d84 <tcp_receive+0xb0c>)
 8012b88:	691b      	ldr	r3, [r3, #16]
 8012b8a:	899b      	ldrh	r3, [r3, #12]
 8012b8c:	b29b      	uxth	r3, r3
 8012b8e:	4618      	mov	r0, r3
 8012b90:	f7f9 fef6 	bl	800c980 <lwip_htons>
 8012b94:	4603      	mov	r3, r0
 8012b96:	b2db      	uxtb	r3, r3
 8012b98:	f003 0302 	and.w	r3, r3, #2
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d005      	beq.n	8012bac <tcp_receive+0x934>
                inseg.len -= 1;
 8012ba0:	4b78      	ldr	r3, [pc, #480]	; (8012d84 <tcp_receive+0xb0c>)
 8012ba2:	891b      	ldrh	r3, [r3, #8]
 8012ba4:	3b01      	subs	r3, #1
 8012ba6:	b29a      	uxth	r2, r3
 8012ba8:	4b76      	ldr	r3, [pc, #472]	; (8012d84 <tcp_receive+0xb0c>)
 8012baa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8012bac:	4b75      	ldr	r3, [pc, #468]	; (8012d84 <tcp_receive+0xb0c>)
 8012bae:	685b      	ldr	r3, [r3, #4]
 8012bb0:	4a74      	ldr	r2, [pc, #464]	; (8012d84 <tcp_receive+0xb0c>)
 8012bb2:	8912      	ldrh	r2, [r2, #8]
 8012bb4:	4611      	mov	r1, r2
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	f7fb fee4 	bl	800e984 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8012bbc:	4b71      	ldr	r3, [pc, #452]	; (8012d84 <tcp_receive+0xb0c>)
 8012bbe:	891c      	ldrh	r4, [r3, #8]
 8012bc0:	4b70      	ldr	r3, [pc, #448]	; (8012d84 <tcp_receive+0xb0c>)
 8012bc2:	691b      	ldr	r3, [r3, #16]
 8012bc4:	899b      	ldrh	r3, [r3, #12]
 8012bc6:	b29b      	uxth	r3, r3
 8012bc8:	4618      	mov	r0, r3
 8012bca:	f7f9 fed9 	bl	800c980 <lwip_htons>
 8012bce:	4603      	mov	r3, r0
 8012bd0:	b2db      	uxtb	r3, r3
 8012bd2:	f003 0303 	and.w	r3, r3, #3
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d001      	beq.n	8012bde <tcp_receive+0x966>
 8012bda:	2301      	movs	r3, #1
 8012bdc:	e000      	b.n	8012be0 <tcp_receive+0x968>
 8012bde:	2300      	movs	r3, #0
 8012be0:	4423      	add	r3, r4
 8012be2:	b29a      	uxth	r2, r3
 8012be4:	4b65      	ldr	r3, [pc, #404]	; (8012d7c <tcp_receive+0xb04>)
 8012be6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8012be8:	4b64      	ldr	r3, [pc, #400]	; (8012d7c <tcp_receive+0xb04>)
 8012bea:	881b      	ldrh	r3, [r3, #0]
 8012bec:	461a      	mov	r2, r3
 8012bee:	4b64      	ldr	r3, [pc, #400]	; (8012d80 <tcp_receive+0xb08>)
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	441a      	add	r2, r3
 8012bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012bf6:	691b      	ldr	r3, [r3, #16]
 8012bf8:	685b      	ldr	r3, [r3, #4]
 8012bfa:	429a      	cmp	r2, r3
 8012bfc:	d006      	beq.n	8012c0c <tcp_receive+0x994>
 8012bfe:	4b62      	ldr	r3, [pc, #392]	; (8012d88 <tcp_receive+0xb10>)
 8012c00:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8012c04:	4961      	ldr	r1, [pc, #388]	; (8012d8c <tcp_receive+0xb14>)
 8012c06:	4862      	ldr	r0, [pc, #392]	; (8012d90 <tcp_receive+0xb18>)
 8012c08:	f00d fbe8 	bl	80203dc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012c10:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8012c12:	4b5a      	ldr	r3, [pc, #360]	; (8012d7c <tcp_receive+0xb04>)
 8012c14:	881b      	ldrh	r3, [r3, #0]
 8012c16:	461a      	mov	r2, r3
 8012c18:	4b59      	ldr	r3, [pc, #356]	; (8012d80 <tcp_receive+0xb08>)
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	441a      	add	r2, r3
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012c26:	4b55      	ldr	r3, [pc, #340]	; (8012d7c <tcp_receive+0xb04>)
 8012c28:	881b      	ldrh	r3, [r3, #0]
 8012c2a:	429a      	cmp	r2, r3
 8012c2c:	d206      	bcs.n	8012c3c <tcp_receive+0x9c4>
 8012c2e:	4b56      	ldr	r3, [pc, #344]	; (8012d88 <tcp_receive+0xb10>)
 8012c30:	f240 6207 	movw	r2, #1543	; 0x607
 8012c34:	4957      	ldr	r1, [pc, #348]	; (8012d94 <tcp_receive+0xb1c>)
 8012c36:	4856      	ldr	r0, [pc, #344]	; (8012d90 <tcp_receive+0xb18>)
 8012c38:	f00d fbd0 	bl	80203dc <iprintf>
        pcb->rcv_wnd -= tcplen;
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012c40:	4b4e      	ldr	r3, [pc, #312]	; (8012d7c <tcp_receive+0xb04>)
 8012c42:	881b      	ldrh	r3, [r3, #0]
 8012c44:	1ad3      	subs	r3, r2, r3
 8012c46:	b29a      	uxth	r2, r3
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8012c4c:	6878      	ldr	r0, [r7, #4]
 8012c4e:	f7fc ff39 	bl	800fac4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8012c52:	4b4c      	ldr	r3, [pc, #304]	; (8012d84 <tcp_receive+0xb0c>)
 8012c54:	685b      	ldr	r3, [r3, #4]
 8012c56:	891b      	ldrh	r3, [r3, #8]
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d006      	beq.n	8012c6a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8012c5c:	4b49      	ldr	r3, [pc, #292]	; (8012d84 <tcp_receive+0xb0c>)
 8012c5e:	685b      	ldr	r3, [r3, #4]
 8012c60:	4a4d      	ldr	r2, [pc, #308]	; (8012d98 <tcp_receive+0xb20>)
 8012c62:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012c64:	4b47      	ldr	r3, [pc, #284]	; (8012d84 <tcp_receive+0xb0c>)
 8012c66:	2200      	movs	r2, #0
 8012c68:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012c6a:	4b46      	ldr	r3, [pc, #280]	; (8012d84 <tcp_receive+0xb0c>)
 8012c6c:	691b      	ldr	r3, [r3, #16]
 8012c6e:	899b      	ldrh	r3, [r3, #12]
 8012c70:	b29b      	uxth	r3, r3
 8012c72:	4618      	mov	r0, r3
 8012c74:	f7f9 fe84 	bl	800c980 <lwip_htons>
 8012c78:	4603      	mov	r3, r0
 8012c7a:	b2db      	uxtb	r3, r3
 8012c7c:	f003 0301 	and.w	r3, r3, #1
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	f000 80b8 	beq.w	8012df6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8012c86:	4b45      	ldr	r3, [pc, #276]	; (8012d9c <tcp_receive+0xb24>)
 8012c88:	781b      	ldrb	r3, [r3, #0]
 8012c8a:	f043 0320 	orr.w	r3, r3, #32
 8012c8e:	b2da      	uxtb	r2, r3
 8012c90:	4b42      	ldr	r3, [pc, #264]	; (8012d9c <tcp_receive+0xb24>)
 8012c92:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012c94:	e0af      	b.n	8012df6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c9a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012ca0:	691b      	ldr	r3, [r3, #16]
 8012ca2:	685b      	ldr	r3, [r3, #4]
 8012ca4:	4a36      	ldr	r2, [pc, #216]	; (8012d80 <tcp_receive+0xb08>)
 8012ca6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012ca8:	68bb      	ldr	r3, [r7, #8]
 8012caa:	891b      	ldrh	r3, [r3, #8]
 8012cac:	461c      	mov	r4, r3
 8012cae:	68bb      	ldr	r3, [r7, #8]
 8012cb0:	691b      	ldr	r3, [r3, #16]
 8012cb2:	899b      	ldrh	r3, [r3, #12]
 8012cb4:	b29b      	uxth	r3, r3
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	f7f9 fe62 	bl	800c980 <lwip_htons>
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	b2db      	uxtb	r3, r3
 8012cc0:	f003 0303 	and.w	r3, r3, #3
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d001      	beq.n	8012ccc <tcp_receive+0xa54>
 8012cc8:	2301      	movs	r3, #1
 8012cca:	e000      	b.n	8012cce <tcp_receive+0xa56>
 8012ccc:	2300      	movs	r3, #0
 8012cce:	191a      	adds	r2, r3, r4
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cd4:	441a      	add	r2, r3
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012cde:	461c      	mov	r4, r3
 8012ce0:	68bb      	ldr	r3, [r7, #8]
 8012ce2:	891b      	ldrh	r3, [r3, #8]
 8012ce4:	461d      	mov	r5, r3
 8012ce6:	68bb      	ldr	r3, [r7, #8]
 8012ce8:	691b      	ldr	r3, [r3, #16]
 8012cea:	899b      	ldrh	r3, [r3, #12]
 8012cec:	b29b      	uxth	r3, r3
 8012cee:	4618      	mov	r0, r3
 8012cf0:	f7f9 fe46 	bl	800c980 <lwip_htons>
 8012cf4:	4603      	mov	r3, r0
 8012cf6:	b2db      	uxtb	r3, r3
 8012cf8:	f003 0303 	and.w	r3, r3, #3
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d001      	beq.n	8012d04 <tcp_receive+0xa8c>
 8012d00:	2301      	movs	r3, #1
 8012d02:	e000      	b.n	8012d06 <tcp_receive+0xa8e>
 8012d04:	2300      	movs	r3, #0
 8012d06:	442b      	add	r3, r5
 8012d08:	429c      	cmp	r4, r3
 8012d0a:	d206      	bcs.n	8012d1a <tcp_receive+0xaa2>
 8012d0c:	4b1e      	ldr	r3, [pc, #120]	; (8012d88 <tcp_receive+0xb10>)
 8012d0e:	f240 622b 	movw	r2, #1579	; 0x62b
 8012d12:	4923      	ldr	r1, [pc, #140]	; (8012da0 <tcp_receive+0xb28>)
 8012d14:	481e      	ldr	r0, [pc, #120]	; (8012d90 <tcp_receive+0xb18>)
 8012d16:	f00d fb61 	bl	80203dc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8012d1a:	68bb      	ldr	r3, [r7, #8]
 8012d1c:	891b      	ldrh	r3, [r3, #8]
 8012d1e:	461c      	mov	r4, r3
 8012d20:	68bb      	ldr	r3, [r7, #8]
 8012d22:	691b      	ldr	r3, [r3, #16]
 8012d24:	899b      	ldrh	r3, [r3, #12]
 8012d26:	b29b      	uxth	r3, r3
 8012d28:	4618      	mov	r0, r3
 8012d2a:	f7f9 fe29 	bl	800c980 <lwip_htons>
 8012d2e:	4603      	mov	r3, r0
 8012d30:	b2db      	uxtb	r3, r3
 8012d32:	f003 0303 	and.w	r3, r3, #3
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d001      	beq.n	8012d3e <tcp_receive+0xac6>
 8012d3a:	2301      	movs	r3, #1
 8012d3c:	e000      	b.n	8012d40 <tcp_receive+0xac8>
 8012d3e:	2300      	movs	r3, #0
 8012d40:	1919      	adds	r1, r3, r4
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012d46:	b28b      	uxth	r3, r1
 8012d48:	1ad3      	subs	r3, r2, r3
 8012d4a:	b29a      	uxth	r2, r3
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012d50:	6878      	ldr	r0, [r7, #4]
 8012d52:	f7fc feb7 	bl	800fac4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012d56:	68bb      	ldr	r3, [r7, #8]
 8012d58:	685b      	ldr	r3, [r3, #4]
 8012d5a:	891b      	ldrh	r3, [r3, #8]
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d028      	beq.n	8012db2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012d60:	4b0d      	ldr	r3, [pc, #52]	; (8012d98 <tcp_receive+0xb20>)
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d01d      	beq.n	8012da4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8012d68:	4b0b      	ldr	r3, [pc, #44]	; (8012d98 <tcp_receive+0xb20>)
 8012d6a:	681a      	ldr	r2, [r3, #0]
 8012d6c:	68bb      	ldr	r3, [r7, #8]
 8012d6e:	685b      	ldr	r3, [r3, #4]
 8012d70:	4619      	mov	r1, r3
 8012d72:	4610      	mov	r0, r2
 8012d74:	f7fc f85a 	bl	800ee2c <pbuf_cat>
 8012d78:	e018      	b.n	8012dac <tcp_receive+0xb34>
 8012d7a:	bf00      	nop
 8012d7c:	20006872 	.word	0x20006872
 8012d80:	20006868 	.word	0x20006868
 8012d84:	20006844 	.word	0x20006844
 8012d88:	08022bf0 	.word	0x08022bf0
 8012d8c:	08022fd0 	.word	0x08022fd0
 8012d90:	08022c3c 	.word	0x08022c3c
 8012d94:	0802300c 	.word	0x0802300c
 8012d98:	20006878 	.word	0x20006878
 8012d9c:	20006875 	.word	0x20006875
 8012da0:	0802302c 	.word	0x0802302c
            } else {
              recv_data = cseg->p;
 8012da4:	68bb      	ldr	r3, [r7, #8]
 8012da6:	685b      	ldr	r3, [r3, #4]
 8012da8:	4a70      	ldr	r2, [pc, #448]	; (8012f6c <tcp_receive+0xcf4>)
 8012daa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012dac:	68bb      	ldr	r3, [r7, #8]
 8012dae:	2200      	movs	r2, #0
 8012db0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012db2:	68bb      	ldr	r3, [r7, #8]
 8012db4:	691b      	ldr	r3, [r3, #16]
 8012db6:	899b      	ldrh	r3, [r3, #12]
 8012db8:	b29b      	uxth	r3, r3
 8012dba:	4618      	mov	r0, r3
 8012dbc:	f7f9 fde0 	bl	800c980 <lwip_htons>
 8012dc0:	4603      	mov	r3, r0
 8012dc2:	b2db      	uxtb	r3, r3
 8012dc4:	f003 0301 	and.w	r3, r3, #1
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d00d      	beq.n	8012de8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8012dcc:	4b68      	ldr	r3, [pc, #416]	; (8012f70 <tcp_receive+0xcf8>)
 8012dce:	781b      	ldrb	r3, [r3, #0]
 8012dd0:	f043 0320 	orr.w	r3, r3, #32
 8012dd4:	b2da      	uxtb	r2, r3
 8012dd6:	4b66      	ldr	r3, [pc, #408]	; (8012f70 <tcp_receive+0xcf8>)
 8012dd8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	7d1b      	ldrb	r3, [r3, #20]
 8012dde:	2b04      	cmp	r3, #4
 8012de0:	d102      	bne.n	8012de8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	2207      	movs	r2, #7
 8012de6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012de8:	68bb      	ldr	r3, [r7, #8]
 8012dea:	681a      	ldr	r2, [r3, #0]
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8012df0:	68b8      	ldr	r0, [r7, #8]
 8012df2:	f7fd fb46 	bl	8010482 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d008      	beq.n	8012e10 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e02:	691b      	ldr	r3, [r3, #16]
 8012e04:	685a      	ldr	r2, [r3, #4]
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8012e0a:	429a      	cmp	r2, r3
 8012e0c:	f43f af43 	beq.w	8012c96 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	8b5b      	ldrh	r3, [r3, #26]
 8012e14:	f003 0301 	and.w	r3, r3, #1
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d00e      	beq.n	8012e3a <tcp_receive+0xbc2>
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	8b5b      	ldrh	r3, [r3, #26]
 8012e20:	f023 0301 	bic.w	r3, r3, #1
 8012e24:	b29a      	uxth	r2, r3
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	835a      	strh	r2, [r3, #26]
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	8b5b      	ldrh	r3, [r3, #26]
 8012e2e:	f043 0302 	orr.w	r3, r3, #2
 8012e32:	b29a      	uxth	r2, r3
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012e38:	e188      	b.n	801314c <tcp_receive+0xed4>
        tcp_ack(pcb);
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	8b5b      	ldrh	r3, [r3, #26]
 8012e3e:	f043 0301 	orr.w	r3, r3, #1
 8012e42:	b29a      	uxth	r2, r3
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012e48:	e180      	b.n	801314c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d106      	bne.n	8012e60 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012e52:	4848      	ldr	r0, [pc, #288]	; (8012f74 <tcp_receive+0xcfc>)
 8012e54:	f7fd fb2e 	bl	80104b4 <tcp_seg_copy>
 8012e58:	4602      	mov	r2, r0
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	675a      	str	r2, [r3, #116]	; 0x74
 8012e5e:	e16d      	b.n	801313c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012e60:	2300      	movs	r3, #0
 8012e62:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e68:	63bb      	str	r3, [r7, #56]	; 0x38
 8012e6a:	e157      	b.n	801311c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8012e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e6e:	691b      	ldr	r3, [r3, #16]
 8012e70:	685a      	ldr	r2, [r3, #4]
 8012e72:	4b41      	ldr	r3, [pc, #260]	; (8012f78 <tcp_receive+0xd00>)
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	429a      	cmp	r2, r3
 8012e78:	d11d      	bne.n	8012eb6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8012e7a:	4b3e      	ldr	r3, [pc, #248]	; (8012f74 <tcp_receive+0xcfc>)
 8012e7c:	891a      	ldrh	r2, [r3, #8]
 8012e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e80:	891b      	ldrh	r3, [r3, #8]
 8012e82:	429a      	cmp	r2, r3
 8012e84:	f240 814f 	bls.w	8013126 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012e88:	483a      	ldr	r0, [pc, #232]	; (8012f74 <tcp_receive+0xcfc>)
 8012e8a:	f7fd fb13 	bl	80104b4 <tcp_seg_copy>
 8012e8e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012e90:	697b      	ldr	r3, [r7, #20]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	f000 8149 	beq.w	801312a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8012e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d003      	beq.n	8012ea6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8012e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ea0:	697a      	ldr	r2, [r7, #20]
 8012ea2:	601a      	str	r2, [r3, #0]
 8012ea4:	e002      	b.n	8012eac <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	697a      	ldr	r2, [r7, #20]
 8012eaa:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012eac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012eae:	6978      	ldr	r0, [r7, #20]
 8012eb0:	f7ff f8de 	bl	8012070 <tcp_oos_insert_segment>
                }
                break;
 8012eb4:	e139      	b.n	801312a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d117      	bne.n	8012eec <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8012ebc:	4b2e      	ldr	r3, [pc, #184]	; (8012f78 <tcp_receive+0xd00>)
 8012ebe:	681a      	ldr	r2, [r3, #0]
 8012ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ec2:	691b      	ldr	r3, [r3, #16]
 8012ec4:	685b      	ldr	r3, [r3, #4]
 8012ec6:	1ad3      	subs	r3, r2, r3
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	da57      	bge.n	8012f7c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012ecc:	4829      	ldr	r0, [pc, #164]	; (8012f74 <tcp_receive+0xcfc>)
 8012ece:	f7fd faf1 	bl	80104b4 <tcp_seg_copy>
 8012ed2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012ed4:	69bb      	ldr	r3, [r7, #24]
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	f000 8129 	beq.w	801312e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	69ba      	ldr	r2, [r7, #24]
 8012ee0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012ee2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012ee4:	69b8      	ldr	r0, [r7, #24]
 8012ee6:	f7ff f8c3 	bl	8012070 <tcp_oos_insert_segment>
                  }
                  break;
 8012eea:	e120      	b.n	801312e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8012eec:	4b22      	ldr	r3, [pc, #136]	; (8012f78 <tcp_receive+0xd00>)
 8012eee:	681a      	ldr	r2, [r3, #0]
 8012ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ef2:	691b      	ldr	r3, [r3, #16]
 8012ef4:	685b      	ldr	r3, [r3, #4]
 8012ef6:	1ad3      	subs	r3, r2, r3
 8012ef8:	3b01      	subs	r3, #1
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	db3e      	blt.n	8012f7c <tcp_receive+0xd04>
 8012efe:	4b1e      	ldr	r3, [pc, #120]	; (8012f78 <tcp_receive+0xd00>)
 8012f00:	681a      	ldr	r2, [r3, #0]
 8012f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f04:	691b      	ldr	r3, [r3, #16]
 8012f06:	685b      	ldr	r3, [r3, #4]
 8012f08:	1ad3      	subs	r3, r2, r3
 8012f0a:	3301      	adds	r3, #1
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	dc35      	bgt.n	8012f7c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012f10:	4818      	ldr	r0, [pc, #96]	; (8012f74 <tcp_receive+0xcfc>)
 8012f12:	f7fd facf 	bl	80104b4 <tcp_seg_copy>
 8012f16:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012f18:	69fb      	ldr	r3, [r7, #28]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	f000 8109 	beq.w	8013132 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f22:	691b      	ldr	r3, [r3, #16]
 8012f24:	685b      	ldr	r3, [r3, #4]
 8012f26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012f28:	8912      	ldrh	r2, [r2, #8]
 8012f2a:	441a      	add	r2, r3
 8012f2c:	4b12      	ldr	r3, [pc, #72]	; (8012f78 <tcp_receive+0xd00>)
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	1ad3      	subs	r3, r2, r3
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	dd12      	ble.n	8012f5c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012f36:	4b10      	ldr	r3, [pc, #64]	; (8012f78 <tcp_receive+0xd00>)
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	b29a      	uxth	r2, r3
 8012f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f3e:	691b      	ldr	r3, [r3, #16]
 8012f40:	685b      	ldr	r3, [r3, #4]
 8012f42:	b29b      	uxth	r3, r3
 8012f44:	1ad3      	subs	r3, r2, r3
 8012f46:	b29a      	uxth	r2, r3
 8012f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f4a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f4e:	685a      	ldr	r2, [r3, #4]
 8012f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f52:	891b      	ldrh	r3, [r3, #8]
 8012f54:	4619      	mov	r1, r3
 8012f56:	4610      	mov	r0, r2
 8012f58:	f7fb fd14 	bl	800e984 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f5e:	69fa      	ldr	r2, [r7, #28]
 8012f60:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012f62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012f64:	69f8      	ldr	r0, [r7, #28]
 8012f66:	f7ff f883 	bl	8012070 <tcp_oos_insert_segment>
                  }
                  break;
 8012f6a:	e0e2      	b.n	8013132 <tcp_receive+0xeba>
 8012f6c:	20006878 	.word	0x20006878
 8012f70:	20006875 	.word	0x20006875
 8012f74:	20006844 	.word	0x20006844
 8012f78:	20006868 	.word	0x20006868
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f7e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f82:	681b      	ldr	r3, [r3, #0]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	f040 80c6 	bne.w	8013116 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8012f8a:	4b80      	ldr	r3, [pc, #512]	; (801318c <tcp_receive+0xf14>)
 8012f8c:	681a      	ldr	r2, [r3, #0]
 8012f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f90:	691b      	ldr	r3, [r3, #16]
 8012f92:	685b      	ldr	r3, [r3, #4]
 8012f94:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	f340 80bd 	ble.w	8013116 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f9e:	691b      	ldr	r3, [r3, #16]
 8012fa0:	899b      	ldrh	r3, [r3, #12]
 8012fa2:	b29b      	uxth	r3, r3
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	f7f9 fceb 	bl	800c980 <lwip_htons>
 8012faa:	4603      	mov	r3, r0
 8012fac:	b2db      	uxtb	r3, r3
 8012fae:	f003 0301 	and.w	r3, r3, #1
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	f040 80bf 	bne.w	8013136 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012fb8:	4875      	ldr	r0, [pc, #468]	; (8013190 <tcp_receive+0xf18>)
 8012fba:	f7fd fa7b 	bl	80104b4 <tcp_seg_copy>
 8012fbe:	4602      	mov	r2, r0
 8012fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fc2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	f000 80b6 	beq.w	801313a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fd0:	691b      	ldr	r3, [r3, #16]
 8012fd2:	685b      	ldr	r3, [r3, #4]
 8012fd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012fd6:	8912      	ldrh	r2, [r2, #8]
 8012fd8:	441a      	add	r2, r3
 8012fda:	4b6c      	ldr	r3, [pc, #432]	; (801318c <tcp_receive+0xf14>)
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	1ad3      	subs	r3, r2, r3
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	dd12      	ble.n	801300a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012fe4:	4b69      	ldr	r3, [pc, #420]	; (801318c <tcp_receive+0xf14>)
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	b29a      	uxth	r2, r3
 8012fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fec:	691b      	ldr	r3, [r3, #16]
 8012fee:	685b      	ldr	r3, [r3, #4]
 8012ff0:	b29b      	uxth	r3, r3
 8012ff2:	1ad3      	subs	r3, r2, r3
 8012ff4:	b29a      	uxth	r2, r3
 8012ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ff8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ffc:	685a      	ldr	r2, [r3, #4]
 8012ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013000:	891b      	ldrh	r3, [r3, #8]
 8013002:	4619      	mov	r1, r3
 8013004:	4610      	mov	r0, r2
 8013006:	f7fb fcbd 	bl	800e984 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801300a:	4b62      	ldr	r3, [pc, #392]	; (8013194 <tcp_receive+0xf1c>)
 801300c:	881b      	ldrh	r3, [r3, #0]
 801300e:	461a      	mov	r2, r3
 8013010:	4b5e      	ldr	r3, [pc, #376]	; (801318c <tcp_receive+0xf14>)
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	441a      	add	r2, r3
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801301a:	6879      	ldr	r1, [r7, #4]
 801301c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801301e:	440b      	add	r3, r1
 8013020:	1ad3      	subs	r3, r2, r3
 8013022:	2b00      	cmp	r3, #0
 8013024:	f340 8089 	ble.w	801313a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8013028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	691b      	ldr	r3, [r3, #16]
 801302e:	899b      	ldrh	r3, [r3, #12]
 8013030:	b29b      	uxth	r3, r3
 8013032:	4618      	mov	r0, r3
 8013034:	f7f9 fca4 	bl	800c980 <lwip_htons>
 8013038:	4603      	mov	r3, r0
 801303a:	b2db      	uxtb	r3, r3
 801303c:	f003 0301 	and.w	r3, r3, #1
 8013040:	2b00      	cmp	r3, #0
 8013042:	d022      	beq.n	801308a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8013044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	691b      	ldr	r3, [r3, #16]
 801304a:	899b      	ldrh	r3, [r3, #12]
 801304c:	b29b      	uxth	r3, r3
 801304e:	b21b      	sxth	r3, r3
 8013050:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013054:	b21c      	sxth	r4, r3
 8013056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	691b      	ldr	r3, [r3, #16]
 801305c:	899b      	ldrh	r3, [r3, #12]
 801305e:	b29b      	uxth	r3, r3
 8013060:	4618      	mov	r0, r3
 8013062:	f7f9 fc8d 	bl	800c980 <lwip_htons>
 8013066:	4603      	mov	r3, r0
 8013068:	b2db      	uxtb	r3, r3
 801306a:	b29b      	uxth	r3, r3
 801306c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8013070:	b29b      	uxth	r3, r3
 8013072:	4618      	mov	r0, r3
 8013074:	f7f9 fc84 	bl	800c980 <lwip_htons>
 8013078:	4603      	mov	r3, r0
 801307a:	b21b      	sxth	r3, r3
 801307c:	4323      	orrs	r3, r4
 801307e:	b21a      	sxth	r2, r3
 8013080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	691b      	ldr	r3, [r3, #16]
 8013086:	b292      	uxth	r2, r2
 8013088:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801308e:	b29a      	uxth	r2, r3
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013094:	4413      	add	r3, r2
 8013096:	b299      	uxth	r1, r3
 8013098:	4b3c      	ldr	r3, [pc, #240]	; (801318c <tcp_receive+0xf14>)
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	b29a      	uxth	r2, r3
 801309e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	1a8a      	subs	r2, r1, r2
 80130a4:	b292      	uxth	r2, r2
 80130a6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80130a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	685a      	ldr	r2, [r3, #4]
 80130ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	891b      	ldrh	r3, [r3, #8]
 80130b4:	4619      	mov	r1, r3
 80130b6:	4610      	mov	r0, r2
 80130b8:	f7fb fc64 	bl	800e984 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80130bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	891c      	ldrh	r4, [r3, #8]
 80130c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	691b      	ldr	r3, [r3, #16]
 80130c8:	899b      	ldrh	r3, [r3, #12]
 80130ca:	b29b      	uxth	r3, r3
 80130cc:	4618      	mov	r0, r3
 80130ce:	f7f9 fc57 	bl	800c980 <lwip_htons>
 80130d2:	4603      	mov	r3, r0
 80130d4:	b2db      	uxtb	r3, r3
 80130d6:	f003 0303 	and.w	r3, r3, #3
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d001      	beq.n	80130e2 <tcp_receive+0xe6a>
 80130de:	2301      	movs	r3, #1
 80130e0:	e000      	b.n	80130e4 <tcp_receive+0xe6c>
 80130e2:	2300      	movs	r3, #0
 80130e4:	4423      	add	r3, r4
 80130e6:	b29a      	uxth	r2, r3
 80130e8:	4b2a      	ldr	r3, [pc, #168]	; (8013194 <tcp_receive+0xf1c>)
 80130ea:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80130ec:	4b29      	ldr	r3, [pc, #164]	; (8013194 <tcp_receive+0xf1c>)
 80130ee:	881b      	ldrh	r3, [r3, #0]
 80130f0:	461a      	mov	r2, r3
 80130f2:	4b26      	ldr	r3, [pc, #152]	; (801318c <tcp_receive+0xf14>)
 80130f4:	681b      	ldr	r3, [r3, #0]
 80130f6:	441a      	add	r2, r3
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130fc:	6879      	ldr	r1, [r7, #4]
 80130fe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013100:	440b      	add	r3, r1
 8013102:	429a      	cmp	r2, r3
 8013104:	d019      	beq.n	801313a <tcp_receive+0xec2>
 8013106:	4b24      	ldr	r3, [pc, #144]	; (8013198 <tcp_receive+0xf20>)
 8013108:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801310c:	4923      	ldr	r1, [pc, #140]	; (801319c <tcp_receive+0xf24>)
 801310e:	4824      	ldr	r0, [pc, #144]	; (80131a0 <tcp_receive+0xf28>)
 8013110:	f00d f964 	bl	80203dc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8013114:	e011      	b.n	801313a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	63bb      	str	r3, [r7, #56]	; 0x38
 801311c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801311e:	2b00      	cmp	r3, #0
 8013120:	f47f aea4 	bne.w	8012e6c <tcp_receive+0xbf4>
 8013124:	e00a      	b.n	801313c <tcp_receive+0xec4>
                break;
 8013126:	bf00      	nop
 8013128:	e008      	b.n	801313c <tcp_receive+0xec4>
                break;
 801312a:	bf00      	nop
 801312c:	e006      	b.n	801313c <tcp_receive+0xec4>
                  break;
 801312e:	bf00      	nop
 8013130:	e004      	b.n	801313c <tcp_receive+0xec4>
                  break;
 8013132:	bf00      	nop
 8013134:	e002      	b.n	801313c <tcp_receive+0xec4>
                  break;
 8013136:	bf00      	nop
 8013138:	e000      	b.n	801313c <tcp_receive+0xec4>
                break;
 801313a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801313c:	6878      	ldr	r0, [r7, #4]
 801313e:	f001 fa7f 	bl	8014640 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8013142:	e003      	b.n	801314c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8013144:	6878      	ldr	r0, [r7, #4]
 8013146:	f001 fa7b 	bl	8014640 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801314a:	e01a      	b.n	8013182 <tcp_receive+0xf0a>
 801314c:	e019      	b.n	8013182 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801314e:	4b0f      	ldr	r3, [pc, #60]	; (801318c <tcp_receive+0xf14>)
 8013150:	681a      	ldr	r2, [r3, #0]
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013156:	1ad3      	subs	r3, r2, r3
 8013158:	2b00      	cmp	r3, #0
 801315a:	db0a      	blt.n	8013172 <tcp_receive+0xefa>
 801315c:	4b0b      	ldr	r3, [pc, #44]	; (801318c <tcp_receive+0xf14>)
 801315e:	681a      	ldr	r2, [r3, #0]
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013164:	6879      	ldr	r1, [r7, #4]
 8013166:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013168:	440b      	add	r3, r1
 801316a:	1ad3      	subs	r3, r2, r3
 801316c:	3301      	adds	r3, #1
 801316e:	2b00      	cmp	r3, #0
 8013170:	dd07      	ble.n	8013182 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	8b5b      	ldrh	r3, [r3, #26]
 8013176:	f043 0302 	orr.w	r3, r3, #2
 801317a:	b29a      	uxth	r2, r3
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8013180:	e7ff      	b.n	8013182 <tcp_receive+0xf0a>
 8013182:	bf00      	nop
 8013184:	3750      	adds	r7, #80	; 0x50
 8013186:	46bd      	mov	sp, r7
 8013188:	bdb0      	pop	{r4, r5, r7, pc}
 801318a:	bf00      	nop
 801318c:	20006868 	.word	0x20006868
 8013190:	20006844 	.word	0x20006844
 8013194:	20006872 	.word	0x20006872
 8013198:	08022bf0 	.word	0x08022bf0
 801319c:	08022f98 	.word	0x08022f98
 80131a0:	08022c3c 	.word	0x08022c3c

080131a4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80131a4:	b480      	push	{r7}
 80131a6:	b083      	sub	sp, #12
 80131a8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80131aa:	4b15      	ldr	r3, [pc, #84]	; (8013200 <tcp_get_next_optbyte+0x5c>)
 80131ac:	881b      	ldrh	r3, [r3, #0]
 80131ae:	1c5a      	adds	r2, r3, #1
 80131b0:	b291      	uxth	r1, r2
 80131b2:	4a13      	ldr	r2, [pc, #76]	; (8013200 <tcp_get_next_optbyte+0x5c>)
 80131b4:	8011      	strh	r1, [r2, #0]
 80131b6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80131b8:	4b12      	ldr	r3, [pc, #72]	; (8013204 <tcp_get_next_optbyte+0x60>)
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d004      	beq.n	80131ca <tcp_get_next_optbyte+0x26>
 80131c0:	4b11      	ldr	r3, [pc, #68]	; (8013208 <tcp_get_next_optbyte+0x64>)
 80131c2:	881b      	ldrh	r3, [r3, #0]
 80131c4:	88fa      	ldrh	r2, [r7, #6]
 80131c6:	429a      	cmp	r2, r3
 80131c8:	d208      	bcs.n	80131dc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80131ca:	4b10      	ldr	r3, [pc, #64]	; (801320c <tcp_get_next_optbyte+0x68>)
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	3314      	adds	r3, #20
 80131d0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80131d2:	88fb      	ldrh	r3, [r7, #6]
 80131d4:	683a      	ldr	r2, [r7, #0]
 80131d6:	4413      	add	r3, r2
 80131d8:	781b      	ldrb	r3, [r3, #0]
 80131da:	e00b      	b.n	80131f4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80131dc:	88fb      	ldrh	r3, [r7, #6]
 80131de:	b2da      	uxtb	r2, r3
 80131e0:	4b09      	ldr	r3, [pc, #36]	; (8013208 <tcp_get_next_optbyte+0x64>)
 80131e2:	881b      	ldrh	r3, [r3, #0]
 80131e4:	b2db      	uxtb	r3, r3
 80131e6:	1ad3      	subs	r3, r2, r3
 80131e8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80131ea:	4b06      	ldr	r3, [pc, #24]	; (8013204 <tcp_get_next_optbyte+0x60>)
 80131ec:	681a      	ldr	r2, [r3, #0]
 80131ee:	797b      	ldrb	r3, [r7, #5]
 80131f0:	4413      	add	r3, r2
 80131f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80131f4:	4618      	mov	r0, r3
 80131f6:	370c      	adds	r7, #12
 80131f8:	46bd      	mov	sp, r7
 80131fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131fe:	4770      	bx	lr
 8013200:	20006864 	.word	0x20006864
 8013204:	20006860 	.word	0x20006860
 8013208:	2000685e 	.word	0x2000685e
 801320c:	20006858 	.word	0x20006858

08013210 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8013210:	b580      	push	{r7, lr}
 8013212:	b084      	sub	sp, #16
 8013214:	af00      	add	r7, sp, #0
 8013216:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d106      	bne.n	801322c <tcp_parseopt+0x1c>
 801321e:	4b32      	ldr	r3, [pc, #200]	; (80132e8 <tcp_parseopt+0xd8>)
 8013220:	f240 727d 	movw	r2, #1917	; 0x77d
 8013224:	4931      	ldr	r1, [pc, #196]	; (80132ec <tcp_parseopt+0xdc>)
 8013226:	4832      	ldr	r0, [pc, #200]	; (80132f0 <tcp_parseopt+0xe0>)
 8013228:	f00d f8d8 	bl	80203dc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801322c:	4b31      	ldr	r3, [pc, #196]	; (80132f4 <tcp_parseopt+0xe4>)
 801322e:	881b      	ldrh	r3, [r3, #0]
 8013230:	2b00      	cmp	r3, #0
 8013232:	d055      	beq.n	80132e0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013234:	4b30      	ldr	r3, [pc, #192]	; (80132f8 <tcp_parseopt+0xe8>)
 8013236:	2200      	movs	r2, #0
 8013238:	801a      	strh	r2, [r3, #0]
 801323a:	e045      	b.n	80132c8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801323c:	f7ff ffb2 	bl	80131a4 <tcp_get_next_optbyte>
 8013240:	4603      	mov	r3, r0
 8013242:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8013244:	7bfb      	ldrb	r3, [r7, #15]
 8013246:	2b02      	cmp	r3, #2
 8013248:	d006      	beq.n	8013258 <tcp_parseopt+0x48>
 801324a:	2b02      	cmp	r3, #2
 801324c:	dc2b      	bgt.n	80132a6 <tcp_parseopt+0x96>
 801324e:	2b00      	cmp	r3, #0
 8013250:	d041      	beq.n	80132d6 <tcp_parseopt+0xc6>
 8013252:	2b01      	cmp	r3, #1
 8013254:	d127      	bne.n	80132a6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8013256:	e037      	b.n	80132c8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8013258:	f7ff ffa4 	bl	80131a4 <tcp_get_next_optbyte>
 801325c:	4603      	mov	r3, r0
 801325e:	2b04      	cmp	r3, #4
 8013260:	d13b      	bne.n	80132da <tcp_parseopt+0xca>
 8013262:	4b25      	ldr	r3, [pc, #148]	; (80132f8 <tcp_parseopt+0xe8>)
 8013264:	881b      	ldrh	r3, [r3, #0]
 8013266:	3301      	adds	r3, #1
 8013268:	4a22      	ldr	r2, [pc, #136]	; (80132f4 <tcp_parseopt+0xe4>)
 801326a:	8812      	ldrh	r2, [r2, #0]
 801326c:	4293      	cmp	r3, r2
 801326e:	da34      	bge.n	80132da <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8013270:	f7ff ff98 	bl	80131a4 <tcp_get_next_optbyte>
 8013274:	4603      	mov	r3, r0
 8013276:	b29b      	uxth	r3, r3
 8013278:	021b      	lsls	r3, r3, #8
 801327a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801327c:	f7ff ff92 	bl	80131a4 <tcp_get_next_optbyte>
 8013280:	4603      	mov	r3, r0
 8013282:	b29a      	uxth	r2, r3
 8013284:	89bb      	ldrh	r3, [r7, #12]
 8013286:	4313      	orrs	r3, r2
 8013288:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801328a:	89bb      	ldrh	r3, [r7, #12]
 801328c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8013290:	d804      	bhi.n	801329c <tcp_parseopt+0x8c>
 8013292:	89bb      	ldrh	r3, [r7, #12]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d001      	beq.n	801329c <tcp_parseopt+0x8c>
 8013298:	89ba      	ldrh	r2, [r7, #12]
 801329a:	e001      	b.n	80132a0 <tcp_parseopt+0x90>
 801329c:	f44f 7206 	mov.w	r2, #536	; 0x218
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80132a4:	e010      	b.n	80132c8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80132a6:	f7ff ff7d 	bl	80131a4 <tcp_get_next_optbyte>
 80132aa:	4603      	mov	r3, r0
 80132ac:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80132ae:	7afb      	ldrb	r3, [r7, #11]
 80132b0:	2b01      	cmp	r3, #1
 80132b2:	d914      	bls.n	80132de <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80132b4:	7afb      	ldrb	r3, [r7, #11]
 80132b6:	b29a      	uxth	r2, r3
 80132b8:	4b0f      	ldr	r3, [pc, #60]	; (80132f8 <tcp_parseopt+0xe8>)
 80132ba:	881b      	ldrh	r3, [r3, #0]
 80132bc:	4413      	add	r3, r2
 80132be:	b29b      	uxth	r3, r3
 80132c0:	3b02      	subs	r3, #2
 80132c2:	b29a      	uxth	r2, r3
 80132c4:	4b0c      	ldr	r3, [pc, #48]	; (80132f8 <tcp_parseopt+0xe8>)
 80132c6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80132c8:	4b0b      	ldr	r3, [pc, #44]	; (80132f8 <tcp_parseopt+0xe8>)
 80132ca:	881a      	ldrh	r2, [r3, #0]
 80132cc:	4b09      	ldr	r3, [pc, #36]	; (80132f4 <tcp_parseopt+0xe4>)
 80132ce:	881b      	ldrh	r3, [r3, #0]
 80132d0:	429a      	cmp	r2, r3
 80132d2:	d3b3      	bcc.n	801323c <tcp_parseopt+0x2c>
 80132d4:	e004      	b.n	80132e0 <tcp_parseopt+0xd0>
          return;
 80132d6:	bf00      	nop
 80132d8:	e002      	b.n	80132e0 <tcp_parseopt+0xd0>
            return;
 80132da:	bf00      	nop
 80132dc:	e000      	b.n	80132e0 <tcp_parseopt+0xd0>
            return;
 80132de:	bf00      	nop
      }
    }
  }
}
 80132e0:	3710      	adds	r7, #16
 80132e2:	46bd      	mov	sp, r7
 80132e4:	bd80      	pop	{r7, pc}
 80132e6:	bf00      	nop
 80132e8:	08022bf0 	.word	0x08022bf0
 80132ec:	08023054 	.word	0x08023054
 80132f0:	08022c3c 	.word	0x08022c3c
 80132f4:	2000685c 	.word	0x2000685c
 80132f8:	20006864 	.word	0x20006864

080132fc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80132fc:	b480      	push	{r7}
 80132fe:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8013300:	4b05      	ldr	r3, [pc, #20]	; (8013318 <tcp_trigger_input_pcb_close+0x1c>)
 8013302:	781b      	ldrb	r3, [r3, #0]
 8013304:	f043 0310 	orr.w	r3, r3, #16
 8013308:	b2da      	uxtb	r2, r3
 801330a:	4b03      	ldr	r3, [pc, #12]	; (8013318 <tcp_trigger_input_pcb_close+0x1c>)
 801330c:	701a      	strb	r2, [r3, #0]
}
 801330e:	bf00      	nop
 8013310:	46bd      	mov	sp, r7
 8013312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013316:	4770      	bx	lr
 8013318:	20006875 	.word	0x20006875

0801331c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801331c:	b580      	push	{r7, lr}
 801331e:	b084      	sub	sp, #16
 8013320:	af00      	add	r7, sp, #0
 8013322:	60f8      	str	r0, [r7, #12]
 8013324:	60b9      	str	r1, [r7, #8]
 8013326:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d00a      	beq.n	8013344 <tcp_route+0x28>
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	7a1b      	ldrb	r3, [r3, #8]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d006      	beq.n	8013344 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	7a1b      	ldrb	r3, [r3, #8]
 801333a:	4618      	mov	r0, r3
 801333c:	f7fb f91a 	bl	800e574 <netif_get_by_index>
 8013340:	4603      	mov	r3, r0
 8013342:	e003      	b.n	801334c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8013344:	6878      	ldr	r0, [r7, #4]
 8013346:	f006 fd9f 	bl	8019e88 <ip4_route>
 801334a:	4603      	mov	r3, r0
  }
}
 801334c:	4618      	mov	r0, r3
 801334e:	3710      	adds	r7, #16
 8013350:	46bd      	mov	sp, r7
 8013352:	bd80      	pop	{r7, pc}

08013354 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8013354:	b590      	push	{r4, r7, lr}
 8013356:	b087      	sub	sp, #28
 8013358:	af00      	add	r7, sp, #0
 801335a:	60f8      	str	r0, [r7, #12]
 801335c:	60b9      	str	r1, [r7, #8]
 801335e:	603b      	str	r3, [r7, #0]
 8013360:	4613      	mov	r3, r2
 8013362:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	2b00      	cmp	r3, #0
 8013368:	d105      	bne.n	8013376 <tcp_create_segment+0x22>
 801336a:	4b49      	ldr	r3, [pc, #292]	; (8013490 <tcp_create_segment+0x13c>)
 801336c:	22a3      	movs	r2, #163	; 0xa3
 801336e:	4949      	ldr	r1, [pc, #292]	; (8013494 <tcp_create_segment+0x140>)
 8013370:	4849      	ldr	r0, [pc, #292]	; (8013498 <tcp_create_segment+0x144>)
 8013372:	f00d f833 	bl	80203dc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8013376:	68bb      	ldr	r3, [r7, #8]
 8013378:	2b00      	cmp	r3, #0
 801337a:	d105      	bne.n	8013388 <tcp_create_segment+0x34>
 801337c:	4b44      	ldr	r3, [pc, #272]	; (8013490 <tcp_create_segment+0x13c>)
 801337e:	22a4      	movs	r2, #164	; 0xa4
 8013380:	4946      	ldr	r1, [pc, #280]	; (801349c <tcp_create_segment+0x148>)
 8013382:	4845      	ldr	r0, [pc, #276]	; (8013498 <tcp_create_segment+0x144>)
 8013384:	f00d f82a 	bl	80203dc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013388:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801338c:	009b      	lsls	r3, r3, #2
 801338e:	b2db      	uxtb	r3, r3
 8013390:	f003 0304 	and.w	r3, r3, #4
 8013394:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8013396:	2003      	movs	r0, #3
 8013398:	f7fa fc42 	bl	800dc20 <memp_malloc>
 801339c:	6138      	str	r0, [r7, #16]
 801339e:	693b      	ldr	r3, [r7, #16]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d104      	bne.n	80133ae <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80133a4:	68b8      	ldr	r0, [r7, #8]
 80133a6:	f7fb fc73 	bl	800ec90 <pbuf_free>
    return NULL;
 80133aa:	2300      	movs	r3, #0
 80133ac:	e06c      	b.n	8013488 <tcp_create_segment+0x134>
  }
  seg->flags = optflags;
 80133ae:	693b      	ldr	r3, [r7, #16]
 80133b0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80133b4:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 80133b6:	693b      	ldr	r3, [r7, #16]
 80133b8:	2200      	movs	r2, #0
 80133ba:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80133bc:	693b      	ldr	r3, [r7, #16]
 80133be:	68ba      	ldr	r2, [r7, #8]
 80133c0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80133c2:	68bb      	ldr	r3, [r7, #8]
 80133c4:	891a      	ldrh	r2, [r3, #8]
 80133c6:	7dfb      	ldrb	r3, [r7, #23]
 80133c8:	b29b      	uxth	r3, r3
 80133ca:	429a      	cmp	r2, r3
 80133cc:	d205      	bcs.n	80133da <tcp_create_segment+0x86>
 80133ce:	4b30      	ldr	r3, [pc, #192]	; (8013490 <tcp_create_segment+0x13c>)
 80133d0:	22b0      	movs	r2, #176	; 0xb0
 80133d2:	4933      	ldr	r1, [pc, #204]	; (80134a0 <tcp_create_segment+0x14c>)
 80133d4:	4830      	ldr	r0, [pc, #192]	; (8013498 <tcp_create_segment+0x144>)
 80133d6:	f00d f801 	bl	80203dc <iprintf>
  seg->len = p->tot_len - optlen;
 80133da:	68bb      	ldr	r3, [r7, #8]
 80133dc:	891a      	ldrh	r2, [r3, #8]
 80133de:	7dfb      	ldrb	r3, [r7, #23]
 80133e0:	b29b      	uxth	r3, r3
 80133e2:	1ad3      	subs	r3, r2, r3
 80133e4:	b29a      	uxth	r2, r3
 80133e6:	693b      	ldr	r3, [r7, #16]
 80133e8:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 80133ea:	693b      	ldr	r3, [r7, #16]
 80133ec:	2200      	movs	r2, #0
 80133ee:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80133f0:	2114      	movs	r1, #20
 80133f2:	68b8      	ldr	r0, [r7, #8]
 80133f4:	f7fb fbb6 	bl	800eb64 <pbuf_add_header>
 80133f8:	4603      	mov	r3, r0
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d00c      	beq.n	8013418 <tcp_create_segment+0xc4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 80133fe:	4b29      	ldr	r3, [pc, #164]	; (80134a4 <tcp_create_segment+0x150>)
 8013400:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8013404:	3301      	adds	r3, #1
 8013406:	b29a      	uxth	r2, r3
 8013408:	4b26      	ldr	r3, [pc, #152]	; (80134a4 <tcp_create_segment+0x150>)
 801340a:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    tcp_seg_free(seg);
 801340e:	6938      	ldr	r0, [r7, #16]
 8013410:	f7fd f837 	bl	8010482 <tcp_seg_free>
    return NULL;
 8013414:	2300      	movs	r3, #0
 8013416:	e037      	b.n	8013488 <tcp_create_segment+0x134>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8013418:	693b      	ldr	r3, [r7, #16]
 801341a:	685b      	ldr	r3, [r3, #4]
 801341c:	685a      	ldr	r2, [r3, #4]
 801341e:	693b      	ldr	r3, [r7, #16]
 8013420:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	8ada      	ldrh	r2, [r3, #22]
 8013426:	693b      	ldr	r3, [r7, #16]
 8013428:	691c      	ldr	r4, [r3, #16]
 801342a:	4610      	mov	r0, r2
 801342c:	f7f9 faa8 	bl	800c980 <lwip_htons>
 8013430:	4603      	mov	r3, r0
 8013432:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	8b1a      	ldrh	r2, [r3, #24]
 8013438:	693b      	ldr	r3, [r7, #16]
 801343a:	691c      	ldr	r4, [r3, #16]
 801343c:	4610      	mov	r0, r2
 801343e:	f7f9 fa9f 	bl	800c980 <lwip_htons>
 8013442:	4603      	mov	r3, r0
 8013444:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8013446:	693b      	ldr	r3, [r7, #16]
 8013448:	691c      	ldr	r4, [r3, #16]
 801344a:	6838      	ldr	r0, [r7, #0]
 801344c:	f7f9 faad 	bl	800c9aa <lwip_htonl>
 8013450:	4603      	mov	r3, r0
 8013452:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8013454:	7dfb      	ldrb	r3, [r7, #23]
 8013456:	089b      	lsrs	r3, r3, #2
 8013458:	b2db      	uxtb	r3, r3
 801345a:	b29b      	uxth	r3, r3
 801345c:	3305      	adds	r3, #5
 801345e:	b29b      	uxth	r3, r3
 8013460:	031b      	lsls	r3, r3, #12
 8013462:	b29a      	uxth	r2, r3
 8013464:	79fb      	ldrb	r3, [r7, #7]
 8013466:	b29b      	uxth	r3, r3
 8013468:	4313      	orrs	r3, r2
 801346a:	b29a      	uxth	r2, r3
 801346c:	693b      	ldr	r3, [r7, #16]
 801346e:	691c      	ldr	r4, [r3, #16]
 8013470:	4610      	mov	r0, r2
 8013472:	f7f9 fa85 	bl	800c980 <lwip_htons>
 8013476:	4603      	mov	r3, r0
 8013478:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801347a:	693b      	ldr	r3, [r7, #16]
 801347c:	691b      	ldr	r3, [r3, #16]
 801347e:	2200      	movs	r2, #0
 8013480:	749a      	strb	r2, [r3, #18]
 8013482:	2200      	movs	r2, #0
 8013484:	74da      	strb	r2, [r3, #19]
  return seg;
 8013486:	693b      	ldr	r3, [r7, #16]
}
 8013488:	4618      	mov	r0, r3
 801348a:	371c      	adds	r7, #28
 801348c:	46bd      	mov	sp, r7
 801348e:	bd90      	pop	{r4, r7, pc}
 8013490:	08023070 	.word	0x08023070
 8013494:	080230a4 	.word	0x080230a4
 8013498:	080230c4 	.word	0x080230c4
 801349c:	080230ec 	.word	0x080230ec
 80134a0:	08023110 	.word	0x08023110
 80134a4:	2000a3ec 	.word	0x2000a3ec

080134a8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80134a8:	b590      	push	{r4, r7, lr}
 80134aa:	b08b      	sub	sp, #44	; 0x2c
 80134ac:	af02      	add	r7, sp, #8
 80134ae:	6078      	str	r0, [r7, #4]
 80134b0:	460b      	mov	r3, r1
 80134b2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80134b4:	2300      	movs	r3, #0
 80134b6:	61bb      	str	r3, [r7, #24]
 80134b8:	2300      	movs	r3, #0
 80134ba:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80134bc:	2300      	movs	r3, #0
 80134be:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d106      	bne.n	80134d4 <tcp_split_unsent_seg+0x2c>
 80134c6:	4b9b      	ldr	r3, [pc, #620]	; (8013734 <tcp_split_unsent_seg+0x28c>)
 80134c8:	f240 324b 	movw	r2, #843	; 0x34b
 80134cc:	499a      	ldr	r1, [pc, #616]	; (8013738 <tcp_split_unsent_seg+0x290>)
 80134ce:	489b      	ldr	r0, [pc, #620]	; (801373c <tcp_split_unsent_seg+0x294>)
 80134d0:	f00c ff84 	bl	80203dc <iprintf>

  useg = pcb->unsent;
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134d8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80134da:	697b      	ldr	r3, [r7, #20]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d102      	bne.n	80134e6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80134e0:	f04f 33ff 	mov.w	r3, #4294967295
 80134e4:	e121      	b.n	801372a <tcp_split_unsent_seg+0x282>
  }

  if (split == 0) {
 80134e6:	887b      	ldrh	r3, [r7, #2]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d109      	bne.n	8013500 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80134ec:	4b91      	ldr	r3, [pc, #580]	; (8013734 <tcp_split_unsent_seg+0x28c>)
 80134ee:	f240 3253 	movw	r2, #851	; 0x353
 80134f2:	4993      	ldr	r1, [pc, #588]	; (8013740 <tcp_split_unsent_seg+0x298>)
 80134f4:	4891      	ldr	r0, [pc, #580]	; (801373c <tcp_split_unsent_seg+0x294>)
 80134f6:	f00c ff71 	bl	80203dc <iprintf>
    return ERR_VAL;
 80134fa:	f06f 0305 	mvn.w	r3, #5
 80134fe:	e114      	b.n	801372a <tcp_split_unsent_seg+0x282>
  }

  if (useg->len <= split) {
 8013500:	697b      	ldr	r3, [r7, #20]
 8013502:	891b      	ldrh	r3, [r3, #8]
 8013504:	887a      	ldrh	r2, [r7, #2]
 8013506:	429a      	cmp	r2, r3
 8013508:	d301      	bcc.n	801350e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801350a:	2300      	movs	r3, #0
 801350c:	e10d      	b.n	801372a <tcp_split_unsent_seg+0x282>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013512:	887a      	ldrh	r2, [r7, #2]
 8013514:	429a      	cmp	r2, r3
 8013516:	d906      	bls.n	8013526 <tcp_split_unsent_seg+0x7e>
 8013518:	4b86      	ldr	r3, [pc, #536]	; (8013734 <tcp_split_unsent_seg+0x28c>)
 801351a:	f240 325b 	movw	r2, #859	; 0x35b
 801351e:	4989      	ldr	r1, [pc, #548]	; (8013744 <tcp_split_unsent_seg+0x29c>)
 8013520:	4886      	ldr	r0, [pc, #536]	; (801373c <tcp_split_unsent_seg+0x294>)
 8013522:	f00c ff5b 	bl	80203dc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8013526:	697b      	ldr	r3, [r7, #20]
 8013528:	891b      	ldrh	r3, [r3, #8]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d106      	bne.n	801353c <tcp_split_unsent_seg+0x94>
 801352e:	4b81      	ldr	r3, [pc, #516]	; (8013734 <tcp_split_unsent_seg+0x28c>)
 8013530:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8013534:	4984      	ldr	r1, [pc, #528]	; (8013748 <tcp_split_unsent_seg+0x2a0>)
 8013536:	4881      	ldr	r0, [pc, #516]	; (801373c <tcp_split_unsent_seg+0x294>)
 8013538:	f00c ff50 	bl	80203dc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801353c:	697b      	ldr	r3, [r7, #20]
 801353e:	7b1b      	ldrb	r3, [r3, #12]
 8013540:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013542:	7bfb      	ldrb	r3, [r7, #15]
 8013544:	009b      	lsls	r3, r3, #2
 8013546:	b2db      	uxtb	r3, r3
 8013548:	f003 0304 	and.w	r3, r3, #4
 801354c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801354e:	697b      	ldr	r3, [r7, #20]
 8013550:	891a      	ldrh	r2, [r3, #8]
 8013552:	887b      	ldrh	r3, [r7, #2]
 8013554:	1ad3      	subs	r3, r2, r3
 8013556:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013558:	7bbb      	ldrb	r3, [r7, #14]
 801355a:	b29a      	uxth	r2, r3
 801355c:	89bb      	ldrh	r3, [r7, #12]
 801355e:	4413      	add	r3, r2
 8013560:	b29b      	uxth	r3, r3
 8013562:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013566:	4619      	mov	r1, r3
 8013568:	2036      	movs	r0, #54	; 0x36
 801356a:	f7fb f8ad 	bl	800e6c8 <pbuf_alloc>
 801356e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013570:	693b      	ldr	r3, [r7, #16]
 8013572:	2b00      	cmp	r3, #0
 8013574:	f000 80ba 	beq.w	80136ec <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013578:	697b      	ldr	r3, [r7, #20]
 801357a:	685b      	ldr	r3, [r3, #4]
 801357c:	891a      	ldrh	r2, [r3, #8]
 801357e:	697b      	ldr	r3, [r7, #20]
 8013580:	891b      	ldrh	r3, [r3, #8]
 8013582:	1ad3      	subs	r3, r2, r3
 8013584:	b29a      	uxth	r2, r3
 8013586:	887b      	ldrh	r3, [r7, #2]
 8013588:	4413      	add	r3, r2
 801358a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801358c:	697b      	ldr	r3, [r7, #20]
 801358e:	6858      	ldr	r0, [r3, #4]
 8013590:	693b      	ldr	r3, [r7, #16]
 8013592:	685a      	ldr	r2, [r3, #4]
 8013594:	7bbb      	ldrb	r3, [r7, #14]
 8013596:	18d1      	adds	r1, r2, r3
 8013598:	897b      	ldrh	r3, [r7, #10]
 801359a:	89ba      	ldrh	r2, [r7, #12]
 801359c:	f7fb fd7e 	bl	800f09c <pbuf_copy_partial>
 80135a0:	4603      	mov	r3, r0
 80135a2:	461a      	mov	r2, r3
 80135a4:	89bb      	ldrh	r3, [r7, #12]
 80135a6:	4293      	cmp	r3, r2
 80135a8:	f040 80a2 	bne.w	80136f0 <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80135ac:	697b      	ldr	r3, [r7, #20]
 80135ae:	691b      	ldr	r3, [r3, #16]
 80135b0:	899b      	ldrh	r3, [r3, #12]
 80135b2:	b29b      	uxth	r3, r3
 80135b4:	4618      	mov	r0, r3
 80135b6:	f7f9 f9e3 	bl	800c980 <lwip_htons>
 80135ba:	4603      	mov	r3, r0
 80135bc:	b2db      	uxtb	r3, r3
 80135be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80135c2:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80135c4:	2300      	movs	r3, #0
 80135c6:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 80135c8:	7ffb      	ldrb	r3, [r7, #31]
 80135ca:	f003 0308 	and.w	r3, r3, #8
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d007      	beq.n	80135e2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80135d2:	7ffb      	ldrb	r3, [r7, #31]
 80135d4:	f023 0308 	bic.w	r3, r3, #8
 80135d8:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 80135da:	7fbb      	ldrb	r3, [r7, #30]
 80135dc:	f043 0308 	orr.w	r3, r3, #8
 80135e0:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 80135e2:	7ffb      	ldrb	r3, [r7, #31]
 80135e4:	f003 0301 	and.w	r3, r3, #1
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d007      	beq.n	80135fc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80135ec:	7ffb      	ldrb	r3, [r7, #31]
 80135ee:	f023 0301 	bic.w	r3, r3, #1
 80135f2:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 80135f4:	7fbb      	ldrb	r3, [r7, #30]
 80135f6:	f043 0301 	orr.w	r3, r3, #1
 80135fa:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80135fc:	697b      	ldr	r3, [r7, #20]
 80135fe:	691b      	ldr	r3, [r3, #16]
 8013600:	685b      	ldr	r3, [r3, #4]
 8013602:	4618      	mov	r0, r3
 8013604:	f7f9 f9d1 	bl	800c9aa <lwip_htonl>
 8013608:	4602      	mov	r2, r0
 801360a:	887b      	ldrh	r3, [r7, #2]
 801360c:	18d1      	adds	r1, r2, r3
 801360e:	7fba      	ldrb	r2, [r7, #30]
 8013610:	7bfb      	ldrb	r3, [r7, #15]
 8013612:	9300      	str	r3, [sp, #0]
 8013614:	460b      	mov	r3, r1
 8013616:	6939      	ldr	r1, [r7, #16]
 8013618:	6878      	ldr	r0, [r7, #4]
 801361a:	f7ff fe9b 	bl	8013354 <tcp_create_segment>
 801361e:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 8013620:	69bb      	ldr	r3, [r7, #24]
 8013622:	2b00      	cmp	r3, #0
 8013624:	d066      	beq.n	80136f4 <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013626:	697b      	ldr	r3, [r7, #20]
 8013628:	685b      	ldr	r3, [r3, #4]
 801362a:	4618      	mov	r0, r3
 801362c:	f7fb fbbe 	bl	800edac <pbuf_clen>
 8013630:	4603      	mov	r3, r0
 8013632:	461a      	mov	r2, r3
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801363a:	1a9b      	subs	r3, r3, r2
 801363c:	b29a      	uxth	r2, r3
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013644:	697b      	ldr	r3, [r7, #20]
 8013646:	6858      	ldr	r0, [r3, #4]
 8013648:	697b      	ldr	r3, [r7, #20]
 801364a:	685b      	ldr	r3, [r3, #4]
 801364c:	891a      	ldrh	r2, [r3, #8]
 801364e:	89bb      	ldrh	r3, [r7, #12]
 8013650:	1ad3      	subs	r3, r2, r3
 8013652:	b29b      	uxth	r3, r3
 8013654:	4619      	mov	r1, r3
 8013656:	f7fb f995 	bl	800e984 <pbuf_realloc>
  useg->len -= remainder;
 801365a:	697b      	ldr	r3, [r7, #20]
 801365c:	891a      	ldrh	r2, [r3, #8]
 801365e:	89bb      	ldrh	r3, [r7, #12]
 8013660:	1ad3      	subs	r3, r2, r3
 8013662:	b29a      	uxth	r2, r3
 8013664:	697b      	ldr	r3, [r7, #20]
 8013666:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013668:	697b      	ldr	r3, [r7, #20]
 801366a:	691b      	ldr	r3, [r3, #16]
 801366c:	899b      	ldrh	r3, [r3, #12]
 801366e:	b29c      	uxth	r4, r3
 8013670:	7ffb      	ldrb	r3, [r7, #31]
 8013672:	b29b      	uxth	r3, r3
 8013674:	4618      	mov	r0, r3
 8013676:	f7f9 f983 	bl	800c980 <lwip_htons>
 801367a:	4603      	mov	r3, r0
 801367c:	461a      	mov	r2, r3
 801367e:	697b      	ldr	r3, [r7, #20]
 8013680:	691b      	ldr	r3, [r3, #16]
 8013682:	4322      	orrs	r2, r4
 8013684:	b292      	uxth	r2, r2
 8013686:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 8013688:	697b      	ldr	r3, [r7, #20]
 801368a:	2200      	movs	r2, #0
 801368c:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801368e:	697b      	ldr	r3, [r7, #20]
 8013690:	685b      	ldr	r3, [r3, #4]
 8013692:	4618      	mov	r0, r3
 8013694:	f7fb fb8a 	bl	800edac <pbuf_clen>
 8013698:	4603      	mov	r3, r0
 801369a:	461a      	mov	r2, r3
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80136a2:	4413      	add	r3, r2
 80136a4:	b29a      	uxth	r2, r3
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80136ac:	69bb      	ldr	r3, [r7, #24]
 80136ae:	685b      	ldr	r3, [r3, #4]
 80136b0:	4618      	mov	r0, r3
 80136b2:	f7fb fb7b 	bl	800edac <pbuf_clen>
 80136b6:	4603      	mov	r3, r0
 80136b8:	461a      	mov	r2, r3
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80136c0:	4413      	add	r3, r2
 80136c2:	b29a      	uxth	r2, r3
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80136ca:	697b      	ldr	r3, [r7, #20]
 80136cc:	681a      	ldr	r2, [r3, #0]
 80136ce:	69bb      	ldr	r3, [r7, #24]
 80136d0:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80136d2:	697b      	ldr	r3, [r7, #20]
 80136d4:	69ba      	ldr	r2, [r7, #24]
 80136d6:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80136d8:	69bb      	ldr	r3, [r7, #24]
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d103      	bne.n	80136e8 <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	2200      	movs	r2, #0
 80136e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80136e8:	2300      	movs	r3, #0
 80136ea:	e01e      	b.n	801372a <tcp_split_unsent_seg+0x282>
    goto memerr;
 80136ec:	bf00      	nop
 80136ee:	e002      	b.n	80136f6 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 80136f0:	bf00      	nop
 80136f2:	e000      	b.n	80136f6 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 80136f4:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);
 80136f6:	4b15      	ldr	r3, [pc, #84]	; (801374c <tcp_split_unsent_seg+0x2a4>)
 80136f8:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 80136fc:	3301      	adds	r3, #1
 80136fe:	b29a      	uxth	r2, r3
 8013700:	4b12      	ldr	r3, [pc, #72]	; (801374c <tcp_split_unsent_seg+0x2a4>)
 8013702:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013706:	69bb      	ldr	r3, [r7, #24]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d006      	beq.n	801371a <tcp_split_unsent_seg+0x272>
 801370c:	4b09      	ldr	r3, [pc, #36]	; (8013734 <tcp_split_unsent_seg+0x28c>)
 801370e:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013712:	490f      	ldr	r1, [pc, #60]	; (8013750 <tcp_split_unsent_seg+0x2a8>)
 8013714:	4809      	ldr	r0, [pc, #36]	; (801373c <tcp_split_unsent_seg+0x294>)
 8013716:	f00c fe61 	bl	80203dc <iprintf>
  if (p != NULL) {
 801371a:	693b      	ldr	r3, [r7, #16]
 801371c:	2b00      	cmp	r3, #0
 801371e:	d002      	beq.n	8013726 <tcp_split_unsent_seg+0x27e>
    pbuf_free(p);
 8013720:	6938      	ldr	r0, [r7, #16]
 8013722:	f7fb fab5 	bl	800ec90 <pbuf_free>
  }

  return ERR_MEM;
 8013726:	f04f 33ff 	mov.w	r3, #4294967295
}
 801372a:	4618      	mov	r0, r3
 801372c:	3724      	adds	r7, #36	; 0x24
 801372e:	46bd      	mov	sp, r7
 8013730:	bd90      	pop	{r4, r7, pc}
 8013732:	bf00      	nop
 8013734:	08023070 	.word	0x08023070
 8013738:	08023460 	.word	0x08023460
 801373c:	080230c4 	.word	0x080230c4
 8013740:	08023484 	.word	0x08023484
 8013744:	080234a8 	.word	0x080234a8
 8013748:	080234b8 	.word	0x080234b8
 801374c:	2000a3ec 	.word	0x2000a3ec
 8013750:	080234c8 	.word	0x080234c8

08013754 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013754:	b590      	push	{r4, r7, lr}
 8013756:	b085      	sub	sp, #20
 8013758:	af00      	add	r7, sp, #0
 801375a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	2b00      	cmp	r3, #0
 8013760:	d106      	bne.n	8013770 <tcp_send_fin+0x1c>
 8013762:	4b21      	ldr	r3, [pc, #132]	; (80137e8 <tcp_send_fin+0x94>)
 8013764:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013768:	4920      	ldr	r1, [pc, #128]	; (80137ec <tcp_send_fin+0x98>)
 801376a:	4821      	ldr	r0, [pc, #132]	; (80137f0 <tcp_send_fin+0x9c>)
 801376c:	f00c fe36 	bl	80203dc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013774:	2b00      	cmp	r3, #0
 8013776:	d02e      	beq.n	80137d6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801377c:	60fb      	str	r3, [r7, #12]
 801377e:	e002      	b.n	8013786 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	2b00      	cmp	r3, #0
 801378c:	d1f8      	bne.n	8013780 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	691b      	ldr	r3, [r3, #16]
 8013792:	899b      	ldrh	r3, [r3, #12]
 8013794:	b29b      	uxth	r3, r3
 8013796:	4618      	mov	r0, r3
 8013798:	f7f9 f8f2 	bl	800c980 <lwip_htons>
 801379c:	4603      	mov	r3, r0
 801379e:	b2db      	uxtb	r3, r3
 80137a0:	f003 0307 	and.w	r3, r3, #7
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d116      	bne.n	80137d6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	691b      	ldr	r3, [r3, #16]
 80137ac:	899b      	ldrh	r3, [r3, #12]
 80137ae:	b29c      	uxth	r4, r3
 80137b0:	2001      	movs	r0, #1
 80137b2:	f7f9 f8e5 	bl	800c980 <lwip_htons>
 80137b6:	4603      	mov	r3, r0
 80137b8:	461a      	mov	r2, r3
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	691b      	ldr	r3, [r3, #16]
 80137be:	4322      	orrs	r2, r4
 80137c0:	b292      	uxth	r2, r2
 80137c2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	8b5b      	ldrh	r3, [r3, #26]
 80137c8:	f043 0320 	orr.w	r3, r3, #32
 80137cc:	b29a      	uxth	r2, r3
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80137d2:	2300      	movs	r3, #0
 80137d4:	e004      	b.n	80137e0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80137d6:	2101      	movs	r1, #1
 80137d8:	6878      	ldr	r0, [r7, #4]
 80137da:	f000 f80b 	bl	80137f4 <tcp_enqueue_flags>
 80137de:	4603      	mov	r3, r0
}
 80137e0:	4618      	mov	r0, r3
 80137e2:	3714      	adds	r7, #20
 80137e4:	46bd      	mov	sp, r7
 80137e6:	bd90      	pop	{r4, r7, pc}
 80137e8:	08023070 	.word	0x08023070
 80137ec:	080234d4 	.word	0x080234d4
 80137f0:	080230c4 	.word	0x080230c4

080137f4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80137f4:	b580      	push	{r7, lr}
 80137f6:	b088      	sub	sp, #32
 80137f8:	af02      	add	r7, sp, #8
 80137fa:	6078      	str	r0, [r7, #4]
 80137fc:	460b      	mov	r3, r1
 80137fe:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013800:	2300      	movs	r3, #0
 8013802:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 8013804:	2300      	movs	r3, #0
 8013806:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013808:	78fb      	ldrb	r3, [r7, #3]
 801380a:	f003 0303 	and.w	r3, r3, #3
 801380e:	2b00      	cmp	r3, #0
 8013810:	d106      	bne.n	8013820 <tcp_enqueue_flags+0x2c>
 8013812:	4b6f      	ldr	r3, [pc, #444]	; (80139d0 <tcp_enqueue_flags+0x1dc>)
 8013814:	f240 4211 	movw	r2, #1041	; 0x411
 8013818:	496e      	ldr	r1, [pc, #440]	; (80139d4 <tcp_enqueue_flags+0x1e0>)
 801381a:	486f      	ldr	r0, [pc, #444]	; (80139d8 <tcp_enqueue_flags+0x1e4>)
 801381c:	f00c fdde 	bl	80203dc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d106      	bne.n	8013834 <tcp_enqueue_flags+0x40>
 8013826:	4b6a      	ldr	r3, [pc, #424]	; (80139d0 <tcp_enqueue_flags+0x1dc>)
 8013828:	f240 4213 	movw	r2, #1043	; 0x413
 801382c:	496b      	ldr	r1, [pc, #428]	; (80139dc <tcp_enqueue_flags+0x1e8>)
 801382e:	486a      	ldr	r0, [pc, #424]	; (80139d8 <tcp_enqueue_flags+0x1e4>)
 8013830:	f00c fdd4 	bl	80203dc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013834:	78fb      	ldrb	r3, [r7, #3]
 8013836:	f003 0302 	and.w	r3, r3, #2
 801383a:	2b00      	cmp	r3, #0
 801383c:	d001      	beq.n	8013842 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801383e:	2301      	movs	r3, #1
 8013840:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013842:	7dfb      	ldrb	r3, [r7, #23]
 8013844:	009b      	lsls	r3, r3, #2
 8013846:	b2db      	uxtb	r3, r3
 8013848:	f003 0304 	and.w	r3, r3, #4
 801384c:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801384e:	7dbb      	ldrb	r3, [r7, #22]
 8013850:	b29b      	uxth	r3, r3
 8013852:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013856:	4619      	mov	r1, r3
 8013858:	2036      	movs	r0, #54	; 0x36
 801385a:	f7fa ff35 	bl	800e6c8 <pbuf_alloc>
 801385e:	60f8      	str	r0, [r7, #12]
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	2b00      	cmp	r3, #0
 8013864:	d111      	bne.n	801388a <tcp_enqueue_flags+0x96>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	8b5b      	ldrh	r3, [r3, #26]
 801386a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801386e:	b29a      	uxth	r2, r3
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 8013874:	4b5a      	ldr	r3, [pc, #360]	; (80139e0 <tcp_enqueue_flags+0x1ec>)
 8013876:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 801387a:	3301      	adds	r3, #1
 801387c:	b29a      	uxth	r2, r3
 801387e:	4b58      	ldr	r3, [pc, #352]	; (80139e0 <tcp_enqueue_flags+0x1ec>)
 8013880:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
    return ERR_MEM;
 8013884:	f04f 33ff 	mov.w	r3, #4294967295
 8013888:	e09d      	b.n	80139c6 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	895a      	ldrh	r2, [r3, #10]
 801388e:	7dbb      	ldrb	r3, [r7, #22]
 8013890:	b29b      	uxth	r3, r3
 8013892:	429a      	cmp	r2, r3
 8013894:	d206      	bcs.n	80138a4 <tcp_enqueue_flags+0xb0>
 8013896:	4b4e      	ldr	r3, [pc, #312]	; (80139d0 <tcp_enqueue_flags+0x1dc>)
 8013898:	f240 4239 	movw	r2, #1081	; 0x439
 801389c:	4951      	ldr	r1, [pc, #324]	; (80139e4 <tcp_enqueue_flags+0x1f0>)
 801389e:	484e      	ldr	r0, [pc, #312]	; (80139d8 <tcp_enqueue_flags+0x1e4>)
 80138a0:	f00c fd9c 	bl	80203dc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80138a8:	78fa      	ldrb	r2, [r7, #3]
 80138aa:	7dfb      	ldrb	r3, [r7, #23]
 80138ac:	9300      	str	r3, [sp, #0]
 80138ae:	460b      	mov	r3, r1
 80138b0:	68f9      	ldr	r1, [r7, #12]
 80138b2:	6878      	ldr	r0, [r7, #4]
 80138b4:	f7ff fd4e 	bl	8013354 <tcp_create_segment>
 80138b8:	60b8      	str	r0, [r7, #8]
 80138ba:	68bb      	ldr	r3, [r7, #8]
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d111      	bne.n	80138e4 <tcp_enqueue_flags+0xf0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	8b5b      	ldrh	r3, [r3, #26]
 80138c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80138c8:	b29a      	uxth	r2, r3
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 80138ce:	4b44      	ldr	r3, [pc, #272]	; (80139e0 <tcp_enqueue_flags+0x1ec>)
 80138d0:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 80138d4:	3301      	adds	r3, #1
 80138d6:	b29a      	uxth	r2, r3
 80138d8:	4b41      	ldr	r3, [pc, #260]	; (80139e0 <tcp_enqueue_flags+0x1ec>)
 80138da:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
    return ERR_MEM;
 80138de:	f04f 33ff 	mov.w	r3, #4294967295
 80138e2:	e070      	b.n	80139c6 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80138e4:	68bb      	ldr	r3, [r7, #8]
 80138e6:	691b      	ldr	r3, [r3, #16]
 80138e8:	f003 0303 	and.w	r3, r3, #3
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d006      	beq.n	80138fe <tcp_enqueue_flags+0x10a>
 80138f0:	4b37      	ldr	r3, [pc, #220]	; (80139d0 <tcp_enqueue_flags+0x1dc>)
 80138f2:	f240 4242 	movw	r2, #1090	; 0x442
 80138f6:	493c      	ldr	r1, [pc, #240]	; (80139e8 <tcp_enqueue_flags+0x1f4>)
 80138f8:	4837      	ldr	r0, [pc, #220]	; (80139d8 <tcp_enqueue_flags+0x1e4>)
 80138fa:	f00c fd6f 	bl	80203dc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80138fe:	68bb      	ldr	r3, [r7, #8]
 8013900:	891b      	ldrh	r3, [r3, #8]
 8013902:	2b00      	cmp	r3, #0
 8013904:	d006      	beq.n	8013914 <tcp_enqueue_flags+0x120>
 8013906:	4b32      	ldr	r3, [pc, #200]	; (80139d0 <tcp_enqueue_flags+0x1dc>)
 8013908:	f240 4243 	movw	r2, #1091	; 0x443
 801390c:	4937      	ldr	r1, [pc, #220]	; (80139ec <tcp_enqueue_flags+0x1f8>)
 801390e:	4832      	ldr	r0, [pc, #200]	; (80139d8 <tcp_enqueue_flags+0x1e4>)
 8013910:	f00c fd64 	bl	80203dc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013918:	2b00      	cmp	r3, #0
 801391a:	d103      	bne.n	8013924 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	68ba      	ldr	r2, [r7, #8]
 8013920:	66da      	str	r2, [r3, #108]	; 0x6c
 8013922:	e00d      	b.n	8013940 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013928:	613b      	str	r3, [r7, #16]
 801392a:	e002      	b.n	8013932 <tcp_enqueue_flags+0x13e>
 801392c:	693b      	ldr	r3, [r7, #16]
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	613b      	str	r3, [r7, #16]
 8013932:	693b      	ldr	r3, [r7, #16]
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d1f8      	bne.n	801392c <tcp_enqueue_flags+0x138>
    useg->next = seg;
 801393a:	693b      	ldr	r3, [r7, #16]
 801393c:	68ba      	ldr	r2, [r7, #8]
 801393e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	2200      	movs	r2, #0
 8013944:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013948:	78fb      	ldrb	r3, [r7, #3]
 801394a:	f003 0302 	and.w	r3, r3, #2
 801394e:	2b00      	cmp	r3, #0
 8013950:	d104      	bne.n	801395c <tcp_enqueue_flags+0x168>
 8013952:	78fb      	ldrb	r3, [r7, #3]
 8013954:	f003 0301 	and.w	r3, r3, #1
 8013958:	2b00      	cmp	r3, #0
 801395a:	d004      	beq.n	8013966 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013960:	1c5a      	adds	r2, r3, #1
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013966:	78fb      	ldrb	r3, [r7, #3]
 8013968:	f003 0301 	and.w	r3, r3, #1
 801396c:	2b00      	cmp	r3, #0
 801396e:	d006      	beq.n	801397e <tcp_enqueue_flags+0x18a>
    tcp_set_flags(pcb, TF_FIN);
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	8b5b      	ldrh	r3, [r3, #26]
 8013974:	f043 0320 	orr.w	r3, r3, #32
 8013978:	b29a      	uxth	r2, r3
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801397e:	68bb      	ldr	r3, [r7, #8]
 8013980:	685b      	ldr	r3, [r3, #4]
 8013982:	4618      	mov	r0, r3
 8013984:	f7fb fa12 	bl	800edac <pbuf_clen>
 8013988:	4603      	mov	r3, r0
 801398a:	461a      	mov	r2, r3
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013992:	4413      	add	r3, r2
 8013994:	b29a      	uxth	r2, r3
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d00e      	beq.n	80139c4 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d10a      	bne.n	80139c4 <tcp_enqueue_flags+0x1d0>
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d106      	bne.n	80139c4 <tcp_enqueue_flags+0x1d0>
 80139b6:	4b06      	ldr	r3, [pc, #24]	; (80139d0 <tcp_enqueue_flags+0x1dc>)
 80139b8:	f240 4265 	movw	r2, #1125	; 0x465
 80139bc:	490c      	ldr	r1, [pc, #48]	; (80139f0 <tcp_enqueue_flags+0x1fc>)
 80139be:	4806      	ldr	r0, [pc, #24]	; (80139d8 <tcp_enqueue_flags+0x1e4>)
 80139c0:	f00c fd0c 	bl	80203dc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80139c4:	2300      	movs	r3, #0
}
 80139c6:	4618      	mov	r0, r3
 80139c8:	3718      	adds	r7, #24
 80139ca:	46bd      	mov	sp, r7
 80139cc:	bd80      	pop	{r7, pc}
 80139ce:	bf00      	nop
 80139d0:	08023070 	.word	0x08023070
 80139d4:	080234f0 	.word	0x080234f0
 80139d8:	080230c4 	.word	0x080230c4
 80139dc:	08023548 	.word	0x08023548
 80139e0:	2000a3ec 	.word	0x2000a3ec
 80139e4:	08023568 	.word	0x08023568
 80139e8:	080235a4 	.word	0x080235a4
 80139ec:	080235bc 	.word	0x080235bc
 80139f0:	080235e8 	.word	0x080235e8

080139f4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80139f4:	b5b0      	push	{r4, r5, r7, lr}
 80139f6:	b08a      	sub	sp, #40	; 0x28
 80139f8:	af00      	add	r7, sp, #0
 80139fa:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d106      	bne.n	8013a10 <tcp_output+0x1c>
 8013a02:	4b9f      	ldr	r3, [pc, #636]	; (8013c80 <tcp_output+0x28c>)
 8013a04:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8013a08:	499e      	ldr	r1, [pc, #632]	; (8013c84 <tcp_output+0x290>)
 8013a0a:	489f      	ldr	r0, [pc, #636]	; (8013c88 <tcp_output+0x294>)
 8013a0c:	f00c fce6 	bl	80203dc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	7d1b      	ldrb	r3, [r3, #20]
 8013a14:	2b01      	cmp	r3, #1
 8013a16:	d106      	bne.n	8013a26 <tcp_output+0x32>
 8013a18:	4b99      	ldr	r3, [pc, #612]	; (8013c80 <tcp_output+0x28c>)
 8013a1a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8013a1e:	499b      	ldr	r1, [pc, #620]	; (8013c8c <tcp_output+0x298>)
 8013a20:	4899      	ldr	r0, [pc, #612]	; (8013c88 <tcp_output+0x294>)
 8013a22:	f00c fcdb 	bl	80203dc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8013a26:	4b9a      	ldr	r3, [pc, #616]	; (8013c90 <tcp_output+0x29c>)
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	687a      	ldr	r2, [r7, #4]
 8013a2c:	429a      	cmp	r2, r3
 8013a2e:	d101      	bne.n	8013a34 <tcp_output+0x40>
    return ERR_OK;
 8013a30:	2300      	movs	r3, #0
 8013a32:	e1d0      	b.n	8013dd6 <tcp_output+0x3e2>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013a40:	4293      	cmp	r3, r2
 8013a42:	bf28      	it	cs
 8013a44:	4613      	movcs	r3, r2
 8013a46:	b29b      	uxth	r3, r3
 8013a48:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a4e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8013a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d10b      	bne.n	8013a6e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	8b5b      	ldrh	r3, [r3, #26]
 8013a5a:	f003 0302 	and.w	r3, r3, #2
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	f000 81ac 	beq.w	8013dbc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8013a64:	6878      	ldr	r0, [r7, #4]
 8013a66:	f000 fdeb 	bl	8014640 <tcp_send_empty_ack>
 8013a6a:	4603      	mov	r3, r0
 8013a6c:	e1b3      	b.n	8013dd6 <tcp_output+0x3e2>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013a6e:	6879      	ldr	r1, [r7, #4]
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	3304      	adds	r3, #4
 8013a74:	461a      	mov	r2, r3
 8013a76:	6878      	ldr	r0, [r7, #4]
 8013a78:	f7ff fc50 	bl	801331c <tcp_route>
 8013a7c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013a7e:	697b      	ldr	r3, [r7, #20]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d102      	bne.n	8013a8a <tcp_output+0x96>
    return ERR_RTE;
 8013a84:	f06f 0303 	mvn.w	r3, #3
 8013a88:	e1a5      	b.n	8013dd6 <tcp_output+0x3e2>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d003      	beq.n	8013a98 <tcp_output+0xa4>
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d111      	bne.n	8013abc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013a98:	697b      	ldr	r3, [r7, #20]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d002      	beq.n	8013aa4 <tcp_output+0xb0>
 8013a9e:	697b      	ldr	r3, [r7, #20]
 8013aa0:	3304      	adds	r3, #4
 8013aa2:	e000      	b.n	8013aa6 <tcp_output+0xb2>
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013aa8:	693b      	ldr	r3, [r7, #16]
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d102      	bne.n	8013ab4 <tcp_output+0xc0>
      return ERR_RTE;
 8013aae:	f06f 0303 	mvn.w	r3, #3
 8013ab2:	e190      	b.n	8013dd6 <tcp_output+0x3e2>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013ab4:	693b      	ldr	r3, [r7, #16]
 8013ab6:	681a      	ldr	r2, [r3, #0]
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8013abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013abe:	691b      	ldr	r3, [r3, #16]
 8013ac0:	685b      	ldr	r3, [r3, #4]
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	f7f8 ff71 	bl	800c9aa <lwip_htonl>
 8013ac8:	4602      	mov	r2, r0
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013ace:	1ad3      	subs	r3, r2, r3
 8013ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ad2:	8912      	ldrh	r2, [r2, #8]
 8013ad4:	4413      	add	r3, r2
 8013ad6:	69ba      	ldr	r2, [r7, #24]
 8013ad8:	429a      	cmp	r2, r3
 8013ada:	d227      	bcs.n	8013b2c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013ae2:	461a      	mov	r2, r3
 8013ae4:	69bb      	ldr	r3, [r7, #24]
 8013ae6:	4293      	cmp	r3, r2
 8013ae8:	d114      	bne.n	8013b14 <tcp_output+0x120>
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d110      	bne.n	8013b14 <tcp_output+0x120>
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d10b      	bne.n	8013b14 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	2200      	movs	r2, #0
 8013b00:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	2201      	movs	r2, #1
 8013b08:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	2200      	movs	r2, #0
 8013b10:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	8b5b      	ldrh	r3, [r3, #26]
 8013b18:	f003 0302 	and.w	r3, r3, #2
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	f000 814f 	beq.w	8013dc0 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 8013b22:	6878      	ldr	r0, [r7, #4]
 8013b24:	f000 fd8c 	bl	8014640 <tcp_send_empty_ack>
 8013b28:	4603      	mov	r3, r0
 8013b2a:	e154      	b.n	8013dd6 <tcp_output+0x3e2>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	2200      	movs	r2, #0
 8013b30:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b38:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013b3a:	6a3b      	ldr	r3, [r7, #32]
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	f000 811e 	beq.w	8013d7e <tcp_output+0x38a>
    for (; useg->next != NULL; useg = useg->next);
 8013b42:	e002      	b.n	8013b4a <tcp_output+0x156>
 8013b44:	6a3b      	ldr	r3, [r7, #32]
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	623b      	str	r3, [r7, #32]
 8013b4a:	6a3b      	ldr	r3, [r7, #32]
 8013b4c:	681b      	ldr	r3, [r3, #0]
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d1f8      	bne.n	8013b44 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8013b52:	e114      	b.n	8013d7e <tcp_output+0x38a>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b56:	691b      	ldr	r3, [r3, #16]
 8013b58:	899b      	ldrh	r3, [r3, #12]
 8013b5a:	b29b      	uxth	r3, r3
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	f7f8 ff0f 	bl	800c980 <lwip_htons>
 8013b62:	4603      	mov	r3, r0
 8013b64:	b2db      	uxtb	r3, r3
 8013b66:	f003 0304 	and.w	r3, r3, #4
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d006      	beq.n	8013b7c <tcp_output+0x188>
 8013b6e:	4b44      	ldr	r3, [pc, #272]	; (8013c80 <tcp_output+0x28c>)
 8013b70:	f240 5236 	movw	r2, #1334	; 0x536
 8013b74:	4947      	ldr	r1, [pc, #284]	; (8013c94 <tcp_output+0x2a0>)
 8013b76:	4844      	ldr	r0, [pc, #272]	; (8013c88 <tcp_output+0x294>)
 8013b78:	f00c fc30 	bl	80203dc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d01f      	beq.n	8013bc4 <tcp_output+0x1d0>
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	8b5b      	ldrh	r3, [r3, #26]
 8013b88:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d119      	bne.n	8013bc4 <tcp_output+0x1d0>
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d00b      	beq.n	8013bb0 <tcp_output+0x1bc>
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d110      	bne.n	8013bc4 <tcp_output+0x1d0>
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ba6:	891a      	ldrh	r2, [r3, #8]
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013bac:	429a      	cmp	r2, r3
 8013bae:	d209      	bcs.n	8013bc4 <tcp_output+0x1d0>
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d004      	beq.n	8013bc4 <tcp_output+0x1d0>
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013bc0:	2b08      	cmp	r3, #8
 8013bc2:	d901      	bls.n	8013bc8 <tcp_output+0x1d4>
 8013bc4:	2301      	movs	r3, #1
 8013bc6:	e000      	b.n	8013bca <tcp_output+0x1d6>
 8013bc8:	2300      	movs	r3, #0
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d106      	bne.n	8013bdc <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	8b5b      	ldrh	r3, [r3, #26]
 8013bd2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	f000 80e6 	beq.w	8013da8 <tcp_output+0x3b4>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	7d1b      	ldrb	r3, [r3, #20]
 8013be0:	2b02      	cmp	r3, #2
 8013be2:	d00d      	beq.n	8013c00 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013be6:	691b      	ldr	r3, [r3, #16]
 8013be8:	899b      	ldrh	r3, [r3, #12]
 8013bea:	b29c      	uxth	r4, r3
 8013bec:	2010      	movs	r0, #16
 8013bee:	f7f8 fec7 	bl	800c980 <lwip_htons>
 8013bf2:	4603      	mov	r3, r0
 8013bf4:	461a      	mov	r2, r3
 8013bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bf8:	691b      	ldr	r3, [r3, #16]
 8013bfa:	4322      	orrs	r2, r4
 8013bfc:	b292      	uxth	r2, r2
 8013bfe:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013c00:	697a      	ldr	r2, [r7, #20]
 8013c02:	6879      	ldr	r1, [r7, #4]
 8013c04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013c06:	f000 f90b 	bl	8013e20 <tcp_output_segment>
 8013c0a:	4603      	mov	r3, r0
 8013c0c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d009      	beq.n	8013c2a <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	8b5b      	ldrh	r3, [r3, #26]
 8013c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013c1e:	b29a      	uxth	r2, r3
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	835a      	strh	r2, [r3, #26]
      return err;
 8013c24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013c28:	e0d5      	b.n	8013dd6 <tcp_output+0x3e2>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 8013c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c2c:	2200      	movs	r2, #0
 8013c2e:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8013c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c32:	681a      	ldr	r2, [r3, #0]
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	7d1b      	ldrb	r3, [r3, #20]
 8013c3c:	2b02      	cmp	r3, #2
 8013c3e:	d006      	beq.n	8013c4e <tcp_output+0x25a>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	8b5b      	ldrh	r3, [r3, #26]
 8013c44:	f023 0303 	bic.w	r3, r3, #3
 8013c48:	b29a      	uxth	r2, r3
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c50:	691b      	ldr	r3, [r3, #16]
 8013c52:	685b      	ldr	r3, [r3, #4]
 8013c54:	4618      	mov	r0, r3
 8013c56:	f7f8 fea8 	bl	800c9aa <lwip_htonl>
 8013c5a:	4604      	mov	r4, r0
 8013c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c5e:	891b      	ldrh	r3, [r3, #8]
 8013c60:	461d      	mov	r5, r3
 8013c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c64:	691b      	ldr	r3, [r3, #16]
 8013c66:	899b      	ldrh	r3, [r3, #12]
 8013c68:	b29b      	uxth	r3, r3
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	f7f8 fe88 	bl	800c980 <lwip_htons>
 8013c70:	4603      	mov	r3, r0
 8013c72:	b2db      	uxtb	r3, r3
 8013c74:	f003 0303 	and.w	r3, r3, #3
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d00d      	beq.n	8013c98 <tcp_output+0x2a4>
 8013c7c:	2301      	movs	r3, #1
 8013c7e:	e00c      	b.n	8013c9a <tcp_output+0x2a6>
 8013c80:	08023070 	.word	0x08023070
 8013c84:	08023610 	.word	0x08023610
 8013c88:	080230c4 	.word	0x080230c4
 8013c8c:	08023628 	.word	0x08023628
 8013c90:	2000a528 	.word	0x2000a528
 8013c94:	08023650 	.word	0x08023650
 8013c98:	2300      	movs	r3, #0
 8013c9a:	442b      	add	r3, r5
 8013c9c:	4423      	add	r3, r4
 8013c9e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013ca4:	68bb      	ldr	r3, [r7, #8]
 8013ca6:	1ad3      	subs	r3, r2, r3
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	da02      	bge.n	8013cb2 <tcp_output+0x2be>
      pcb->snd_nxt = snd_nxt;
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	68ba      	ldr	r2, [r7, #8]
 8013cb0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8013cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cb4:	891b      	ldrh	r3, [r3, #8]
 8013cb6:	461c      	mov	r4, r3
 8013cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cba:	691b      	ldr	r3, [r3, #16]
 8013cbc:	899b      	ldrh	r3, [r3, #12]
 8013cbe:	b29b      	uxth	r3, r3
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	f7f8 fe5d 	bl	800c980 <lwip_htons>
 8013cc6:	4603      	mov	r3, r0
 8013cc8:	b2db      	uxtb	r3, r3
 8013cca:	f003 0303 	and.w	r3, r3, #3
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d001      	beq.n	8013cd6 <tcp_output+0x2e2>
 8013cd2:	2301      	movs	r3, #1
 8013cd4:	e000      	b.n	8013cd8 <tcp_output+0x2e4>
 8013cd6:	2300      	movs	r3, #0
 8013cd8:	4423      	add	r3, r4
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d049      	beq.n	8013d72 <tcp_output+0x37e>
      seg->next = NULL;
 8013cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ce0:	2200      	movs	r2, #0
 8013ce2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d105      	bne.n	8013cf8 <tcp_output+0x304>
        pcb->unacked = seg;
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013cf0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8013cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cf4:	623b      	str	r3, [r7, #32]
 8013cf6:	e03f      	b.n	8013d78 <tcp_output+0x384>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8013cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cfa:	691b      	ldr	r3, [r3, #16]
 8013cfc:	685b      	ldr	r3, [r3, #4]
 8013cfe:	4618      	mov	r0, r3
 8013d00:	f7f8 fe53 	bl	800c9aa <lwip_htonl>
 8013d04:	4604      	mov	r4, r0
 8013d06:	6a3b      	ldr	r3, [r7, #32]
 8013d08:	691b      	ldr	r3, [r3, #16]
 8013d0a:	685b      	ldr	r3, [r3, #4]
 8013d0c:	4618      	mov	r0, r3
 8013d0e:	f7f8 fe4c 	bl	800c9aa <lwip_htonl>
 8013d12:	4603      	mov	r3, r0
 8013d14:	1ae3      	subs	r3, r4, r3
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	da24      	bge.n	8013d64 <tcp_output+0x370>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	3370      	adds	r3, #112	; 0x70
 8013d1e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013d20:	e002      	b.n	8013d28 <tcp_output+0x334>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8013d22:	69fb      	ldr	r3, [r7, #28]
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013d28:	69fb      	ldr	r3, [r7, #28]
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d011      	beq.n	8013d54 <tcp_output+0x360>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013d30:	69fb      	ldr	r3, [r7, #28]
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	691b      	ldr	r3, [r3, #16]
 8013d36:	685b      	ldr	r3, [r3, #4]
 8013d38:	4618      	mov	r0, r3
 8013d3a:	f7f8 fe36 	bl	800c9aa <lwip_htonl>
 8013d3e:	4604      	mov	r4, r0
 8013d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d42:	691b      	ldr	r3, [r3, #16]
 8013d44:	685b      	ldr	r3, [r3, #4]
 8013d46:	4618      	mov	r0, r3
 8013d48:	f7f8 fe2f 	bl	800c9aa <lwip_htonl>
 8013d4c:	4603      	mov	r3, r0
 8013d4e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	dbe6      	blt.n	8013d22 <tcp_output+0x32e>
          }
          seg->next = (*cur_seg);
 8013d54:	69fb      	ldr	r3, [r7, #28]
 8013d56:	681a      	ldr	r2, [r3, #0]
 8013d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d5a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8013d5c:	69fb      	ldr	r3, [r7, #28]
 8013d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d60:	601a      	str	r2, [r3, #0]
 8013d62:	e009      	b.n	8013d78 <tcp_output+0x384>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8013d64:	6a3b      	ldr	r3, [r7, #32]
 8013d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d68:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8013d6a:	6a3b      	ldr	r3, [r7, #32]
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	623b      	str	r3, [r7, #32]
 8013d70:	e002      	b.n	8013d78 <tcp_output+0x384>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8013d72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013d74:	f7fc fb85 	bl	8010482 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d7c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8013d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d012      	beq.n	8013daa <tcp_output+0x3b6>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d86:	691b      	ldr	r3, [r3, #16]
 8013d88:	685b      	ldr	r3, [r3, #4]
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	f7f8 fe0d 	bl	800c9aa <lwip_htonl>
 8013d90:	4602      	mov	r2, r0
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013d96:	1ad3      	subs	r3, r2, r3
 8013d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d9a:	8912      	ldrh	r2, [r2, #8]
 8013d9c:	4413      	add	r3, r2
  while (seg != NULL &&
 8013d9e:	69ba      	ldr	r2, [r7, #24]
 8013da0:	429a      	cmp	r2, r3
 8013da2:	f4bf aed7 	bcs.w	8013b54 <tcp_output+0x160>
 8013da6:	e000      	b.n	8013daa <tcp_output+0x3b6>
      break;
 8013da8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d108      	bne.n	8013dc4 <tcp_output+0x3d0>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	2200      	movs	r2, #0
 8013db6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8013dba:	e004      	b.n	8013dc6 <tcp_output+0x3d2>
    goto output_done;
 8013dbc:	bf00      	nop
 8013dbe:	e002      	b.n	8013dc6 <tcp_output+0x3d2>
    goto output_done;
 8013dc0:	bf00      	nop
 8013dc2:	e000      	b.n	8013dc6 <tcp_output+0x3d2>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8013dc4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	8b5b      	ldrh	r3, [r3, #26]
 8013dca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013dce:	b29a      	uxth	r2, r3
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8013dd4:	2300      	movs	r3, #0
}
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	3728      	adds	r7, #40	; 0x28
 8013dda:	46bd      	mov	sp, r7
 8013ddc:	bdb0      	pop	{r4, r5, r7, pc}
 8013dde:	bf00      	nop

08013de0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b082      	sub	sp, #8
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d106      	bne.n	8013dfc <tcp_output_segment_busy+0x1c>
 8013dee:	4b09      	ldr	r3, [pc, #36]	; (8013e14 <tcp_output_segment_busy+0x34>)
 8013df0:	f240 529a 	movw	r2, #1434	; 0x59a
 8013df4:	4908      	ldr	r1, [pc, #32]	; (8013e18 <tcp_output_segment_busy+0x38>)
 8013df6:	4809      	ldr	r0, [pc, #36]	; (8013e1c <tcp_output_segment_busy+0x3c>)
 8013df8:	f00c faf0 	bl	80203dc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	685b      	ldr	r3, [r3, #4]
 8013e00:	7b9b      	ldrb	r3, [r3, #14]
 8013e02:	2b01      	cmp	r3, #1
 8013e04:	d001      	beq.n	8013e0a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8013e06:	2301      	movs	r3, #1
 8013e08:	e000      	b.n	8013e0c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8013e0a:	2300      	movs	r3, #0
}
 8013e0c:	4618      	mov	r0, r3
 8013e0e:	3708      	adds	r7, #8
 8013e10:	46bd      	mov	sp, r7
 8013e12:	bd80      	pop	{r7, pc}
 8013e14:	08023070 	.word	0x08023070
 8013e18:	08023668 	.word	0x08023668
 8013e1c:	080230c4 	.word	0x080230c4

08013e20 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8013e20:	b5b0      	push	{r4, r5, r7, lr}
 8013e22:	b08c      	sub	sp, #48	; 0x30
 8013e24:	af04      	add	r7, sp, #16
 8013e26:	60f8      	str	r0, [r7, #12]
 8013e28:	60b9      	str	r1, [r7, #8]
 8013e2a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d106      	bne.n	8013e40 <tcp_output_segment+0x20>
 8013e32:	4b67      	ldr	r3, [pc, #412]	; (8013fd0 <tcp_output_segment+0x1b0>)
 8013e34:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8013e38:	4966      	ldr	r1, [pc, #408]	; (8013fd4 <tcp_output_segment+0x1b4>)
 8013e3a:	4867      	ldr	r0, [pc, #412]	; (8013fd8 <tcp_output_segment+0x1b8>)
 8013e3c:	f00c face 	bl	80203dc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8013e40:	68bb      	ldr	r3, [r7, #8]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d106      	bne.n	8013e54 <tcp_output_segment+0x34>
 8013e46:	4b62      	ldr	r3, [pc, #392]	; (8013fd0 <tcp_output_segment+0x1b0>)
 8013e48:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8013e4c:	4963      	ldr	r1, [pc, #396]	; (8013fdc <tcp_output_segment+0x1bc>)
 8013e4e:	4862      	ldr	r0, [pc, #392]	; (8013fd8 <tcp_output_segment+0x1b8>)
 8013e50:	f00c fac4 	bl	80203dc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d106      	bne.n	8013e68 <tcp_output_segment+0x48>
 8013e5a:	4b5d      	ldr	r3, [pc, #372]	; (8013fd0 <tcp_output_segment+0x1b0>)
 8013e5c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8013e60:	495f      	ldr	r1, [pc, #380]	; (8013fe0 <tcp_output_segment+0x1c0>)
 8013e62:	485d      	ldr	r0, [pc, #372]	; (8013fd8 <tcp_output_segment+0x1b8>)
 8013e64:	f00c faba 	bl	80203dc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8013e68:	68f8      	ldr	r0, [r7, #12]
 8013e6a:	f7ff ffb9 	bl	8013de0 <tcp_output_segment_busy>
 8013e6e:	4603      	mov	r3, r0
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d001      	beq.n	8013e78 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013e74:	2300      	movs	r3, #0
 8013e76:	e0a7      	b.n	8013fc8 <tcp_output_segment+0x1a8>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013e78:	68bb      	ldr	r3, [r7, #8]
 8013e7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	691c      	ldr	r4, [r3, #16]
 8013e80:	4610      	mov	r0, r2
 8013e82:	f7f8 fd92 	bl	800c9aa <lwip_htonl>
 8013e86:	4603      	mov	r3, r0
 8013e88:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8013e8a:	68bb      	ldr	r3, [r7, #8]
 8013e8c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	691c      	ldr	r4, [r3, #16]
 8013e92:	4610      	mov	r0, r2
 8013e94:	f7f8 fd74 	bl	800c980 <lwip_htons>
 8013e98:	4603      	mov	r3, r0
 8013e9a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013e9c:	68bb      	ldr	r3, [r7, #8]
 8013e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ea0:	68ba      	ldr	r2, [r7, #8]
 8013ea2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013ea4:	441a      	add	r2, r3
 8013ea6:	68bb      	ldr	r3, [r7, #8]
 8013ea8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	691b      	ldr	r3, [r3, #16]
 8013eae:	3314      	adds	r3, #20
 8013eb0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	7b1b      	ldrb	r3, [r3, #12]
 8013eb6:	f003 0301 	and.w	r3, r3, #1
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d015      	beq.n	8013eea <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8013ebe:	68bb      	ldr	r3, [r7, #8]
 8013ec0:	3304      	adds	r3, #4
 8013ec2:	461a      	mov	r2, r3
 8013ec4:	6879      	ldr	r1, [r7, #4]
 8013ec6:	f44f 7006 	mov.w	r0, #536	; 0x218
 8013eca:	f7fc fdfb 	bl	8010ac4 <tcp_eff_send_mss_netif>
 8013ece:	4603      	mov	r3, r0
 8013ed0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8013ed2:	8b7b      	ldrh	r3, [r7, #26]
 8013ed4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8013ed8:	4618      	mov	r0, r3
 8013eda:	f7f8 fd66 	bl	800c9aa <lwip_htonl>
 8013ede:	4602      	mov	r2, r0
 8013ee0:	69fb      	ldr	r3, [r7, #28]
 8013ee2:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013ee4:	69fb      	ldr	r3, [r7, #28]
 8013ee6:	3304      	adds	r3, #4
 8013ee8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8013eea:	68bb      	ldr	r3, [r7, #8]
 8013eec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	da02      	bge.n	8013efa <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013ef4:	68bb      	ldr	r3, [r7, #8]
 8013ef6:	2200      	movs	r2, #0
 8013ef8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8013efa:	68bb      	ldr	r3, [r7, #8]
 8013efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d10c      	bne.n	8013f1c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8013f02:	4b38      	ldr	r3, [pc, #224]	; (8013fe4 <tcp_output_segment+0x1c4>)
 8013f04:	681a      	ldr	r2, [r3, #0]
 8013f06:	68bb      	ldr	r3, [r7, #8]
 8013f08:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	691b      	ldr	r3, [r3, #16]
 8013f0e:	685b      	ldr	r3, [r3, #4]
 8013f10:	4618      	mov	r0, r3
 8013f12:	f7f8 fd4a 	bl	800c9aa <lwip_htonl>
 8013f16:	4602      	mov	r2, r0
 8013f18:	68bb      	ldr	r3, [r7, #8]
 8013f1a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	691a      	ldr	r2, [r3, #16]
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	685b      	ldr	r3, [r3, #4]
 8013f24:	685b      	ldr	r3, [r3, #4]
 8013f26:	1ad3      	subs	r3, r2, r3
 8013f28:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	685b      	ldr	r3, [r3, #4]
 8013f2e:	8959      	ldrh	r1, [r3, #10]
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	685b      	ldr	r3, [r3, #4]
 8013f34:	8b3a      	ldrh	r2, [r7, #24]
 8013f36:	1a8a      	subs	r2, r1, r2
 8013f38:	b292      	uxth	r2, r2
 8013f3a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	685b      	ldr	r3, [r3, #4]
 8013f40:	8919      	ldrh	r1, [r3, #8]
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	685b      	ldr	r3, [r3, #4]
 8013f46:	8b3a      	ldrh	r2, [r7, #24]
 8013f48:	1a8a      	subs	r2, r1, r2
 8013f4a:	b292      	uxth	r2, r2
 8013f4c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	685b      	ldr	r3, [r3, #4]
 8013f52:	68fa      	ldr	r2, [r7, #12]
 8013f54:	6912      	ldr	r2, [r2, #16]
 8013f56:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	691b      	ldr	r3, [r3, #16]
 8013f5c:	2200      	movs	r2, #0
 8013f5e:	741a      	strb	r2, [r3, #16]
 8013f60:	2200      	movs	r2, #0
 8013f62:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	691b      	ldr	r3, [r3, #16]
 8013f68:	f103 0214 	add.w	r2, r3, #20
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	7b1b      	ldrb	r3, [r3, #12]
 8013f70:	009b      	lsls	r3, r3, #2
 8013f72:	f003 0304 	and.w	r3, r3, #4
 8013f76:	4413      	add	r3, r2
 8013f78:	69fa      	ldr	r2, [r7, #28]
 8013f7a:	429a      	cmp	r2, r3
 8013f7c:	d006      	beq.n	8013f8c <tcp_output_segment+0x16c>
 8013f7e:	4b14      	ldr	r3, [pc, #80]	; (8013fd0 <tcp_output_segment+0x1b0>)
 8013f80:	f240 621c 	movw	r2, #1564	; 0x61c
 8013f84:	4918      	ldr	r1, [pc, #96]	; (8013fe8 <tcp_output_segment+0x1c8>)
 8013f86:	4814      	ldr	r0, [pc, #80]	; (8013fd8 <tcp_output_segment+0x1b8>)
 8013f88:	f00c fa28 	bl	80203dc <iprintf>
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 8013f8c:	4b17      	ldr	r3, [pc, #92]	; (8013fec <tcp_output_segment+0x1cc>)
 8013f8e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8013f92:	3301      	adds	r3, #1
 8013f94:	b29a      	uxth	r2, r3
 8013f96:	4b15      	ldr	r3, [pc, #84]	; (8013fec <tcp_output_segment+0x1cc>)
 8013f98:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	6858      	ldr	r0, [r3, #4]
 8013fa0:	68b9      	ldr	r1, [r7, #8]
 8013fa2:	68bb      	ldr	r3, [r7, #8]
 8013fa4:	1d1c      	adds	r4, r3, #4
 8013fa6:	68bb      	ldr	r3, [r7, #8]
 8013fa8:	7add      	ldrb	r5, [r3, #11]
 8013faa:	68bb      	ldr	r3, [r7, #8]
 8013fac:	7a9b      	ldrb	r3, [r3, #10]
 8013fae:	687a      	ldr	r2, [r7, #4]
 8013fb0:	9202      	str	r2, [sp, #8]
 8013fb2:	2206      	movs	r2, #6
 8013fb4:	9201      	str	r2, [sp, #4]
 8013fb6:	9300      	str	r3, [sp, #0]
 8013fb8:	462b      	mov	r3, r5
 8013fba:	4622      	mov	r2, r4
 8013fbc:	f006 fac4 	bl	801a548 <ip4_output_if>
 8013fc0:	4603      	mov	r3, r0
 8013fc2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013fc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013fc8:	4618      	mov	r0, r3
 8013fca:	3720      	adds	r7, #32
 8013fcc:	46bd      	mov	sp, r7
 8013fce:	bdb0      	pop	{r4, r5, r7, pc}
 8013fd0:	08023070 	.word	0x08023070
 8013fd4:	08023690 	.word	0x08023690
 8013fd8:	080230c4 	.word	0x080230c4
 8013fdc:	080236b0 	.word	0x080236b0
 8013fe0:	080236d0 	.word	0x080236d0
 8013fe4:	2000a518 	.word	0x2000a518
 8013fe8:	080236f4 	.word	0x080236f4
 8013fec:	2000a3ec 	.word	0x2000a3ec

08013ff0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013ff0:	b5b0      	push	{r4, r5, r7, lr}
 8013ff2:	b084      	sub	sp, #16
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d106      	bne.n	801400c <tcp_rexmit_rto_prepare+0x1c>
 8013ffe:	4b36      	ldr	r3, [pc, #216]	; (80140d8 <tcp_rexmit_rto_prepare+0xe8>)
 8014000:	f240 6263 	movw	r2, #1635	; 0x663
 8014004:	4935      	ldr	r1, [pc, #212]	; (80140dc <tcp_rexmit_rto_prepare+0xec>)
 8014006:	4836      	ldr	r0, [pc, #216]	; (80140e0 <tcp_rexmit_rto_prepare+0xf0>)
 8014008:	f00c f9e8 	bl	80203dc <iprintf>

  if (pcb->unacked == NULL) {
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014010:	2b00      	cmp	r3, #0
 8014012:	d102      	bne.n	801401a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8014014:	f06f 0305 	mvn.w	r3, #5
 8014018:	e059      	b.n	80140ce <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801401e:	60fb      	str	r3, [r7, #12]
 8014020:	e00b      	b.n	801403a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8014022:	68f8      	ldr	r0, [r7, #12]
 8014024:	f7ff fedc 	bl	8013de0 <tcp_output_segment_busy>
 8014028:	4603      	mov	r3, r0
 801402a:	2b00      	cmp	r3, #0
 801402c:	d002      	beq.n	8014034 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801402e:	f06f 0305 	mvn.w	r3, #5
 8014032:	e04c      	b.n	80140ce <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014034:	68fb      	ldr	r3, [r7, #12]
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	60fb      	str	r3, [r7, #12]
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	2b00      	cmp	r3, #0
 8014040:	d1ef      	bne.n	8014022 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8014042:	68f8      	ldr	r0, [r7, #12]
 8014044:	f7ff fecc 	bl	8013de0 <tcp_output_segment_busy>
 8014048:	4603      	mov	r3, r0
 801404a:	2b00      	cmp	r3, #0
 801404c:	d002      	beq.n	8014054 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801404e:	f06f 0305 	mvn.w	r3, #5
 8014052:	e03c      	b.n	80140ce <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014060:	2b00      	cmp	r3, #0
 8014062:	d104      	bne.n	801406e <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	895a      	ldrh	r2, [r3, #10]
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	2200      	movs	r2, #0
 801407a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	8b5b      	ldrh	r3, [r3, #26]
 8014080:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014084:	b29a      	uxth	r2, r3
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	691b      	ldr	r3, [r3, #16]
 801408e:	685b      	ldr	r3, [r3, #4]
 8014090:	4618      	mov	r0, r3
 8014092:	f7f8 fc8a 	bl	800c9aa <lwip_htonl>
 8014096:	4604      	mov	r4, r0
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	891b      	ldrh	r3, [r3, #8]
 801409c:	461d      	mov	r5, r3
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	691b      	ldr	r3, [r3, #16]
 80140a2:	899b      	ldrh	r3, [r3, #12]
 80140a4:	b29b      	uxth	r3, r3
 80140a6:	4618      	mov	r0, r3
 80140a8:	f7f8 fc6a 	bl	800c980 <lwip_htons>
 80140ac:	4603      	mov	r3, r0
 80140ae:	b2db      	uxtb	r3, r3
 80140b0:	f003 0303 	and.w	r3, r3, #3
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d001      	beq.n	80140bc <tcp_rexmit_rto_prepare+0xcc>
 80140b8:	2301      	movs	r3, #1
 80140ba:	e000      	b.n	80140be <tcp_rexmit_rto_prepare+0xce>
 80140bc:	2300      	movs	r3, #0
 80140be:	442b      	add	r3, r5
 80140c0:	18e2      	adds	r2, r4, r3
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	2200      	movs	r2, #0
 80140ca:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80140cc:	2300      	movs	r3, #0
}
 80140ce:	4618      	mov	r0, r3
 80140d0:	3710      	adds	r7, #16
 80140d2:	46bd      	mov	sp, r7
 80140d4:	bdb0      	pop	{r4, r5, r7, pc}
 80140d6:	bf00      	nop
 80140d8:	08023070 	.word	0x08023070
 80140dc:	08023708 	.word	0x08023708
 80140e0:	080230c4 	.word	0x080230c4

080140e4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80140e4:	b580      	push	{r7, lr}
 80140e6:	b082      	sub	sp, #8
 80140e8:	af00      	add	r7, sp, #0
 80140ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d106      	bne.n	8014100 <tcp_rexmit_rto_commit+0x1c>
 80140f2:	4b0d      	ldr	r3, [pc, #52]	; (8014128 <tcp_rexmit_rto_commit+0x44>)
 80140f4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80140f8:	490c      	ldr	r1, [pc, #48]	; (801412c <tcp_rexmit_rto_commit+0x48>)
 80140fa:	480d      	ldr	r0, [pc, #52]	; (8014130 <tcp_rexmit_rto_commit+0x4c>)
 80140fc:	f00c f96e 	bl	80203dc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014106:	2bff      	cmp	r3, #255	; 0xff
 8014108:	d007      	beq.n	801411a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014110:	3301      	adds	r3, #1
 8014112:	b2da      	uxtb	r2, r3
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801411a:	6878      	ldr	r0, [r7, #4]
 801411c:	f7ff fc6a 	bl	80139f4 <tcp_output>
}
 8014120:	bf00      	nop
 8014122:	3708      	adds	r7, #8
 8014124:	46bd      	mov	sp, r7
 8014126:	bd80      	pop	{r7, pc}
 8014128:	08023070 	.word	0x08023070
 801412c:	0802372c 	.word	0x0802372c
 8014130:	080230c4 	.word	0x080230c4

08014134 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8014134:	b580      	push	{r7, lr}
 8014136:	b082      	sub	sp, #8
 8014138:	af00      	add	r7, sp, #0
 801413a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	2b00      	cmp	r3, #0
 8014140:	d106      	bne.n	8014150 <tcp_rexmit_rto+0x1c>
 8014142:	4b0a      	ldr	r3, [pc, #40]	; (801416c <tcp_rexmit_rto+0x38>)
 8014144:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8014148:	4909      	ldr	r1, [pc, #36]	; (8014170 <tcp_rexmit_rto+0x3c>)
 801414a:	480a      	ldr	r0, [pc, #40]	; (8014174 <tcp_rexmit_rto+0x40>)
 801414c:	f00c f946 	bl	80203dc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8014150:	6878      	ldr	r0, [r7, #4]
 8014152:	f7ff ff4d 	bl	8013ff0 <tcp_rexmit_rto_prepare>
 8014156:	4603      	mov	r3, r0
 8014158:	2b00      	cmp	r3, #0
 801415a:	d102      	bne.n	8014162 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801415c:	6878      	ldr	r0, [r7, #4]
 801415e:	f7ff ffc1 	bl	80140e4 <tcp_rexmit_rto_commit>
  }
}
 8014162:	bf00      	nop
 8014164:	3708      	adds	r7, #8
 8014166:	46bd      	mov	sp, r7
 8014168:	bd80      	pop	{r7, pc}
 801416a:	bf00      	nop
 801416c:	08023070 	.word	0x08023070
 8014170:	08023750 	.word	0x08023750
 8014174:	080230c4 	.word	0x080230c4

08014178 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014178:	b590      	push	{r4, r7, lr}
 801417a:	b085      	sub	sp, #20
 801417c:	af00      	add	r7, sp, #0
 801417e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	2b00      	cmp	r3, #0
 8014184:	d106      	bne.n	8014194 <tcp_rexmit+0x1c>
 8014186:	4b2f      	ldr	r3, [pc, #188]	; (8014244 <tcp_rexmit+0xcc>)
 8014188:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801418c:	492e      	ldr	r1, [pc, #184]	; (8014248 <tcp_rexmit+0xd0>)
 801418e:	482f      	ldr	r0, [pc, #188]	; (801424c <tcp_rexmit+0xd4>)
 8014190:	f00c f924 	bl	80203dc <iprintf>

  if (pcb->unacked == NULL) {
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014198:	2b00      	cmp	r3, #0
 801419a:	d102      	bne.n	80141a2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801419c:	f06f 0305 	mvn.w	r3, #5
 80141a0:	e04c      	b.n	801423c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80141a6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80141a8:	68b8      	ldr	r0, [r7, #8]
 80141aa:	f7ff fe19 	bl	8013de0 <tcp_output_segment_busy>
 80141ae:	4603      	mov	r3, r0
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d002      	beq.n	80141ba <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80141b4:	f06f 0305 	mvn.w	r3, #5
 80141b8:	e040      	b.n	801423c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80141ba:	68bb      	ldr	r3, [r7, #8]
 80141bc:	681a      	ldr	r2, [r3, #0]
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	336c      	adds	r3, #108	; 0x6c
 80141c6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80141c8:	e002      	b.n	80141d0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d011      	beq.n	80141fc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	691b      	ldr	r3, [r3, #16]
 80141de:	685b      	ldr	r3, [r3, #4]
 80141e0:	4618      	mov	r0, r3
 80141e2:	f7f8 fbe2 	bl	800c9aa <lwip_htonl>
 80141e6:	4604      	mov	r4, r0
 80141e8:	68bb      	ldr	r3, [r7, #8]
 80141ea:	691b      	ldr	r3, [r3, #16]
 80141ec:	685b      	ldr	r3, [r3, #4]
 80141ee:	4618      	mov	r0, r3
 80141f0:	f7f8 fbdb 	bl	800c9aa <lwip_htonl>
 80141f4:	4603      	mov	r3, r0
 80141f6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	dbe6      	blt.n	80141ca <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	681a      	ldr	r2, [r3, #0]
 8014200:	68bb      	ldr	r3, [r7, #8]
 8014202:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	68ba      	ldr	r2, [r7, #8]
 8014208:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801420a:	68bb      	ldr	r3, [r7, #8]
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	2b00      	cmp	r3, #0
 8014210:	d103      	bne.n	801421a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	2200      	movs	r2, #0
 8014216:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014220:	2bff      	cmp	r3, #255	; 0xff
 8014222:	d007      	beq.n	8014234 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801422a:	3301      	adds	r3, #1
 801422c:	b2da      	uxtb	r2, r3
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	2200      	movs	r2, #0
 8014238:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801423a:	2300      	movs	r3, #0
}
 801423c:	4618      	mov	r0, r3
 801423e:	3714      	adds	r7, #20
 8014240:	46bd      	mov	sp, r7
 8014242:	bd90      	pop	{r4, r7, pc}
 8014244:	08023070 	.word	0x08023070
 8014248:	0802376c 	.word	0x0802376c
 801424c:	080230c4 	.word	0x080230c4

08014250 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8014250:	b580      	push	{r7, lr}
 8014252:	b082      	sub	sp, #8
 8014254:	af00      	add	r7, sp, #0
 8014256:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	2b00      	cmp	r3, #0
 801425c:	d106      	bne.n	801426c <tcp_rexmit_fast+0x1c>
 801425e:	4b2a      	ldr	r3, [pc, #168]	; (8014308 <tcp_rexmit_fast+0xb8>)
 8014260:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8014264:	4929      	ldr	r1, [pc, #164]	; (801430c <tcp_rexmit_fast+0xbc>)
 8014266:	482a      	ldr	r0, [pc, #168]	; (8014310 <tcp_rexmit_fast+0xc0>)
 8014268:	f00c f8b8 	bl	80203dc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014270:	2b00      	cmp	r3, #0
 8014272:	d045      	beq.n	8014300 <tcp_rexmit_fast+0xb0>
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	8b5b      	ldrh	r3, [r3, #26]
 8014278:	f003 0304 	and.w	r3, r3, #4
 801427c:	2b00      	cmp	r3, #0
 801427e:	d13f      	bne.n	8014300 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8014280:	6878      	ldr	r0, [r7, #4]
 8014282:	f7ff ff79 	bl	8014178 <tcp_rexmit>
 8014286:	4603      	mov	r3, r0
 8014288:	2b00      	cmp	r3, #0
 801428a:	d139      	bne.n	8014300 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014298:	4293      	cmp	r3, r2
 801429a:	bf28      	it	cs
 801429c:	4613      	movcs	r3, r2
 801429e:	b29b      	uxth	r3, r3
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	da00      	bge.n	80142a6 <tcp_rexmit_fast+0x56>
 80142a4:	3301      	adds	r3, #1
 80142a6:	105b      	asrs	r3, r3, #1
 80142a8:	b29a      	uxth	r2, r3
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80142b6:	461a      	mov	r2, r3
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80142bc:	005b      	lsls	r3, r3, #1
 80142be:	429a      	cmp	r2, r3
 80142c0:	d206      	bcs.n	80142d0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80142c6:	005b      	lsls	r3, r3, #1
 80142c8:	b29a      	uxth	r2, r3
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80142da:	4619      	mov	r1, r3
 80142dc:	0049      	lsls	r1, r1, #1
 80142de:	440b      	add	r3, r1
 80142e0:	b29b      	uxth	r3, r3
 80142e2:	4413      	add	r3, r2
 80142e4:	b29a      	uxth	r2, r3
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	8b5b      	ldrh	r3, [r3, #26]
 80142f0:	f043 0304 	orr.w	r3, r3, #4
 80142f4:	b29a      	uxth	r2, r3
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	2200      	movs	r2, #0
 80142fe:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8014300:	bf00      	nop
 8014302:	3708      	adds	r7, #8
 8014304:	46bd      	mov	sp, r7
 8014306:	bd80      	pop	{r7, pc}
 8014308:	08023070 	.word	0x08023070
 801430c:	08023784 	.word	0x08023784
 8014310:	080230c4 	.word	0x080230c4

08014314 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8014314:	b580      	push	{r7, lr}
 8014316:	b086      	sub	sp, #24
 8014318:	af00      	add	r7, sp, #0
 801431a:	60f8      	str	r0, [r7, #12]
 801431c:	607b      	str	r3, [r7, #4]
 801431e:	460b      	mov	r3, r1
 8014320:	817b      	strh	r3, [r7, #10]
 8014322:	4613      	mov	r3, r2
 8014324:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8014326:	897a      	ldrh	r2, [r7, #10]
 8014328:	893b      	ldrh	r3, [r7, #8]
 801432a:	4413      	add	r3, r2
 801432c:	b29b      	uxth	r3, r3
 801432e:	3314      	adds	r3, #20
 8014330:	b29b      	uxth	r3, r3
 8014332:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014336:	4619      	mov	r1, r3
 8014338:	2022      	movs	r0, #34	; 0x22
 801433a:	f7fa f9c5 	bl	800e6c8 <pbuf_alloc>
 801433e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014340:	697b      	ldr	r3, [r7, #20]
 8014342:	2b00      	cmp	r3, #0
 8014344:	d04d      	beq.n	80143e2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8014346:	897b      	ldrh	r3, [r7, #10]
 8014348:	3313      	adds	r3, #19
 801434a:	697a      	ldr	r2, [r7, #20]
 801434c:	8952      	ldrh	r2, [r2, #10]
 801434e:	4293      	cmp	r3, r2
 8014350:	db06      	blt.n	8014360 <tcp_output_alloc_header_common+0x4c>
 8014352:	4b26      	ldr	r3, [pc, #152]	; (80143ec <tcp_output_alloc_header_common+0xd8>)
 8014354:	f240 7223 	movw	r2, #1827	; 0x723
 8014358:	4925      	ldr	r1, [pc, #148]	; (80143f0 <tcp_output_alloc_header_common+0xdc>)
 801435a:	4826      	ldr	r0, [pc, #152]	; (80143f4 <tcp_output_alloc_header_common+0xe0>)
 801435c:	f00c f83e 	bl	80203dc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8014360:	697b      	ldr	r3, [r7, #20]
 8014362:	685b      	ldr	r3, [r3, #4]
 8014364:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8014366:	8c3b      	ldrh	r3, [r7, #32]
 8014368:	4618      	mov	r0, r3
 801436a:	f7f8 fb09 	bl	800c980 <lwip_htons>
 801436e:	4603      	mov	r3, r0
 8014370:	461a      	mov	r2, r3
 8014372:	693b      	ldr	r3, [r7, #16]
 8014374:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8014376:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014378:	4618      	mov	r0, r3
 801437a:	f7f8 fb01 	bl	800c980 <lwip_htons>
 801437e:	4603      	mov	r3, r0
 8014380:	461a      	mov	r2, r3
 8014382:	693b      	ldr	r3, [r7, #16]
 8014384:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014386:	693b      	ldr	r3, [r7, #16]
 8014388:	687a      	ldr	r2, [r7, #4]
 801438a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801438c:	68f8      	ldr	r0, [r7, #12]
 801438e:	f7f8 fb0c 	bl	800c9aa <lwip_htonl>
 8014392:	4602      	mov	r2, r0
 8014394:	693b      	ldr	r3, [r7, #16]
 8014396:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014398:	897b      	ldrh	r3, [r7, #10]
 801439a:	089b      	lsrs	r3, r3, #2
 801439c:	b29b      	uxth	r3, r3
 801439e:	3305      	adds	r3, #5
 80143a0:	b29b      	uxth	r3, r3
 80143a2:	031b      	lsls	r3, r3, #12
 80143a4:	b29a      	uxth	r2, r3
 80143a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80143aa:	b29b      	uxth	r3, r3
 80143ac:	4313      	orrs	r3, r2
 80143ae:	b29b      	uxth	r3, r3
 80143b0:	4618      	mov	r0, r3
 80143b2:	f7f8 fae5 	bl	800c980 <lwip_htons>
 80143b6:	4603      	mov	r3, r0
 80143b8:	461a      	mov	r2, r3
 80143ba:	693b      	ldr	r3, [r7, #16]
 80143bc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80143be:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80143c0:	4618      	mov	r0, r3
 80143c2:	f7f8 fadd 	bl	800c980 <lwip_htons>
 80143c6:	4603      	mov	r3, r0
 80143c8:	461a      	mov	r2, r3
 80143ca:	693b      	ldr	r3, [r7, #16]
 80143cc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80143ce:	693b      	ldr	r3, [r7, #16]
 80143d0:	2200      	movs	r2, #0
 80143d2:	741a      	strb	r2, [r3, #16]
 80143d4:	2200      	movs	r2, #0
 80143d6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80143d8:	693b      	ldr	r3, [r7, #16]
 80143da:	2200      	movs	r2, #0
 80143dc:	749a      	strb	r2, [r3, #18]
 80143de:	2200      	movs	r2, #0
 80143e0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80143e2:	697b      	ldr	r3, [r7, #20]
}
 80143e4:	4618      	mov	r0, r3
 80143e6:	3718      	adds	r7, #24
 80143e8:	46bd      	mov	sp, r7
 80143ea:	bd80      	pop	{r7, pc}
 80143ec:	08023070 	.word	0x08023070
 80143f0:	080237a4 	.word	0x080237a4
 80143f4:	080230c4 	.word	0x080230c4

080143f8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80143f8:	b5b0      	push	{r4, r5, r7, lr}
 80143fa:	b08a      	sub	sp, #40	; 0x28
 80143fc:	af04      	add	r7, sp, #16
 80143fe:	60f8      	str	r0, [r7, #12]
 8014400:	607b      	str	r3, [r7, #4]
 8014402:	460b      	mov	r3, r1
 8014404:	817b      	strh	r3, [r7, #10]
 8014406:	4613      	mov	r3, r2
 8014408:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801440a:	68fb      	ldr	r3, [r7, #12]
 801440c:	2b00      	cmp	r3, #0
 801440e:	d106      	bne.n	801441e <tcp_output_alloc_header+0x26>
 8014410:	4b15      	ldr	r3, [pc, #84]	; (8014468 <tcp_output_alloc_header+0x70>)
 8014412:	f240 7242 	movw	r2, #1858	; 0x742
 8014416:	4915      	ldr	r1, [pc, #84]	; (801446c <tcp_output_alloc_header+0x74>)
 8014418:	4815      	ldr	r0, [pc, #84]	; (8014470 <tcp_output_alloc_header+0x78>)
 801441a:	f00b ffdf 	bl	80203dc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801441e:	68fb      	ldr	r3, [r7, #12]
 8014420:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	8adb      	ldrh	r3, [r3, #22]
 8014426:	68fa      	ldr	r2, [r7, #12]
 8014428:	8b12      	ldrh	r2, [r2, #24]
 801442a:	68f9      	ldr	r1, [r7, #12]
 801442c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801442e:	893d      	ldrh	r5, [r7, #8]
 8014430:	897c      	ldrh	r4, [r7, #10]
 8014432:	9103      	str	r1, [sp, #12]
 8014434:	2110      	movs	r1, #16
 8014436:	9102      	str	r1, [sp, #8]
 8014438:	9201      	str	r2, [sp, #4]
 801443a:	9300      	str	r3, [sp, #0]
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	462a      	mov	r2, r5
 8014440:	4621      	mov	r1, r4
 8014442:	f7ff ff67 	bl	8014314 <tcp_output_alloc_header_common>
 8014446:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014448:	697b      	ldr	r3, [r7, #20]
 801444a:	2b00      	cmp	r3, #0
 801444c:	d006      	beq.n	801445c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014452:	68fa      	ldr	r2, [r7, #12]
 8014454:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014456:	441a      	add	r2, r3
 8014458:	68fb      	ldr	r3, [r7, #12]
 801445a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801445c:	697b      	ldr	r3, [r7, #20]
}
 801445e:	4618      	mov	r0, r3
 8014460:	3718      	adds	r7, #24
 8014462:	46bd      	mov	sp, r7
 8014464:	bdb0      	pop	{r4, r5, r7, pc}
 8014466:	bf00      	nop
 8014468:	08023070 	.word	0x08023070
 801446c:	080237d4 	.word	0x080237d4
 8014470:	080230c4 	.word	0x080230c4

08014474 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014474:	b580      	push	{r7, lr}
 8014476:	b088      	sub	sp, #32
 8014478:	af00      	add	r7, sp, #0
 801447a:	60f8      	str	r0, [r7, #12]
 801447c:	60b9      	str	r1, [r7, #8]
 801447e:	4611      	mov	r1, r2
 8014480:	461a      	mov	r2, r3
 8014482:	460b      	mov	r3, r1
 8014484:	71fb      	strb	r3, [r7, #7]
 8014486:	4613      	mov	r3, r2
 8014488:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801448a:	2300      	movs	r3, #0
 801448c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801448e:	68bb      	ldr	r3, [r7, #8]
 8014490:	2b00      	cmp	r3, #0
 8014492:	d106      	bne.n	80144a2 <tcp_output_fill_options+0x2e>
 8014494:	4b13      	ldr	r3, [pc, #76]	; (80144e4 <tcp_output_fill_options+0x70>)
 8014496:	f240 7256 	movw	r2, #1878	; 0x756
 801449a:	4913      	ldr	r1, [pc, #76]	; (80144e8 <tcp_output_fill_options+0x74>)
 801449c:	4813      	ldr	r0, [pc, #76]	; (80144ec <tcp_output_fill_options+0x78>)
 801449e:	f00b ff9d 	bl	80203dc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80144a2:	68bb      	ldr	r3, [r7, #8]
 80144a4:	685b      	ldr	r3, [r3, #4]
 80144a6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80144a8:	69bb      	ldr	r3, [r7, #24]
 80144aa:	3314      	adds	r3, #20
 80144ac:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80144ae:	69bb      	ldr	r3, [r7, #24]
 80144b0:	f103 0214 	add.w	r2, r3, #20
 80144b4:	8bfb      	ldrh	r3, [r7, #30]
 80144b6:	009b      	lsls	r3, r3, #2
 80144b8:	4619      	mov	r1, r3
 80144ba:	79fb      	ldrb	r3, [r7, #7]
 80144bc:	009b      	lsls	r3, r3, #2
 80144be:	f003 0304 	and.w	r3, r3, #4
 80144c2:	440b      	add	r3, r1
 80144c4:	4413      	add	r3, r2
 80144c6:	697a      	ldr	r2, [r7, #20]
 80144c8:	429a      	cmp	r2, r3
 80144ca:	d006      	beq.n	80144da <tcp_output_fill_options+0x66>
 80144cc:	4b05      	ldr	r3, [pc, #20]	; (80144e4 <tcp_output_fill_options+0x70>)
 80144ce:	f240 7275 	movw	r2, #1909	; 0x775
 80144d2:	4907      	ldr	r1, [pc, #28]	; (80144f0 <tcp_output_fill_options+0x7c>)
 80144d4:	4805      	ldr	r0, [pc, #20]	; (80144ec <tcp_output_fill_options+0x78>)
 80144d6:	f00b ff81 	bl	80203dc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80144da:	bf00      	nop
 80144dc:	3720      	adds	r7, #32
 80144de:	46bd      	mov	sp, r7
 80144e0:	bd80      	pop	{r7, pc}
 80144e2:	bf00      	nop
 80144e4:	08023070 	.word	0x08023070
 80144e8:	080237fc 	.word	0x080237fc
 80144ec:	080230c4 	.word	0x080230c4
 80144f0:	080236f4 	.word	0x080236f4

080144f4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80144f4:	b580      	push	{r7, lr}
 80144f6:	b08a      	sub	sp, #40	; 0x28
 80144f8:	af04      	add	r7, sp, #16
 80144fa:	60f8      	str	r0, [r7, #12]
 80144fc:	60b9      	str	r1, [r7, #8]
 80144fe:	607a      	str	r2, [r7, #4]
 8014500:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8014502:	68bb      	ldr	r3, [r7, #8]
 8014504:	2b00      	cmp	r3, #0
 8014506:	d106      	bne.n	8014516 <tcp_output_control_segment+0x22>
 8014508:	4b20      	ldr	r3, [pc, #128]	; (801458c <tcp_output_control_segment+0x98>)
 801450a:	f240 7287 	movw	r2, #1927	; 0x787
 801450e:	4920      	ldr	r1, [pc, #128]	; (8014590 <tcp_output_control_segment+0x9c>)
 8014510:	4820      	ldr	r0, [pc, #128]	; (8014594 <tcp_output_control_segment+0xa0>)
 8014512:	f00b ff63 	bl	80203dc <iprintf>

  netif = tcp_route(pcb, src, dst);
 8014516:	683a      	ldr	r2, [r7, #0]
 8014518:	6879      	ldr	r1, [r7, #4]
 801451a:	68f8      	ldr	r0, [r7, #12]
 801451c:	f7fe fefe 	bl	801331c <tcp_route>
 8014520:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8014522:	693b      	ldr	r3, [r7, #16]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d102      	bne.n	801452e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014528:	23fc      	movs	r3, #252	; 0xfc
 801452a:	75fb      	strb	r3, [r7, #23]
 801452c:	e024      	b.n	8014578 <tcp_output_control_segment+0x84>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801452e:	68fb      	ldr	r3, [r7, #12]
 8014530:	2b00      	cmp	r3, #0
 8014532:	d006      	beq.n	8014542 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	7adb      	ldrb	r3, [r3, #11]
 8014538:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	7a9b      	ldrb	r3, [r3, #10]
 801453e:	757b      	strb	r3, [r7, #21]
 8014540:	e003      	b.n	801454a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8014542:	23ff      	movs	r3, #255	; 0xff
 8014544:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8014546:	2300      	movs	r3, #0
 8014548:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
 801454a:	4b13      	ldr	r3, [pc, #76]	; (8014598 <tcp_output_control_segment+0xa4>)
 801454c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8014550:	3301      	adds	r3, #1
 8014552:	b29a      	uxth	r2, r3
 8014554:	4b10      	ldr	r3, [pc, #64]	; (8014598 <tcp_output_control_segment+0xa4>)
 8014556:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801455a:	7dba      	ldrb	r2, [r7, #22]
 801455c:	693b      	ldr	r3, [r7, #16]
 801455e:	9302      	str	r3, [sp, #8]
 8014560:	2306      	movs	r3, #6
 8014562:	9301      	str	r3, [sp, #4]
 8014564:	7d7b      	ldrb	r3, [r7, #21]
 8014566:	9300      	str	r3, [sp, #0]
 8014568:	4613      	mov	r3, r2
 801456a:	683a      	ldr	r2, [r7, #0]
 801456c:	6879      	ldr	r1, [r7, #4]
 801456e:	68b8      	ldr	r0, [r7, #8]
 8014570:	f005 ffea 	bl	801a548 <ip4_output_if>
 8014574:	4603      	mov	r3, r0
 8014576:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014578:	68b8      	ldr	r0, [r7, #8]
 801457a:	f7fa fb89 	bl	800ec90 <pbuf_free>
  return err;
 801457e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014582:	4618      	mov	r0, r3
 8014584:	3718      	adds	r7, #24
 8014586:	46bd      	mov	sp, r7
 8014588:	bd80      	pop	{r7, pc}
 801458a:	bf00      	nop
 801458c:	08023070 	.word	0x08023070
 8014590:	08023824 	.word	0x08023824
 8014594:	080230c4 	.word	0x080230c4
 8014598:	2000a3ec 	.word	0x2000a3ec

0801459c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801459c:	b590      	push	{r4, r7, lr}
 801459e:	b08b      	sub	sp, #44	; 0x2c
 80145a0:	af04      	add	r7, sp, #16
 80145a2:	60f8      	str	r0, [r7, #12]
 80145a4:	60b9      	str	r1, [r7, #8]
 80145a6:	607a      	str	r2, [r7, #4]
 80145a8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80145aa:	683b      	ldr	r3, [r7, #0]
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d106      	bne.n	80145be <tcp_rst+0x22>
 80145b0:	4b1f      	ldr	r3, [pc, #124]	; (8014630 <tcp_rst+0x94>)
 80145b2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80145b6:	491f      	ldr	r1, [pc, #124]	; (8014634 <tcp_rst+0x98>)
 80145b8:	481f      	ldr	r0, [pc, #124]	; (8014638 <tcp_rst+0x9c>)
 80145ba:	f00b ff0f 	bl	80203dc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80145be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d106      	bne.n	80145d2 <tcp_rst+0x36>
 80145c4:	4b1a      	ldr	r3, [pc, #104]	; (8014630 <tcp_rst+0x94>)
 80145c6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80145ca:	491c      	ldr	r1, [pc, #112]	; (801463c <tcp_rst+0xa0>)
 80145cc:	481a      	ldr	r0, [pc, #104]	; (8014638 <tcp_rst+0x9c>)
 80145ce:	f00b ff05 	bl	80203dc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80145d2:	2300      	movs	r3, #0
 80145d4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80145d6:	f246 0308 	movw	r3, #24584	; 0x6008
 80145da:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80145dc:	7dfb      	ldrb	r3, [r7, #23]
 80145de:	b29c      	uxth	r4, r3
 80145e0:	68b8      	ldr	r0, [r7, #8]
 80145e2:	f7f8 f9e2 	bl	800c9aa <lwip_htonl>
 80145e6:	4602      	mov	r2, r0
 80145e8:	8abb      	ldrh	r3, [r7, #20]
 80145ea:	9303      	str	r3, [sp, #12]
 80145ec:	2314      	movs	r3, #20
 80145ee:	9302      	str	r3, [sp, #8]
 80145f0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80145f2:	9301      	str	r3, [sp, #4]
 80145f4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80145f6:	9300      	str	r3, [sp, #0]
 80145f8:	4613      	mov	r3, r2
 80145fa:	2200      	movs	r2, #0
 80145fc:	4621      	mov	r1, r4
 80145fe:	6878      	ldr	r0, [r7, #4]
 8014600:	f7ff fe88 	bl	8014314 <tcp_output_alloc_header_common>
 8014604:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8014606:	693b      	ldr	r3, [r7, #16]
 8014608:	2b00      	cmp	r3, #0
 801460a:	d00c      	beq.n	8014626 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801460c:	7dfb      	ldrb	r3, [r7, #23]
 801460e:	2200      	movs	r2, #0
 8014610:	6939      	ldr	r1, [r7, #16]
 8014612:	68f8      	ldr	r0, [r7, #12]
 8014614:	f7ff ff2e 	bl	8014474 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801461a:	683a      	ldr	r2, [r7, #0]
 801461c:	6939      	ldr	r1, [r7, #16]
 801461e:	68f8      	ldr	r0, [r7, #12]
 8014620:	f7ff ff68 	bl	80144f4 <tcp_output_control_segment>
 8014624:	e000      	b.n	8014628 <tcp_rst+0x8c>
    return;
 8014626:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014628:	371c      	adds	r7, #28
 801462a:	46bd      	mov	sp, r7
 801462c:	bd90      	pop	{r4, r7, pc}
 801462e:	bf00      	nop
 8014630:	08023070 	.word	0x08023070
 8014634:	08023850 	.word	0x08023850
 8014638:	080230c4 	.word	0x080230c4
 801463c:	0802386c 	.word	0x0802386c

08014640 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014640:	b590      	push	{r4, r7, lr}
 8014642:	b087      	sub	sp, #28
 8014644:	af00      	add	r7, sp, #0
 8014646:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014648:	2300      	movs	r3, #0
 801464a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801464c:	2300      	movs	r3, #0
 801464e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	2b00      	cmp	r3, #0
 8014654:	d106      	bne.n	8014664 <tcp_send_empty_ack+0x24>
 8014656:	4b28      	ldr	r3, [pc, #160]	; (80146f8 <tcp_send_empty_ack+0xb8>)
 8014658:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801465c:	4927      	ldr	r1, [pc, #156]	; (80146fc <tcp_send_empty_ack+0xbc>)
 801465e:	4828      	ldr	r0, [pc, #160]	; (8014700 <tcp_send_empty_ack+0xc0>)
 8014660:	f00b febc 	bl	80203dc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014664:	7dfb      	ldrb	r3, [r7, #23]
 8014666:	009b      	lsls	r3, r3, #2
 8014668:	b2db      	uxtb	r3, r3
 801466a:	f003 0304 	and.w	r3, r3, #4
 801466e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014670:	7d7b      	ldrb	r3, [r7, #21]
 8014672:	b29c      	uxth	r4, r3
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014678:	4618      	mov	r0, r3
 801467a:	f7f8 f996 	bl	800c9aa <lwip_htonl>
 801467e:	4603      	mov	r3, r0
 8014680:	2200      	movs	r2, #0
 8014682:	4621      	mov	r1, r4
 8014684:	6878      	ldr	r0, [r7, #4]
 8014686:	f7ff feb7 	bl	80143f8 <tcp_output_alloc_header>
 801468a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801468c:	693b      	ldr	r3, [r7, #16]
 801468e:	2b00      	cmp	r3, #0
 8014690:	d109      	bne.n	80146a6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	8b5b      	ldrh	r3, [r3, #26]
 8014696:	f043 0303 	orr.w	r3, r3, #3
 801469a:	b29a      	uxth	r2, r3
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80146a0:	f06f 0301 	mvn.w	r3, #1
 80146a4:	e023      	b.n	80146ee <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80146a6:	7dbb      	ldrb	r3, [r7, #22]
 80146a8:	7dfa      	ldrb	r2, [r7, #23]
 80146aa:	6939      	ldr	r1, [r7, #16]
 80146ac:	6878      	ldr	r0, [r7, #4]
 80146ae:	f7ff fee1 	bl	8014474 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80146b2:	687a      	ldr	r2, [r7, #4]
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	3304      	adds	r3, #4
 80146b8:	6939      	ldr	r1, [r7, #16]
 80146ba:	6878      	ldr	r0, [r7, #4]
 80146bc:	f7ff ff1a 	bl	80144f4 <tcp_output_control_segment>
 80146c0:	4603      	mov	r3, r0
 80146c2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80146c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d007      	beq.n	80146dc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	8b5b      	ldrh	r3, [r3, #26]
 80146d0:	f043 0303 	orr.w	r3, r3, #3
 80146d4:	b29a      	uxth	r2, r3
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	835a      	strh	r2, [r3, #26]
 80146da:	e006      	b.n	80146ea <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	8b5b      	ldrh	r3, [r3, #26]
 80146e0:	f023 0303 	bic.w	r3, r3, #3
 80146e4:	b29a      	uxth	r2, r3
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80146ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80146ee:	4618      	mov	r0, r3
 80146f0:	371c      	adds	r7, #28
 80146f2:	46bd      	mov	sp, r7
 80146f4:	bd90      	pop	{r4, r7, pc}
 80146f6:	bf00      	nop
 80146f8:	08023070 	.word	0x08023070
 80146fc:	08023888 	.word	0x08023888
 8014700:	080230c4 	.word	0x080230c4

08014704 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014704:	b590      	push	{r4, r7, lr}
 8014706:	b085      	sub	sp, #20
 8014708:	af00      	add	r7, sp, #0
 801470a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801470c:	2300      	movs	r3, #0
 801470e:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	2b00      	cmp	r3, #0
 8014714:	d106      	bne.n	8014724 <tcp_keepalive+0x20>
 8014716:	4b18      	ldr	r3, [pc, #96]	; (8014778 <tcp_keepalive+0x74>)
 8014718:	f640 0224 	movw	r2, #2084	; 0x824
 801471c:	4917      	ldr	r1, [pc, #92]	; (801477c <tcp_keepalive+0x78>)
 801471e:	4818      	ldr	r0, [pc, #96]	; (8014780 <tcp_keepalive+0x7c>)
 8014720:	f00b fe5c 	bl	80203dc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014724:	7abb      	ldrb	r3, [r7, #10]
 8014726:	b29c      	uxth	r4, r3
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801472c:	3b01      	subs	r3, #1
 801472e:	4618      	mov	r0, r3
 8014730:	f7f8 f93b 	bl	800c9aa <lwip_htonl>
 8014734:	4603      	mov	r3, r0
 8014736:	2200      	movs	r2, #0
 8014738:	4621      	mov	r1, r4
 801473a:	6878      	ldr	r0, [r7, #4]
 801473c:	f7ff fe5c 	bl	80143f8 <tcp_output_alloc_header>
 8014740:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	2b00      	cmp	r3, #0
 8014746:	d102      	bne.n	801474e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014748:	f04f 33ff 	mov.w	r3, #4294967295
 801474c:	e010      	b.n	8014770 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801474e:	7abb      	ldrb	r3, [r7, #10]
 8014750:	2200      	movs	r2, #0
 8014752:	68f9      	ldr	r1, [r7, #12]
 8014754:	6878      	ldr	r0, [r7, #4]
 8014756:	f7ff fe8d 	bl	8014474 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801475a:	687a      	ldr	r2, [r7, #4]
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	3304      	adds	r3, #4
 8014760:	68f9      	ldr	r1, [r7, #12]
 8014762:	6878      	ldr	r0, [r7, #4]
 8014764:	f7ff fec6 	bl	80144f4 <tcp_output_control_segment>
 8014768:	4603      	mov	r3, r0
 801476a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801476c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014770:	4618      	mov	r0, r3
 8014772:	3714      	adds	r7, #20
 8014774:	46bd      	mov	sp, r7
 8014776:	bd90      	pop	{r4, r7, pc}
 8014778:	08023070 	.word	0x08023070
 801477c:	080238a8 	.word	0x080238a8
 8014780:	080230c4 	.word	0x080230c4

08014784 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014784:	b590      	push	{r4, r7, lr}
 8014786:	b08b      	sub	sp, #44	; 0x2c
 8014788:	af00      	add	r7, sp, #0
 801478a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801478c:	2300      	movs	r3, #0
 801478e:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	2b00      	cmp	r3, #0
 8014794:	d106      	bne.n	80147a4 <tcp_zero_window_probe+0x20>
 8014796:	4b4d      	ldr	r3, [pc, #308]	; (80148cc <tcp_zero_window_probe+0x148>)
 8014798:	f640 024f 	movw	r2, #2127	; 0x84f
 801479c:	494c      	ldr	r1, [pc, #304]	; (80148d0 <tcp_zero_window_probe+0x14c>)
 801479e:	484d      	ldr	r0, [pc, #308]	; (80148d4 <tcp_zero_window_probe+0x150>)
 80147a0:	f00b fe1c 	bl	80203dc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80147a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (seg == NULL) {
 80147aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d101      	bne.n	80147b4 <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80147b0:	2300      	movs	r3, #0
 80147b2:	e087      	b.n	80148c4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80147ba:	2bff      	cmp	r3, #255	; 0xff
 80147bc:	d007      	beq.n	80147ce <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80147c4:	3301      	adds	r3, #1
 80147c6:	b2da      	uxtb	r2, r3
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80147ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147d0:	691b      	ldr	r3, [r3, #16]
 80147d2:	899b      	ldrh	r3, [r3, #12]
 80147d4:	b29b      	uxth	r3, r3
 80147d6:	4618      	mov	r0, r3
 80147d8:	f7f8 f8d2 	bl	800c980 <lwip_htons>
 80147dc:	4603      	mov	r3, r0
 80147de:	b2db      	uxtb	r3, r3
 80147e0:	f003 0301 	and.w	r3, r3, #1
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d005      	beq.n	80147f4 <tcp_zero_window_probe+0x70>
 80147e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147ea:	891b      	ldrh	r3, [r3, #8]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d101      	bne.n	80147f4 <tcp_zero_window_probe+0x70>
 80147f0:	2301      	movs	r3, #1
 80147f2:	e000      	b.n	80147f6 <tcp_zero_window_probe+0x72>
 80147f4:	2300      	movs	r3, #0
 80147f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80147fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80147fe:	2b00      	cmp	r3, #0
 8014800:	bf0c      	ite	eq
 8014802:	2301      	moveq	r3, #1
 8014804:	2300      	movne	r3, #0
 8014806:	b2db      	uxtb	r3, r3
 8014808:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801480a:	7cfb      	ldrb	r3, [r7, #19]
 801480c:	b299      	uxth	r1, r3
 801480e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014810:	691b      	ldr	r3, [r3, #16]
 8014812:	685b      	ldr	r3, [r3, #4]
 8014814:	8c3a      	ldrh	r2, [r7, #32]
 8014816:	6878      	ldr	r0, [r7, #4]
 8014818:	f7ff fdee 	bl	80143f8 <tcp_output_alloc_header>
 801481c:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 801481e:	69fb      	ldr	r3, [r7, #28]
 8014820:	2b00      	cmp	r3, #0
 8014822:	d102      	bne.n	801482a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014824:	f04f 33ff 	mov.w	r3, #4294967295
 8014828:	e04c      	b.n	80148c4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801482a:	69fb      	ldr	r3, [r7, #28]
 801482c:	685b      	ldr	r3, [r3, #4]
 801482e:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 8014830:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014834:	2b00      	cmp	r3, #0
 8014836:	d011      	beq.n	801485c <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014838:	69bb      	ldr	r3, [r7, #24]
 801483a:	899b      	ldrh	r3, [r3, #12]
 801483c:	b29b      	uxth	r3, r3
 801483e:	b21b      	sxth	r3, r3
 8014840:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014844:	b21c      	sxth	r4, r3
 8014846:	2011      	movs	r0, #17
 8014848:	f7f8 f89a 	bl	800c980 <lwip_htons>
 801484c:	4603      	mov	r3, r0
 801484e:	b21b      	sxth	r3, r3
 8014850:	4323      	orrs	r3, r4
 8014852:	b21b      	sxth	r3, r3
 8014854:	b29a      	uxth	r2, r3
 8014856:	69bb      	ldr	r3, [r7, #24]
 8014858:	819a      	strh	r2, [r3, #12]
 801485a:	e010      	b.n	801487e <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801485c:	69fb      	ldr	r3, [r7, #28]
 801485e:	685b      	ldr	r3, [r3, #4]
 8014860:	3314      	adds	r3, #20
 8014862:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014866:	6858      	ldr	r0, [r3, #4]
 8014868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801486a:	685b      	ldr	r3, [r3, #4]
 801486c:	891a      	ldrh	r2, [r3, #8]
 801486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014870:	891b      	ldrh	r3, [r3, #8]
 8014872:	1ad3      	subs	r3, r2, r3
 8014874:	b29b      	uxth	r3, r3
 8014876:	2201      	movs	r2, #1
 8014878:	6979      	ldr	r1, [r7, #20]
 801487a:	f7fa fc0f 	bl	800f09c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014880:	691b      	ldr	r3, [r3, #16]
 8014882:	685b      	ldr	r3, [r3, #4]
 8014884:	4618      	mov	r0, r3
 8014886:	f7f8 f890 	bl	800c9aa <lwip_htonl>
 801488a:	4603      	mov	r3, r0
 801488c:	3301      	adds	r3, #1
 801488e:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	1ad3      	subs	r3, r2, r3
 8014898:	2b00      	cmp	r3, #0
 801489a:	da02      	bge.n	80148a2 <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	68fa      	ldr	r2, [r7, #12]
 80148a0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80148a2:	7cfb      	ldrb	r3, [r7, #19]
 80148a4:	2200      	movs	r2, #0
 80148a6:	69f9      	ldr	r1, [r7, #28]
 80148a8:	6878      	ldr	r0, [r7, #4]
 80148aa:	f7ff fde3 	bl	8014474 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80148ae:	687a      	ldr	r2, [r7, #4]
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	3304      	adds	r3, #4
 80148b4:	69f9      	ldr	r1, [r7, #28]
 80148b6:	6878      	ldr	r0, [r7, #4]
 80148b8:	f7ff fe1c 	bl	80144f4 <tcp_output_control_segment>
 80148bc:	4603      	mov	r3, r0
 80148be:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80148c0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80148c4:	4618      	mov	r0, r3
 80148c6:	372c      	adds	r7, #44	; 0x2c
 80148c8:	46bd      	mov	sp, r7
 80148ca:	bd90      	pop	{r4, r7, pc}
 80148cc:	08023070 	.word	0x08023070
 80148d0:	080238c4 	.word	0x080238c4
 80148d4:	080230c4 	.word	0x080230c4

080148d8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80148d8:	b580      	push	{r7, lr}
 80148da:	b082      	sub	sp, #8
 80148dc:	af00      	add	r7, sp, #0
 80148de:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80148e0:	f7fa fe34 	bl	800f54c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80148e4:	4b0a      	ldr	r3, [pc, #40]	; (8014910 <tcpip_tcp_timer+0x38>)
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d103      	bne.n	80148f4 <tcpip_tcp_timer+0x1c>
 80148ec:	4b09      	ldr	r3, [pc, #36]	; (8014914 <tcpip_tcp_timer+0x3c>)
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d005      	beq.n	8014900 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80148f4:	2200      	movs	r2, #0
 80148f6:	4908      	ldr	r1, [pc, #32]	; (8014918 <tcpip_tcp_timer+0x40>)
 80148f8:	20fa      	movs	r0, #250	; 0xfa
 80148fa:	f000 f8f3 	bl	8014ae4 <sys_timeout>
 80148fe:	e003      	b.n	8014908 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014900:	4b06      	ldr	r3, [pc, #24]	; (801491c <tcpip_tcp_timer+0x44>)
 8014902:	2200      	movs	r2, #0
 8014904:	601a      	str	r2, [r3, #0]
  }
}
 8014906:	bf00      	nop
 8014908:	bf00      	nop
 801490a:	3708      	adds	r7, #8
 801490c:	46bd      	mov	sp, r7
 801490e:	bd80      	pop	{r7, pc}
 8014910:	2000a514 	.word	0x2000a514
 8014914:	2000a524 	.word	0x2000a524
 8014918:	080148d9 	.word	0x080148d9
 801491c:	20006884 	.word	0x20006884

08014920 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014920:	b580      	push	{r7, lr}
 8014922:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014924:	4b0a      	ldr	r3, [pc, #40]	; (8014950 <tcp_timer_needed+0x30>)
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	2b00      	cmp	r3, #0
 801492a:	d10f      	bne.n	801494c <tcp_timer_needed+0x2c>
 801492c:	4b09      	ldr	r3, [pc, #36]	; (8014954 <tcp_timer_needed+0x34>)
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	2b00      	cmp	r3, #0
 8014932:	d103      	bne.n	801493c <tcp_timer_needed+0x1c>
 8014934:	4b08      	ldr	r3, [pc, #32]	; (8014958 <tcp_timer_needed+0x38>)
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	2b00      	cmp	r3, #0
 801493a:	d007      	beq.n	801494c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801493c:	4b04      	ldr	r3, [pc, #16]	; (8014950 <tcp_timer_needed+0x30>)
 801493e:	2201      	movs	r2, #1
 8014940:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014942:	2200      	movs	r2, #0
 8014944:	4905      	ldr	r1, [pc, #20]	; (801495c <tcp_timer_needed+0x3c>)
 8014946:	20fa      	movs	r0, #250	; 0xfa
 8014948:	f000 f8cc 	bl	8014ae4 <sys_timeout>
  }
}
 801494c:	bf00      	nop
 801494e:	bd80      	pop	{r7, pc}
 8014950:	20006884 	.word	0x20006884
 8014954:	2000a514 	.word	0x2000a514
 8014958:	2000a524 	.word	0x2000a524
 801495c:	080148d9 	.word	0x080148d9

08014960 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014960:	b580      	push	{r7, lr}
 8014962:	b086      	sub	sp, #24
 8014964:	af00      	add	r7, sp, #0
 8014966:	60f8      	str	r0, [r7, #12]
 8014968:	60b9      	str	r1, [r7, #8]
 801496a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801496c:	200b      	movs	r0, #11
 801496e:	f7f9 f957 	bl	800dc20 <memp_malloc>
 8014972:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014974:	693b      	ldr	r3, [r7, #16]
 8014976:	2b00      	cmp	r3, #0
 8014978:	d109      	bne.n	801498e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801497a:	693b      	ldr	r3, [r7, #16]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d151      	bne.n	8014a24 <sys_timeout_abs+0xc4>
 8014980:	4b2a      	ldr	r3, [pc, #168]	; (8014a2c <sys_timeout_abs+0xcc>)
 8014982:	22be      	movs	r2, #190	; 0xbe
 8014984:	492a      	ldr	r1, [pc, #168]	; (8014a30 <sys_timeout_abs+0xd0>)
 8014986:	482b      	ldr	r0, [pc, #172]	; (8014a34 <sys_timeout_abs+0xd4>)
 8014988:	f00b fd28 	bl	80203dc <iprintf>
    return;
 801498c:	e04a      	b.n	8014a24 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801498e:	693b      	ldr	r3, [r7, #16]
 8014990:	2200      	movs	r2, #0
 8014992:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014994:	693b      	ldr	r3, [r7, #16]
 8014996:	68ba      	ldr	r2, [r7, #8]
 8014998:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801499a:	693b      	ldr	r3, [r7, #16]
 801499c:	687a      	ldr	r2, [r7, #4]
 801499e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80149a0:	693b      	ldr	r3, [r7, #16]
 80149a2:	68fa      	ldr	r2, [r7, #12]
 80149a4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80149a6:	4b24      	ldr	r3, [pc, #144]	; (8014a38 <sys_timeout_abs+0xd8>)
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d103      	bne.n	80149b6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80149ae:	4a22      	ldr	r2, [pc, #136]	; (8014a38 <sys_timeout_abs+0xd8>)
 80149b0:	693b      	ldr	r3, [r7, #16]
 80149b2:	6013      	str	r3, [r2, #0]
    return;
 80149b4:	e037      	b.n	8014a26 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80149b6:	693b      	ldr	r3, [r7, #16]
 80149b8:	685a      	ldr	r2, [r3, #4]
 80149ba:	4b1f      	ldr	r3, [pc, #124]	; (8014a38 <sys_timeout_abs+0xd8>)
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	685b      	ldr	r3, [r3, #4]
 80149c0:	1ad3      	subs	r3, r2, r3
 80149c2:	0fdb      	lsrs	r3, r3, #31
 80149c4:	f003 0301 	and.w	r3, r3, #1
 80149c8:	b2db      	uxtb	r3, r3
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d007      	beq.n	80149de <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80149ce:	4b1a      	ldr	r3, [pc, #104]	; (8014a38 <sys_timeout_abs+0xd8>)
 80149d0:	681a      	ldr	r2, [r3, #0]
 80149d2:	693b      	ldr	r3, [r7, #16]
 80149d4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80149d6:	4a18      	ldr	r2, [pc, #96]	; (8014a38 <sys_timeout_abs+0xd8>)
 80149d8:	693b      	ldr	r3, [r7, #16]
 80149da:	6013      	str	r3, [r2, #0]
 80149dc:	e023      	b.n	8014a26 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80149de:	4b16      	ldr	r3, [pc, #88]	; (8014a38 <sys_timeout_abs+0xd8>)
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	617b      	str	r3, [r7, #20]
 80149e4:	e01a      	b.n	8014a1c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80149e6:	697b      	ldr	r3, [r7, #20]
 80149e8:	681b      	ldr	r3, [r3, #0]
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d00b      	beq.n	8014a06 <sys_timeout_abs+0xa6>
 80149ee:	693b      	ldr	r3, [r7, #16]
 80149f0:	685a      	ldr	r2, [r3, #4]
 80149f2:	697b      	ldr	r3, [r7, #20]
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	685b      	ldr	r3, [r3, #4]
 80149f8:	1ad3      	subs	r3, r2, r3
 80149fa:	0fdb      	lsrs	r3, r3, #31
 80149fc:	f003 0301 	and.w	r3, r3, #1
 8014a00:	b2db      	uxtb	r3, r3
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d007      	beq.n	8014a16 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014a06:	697b      	ldr	r3, [r7, #20]
 8014a08:	681a      	ldr	r2, [r3, #0]
 8014a0a:	693b      	ldr	r3, [r7, #16]
 8014a0c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014a0e:	697b      	ldr	r3, [r7, #20]
 8014a10:	693a      	ldr	r2, [r7, #16]
 8014a12:	601a      	str	r2, [r3, #0]
        break;
 8014a14:	e007      	b.n	8014a26 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014a16:	697b      	ldr	r3, [r7, #20]
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	617b      	str	r3, [r7, #20]
 8014a1c:	697b      	ldr	r3, [r7, #20]
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d1e1      	bne.n	80149e6 <sys_timeout_abs+0x86>
 8014a22:	e000      	b.n	8014a26 <sys_timeout_abs+0xc6>
    return;
 8014a24:	bf00      	nop
      }
    }
  }
}
 8014a26:	3718      	adds	r7, #24
 8014a28:	46bd      	mov	sp, r7
 8014a2a:	bd80      	pop	{r7, pc}
 8014a2c:	080238e8 	.word	0x080238e8
 8014a30:	0802391c 	.word	0x0802391c
 8014a34:	0802395c 	.word	0x0802395c
 8014a38:	2000687c 	.word	0x2000687c

08014a3c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014a3c:	b580      	push	{r7, lr}
 8014a3e:	b086      	sub	sp, #24
 8014a40:	af00      	add	r7, sp, #0
 8014a42:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014a48:	697b      	ldr	r3, [r7, #20]
 8014a4a:	685b      	ldr	r3, [r3, #4]
 8014a4c:	4798      	blx	r3

  now = sys_now();
 8014a4e:	f7f3 fe37 	bl	80086c0 <sys_now>
 8014a52:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014a54:	697b      	ldr	r3, [r7, #20]
 8014a56:	681a      	ldr	r2, [r3, #0]
 8014a58:	4b0f      	ldr	r3, [pc, #60]	; (8014a98 <lwip_cyclic_timer+0x5c>)
 8014a5a:	681b      	ldr	r3, [r3, #0]
 8014a5c:	4413      	add	r3, r2
 8014a5e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014a60:	68fa      	ldr	r2, [r7, #12]
 8014a62:	693b      	ldr	r3, [r7, #16]
 8014a64:	1ad3      	subs	r3, r2, r3
 8014a66:	0fdb      	lsrs	r3, r3, #31
 8014a68:	f003 0301 	and.w	r3, r3, #1
 8014a6c:	b2db      	uxtb	r3, r3
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d009      	beq.n	8014a86 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014a72:	697b      	ldr	r3, [r7, #20]
 8014a74:	681a      	ldr	r2, [r3, #0]
 8014a76:	693b      	ldr	r3, [r7, #16]
 8014a78:	4413      	add	r3, r2
 8014a7a:	687a      	ldr	r2, [r7, #4]
 8014a7c:	4907      	ldr	r1, [pc, #28]	; (8014a9c <lwip_cyclic_timer+0x60>)
 8014a7e:	4618      	mov	r0, r3
 8014a80:	f7ff ff6e 	bl	8014960 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014a84:	e004      	b.n	8014a90 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014a86:	687a      	ldr	r2, [r7, #4]
 8014a88:	4904      	ldr	r1, [pc, #16]	; (8014a9c <lwip_cyclic_timer+0x60>)
 8014a8a:	68f8      	ldr	r0, [r7, #12]
 8014a8c:	f7ff ff68 	bl	8014960 <sys_timeout_abs>
}
 8014a90:	bf00      	nop
 8014a92:	3718      	adds	r7, #24
 8014a94:	46bd      	mov	sp, r7
 8014a96:	bd80      	pop	{r7, pc}
 8014a98:	20006880 	.word	0x20006880
 8014a9c:	08014a3d 	.word	0x08014a3d

08014aa0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014aa0:	b580      	push	{r7, lr}
 8014aa2:	b082      	sub	sp, #8
 8014aa4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014aa6:	2301      	movs	r3, #1
 8014aa8:	607b      	str	r3, [r7, #4]
 8014aaa:	e00e      	b.n	8014aca <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014aac:	4a0b      	ldr	r2, [pc, #44]	; (8014adc <sys_timeouts_init+0x3c>)
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	00db      	lsls	r3, r3, #3
 8014ab8:	4a08      	ldr	r2, [pc, #32]	; (8014adc <sys_timeouts_init+0x3c>)
 8014aba:	4413      	add	r3, r2
 8014abc:	461a      	mov	r2, r3
 8014abe:	4908      	ldr	r1, [pc, #32]	; (8014ae0 <sys_timeouts_init+0x40>)
 8014ac0:	f000 f810 	bl	8014ae4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	3301      	adds	r3, #1
 8014ac8:	607b      	str	r3, [r7, #4]
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	2b06      	cmp	r3, #6
 8014ace:	d9ed      	bls.n	8014aac <sys_timeouts_init+0xc>
  }
}
 8014ad0:	bf00      	nop
 8014ad2:	bf00      	nop
 8014ad4:	3708      	adds	r7, #8
 8014ad6:	46bd      	mov	sp, r7
 8014ad8:	bd80      	pop	{r7, pc}
 8014ada:	bf00      	nop
 8014adc:	08026bbc 	.word	0x08026bbc
 8014ae0:	08014a3d 	.word	0x08014a3d

08014ae4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014ae4:	b580      	push	{r7, lr}
 8014ae6:	b086      	sub	sp, #24
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	60f8      	str	r0, [r7, #12]
 8014aec:	60b9      	str	r1, [r7, #8]
 8014aee:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014af0:	68fb      	ldr	r3, [r7, #12]
 8014af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014af6:	d306      	bcc.n	8014b06 <sys_timeout+0x22>
 8014af8:	4b0a      	ldr	r3, [pc, #40]	; (8014b24 <sys_timeout+0x40>)
 8014afa:	f240 1229 	movw	r2, #297	; 0x129
 8014afe:	490a      	ldr	r1, [pc, #40]	; (8014b28 <sys_timeout+0x44>)
 8014b00:	480a      	ldr	r0, [pc, #40]	; (8014b2c <sys_timeout+0x48>)
 8014b02:	f00b fc6b 	bl	80203dc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014b06:	f7f3 fddb 	bl	80086c0 <sys_now>
 8014b0a:	4602      	mov	r2, r0
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	4413      	add	r3, r2
 8014b10:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014b12:	687a      	ldr	r2, [r7, #4]
 8014b14:	68b9      	ldr	r1, [r7, #8]
 8014b16:	6978      	ldr	r0, [r7, #20]
 8014b18:	f7ff ff22 	bl	8014960 <sys_timeout_abs>
#endif
}
 8014b1c:	bf00      	nop
 8014b1e:	3718      	adds	r7, #24
 8014b20:	46bd      	mov	sp, r7
 8014b22:	bd80      	pop	{r7, pc}
 8014b24:	080238e8 	.word	0x080238e8
 8014b28:	08023984 	.word	0x08023984
 8014b2c:	0802395c 	.word	0x0802395c

08014b30 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014b30:	b580      	push	{r7, lr}
 8014b32:	b084      	sub	sp, #16
 8014b34:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8014b36:	f7f3 fdc3 	bl	80086c0 <sys_now>
 8014b3a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014b3c:	4b17      	ldr	r3, [pc, #92]	; (8014b9c <sys_check_timeouts+0x6c>)
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014b42:	68bb      	ldr	r3, [r7, #8]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d022      	beq.n	8014b8e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014b48:	68bb      	ldr	r3, [r7, #8]
 8014b4a:	685b      	ldr	r3, [r3, #4]
 8014b4c:	68fa      	ldr	r2, [r7, #12]
 8014b4e:	1ad3      	subs	r3, r2, r3
 8014b50:	0fdb      	lsrs	r3, r3, #31
 8014b52:	f003 0301 	and.w	r3, r3, #1
 8014b56:	b2db      	uxtb	r3, r3
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d11a      	bne.n	8014b92 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014b5c:	68bb      	ldr	r3, [r7, #8]
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	4a0e      	ldr	r2, [pc, #56]	; (8014b9c <sys_check_timeouts+0x6c>)
 8014b62:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014b64:	68bb      	ldr	r3, [r7, #8]
 8014b66:	689b      	ldr	r3, [r3, #8]
 8014b68:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014b6a:	68bb      	ldr	r3, [r7, #8]
 8014b6c:	68db      	ldr	r3, [r3, #12]
 8014b6e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014b70:	68bb      	ldr	r3, [r7, #8]
 8014b72:	685b      	ldr	r3, [r3, #4]
 8014b74:	4a0a      	ldr	r2, [pc, #40]	; (8014ba0 <sys_check_timeouts+0x70>)
 8014b76:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014b78:	68b9      	ldr	r1, [r7, #8]
 8014b7a:	200b      	movs	r0, #11
 8014b7c:	f7f9 f8cc 	bl	800dd18 <memp_free>
    if (handler != NULL) {
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d0da      	beq.n	8014b3c <sys_check_timeouts+0xc>
      handler(arg);
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	6838      	ldr	r0, [r7, #0]
 8014b8a:	4798      	blx	r3
  do {
 8014b8c:	e7d6      	b.n	8014b3c <sys_check_timeouts+0xc>
      return;
 8014b8e:	bf00      	nop
 8014b90:	e000      	b.n	8014b94 <sys_check_timeouts+0x64>
      return;
 8014b92:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014b94:	3710      	adds	r7, #16
 8014b96:	46bd      	mov	sp, r7
 8014b98:	bd80      	pop	{r7, pc}
 8014b9a:	bf00      	nop
 8014b9c:	2000687c 	.word	0x2000687c
 8014ba0:	20006880 	.word	0x20006880

08014ba4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8014ba4:	b580      	push	{r7, lr}
 8014ba6:	b082      	sub	sp, #8
 8014ba8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8014baa:	4b16      	ldr	r3, [pc, #88]	; (8014c04 <sys_timeouts_sleeptime+0x60>)
 8014bac:	681b      	ldr	r3, [r3, #0]
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d102      	bne.n	8014bb8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8014bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8014bb6:	e020      	b.n	8014bfa <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8014bb8:	f7f3 fd82 	bl	80086c0 <sys_now>
 8014bbc:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8014bbe:	4b11      	ldr	r3, [pc, #68]	; (8014c04 <sys_timeouts_sleeptime+0x60>)
 8014bc0:	681b      	ldr	r3, [r3, #0]
 8014bc2:	685a      	ldr	r2, [r3, #4]
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	1ad3      	subs	r3, r2, r3
 8014bc8:	0fdb      	lsrs	r3, r3, #31
 8014bca:	f003 0301 	and.w	r3, r3, #1
 8014bce:	b2db      	uxtb	r3, r3
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d001      	beq.n	8014bd8 <sys_timeouts_sleeptime+0x34>
    return 0;
 8014bd4:	2300      	movs	r3, #0
 8014bd6:	e010      	b.n	8014bfa <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8014bd8:	4b0a      	ldr	r3, [pc, #40]	; (8014c04 <sys_timeouts_sleeptime+0x60>)
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	685a      	ldr	r2, [r3, #4]
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	1ad3      	subs	r3, r2, r3
 8014be2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8014be4:	683b      	ldr	r3, [r7, #0]
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	da06      	bge.n	8014bf8 <sys_timeouts_sleeptime+0x54>
 8014bea:	4b07      	ldr	r3, [pc, #28]	; (8014c08 <sys_timeouts_sleeptime+0x64>)
 8014bec:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8014bf0:	4906      	ldr	r1, [pc, #24]	; (8014c0c <sys_timeouts_sleeptime+0x68>)
 8014bf2:	4807      	ldr	r0, [pc, #28]	; (8014c10 <sys_timeouts_sleeptime+0x6c>)
 8014bf4:	f00b fbf2 	bl	80203dc <iprintf>
    return ret;
 8014bf8:	683b      	ldr	r3, [r7, #0]
  }
}
 8014bfa:	4618      	mov	r0, r3
 8014bfc:	3708      	adds	r7, #8
 8014bfe:	46bd      	mov	sp, r7
 8014c00:	bd80      	pop	{r7, pc}
 8014c02:	bf00      	nop
 8014c04:	2000687c 	.word	0x2000687c
 8014c08:	080238e8 	.word	0x080238e8
 8014c0c:	080239bc 	.word	0x080239bc
 8014c10:	0802395c 	.word	0x0802395c

08014c14 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014c14:	b580      	push	{r7, lr}
 8014c16:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014c18:	f00b fc84 	bl	8020524 <rand>
 8014c1c:	4603      	mov	r3, r0
 8014c1e:	b29b      	uxth	r3, r3
 8014c20:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014c24:	b29b      	uxth	r3, r3
 8014c26:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8014c2a:	b29a      	uxth	r2, r3
 8014c2c:	4b01      	ldr	r3, [pc, #4]	; (8014c34 <udp_init+0x20>)
 8014c2e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014c30:	bf00      	nop
 8014c32:	bd80      	pop	{r7, pc}
 8014c34:	20000030 	.word	0x20000030

08014c38 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8014c38:	b480      	push	{r7}
 8014c3a:	b083      	sub	sp, #12
 8014c3c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8014c3e:	2300      	movs	r3, #0
 8014c40:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8014c42:	4b17      	ldr	r3, [pc, #92]	; (8014ca0 <udp_new_port+0x68>)
 8014c44:	881b      	ldrh	r3, [r3, #0]
 8014c46:	1c5a      	adds	r2, r3, #1
 8014c48:	b291      	uxth	r1, r2
 8014c4a:	4a15      	ldr	r2, [pc, #84]	; (8014ca0 <udp_new_port+0x68>)
 8014c4c:	8011      	strh	r1, [r2, #0]
 8014c4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014c52:	4293      	cmp	r3, r2
 8014c54:	d103      	bne.n	8014c5e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8014c56:	4b12      	ldr	r3, [pc, #72]	; (8014ca0 <udp_new_port+0x68>)
 8014c58:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8014c5c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014c5e:	4b11      	ldr	r3, [pc, #68]	; (8014ca4 <udp_new_port+0x6c>)
 8014c60:	681b      	ldr	r3, [r3, #0]
 8014c62:	603b      	str	r3, [r7, #0]
 8014c64:	e011      	b.n	8014c8a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8014c66:	683b      	ldr	r3, [r7, #0]
 8014c68:	8a5a      	ldrh	r2, [r3, #18]
 8014c6a:	4b0d      	ldr	r3, [pc, #52]	; (8014ca0 <udp_new_port+0x68>)
 8014c6c:	881b      	ldrh	r3, [r3, #0]
 8014c6e:	429a      	cmp	r2, r3
 8014c70:	d108      	bne.n	8014c84 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8014c72:	88fb      	ldrh	r3, [r7, #6]
 8014c74:	3301      	adds	r3, #1
 8014c76:	80fb      	strh	r3, [r7, #6]
 8014c78:	88fb      	ldrh	r3, [r7, #6]
 8014c7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014c7e:	d3e0      	bcc.n	8014c42 <udp_new_port+0xa>
        return 0;
 8014c80:	2300      	movs	r3, #0
 8014c82:	e007      	b.n	8014c94 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014c84:	683b      	ldr	r3, [r7, #0]
 8014c86:	68db      	ldr	r3, [r3, #12]
 8014c88:	603b      	str	r3, [r7, #0]
 8014c8a:	683b      	ldr	r3, [r7, #0]
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d1ea      	bne.n	8014c66 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8014c90:	4b03      	ldr	r3, [pc, #12]	; (8014ca0 <udp_new_port+0x68>)
 8014c92:	881b      	ldrh	r3, [r3, #0]
}
 8014c94:	4618      	mov	r0, r3
 8014c96:	370c      	adds	r7, #12
 8014c98:	46bd      	mov	sp, r7
 8014c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c9e:	4770      	bx	lr
 8014ca0:	20000030 	.word	0x20000030
 8014ca4:	2000a52c 	.word	0x2000a52c

08014ca8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8014ca8:	b580      	push	{r7, lr}
 8014caa:	b084      	sub	sp, #16
 8014cac:	af00      	add	r7, sp, #0
 8014cae:	60f8      	str	r0, [r7, #12]
 8014cb0:	60b9      	str	r1, [r7, #8]
 8014cb2:	4613      	mov	r3, r2
 8014cb4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d105      	bne.n	8014cc8 <udp_input_local_match+0x20>
 8014cbc:	4b27      	ldr	r3, [pc, #156]	; (8014d5c <udp_input_local_match+0xb4>)
 8014cbe:	2287      	movs	r2, #135	; 0x87
 8014cc0:	4927      	ldr	r1, [pc, #156]	; (8014d60 <udp_input_local_match+0xb8>)
 8014cc2:	4828      	ldr	r0, [pc, #160]	; (8014d64 <udp_input_local_match+0xbc>)
 8014cc4:	f00b fb8a 	bl	80203dc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8014cc8:	68bb      	ldr	r3, [r7, #8]
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d105      	bne.n	8014cda <udp_input_local_match+0x32>
 8014cce:	4b23      	ldr	r3, [pc, #140]	; (8014d5c <udp_input_local_match+0xb4>)
 8014cd0:	2288      	movs	r2, #136	; 0x88
 8014cd2:	4925      	ldr	r1, [pc, #148]	; (8014d68 <udp_input_local_match+0xc0>)
 8014cd4:	4823      	ldr	r0, [pc, #140]	; (8014d64 <udp_input_local_match+0xbc>)
 8014cd6:	f00b fb81 	bl	80203dc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	7a1b      	ldrb	r3, [r3, #8]
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d00b      	beq.n	8014cfa <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	7a1a      	ldrb	r2, [r3, #8]
 8014ce6:	4b21      	ldr	r3, [pc, #132]	; (8014d6c <udp_input_local_match+0xc4>)
 8014ce8:	685b      	ldr	r3, [r3, #4]
 8014cea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014cee:	3301      	adds	r3, #1
 8014cf0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014cf2:	429a      	cmp	r2, r3
 8014cf4:	d001      	beq.n	8014cfa <udp_input_local_match+0x52>
    return 0;
 8014cf6:	2300      	movs	r3, #0
 8014cf8:	e02b      	b.n	8014d52 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8014cfa:	79fb      	ldrb	r3, [r7, #7]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d018      	beq.n	8014d32 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d013      	beq.n	8014d2e <udp_input_local_match+0x86>
 8014d06:	68fb      	ldr	r3, [r7, #12]
 8014d08:	681b      	ldr	r3, [r3, #0]
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d00f      	beq.n	8014d2e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014d0e:	4b17      	ldr	r3, [pc, #92]	; (8014d6c <udp_input_local_match+0xc4>)
 8014d10:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d16:	d00a      	beq.n	8014d2e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	681a      	ldr	r2, [r3, #0]
 8014d1c:	4b13      	ldr	r3, [pc, #76]	; (8014d6c <udp_input_local_match+0xc4>)
 8014d1e:	695b      	ldr	r3, [r3, #20]
 8014d20:	405a      	eors	r2, r3
 8014d22:	68bb      	ldr	r3, [r7, #8]
 8014d24:	3308      	adds	r3, #8
 8014d26:	681b      	ldr	r3, [r3, #0]
 8014d28:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d110      	bne.n	8014d50 <udp_input_local_match+0xa8>
          return 1;
 8014d2e:	2301      	movs	r3, #1
 8014d30:	e00f      	b.n	8014d52 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d009      	beq.n	8014d4c <udp_input_local_match+0xa4>
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	681b      	ldr	r3, [r3, #0]
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d005      	beq.n	8014d4c <udp_input_local_match+0xa4>
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	681a      	ldr	r2, [r3, #0]
 8014d44:	4b09      	ldr	r3, [pc, #36]	; (8014d6c <udp_input_local_match+0xc4>)
 8014d46:	695b      	ldr	r3, [r3, #20]
 8014d48:	429a      	cmp	r2, r3
 8014d4a:	d101      	bne.n	8014d50 <udp_input_local_match+0xa8>
        return 1;
 8014d4c:	2301      	movs	r3, #1
 8014d4e:	e000      	b.n	8014d52 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8014d50:	2300      	movs	r3, #0
}
 8014d52:	4618      	mov	r0, r3
 8014d54:	3710      	adds	r7, #16
 8014d56:	46bd      	mov	sp, r7
 8014d58:	bd80      	pop	{r7, pc}
 8014d5a:	bf00      	nop
 8014d5c:	080239d0 	.word	0x080239d0
 8014d60:	08023a00 	.word	0x08023a00
 8014d64:	08023a24 	.word	0x08023a24
 8014d68:	08023a4c 	.word	0x08023a4c
 8014d6c:	200070d4 	.word	0x200070d4

08014d70 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014d70:	b590      	push	{r4, r7, lr}
 8014d72:	b08d      	sub	sp, #52	; 0x34
 8014d74:	af02      	add	r7, sp, #8
 8014d76:	6078      	str	r0, [r7, #4]
 8014d78:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8014d7a:	2300      	movs	r3, #0
 8014d7c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d105      	bne.n	8014d90 <udp_input+0x20>
 8014d84:	4ba0      	ldr	r3, [pc, #640]	; (8015008 <udp_input+0x298>)
 8014d86:	22cf      	movs	r2, #207	; 0xcf
 8014d88:	49a0      	ldr	r1, [pc, #640]	; (801500c <udp_input+0x29c>)
 8014d8a:	48a1      	ldr	r0, [pc, #644]	; (8015010 <udp_input+0x2a0>)
 8014d8c:	f00b fb26 	bl	80203dc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8014d90:	683b      	ldr	r3, [r7, #0]
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d105      	bne.n	8014da2 <udp_input+0x32>
 8014d96:	4b9c      	ldr	r3, [pc, #624]	; (8015008 <udp_input+0x298>)
 8014d98:	22d0      	movs	r2, #208	; 0xd0
 8014d9a:	499e      	ldr	r1, [pc, #632]	; (8015014 <udp_input+0x2a4>)
 8014d9c:	489c      	ldr	r0, [pc, #624]	; (8015010 <udp_input+0x2a0>)
 8014d9e:	f00b fb1d 	bl	80203dc <iprintf>

  PERF_START;

  UDP_STATS_INC(udp.recv);
 8014da2:	4b9d      	ldr	r3, [pc, #628]	; (8015018 <udp_input+0x2a8>)
 8014da4:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8014da8:	3301      	adds	r3, #1
 8014daa:	b29a      	uxth	r2, r3
 8014dac:	4b9a      	ldr	r3, [pc, #616]	; (8015018 <udp_input+0x2a8>)
 8014dae:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	895b      	ldrh	r3, [r3, #10]
 8014db6:	2b07      	cmp	r3, #7
 8014db8:	d819      	bhi.n	8014dee <udp_input+0x7e>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	891b      	ldrh	r3, [r3, #8]
 8014dbe:	4619      	mov	r1, r3
 8014dc0:	4896      	ldr	r0, [pc, #600]	; (801501c <udp_input+0x2ac>)
 8014dc2:	f00b fb0b 	bl	80203dc <iprintf>
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 8014dc6:	4b94      	ldr	r3, [pc, #592]	; (8015018 <udp_input+0x2a8>)
 8014dc8:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8014dcc:	3301      	adds	r3, #1
 8014dce:	b29a      	uxth	r2, r3
 8014dd0:	4b91      	ldr	r3, [pc, #580]	; (8015018 <udp_input+0x2a8>)
 8014dd2:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
    UDP_STATS_INC(udp.drop);
 8014dd6:	4b90      	ldr	r3, [pc, #576]	; (8015018 <udp_input+0x2a8>)
 8014dd8:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8014ddc:	3301      	adds	r3, #1
 8014dde:	b29a      	uxth	r2, r3
 8014de0:	4b8d      	ldr	r3, [pc, #564]	; (8015018 <udp_input+0x2a8>)
 8014de2:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8014de6:	6878      	ldr	r0, [r7, #4]
 8014de8:	f7f9 ff52 	bl	800ec90 <pbuf_free>
    goto end;
 8014dec:	e1ad      	b.n	801514a <udp_input+0x3da>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	685b      	ldr	r3, [r3, #4]
 8014df2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8014df4:	4b8a      	ldr	r3, [pc, #552]	; (8015020 <udp_input+0x2b0>)
 8014df6:	695b      	ldr	r3, [r3, #20]
 8014df8:	4a89      	ldr	r2, [pc, #548]	; (8015020 <udp_input+0x2b0>)
 8014dfa:	6812      	ldr	r2, [r2, #0]
 8014dfc:	4611      	mov	r1, r2
 8014dfe:	4618      	mov	r0, r3
 8014e00:	f005 fe0a 	bl	801aa18 <ip4_addr_isbroadcast_u32>
 8014e04:	4603      	mov	r3, r0
 8014e06:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	891b      	ldrh	r3, [r3, #8]
 8014e0c:	4619      	mov	r1, r3
 8014e0e:	4885      	ldr	r0, [pc, #532]	; (8015024 <udp_input+0x2b4>)
 8014e10:	f00b fae4 	bl	80203dc <iprintf>

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8014e14:	697b      	ldr	r3, [r7, #20]
 8014e16:	881b      	ldrh	r3, [r3, #0]
 8014e18:	b29b      	uxth	r3, r3
 8014e1a:	4618      	mov	r0, r3
 8014e1c:	f7f7 fdb0 	bl	800c980 <lwip_htons>
 8014e20:	4603      	mov	r3, r0
 8014e22:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8014e24:	697b      	ldr	r3, [r7, #20]
 8014e26:	885b      	ldrh	r3, [r3, #2]
 8014e28:	b29b      	uxth	r3, r3
 8014e2a:	4618      	mov	r0, r3
 8014e2c:	f7f7 fda8 	bl	800c980 <lwip_htons>
 8014e30:	4603      	mov	r3, r0
 8014e32:	81fb      	strh	r3, [r7, #14]

  udp_debug_print(udphdr);
 8014e34:	6978      	ldr	r0, [r7, #20]
 8014e36:	f000 fe73 	bl	8015b20 <udp_debug_print>

  /* print the UDP source and destination */
  LWIP_DEBUGF(UDP_DEBUG, ("udp ("));
 8014e3a:	487b      	ldr	r0, [pc, #492]	; (8015028 <udp_input+0x2b8>)
 8014e3c:	f00b face 	bl	80203dc <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
 8014e40:	4b77      	ldr	r3, [pc, #476]	; (8015020 <udp_input+0x2b0>)
 8014e42:	695b      	ldr	r3, [r3, #20]
 8014e44:	b2db      	uxtb	r3, r3
 8014e46:	4619      	mov	r1, r3
 8014e48:	4b75      	ldr	r3, [pc, #468]	; (8015020 <udp_input+0x2b0>)
 8014e4a:	695b      	ldr	r3, [r3, #20]
 8014e4c:	0a1b      	lsrs	r3, r3, #8
 8014e4e:	b2db      	uxtb	r3, r3
 8014e50:	461a      	mov	r2, r3
 8014e52:	4b73      	ldr	r3, [pc, #460]	; (8015020 <udp_input+0x2b0>)
 8014e54:	695b      	ldr	r3, [r3, #20]
 8014e56:	0c1b      	lsrs	r3, r3, #16
 8014e58:	b2db      	uxtb	r3, r3
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	4b70      	ldr	r3, [pc, #448]	; (8015020 <udp_input+0x2b0>)
 8014e5e:	695b      	ldr	r3, [r3, #20]
 8014e60:	0e1b      	lsrs	r3, r3, #24
 8014e62:	b2db      	uxtb	r3, r3
 8014e64:	9300      	str	r3, [sp, #0]
 8014e66:	4603      	mov	r3, r0
 8014e68:	4870      	ldr	r0, [pc, #448]	; (801502c <udp_input+0x2bc>)
 8014e6a:	f00b fab7 	bl	80203dc <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
 8014e6e:	697b      	ldr	r3, [r7, #20]
 8014e70:	885b      	ldrh	r3, [r3, #2]
 8014e72:	b29b      	uxth	r3, r3
 8014e74:	4618      	mov	r0, r3
 8014e76:	f7f7 fd83 	bl	800c980 <lwip_htons>
 8014e7a:	4603      	mov	r3, r0
 8014e7c:	4619      	mov	r1, r3
 8014e7e:	486c      	ldr	r0, [pc, #432]	; (8015030 <udp_input+0x2c0>)
 8014e80:	f00b faac 	bl	80203dc <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
 8014e84:	4b66      	ldr	r3, [pc, #408]	; (8015020 <udp_input+0x2b0>)
 8014e86:	691b      	ldr	r3, [r3, #16]
 8014e88:	b2db      	uxtb	r3, r3
 8014e8a:	4619      	mov	r1, r3
 8014e8c:	4b64      	ldr	r3, [pc, #400]	; (8015020 <udp_input+0x2b0>)
 8014e8e:	691b      	ldr	r3, [r3, #16]
 8014e90:	0a1b      	lsrs	r3, r3, #8
 8014e92:	b2db      	uxtb	r3, r3
 8014e94:	461a      	mov	r2, r3
 8014e96:	4b62      	ldr	r3, [pc, #392]	; (8015020 <udp_input+0x2b0>)
 8014e98:	691b      	ldr	r3, [r3, #16]
 8014e9a:	0c1b      	lsrs	r3, r3, #16
 8014e9c:	b2db      	uxtb	r3, r3
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	4b5f      	ldr	r3, [pc, #380]	; (8015020 <udp_input+0x2b0>)
 8014ea2:	691b      	ldr	r3, [r3, #16]
 8014ea4:	0e1b      	lsrs	r3, r3, #24
 8014ea6:	b2db      	uxtb	r3, r3
 8014ea8:	9300      	str	r3, [sp, #0]
 8014eaa:	4603      	mov	r3, r0
 8014eac:	485f      	ldr	r0, [pc, #380]	; (801502c <udp_input+0x2bc>)
 8014eae:	f00b fa95 	bl	80203dc <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));
 8014eb2:	697b      	ldr	r3, [r7, #20]
 8014eb4:	881b      	ldrh	r3, [r3, #0]
 8014eb6:	b29b      	uxth	r3, r3
 8014eb8:	4618      	mov	r0, r3
 8014eba:	f7f7 fd61 	bl	800c980 <lwip_htons>
 8014ebe:	4603      	mov	r3, r0
 8014ec0:	4619      	mov	r1, r3
 8014ec2:	485c      	ldr	r0, [pc, #368]	; (8015034 <udp_input+0x2c4>)
 8014ec4:	f00b fa8a 	bl	80203dc <iprintf>

  pcb = NULL;
 8014ec8:	2300      	movs	r3, #0
 8014eca:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8014ecc:	2300      	movs	r3, #0
 8014ece:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8014ed0:	2300      	movs	r3, #0
 8014ed2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014ed4:	4b58      	ldr	r3, [pc, #352]	; (8015038 <udp_input+0x2c8>)
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8014eda:	e0b6      	b.n	801504a <udp_input+0x2da>
    /* print the PCB local and remote address */
    LWIP_DEBUGF(UDP_DEBUG, ("pcb ("));
 8014edc:	4857      	ldr	r0, [pc, #348]	; (801503c <udp_input+0x2cc>)
 8014ede:	f00b fa7d 	bl	80203dc <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->local_ip);
 8014ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ee4:	681b      	ldr	r3, [r3, #0]
 8014ee6:	b2db      	uxtb	r3, r3
 8014ee8:	4619      	mov	r1, r3
 8014eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eec:	681b      	ldr	r3, [r3, #0]
 8014eee:	0a1b      	lsrs	r3, r3, #8
 8014ef0:	b2db      	uxtb	r3, r3
 8014ef2:	461a      	mov	r2, r3
 8014ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ef6:	681b      	ldr	r3, [r3, #0]
 8014ef8:	0c1b      	lsrs	r3, r3, #16
 8014efa:	b2db      	uxtb	r3, r3
 8014efc:	4618      	mov	r0, r3
 8014efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f00:	681b      	ldr	r3, [r3, #0]
 8014f02:	0e1b      	lsrs	r3, r3, #24
 8014f04:	b2db      	uxtb	r3, r3
 8014f06:	9300      	str	r3, [sp, #0]
 8014f08:	4603      	mov	r3, r0
 8014f0a:	4848      	ldr	r0, [pc, #288]	; (801502c <udp_input+0x2bc>)
 8014f0c:	f00b fa66 	bl	80203dc <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
 8014f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f12:	8a5b      	ldrh	r3, [r3, #18]
 8014f14:	4619      	mov	r1, r3
 8014f16:	4846      	ldr	r0, [pc, #280]	; (8015030 <udp_input+0x2c0>)
 8014f18:	f00b fa60 	bl	80203dc <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
 8014f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f1e:	685b      	ldr	r3, [r3, #4]
 8014f20:	b2db      	uxtb	r3, r3
 8014f22:	4619      	mov	r1, r3
 8014f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f26:	685b      	ldr	r3, [r3, #4]
 8014f28:	0a1b      	lsrs	r3, r3, #8
 8014f2a:	b2db      	uxtb	r3, r3
 8014f2c:	461a      	mov	r2, r3
 8014f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f30:	685b      	ldr	r3, [r3, #4]
 8014f32:	0c1b      	lsrs	r3, r3, #16
 8014f34:	b2db      	uxtb	r3, r3
 8014f36:	4618      	mov	r0, r3
 8014f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f3a:	685b      	ldr	r3, [r3, #4]
 8014f3c:	0e1b      	lsrs	r3, r3, #24
 8014f3e:	b2db      	uxtb	r3, r3
 8014f40:	9300      	str	r3, [sp, #0]
 8014f42:	4603      	mov	r3, r0
 8014f44:	4839      	ldr	r0, [pc, #228]	; (801502c <udp_input+0x2bc>)
 8014f46:	f00b fa49 	bl	80203dc <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));
 8014f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f4c:	8a9b      	ldrh	r3, [r3, #20]
 8014f4e:	4619      	mov	r1, r3
 8014f50:	4838      	ldr	r0, [pc, #224]	; (8015034 <udp_input+0x2c4>)
 8014f52:	f00b fa43 	bl	80203dc <iprintf>

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f58:	8a5b      	ldrh	r3, [r3, #18]
 8014f5a:	89fa      	ldrh	r2, [r7, #14]
 8014f5c:	429a      	cmp	r2, r3
 8014f5e:	d16f      	bne.n	8015040 <udp_input+0x2d0>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8014f60:	7cfb      	ldrb	r3, [r7, #19]
 8014f62:	461a      	mov	r2, r3
 8014f64:	6839      	ldr	r1, [r7, #0]
 8014f66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014f68:	f7ff fe9e 	bl	8014ca8 <udp_input_local_match>
 8014f6c:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d066      	beq.n	8015040 <udp_input+0x2d0>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8014f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f74:	7c1b      	ldrb	r3, [r3, #16]
 8014f76:	f003 0304 	and.w	r3, r3, #4
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d11d      	bne.n	8014fba <udp_input+0x24a>
        if (uncon_pcb == NULL) {
 8014f7e:	69fb      	ldr	r3, [r7, #28]
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d102      	bne.n	8014f8a <udp_input+0x21a>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8014f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f86:	61fb      	str	r3, [r7, #28]
 8014f88:	e017      	b.n	8014fba <udp_input+0x24a>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014f8a:	7cfb      	ldrb	r3, [r7, #19]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d014      	beq.n	8014fba <udp_input+0x24a>
 8014f90:	4b23      	ldr	r3, [pc, #140]	; (8015020 <udp_input+0x2b0>)
 8014f92:	695b      	ldr	r3, [r3, #20]
 8014f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f98:	d10f      	bne.n	8014fba <udp_input+0x24a>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014f9a:	69fb      	ldr	r3, [r7, #28]
 8014f9c:	681a      	ldr	r2, [r3, #0]
 8014f9e:	683b      	ldr	r3, [r7, #0]
 8014fa0:	3304      	adds	r3, #4
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	429a      	cmp	r2, r3
 8014fa6:	d008      	beq.n	8014fba <udp_input+0x24a>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8014fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014faa:	681a      	ldr	r2, [r3, #0]
 8014fac:	683b      	ldr	r3, [r7, #0]
 8014fae:	3304      	adds	r3, #4
 8014fb0:	681b      	ldr	r3, [r3, #0]
 8014fb2:	429a      	cmp	r2, r3
 8014fb4:	d101      	bne.n	8014fba <udp_input+0x24a>
              /* better match */
              uncon_pcb = pcb;
 8014fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fb8:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8014fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fbc:	8a9b      	ldrh	r3, [r3, #20]
 8014fbe:	8a3a      	ldrh	r2, [r7, #16]
 8014fc0:	429a      	cmp	r2, r3
 8014fc2:	d13d      	bne.n	8015040 <udp_input+0x2d0>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fc6:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d005      	beq.n	8014fd8 <udp_input+0x268>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8014fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fce:	685a      	ldr	r2, [r3, #4]
 8014fd0:	4b13      	ldr	r3, [pc, #76]	; (8015020 <udp_input+0x2b0>)
 8014fd2:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014fd4:	429a      	cmp	r2, r3
 8014fd6:	d133      	bne.n	8015040 <udp_input+0x2d0>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8014fd8:	6a3b      	ldr	r3, [r7, #32]
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d00b      	beq.n	8014ff6 <udp_input+0x286>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8014fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fe0:	68da      	ldr	r2, [r3, #12]
 8014fe2:	6a3b      	ldr	r3, [r7, #32]
 8014fe4:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8014fe6:	4b14      	ldr	r3, [pc, #80]	; (8015038 <udp_input+0x2c8>)
 8014fe8:	681a      	ldr	r2, [r3, #0]
 8014fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fec:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8014fee:	4a12      	ldr	r2, [pc, #72]	; (8015038 <udp_input+0x2c8>)
 8014ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ff2:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8014ff4:	e02d      	b.n	8015052 <udp_input+0x2e2>
          UDP_STATS_INC(udp.cachehit);
 8014ff6:	4b08      	ldr	r3, [pc, #32]	; (8015018 <udp_input+0x2a8>)
 8014ff8:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8014ffc:	3301      	adds	r3, #1
 8014ffe:	b29a      	uxth	r2, r3
 8015000:	4b05      	ldr	r3, [pc, #20]	; (8015018 <udp_input+0x2a8>)
 8015002:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
        break;
 8015006:	e024      	b.n	8015052 <udp_input+0x2e2>
 8015008:	080239d0 	.word	0x080239d0
 801500c:	08023a74 	.word	0x08023a74
 8015010:	08023a24 	.word	0x08023a24
 8015014:	08023a8c 	.word	0x08023a8c
 8015018:	2000a3ec 	.word	0x2000a3ec
 801501c:	08023aa8 	.word	0x08023aa8
 8015020:	200070d4 	.word	0x200070d4
 8015024:	08023ae0 	.word	0x08023ae0
 8015028:	08023b0c 	.word	0x08023b0c
 801502c:	08023b14 	.word	0x08023b14
 8015030:	08023b24 	.word	0x08023b24
 8015034:	08023b34 	.word	0x08023b34
 8015038:	2000a52c 	.word	0x2000a52c
 801503c:	08023b3c 	.word	0x08023b3c
      }
    }

    prev = pcb;
 8015040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015042:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015046:	68db      	ldr	r3, [r3, #12]
 8015048:	627b      	str	r3, [r7, #36]	; 0x24
 801504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801504c:	2b00      	cmp	r3, #0
 801504e:	f47f af45 	bne.w	8014edc <udp_input+0x16c>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8015052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015054:	2b00      	cmp	r3, #0
 8015056:	d101      	bne.n	801505c <udp_input+0x2ec>
    pcb = uncon_pcb;
 8015058:	69fb      	ldr	r3, [r7, #28]
 801505a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801505e:	2b00      	cmp	r3, #0
 8015060:	d002      	beq.n	8015068 <udp_input+0x2f8>
    for_us = 1;
 8015062:	2301      	movs	r3, #1
 8015064:	76fb      	strb	r3, [r7, #27]
 8015066:	e00a      	b.n	801507e <udp_input+0x30e>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8015068:	683b      	ldr	r3, [r7, #0]
 801506a:	3304      	adds	r3, #4
 801506c:	681a      	ldr	r2, [r3, #0]
 801506e:	4b39      	ldr	r3, [pc, #228]	; (8015154 <udp_input+0x3e4>)
 8015070:	695b      	ldr	r3, [r3, #20]
 8015072:	429a      	cmp	r2, r3
 8015074:	bf0c      	ite	eq
 8015076:	2301      	moveq	r3, #1
 8015078:	2300      	movne	r3, #0
 801507a:	b2db      	uxtb	r3, r3
 801507c:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801507e:	7efb      	ldrb	r3, [r7, #27]
 8015080:	2b00      	cmp	r3, #0
 8015082:	d05f      	beq.n	8015144 <udp_input+0x3d4>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: calculating checksum\n"));
 8015084:	4834      	ldr	r0, [pc, #208]	; (8015158 <udp_input+0x3e8>)
 8015086:	f00b fa45 	bl	8020514 <puts>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801508a:	2108      	movs	r1, #8
 801508c:	6878      	ldr	r0, [r7, #4]
 801508e:	f7f9 fd79 	bl	800eb84 <pbuf_remove_header>
 8015092:	4603      	mov	r3, r0
 8015094:	2b00      	cmp	r3, #0
 8015096:	d012      	beq.n	80150be <udp_input+0x34e>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8015098:	4b30      	ldr	r3, [pc, #192]	; (801515c <udp_input+0x3ec>)
 801509a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801509e:	4930      	ldr	r1, [pc, #192]	; (8015160 <udp_input+0x3f0>)
 80150a0:	4830      	ldr	r0, [pc, #192]	; (8015164 <udp_input+0x3f4>)
 80150a2:	f00b f99b 	bl	80203dc <iprintf>
      UDP_STATS_INC(udp.drop);
 80150a6:	4b30      	ldr	r3, [pc, #192]	; (8015168 <udp_input+0x3f8>)
 80150a8:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 80150ac:	3301      	adds	r3, #1
 80150ae:	b29a      	uxth	r2, r3
 80150b0:	4b2d      	ldr	r3, [pc, #180]	; (8015168 <udp_input+0x3f8>)
 80150b2:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80150b6:	6878      	ldr	r0, [r7, #4]
 80150b8:	f7f9 fdea 	bl	800ec90 <pbuf_free>
      goto end;
 80150bc:	e045      	b.n	801514a <udp_input+0x3da>
    }

    if (pcb != NULL) {
 80150be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d012      	beq.n	80150ea <udp_input+0x37a>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80150c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150c6:	6a1b      	ldr	r3, [r3, #32]
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d00a      	beq.n	80150e2 <udp_input+0x372>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80150cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150ce:	6a1c      	ldr	r4, [r3, #32]
 80150d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150d2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80150d4:	8a3b      	ldrh	r3, [r7, #16]
 80150d6:	9300      	str	r3, [sp, #0]
 80150d8:	4b24      	ldr	r3, [pc, #144]	; (801516c <udp_input+0x3fc>)
 80150da:	687a      	ldr	r2, [r7, #4]
 80150dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80150de:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80150e0:	e034      	b.n	801514c <udp_input+0x3dc>
        pbuf_free(p);
 80150e2:	6878      	ldr	r0, [r7, #4]
 80150e4:	f7f9 fdd4 	bl	800ec90 <pbuf_free>
        goto end;
 80150e8:	e02f      	b.n	801514a <udp_input+0x3da>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));
 80150ea:	4821      	ldr	r0, [pc, #132]	; (8015170 <udp_input+0x400>)
 80150ec:	f00b fa12 	bl	8020514 <puts>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80150f0:	7cfb      	ldrb	r3, [r7, #19]
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d112      	bne.n	801511c <udp_input+0x3ac>
 80150f6:	4b17      	ldr	r3, [pc, #92]	; (8015154 <udp_input+0x3e4>)
 80150f8:	695b      	ldr	r3, [r3, #20]
 80150fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80150fe:	2be0      	cmp	r3, #224	; 0xe0
 8015100:	d00c      	beq.n	801511c <udp_input+0x3ac>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8015102:	4b14      	ldr	r3, [pc, #80]	; (8015154 <udp_input+0x3e4>)
 8015104:	899b      	ldrh	r3, [r3, #12]
 8015106:	3308      	adds	r3, #8
 8015108:	b29b      	uxth	r3, r3
 801510a:	b21b      	sxth	r3, r3
 801510c:	4619      	mov	r1, r3
 801510e:	6878      	ldr	r0, [r7, #4]
 8015110:	f7f9 fdab 	bl	800ec6a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8015114:	2103      	movs	r1, #3
 8015116:	6878      	ldr	r0, [r7, #4]
 8015118:	f004 f8fa 	bl	8019310 <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 801511c:	4b12      	ldr	r3, [pc, #72]	; (8015168 <udp_input+0x3f8>)
 801511e:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8015122:	3301      	adds	r3, #1
 8015124:	b29a      	uxth	r2, r3
 8015126:	4b10      	ldr	r3, [pc, #64]	; (8015168 <udp_input+0x3f8>)
 8015128:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
      UDP_STATS_INC(udp.drop);
 801512c:	4b0e      	ldr	r3, [pc, #56]	; (8015168 <udp_input+0x3f8>)
 801512e:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8015132:	3301      	adds	r3, #1
 8015134:	b29a      	uxth	r2, r3
 8015136:	4b0c      	ldr	r3, [pc, #48]	; (8015168 <udp_input+0x3f8>)
 8015138:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      pbuf_free(p);
 801513c:	6878      	ldr	r0, [r7, #4]
 801513e:	f7f9 fda7 	bl	800ec90 <pbuf_free>
  return;
 8015142:	e003      	b.n	801514c <udp_input+0x3dc>
    pbuf_free(p);
 8015144:	6878      	ldr	r0, [r7, #4]
 8015146:	f7f9 fda3 	bl	800ec90 <pbuf_free>
  return;
 801514a:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801514c:	372c      	adds	r7, #44	; 0x2c
 801514e:	46bd      	mov	sp, r7
 8015150:	bd90      	pop	{r4, r7, pc}
 8015152:	bf00      	nop
 8015154:	200070d4 	.word	0x200070d4
 8015158:	08023b44 	.word	0x08023b44
 801515c:	080239d0 	.word	0x080239d0
 8015160:	08023b64 	.word	0x08023b64
 8015164:	08023a24 	.word	0x08023a24
 8015168:	2000a3ec 	.word	0x2000a3ec
 801516c:	200070e4 	.word	0x200070e4
 8015170:	08023b80 	.word	0x08023b80

08015174 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8015174:	b580      	push	{r7, lr}
 8015176:	b088      	sub	sp, #32
 8015178:	af02      	add	r7, sp, #8
 801517a:	60f8      	str	r0, [r7, #12]
 801517c:	60b9      	str	r1, [r7, #8]
 801517e:	607a      	str	r2, [r7, #4]
 8015180:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	2b00      	cmp	r3, #0
 8015186:	d109      	bne.n	801519c <udp_sendto+0x28>
 8015188:	4b52      	ldr	r3, [pc, #328]	; (80152d4 <udp_sendto+0x160>)
 801518a:	f44f 7206 	mov.w	r2, #536	; 0x218
 801518e:	4952      	ldr	r1, [pc, #328]	; (80152d8 <udp_sendto+0x164>)
 8015190:	4852      	ldr	r0, [pc, #328]	; (80152dc <udp_sendto+0x168>)
 8015192:	f00b f923 	bl	80203dc <iprintf>
 8015196:	f06f 030f 	mvn.w	r3, #15
 801519a:	e096      	b.n	80152ca <udp_sendto+0x156>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801519c:	68bb      	ldr	r3, [r7, #8]
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d109      	bne.n	80151b6 <udp_sendto+0x42>
 80151a2:	4b4c      	ldr	r3, [pc, #304]	; (80152d4 <udp_sendto+0x160>)
 80151a4:	f240 2219 	movw	r2, #537	; 0x219
 80151a8:	494d      	ldr	r1, [pc, #308]	; (80152e0 <udp_sendto+0x16c>)
 80151aa:	484c      	ldr	r0, [pc, #304]	; (80152dc <udp_sendto+0x168>)
 80151ac:	f00b f916 	bl	80203dc <iprintf>
 80151b0:	f06f 030f 	mvn.w	r3, #15
 80151b4:	e089      	b.n	80152ca <udp_sendto+0x156>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d109      	bne.n	80151d0 <udp_sendto+0x5c>
 80151bc:	4b45      	ldr	r3, [pc, #276]	; (80152d4 <udp_sendto+0x160>)
 80151be:	f240 221a 	movw	r2, #538	; 0x21a
 80151c2:	4948      	ldr	r1, [pc, #288]	; (80152e4 <udp_sendto+0x170>)
 80151c4:	4845      	ldr	r0, [pc, #276]	; (80152dc <udp_sendto+0x168>)
 80151c6:	f00b f909 	bl	80203dc <iprintf>
 80151ca:	f06f 030f 	mvn.w	r3, #15
 80151ce:	e07c      	b.n	80152ca <udp_sendto+0x156>

  if (!IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));
 80151d0:	4845      	ldr	r0, [pc, #276]	; (80152e8 <udp_sendto+0x174>)
 80151d2:	f00b f99f 	bl	8020514 <puts>

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	7a1b      	ldrb	r3, [r3, #8]
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d006      	beq.n	80151ec <udp_sendto+0x78>
    netif = netif_get_by_index(pcb->netif_idx);
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	7a1b      	ldrb	r3, [r3, #8]
 80151e2:	4618      	mov	r0, r3
 80151e4:	f7f9 f9c6 	bl	800e574 <netif_get_by_index>
 80151e8:	6178      	str	r0, [r7, #20]
 80151ea:	e029      	b.n	8015240 <udp_sendto+0xcc>
  } else {
#if LWIP_MULTICAST_TX_OPTIONS
    netif = NULL;
 80151ec:	2300      	movs	r3, #0
 80151ee:	617b      	str	r3, [r7, #20]
    if (ip_addr_ismulticast(dst_ip)) {
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80151f8:	2be0      	cmp	r3, #224	; 0xe0
 80151fa:	d11a      	bne.n	8015232 <udp_sendto+0xbe>
       * is specified using an interface index. The same approach may be used for
       * IPv4 as well, in which case it overrides the IPv4 multicast override
       * address below. Here we have to look up the netif by going through the
       * list, but by doing so we skip a route lookup. If the interface index has
       * gone stale, we fall through and do the regular route lookup after all. */
      if (pcb->mcast_ifindex != NETIF_NO_INDEX) {
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	7f1b      	ldrb	r3, [r3, #28]
 8015200:	2b00      	cmp	r3, #0
 8015202:	d006      	beq.n	8015212 <udp_sendto+0x9e>
        netif = netif_get_by_index(pcb->mcast_ifindex);
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	7f1b      	ldrb	r3, [r3, #28]
 8015208:	4618      	mov	r0, r3
 801520a:	f7f9 f9b3 	bl	800e574 <netif_get_by_index>
 801520e:	6178      	str	r0, [r7, #20]
 8015210:	e00f      	b.n	8015232 <udp_sendto+0xbe>
          /* IPv4 does not use source-based routing by default, so we use an
             administratively selected interface for multicast by default.
             However, this can be overridden by setting an interface address
             in pcb->mcast_ip4 that is used for routing. If this routing lookup
             fails, we try regular routing as though no override was set. */
          if (!ip4_addr_isany_val(pcb->mcast_ip4) &&
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	699b      	ldr	r3, [r3, #24]
 8015216:	2b00      	cmp	r3, #0
 8015218:	d00b      	beq.n	8015232 <udp_sendto+0xbe>
              !ip4_addr_cmp(&pcb->mcast_ip4, IP4_ADDR_BROADCAST)) {
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	699a      	ldr	r2, [r3, #24]
 801521e:	4b33      	ldr	r3, [pc, #204]	; (80152ec <udp_sendto+0x178>)
 8015220:	681b      	ldr	r3, [r3, #0]
          if (!ip4_addr_isany_val(pcb->mcast_ip4) &&
 8015222:	429a      	cmp	r2, r3
 8015224:	d005      	beq.n	8015232 <udp_sendto+0xbe>
            netif = ip4_route_src(ip_2_ip4(&pcb->local_ip), &pcb->mcast_ip4);
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	3318      	adds	r3, #24
 801522a:	4618      	mov	r0, r3
 801522c:	f004 fe2c 	bl	8019e88 <ip4_route>
 8015230:	6178      	str	r0, [r7, #20]
          }
        }
#endif /* LWIP_IPV4 */
    }

    if (netif == NULL)
 8015232:	697b      	ldr	r3, [r7, #20]
 8015234:	2b00      	cmp	r3, #0
 8015236:	d103      	bne.n	8015240 <udp_sendto+0xcc>
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8015238:	6878      	ldr	r0, [r7, #4]
 801523a:	f004 fe25 	bl	8019e88 <ip4_route>
 801523e:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8015240:	697b      	ldr	r3, [r7, #20]
 8015242:	2b00      	cmp	r3, #0
 8015244:	d137      	bne.n	80152b6 <udp_sendto+0x142>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
 8015246:	482a      	ldr	r0, [pc, #168]	; (80152f0 <udp_sendto+0x17c>)
 8015248:	f00b f8c8 	bl	80203dc <iprintf>
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	2b00      	cmp	r3, #0
 8015250:	d003      	beq.n	801525a <udp_sendto+0xe6>
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	781b      	ldrb	r3, [r3, #0]
 8015256:	4619      	mov	r1, r3
 8015258:	e000      	b.n	801525c <udp_sendto+0xe8>
 801525a:	2100      	movs	r1, #0
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	2b00      	cmp	r3, #0
 8015260:	d004      	beq.n	801526c <udp_sendto+0xf8>
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	3301      	adds	r3, #1
 8015266:	781b      	ldrb	r3, [r3, #0]
 8015268:	461a      	mov	r2, r3
 801526a:	e000      	b.n	801526e <udp_sendto+0xfa>
 801526c:	2200      	movs	r2, #0
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	2b00      	cmp	r3, #0
 8015272:	d004      	beq.n	801527e <udp_sendto+0x10a>
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	3302      	adds	r3, #2
 8015278:	781b      	ldrb	r3, [r3, #0]
 801527a:	4618      	mov	r0, r3
 801527c:	e000      	b.n	8015280 <udp_sendto+0x10c>
 801527e:	2000      	movs	r0, #0
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	2b00      	cmp	r3, #0
 8015284:	d003      	beq.n	801528e <udp_sendto+0x11a>
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	3303      	adds	r3, #3
 801528a:	781b      	ldrb	r3, [r3, #0]
 801528c:	e000      	b.n	8015290 <udp_sendto+0x11c>
 801528e:	2300      	movs	r3, #0
 8015290:	9300      	str	r3, [sp, #0]
 8015292:	4603      	mov	r3, r0
 8015294:	4817      	ldr	r0, [pc, #92]	; (80152f4 <udp_sendto+0x180>)
 8015296:	f00b f8a1 	bl	80203dc <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
 801529a:	200a      	movs	r0, #10
 801529c:	f00b f8b6 	bl	802040c <putchar>
    UDP_STATS_INC(udp.rterr);
 80152a0:	4b15      	ldr	r3, [pc, #84]	; (80152f8 <udp_sendto+0x184>)
 80152a2:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 80152a6:	3301      	adds	r3, #1
 80152a8:	b29a      	uxth	r2, r3
 80152aa:	4b13      	ldr	r3, [pc, #76]	; (80152f8 <udp_sendto+0x184>)
 80152ac:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
    return ERR_RTE;
 80152b0:	f06f 0303 	mvn.w	r3, #3
 80152b4:	e009      	b.n	80152ca <udp_sendto+0x156>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80152b6:	887a      	ldrh	r2, [r7, #2]
 80152b8:	697b      	ldr	r3, [r7, #20]
 80152ba:	9300      	str	r3, [sp, #0]
 80152bc:	4613      	mov	r3, r2
 80152be:	687a      	ldr	r2, [r7, #4]
 80152c0:	68b9      	ldr	r1, [r7, #8]
 80152c2:	68f8      	ldr	r0, [r7, #12]
 80152c4:	f000 f81a 	bl	80152fc <udp_sendto_if>
 80152c8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80152ca:	4618      	mov	r0, r3
 80152cc:	3718      	adds	r7, #24
 80152ce:	46bd      	mov	sp, r7
 80152d0:	bd80      	pop	{r7, pc}
 80152d2:	bf00      	nop
 80152d4:	080239d0 	.word	0x080239d0
 80152d8:	08023bc8 	.word	0x08023bc8
 80152dc:	08023a24 	.word	0x08023a24
 80152e0:	08023be0 	.word	0x08023be0
 80152e4:	08023bfc 	.word	0x08023bfc
 80152e8:	08023c18 	.word	0x08023c18
 80152ec:	08026bf8 	.word	0x08026bf8
 80152f0:	08023c24 	.word	0x08023c24
 80152f4:	08023b14 	.word	0x08023b14
 80152f8:	2000a3ec 	.word	0x2000a3ec

080152fc <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80152fc:	b580      	push	{r7, lr}
 80152fe:	b088      	sub	sp, #32
 8015300:	af02      	add	r7, sp, #8
 8015302:	60f8      	str	r0, [r7, #12]
 8015304:	60b9      	str	r1, [r7, #8]
 8015306:	607a      	str	r2, [r7, #4]
 8015308:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801530a:	68fb      	ldr	r3, [r7, #12]
 801530c:	2b00      	cmp	r3, #0
 801530e:	d109      	bne.n	8015324 <udp_sendto_if+0x28>
 8015310:	4b2e      	ldr	r3, [pc, #184]	; (80153cc <udp_sendto_if+0xd0>)
 8015312:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015316:	492e      	ldr	r1, [pc, #184]	; (80153d0 <udp_sendto_if+0xd4>)
 8015318:	482e      	ldr	r0, [pc, #184]	; (80153d4 <udp_sendto_if+0xd8>)
 801531a:	f00b f85f 	bl	80203dc <iprintf>
 801531e:	f06f 030f 	mvn.w	r3, #15
 8015322:	e04f      	b.n	80153c4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8015324:	68bb      	ldr	r3, [r7, #8]
 8015326:	2b00      	cmp	r3, #0
 8015328:	d109      	bne.n	801533e <udp_sendto_if+0x42>
 801532a:	4b28      	ldr	r3, [pc, #160]	; (80153cc <udp_sendto_if+0xd0>)
 801532c:	f240 2281 	movw	r2, #641	; 0x281
 8015330:	4929      	ldr	r1, [pc, #164]	; (80153d8 <udp_sendto_if+0xdc>)
 8015332:	4828      	ldr	r0, [pc, #160]	; (80153d4 <udp_sendto_if+0xd8>)
 8015334:	f00b f852 	bl	80203dc <iprintf>
 8015338:	f06f 030f 	mvn.w	r3, #15
 801533c:	e042      	b.n	80153c4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	2b00      	cmp	r3, #0
 8015342:	d109      	bne.n	8015358 <udp_sendto_if+0x5c>
 8015344:	4b21      	ldr	r3, [pc, #132]	; (80153cc <udp_sendto_if+0xd0>)
 8015346:	f240 2282 	movw	r2, #642	; 0x282
 801534a:	4924      	ldr	r1, [pc, #144]	; (80153dc <udp_sendto_if+0xe0>)
 801534c:	4821      	ldr	r0, [pc, #132]	; (80153d4 <udp_sendto_if+0xd8>)
 801534e:	f00b f845 	bl	80203dc <iprintf>
 8015352:	f06f 030f 	mvn.w	r3, #15
 8015356:	e035      	b.n	80153c4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8015358:	6a3b      	ldr	r3, [r7, #32]
 801535a:	2b00      	cmp	r3, #0
 801535c:	d109      	bne.n	8015372 <udp_sendto_if+0x76>
 801535e:	4b1b      	ldr	r3, [pc, #108]	; (80153cc <udp_sendto_if+0xd0>)
 8015360:	f240 2283 	movw	r2, #643	; 0x283
 8015364:	491e      	ldr	r1, [pc, #120]	; (80153e0 <udp_sendto_if+0xe4>)
 8015366:	481b      	ldr	r0, [pc, #108]	; (80153d4 <udp_sendto_if+0xd8>)
 8015368:	f00b f838 	bl	80203dc <iprintf>
 801536c:	f06f 030f 	mvn.w	r3, #15
 8015370:	e028      	b.n	80153c4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015372:	68fb      	ldr	r3, [r7, #12]
 8015374:	2b00      	cmp	r3, #0
 8015376:	d009      	beq.n	801538c <udp_sendto_if+0x90>
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	681b      	ldr	r3, [r3, #0]
 801537c:	2b00      	cmp	r3, #0
 801537e:	d005      	beq.n	801538c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	681b      	ldr	r3, [r3, #0]
 8015384:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015388:	2be0      	cmp	r3, #224	; 0xe0
 801538a:	d103      	bne.n	8015394 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801538c:	6a3b      	ldr	r3, [r7, #32]
 801538e:	3304      	adds	r3, #4
 8015390:	617b      	str	r3, [r7, #20]
 8015392:	e00b      	b.n	80153ac <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	681a      	ldr	r2, [r3, #0]
 8015398:	6a3b      	ldr	r3, [r7, #32]
 801539a:	3304      	adds	r3, #4
 801539c:	681b      	ldr	r3, [r3, #0]
 801539e:	429a      	cmp	r2, r3
 80153a0:	d002      	beq.n	80153a8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80153a2:	f06f 0303 	mvn.w	r3, #3
 80153a6:	e00d      	b.n	80153c4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80153a8:	68fb      	ldr	r3, [r7, #12]
 80153aa:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80153ac:	887a      	ldrh	r2, [r7, #2]
 80153ae:	697b      	ldr	r3, [r7, #20]
 80153b0:	9301      	str	r3, [sp, #4]
 80153b2:	6a3b      	ldr	r3, [r7, #32]
 80153b4:	9300      	str	r3, [sp, #0]
 80153b6:	4613      	mov	r3, r2
 80153b8:	687a      	ldr	r2, [r7, #4]
 80153ba:	68b9      	ldr	r1, [r7, #8]
 80153bc:	68f8      	ldr	r0, [r7, #12]
 80153be:	f000 f811 	bl	80153e4 <udp_sendto_if_src>
 80153c2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80153c4:	4618      	mov	r0, r3
 80153c6:	3718      	adds	r7, #24
 80153c8:	46bd      	mov	sp, r7
 80153ca:	bd80      	pop	{r7, pc}
 80153cc:	080239d0 	.word	0x080239d0
 80153d0:	08023c3c 	.word	0x08023c3c
 80153d4:	08023a24 	.word	0x08023a24
 80153d8:	08023c58 	.word	0x08023c58
 80153dc:	08023c74 	.word	0x08023c74
 80153e0:	08023c94 	.word	0x08023c94

080153e4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80153e4:	b580      	push	{r7, lr}
 80153e6:	b08c      	sub	sp, #48	; 0x30
 80153e8:	af04      	add	r7, sp, #16
 80153ea:	60f8      	str	r0, [r7, #12]
 80153ec:	60b9      	str	r1, [r7, #8]
 80153ee:	607a      	str	r2, [r7, #4]
 80153f0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d109      	bne.n	801540c <udp_sendto_if_src+0x28>
 80153f8:	4b8c      	ldr	r3, [pc, #560]	; (801562c <udp_sendto_if_src+0x248>)
 80153fa:	f240 22d1 	movw	r2, #721	; 0x2d1
 80153fe:	498c      	ldr	r1, [pc, #560]	; (8015630 <udp_sendto_if_src+0x24c>)
 8015400:	488c      	ldr	r0, [pc, #560]	; (8015634 <udp_sendto_if_src+0x250>)
 8015402:	f00a ffeb 	bl	80203dc <iprintf>
 8015406:	f06f 030f 	mvn.w	r3, #15
 801540a:	e10a      	b.n	8015622 <udp_sendto_if_src+0x23e>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801540c:	68bb      	ldr	r3, [r7, #8]
 801540e:	2b00      	cmp	r3, #0
 8015410:	d109      	bne.n	8015426 <udp_sendto_if_src+0x42>
 8015412:	4b86      	ldr	r3, [pc, #536]	; (801562c <udp_sendto_if_src+0x248>)
 8015414:	f240 22d2 	movw	r2, #722	; 0x2d2
 8015418:	4987      	ldr	r1, [pc, #540]	; (8015638 <udp_sendto_if_src+0x254>)
 801541a:	4886      	ldr	r0, [pc, #536]	; (8015634 <udp_sendto_if_src+0x250>)
 801541c:	f00a ffde 	bl	80203dc <iprintf>
 8015420:	f06f 030f 	mvn.w	r3, #15
 8015424:	e0fd      	b.n	8015622 <udp_sendto_if_src+0x23e>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	2b00      	cmp	r3, #0
 801542a:	d109      	bne.n	8015440 <udp_sendto_if_src+0x5c>
 801542c:	4b7f      	ldr	r3, [pc, #508]	; (801562c <udp_sendto_if_src+0x248>)
 801542e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8015432:	4982      	ldr	r1, [pc, #520]	; (801563c <udp_sendto_if_src+0x258>)
 8015434:	487f      	ldr	r0, [pc, #508]	; (8015634 <udp_sendto_if_src+0x250>)
 8015436:	f00a ffd1 	bl	80203dc <iprintf>
 801543a:	f06f 030f 	mvn.w	r3, #15
 801543e:	e0f0      	b.n	8015622 <udp_sendto_if_src+0x23e>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8015440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015442:	2b00      	cmp	r3, #0
 8015444:	d109      	bne.n	801545a <udp_sendto_if_src+0x76>
 8015446:	4b79      	ldr	r3, [pc, #484]	; (801562c <udp_sendto_if_src+0x248>)
 8015448:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801544c:	497c      	ldr	r1, [pc, #496]	; (8015640 <udp_sendto_if_src+0x25c>)
 801544e:	4879      	ldr	r0, [pc, #484]	; (8015634 <udp_sendto_if_src+0x250>)
 8015450:	f00a ffc4 	bl	80203dc <iprintf>
 8015454:	f06f 030f 	mvn.w	r3, #15
 8015458:	e0e3      	b.n	8015622 <udp_sendto_if_src+0x23e>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801545a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801545c:	2b00      	cmp	r3, #0
 801545e:	d109      	bne.n	8015474 <udp_sendto_if_src+0x90>
 8015460:	4b72      	ldr	r3, [pc, #456]	; (801562c <udp_sendto_if_src+0x248>)
 8015462:	f240 22d5 	movw	r2, #725	; 0x2d5
 8015466:	4977      	ldr	r1, [pc, #476]	; (8015644 <udp_sendto_if_src+0x260>)
 8015468:	4872      	ldr	r0, [pc, #456]	; (8015634 <udp_sendto_if_src+0x250>)
 801546a:	f00a ffb7 	bl	80203dc <iprintf>
 801546e:	f06f 030f 	mvn.w	r3, #15
 8015472:	e0d6      	b.n	8015622 <udp_sendto_if_src+0x23e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	8a5b      	ldrh	r3, [r3, #18]
 8015478:	2b00      	cmp	r3, #0
 801547a:	d115      	bne.n	80154a8 <udp_sendto_if_src+0xc4>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
 801547c:	4872      	ldr	r0, [pc, #456]	; (8015648 <udp_sendto_if_src+0x264>)
 801547e:	f00b f849 	bl	8020514 <puts>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8015482:	68f9      	ldr	r1, [r7, #12]
 8015484:	68fb      	ldr	r3, [r7, #12]
 8015486:	8a5b      	ldrh	r3, [r3, #18]
 8015488:	461a      	mov	r2, r3
 801548a:	68f8      	ldr	r0, [r7, #12]
 801548c:	f000 f8f2 	bl	8015674 <udp_bind>
 8015490:	4603      	mov	r3, r0
 8015492:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8015494:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015498:	2b00      	cmp	r3, #0
 801549a:	d005      	beq.n	80154a8 <udp_sendto_if_src+0xc4>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
 801549c:	486b      	ldr	r0, [pc, #428]	; (801564c <udp_sendto_if_src+0x268>)
 801549e:	f00b f839 	bl	8020514 <puts>
      return err;
 80154a2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80154a6:	e0bc      	b.n	8015622 <udp_sendto_if_src+0x23e>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80154a8:	68bb      	ldr	r3, [r7, #8]
 80154aa:	891b      	ldrh	r3, [r3, #8]
 80154ac:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80154b0:	4293      	cmp	r3, r2
 80154b2:	d902      	bls.n	80154ba <udp_sendto_if_src+0xd6>
    return ERR_MEM;
 80154b4:	f04f 33ff 	mov.w	r3, #4294967295
 80154b8:	e0b3      	b.n	8015622 <udp_sendto_if_src+0x23e>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80154ba:	2108      	movs	r1, #8
 80154bc:	68b8      	ldr	r0, [r7, #8]
 80154be:	f7f9 fb51 	bl	800eb64 <pbuf_add_header>
 80154c2:	4603      	mov	r3, r0
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d01d      	beq.n	8015504 <udp_sendto_if_src+0x120>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80154c8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80154cc:	2108      	movs	r1, #8
 80154ce:	2022      	movs	r0, #34	; 0x22
 80154d0:	f7f9 f8fa 	bl	800e6c8 <pbuf_alloc>
 80154d4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80154d6:	69fb      	ldr	r3, [r7, #28]
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d105      	bne.n	80154e8 <udp_sendto_if_src+0x104>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
 80154dc:	485c      	ldr	r0, [pc, #368]	; (8015650 <udp_sendto_if_src+0x26c>)
 80154de:	f00b f819 	bl	8020514 <puts>
      return ERR_MEM;
 80154e2:	f04f 33ff 	mov.w	r3, #4294967295
 80154e6:	e09c      	b.n	8015622 <udp_sendto_if_src+0x23e>
    }
    if (p->tot_len != 0) {
 80154e8:	68bb      	ldr	r3, [r7, #8]
 80154ea:	891b      	ldrh	r3, [r3, #8]
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d003      	beq.n	80154f8 <udp_sendto_if_src+0x114>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80154f0:	68b9      	ldr	r1, [r7, #8]
 80154f2:	69f8      	ldr	r0, [r7, #28]
 80154f4:	f7f9 fcf0 	bl	800eed8 <pbuf_chain>
    }
    /* first pbuf q points to header pbuf */
    LWIP_DEBUGF(UDP_DEBUG,
 80154f8:	68ba      	ldr	r2, [r7, #8]
 80154fa:	69f9      	ldr	r1, [r7, #28]
 80154fc:	4855      	ldr	r0, [pc, #340]	; (8015654 <udp_sendto_if_src+0x270>)
 80154fe:	f00a ff6d 	bl	80203dc <iprintf>
 8015502:	e005      	b.n	8015510 <udp_sendto_if_src+0x12c>
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8015504:	68bb      	ldr	r3, [r7, #8]
 8015506:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
 8015508:	68b9      	ldr	r1, [r7, #8]
 801550a:	4853      	ldr	r0, [pc, #332]	; (8015658 <udp_sendto_if_src+0x274>)
 801550c:	f00a ff66 	bl	80203dc <iprintf>
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8015510:	69fb      	ldr	r3, [r7, #28]
 8015512:	895b      	ldrh	r3, [r3, #10]
 8015514:	2b07      	cmp	r3, #7
 8015516:	d806      	bhi.n	8015526 <udp_sendto_if_src+0x142>
 8015518:	4b44      	ldr	r3, [pc, #272]	; (801562c <udp_sendto_if_src+0x248>)
 801551a:	f240 320d 	movw	r2, #781	; 0x30d
 801551e:	494f      	ldr	r1, [pc, #316]	; (801565c <udp_sendto_if_src+0x278>)
 8015520:	4844      	ldr	r0, [pc, #272]	; (8015634 <udp_sendto_if_src+0x250>)
 8015522:	f00a ff5b 	bl	80203dc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8015526:	69fb      	ldr	r3, [r7, #28]
 8015528:	685b      	ldr	r3, [r3, #4]
 801552a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	8a5b      	ldrh	r3, [r3, #18]
 8015530:	4618      	mov	r0, r3
 8015532:	f7f7 fa25 	bl	800c980 <lwip_htons>
 8015536:	4603      	mov	r3, r0
 8015538:	461a      	mov	r2, r3
 801553a:	697b      	ldr	r3, [r7, #20]
 801553c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801553e:	887b      	ldrh	r3, [r7, #2]
 8015540:	4618      	mov	r0, r3
 8015542:	f7f7 fa1d 	bl	800c980 <lwip_htons>
 8015546:	4603      	mov	r3, r0
 8015548:	461a      	mov	r2, r3
 801554a:	697b      	ldr	r3, [r7, #20]
 801554c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801554e:	697b      	ldr	r3, [r7, #20]
 8015550:	2200      	movs	r2, #0
 8015552:	719a      	strb	r2, [r3, #6]
 8015554:	2200      	movs	r2, #0
 8015556:	71da      	strb	r2, [r3, #7]

  /* Multicast Loop? */
#if LWIP_MULTICAST_TX_OPTIONS
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
 8015558:	68fb      	ldr	r3, [r7, #12]
 801555a:	7c1b      	ldrb	r3, [r3, #16]
 801555c:	f003 0308 	and.w	r3, r3, #8
 8015560:	2b00      	cmp	r3, #0
 8015562:	d00c      	beq.n	801557e <udp_sendto_if_src+0x19a>
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	681b      	ldr	r3, [r3, #0]
 8015568:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801556c:	2be0      	cmp	r3, #224	; 0xe0
 801556e:	d106      	bne.n	801557e <udp_sendto_if_src+0x19a>
    q->flags |= PBUF_FLAG_MCASTLOOP;
 8015570:	69fb      	ldr	r3, [r7, #28]
 8015572:	7b5b      	ldrb	r3, [r3, #13]
 8015574:	f043 0304 	orr.w	r3, r3, #4
 8015578:	b2da      	uxtb	r2, r3
 801557a:	69fb      	ldr	r3, [r7, #28]
 801557c:	735a      	strb	r2, [r3, #13]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: sending datagram of length %"U16_F"\n", q->tot_len));
 801557e:	69fb      	ldr	r3, [r7, #28]
 8015580:	891b      	ldrh	r3, [r3, #8]
 8015582:	4619      	mov	r1, r3
 8015584:	4836      	ldr	r0, [pc, #216]	; (8015660 <udp_sendto_if_src+0x27c>)
 8015586:	f00a ff29 	bl	80203dc <iprintf>

    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
 801558a:	69fb      	ldr	r3, [r7, #28]
 801558c:	891b      	ldrh	r3, [r3, #8]
 801558e:	4619      	mov	r1, r3
 8015590:	4834      	ldr	r0, [pc, #208]	; (8015664 <udp_sendto_if_src+0x280>)
 8015592:	f00a ff23 	bl	80203dc <iprintf>
    udphdr->len = lwip_htons(q->tot_len);
 8015596:	69fb      	ldr	r3, [r7, #28]
 8015598:	891b      	ldrh	r3, [r3, #8]
 801559a:	4618      	mov	r0, r3
 801559c:	f7f7 f9f0 	bl	800c980 <lwip_htons>
 80155a0:	4603      	mov	r3, r0
 80155a2:	461a      	mov	r2, r3
 80155a4:	697b      	ldr	r3, [r7, #20]
 80155a6:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80155a8:	2311      	movs	r3, #17
 80155aa:	74fb      	strb	r3, [r7, #19]
  }

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80155b4:	2be0      	cmp	r3, #224	; 0xe0
 80155b6:	d102      	bne.n	80155be <udp_sendto_if_src+0x1da>
 80155b8:	68fb      	ldr	r3, [r7, #12]
 80155ba:	7f5b      	ldrb	r3, [r3, #29]
 80155bc:	e001      	b.n	80155c2 <udp_sendto_if_src+0x1de>
 80155be:	68fb      	ldr	r3, [r7, #12]
 80155c0:	7adb      	ldrb	r3, [r3, #11]
 80155c2:	74bb      	strb	r3, [r7, #18]
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
 80155c4:	697b      	ldr	r3, [r7, #20]
 80155c6:	88db      	ldrh	r3, [r3, #6]
 80155c8:	b29b      	uxth	r3, r3
 80155ca:	4619      	mov	r1, r3
 80155cc:	4826      	ldr	r0, [pc, #152]	; (8015668 <udp_sendto_if_src+0x284>)
 80155ce:	f00a ff05 	bl	80203dc <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
 80155d2:	7cfb      	ldrb	r3, [r7, #19]
 80155d4:	4619      	mov	r1, r3
 80155d6:	4825      	ldr	r0, [pc, #148]	; (801566c <udp_sendto_if_src+0x288>)
 80155d8:	f00a ff00 	bl	80203dc <iprintf>
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	7a9b      	ldrb	r3, [r3, #10]
 80155e0:	7cb9      	ldrb	r1, [r7, #18]
 80155e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80155e4:	9202      	str	r2, [sp, #8]
 80155e6:	7cfa      	ldrb	r2, [r7, #19]
 80155e8:	9201      	str	r2, [sp, #4]
 80155ea:	9300      	str	r3, [sp, #0]
 80155ec:	460b      	mov	r3, r1
 80155ee:	687a      	ldr	r2, [r7, #4]
 80155f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80155f2:	69f8      	ldr	r0, [r7, #28]
 80155f4:	f004 fff3 	bl	801a5de <ip4_output_if_src>
 80155f8:	4603      	mov	r3, r0
 80155fa:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80155fc:	69fa      	ldr	r2, [r7, #28]
 80155fe:	68bb      	ldr	r3, [r7, #8]
 8015600:	429a      	cmp	r2, r3
 8015602:	d004      	beq.n	801560e <udp_sendto_if_src+0x22a>
    /* free the header pbuf */
    pbuf_free(q);
 8015604:	69f8      	ldr	r0, [r7, #28]
 8015606:	f7f9 fb43 	bl	800ec90 <pbuf_free>
    q = NULL;
 801560a:	2300      	movs	r3, #0
 801560c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
 801560e:	4b18      	ldr	r3, [pc, #96]	; (8015670 <udp_sendto_if_src+0x28c>)
 8015610:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8015614:	3301      	adds	r3, #1
 8015616:	b29a      	uxth	r2, r3
 8015618:	4b15      	ldr	r3, [pc, #84]	; (8015670 <udp_sendto_if_src+0x28c>)
 801561a:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
  return err;
 801561e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8015622:	4618      	mov	r0, r3
 8015624:	3720      	adds	r7, #32
 8015626:	46bd      	mov	sp, r7
 8015628:	bd80      	pop	{r7, pc}
 801562a:	bf00      	nop
 801562c:	080239d0 	.word	0x080239d0
 8015630:	08023cb4 	.word	0x08023cb4
 8015634:	08023a24 	.word	0x08023a24
 8015638:	08023cd4 	.word	0x08023cd4
 801563c:	08023cf4 	.word	0x08023cf4
 8015640:	08023d18 	.word	0x08023d18
 8015644:	08023d3c 	.word	0x08023d3c
 8015648:	08023d60 	.word	0x08023d60
 801564c:	08023d90 	.word	0x08023d90
 8015650:	08023db4 	.word	0x08023db4
 8015654:	08023dd8 	.word	0x08023dd8
 8015658:	08023e10 	.word	0x08023e10
 801565c:	08023e3c 	.word	0x08023e3c
 8015660:	08023e6c 	.word	0x08023e6c
 8015664:	08023e98 	.word	0x08023e98
 8015668:	08023ebc 	.word	0x08023ebc
 801566c:	08023edc 	.word	0x08023edc
 8015670:	2000a3ec 	.word	0x2000a3ec

08015674 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015674:	b580      	push	{r7, lr}
 8015676:	b088      	sub	sp, #32
 8015678:	af02      	add	r7, sp, #8
 801567a:	60f8      	str	r0, [r7, #12]
 801567c:	60b9      	str	r1, [r7, #8]
 801567e:	4613      	mov	r3, r2
 8015680:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8015682:	68bb      	ldr	r3, [r7, #8]
 8015684:	2b00      	cmp	r3, #0
 8015686:	d101      	bne.n	801568c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8015688:	4b65      	ldr	r3, [pc, #404]	; (8015820 <udp_bind+0x1ac>)
 801568a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801568c:	68fb      	ldr	r3, [r7, #12]
 801568e:	2b00      	cmp	r3, #0
 8015690:	d109      	bne.n	80156a6 <udp_bind+0x32>
 8015692:	4b64      	ldr	r3, [pc, #400]	; (8015824 <udp_bind+0x1b0>)
 8015694:	f240 32b7 	movw	r2, #951	; 0x3b7
 8015698:	4963      	ldr	r1, [pc, #396]	; (8015828 <udp_bind+0x1b4>)
 801569a:	4864      	ldr	r0, [pc, #400]	; (801582c <udp_bind+0x1b8>)
 801569c:	f00a fe9e 	bl	80203dc <iprintf>
 80156a0:	f06f 030f 	mvn.w	r3, #15
 80156a4:	e0b7      	b.n	8015816 <udp_bind+0x1a2>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
 80156a6:	4862      	ldr	r0, [pc, #392]	; (8015830 <udp_bind+0x1bc>)
 80156a8:	f00a fe98 	bl	80203dc <iprintf>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
 80156ac:	68bb      	ldr	r3, [r7, #8]
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d003      	beq.n	80156ba <udp_bind+0x46>
 80156b2:	68bb      	ldr	r3, [r7, #8]
 80156b4:	781b      	ldrb	r3, [r3, #0]
 80156b6:	4619      	mov	r1, r3
 80156b8:	e000      	b.n	80156bc <udp_bind+0x48>
 80156ba:	2100      	movs	r1, #0
 80156bc:	68bb      	ldr	r3, [r7, #8]
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d004      	beq.n	80156cc <udp_bind+0x58>
 80156c2:	68bb      	ldr	r3, [r7, #8]
 80156c4:	3301      	adds	r3, #1
 80156c6:	781b      	ldrb	r3, [r3, #0]
 80156c8:	461a      	mov	r2, r3
 80156ca:	e000      	b.n	80156ce <udp_bind+0x5a>
 80156cc:	2200      	movs	r2, #0
 80156ce:	68bb      	ldr	r3, [r7, #8]
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d004      	beq.n	80156de <udp_bind+0x6a>
 80156d4:	68bb      	ldr	r3, [r7, #8]
 80156d6:	3302      	adds	r3, #2
 80156d8:	781b      	ldrb	r3, [r3, #0]
 80156da:	4618      	mov	r0, r3
 80156dc:	e000      	b.n	80156e0 <udp_bind+0x6c>
 80156de:	2000      	movs	r0, #0
 80156e0:	68bb      	ldr	r3, [r7, #8]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d003      	beq.n	80156ee <udp_bind+0x7a>
 80156e6:	68bb      	ldr	r3, [r7, #8]
 80156e8:	3303      	adds	r3, #3
 80156ea:	781b      	ldrb	r3, [r3, #0]
 80156ec:	e000      	b.n	80156f0 <udp_bind+0x7c>
 80156ee:	2300      	movs	r3, #0
 80156f0:	9300      	str	r3, [sp, #0]
 80156f2:	4603      	mov	r3, r0
 80156f4:	484f      	ldr	r0, [pc, #316]	; (8015834 <udp_bind+0x1c0>)
 80156f6:	f00a fe71 	bl	80203dc <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));
 80156fa:	88fb      	ldrh	r3, [r7, #6]
 80156fc:	4619      	mov	r1, r3
 80156fe:	484e      	ldr	r0, [pc, #312]	; (8015838 <udp_bind+0x1c4>)
 8015700:	f00a fe6c 	bl	80203dc <iprintf>

  rebind = 0;
 8015704:	2300      	movs	r3, #0
 8015706:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015708:	4b4c      	ldr	r3, [pc, #304]	; (801583c <udp_bind+0x1c8>)
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	617b      	str	r3, [r7, #20]
 801570e:	e009      	b.n	8015724 <udp_bind+0xb0>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8015710:	68fa      	ldr	r2, [r7, #12]
 8015712:	697b      	ldr	r3, [r7, #20]
 8015714:	429a      	cmp	r2, r3
 8015716:	d102      	bne.n	801571e <udp_bind+0xaa>
      rebind = 1;
 8015718:	2301      	movs	r3, #1
 801571a:	74fb      	strb	r3, [r7, #19]
      break;
 801571c:	e005      	b.n	801572a <udp_bind+0xb6>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801571e:	697b      	ldr	r3, [r7, #20]
 8015720:	68db      	ldr	r3, [r3, #12]
 8015722:	617b      	str	r3, [r7, #20]
 8015724:	697b      	ldr	r3, [r7, #20]
 8015726:	2b00      	cmp	r3, #0
 8015728:	d1f2      	bne.n	8015710 <udp_bind+0x9c>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801572a:	88fb      	ldrh	r3, [r7, #6]
 801572c:	2b00      	cmp	r3, #0
 801572e:	d10c      	bne.n	801574a <udp_bind+0xd6>
    port = udp_new_port();
 8015730:	f7ff fa82 	bl	8014c38 <udp_new_port>
 8015734:	4603      	mov	r3, r0
 8015736:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8015738:	88fb      	ldrh	r3, [r7, #6]
 801573a:	2b00      	cmp	r3, #0
 801573c:	d134      	bne.n	80157a8 <udp_bind+0x134>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
 801573e:	4840      	ldr	r0, [pc, #256]	; (8015840 <udp_bind+0x1cc>)
 8015740:	f00a fee8 	bl	8020514 <puts>
      return ERR_USE;
 8015744:	f06f 0307 	mvn.w	r3, #7
 8015748:	e065      	b.n	8015816 <udp_bind+0x1a2>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801574a:	4b3c      	ldr	r3, [pc, #240]	; (801583c <udp_bind+0x1c8>)
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	617b      	str	r3, [r7, #20]
 8015750:	e027      	b.n	80157a2 <udp_bind+0x12e>
      if (pcb != ipcb) {
 8015752:	68fa      	ldr	r2, [r7, #12]
 8015754:	697b      	ldr	r3, [r7, #20]
 8015756:	429a      	cmp	r2, r3
 8015758:	d020      	beq.n	801579c <udp_bind+0x128>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801575a:	697b      	ldr	r3, [r7, #20]
 801575c:	8a5b      	ldrh	r3, [r3, #18]
 801575e:	88fa      	ldrh	r2, [r7, #6]
 8015760:	429a      	cmp	r2, r3
 8015762:	d11b      	bne.n	801579c <udp_bind+0x128>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015764:	697b      	ldr	r3, [r7, #20]
 8015766:	681a      	ldr	r2, [r3, #0]
 8015768:	68bb      	ldr	r3, [r7, #8]
 801576a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801576c:	429a      	cmp	r2, r3
 801576e:	d00d      	beq.n	801578c <udp_bind+0x118>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015770:	68bb      	ldr	r3, [r7, #8]
 8015772:	2b00      	cmp	r3, #0
 8015774:	d00a      	beq.n	801578c <udp_bind+0x118>
 8015776:	68bb      	ldr	r3, [r7, #8]
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	2b00      	cmp	r3, #0
 801577c:	d006      	beq.n	801578c <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 801577e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015780:	2b00      	cmp	r3, #0
 8015782:	d003      	beq.n	801578c <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 8015784:	697b      	ldr	r3, [r7, #20]
 8015786:	681b      	ldr	r3, [r3, #0]
 8015788:	2b00      	cmp	r3, #0
 801578a:	d107      	bne.n	801579c <udp_bind+0x128>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
 801578c:	88fb      	ldrh	r3, [r7, #6]
 801578e:	4619      	mov	r1, r3
 8015790:	482c      	ldr	r0, [pc, #176]	; (8015844 <udp_bind+0x1d0>)
 8015792:	f00a fe23 	bl	80203dc <iprintf>
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8015796:	f06f 0307 	mvn.w	r3, #7
 801579a:	e03c      	b.n	8015816 <udp_bind+0x1a2>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801579c:	697b      	ldr	r3, [r7, #20]
 801579e:	68db      	ldr	r3, [r3, #12]
 80157a0:	617b      	str	r3, [r7, #20]
 80157a2:	697b      	ldr	r3, [r7, #20]
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d1d4      	bne.n	8015752 <udp_bind+0xde>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80157a8:	68bb      	ldr	r3, [r7, #8]
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d002      	beq.n	80157b4 <udp_bind+0x140>
 80157ae:	68bb      	ldr	r3, [r7, #8]
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	e000      	b.n	80157b6 <udp_bind+0x142>
 80157b4:	2300      	movs	r3, #0
 80157b6:	68fa      	ldr	r2, [r7, #12]
 80157b8:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	88fa      	ldrh	r2, [r7, #6]
 80157be:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80157c0:	7cfb      	ldrb	r3, [r7, #19]
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	d106      	bne.n	80157d4 <udp_bind+0x160>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80157c6:	4b1d      	ldr	r3, [pc, #116]	; (801583c <udp_bind+0x1c8>)
 80157c8:	681a      	ldr	r2, [r3, #0]
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80157ce:	4a1b      	ldr	r2, [pc, #108]	; (801583c <udp_bind+0x1c8>)
 80157d0:	68fb      	ldr	r3, [r7, #12]
 80157d2:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
 80157d4:	481c      	ldr	r0, [pc, #112]	; (8015848 <udp_bind+0x1d4>)
 80157d6:	f00a fe01 	bl	80203dc <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	681b      	ldr	r3, [r3, #0]
 80157de:	b2db      	uxtb	r3, r3
 80157e0:	4619      	mov	r1, r3
 80157e2:	68fb      	ldr	r3, [r7, #12]
 80157e4:	681b      	ldr	r3, [r3, #0]
 80157e6:	0a1b      	lsrs	r3, r3, #8
 80157e8:	b2db      	uxtb	r3, r3
 80157ea:	461a      	mov	r2, r3
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	0c1b      	lsrs	r3, r3, #16
 80157f2:	b2db      	uxtb	r3, r3
 80157f4:	4618      	mov	r0, r3
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	0e1b      	lsrs	r3, r3, #24
 80157fc:	b2db      	uxtb	r3, r3
 80157fe:	9300      	str	r3, [sp, #0]
 8015800:	4603      	mov	r3, r0
 8015802:	480c      	ldr	r0, [pc, #48]	; (8015834 <udp_bind+0x1c0>)
 8015804:	f00a fdea 	bl	80203dc <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	8a5b      	ldrh	r3, [r3, #18]
 801580c:	4619      	mov	r1, r3
 801580e:	480f      	ldr	r0, [pc, #60]	; (801584c <udp_bind+0x1d8>)
 8015810:	f00a fde4 	bl	80203dc <iprintf>
  return ERR_OK;
 8015814:	2300      	movs	r3, #0
}
 8015816:	4618      	mov	r0, r3
 8015818:	3718      	adds	r7, #24
 801581a:	46bd      	mov	sp, r7
 801581c:	bd80      	pop	{r7, pc}
 801581e:	bf00      	nop
 8015820:	08026bf4 	.word	0x08026bf4
 8015824:	080239d0 	.word	0x080239d0
 8015828:	08023f04 	.word	0x08023f04
 801582c:	08023a24 	.word	0x08023a24
 8015830:	08023f1c 	.word	0x08023f1c
 8015834:	08023b14 	.word	0x08023b14
 8015838:	08023f30 	.word	0x08023f30
 801583c:	2000a52c 	.word	0x2000a52c
 8015840:	08023f40 	.word	0x08023f40
 8015844:	08023f60 	.word	0x08023f60
 8015848:	08023f98 	.word	0x08023f98
 801584c:	08023fac 	.word	0x08023fac

08015850 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015850:	b580      	push	{r7, lr}
 8015852:	b088      	sub	sp, #32
 8015854:	af02      	add	r7, sp, #8
 8015856:	60f8      	str	r0, [r7, #12]
 8015858:	60b9      	str	r1, [r7, #8]
 801585a:	4613      	mov	r3, r2
 801585c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801585e:	68fb      	ldr	r3, [r7, #12]
 8015860:	2b00      	cmp	r3, #0
 8015862:	d109      	bne.n	8015878 <udp_connect+0x28>
 8015864:	4b3c      	ldr	r3, [pc, #240]	; (8015958 <udp_connect+0x108>)
 8015866:	f240 4235 	movw	r2, #1077	; 0x435
 801586a:	493c      	ldr	r1, [pc, #240]	; (801595c <udp_connect+0x10c>)
 801586c:	483c      	ldr	r0, [pc, #240]	; (8015960 <udp_connect+0x110>)
 801586e:	f00a fdb5 	bl	80203dc <iprintf>
 8015872:	f06f 030f 	mvn.w	r3, #15
 8015876:	e06b      	b.n	8015950 <udp_connect+0x100>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8015878:	68bb      	ldr	r3, [r7, #8]
 801587a:	2b00      	cmp	r3, #0
 801587c:	d109      	bne.n	8015892 <udp_connect+0x42>
 801587e:	4b36      	ldr	r3, [pc, #216]	; (8015958 <udp_connect+0x108>)
 8015880:	f240 4236 	movw	r2, #1078	; 0x436
 8015884:	4937      	ldr	r1, [pc, #220]	; (8015964 <udp_connect+0x114>)
 8015886:	4836      	ldr	r0, [pc, #216]	; (8015960 <udp_connect+0x110>)
 8015888:	f00a fda8 	bl	80203dc <iprintf>
 801588c:	f06f 030f 	mvn.w	r3, #15
 8015890:	e05e      	b.n	8015950 <udp_connect+0x100>

  if (pcb->local_port == 0) {
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	8a5b      	ldrh	r3, [r3, #18]
 8015896:	2b00      	cmp	r3, #0
 8015898:	d10f      	bne.n	80158ba <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801589a:	68f9      	ldr	r1, [r7, #12]
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	8a5b      	ldrh	r3, [r3, #18]
 80158a0:	461a      	mov	r2, r3
 80158a2:	68f8      	ldr	r0, [r7, #12]
 80158a4:	f7ff fee6 	bl	8015674 <udp_bind>
 80158a8:	4603      	mov	r3, r0
 80158aa:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80158ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d002      	beq.n	80158ba <udp_connect+0x6a>
      return err;
 80158b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80158b8:	e04a      	b.n	8015950 <udp_connect+0x100>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80158ba:	68bb      	ldr	r3, [r7, #8]
 80158bc:	2b00      	cmp	r3, #0
 80158be:	d002      	beq.n	80158c6 <udp_connect+0x76>
 80158c0:	68bb      	ldr	r3, [r7, #8]
 80158c2:	681b      	ldr	r3, [r3, #0]
 80158c4:	e000      	b.n	80158c8 <udp_connect+0x78>
 80158c6:	2300      	movs	r3, #0
 80158c8:	68fa      	ldr	r2, [r7, #12]
 80158ca:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80158cc:	68fb      	ldr	r3, [r7, #12]
 80158ce:	88fa      	ldrh	r2, [r7, #6]
 80158d0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80158d2:	68fb      	ldr	r3, [r7, #12]
 80158d4:	7c1b      	ldrb	r3, [r3, #16]
 80158d6:	f043 0304 	orr.w	r3, r3, #4
 80158da:	b2da      	uxtb	r2, r3
 80158dc:	68fb      	ldr	r3, [r7, #12]
 80158de:	741a      	strb	r2, [r3, #16]

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_connect: connected to "));
 80158e0:	4821      	ldr	r0, [pc, #132]	; (8015968 <udp_connect+0x118>)
 80158e2:	f00a fd7b 	bl	80203dc <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
 80158e6:	68fb      	ldr	r3, [r7, #12]
 80158e8:	685b      	ldr	r3, [r3, #4]
 80158ea:	b2db      	uxtb	r3, r3
 80158ec:	4619      	mov	r1, r3
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	685b      	ldr	r3, [r3, #4]
 80158f2:	0a1b      	lsrs	r3, r3, #8
 80158f4:	b2db      	uxtb	r3, r3
 80158f6:	461a      	mov	r2, r3
 80158f8:	68fb      	ldr	r3, [r7, #12]
 80158fa:	685b      	ldr	r3, [r3, #4]
 80158fc:	0c1b      	lsrs	r3, r3, #16
 80158fe:	b2db      	uxtb	r3, r3
 8015900:	4618      	mov	r0, r3
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	685b      	ldr	r3, [r3, #4]
 8015906:	0e1b      	lsrs	r3, r3, #24
 8015908:	b2db      	uxtb	r3, r3
 801590a:	9300      	str	r3, [sp, #0]
 801590c:	4603      	mov	r3, r0
 801590e:	4817      	ldr	r0, [pc, #92]	; (801596c <udp_connect+0x11c>)
 8015910:	f00a fd64 	bl	80203dc <iprintf>
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));
 8015914:	68fb      	ldr	r3, [r7, #12]
 8015916:	8a9b      	ldrh	r3, [r3, #20]
 8015918:	4619      	mov	r1, r3
 801591a:	4815      	ldr	r0, [pc, #84]	; (8015970 <udp_connect+0x120>)
 801591c:	f00a fd5e 	bl	80203dc <iprintf>

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015920:	4b14      	ldr	r3, [pc, #80]	; (8015974 <udp_connect+0x124>)
 8015922:	681b      	ldr	r3, [r3, #0]
 8015924:	617b      	str	r3, [r7, #20]
 8015926:	e008      	b.n	801593a <udp_connect+0xea>
    if (pcb == ipcb) {
 8015928:	68fa      	ldr	r2, [r7, #12]
 801592a:	697b      	ldr	r3, [r7, #20]
 801592c:	429a      	cmp	r2, r3
 801592e:	d101      	bne.n	8015934 <udp_connect+0xe4>
      /* already on the list, just return */
      return ERR_OK;
 8015930:	2300      	movs	r3, #0
 8015932:	e00d      	b.n	8015950 <udp_connect+0x100>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015934:	697b      	ldr	r3, [r7, #20]
 8015936:	68db      	ldr	r3, [r3, #12]
 8015938:	617b      	str	r3, [r7, #20]
 801593a:	697b      	ldr	r3, [r7, #20]
 801593c:	2b00      	cmp	r3, #0
 801593e:	d1f3      	bne.n	8015928 <udp_connect+0xd8>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8015940:	4b0c      	ldr	r3, [pc, #48]	; (8015974 <udp_connect+0x124>)
 8015942:	681a      	ldr	r2, [r3, #0]
 8015944:	68fb      	ldr	r3, [r7, #12]
 8015946:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8015948:	4a0a      	ldr	r2, [pc, #40]	; (8015974 <udp_connect+0x124>)
 801594a:	68fb      	ldr	r3, [r7, #12]
 801594c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801594e:	2300      	movs	r3, #0
}
 8015950:	4618      	mov	r0, r3
 8015952:	3718      	adds	r7, #24
 8015954:	46bd      	mov	sp, r7
 8015956:	bd80      	pop	{r7, pc}
 8015958:	080239d0 	.word	0x080239d0
 801595c:	08023fbc 	.word	0x08023fbc
 8015960:	08023a24 	.word	0x08023a24
 8015964:	08023fd8 	.word	0x08023fd8
 8015968:	08023ff4 	.word	0x08023ff4
 801596c:	08023b14 	.word	0x08023b14
 8015970:	08023fac 	.word	0x08023fac
 8015974:	2000a52c 	.word	0x2000a52c

08015978 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8015978:	b580      	push	{r7, lr}
 801597a:	b082      	sub	sp, #8
 801597c:	af00      	add	r7, sp, #0
 801597e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	2b00      	cmp	r3, #0
 8015984:	d107      	bne.n	8015996 <udp_disconnect+0x1e>
 8015986:	4b0d      	ldr	r3, [pc, #52]	; (80159bc <udp_disconnect+0x44>)
 8015988:	f240 426a 	movw	r2, #1130	; 0x46a
 801598c:	490c      	ldr	r1, [pc, #48]	; (80159c0 <udp_disconnect+0x48>)
 801598e:	480d      	ldr	r0, [pc, #52]	; (80159c4 <udp_disconnect+0x4c>)
 8015990:	f00a fd24 	bl	80203dc <iprintf>
 8015994:	e00f      	b.n	80159b6 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	2200      	movs	r2, #0
 801599a:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	2200      	movs	r2, #0
 80159a0:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	2200      	movs	r2, #0
 80159a6:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	7c1b      	ldrb	r3, [r3, #16]
 80159ac:	f023 0304 	bic.w	r3, r3, #4
 80159b0:	b2da      	uxtb	r2, r3
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	741a      	strb	r2, [r3, #16]
}
 80159b6:	3708      	adds	r7, #8
 80159b8:	46bd      	mov	sp, r7
 80159ba:	bd80      	pop	{r7, pc}
 80159bc:	080239d0 	.word	0x080239d0
 80159c0:	08024010 	.word	0x08024010
 80159c4:	08023a24 	.word	0x08023a24

080159c8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80159c8:	b580      	push	{r7, lr}
 80159ca:	b084      	sub	sp, #16
 80159cc:	af00      	add	r7, sp, #0
 80159ce:	60f8      	str	r0, [r7, #12]
 80159d0:	60b9      	str	r1, [r7, #8]
 80159d2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d107      	bne.n	80159ea <udp_recv+0x22>
 80159da:	4b08      	ldr	r3, [pc, #32]	; (80159fc <udp_recv+0x34>)
 80159dc:	f240 428a 	movw	r2, #1162	; 0x48a
 80159e0:	4907      	ldr	r1, [pc, #28]	; (8015a00 <udp_recv+0x38>)
 80159e2:	4808      	ldr	r0, [pc, #32]	; (8015a04 <udp_recv+0x3c>)
 80159e4:	f00a fcfa 	bl	80203dc <iprintf>
 80159e8:	e005      	b.n	80159f6 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80159ea:	68fb      	ldr	r3, [r7, #12]
 80159ec:	68ba      	ldr	r2, [r7, #8]
 80159ee:	621a      	str	r2, [r3, #32]
  pcb->recv_arg = recv_arg;
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	687a      	ldr	r2, [r7, #4]
 80159f4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80159f6:	3710      	adds	r7, #16
 80159f8:	46bd      	mov	sp, r7
 80159fa:	bd80      	pop	{r7, pc}
 80159fc:	080239d0 	.word	0x080239d0
 8015a00:	0802402c 	.word	0x0802402c
 8015a04:	08023a24 	.word	0x08023a24

08015a08 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8015a08:	b580      	push	{r7, lr}
 8015a0a:	b084      	sub	sp, #16
 8015a0c:	af00      	add	r7, sp, #0
 8015a0e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d107      	bne.n	8015a26 <udp_remove+0x1e>
 8015a16:	4b19      	ldr	r3, [pc, #100]	; (8015a7c <udp_remove+0x74>)
 8015a18:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8015a1c:	4918      	ldr	r1, [pc, #96]	; (8015a80 <udp_remove+0x78>)
 8015a1e:	4819      	ldr	r0, [pc, #100]	; (8015a84 <udp_remove+0x7c>)
 8015a20:	f00a fcdc 	bl	80203dc <iprintf>
 8015a24:	e026      	b.n	8015a74 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8015a26:	4b18      	ldr	r3, [pc, #96]	; (8015a88 <udp_remove+0x80>)
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	687a      	ldr	r2, [r7, #4]
 8015a2c:	429a      	cmp	r2, r3
 8015a2e:	d105      	bne.n	8015a3c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8015a30:	4b15      	ldr	r3, [pc, #84]	; (8015a88 <udp_remove+0x80>)
 8015a32:	681b      	ldr	r3, [r3, #0]
 8015a34:	68db      	ldr	r3, [r3, #12]
 8015a36:	4a14      	ldr	r2, [pc, #80]	; (8015a88 <udp_remove+0x80>)
 8015a38:	6013      	str	r3, [r2, #0]
 8015a3a:	e017      	b.n	8015a6c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015a3c:	4b12      	ldr	r3, [pc, #72]	; (8015a88 <udp_remove+0x80>)
 8015a3e:	681b      	ldr	r3, [r3, #0]
 8015a40:	60fb      	str	r3, [r7, #12]
 8015a42:	e010      	b.n	8015a66 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8015a44:	68fb      	ldr	r3, [r7, #12]
 8015a46:	68db      	ldr	r3, [r3, #12]
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d009      	beq.n	8015a60 <udp_remove+0x58>
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	68db      	ldr	r3, [r3, #12]
 8015a50:	687a      	ldr	r2, [r7, #4]
 8015a52:	429a      	cmp	r2, r3
 8015a54:	d104      	bne.n	8015a60 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	68da      	ldr	r2, [r3, #12]
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	60da      	str	r2, [r3, #12]
        break;
 8015a5e:	e005      	b.n	8015a6c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015a60:	68fb      	ldr	r3, [r7, #12]
 8015a62:	68db      	ldr	r3, [r3, #12]
 8015a64:	60fb      	str	r3, [r7, #12]
 8015a66:	68fb      	ldr	r3, [r7, #12]
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d1eb      	bne.n	8015a44 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8015a6c:	6879      	ldr	r1, [r7, #4]
 8015a6e:	2000      	movs	r0, #0
 8015a70:	f7f8 f952 	bl	800dd18 <memp_free>
}
 8015a74:	3710      	adds	r7, #16
 8015a76:	46bd      	mov	sp, r7
 8015a78:	bd80      	pop	{r7, pc}
 8015a7a:	bf00      	nop
 8015a7c:	080239d0 	.word	0x080239d0
 8015a80:	08024044 	.word	0x08024044
 8015a84:	08023a24 	.word	0x08023a24
 8015a88:	2000a52c 	.word	0x2000a52c

08015a8c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8015a8c:	b580      	push	{r7, lr}
 8015a8e:	b082      	sub	sp, #8
 8015a90:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8015a92:	2000      	movs	r0, #0
 8015a94:	f7f8 f8c4 	bl	800dc20 <memp_malloc>
 8015a98:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d00a      	beq.n	8015ab6 <udp_new+0x2a>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8015aa0:	2228      	movs	r2, #40	; 0x28
 8015aa2:	2100      	movs	r1, #0
 8015aa4:	6878      	ldr	r0, [r7, #4]
 8015aa6:	f00a fbe7 	bl	8020278 <memset>
    pcb->ttl = UDP_TTL;
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	22ff      	movs	r2, #255	; 0xff
 8015aae:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	22ff      	movs	r2, #255	; 0xff
 8015ab4:	775a      	strb	r2, [r3, #29]
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8015ab6:	687b      	ldr	r3, [r7, #4]
}
 8015ab8:	4618      	mov	r0, r3
 8015aba:	3708      	adds	r7, #8
 8015abc:	46bd      	mov	sp, r7
 8015abe:	bd80      	pop	{r7, pc}

08015ac0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015ac0:	b480      	push	{r7}
 8015ac2:	b085      	sub	sp, #20
 8015ac4:	af00      	add	r7, sp, #0
 8015ac6:	6078      	str	r0, [r7, #4]
 8015ac8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d01e      	beq.n	8015b0e <udp_netif_ip_addr_changed+0x4e>
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	681b      	ldr	r3, [r3, #0]
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d01a      	beq.n	8015b0e <udp_netif_ip_addr_changed+0x4e>
 8015ad8:	683b      	ldr	r3, [r7, #0]
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d017      	beq.n	8015b0e <udp_netif_ip_addr_changed+0x4e>
 8015ade:	683b      	ldr	r3, [r7, #0]
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d013      	beq.n	8015b0e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015ae6:	4b0d      	ldr	r3, [pc, #52]	; (8015b1c <udp_netif_ip_addr_changed+0x5c>)
 8015ae8:	681b      	ldr	r3, [r3, #0]
 8015aea:	60fb      	str	r3, [r7, #12]
 8015aec:	e00c      	b.n	8015b08 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8015aee:	68fb      	ldr	r3, [r7, #12]
 8015af0:	681a      	ldr	r2, [r3, #0]
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	681b      	ldr	r3, [r3, #0]
 8015af6:	429a      	cmp	r2, r3
 8015af8:	d103      	bne.n	8015b02 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8015afa:	683b      	ldr	r3, [r7, #0]
 8015afc:	681a      	ldr	r2, [r3, #0]
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015b02:	68fb      	ldr	r3, [r7, #12]
 8015b04:	68db      	ldr	r3, [r3, #12]
 8015b06:	60fb      	str	r3, [r7, #12]
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d1ef      	bne.n	8015aee <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8015b0e:	bf00      	nop
 8015b10:	3714      	adds	r7, #20
 8015b12:	46bd      	mov	sp, r7
 8015b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b18:	4770      	bx	lr
 8015b1a:	bf00      	nop
 8015b1c:	2000a52c 	.word	0x2000a52c

08015b20 <udp_debug_print>:
 *
 * @param udphdr pointer to the udp header in memory.
 */
void
udp_debug_print(struct udp_hdr *udphdr)
{
 8015b20:	b590      	push	{r4, r7, lr}
 8015b22:	b083      	sub	sp, #12
 8015b24:	af00      	add	r7, sp, #0
 8015b26:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(UDP_DEBUG, ("UDP header:\n"));
 8015b28:	481b      	ldr	r0, [pc, #108]	; (8015b98 <udp_debug_print+0x78>)
 8015b2a:	f00a fcf3 	bl	8020514 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 8015b2e:	481b      	ldr	r0, [pc, #108]	; (8015b9c <udp_debug_print+0x7c>)
 8015b30:	f00a fcf0 	bl	8020514 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     %5"U16_F"     | (src port, dest port)\n",
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	881b      	ldrh	r3, [r3, #0]
 8015b38:	b29b      	uxth	r3, r3
 8015b3a:	4618      	mov	r0, r3
 8015b3c:	f7f6 ff20 	bl	800c980 <lwip_htons>
 8015b40:	4603      	mov	r3, r0
 8015b42:	461c      	mov	r4, r3
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	885b      	ldrh	r3, [r3, #2]
 8015b48:	b29b      	uxth	r3, r3
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	f7f6 ff18 	bl	800c980 <lwip_htons>
 8015b50:	4603      	mov	r3, r0
 8015b52:	461a      	mov	r2, r3
 8015b54:	4621      	mov	r1, r4
 8015b56:	4812      	ldr	r0, [pc, #72]	; (8015ba0 <udp_debug_print+0x80>)
 8015b58:	f00a fc40 	bl	80203dc <iprintf>
                          lwip_ntohs(udphdr->src), lwip_ntohs(udphdr->dest)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 8015b5c:	480f      	ldr	r0, [pc, #60]	; (8015b9c <udp_debug_print+0x7c>)
 8015b5e:	f00a fcd9 	bl	8020514 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     0x%04"X16_F"    | (len, chksum)\n",
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	889b      	ldrh	r3, [r3, #4]
 8015b66:	b29b      	uxth	r3, r3
 8015b68:	4618      	mov	r0, r3
 8015b6a:	f7f6 ff09 	bl	800c980 <lwip_htons>
 8015b6e:	4603      	mov	r3, r0
 8015b70:	461c      	mov	r4, r3
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	88db      	ldrh	r3, [r3, #6]
 8015b76:	b29b      	uxth	r3, r3
 8015b78:	4618      	mov	r0, r3
 8015b7a:	f7f6 ff01 	bl	800c980 <lwip_htons>
 8015b7e:	4603      	mov	r3, r0
 8015b80:	461a      	mov	r2, r3
 8015b82:	4621      	mov	r1, r4
 8015b84:	4807      	ldr	r0, [pc, #28]	; (8015ba4 <udp_debug_print+0x84>)
 8015b86:	f00a fc29 	bl	80203dc <iprintf>
                          lwip_ntohs(udphdr->len), lwip_ntohs(udphdr->chksum)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 8015b8a:	4804      	ldr	r0, [pc, #16]	; (8015b9c <udp_debug_print+0x7c>)
 8015b8c:	f00a fcc2 	bl	8020514 <puts>
}
 8015b90:	bf00      	nop
 8015b92:	370c      	adds	r7, #12
 8015b94:	46bd      	mov	sp, r7
 8015b96:	bd90      	pop	{r4, r7, pc}
 8015b98:	0802405c 	.word	0x0802405c
 8015b9c:	08024068 	.word	0x08024068
 8015ba0:	0802408c 	.word	0x0802408c
 8015ba4:	080240c4 	.word	0x080240c4

08015ba8 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8015ba8:	b580      	push	{r7, lr}
 8015baa:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8015bac:	4b20      	ldr	r3, [pc, #128]	; (8015c30 <dhcp_inc_pcb_refcount+0x88>)
 8015bae:	781b      	ldrb	r3, [r3, #0]
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d133      	bne.n	8015c1c <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8015bb4:	4b1f      	ldr	r3, [pc, #124]	; (8015c34 <dhcp_inc_pcb_refcount+0x8c>)
 8015bb6:	681b      	ldr	r3, [r3, #0]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d005      	beq.n	8015bc8 <dhcp_inc_pcb_refcount+0x20>
 8015bbc:	4b1e      	ldr	r3, [pc, #120]	; (8015c38 <dhcp_inc_pcb_refcount+0x90>)
 8015bbe:	22e5      	movs	r2, #229	; 0xe5
 8015bc0:	491e      	ldr	r1, [pc, #120]	; (8015c3c <dhcp_inc_pcb_refcount+0x94>)
 8015bc2:	481f      	ldr	r0, [pc, #124]	; (8015c40 <dhcp_inc_pcb_refcount+0x98>)
 8015bc4:	f00a fc0a 	bl	80203dc <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8015bc8:	f7ff ff60 	bl	8015a8c <udp_new>
 8015bcc:	4603      	mov	r3, r0
 8015bce:	4a19      	ldr	r2, [pc, #100]	; (8015c34 <dhcp_inc_pcb_refcount+0x8c>)
 8015bd0:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8015bd2:	4b18      	ldr	r3, [pc, #96]	; (8015c34 <dhcp_inc_pcb_refcount+0x8c>)
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d102      	bne.n	8015be0 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8015bda:	f04f 33ff 	mov.w	r3, #4294967295
 8015bde:	e024      	b.n	8015c2a <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8015be0:	4b14      	ldr	r3, [pc, #80]	; (8015c34 <dhcp_inc_pcb_refcount+0x8c>)
 8015be2:	681b      	ldr	r3, [r3, #0]
 8015be4:	7a5a      	ldrb	r2, [r3, #9]
 8015be6:	4b13      	ldr	r3, [pc, #76]	; (8015c34 <dhcp_inc_pcb_refcount+0x8c>)
 8015be8:	681b      	ldr	r3, [r3, #0]
 8015bea:	f042 0220 	orr.w	r2, r2, #32
 8015bee:	b2d2      	uxtb	r2, r2
 8015bf0:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8015bf2:	4b10      	ldr	r3, [pc, #64]	; (8015c34 <dhcp_inc_pcb_refcount+0x8c>)
 8015bf4:	681b      	ldr	r3, [r3, #0]
 8015bf6:	2244      	movs	r2, #68	; 0x44
 8015bf8:	4912      	ldr	r1, [pc, #72]	; (8015c44 <dhcp_inc_pcb_refcount+0x9c>)
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	f7ff fd3a 	bl	8015674 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8015c00:	4b0c      	ldr	r3, [pc, #48]	; (8015c34 <dhcp_inc_pcb_refcount+0x8c>)
 8015c02:	681b      	ldr	r3, [r3, #0]
 8015c04:	2243      	movs	r2, #67	; 0x43
 8015c06:	490f      	ldr	r1, [pc, #60]	; (8015c44 <dhcp_inc_pcb_refcount+0x9c>)
 8015c08:	4618      	mov	r0, r3
 8015c0a:	f7ff fe21 	bl	8015850 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8015c0e:	4b09      	ldr	r3, [pc, #36]	; (8015c34 <dhcp_inc_pcb_refcount+0x8c>)
 8015c10:	681b      	ldr	r3, [r3, #0]
 8015c12:	2200      	movs	r2, #0
 8015c14:	490c      	ldr	r1, [pc, #48]	; (8015c48 <dhcp_inc_pcb_refcount+0xa0>)
 8015c16:	4618      	mov	r0, r3
 8015c18:	f7ff fed6 	bl	80159c8 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8015c1c:	4b04      	ldr	r3, [pc, #16]	; (8015c30 <dhcp_inc_pcb_refcount+0x88>)
 8015c1e:	781b      	ldrb	r3, [r3, #0]
 8015c20:	3301      	adds	r3, #1
 8015c22:	b2da      	uxtb	r2, r3
 8015c24:	4b02      	ldr	r3, [pc, #8]	; (8015c30 <dhcp_inc_pcb_refcount+0x88>)
 8015c26:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8015c28:	2300      	movs	r3, #0
}
 8015c2a:	4618      	mov	r0, r3
 8015c2c:	bd80      	pop	{r7, pc}
 8015c2e:	bf00      	nop
 8015c30:	2000688c 	.word	0x2000688c
 8015c34:	20006888 	.word	0x20006888
 8015c38:	080240f8 	.word	0x080240f8
 8015c3c:	08024130 	.word	0x08024130
 8015c40:	08024158 	.word	0x08024158
 8015c44:	08026bf4 	.word	0x08026bf4
 8015c48:	08017995 	.word	0x08017995

08015c4c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8015c4c:	b580      	push	{r7, lr}
 8015c4e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8015c50:	4b0e      	ldr	r3, [pc, #56]	; (8015c8c <dhcp_dec_pcb_refcount+0x40>)
 8015c52:	781b      	ldrb	r3, [r3, #0]
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d105      	bne.n	8015c64 <dhcp_dec_pcb_refcount+0x18>
 8015c58:	4b0d      	ldr	r3, [pc, #52]	; (8015c90 <dhcp_dec_pcb_refcount+0x44>)
 8015c5a:	22ff      	movs	r2, #255	; 0xff
 8015c5c:	490d      	ldr	r1, [pc, #52]	; (8015c94 <dhcp_dec_pcb_refcount+0x48>)
 8015c5e:	480e      	ldr	r0, [pc, #56]	; (8015c98 <dhcp_dec_pcb_refcount+0x4c>)
 8015c60:	f00a fbbc 	bl	80203dc <iprintf>
  dhcp_pcb_refcount--;
 8015c64:	4b09      	ldr	r3, [pc, #36]	; (8015c8c <dhcp_dec_pcb_refcount+0x40>)
 8015c66:	781b      	ldrb	r3, [r3, #0]
 8015c68:	3b01      	subs	r3, #1
 8015c6a:	b2da      	uxtb	r2, r3
 8015c6c:	4b07      	ldr	r3, [pc, #28]	; (8015c8c <dhcp_dec_pcb_refcount+0x40>)
 8015c6e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8015c70:	4b06      	ldr	r3, [pc, #24]	; (8015c8c <dhcp_dec_pcb_refcount+0x40>)
 8015c72:	781b      	ldrb	r3, [r3, #0]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d107      	bne.n	8015c88 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8015c78:	4b08      	ldr	r3, [pc, #32]	; (8015c9c <dhcp_dec_pcb_refcount+0x50>)
 8015c7a:	681b      	ldr	r3, [r3, #0]
 8015c7c:	4618      	mov	r0, r3
 8015c7e:	f7ff fec3 	bl	8015a08 <udp_remove>
    dhcp_pcb = NULL;
 8015c82:	4b06      	ldr	r3, [pc, #24]	; (8015c9c <dhcp_dec_pcb_refcount+0x50>)
 8015c84:	2200      	movs	r2, #0
 8015c86:	601a      	str	r2, [r3, #0]
  }
}
 8015c88:	bf00      	nop
 8015c8a:	bd80      	pop	{r7, pc}
 8015c8c:	2000688c 	.word	0x2000688c
 8015c90:	080240f8 	.word	0x080240f8
 8015c94:	08024180 	.word	0x08024180
 8015c98:	08024158 	.word	0x08024158
 8015c9c:	20006888 	.word	0x20006888

08015ca0 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8015ca0:	b580      	push	{r7, lr}
 8015ca2:	b086      	sub	sp, #24
 8015ca4:	af02      	add	r7, sp, #8
 8015ca6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cac:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8015cb4:	461a      	mov	r2, r3
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8015cbc:	4619      	mov	r1, r3
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015cc4:	9300      	str	r3, [sp, #0]
 8015cc6:	460b      	mov	r3, r1
 8015cc8:	6879      	ldr	r1, [r7, #4]
 8015cca:	480a      	ldr	r0, [pc, #40]	; (8015cf4 <dhcp_handle_nak+0x54>)
 8015ccc:	f00a fb86 	bl	80203dc <iprintf>
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8015cd0:	210c      	movs	r1, #12
 8015cd2:	68f8      	ldr	r0, [r7, #12]
 8015cd4:	f001 fa52 	bl	801717c <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8015cd8:	4b07      	ldr	r3, [pc, #28]	; (8015cf8 <dhcp_handle_nak+0x58>)
 8015cda:	4a07      	ldr	r2, [pc, #28]	; (8015cf8 <dhcp_handle_nak+0x58>)
 8015cdc:	4906      	ldr	r1, [pc, #24]	; (8015cf8 <dhcp_handle_nak+0x58>)
 8015cde:	6878      	ldr	r0, [r7, #4]
 8015ce0:	f7f8 faaa 	bl	800e238 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8015ce4:	6878      	ldr	r0, [r7, #4]
 8015ce6:	f000 fd79 	bl	80167dc <dhcp_discover>
}
 8015cea:	bf00      	nop
 8015cec:	3710      	adds	r7, #16
 8015cee:	46bd      	mov	sp, r7
 8015cf0:	bd80      	pop	{r7, pc}
 8015cf2:	bf00      	nop
 8015cf4:	080241a4 	.word	0x080241a4
 8015cf8:	08026bf4 	.word	0x08026bf4

08015cfc <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8015cfc:	b580      	push	{r7, lr}
 8015cfe:	b084      	sub	sp, #16
 8015d00:	af00      	add	r7, sp, #0
 8015d02:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d08:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8015d10:	461a      	mov	r2, r3
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8015d18:	6879      	ldr	r1, [r7, #4]
 8015d1a:	481c      	ldr	r0, [pc, #112]	; (8015d8c <dhcp_check+0x90>)
 8015d1c:	f00a fb5e 	bl	80203dc <iprintf>
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8015d20:	2108      	movs	r1, #8
 8015d22:	68f8      	ldr	r0, [r7, #12]
 8015d24:	f001 fa2a 	bl	801717c <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8015d28:	68fb      	ldr	r3, [r7, #12]
 8015d2a:	331c      	adds	r3, #28
 8015d2c:	2200      	movs	r2, #0
 8015d2e:	4619      	mov	r1, r3
 8015d30:	6878      	ldr	r0, [r7, #4]
 8015d32:	f002 ff3d 	bl	8018bb0 <etharp_query>
 8015d36:	4603      	mov	r3, r0
 8015d38:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8015d3a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d002      	beq.n	8015d48 <dhcp_check+0x4c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
 8015d42:	4813      	ldr	r0, [pc, #76]	; (8015d90 <dhcp_check+0x94>)
 8015d44:	f00a fbe6 	bl	8020514 <puts>
  }
  if (dhcp->tries < 255) {
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	799b      	ldrb	r3, [r3, #6]
 8015d4c:	2bff      	cmp	r3, #255	; 0xff
 8015d4e:	d005      	beq.n	8015d5c <dhcp_check+0x60>
    dhcp->tries++;
 8015d50:	68fb      	ldr	r3, [r7, #12]
 8015d52:	799b      	ldrb	r3, [r3, #6]
 8015d54:	3301      	adds	r3, #1
 8015d56:	b2da      	uxtb	r2, r3
 8015d58:	68fb      	ldr	r3, [r7, #12]
 8015d5a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8015d5c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8015d60:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015d62:	893b      	ldrh	r3, [r7, #8]
 8015d64:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015d68:	4a0a      	ldr	r2, [pc, #40]	; (8015d94 <dhcp_check+0x98>)
 8015d6a:	fb82 1203 	smull	r1, r2, r2, r3
 8015d6e:	1152      	asrs	r2, r2, #5
 8015d70:	17db      	asrs	r3, r3, #31
 8015d72:	1ad3      	subs	r3, r2, r3
 8015d74:	b29a      	uxth	r2, r3
 8015d76:	68fb      	ldr	r3, [r7, #12]
 8015d78:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
 8015d7a:	893b      	ldrh	r3, [r7, #8]
 8015d7c:	4619      	mov	r1, r3
 8015d7e:	4806      	ldr	r0, [pc, #24]	; (8015d98 <dhcp_check+0x9c>)
 8015d80:	f00a fb2c 	bl	80203dc <iprintf>
}
 8015d84:	bf00      	nop
 8015d86:	3710      	adds	r7, #16
 8015d88:	46bd      	mov	sp, r7
 8015d8a:	bd80      	pop	{r7, pc}
 8015d8c:	080241c8 	.word	0x080241c8
 8015d90:	080241e4 	.word	0x080241e4
 8015d94:	10624dd3 	.word	0x10624dd3
 8015d98:	0802420c 	.word	0x0802420c

08015d9c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8015d9c:	b580      	push	{r7, lr}
 8015d9e:	b086      	sub	sp, #24
 8015da0:	af02      	add	r7, sp, #8
 8015da2:	6078      	str	r0, [r7, #4]
 8015da4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015daa:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8015db2:	461a      	mov	r2, r3
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8015dba:	4619      	mov	r1, r3
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015dc2:	9300      	str	r3, [sp, #0]
 8015dc4:	460b      	mov	r3, r1
 8015dc6:	6879      	ldr	r1, [r7, #4]
 8015dc8:	4816      	ldr	r0, [pc, #88]	; (8015e24 <dhcp_handle_offer+0x88>)
 8015dca:	f00a fb07 	bl	80203dc <iprintf>
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8015dce:	4b16      	ldr	r3, [pc, #88]	; (8015e28 <dhcp_handle_offer+0x8c>)
 8015dd0:	789b      	ldrb	r3, [r3, #2]
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d01e      	beq.n	8015e14 <dhcp_handle_offer+0x78>
    dhcp->request_timeout = 0; /* stop timer */
 8015dd6:	68fb      	ldr	r3, [r7, #12]
 8015dd8:	2200      	movs	r2, #0
 8015dda:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8015ddc:	4b13      	ldr	r3, [pc, #76]	; (8015e2c <dhcp_handle_offer+0x90>)
 8015dde:	689b      	ldr	r3, [r3, #8]
 8015de0:	4618      	mov	r0, r3
 8015de2:	f7f6 fde2 	bl	800c9aa <lwip_htonl>
 8015de6:	4602      	mov	r2, r0
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	699b      	ldr	r3, [r3, #24]
 8015df0:	4619      	mov	r1, r3
 8015df2:	480f      	ldr	r0, [pc, #60]	; (8015e30 <dhcp_handle_offer+0x94>)
 8015df4:	f00a faf2 	bl	80203dc <iprintf>
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8015df8:	683b      	ldr	r3, [r7, #0]
 8015dfa:	691a      	ldr	r2, [r3, #16]
 8015dfc:	68fb      	ldr	r3, [r7, #12]
 8015dfe:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
 8015e00:	68fb      	ldr	r3, [r7, #12]
 8015e02:	69db      	ldr	r3, [r3, #28]
 8015e04:	4619      	mov	r1, r3
 8015e06:	480b      	ldr	r0, [pc, #44]	; (8015e34 <dhcp_handle_offer+0x98>)
 8015e08:	f00a fae8 	bl	80203dc <iprintf>
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8015e0c:	6878      	ldr	r0, [r7, #4]
 8015e0e:	f000 f815 	bl	8015e3c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8015e12:	e003      	b.n	8015e1c <dhcp_handle_offer+0x80>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 8015e14:	6879      	ldr	r1, [r7, #4]
 8015e16:	4808      	ldr	r0, [pc, #32]	; (8015e38 <dhcp_handle_offer+0x9c>)
 8015e18:	f00a fae0 	bl	80203dc <iprintf>
}
 8015e1c:	bf00      	nop
 8015e1e:	3710      	adds	r7, #16
 8015e20:	46bd      	mov	sp, r7
 8015e22:	bd80      	pop	{r7, pc}
 8015e24:	0802423c 	.word	0x0802423c
 8015e28:	2000a530 	.word	0x2000a530
 8015e2c:	2000a53c 	.word	0x2000a53c
 8015e30:	08024264 	.word	0x08024264
 8015e34:	0802428c 	.word	0x0802428c
 8015e38:	080242b4 	.word	0x080242b4

08015e3c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8015e3c:	b5b0      	push	{r4, r5, r7, lr}
 8015e3e:	b08a      	sub	sp, #40	; 0x28
 8015e40:	af02      	add	r7, sp, #8
 8015e42:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d109      	bne.n	8015e5e <dhcp_select+0x22>
 8015e4a:	4b7f      	ldr	r3, [pc, #508]	; (8016048 <dhcp_select+0x20c>)
 8015e4c:	f240 1277 	movw	r2, #375	; 0x177
 8015e50:	497e      	ldr	r1, [pc, #504]	; (801604c <dhcp_select+0x210>)
 8015e52:	487f      	ldr	r0, [pc, #508]	; (8016050 <dhcp_select+0x214>)
 8015e54:	f00a fac2 	bl	80203dc <iprintf>
 8015e58:	f06f 030f 	mvn.w	r3, #15
 8015e5c:	e0ef      	b.n	801603e <dhcp_select+0x202>
  dhcp = netif_dhcp_data(netif);
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e62:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8015e64:	69bb      	ldr	r3, [r7, #24]
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d109      	bne.n	8015e7e <dhcp_select+0x42>
 8015e6a:	4b77      	ldr	r3, [pc, #476]	; (8016048 <dhcp_select+0x20c>)
 8015e6c:	f240 1279 	movw	r2, #377	; 0x179
 8015e70:	4978      	ldr	r1, [pc, #480]	; (8016054 <dhcp_select+0x218>)
 8015e72:	4877      	ldr	r0, [pc, #476]	; (8016050 <dhcp_select+0x214>)
 8015e74:	f00a fab2 	bl	80203dc <iprintf>
 8015e78:	f06f 0305 	mvn.w	r3, #5
 8015e7c:	e0df      	b.n	801603e <dhcp_select+0x202>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8015e84:	461a      	mov	r2, r3
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8015e8c:	4619      	mov	r1, r3
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015e94:	9300      	str	r3, [sp, #0]
 8015e96:	460b      	mov	r3, r1
 8015e98:	6879      	ldr	r1, [r7, #4]
 8015e9a:	486f      	ldr	r0, [pc, #444]	; (8016058 <dhcp_select+0x21c>)
 8015e9c:	f00a fa9e 	bl	80203dc <iprintf>
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8015ea0:	2101      	movs	r1, #1
 8015ea2:	69b8      	ldr	r0, [r7, #24]
 8015ea4:	f001 f96a 	bl	801717c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015ea8:	f107 030c 	add.w	r3, r7, #12
 8015eac:	2203      	movs	r2, #3
 8015eae:	69b9      	ldr	r1, [r7, #24]
 8015eb0:	6878      	ldr	r0, [r7, #4]
 8015eb2:	f001 feaf 	bl	8017c14 <dhcp_create_msg>
 8015eb6:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015eb8:	697b      	ldr	r3, [r7, #20]
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	f000 8088 	beq.w	8015fd0 <dhcp_select+0x194>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015ec0:	697b      	ldr	r3, [r7, #20]
 8015ec2:	685b      	ldr	r3, [r3, #4]
 8015ec4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015ec6:	89b8      	ldrh	r0, [r7, #12]
 8015ec8:	693b      	ldr	r3, [r7, #16]
 8015eca:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015ece:	2302      	movs	r3, #2
 8015ed0:	2239      	movs	r2, #57	; 0x39
 8015ed2:	f001 f96d 	bl	80171b0 <dhcp_option>
 8015ed6:	4603      	mov	r3, r0
 8015ed8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015eda:	89b8      	ldrh	r0, [r7, #12]
 8015edc:	693b      	ldr	r3, [r7, #16]
 8015ede:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8015ee6:	461a      	mov	r2, r3
 8015ee8:	f001 f9bc 	bl	8017264 <dhcp_option_short>
 8015eec:	4603      	mov	r3, r0
 8015eee:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015ef0:	89b8      	ldrh	r0, [r7, #12]
 8015ef2:	693b      	ldr	r3, [r7, #16]
 8015ef4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015ef8:	2304      	movs	r3, #4
 8015efa:	2232      	movs	r2, #50	; 0x32
 8015efc:	f001 f958 	bl	80171b0 <dhcp_option>
 8015f00:	4603      	mov	r3, r0
 8015f02:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8015f04:	89bc      	ldrh	r4, [r7, #12]
 8015f06:	693b      	ldr	r3, [r7, #16]
 8015f08:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015f0c:	69bb      	ldr	r3, [r7, #24]
 8015f0e:	69db      	ldr	r3, [r3, #28]
 8015f10:	4618      	mov	r0, r3
 8015f12:	f7f6 fd4a 	bl	800c9aa <lwip_htonl>
 8015f16:	4603      	mov	r3, r0
 8015f18:	461a      	mov	r2, r3
 8015f1a:	4629      	mov	r1, r5
 8015f1c:	4620      	mov	r0, r4
 8015f1e:	f001 f9d3 	bl	80172c8 <dhcp_option_long>
 8015f22:	4603      	mov	r3, r0
 8015f24:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8015f26:	89b8      	ldrh	r0, [r7, #12]
 8015f28:	693b      	ldr	r3, [r7, #16]
 8015f2a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015f2e:	2304      	movs	r3, #4
 8015f30:	2236      	movs	r2, #54	; 0x36
 8015f32:	f001 f93d 	bl	80171b0 <dhcp_option>
 8015f36:	4603      	mov	r3, r0
 8015f38:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8015f3a:	89bc      	ldrh	r4, [r7, #12]
 8015f3c:	693b      	ldr	r3, [r7, #16]
 8015f3e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015f42:	69bb      	ldr	r3, [r7, #24]
 8015f44:	699b      	ldr	r3, [r3, #24]
 8015f46:	4618      	mov	r0, r3
 8015f48:	f7f6 fd2f 	bl	800c9aa <lwip_htonl>
 8015f4c:	4603      	mov	r3, r0
 8015f4e:	461a      	mov	r2, r3
 8015f50:	4629      	mov	r1, r5
 8015f52:	4620      	mov	r0, r4
 8015f54:	f001 f9b8 	bl	80172c8 <dhcp_option_long>
 8015f58:	4603      	mov	r3, r0
 8015f5a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015f5c:	89b8      	ldrh	r0, [r7, #12]
 8015f5e:	693b      	ldr	r3, [r7, #16]
 8015f60:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015f64:	2304      	movs	r3, #4
 8015f66:	2237      	movs	r2, #55	; 0x37
 8015f68:	f001 f922 	bl	80171b0 <dhcp_option>
 8015f6c:	4603      	mov	r3, r0
 8015f6e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015f70:	2300      	movs	r3, #0
 8015f72:	77bb      	strb	r3, [r7, #30]
 8015f74:	e00e      	b.n	8015f94 <dhcp_select+0x158>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015f76:	89b8      	ldrh	r0, [r7, #12]
 8015f78:	693b      	ldr	r3, [r7, #16]
 8015f7a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015f7e:	7fbb      	ldrb	r3, [r7, #30]
 8015f80:	4a36      	ldr	r2, [pc, #216]	; (801605c <dhcp_select+0x220>)
 8015f82:	5cd3      	ldrb	r3, [r2, r3]
 8015f84:	461a      	mov	r2, r3
 8015f86:	f001 f947 	bl	8017218 <dhcp_option_byte>
 8015f8a:	4603      	mov	r3, r0
 8015f8c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015f8e:	7fbb      	ldrb	r3, [r7, #30]
 8015f90:	3301      	adds	r3, #1
 8015f92:	77bb      	strb	r3, [r7, #30]
 8015f94:	7fbb      	ldrb	r3, [r7, #30]
 8015f96:	2b03      	cmp	r3, #3
 8015f98:	d9ed      	bls.n	8015f76 <dhcp_select+0x13a>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015f9a:	89b8      	ldrh	r0, [r7, #12]
 8015f9c:	693b      	ldr	r3, [r7, #16]
 8015f9e:	33f0      	adds	r3, #240	; 0xf0
 8015fa0:	697a      	ldr	r2, [r7, #20]
 8015fa2:	4619      	mov	r1, r3
 8015fa4:	f001 ff1a 	bl	8017ddc <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8015fa8:	4b2d      	ldr	r3, [pc, #180]	; (8016060 <dhcp_select+0x224>)
 8015faa:	6818      	ldr	r0, [r3, #0]
 8015fac:	4b2d      	ldr	r3, [pc, #180]	; (8016064 <dhcp_select+0x228>)
 8015fae:	9301      	str	r3, [sp, #4]
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	9300      	str	r3, [sp, #0]
 8015fb4:	2343      	movs	r3, #67	; 0x43
 8015fb6:	4a2c      	ldr	r2, [pc, #176]	; (8016068 <dhcp_select+0x22c>)
 8015fb8:	6979      	ldr	r1, [r7, #20]
 8015fba:	f7ff fa13 	bl	80153e4 <udp_sendto_if_src>
 8015fbe:	4603      	mov	r3, r0
 8015fc0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015fc2:	6978      	ldr	r0, [r7, #20]
 8015fc4:	f7f8 fe64 	bl	800ec90 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
 8015fc8:	4828      	ldr	r0, [pc, #160]	; (801606c <dhcp_select+0x230>)
 8015fca:	f00a faa3 	bl	8020514 <puts>
 8015fce:	e004      	b.n	8015fda <dhcp_select+0x19e>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
 8015fd0:	4827      	ldr	r0, [pc, #156]	; (8016070 <dhcp_select+0x234>)
 8015fd2:	f00a fa9f 	bl	8020514 <puts>
    result = ERR_MEM;
 8015fd6:	23ff      	movs	r3, #255	; 0xff
 8015fd8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015fda:	69bb      	ldr	r3, [r7, #24]
 8015fdc:	799b      	ldrb	r3, [r3, #6]
 8015fde:	2bff      	cmp	r3, #255	; 0xff
 8015fe0:	d005      	beq.n	8015fee <dhcp_select+0x1b2>
    dhcp->tries++;
 8015fe2:	69bb      	ldr	r3, [r7, #24]
 8015fe4:	799b      	ldrb	r3, [r3, #6]
 8015fe6:	3301      	adds	r3, #1
 8015fe8:	b2da      	uxtb	r2, r3
 8015fea:	69bb      	ldr	r3, [r7, #24]
 8015fec:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8015fee:	69bb      	ldr	r3, [r7, #24]
 8015ff0:	799b      	ldrb	r3, [r3, #6]
 8015ff2:	2b05      	cmp	r3, #5
 8015ff4:	d80d      	bhi.n	8016012 <dhcp_select+0x1d6>
 8015ff6:	69bb      	ldr	r3, [r7, #24]
 8015ff8:	799b      	ldrb	r3, [r3, #6]
 8015ffa:	461a      	mov	r2, r3
 8015ffc:	2301      	movs	r3, #1
 8015ffe:	4093      	lsls	r3, r2
 8016000:	b29b      	uxth	r3, r3
 8016002:	461a      	mov	r2, r3
 8016004:	0152      	lsls	r2, r2, #5
 8016006:	1ad2      	subs	r2, r2, r3
 8016008:	0092      	lsls	r2, r2, #2
 801600a:	4413      	add	r3, r2
 801600c:	00db      	lsls	r3, r3, #3
 801600e:	b29b      	uxth	r3, r3
 8016010:	e001      	b.n	8016016 <dhcp_select+0x1da>
 8016012:	f64e 2360 	movw	r3, #60000	; 0xea60
 8016016:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016018:	89fb      	ldrh	r3, [r7, #14]
 801601a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801601e:	4a15      	ldr	r2, [pc, #84]	; (8016074 <dhcp_select+0x238>)
 8016020:	fb82 1203 	smull	r1, r2, r2, r3
 8016024:	1152      	asrs	r2, r2, #5
 8016026:	17db      	asrs	r3, r3, #31
 8016028:	1ad3      	subs	r3, r2, r3
 801602a:	b29a      	uxth	r2, r3
 801602c:	69bb      	ldr	r3, [r7, #24]
 801602e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
 8016030:	89fb      	ldrh	r3, [r7, #14]
 8016032:	4619      	mov	r1, r3
 8016034:	4810      	ldr	r0, [pc, #64]	; (8016078 <dhcp_select+0x23c>)
 8016036:	f00a f9d1 	bl	80203dc <iprintf>
  return result;
 801603a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801603e:	4618      	mov	r0, r3
 8016040:	3720      	adds	r7, #32
 8016042:	46bd      	mov	sp, r7
 8016044:	bdb0      	pop	{r4, r5, r7, pc}
 8016046:	bf00      	nop
 8016048:	080240f8 	.word	0x080240f8
 801604c:	080242e8 	.word	0x080242e8
 8016050:	08024158 	.word	0x08024158
 8016054:	08024304 	.word	0x08024304
 8016058:	08024320 	.word	0x08024320
 801605c:	20000034 	.word	0x20000034
 8016060:	20006888 	.word	0x20006888
 8016064:	08026bf4 	.word	0x08026bf4
 8016068:	08026bf8 	.word	0x08026bf8
 801606c:	08024340 	.word	0x08024340
 8016070:	08024358 	.word	0x08024358
 8016074:	10624dd3 	.word	0x10624dd3
 8016078:	08024388 	.word	0x08024388

0801607c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 801607c:	b580      	push	{r7, lr}
 801607e:	b082      	sub	sp, #8
 8016080:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
 8016082:	482d      	ldr	r0, [pc, #180]	; (8016138 <dhcp_coarse_tmr+0xbc>)
 8016084:	f00a fa46 	bl	8020514 <puts>
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8016088:	4b2c      	ldr	r3, [pc, #176]	; (801613c <dhcp_coarse_tmr+0xc0>)
 801608a:	681b      	ldr	r3, [r3, #0]
 801608c:	607b      	str	r3, [r7, #4]
 801608e:	e04b      	b.n	8016128 <dhcp_coarse_tmr+0xac>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016094:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8016096:	683b      	ldr	r3, [r7, #0]
 8016098:	2b00      	cmp	r3, #0
 801609a:	d042      	beq.n	8016122 <dhcp_coarse_tmr+0xa6>
 801609c:	683b      	ldr	r3, [r7, #0]
 801609e:	795b      	ldrb	r3, [r3, #5]
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	d03e      	beq.n	8016122 <dhcp_coarse_tmr+0xa6>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80160a4:	683b      	ldr	r3, [r7, #0]
 80160a6:	8a9b      	ldrh	r3, [r3, #20]
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d015      	beq.n	80160d8 <dhcp_coarse_tmr+0x5c>
 80160ac:	683b      	ldr	r3, [r7, #0]
 80160ae:	8a5b      	ldrh	r3, [r3, #18]
 80160b0:	3301      	adds	r3, #1
 80160b2:	b29a      	uxth	r2, r3
 80160b4:	683b      	ldr	r3, [r7, #0]
 80160b6:	825a      	strh	r2, [r3, #18]
 80160b8:	683b      	ldr	r3, [r7, #0]
 80160ba:	8a5a      	ldrh	r2, [r3, #18]
 80160bc:	683b      	ldr	r3, [r7, #0]
 80160be:	8a9b      	ldrh	r3, [r3, #20]
 80160c0:	429a      	cmp	r2, r3
 80160c2:	d109      	bne.n	80160d8 <dhcp_coarse_tmr+0x5c>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
 80160c4:	481e      	ldr	r0, [pc, #120]	; (8016140 <dhcp_coarse_tmr+0xc4>)
 80160c6:	f00a fa25 	bl	8020514 <puts>
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 80160ca:	6878      	ldr	r0, [r7, #4]
 80160cc:	f000 ffac 	bl	8017028 <dhcp_release_and_stop>
        dhcp_start(netif);
 80160d0:	6878      	ldr	r0, [r7, #4]
 80160d2:	f000 f9cd 	bl	8016470 <dhcp_start>
 80160d6:	e024      	b.n	8016122 <dhcp_coarse_tmr+0xa6>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80160d8:	683b      	ldr	r3, [r7, #0]
 80160da:	8a1b      	ldrh	r3, [r3, #16]
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d00e      	beq.n	80160fe <dhcp_coarse_tmr+0x82>
 80160e0:	683b      	ldr	r3, [r7, #0]
 80160e2:	8a1b      	ldrh	r3, [r3, #16]
 80160e4:	1e5a      	subs	r2, r3, #1
 80160e6:	b291      	uxth	r1, r2
 80160e8:	683a      	ldr	r2, [r7, #0]
 80160ea:	8211      	strh	r1, [r2, #16]
 80160ec:	2b01      	cmp	r3, #1
 80160ee:	d106      	bne.n	80160fe <dhcp_coarse_tmr+0x82>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
 80160f0:	4814      	ldr	r0, [pc, #80]	; (8016144 <dhcp_coarse_tmr+0xc8>)
 80160f2:	f00a fa0f 	bl	8020514 <puts>
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80160f6:	6878      	ldr	r0, [r7, #4]
 80160f8:	f000 f8fc 	bl	80162f4 <dhcp_t2_timeout>
 80160fc:	e011      	b.n	8016122 <dhcp_coarse_tmr+0xa6>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80160fe:	683b      	ldr	r3, [r7, #0]
 8016100:	89db      	ldrh	r3, [r3, #14]
 8016102:	2b00      	cmp	r3, #0
 8016104:	d00d      	beq.n	8016122 <dhcp_coarse_tmr+0xa6>
 8016106:	683b      	ldr	r3, [r7, #0]
 8016108:	89db      	ldrh	r3, [r3, #14]
 801610a:	1e5a      	subs	r2, r3, #1
 801610c:	b291      	uxth	r1, r2
 801610e:	683a      	ldr	r2, [r7, #0]
 8016110:	81d1      	strh	r1, [r2, #14]
 8016112:	2b01      	cmp	r3, #1
 8016114:	d105      	bne.n	8016122 <dhcp_coarse_tmr+0xa6>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
 8016116:	480c      	ldr	r0, [pc, #48]	; (8016148 <dhcp_coarse_tmr+0xcc>)
 8016118:	f00a f9fc 	bl	8020514 <puts>
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801611c:	6878      	ldr	r0, [r7, #4]
 801611e:	f000 f8af 	bl	8016280 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	607b      	str	r3, [r7, #4]
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	2b00      	cmp	r3, #0
 801612c:	d1b0      	bne.n	8016090 <dhcp_coarse_tmr+0x14>
      }
    }
  }
}
 801612e:	bf00      	nop
 8016130:	bf00      	nop
 8016132:	3708      	adds	r7, #8
 8016134:	46bd      	mov	sp, r7
 8016136:	bd80      	pop	{r7, pc}
 8016138:	080243b8 	.word	0x080243b8
 801613c:	2000a3e0 	.word	0x2000a3e0
 8016140:	080243cc 	.word	0x080243cc
 8016144:	080243ec 	.word	0x080243ec
 8016148:	0802440c 	.word	0x0802440c

0801614c <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801614c:	b580      	push	{r7, lr}
 801614e:	b082      	sub	sp, #8
 8016150:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8016152:	4b18      	ldr	r3, [pc, #96]	; (80161b4 <dhcp_fine_tmr+0x68>)
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	607b      	str	r3, [r7, #4]
 8016158:	e023      	b.n	80161a2 <dhcp_fine_tmr+0x56>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801615e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8016160:	683b      	ldr	r3, [r7, #0]
 8016162:	2b00      	cmp	r3, #0
 8016164:	d01a      	beq.n	801619c <dhcp_fine_tmr+0x50>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8016166:	683b      	ldr	r3, [r7, #0]
 8016168:	891b      	ldrh	r3, [r3, #8]
 801616a:	2b01      	cmp	r3, #1
 801616c:	d906      	bls.n	801617c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801616e:	683b      	ldr	r3, [r7, #0]
 8016170:	891b      	ldrh	r3, [r3, #8]
 8016172:	3b01      	subs	r3, #1
 8016174:	b29a      	uxth	r2, r3
 8016176:	683b      	ldr	r3, [r7, #0]
 8016178:	811a      	strh	r2, [r3, #8]
 801617a:	e00f      	b.n	801619c <dhcp_fine_tmr+0x50>
      } else if (dhcp->request_timeout == 1) {
 801617c:	683b      	ldr	r3, [r7, #0]
 801617e:	891b      	ldrh	r3, [r3, #8]
 8016180:	2b01      	cmp	r3, #1
 8016182:	d10b      	bne.n	801619c <dhcp_fine_tmr+0x50>
        dhcp->request_timeout--;
 8016184:	683b      	ldr	r3, [r7, #0]
 8016186:	891b      	ldrh	r3, [r3, #8]
 8016188:	3b01      	subs	r3, #1
 801618a:	b29a      	uxth	r2, r3
 801618c:	683b      	ldr	r3, [r7, #0]
 801618e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
 8016190:	4809      	ldr	r0, [pc, #36]	; (80161b8 <dhcp_fine_tmr+0x6c>)
 8016192:	f00a f9bf 	bl	8020514 <puts>
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8016196:	6878      	ldr	r0, [r7, #4]
 8016198:	f000 f810 	bl	80161bc <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	681b      	ldr	r3, [r3, #0]
 80161a0:	607b      	str	r3, [r7, #4]
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	d1d8      	bne.n	801615a <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 80161a8:	bf00      	nop
 80161aa:	bf00      	nop
 80161ac:	3708      	adds	r7, #8
 80161ae:	46bd      	mov	sp, r7
 80161b0:	bd80      	pop	{r7, pc}
 80161b2:	bf00      	nop
 80161b4:	2000a3e0 	.word	0x2000a3e0
 80161b8:	0802442c 	.word	0x0802442c

080161bc <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 80161bc:	b580      	push	{r7, lr}
 80161be:	b084      	sub	sp, #16
 80161c0:	af00      	add	r7, sp, #0
 80161c2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161c8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
 80161ca:	4828      	ldr	r0, [pc, #160]	; (801626c <dhcp_timeout+0xb0>)
 80161cc:	f00a f9a2 	bl	8020514 <puts>
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80161d0:	68fb      	ldr	r3, [r7, #12]
 80161d2:	795b      	ldrb	r3, [r3, #5]
 80161d4:	2b0c      	cmp	r3, #12
 80161d6:	d003      	beq.n	80161e0 <dhcp_timeout+0x24>
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	795b      	ldrb	r3, [r3, #5]
 80161dc:	2b06      	cmp	r3, #6
 80161de:	d106      	bne.n	80161ee <dhcp_timeout+0x32>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
 80161e0:	4823      	ldr	r0, [pc, #140]	; (8016270 <dhcp_timeout+0xb4>)
 80161e2:	f00a f997 	bl	8020514 <puts>
    dhcp_discover(netif);
 80161e6:	6878      	ldr	r0, [r7, #4]
 80161e8:	f000 faf8 	bl	80167dc <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80161ec:	e03a      	b.n	8016264 <dhcp_timeout+0xa8>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80161ee:	68fb      	ldr	r3, [r7, #12]
 80161f0:	795b      	ldrb	r3, [r3, #5]
 80161f2:	2b01      	cmp	r3, #1
 80161f4:	d114      	bne.n	8016220 <dhcp_timeout+0x64>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, DHCP request timed out\n"));
 80161f6:	481f      	ldr	r0, [pc, #124]	; (8016274 <dhcp_timeout+0xb8>)
 80161f8:	f00a f98c 	bl	8020514 <puts>
    if (dhcp->tries <= 5) {
 80161fc:	68fb      	ldr	r3, [r7, #12]
 80161fe:	799b      	ldrb	r3, [r3, #6]
 8016200:	2b05      	cmp	r3, #5
 8016202:	d803      	bhi.n	801620c <dhcp_timeout+0x50>
      dhcp_select(netif);
 8016204:	6878      	ldr	r0, [r7, #4]
 8016206:	f7ff fe19 	bl	8015e3c <dhcp_select>
}
 801620a:	e02b      	b.n	8016264 <dhcp_timeout+0xa8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, releasing, restarting\n"));
 801620c:	481a      	ldr	r0, [pc, #104]	; (8016278 <dhcp_timeout+0xbc>)
 801620e:	f00a f981 	bl	8020514 <puts>
      dhcp_release_and_stop(netif);
 8016212:	6878      	ldr	r0, [r7, #4]
 8016214:	f000 ff08 	bl	8017028 <dhcp_release_and_stop>
      dhcp_start(netif);
 8016218:	6878      	ldr	r0, [r7, #4]
 801621a:	f000 f929 	bl	8016470 <dhcp_start>
}
 801621e:	e021      	b.n	8016264 <dhcp_timeout+0xa8>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	795b      	ldrb	r3, [r3, #5]
 8016224:	2b08      	cmp	r3, #8
 8016226:	d10e      	bne.n	8016246 <dhcp_timeout+0x8a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): CHECKING, ARP request timed out\n"));
 8016228:	4814      	ldr	r0, [pc, #80]	; (801627c <dhcp_timeout+0xc0>)
 801622a:	f00a f973 	bl	8020514 <puts>
    if (dhcp->tries <= 1) {
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	799b      	ldrb	r3, [r3, #6]
 8016232:	2b01      	cmp	r3, #1
 8016234:	d803      	bhi.n	801623e <dhcp_timeout+0x82>
      dhcp_check(netif);
 8016236:	6878      	ldr	r0, [r7, #4]
 8016238:	f7ff fd60 	bl	8015cfc <dhcp_check>
}
 801623c:	e012      	b.n	8016264 <dhcp_timeout+0xa8>
      dhcp_bind(netif);
 801623e:	6878      	ldr	r0, [r7, #4]
 8016240:	f000 fb94 	bl	801696c <dhcp_bind>
}
 8016244:	e00e      	b.n	8016264 <dhcp_timeout+0xa8>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	795b      	ldrb	r3, [r3, #5]
 801624a:	2b03      	cmp	r3, #3
 801624c:	d10a      	bne.n	8016264 <dhcp_timeout+0xa8>
    if (dhcp->tries < REBOOT_TRIES) {
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	799b      	ldrb	r3, [r3, #6]
 8016252:	2b01      	cmp	r3, #1
 8016254:	d803      	bhi.n	801625e <dhcp_timeout+0xa2>
      dhcp_reboot(netif);
 8016256:	6878      	ldr	r0, [r7, #4]
 8016258:	f000 fe1a 	bl	8016e90 <dhcp_reboot>
}
 801625c:	e002      	b.n	8016264 <dhcp_timeout+0xa8>
      dhcp_discover(netif);
 801625e:	6878      	ldr	r0, [r7, #4]
 8016260:	f000 fabc 	bl	80167dc <dhcp_discover>
}
 8016264:	bf00      	nop
 8016266:	3710      	adds	r7, #16
 8016268:	46bd      	mov	sp, r7
 801626a:	bd80      	pop	{r7, pc}
 801626c:	08024450 	.word	0x08024450
 8016270:	08024460 	.word	0x08024460
 8016274:	08024488 	.word	0x08024488
 8016278:	080244bc 	.word	0x080244bc
 801627c:	080244f0 	.word	0x080244f0

08016280 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8016280:	b580      	push	{r7, lr}
 8016282:	b084      	sub	sp, #16
 8016284:	af00      	add	r7, sp, #0
 8016286:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801628c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
 801628e:	4817      	ldr	r0, [pc, #92]	; (80162ec <dhcp_t1_timeout+0x6c>)
 8016290:	f00a f940 	bl	8020514 <puts>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016294:	68fb      	ldr	r3, [r7, #12]
 8016296:	795b      	ldrb	r3, [r3, #5]
 8016298:	2b01      	cmp	r3, #1
 801629a:	d007      	beq.n	80162ac <dhcp_t1_timeout+0x2c>
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	795b      	ldrb	r3, [r3, #5]
 80162a0:	2b0a      	cmp	r3, #10
 80162a2:	d003      	beq.n	80162ac <dhcp_t1_timeout+0x2c>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80162a8:	2b05      	cmp	r3, #5
 80162aa:	d11a      	bne.n	80162e2 <dhcp_t1_timeout+0x62>
    /* just retry to renew - note that the rebind timer (t2) will
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
 80162ac:	4810      	ldr	r0, [pc, #64]	; (80162f0 <dhcp_t1_timeout+0x70>)
 80162ae:	f00a f931 	bl	8020514 <puts>
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80162b2:	6878      	ldr	r0, [r7, #4]
 80162b4:	f000 fc88 	bl	8016bc8 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80162b8:	68fb      	ldr	r3, [r7, #12]
 80162ba:	899b      	ldrh	r3, [r3, #12]
 80162bc:	461a      	mov	r2, r3
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	8a5b      	ldrh	r3, [r3, #18]
 80162c2:	1ad3      	subs	r3, r2, r3
 80162c4:	2b01      	cmp	r3, #1
 80162c6:	dd0c      	ble.n	80162e2 <dhcp_t1_timeout+0x62>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	899b      	ldrh	r3, [r3, #12]
 80162cc:	461a      	mov	r2, r3
 80162ce:	68fb      	ldr	r3, [r7, #12]
 80162d0:	8a5b      	ldrh	r3, [r3, #18]
 80162d2:	1ad3      	subs	r3, r2, r3
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	da00      	bge.n	80162da <dhcp_t1_timeout+0x5a>
 80162d8:	3301      	adds	r3, #1
 80162da:	105b      	asrs	r3, r3, #1
 80162dc:	b29a      	uxth	r2, r3
 80162de:	68fb      	ldr	r3, [r7, #12]
 80162e0:	81da      	strh	r2, [r3, #14]
    }
  }
}
 80162e2:	bf00      	nop
 80162e4:	3710      	adds	r7, #16
 80162e6:	46bd      	mov	sp, r7
 80162e8:	bd80      	pop	{r7, pc}
 80162ea:	bf00      	nop
 80162ec:	08024520 	.word	0x08024520
 80162f0:	08024534 	.word	0x08024534

080162f4 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80162f4:	b580      	push	{r7, lr}
 80162f6:	b084      	sub	sp, #16
 80162f8:	af00      	add	r7, sp, #0
 80162fa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016300:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
 8016302:	4819      	ldr	r0, [pc, #100]	; (8016368 <dhcp_t2_timeout+0x74>)
 8016304:	f00a f906 	bl	8020514 <puts>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016308:	68fb      	ldr	r3, [r7, #12]
 801630a:	795b      	ldrb	r3, [r3, #5]
 801630c:	2b01      	cmp	r3, #1
 801630e:	d00b      	beq.n	8016328 <dhcp_t2_timeout+0x34>
 8016310:	68fb      	ldr	r3, [r7, #12]
 8016312:	795b      	ldrb	r3, [r3, #5]
 8016314:	2b0a      	cmp	r3, #10
 8016316:	d007      	beq.n	8016328 <dhcp_t2_timeout+0x34>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8016318:	68fb      	ldr	r3, [r7, #12]
 801631a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801631c:	2b05      	cmp	r3, #5
 801631e:	d003      	beq.n	8016328 <dhcp_t2_timeout+0x34>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	795b      	ldrb	r3, [r3, #5]
 8016324:	2b04      	cmp	r3, #4
 8016326:	d11a      	bne.n	801635e <dhcp_t2_timeout+0x6a>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
 8016328:	4810      	ldr	r0, [pc, #64]	; (801636c <dhcp_t2_timeout+0x78>)
 801632a:	f00a f8f3 	bl	8020514 <puts>
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801632e:	6878      	ldr	r0, [r7, #4]
 8016330:	f000 fcfc 	bl	8016d2c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8016334:	68fb      	ldr	r3, [r7, #12]
 8016336:	8a9b      	ldrh	r3, [r3, #20]
 8016338:	461a      	mov	r2, r3
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	8a5b      	ldrh	r3, [r3, #18]
 801633e:	1ad3      	subs	r3, r2, r3
 8016340:	2b01      	cmp	r3, #1
 8016342:	dd0c      	ble.n	801635e <dhcp_t2_timeout+0x6a>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8016344:	68fb      	ldr	r3, [r7, #12]
 8016346:	8a9b      	ldrh	r3, [r3, #20]
 8016348:	461a      	mov	r2, r3
 801634a:	68fb      	ldr	r3, [r7, #12]
 801634c:	8a5b      	ldrh	r3, [r3, #18]
 801634e:	1ad3      	subs	r3, r2, r3
 8016350:	2b00      	cmp	r3, #0
 8016352:	da00      	bge.n	8016356 <dhcp_t2_timeout+0x62>
 8016354:	3301      	adds	r3, #1
 8016356:	105b      	asrs	r3, r3, #1
 8016358:	b29a      	uxth	r2, r3
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801635e:	bf00      	nop
 8016360:	3710      	adds	r7, #16
 8016362:	46bd      	mov	sp, r7
 8016364:	bd80      	pop	{r7, pc}
 8016366:	bf00      	nop
 8016368:	08024554 	.word	0x08024554
 801636c:	08024568 	.word	0x08024568

08016370 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8016370:	b580      	push	{r7, lr}
 8016372:	b086      	sub	sp, #24
 8016374:	af00      	add	r7, sp, #0
 8016376:	6078      	str	r0, [r7, #4]
 8016378:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801637e:	613b      	str	r3, [r7, #16]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8016380:	693b      	ldr	r3, [r7, #16]
 8016382:	2200      	movs	r2, #0
 8016384:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8016386:	693b      	ldr	r3, [r7, #16]
 8016388:	2200      	movs	r2, #0
 801638a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801638c:	4b36      	ldr	r3, [pc, #216]	; (8016468 <dhcp_handle_ack+0xf8>)
 801638e:	78db      	ldrb	r3, [r3, #3]
 8016390:	2b00      	cmp	r3, #0
 8016392:	d003      	beq.n	801639c <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8016394:	4b35      	ldr	r3, [pc, #212]	; (801646c <dhcp_handle_ack+0xfc>)
 8016396:	68da      	ldr	r2, [r3, #12]
 8016398:	693b      	ldr	r3, [r7, #16]
 801639a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801639c:	4b32      	ldr	r3, [pc, #200]	; (8016468 <dhcp_handle_ack+0xf8>)
 801639e:	791b      	ldrb	r3, [r3, #4]
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d004      	beq.n	80163ae <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80163a4:	4b31      	ldr	r3, [pc, #196]	; (801646c <dhcp_handle_ack+0xfc>)
 80163a6:	691a      	ldr	r2, [r3, #16]
 80163a8:	693b      	ldr	r3, [r7, #16]
 80163aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80163ac:	e004      	b.n	80163b8 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80163ae:	693b      	ldr	r3, [r7, #16]
 80163b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80163b2:	085a      	lsrs	r2, r3, #1
 80163b4:	693b      	ldr	r3, [r7, #16]
 80163b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80163b8:	4b2b      	ldr	r3, [pc, #172]	; (8016468 <dhcp_handle_ack+0xf8>)
 80163ba:	795b      	ldrb	r3, [r3, #5]
 80163bc:	2b00      	cmp	r3, #0
 80163be:	d004      	beq.n	80163ca <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80163c0:	4b2a      	ldr	r3, [pc, #168]	; (801646c <dhcp_handle_ack+0xfc>)
 80163c2:	695a      	ldr	r2, [r3, #20]
 80163c4:	693b      	ldr	r3, [r7, #16]
 80163c6:	631a      	str	r2, [r3, #48]	; 0x30
 80163c8:	e007      	b.n	80163da <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80163ca:	693b      	ldr	r3, [r7, #16]
 80163cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80163ce:	4613      	mov	r3, r2
 80163d0:	00db      	lsls	r3, r3, #3
 80163d2:	1a9b      	subs	r3, r3, r2
 80163d4:	08da      	lsrs	r2, r3, #3
 80163d6:	693b      	ldr	r3, [r7, #16]
 80163d8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80163da:	683b      	ldr	r3, [r7, #0]
 80163dc:	691a      	ldr	r2, [r3, #16]
 80163de:	693b      	ldr	r3, [r7, #16]
 80163e0:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80163e2:	4b21      	ldr	r3, [pc, #132]	; (8016468 <dhcp_handle_ack+0xf8>)
 80163e4:	799b      	ldrb	r3, [r3, #6]
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d00b      	beq.n	8016402 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80163ea:	4b20      	ldr	r3, [pc, #128]	; (801646c <dhcp_handle_ack+0xfc>)
 80163ec:	699b      	ldr	r3, [r3, #24]
 80163ee:	4618      	mov	r0, r3
 80163f0:	f7f6 fadb 	bl	800c9aa <lwip_htonl>
 80163f4:	4602      	mov	r2, r0
 80163f6:	693b      	ldr	r3, [r7, #16]
 80163f8:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 80163fa:	693b      	ldr	r3, [r7, #16]
 80163fc:	2201      	movs	r2, #1
 80163fe:	71da      	strb	r2, [r3, #7]
 8016400:	e002      	b.n	8016408 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8016402:	693b      	ldr	r3, [r7, #16]
 8016404:	2200      	movs	r2, #0
 8016406:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8016408:	4b17      	ldr	r3, [pc, #92]	; (8016468 <dhcp_handle_ack+0xf8>)
 801640a:	79db      	ldrb	r3, [r3, #7]
 801640c:	2b00      	cmp	r3, #0
 801640e:	d007      	beq.n	8016420 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8016410:	4b16      	ldr	r3, [pc, #88]	; (801646c <dhcp_handle_ack+0xfc>)
 8016412:	69db      	ldr	r3, [r3, #28]
 8016414:	4618      	mov	r0, r3
 8016416:	f7f6 fac8 	bl	800c9aa <lwip_htonl>
 801641a:	4602      	mov	r2, r0
 801641c:	693b      	ldr	r3, [r7, #16]
 801641e:	625a      	str	r2, [r3, #36]	; 0x24
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8016420:	2300      	movs	r3, #0
 8016422:	75fb      	strb	r3, [r7, #23]
 8016424:	e013      	b.n	801644e <dhcp_handle_ack+0xde>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8016426:	7dfb      	ldrb	r3, [r7, #23]
 8016428:	3308      	adds	r3, #8
 801642a:	4a10      	ldr	r2, [pc, #64]	; (801646c <dhcp_handle_ack+0xfc>)
 801642c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016430:	4618      	mov	r0, r3
 8016432:	f7f6 faba 	bl	800c9aa <lwip_htonl>
 8016436:	4603      	mov	r3, r0
 8016438:	60fb      	str	r3, [r7, #12]
    dns_setserver(n, &dns_addr);
 801643a:	f107 020c 	add.w	r2, r7, #12
 801643e:	7dfb      	ldrb	r3, [r7, #23]
 8016440:	4611      	mov	r1, r2
 8016442:	4618      	mov	r0, r3
 8016444:	f7f6 fad2 	bl	800c9ec <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8016448:	7dfb      	ldrb	r3, [r7, #23]
 801644a:	3301      	adds	r3, #1
 801644c:	75fb      	strb	r3, [r7, #23]
 801644e:	7dfb      	ldrb	r3, [r7, #23]
 8016450:	2b01      	cmp	r3, #1
 8016452:	d805      	bhi.n	8016460 <dhcp_handle_ack+0xf0>
 8016454:	7dfb      	ldrb	r3, [r7, #23]
 8016456:	3308      	adds	r3, #8
 8016458:	4a03      	ldr	r2, [pc, #12]	; (8016468 <dhcp_handle_ack+0xf8>)
 801645a:	5cd3      	ldrb	r3, [r2, r3]
 801645c:	2b00      	cmp	r3, #0
 801645e:	d1e2      	bne.n	8016426 <dhcp_handle_ack+0xb6>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8016460:	bf00      	nop
 8016462:	3718      	adds	r7, #24
 8016464:	46bd      	mov	sp, r7
 8016466:	bd80      	pop	{r7, pc}
 8016468:	2000a530 	.word	0x2000a530
 801646c:	2000a53c 	.word	0x2000a53c

08016470 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8016470:	b580      	push	{r7, lr}
 8016472:	b086      	sub	sp, #24
 8016474:	af02      	add	r7, sp, #8
 8016476:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	2b00      	cmp	r3, #0
 801647c:	d109      	bne.n	8016492 <dhcp_start+0x22>
 801647e:	4b49      	ldr	r3, [pc, #292]	; (80165a4 <dhcp_start+0x134>)
 8016480:	f240 22e7 	movw	r2, #743	; 0x2e7
 8016484:	4948      	ldr	r1, [pc, #288]	; (80165a8 <dhcp_start+0x138>)
 8016486:	4849      	ldr	r0, [pc, #292]	; (80165ac <dhcp_start+0x13c>)
 8016488:	f009 ffa8 	bl	80203dc <iprintf>
 801648c:	f06f 030f 	mvn.w	r3, #15
 8016490:	e083      	b.n	801659a <dhcp_start+0x12a>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016498:	f003 0301 	and.w	r3, r3, #1
 801649c:	2b00      	cmp	r3, #0
 801649e:	d109      	bne.n	80164b4 <dhcp_start+0x44>
 80164a0:	4b40      	ldr	r3, [pc, #256]	; (80165a4 <dhcp_start+0x134>)
 80164a2:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 80164a6:	4942      	ldr	r1, [pc, #264]	; (80165b0 <dhcp_start+0x140>)
 80164a8:	4840      	ldr	r0, [pc, #256]	; (80165ac <dhcp_start+0x13c>)
 80164aa:	f009 ff97 	bl	80203dc <iprintf>
 80164ae:	f06f 030f 	mvn.w	r3, #15
 80164b2:	e072      	b.n	801659a <dhcp_start+0x12a>
  dhcp = netif_dhcp_data(netif);
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164b8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80164c0:	461a      	mov	r2, r3
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80164c8:	4619      	mov	r1, r3
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80164d0:	9300      	str	r3, [sp, #0]
 80164d2:	460b      	mov	r3, r1
 80164d4:	6879      	ldr	r1, [r7, #4]
 80164d6:	4837      	ldr	r0, [pc, #220]	; (80165b4 <dhcp_start+0x144>)
 80164d8:	f009 ff80 	bl	80203dc <iprintf>

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80164e0:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80164e4:	d205      	bcs.n	80164f2 <dhcp_start+0x82>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
 80164e6:	4834      	ldr	r0, [pc, #208]	; (80165b8 <dhcp_start+0x148>)
 80164e8:	f00a f814 	bl	8020514 <puts>
    return ERR_MEM;
 80164ec:	f04f 33ff 	mov.w	r3, #4294967295
 80164f0:	e053      	b.n	801659a <dhcp_start+0x12a>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d116      	bne.n	8016526 <dhcp_start+0xb6>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
 80164f8:	4830      	ldr	r0, [pc, #192]	; (80165bc <dhcp_start+0x14c>)
 80164fa:	f00a f80b 	bl	8020514 <puts>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80164fe:	2034      	movs	r0, #52	; 0x34
 8016500:	f7f7 f978 	bl	800d7f4 <mem_malloc>
 8016504:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8016506:	68fb      	ldr	r3, [r7, #12]
 8016508:	2b00      	cmp	r3, #0
 801650a:	d105      	bne.n	8016518 <dhcp_start+0xa8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
 801650c:	482c      	ldr	r0, [pc, #176]	; (80165c0 <dhcp_start+0x150>)
 801650e:	f00a f801 	bl	8020514 <puts>
      return ERR_MEM;
 8016512:	f04f 33ff 	mov.w	r3, #4294967295
 8016516:	e040      	b.n	801659a <dhcp_start+0x12a>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	68fa      	ldr	r2, [r7, #12]
 801651c:	625a      	str	r2, [r3, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
 801651e:	4829      	ldr	r0, [pc, #164]	; (80165c4 <dhcp_start+0x154>)
 8016520:	f009 ff5c 	bl	80203dc <iprintf>
 8016524:	e008      	b.n	8016538 <dhcp_start+0xc8>
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
 8016526:	4828      	ldr	r0, [pc, #160]	; (80165c8 <dhcp_start+0x158>)
 8016528:	f009 fff4 	bl	8020514 <puts>

    if (dhcp->pcb_allocated != 0) {
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	791b      	ldrb	r3, [r3, #4]
 8016530:	2b00      	cmp	r3, #0
 8016532:	d001      	beq.n	8016538 <dhcp_start+0xc8>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8016534:	f7ff fb8a 	bl	8015c4c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8016538:	2234      	movs	r2, #52	; 0x34
 801653a:	2100      	movs	r1, #0
 801653c:	68f8      	ldr	r0, [r7, #12]
 801653e:	f009 fe9b 	bl	8020278 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));
 8016542:	4822      	ldr	r0, [pc, #136]	; (80165cc <dhcp_start+0x15c>)
 8016544:	f009 ffe6 	bl	8020514 <puts>

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8016548:	f7ff fb2e 	bl	8015ba8 <dhcp_inc_pcb_refcount>
 801654c:	4603      	mov	r3, r0
 801654e:	2b00      	cmp	r3, #0
 8016550:	d002      	beq.n	8016558 <dhcp_start+0xe8>
    return ERR_MEM;
 8016552:	f04f 33ff 	mov.w	r3, #4294967295
 8016556:	e020      	b.n	801659a <dhcp_start+0x12a>
  }
  dhcp->pcb_allocated = 1;
 8016558:	68fb      	ldr	r3, [r7, #12]
 801655a:	2201      	movs	r2, #1
 801655c:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016564:	f003 0304 	and.w	r3, r3, #4
 8016568:	2b00      	cmp	r3, #0
 801656a:	d105      	bne.n	8016578 <dhcp_start+0x108>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801656c:	2102      	movs	r1, #2
 801656e:	68f8      	ldr	r0, [r7, #12]
 8016570:	f000 fe04 	bl	801717c <dhcp_set_state>
    return ERR_OK;
 8016574:	2300      	movs	r3, #0
 8016576:	e010      	b.n	801659a <dhcp_start+0x12a>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8016578:	6878      	ldr	r0, [r7, #4]
 801657a:	f000 f92f 	bl	80167dc <dhcp_discover>
 801657e:	4603      	mov	r3, r0
 8016580:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8016582:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8016586:	2b00      	cmp	r3, #0
 8016588:	d005      	beq.n	8016596 <dhcp_start+0x126>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801658a:	6878      	ldr	r0, [r7, #4]
 801658c:	f000 fd4c 	bl	8017028 <dhcp_release_and_stop>
    return ERR_MEM;
 8016590:	f04f 33ff 	mov.w	r3, #4294967295
 8016594:	e001      	b.n	801659a <dhcp_start+0x12a>
  }
  return result;
 8016596:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801659a:	4618      	mov	r0, r3
 801659c:	3710      	adds	r7, #16
 801659e:	46bd      	mov	sp, r7
 80165a0:	bd80      	pop	{r7, pc}
 80165a2:	bf00      	nop
 80165a4:	080240f8 	.word	0x080240f8
 80165a8:	08024588 	.word	0x08024588
 80165ac:	08024158 	.word	0x08024158
 80165b0:	080245cc 	.word	0x080245cc
 80165b4:	080245f0 	.word	0x080245f0
 80165b8:	08024610 	.word	0x08024610
 80165bc:	08024650 	.word	0x08024650
 80165c0:	08024678 	.word	0x08024678
 80165c4:	080246a0 	.word	0x080246a0
 80165c8:	080246c0 	.word	0x080246c0
 80165cc:	080246ec 	.word	0x080246ec

080165d0 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 80165d0:	b580      	push	{r7, lr}
 80165d2:	b084      	sub	sp, #16
 80165d4:	af00      	add	r7, sp, #0
 80165d6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165dc:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 80165de:	68fb      	ldr	r3, [r7, #12]
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	d025      	beq.n	8016630 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 80165e4:	68fb      	ldr	r3, [r7, #12]
 80165e6:	795b      	ldrb	r3, [r3, #5]
 80165e8:	2b0a      	cmp	r3, #10
 80165ea:	d008      	beq.n	80165fe <dhcp_network_changed+0x2e>
 80165ec:	2b0a      	cmp	r3, #10
 80165ee:	dc0d      	bgt.n	801660c <dhcp_network_changed+0x3c>
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d01f      	beq.n	8016634 <dhcp_network_changed+0x64>
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	db09      	blt.n	801660c <dhcp_network_changed+0x3c>
 80165f8:	3b03      	subs	r3, #3
 80165fa:	2b02      	cmp	r3, #2
 80165fc:	d806      	bhi.n	801660c <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 80165fe:	68fb      	ldr	r3, [r7, #12]
 8016600:	2200      	movs	r2, #0
 8016602:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8016604:	6878      	ldr	r0, [r7, #4]
 8016606:	f000 fc43 	bl	8016e90 <dhcp_reboot>
      break;
 801660a:	e014      	b.n	8016636 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801660c:	68fb      	ldr	r3, [r7, #12]
 801660e:	795b      	ldrb	r3, [r3, #5]
 8016610:	2b0c      	cmp	r3, #12
 8016612:	d906      	bls.n	8016622 <dhcp_network_changed+0x52>
 8016614:	4b09      	ldr	r3, [pc, #36]	; (801663c <dhcp_network_changed+0x6c>)
 8016616:	f240 326d 	movw	r2, #877	; 0x36d
 801661a:	4909      	ldr	r1, [pc, #36]	; (8016640 <dhcp_network_changed+0x70>)
 801661c:	4809      	ldr	r0, [pc, #36]	; (8016644 <dhcp_network_changed+0x74>)
 801661e:	f009 fedd 	bl	80203dc <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8016622:	68fb      	ldr	r3, [r7, #12]
 8016624:	2200      	movs	r2, #0
 8016626:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8016628:	6878      	ldr	r0, [r7, #4]
 801662a:	f000 f8d7 	bl	80167dc <dhcp_discover>
      break;
 801662e:	e002      	b.n	8016636 <dhcp_network_changed+0x66>
    return;
 8016630:	bf00      	nop
 8016632:	e000      	b.n	8016636 <dhcp_network_changed+0x66>
      break;
 8016634:	bf00      	nop
  }
}
 8016636:	3710      	adds	r7, #16
 8016638:	46bd      	mov	sp, r7
 801663a:	bd80      	pop	{r7, pc}
 801663c:	080240f8 	.word	0x080240f8
 8016640:	08024760 	.word	0x08024760
 8016644:	08024158 	.word	0x08024158

08016648 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8016648:	b580      	push	{r7, lr}
 801664a:	b084      	sub	sp, #16
 801664c:	af00      	add	r7, sp, #0
 801664e:	6078      	str	r0, [r7, #4]
 8016650:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	2b00      	cmp	r3, #0
 8016656:	d107      	bne.n	8016668 <dhcp_arp_reply+0x20>
 8016658:	4b14      	ldr	r3, [pc, #80]	; (80166ac <dhcp_arp_reply+0x64>)
 801665a:	f240 328b 	movw	r2, #907	; 0x38b
 801665e:	4914      	ldr	r1, [pc, #80]	; (80166b0 <dhcp_arp_reply+0x68>)
 8016660:	4814      	ldr	r0, [pc, #80]	; (80166b4 <dhcp_arp_reply+0x6c>)
 8016662:	f009 febb 	bl	80203dc <iprintf>
 8016666:	e01e      	b.n	80166a6 <dhcp_arp_reply+0x5e>
  dhcp = netif_dhcp_data(netif);
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801666c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
 801666e:	4812      	ldr	r0, [pc, #72]	; (80166b8 <dhcp_arp_reply+0x70>)
 8016670:	f009 ff50 	bl	8020514 <puts>
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8016674:	68fb      	ldr	r3, [r7, #12]
 8016676:	2b00      	cmp	r3, #0
 8016678:	d015      	beq.n	80166a6 <dhcp_arp_reply+0x5e>
 801667a:	68fb      	ldr	r3, [r7, #12]
 801667c:	795b      	ldrb	r3, [r3, #5]
 801667e:	2b08      	cmp	r3, #8
 8016680:	d111      	bne.n	80166a6 <dhcp_arp_reply+0x5e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
 8016682:	683b      	ldr	r3, [r7, #0]
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	4619      	mov	r1, r3
 8016688:	480c      	ldr	r0, [pc, #48]	; (80166bc <dhcp_arp_reply+0x74>)
 801668a:	f009 fea7 	bl	80203dc <iprintf>
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801668e:	683b      	ldr	r3, [r7, #0]
 8016690:	681a      	ldr	r2, [r3, #0]
 8016692:	68fb      	ldr	r3, [r7, #12]
 8016694:	69db      	ldr	r3, [r3, #28]
 8016696:	429a      	cmp	r2, r3
 8016698:	d105      	bne.n	80166a6 <dhcp_arp_reply+0x5e>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
 801669a:	4809      	ldr	r0, [pc, #36]	; (80166c0 <dhcp_arp_reply+0x78>)
 801669c:	f009 ff3a 	bl	8020514 <puts>
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80166a0:	6878      	ldr	r0, [r7, #4]
 80166a2:	f000 f80f 	bl	80166c4 <dhcp_decline>
    }
  }
}
 80166a6:	3710      	adds	r7, #16
 80166a8:	46bd      	mov	sp, r7
 80166aa:	bd80      	pop	{r7, pc}
 80166ac:	080240f8 	.word	0x080240f8
 80166b0:	08024588 	.word	0x08024588
 80166b4:	08024158 	.word	0x08024158
 80166b8:	08024774 	.word	0x08024774
 80166bc:	08024788 	.word	0x08024788
 80166c0:	080247bc 	.word	0x080247bc

080166c4 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80166c4:	b5b0      	push	{r4, r5, r7, lr}
 80166c6:	b08a      	sub	sp, #40	; 0x28
 80166c8:	af02      	add	r7, sp, #8
 80166ca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80166d0:	61bb      	str	r3, [r7, #24]
  err_t result;
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
 80166d2:	483a      	ldr	r0, [pc, #232]	; (80167bc <dhcp_decline+0xf8>)
 80166d4:	f009 ff1e 	bl	8020514 <puts>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80166d8:	210c      	movs	r1, #12
 80166da:	69b8      	ldr	r0, [r7, #24]
 80166dc:	f000 fd4e 	bl	801717c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80166e0:	f107 030c 	add.w	r3, r7, #12
 80166e4:	2204      	movs	r2, #4
 80166e6:	69b9      	ldr	r1, [r7, #24]
 80166e8:	6878      	ldr	r0, [r7, #4]
 80166ea:	f001 fa93 	bl	8017c14 <dhcp_create_msg>
 80166ee:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80166f0:	697b      	ldr	r3, [r7, #20]
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d038      	beq.n	8016768 <dhcp_decline+0xa4>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80166f6:	697b      	ldr	r3, [r7, #20]
 80166f8:	685b      	ldr	r3, [r3, #4]
 80166fa:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80166fc:	89b8      	ldrh	r0, [r7, #12]
 80166fe:	693b      	ldr	r3, [r7, #16]
 8016700:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016704:	2304      	movs	r3, #4
 8016706:	2232      	movs	r2, #50	; 0x32
 8016708:	f000 fd52 	bl	80171b0 <dhcp_option>
 801670c:	4603      	mov	r3, r0
 801670e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8016710:	89bc      	ldrh	r4, [r7, #12]
 8016712:	693b      	ldr	r3, [r7, #16]
 8016714:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8016718:	69bb      	ldr	r3, [r7, #24]
 801671a:	69db      	ldr	r3, [r3, #28]
 801671c:	4618      	mov	r0, r3
 801671e:	f7f6 f944 	bl	800c9aa <lwip_htonl>
 8016722:	4603      	mov	r3, r0
 8016724:	461a      	mov	r2, r3
 8016726:	4629      	mov	r1, r5
 8016728:	4620      	mov	r0, r4
 801672a:	f000 fdcd 	bl	80172c8 <dhcp_option_long>
 801672e:	4603      	mov	r3, r0
 8016730:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016732:	89b8      	ldrh	r0, [r7, #12]
 8016734:	693b      	ldr	r3, [r7, #16]
 8016736:	33f0      	adds	r3, #240	; 0xf0
 8016738:	697a      	ldr	r2, [r7, #20]
 801673a:	4619      	mov	r1, r3
 801673c:	f001 fb4e 	bl	8017ddc <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8016740:	4b1f      	ldr	r3, [pc, #124]	; (80167c0 <dhcp_decline+0xfc>)
 8016742:	6818      	ldr	r0, [r3, #0]
 8016744:	4b1f      	ldr	r3, [pc, #124]	; (80167c4 <dhcp_decline+0x100>)
 8016746:	9301      	str	r3, [sp, #4]
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	9300      	str	r3, [sp, #0]
 801674c:	2343      	movs	r3, #67	; 0x43
 801674e:	4a1e      	ldr	r2, [pc, #120]	; (80167c8 <dhcp_decline+0x104>)
 8016750:	6979      	ldr	r1, [r7, #20]
 8016752:	f7fe fe47 	bl	80153e4 <udp_sendto_if_src>
 8016756:	4603      	mov	r3, r0
 8016758:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801675a:	6978      	ldr	r0, [r7, #20]
 801675c:	f7f8 fa98 	bl	800ec90 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
 8016760:	481a      	ldr	r0, [pc, #104]	; (80167cc <dhcp_decline+0x108>)
 8016762:	f009 fed7 	bl	8020514 <puts>
 8016766:	e004      	b.n	8016772 <dhcp_decline+0xae>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 8016768:	4819      	ldr	r0, [pc, #100]	; (80167d0 <dhcp_decline+0x10c>)
 801676a:	f009 fed3 	bl	8020514 <puts>
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801676e:	23ff      	movs	r3, #255	; 0xff
 8016770:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016772:	69bb      	ldr	r3, [r7, #24]
 8016774:	799b      	ldrb	r3, [r3, #6]
 8016776:	2bff      	cmp	r3, #255	; 0xff
 8016778:	d005      	beq.n	8016786 <dhcp_decline+0xc2>
    dhcp->tries++;
 801677a:	69bb      	ldr	r3, [r7, #24]
 801677c:	799b      	ldrb	r3, [r3, #6]
 801677e:	3301      	adds	r3, #1
 8016780:	b2da      	uxtb	r2, r3
 8016782:	69bb      	ldr	r3, [r7, #24]
 8016784:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8016786:	f242 7310 	movw	r3, #10000	; 0x2710
 801678a:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801678c:	89fb      	ldrh	r3, [r7, #14]
 801678e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016792:	4a10      	ldr	r2, [pc, #64]	; (80167d4 <dhcp_decline+0x110>)
 8016794:	fb82 1203 	smull	r1, r2, r2, r3
 8016798:	1152      	asrs	r2, r2, #5
 801679a:	17db      	asrs	r3, r3, #31
 801679c:	1ad3      	subs	r3, r2, r3
 801679e:	b29a      	uxth	r2, r3
 80167a0:	69bb      	ldr	r3, [r7, #24]
 80167a2:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
 80167a4:	89fb      	ldrh	r3, [r7, #14]
 80167a6:	4619      	mov	r1, r3
 80167a8:	480b      	ldr	r0, [pc, #44]	; (80167d8 <dhcp_decline+0x114>)
 80167aa:	f009 fe17 	bl	80203dc <iprintf>
  return result;
 80167ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80167b2:	4618      	mov	r0, r3
 80167b4:	3720      	adds	r7, #32
 80167b6:	46bd      	mov	sp, r7
 80167b8:	bdb0      	pop	{r4, r5, r7, pc}
 80167ba:	bf00      	nop
 80167bc:	08024800 	.word	0x08024800
 80167c0:	20006888 	.word	0x20006888
 80167c4:	08026bf4 	.word	0x08026bf4
 80167c8:	08026bf8 	.word	0x08026bf8
 80167cc:	08024810 	.word	0x08024810
 80167d0:	0802482c 	.word	0x0802482c
 80167d4:	10624dd3 	.word	0x10624dd3
 80167d8:	0802485c 	.word	0x0802485c

080167dc <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80167dc:	b580      	push	{r7, lr}
 80167de:	b08a      	sub	sp, #40	; 0x28
 80167e0:	af02      	add	r7, sp, #8
 80167e2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167e8:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 80167ea:	2300      	movs	r3, #0
 80167ec:	75fb      	strb	r3, [r7, #23]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
 80167ee:	4853      	ldr	r0, [pc, #332]	; (801693c <dhcp_discover+0x160>)
 80167f0:	f009 fe90 	bl	8020514 <puts>

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80167f4:	69bb      	ldr	r3, [r7, #24]
 80167f6:	2200      	movs	r2, #0
 80167f8:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80167fa:	2106      	movs	r1, #6
 80167fc:	69b8      	ldr	r0, [r7, #24]
 80167fe:	f000 fcbd 	bl	801717c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8016802:	f107 0308 	add.w	r3, r7, #8
 8016806:	2201      	movs	r2, #1
 8016808:	69b9      	ldr	r1, [r7, #24]
 801680a:	6878      	ldr	r0, [r7, #4]
 801680c:	f001 fa02 	bl	8017c14 <dhcp_create_msg>
 8016810:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8016812:	693b      	ldr	r3, [r7, #16]
 8016814:	2b00      	cmp	r3, #0
 8016816:	d058      	beq.n	80168ca <dhcp_discover+0xee>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016818:	693b      	ldr	r3, [r7, #16]
 801681a:	685b      	ldr	r3, [r3, #4]
 801681c:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));
 801681e:	4848      	ldr	r0, [pc, #288]	; (8016940 <dhcp_discover+0x164>)
 8016820:	f009 fe78 	bl	8020514 <puts>

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016824:	8938      	ldrh	r0, [r7, #8]
 8016826:	68fb      	ldr	r3, [r7, #12]
 8016828:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801682c:	2302      	movs	r3, #2
 801682e:	2239      	movs	r2, #57	; 0x39
 8016830:	f000 fcbe 	bl	80171b0 <dhcp_option>
 8016834:	4603      	mov	r3, r0
 8016836:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8016838:	8938      	ldrh	r0, [r7, #8]
 801683a:	68fb      	ldr	r3, [r7, #12]
 801683c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8016844:	461a      	mov	r2, r3
 8016846:	f000 fd0d 	bl	8017264 <dhcp_option_short>
 801684a:	4603      	mov	r3, r0
 801684c:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801684e:	8938      	ldrh	r0, [r7, #8]
 8016850:	68fb      	ldr	r3, [r7, #12]
 8016852:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016856:	2304      	movs	r3, #4
 8016858:	2237      	movs	r2, #55	; 0x37
 801685a:	f000 fca9 	bl	80171b0 <dhcp_option>
 801685e:	4603      	mov	r3, r0
 8016860:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016862:	2300      	movs	r3, #0
 8016864:	77fb      	strb	r3, [r7, #31]
 8016866:	e00e      	b.n	8016886 <dhcp_discover+0xaa>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016868:	8938      	ldrh	r0, [r7, #8]
 801686a:	68fb      	ldr	r3, [r7, #12]
 801686c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016870:	7ffb      	ldrb	r3, [r7, #31]
 8016872:	4a34      	ldr	r2, [pc, #208]	; (8016944 <dhcp_discover+0x168>)
 8016874:	5cd3      	ldrb	r3, [r2, r3]
 8016876:	461a      	mov	r2, r3
 8016878:	f000 fcce 	bl	8017218 <dhcp_option_byte>
 801687c:	4603      	mov	r3, r0
 801687e:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016880:	7ffb      	ldrb	r3, [r7, #31]
 8016882:	3301      	adds	r3, #1
 8016884:	77fb      	strb	r3, [r7, #31]
 8016886:	7ffb      	ldrb	r3, [r7, #31]
 8016888:	2b03      	cmp	r3, #3
 801688a:	d9ed      	bls.n	8016868 <dhcp_discover+0x8c>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801688c:	8938      	ldrh	r0, [r7, #8]
 801688e:	68fb      	ldr	r3, [r7, #12]
 8016890:	33f0      	adds	r3, #240	; 0xf0
 8016892:	693a      	ldr	r2, [r7, #16]
 8016894:	4619      	mov	r1, r3
 8016896:	f001 faa1 	bl	8017ddc <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
 801689a:	482b      	ldr	r0, [pc, #172]	; (8016948 <dhcp_discover+0x16c>)
 801689c:	f009 fe3a 	bl	8020514 <puts>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80168a0:	4b2a      	ldr	r3, [pc, #168]	; (801694c <dhcp_discover+0x170>)
 80168a2:	6818      	ldr	r0, [r3, #0]
 80168a4:	4b2a      	ldr	r3, [pc, #168]	; (8016950 <dhcp_discover+0x174>)
 80168a6:	9301      	str	r3, [sp, #4]
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	9300      	str	r3, [sp, #0]
 80168ac:	2343      	movs	r3, #67	; 0x43
 80168ae:	4a29      	ldr	r2, [pc, #164]	; (8016954 <dhcp_discover+0x178>)
 80168b0:	6939      	ldr	r1, [r7, #16]
 80168b2:	f7fe fd97 	bl	80153e4 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
 80168b6:	4828      	ldr	r0, [pc, #160]	; (8016958 <dhcp_discover+0x17c>)
 80168b8:	f009 fe2c 	bl	8020514 <puts>
    pbuf_free(p_out);
 80168bc:	6938      	ldr	r0, [r7, #16]
 80168be:	f7f8 f9e7 	bl	800ec90 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
 80168c2:	4826      	ldr	r0, [pc, #152]	; (801695c <dhcp_discover+0x180>)
 80168c4:	f009 fe26 	bl	8020514 <puts>
 80168c8:	e002      	b.n	80168d0 <dhcp_discover+0xf4>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
 80168ca:	4825      	ldr	r0, [pc, #148]	; (8016960 <dhcp_discover+0x184>)
 80168cc:	f009 fe22 	bl	8020514 <puts>
  }
  if (dhcp->tries < 255) {
 80168d0:	69bb      	ldr	r3, [r7, #24]
 80168d2:	799b      	ldrb	r3, [r3, #6]
 80168d4:	2bff      	cmp	r3, #255	; 0xff
 80168d6:	d005      	beq.n	80168e4 <dhcp_discover+0x108>
    dhcp->tries++;
 80168d8:	69bb      	ldr	r3, [r7, #24]
 80168da:	799b      	ldrb	r3, [r3, #6]
 80168dc:	3301      	adds	r3, #1
 80168de:	b2da      	uxtb	r2, r3
 80168e0:	69bb      	ldr	r3, [r7, #24]
 80168e2:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80168e4:	69bb      	ldr	r3, [r7, #24]
 80168e6:	799b      	ldrb	r3, [r3, #6]
 80168e8:	2b05      	cmp	r3, #5
 80168ea:	d80d      	bhi.n	8016908 <dhcp_discover+0x12c>
 80168ec:	69bb      	ldr	r3, [r7, #24]
 80168ee:	799b      	ldrb	r3, [r3, #6]
 80168f0:	461a      	mov	r2, r3
 80168f2:	2301      	movs	r3, #1
 80168f4:	4093      	lsls	r3, r2
 80168f6:	b29b      	uxth	r3, r3
 80168f8:	461a      	mov	r2, r3
 80168fa:	0152      	lsls	r2, r2, #5
 80168fc:	1ad2      	subs	r2, r2, r3
 80168fe:	0092      	lsls	r2, r2, #2
 8016900:	4413      	add	r3, r2
 8016902:	00db      	lsls	r3, r3, #3
 8016904:	b29b      	uxth	r3, r3
 8016906:	e001      	b.n	801690c <dhcp_discover+0x130>
 8016908:	f64e 2360 	movw	r3, #60000	; 0xea60
 801690c:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801690e:	897b      	ldrh	r3, [r7, #10]
 8016910:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016914:	4a13      	ldr	r2, [pc, #76]	; (8016964 <dhcp_discover+0x188>)
 8016916:	fb82 1203 	smull	r1, r2, r2, r3
 801691a:	1152      	asrs	r2, r2, #5
 801691c:	17db      	asrs	r3, r3, #31
 801691e:	1ad3      	subs	r3, r2, r3
 8016920:	b29a      	uxth	r2, r3
 8016922:	69bb      	ldr	r3, [r7, #24]
 8016924:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
 8016926:	897b      	ldrh	r3, [r7, #10]
 8016928:	4619      	mov	r1, r3
 801692a:	480f      	ldr	r0, [pc, #60]	; (8016968 <dhcp_discover+0x18c>)
 801692c:	f009 fd56 	bl	80203dc <iprintf>
  return result;
 8016930:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016934:	4618      	mov	r0, r3
 8016936:	3720      	adds	r7, #32
 8016938:	46bd      	mov	sp, r7
 801693a:	bd80      	pop	{r7, pc}
 801693c:	0802488c 	.word	0x0802488c
 8016940:	0802489c 	.word	0x0802489c
 8016944:	20000034 	.word	0x20000034
 8016948:	080248bc 	.word	0x080248bc
 801694c:	20006888 	.word	0x20006888
 8016950:	08026bf4 	.word	0x08026bf4
 8016954:	08026bf8 	.word	0x08026bf8
 8016958:	0802490c 	.word	0x0802490c
 801695c:	0802492c 	.word	0x0802492c
 8016960:	08024948 	.word	0x08024948
 8016964:	10624dd3 	.word	0x10624dd3
 8016968:	08024978 	.word	0x08024978

0801696c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 801696c:	b580      	push	{r7, lr}
 801696e:	b08a      	sub	sp, #40	; 0x28
 8016970:	af02      	add	r7, sp, #8
 8016972:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	2b00      	cmp	r3, #0
 8016978:	d107      	bne.n	801698a <dhcp_bind+0x1e>
 801697a:	4b88      	ldr	r3, [pc, #544]	; (8016b9c <dhcp_bind+0x230>)
 801697c:	f240 4215 	movw	r2, #1045	; 0x415
 8016980:	4987      	ldr	r1, [pc, #540]	; (8016ba0 <dhcp_bind+0x234>)
 8016982:	4888      	ldr	r0, [pc, #544]	; (8016ba4 <dhcp_bind+0x238>)
 8016984:	f009 fd2a 	bl	80203dc <iprintf>
 8016988:	e104      	b.n	8016b94 <dhcp_bind+0x228>
  dhcp = netif_dhcp_data(netif);
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801698e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8016990:	69bb      	ldr	r3, [r7, #24]
 8016992:	2b00      	cmp	r3, #0
 8016994:	d107      	bne.n	80169a6 <dhcp_bind+0x3a>
 8016996:	4b81      	ldr	r3, [pc, #516]	; (8016b9c <dhcp_bind+0x230>)
 8016998:	f240 4217 	movw	r2, #1047	; 0x417
 801699c:	4982      	ldr	r1, [pc, #520]	; (8016ba8 <dhcp_bind+0x23c>)
 801699e:	4881      	ldr	r0, [pc, #516]	; (8016ba4 <dhcp_bind+0x238>)
 80169a0:	f009 fd1c 	bl	80203dc <iprintf>
 80169a4:	e0f6      	b.n	8016b94 <dhcp_bind+0x228>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80169ac:	461a      	mov	r2, r3
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80169b4:	4619      	mov	r1, r3
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80169bc:	9300      	str	r3, [sp, #0]
 80169be:	460b      	mov	r3, r1
 80169c0:	6879      	ldr	r1, [r7, #4]
 80169c2:	487a      	ldr	r0, [pc, #488]	; (8016bac <dhcp_bind+0x240>)
 80169c4:	f009 fd0a 	bl	80203dc <iprintf>

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80169c8:	69bb      	ldr	r3, [r7, #24]
 80169ca:	2200      	movs	r2, #0
 80169cc:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80169ce:	69bb      	ldr	r3, [r7, #24]
 80169d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80169d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80169d6:	d029      	beq.n	8016a2c <dhcp_bind+0xc0>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
 80169d8:	69bb      	ldr	r3, [r7, #24]
 80169da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80169dc:	4619      	mov	r1, r3
 80169de:	4874      	ldr	r0, [pc, #464]	; (8016bb0 <dhcp_bind+0x244>)
 80169e0:	f009 fcfc 	bl	80203dc <iprintf>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80169e4:	69bb      	ldr	r3, [r7, #24]
 80169e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80169e8:	331e      	adds	r3, #30
 80169ea:	4a72      	ldr	r2, [pc, #456]	; (8016bb4 <dhcp_bind+0x248>)
 80169ec:	fba2 2303 	umull	r2, r3, r2, r3
 80169f0:	095b      	lsrs	r3, r3, #5
 80169f2:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80169f4:	69fb      	ldr	r3, [r7, #28]
 80169f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80169fa:	d302      	bcc.n	8016a02 <dhcp_bind+0x96>
      timeout = 0xffff;
 80169fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016a00:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8016a02:	69fb      	ldr	r3, [r7, #28]
 8016a04:	b29a      	uxth	r2, r3
 8016a06:	69bb      	ldr	r3, [r7, #24]
 8016a08:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8016a0a:	69bb      	ldr	r3, [r7, #24]
 8016a0c:	8a9b      	ldrh	r3, [r3, #20]
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d102      	bne.n	8016a18 <dhcp_bind+0xac>
      dhcp->t0_timeout = 1;
 8016a12:	69bb      	ldr	r3, [r7, #24]
 8016a14:	2201      	movs	r2, #1
 8016a16:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
 8016a18:	69bb      	ldr	r3, [r7, #24]
 8016a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016a1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016a20:	fb02 f303 	mul.w	r3, r2, r3
 8016a24:	4619      	mov	r1, r3
 8016a26:	4864      	ldr	r0, [pc, #400]	; (8016bb8 <dhcp_bind+0x24c>)
 8016a28:	f009 fcd8 	bl	80203dc <iprintf>
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8016a2c:	69bb      	ldr	r3, [r7, #24]
 8016a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a34:	d02d      	beq.n	8016a92 <dhcp_bind+0x126>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
 8016a36:	69bb      	ldr	r3, [r7, #24]
 8016a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a3a:	4619      	mov	r1, r3
 8016a3c:	485f      	ldr	r0, [pc, #380]	; (8016bbc <dhcp_bind+0x250>)
 8016a3e:	f009 fccd 	bl	80203dc <iprintf>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8016a42:	69bb      	ldr	r3, [r7, #24]
 8016a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a46:	331e      	adds	r3, #30
 8016a48:	4a5a      	ldr	r2, [pc, #360]	; (8016bb4 <dhcp_bind+0x248>)
 8016a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8016a4e:	095b      	lsrs	r3, r3, #5
 8016a50:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8016a52:	69fb      	ldr	r3, [r7, #28]
 8016a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016a58:	d302      	bcc.n	8016a60 <dhcp_bind+0xf4>
      timeout = 0xffff;
 8016a5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016a5e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8016a60:	69fb      	ldr	r3, [r7, #28]
 8016a62:	b29a      	uxth	r2, r3
 8016a64:	69bb      	ldr	r3, [r7, #24]
 8016a66:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8016a68:	69bb      	ldr	r3, [r7, #24]
 8016a6a:	895b      	ldrh	r3, [r3, #10]
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	d102      	bne.n	8016a76 <dhcp_bind+0x10a>
      dhcp->t1_timeout = 1;
 8016a70:	69bb      	ldr	r3, [r7, #24]
 8016a72:	2201      	movs	r2, #1
 8016a74:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
 8016a76:	69bb      	ldr	r3, [r7, #24]
 8016a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016a7e:	fb02 f303 	mul.w	r3, r2, r3
 8016a82:	4619      	mov	r1, r3
 8016a84:	484c      	ldr	r0, [pc, #304]	; (8016bb8 <dhcp_bind+0x24c>)
 8016a86:	f009 fca9 	bl	80203dc <iprintf>
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8016a8a:	69bb      	ldr	r3, [r7, #24]
 8016a8c:	895a      	ldrh	r2, [r3, #10]
 8016a8e:	69bb      	ldr	r3, [r7, #24]
 8016a90:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8016a92:	69bb      	ldr	r3, [r7, #24]
 8016a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a9a:	d02d      	beq.n	8016af8 <dhcp_bind+0x18c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
 8016a9c:	69bb      	ldr	r3, [r7, #24]
 8016a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016aa0:	4619      	mov	r1, r3
 8016aa2:	4847      	ldr	r0, [pc, #284]	; (8016bc0 <dhcp_bind+0x254>)
 8016aa4:	f009 fc9a 	bl	80203dc <iprintf>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8016aa8:	69bb      	ldr	r3, [r7, #24]
 8016aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016aac:	331e      	adds	r3, #30
 8016aae:	4a41      	ldr	r2, [pc, #260]	; (8016bb4 <dhcp_bind+0x248>)
 8016ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8016ab4:	095b      	lsrs	r3, r3, #5
 8016ab6:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8016ab8:	69fb      	ldr	r3, [r7, #28]
 8016aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016abe:	d302      	bcc.n	8016ac6 <dhcp_bind+0x15a>
      timeout = 0xffff;
 8016ac0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016ac4:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8016ac6:	69fb      	ldr	r3, [r7, #28]
 8016ac8:	b29a      	uxth	r2, r3
 8016aca:	69bb      	ldr	r3, [r7, #24]
 8016acc:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8016ace:	69bb      	ldr	r3, [r7, #24]
 8016ad0:	899b      	ldrh	r3, [r3, #12]
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d102      	bne.n	8016adc <dhcp_bind+0x170>
      dhcp->t2_timeout = 1;
 8016ad6:	69bb      	ldr	r3, [r7, #24]
 8016ad8:	2201      	movs	r2, #1
 8016ada:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
 8016adc:	69bb      	ldr	r3, [r7, #24]
 8016ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016ae0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016ae4:	fb02 f303 	mul.w	r3, r2, r3
 8016ae8:	4619      	mov	r1, r3
 8016aea:	4833      	ldr	r0, [pc, #204]	; (8016bb8 <dhcp_bind+0x24c>)
 8016aec:	f009 fc76 	bl	80203dc <iprintf>
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8016af0:	69bb      	ldr	r3, [r7, #24]
 8016af2:	899a      	ldrh	r2, [r3, #12]
 8016af4:	69bb      	ldr	r3, [r7, #24]
 8016af6:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8016af8:	69bb      	ldr	r3, [r7, #24]
 8016afa:	895a      	ldrh	r2, [r3, #10]
 8016afc:	69bb      	ldr	r3, [r7, #24]
 8016afe:	899b      	ldrh	r3, [r3, #12]
 8016b00:	429a      	cmp	r2, r3
 8016b02:	d306      	bcc.n	8016b12 <dhcp_bind+0x1a6>
 8016b04:	69bb      	ldr	r3, [r7, #24]
 8016b06:	899b      	ldrh	r3, [r3, #12]
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d002      	beq.n	8016b12 <dhcp_bind+0x1a6>
    dhcp->t1_timeout = 0;
 8016b0c:	69bb      	ldr	r3, [r7, #24]
 8016b0e:	2200      	movs	r2, #0
 8016b10:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8016b12:	69bb      	ldr	r3, [r7, #24]
 8016b14:	79db      	ldrb	r3, [r3, #7]
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d003      	beq.n	8016b22 <dhcp_bind+0x1b6>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8016b1a:	69bb      	ldr	r3, [r7, #24]
 8016b1c:	6a1b      	ldr	r3, [r3, #32]
 8016b1e:	613b      	str	r3, [r7, #16]
 8016b20:	e014      	b.n	8016b4c <dhcp_bind+0x1e0>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8016b22:	69bb      	ldr	r3, [r7, #24]
 8016b24:	331c      	adds	r3, #28
 8016b26:	781b      	ldrb	r3, [r3, #0]
 8016b28:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8016b2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	db02      	blt.n	8016b38 <dhcp_bind+0x1cc>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8016b32:	23ff      	movs	r3, #255	; 0xff
 8016b34:	613b      	str	r3, [r7, #16]
 8016b36:	e009      	b.n	8016b4c <dhcp_bind+0x1e0>
    } else if (first_octet >= 192) {
 8016b38:	7dfb      	ldrb	r3, [r7, #23]
 8016b3a:	2bbf      	cmp	r3, #191	; 0xbf
 8016b3c:	d903      	bls.n	8016b46 <dhcp_bind+0x1da>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8016b3e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8016b42:	613b      	str	r3, [r7, #16]
 8016b44:	e002      	b.n	8016b4c <dhcp_bind+0x1e0>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8016b46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016b4a:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8016b4c:	69bb      	ldr	r3, [r7, #24]
 8016b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b50:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8016b52:	68fb      	ldr	r3, [r7, #12]
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d108      	bne.n	8016b6a <dhcp_bind+0x1fe>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8016b58:	69bb      	ldr	r3, [r7, #24]
 8016b5a:	69da      	ldr	r2, [r3, #28]
 8016b5c:	693b      	ldr	r3, [r7, #16]
 8016b5e:	4013      	ands	r3, r2
 8016b60:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8016b62:	68fb      	ldr	r3, [r7, #12]
 8016b64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8016b68:	60fb      	str	r3, [r7, #12]
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
 8016b6a:	69bb      	ldr	r3, [r7, #24]
 8016b6c:	69d9      	ldr	r1, [r3, #28]
 8016b6e:	693a      	ldr	r2, [r7, #16]
 8016b70:	68fb      	ldr	r3, [r7, #12]
 8016b72:	4814      	ldr	r0, [pc, #80]	; (8016bc4 <dhcp_bind+0x258>)
 8016b74:	f009 fc32 	bl	80203dc <iprintf>
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8016b78:	210a      	movs	r1, #10
 8016b7a:	69b8      	ldr	r0, [r7, #24]
 8016b7c:	f000 fafe 	bl	801717c <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8016b80:	69bb      	ldr	r3, [r7, #24]
 8016b82:	f103 011c 	add.w	r1, r3, #28
 8016b86:	f107 030c 	add.w	r3, r7, #12
 8016b8a:	f107 0210 	add.w	r2, r7, #16
 8016b8e:	6878      	ldr	r0, [r7, #4]
 8016b90:	f7f7 fb52 	bl	800e238 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8016b94:	3720      	adds	r7, #32
 8016b96:	46bd      	mov	sp, r7
 8016b98:	bd80      	pop	{r7, pc}
 8016b9a:	bf00      	nop
 8016b9c:	080240f8 	.word	0x080240f8
 8016ba0:	080249a8 	.word	0x080249a8
 8016ba4:	08024158 	.word	0x08024158
 8016ba8:	080249c4 	.word	0x080249c4
 8016bac:	080249dc 	.word	0x080249dc
 8016bb0:	080249fc 	.word	0x080249fc
 8016bb4:	88888889 	.word	0x88888889
 8016bb8:	08024a24 	.word	0x08024a24
 8016bbc:	08024a50 	.word	0x08024a50
 8016bc0:	08024a78 	.word	0x08024a78
 8016bc4:	08024aa0 	.word	0x08024aa0

08016bc8 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8016bc8:	b580      	push	{r7, lr}
 8016bca:	b08a      	sub	sp, #40	; 0x28
 8016bcc:	af02      	add	r7, sp, #8
 8016bce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016bd4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
 8016bd6:	484e      	ldr	r0, [pc, #312]	; (8016d10 <dhcp_renew+0x148>)
 8016bd8:	f009 fc9c 	bl	8020514 <puts>
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8016bdc:	2105      	movs	r1, #5
 8016bde:	69b8      	ldr	r0, [r7, #24]
 8016be0:	f000 facc 	bl	801717c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8016be4:	f107 030c 	add.w	r3, r7, #12
 8016be8:	2203      	movs	r2, #3
 8016bea:	69b9      	ldr	r1, [r7, #24]
 8016bec:	6878      	ldr	r0, [r7, #4]
 8016bee:	f001 f811 	bl	8017c14 <dhcp_create_msg>
 8016bf2:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8016bf4:	697b      	ldr	r3, [r7, #20]
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d051      	beq.n	8016c9e <dhcp_renew+0xd6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016bfa:	697b      	ldr	r3, [r7, #20]
 8016bfc:	685b      	ldr	r3, [r3, #4]
 8016bfe:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016c00:	89b8      	ldrh	r0, [r7, #12]
 8016c02:	693b      	ldr	r3, [r7, #16]
 8016c04:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016c08:	2302      	movs	r3, #2
 8016c0a:	2239      	movs	r2, #57	; 0x39
 8016c0c:	f000 fad0 	bl	80171b0 <dhcp_option>
 8016c10:	4603      	mov	r3, r0
 8016c12:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8016c14:	89b8      	ldrh	r0, [r7, #12]
 8016c16:	693b      	ldr	r3, [r7, #16]
 8016c18:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8016c20:	461a      	mov	r2, r3
 8016c22:	f000 fb1f 	bl	8017264 <dhcp_option_short>
 8016c26:	4603      	mov	r3, r0
 8016c28:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016c2a:	89b8      	ldrh	r0, [r7, #12]
 8016c2c:	693b      	ldr	r3, [r7, #16]
 8016c2e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016c32:	2304      	movs	r3, #4
 8016c34:	2237      	movs	r2, #55	; 0x37
 8016c36:	f000 fabb 	bl	80171b0 <dhcp_option>
 8016c3a:	4603      	mov	r3, r0
 8016c3c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016c3e:	2300      	movs	r3, #0
 8016c40:	77bb      	strb	r3, [r7, #30]
 8016c42:	e00e      	b.n	8016c62 <dhcp_renew+0x9a>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016c44:	89b8      	ldrh	r0, [r7, #12]
 8016c46:	693b      	ldr	r3, [r7, #16]
 8016c48:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016c4c:	7fbb      	ldrb	r3, [r7, #30]
 8016c4e:	4a31      	ldr	r2, [pc, #196]	; (8016d14 <dhcp_renew+0x14c>)
 8016c50:	5cd3      	ldrb	r3, [r2, r3]
 8016c52:	461a      	mov	r2, r3
 8016c54:	f000 fae0 	bl	8017218 <dhcp_option_byte>
 8016c58:	4603      	mov	r3, r0
 8016c5a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016c5c:	7fbb      	ldrb	r3, [r7, #30]
 8016c5e:	3301      	adds	r3, #1
 8016c60:	77bb      	strb	r3, [r7, #30]
 8016c62:	7fbb      	ldrb	r3, [r7, #30]
 8016c64:	2b03      	cmp	r3, #3
 8016c66:	d9ed      	bls.n	8016c44 <dhcp_renew+0x7c>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016c68:	89b8      	ldrh	r0, [r7, #12]
 8016c6a:	693b      	ldr	r3, [r7, #16]
 8016c6c:	33f0      	adds	r3, #240	; 0xf0
 8016c6e:	697a      	ldr	r2, [r7, #20]
 8016c70:	4619      	mov	r1, r3
 8016c72:	f001 f8b3 	bl	8017ddc <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016c76:	4b28      	ldr	r3, [pc, #160]	; (8016d18 <dhcp_renew+0x150>)
 8016c78:	6818      	ldr	r0, [r3, #0]
 8016c7a:	69bb      	ldr	r3, [r7, #24]
 8016c7c:	f103 0218 	add.w	r2, r3, #24
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	9300      	str	r3, [sp, #0]
 8016c84:	2343      	movs	r3, #67	; 0x43
 8016c86:	6979      	ldr	r1, [r7, #20]
 8016c88:	f7fe fb38 	bl	80152fc <udp_sendto_if>
 8016c8c:	4603      	mov	r3, r0
 8016c8e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016c90:	6978      	ldr	r0, [r7, #20]
 8016c92:	f7f7 fffd 	bl	800ec90 <pbuf_free>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
 8016c96:	4821      	ldr	r0, [pc, #132]	; (8016d1c <dhcp_renew+0x154>)
 8016c98:	f009 fc3c 	bl	8020514 <puts>
 8016c9c:	e004      	b.n	8016ca8 <dhcp_renew+0xe0>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
 8016c9e:	4820      	ldr	r0, [pc, #128]	; (8016d20 <dhcp_renew+0x158>)
 8016ca0:	f009 fc38 	bl	8020514 <puts>
    result = ERR_MEM;
 8016ca4:	23ff      	movs	r3, #255	; 0xff
 8016ca6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016ca8:	69bb      	ldr	r3, [r7, #24]
 8016caa:	799b      	ldrb	r3, [r3, #6]
 8016cac:	2bff      	cmp	r3, #255	; 0xff
 8016cae:	d005      	beq.n	8016cbc <dhcp_renew+0xf4>
    dhcp->tries++;
 8016cb0:	69bb      	ldr	r3, [r7, #24]
 8016cb2:	799b      	ldrb	r3, [r3, #6]
 8016cb4:	3301      	adds	r3, #1
 8016cb6:	b2da      	uxtb	r2, r3
 8016cb8:	69bb      	ldr	r3, [r7, #24]
 8016cba:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8016cbc:	69bb      	ldr	r3, [r7, #24]
 8016cbe:	799b      	ldrb	r3, [r3, #6]
 8016cc0:	2b09      	cmp	r3, #9
 8016cc2:	d80a      	bhi.n	8016cda <dhcp_renew+0x112>
 8016cc4:	69bb      	ldr	r3, [r7, #24]
 8016cc6:	799b      	ldrb	r3, [r3, #6]
 8016cc8:	b29b      	uxth	r3, r3
 8016cca:	461a      	mov	r2, r3
 8016ccc:	0152      	lsls	r2, r2, #5
 8016cce:	1ad2      	subs	r2, r2, r3
 8016cd0:	0092      	lsls	r2, r2, #2
 8016cd2:	4413      	add	r3, r2
 8016cd4:	011b      	lsls	r3, r3, #4
 8016cd6:	b29b      	uxth	r3, r3
 8016cd8:	e001      	b.n	8016cde <dhcp_renew+0x116>
 8016cda:	f644 6320 	movw	r3, #20000	; 0x4e20
 8016cde:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016ce0:	89fb      	ldrh	r3, [r7, #14]
 8016ce2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016ce6:	4a0f      	ldr	r2, [pc, #60]	; (8016d24 <dhcp_renew+0x15c>)
 8016ce8:	fb82 1203 	smull	r1, r2, r2, r3
 8016cec:	1152      	asrs	r2, r2, #5
 8016cee:	17db      	asrs	r3, r3, #31
 8016cf0:	1ad3      	subs	r3, r2, r3
 8016cf2:	b29a      	uxth	r2, r3
 8016cf4:	69bb      	ldr	r3, [r7, #24]
 8016cf6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
 8016cf8:	89fb      	ldrh	r3, [r7, #14]
 8016cfa:	4619      	mov	r1, r3
 8016cfc:	480a      	ldr	r0, [pc, #40]	; (8016d28 <dhcp_renew+0x160>)
 8016cfe:	f009 fb6d 	bl	80203dc <iprintf>
  return result;
 8016d02:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016d06:	4618      	mov	r0, r3
 8016d08:	3720      	adds	r7, #32
 8016d0a:	46bd      	mov	sp, r7
 8016d0c:	bd80      	pop	{r7, pc}
 8016d0e:	bf00      	nop
 8016d10:	08024ad4 	.word	0x08024ad4
 8016d14:	20000034 	.word	0x20000034
 8016d18:	20006888 	.word	0x20006888
 8016d1c:	08024ae4 	.word	0x08024ae4
 8016d20:	08024afc 	.word	0x08024afc
 8016d24:	10624dd3 	.word	0x10624dd3
 8016d28:	08024b28 	.word	0x08024b28

08016d2c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8016d2c:	b580      	push	{r7, lr}
 8016d2e:	b08a      	sub	sp, #40	; 0x28
 8016d30:	af02      	add	r7, sp, #8
 8016d32:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d38:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
 8016d3a:	484d      	ldr	r0, [pc, #308]	; (8016e70 <dhcp_rebind+0x144>)
 8016d3c:	f009 fbea 	bl	8020514 <puts>
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8016d40:	2104      	movs	r1, #4
 8016d42:	69b8      	ldr	r0, [r7, #24]
 8016d44:	f000 fa1a 	bl	801717c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8016d48:	f107 030c 	add.w	r3, r7, #12
 8016d4c:	2203      	movs	r2, #3
 8016d4e:	69b9      	ldr	r1, [r7, #24]
 8016d50:	6878      	ldr	r0, [r7, #4]
 8016d52:	f000 ff5f 	bl	8017c14 <dhcp_create_msg>
 8016d56:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8016d58:	697b      	ldr	r3, [r7, #20]
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	d04f      	beq.n	8016dfe <dhcp_rebind+0xd2>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016d5e:	697b      	ldr	r3, [r7, #20]
 8016d60:	685b      	ldr	r3, [r3, #4]
 8016d62:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016d64:	89b8      	ldrh	r0, [r7, #12]
 8016d66:	693b      	ldr	r3, [r7, #16]
 8016d68:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016d6c:	2302      	movs	r3, #2
 8016d6e:	2239      	movs	r2, #57	; 0x39
 8016d70:	f000 fa1e 	bl	80171b0 <dhcp_option>
 8016d74:	4603      	mov	r3, r0
 8016d76:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8016d78:	89b8      	ldrh	r0, [r7, #12]
 8016d7a:	693b      	ldr	r3, [r7, #16]
 8016d7c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8016d84:	461a      	mov	r2, r3
 8016d86:	f000 fa6d 	bl	8017264 <dhcp_option_short>
 8016d8a:	4603      	mov	r3, r0
 8016d8c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016d8e:	89b8      	ldrh	r0, [r7, #12]
 8016d90:	693b      	ldr	r3, [r7, #16]
 8016d92:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016d96:	2304      	movs	r3, #4
 8016d98:	2237      	movs	r2, #55	; 0x37
 8016d9a:	f000 fa09 	bl	80171b0 <dhcp_option>
 8016d9e:	4603      	mov	r3, r0
 8016da0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016da2:	2300      	movs	r3, #0
 8016da4:	77bb      	strb	r3, [r7, #30]
 8016da6:	e00e      	b.n	8016dc6 <dhcp_rebind+0x9a>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016da8:	89b8      	ldrh	r0, [r7, #12]
 8016daa:	693b      	ldr	r3, [r7, #16]
 8016dac:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016db0:	7fbb      	ldrb	r3, [r7, #30]
 8016db2:	4a30      	ldr	r2, [pc, #192]	; (8016e74 <dhcp_rebind+0x148>)
 8016db4:	5cd3      	ldrb	r3, [r2, r3]
 8016db6:	461a      	mov	r2, r3
 8016db8:	f000 fa2e 	bl	8017218 <dhcp_option_byte>
 8016dbc:	4603      	mov	r3, r0
 8016dbe:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016dc0:	7fbb      	ldrb	r3, [r7, #30]
 8016dc2:	3301      	adds	r3, #1
 8016dc4:	77bb      	strb	r3, [r7, #30]
 8016dc6:	7fbb      	ldrb	r3, [r7, #30]
 8016dc8:	2b03      	cmp	r3, #3
 8016dca:	d9ed      	bls.n	8016da8 <dhcp_rebind+0x7c>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016dcc:	89b8      	ldrh	r0, [r7, #12]
 8016dce:	693b      	ldr	r3, [r7, #16]
 8016dd0:	33f0      	adds	r3, #240	; 0xf0
 8016dd2:	697a      	ldr	r2, [r7, #20]
 8016dd4:	4619      	mov	r1, r3
 8016dd6:	f001 f801 	bl	8017ddc <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016dda:	4b27      	ldr	r3, [pc, #156]	; (8016e78 <dhcp_rebind+0x14c>)
 8016ddc:	6818      	ldr	r0, [r3, #0]
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	9300      	str	r3, [sp, #0]
 8016de2:	2343      	movs	r3, #67	; 0x43
 8016de4:	4a25      	ldr	r2, [pc, #148]	; (8016e7c <dhcp_rebind+0x150>)
 8016de6:	6979      	ldr	r1, [r7, #20]
 8016de8:	f7fe fa88 	bl	80152fc <udp_sendto_if>
 8016dec:	4603      	mov	r3, r0
 8016dee:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016df0:	6978      	ldr	r0, [r7, #20]
 8016df2:	f7f7 ff4d 	bl	800ec90 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
 8016df6:	4822      	ldr	r0, [pc, #136]	; (8016e80 <dhcp_rebind+0x154>)
 8016df8:	f009 fb8c 	bl	8020514 <puts>
 8016dfc:	e004      	b.n	8016e08 <dhcp_rebind+0xdc>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
 8016dfe:	4821      	ldr	r0, [pc, #132]	; (8016e84 <dhcp_rebind+0x158>)
 8016e00:	f009 fb88 	bl	8020514 <puts>
    result = ERR_MEM;
 8016e04:	23ff      	movs	r3, #255	; 0xff
 8016e06:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016e08:	69bb      	ldr	r3, [r7, #24]
 8016e0a:	799b      	ldrb	r3, [r3, #6]
 8016e0c:	2bff      	cmp	r3, #255	; 0xff
 8016e0e:	d005      	beq.n	8016e1c <dhcp_rebind+0xf0>
    dhcp->tries++;
 8016e10:	69bb      	ldr	r3, [r7, #24]
 8016e12:	799b      	ldrb	r3, [r3, #6]
 8016e14:	3301      	adds	r3, #1
 8016e16:	b2da      	uxtb	r2, r3
 8016e18:	69bb      	ldr	r3, [r7, #24]
 8016e1a:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8016e1c:	69bb      	ldr	r3, [r7, #24]
 8016e1e:	799b      	ldrb	r3, [r3, #6]
 8016e20:	2b09      	cmp	r3, #9
 8016e22:	d80a      	bhi.n	8016e3a <dhcp_rebind+0x10e>
 8016e24:	69bb      	ldr	r3, [r7, #24]
 8016e26:	799b      	ldrb	r3, [r3, #6]
 8016e28:	b29b      	uxth	r3, r3
 8016e2a:	461a      	mov	r2, r3
 8016e2c:	0152      	lsls	r2, r2, #5
 8016e2e:	1ad2      	subs	r2, r2, r3
 8016e30:	0092      	lsls	r2, r2, #2
 8016e32:	4413      	add	r3, r2
 8016e34:	00db      	lsls	r3, r3, #3
 8016e36:	b29b      	uxth	r3, r3
 8016e38:	e001      	b.n	8016e3e <dhcp_rebind+0x112>
 8016e3a:	f242 7310 	movw	r3, #10000	; 0x2710
 8016e3e:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016e40:	89fb      	ldrh	r3, [r7, #14]
 8016e42:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016e46:	4a10      	ldr	r2, [pc, #64]	; (8016e88 <dhcp_rebind+0x15c>)
 8016e48:	fb82 1203 	smull	r1, r2, r2, r3
 8016e4c:	1152      	asrs	r2, r2, #5
 8016e4e:	17db      	asrs	r3, r3, #31
 8016e50:	1ad3      	subs	r3, r2, r3
 8016e52:	b29a      	uxth	r2, r3
 8016e54:	69bb      	ldr	r3, [r7, #24]
 8016e56:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
 8016e58:	89fb      	ldrh	r3, [r7, #14]
 8016e5a:	4619      	mov	r1, r3
 8016e5c:	480b      	ldr	r0, [pc, #44]	; (8016e8c <dhcp_rebind+0x160>)
 8016e5e:	f009 fabd 	bl	80203dc <iprintf>
  return result;
 8016e62:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016e66:	4618      	mov	r0, r3
 8016e68:	3720      	adds	r7, #32
 8016e6a:	46bd      	mov	sp, r7
 8016e6c:	bd80      	pop	{r7, pc}
 8016e6e:	bf00      	nop
 8016e70:	08024b58 	.word	0x08024b58
 8016e74:	20000034 	.word	0x20000034
 8016e78:	20006888 	.word	0x20006888
 8016e7c:	08026bf8 	.word	0x08026bf8
 8016e80:	08024b68 	.word	0x08024b68
 8016e84:	08024b80 	.word	0x08024b80
 8016e88:	10624dd3 	.word	0x10624dd3
 8016e8c:	08024bb0 	.word	0x08024bb0

08016e90 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8016e90:	b5b0      	push	{r4, r5, r7, lr}
 8016e92:	b08a      	sub	sp, #40	; 0x28
 8016e94:	af02      	add	r7, sp, #8
 8016e96:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e9c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
 8016e9e:	485a      	ldr	r0, [pc, #360]	; (8017008 <dhcp_reboot+0x178>)
 8016ea0:	f009 fb38 	bl	8020514 <puts>
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8016ea4:	2103      	movs	r1, #3
 8016ea6:	69b8      	ldr	r0, [r7, #24]
 8016ea8:	f000 f968 	bl	801717c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8016eac:	f107 030c 	add.w	r3, r7, #12
 8016eb0:	2203      	movs	r2, #3
 8016eb2:	69b9      	ldr	r1, [r7, #24]
 8016eb4:	6878      	ldr	r0, [r7, #4]
 8016eb6:	f000 fead 	bl	8017c14 <dhcp_create_msg>
 8016eba:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8016ebc:	697b      	ldr	r3, [r7, #20]
 8016ebe:	2b00      	cmp	r3, #0
 8016ec0:	d069      	beq.n	8016f96 <dhcp_reboot+0x106>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016ec2:	697b      	ldr	r3, [r7, #20]
 8016ec4:	685b      	ldr	r3, [r3, #4]
 8016ec6:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016ec8:	89b8      	ldrh	r0, [r7, #12]
 8016eca:	693b      	ldr	r3, [r7, #16]
 8016ecc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016ed0:	2302      	movs	r3, #2
 8016ed2:	2239      	movs	r2, #57	; 0x39
 8016ed4:	f000 f96c 	bl	80171b0 <dhcp_option>
 8016ed8:	4603      	mov	r3, r0
 8016eda:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8016edc:	89b8      	ldrh	r0, [r7, #12]
 8016ede:	693b      	ldr	r3, [r7, #16]
 8016ee0:	33f0      	adds	r3, #240	; 0xf0
 8016ee2:	f44f 7210 	mov.w	r2, #576	; 0x240
 8016ee6:	4619      	mov	r1, r3
 8016ee8:	f000 f9bc 	bl	8017264 <dhcp_option_short>
 8016eec:	4603      	mov	r3, r0
 8016eee:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8016ef0:	89b8      	ldrh	r0, [r7, #12]
 8016ef2:	693b      	ldr	r3, [r7, #16]
 8016ef4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016ef8:	2304      	movs	r3, #4
 8016efa:	2232      	movs	r2, #50	; 0x32
 8016efc:	f000 f958 	bl	80171b0 <dhcp_option>
 8016f00:	4603      	mov	r3, r0
 8016f02:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8016f04:	89bc      	ldrh	r4, [r7, #12]
 8016f06:	693b      	ldr	r3, [r7, #16]
 8016f08:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8016f0c:	69bb      	ldr	r3, [r7, #24]
 8016f0e:	69db      	ldr	r3, [r3, #28]
 8016f10:	4618      	mov	r0, r3
 8016f12:	f7f5 fd4a 	bl	800c9aa <lwip_htonl>
 8016f16:	4603      	mov	r3, r0
 8016f18:	461a      	mov	r2, r3
 8016f1a:	4629      	mov	r1, r5
 8016f1c:	4620      	mov	r0, r4
 8016f1e:	f000 f9d3 	bl	80172c8 <dhcp_option_long>
 8016f22:	4603      	mov	r3, r0
 8016f24:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016f26:	89b8      	ldrh	r0, [r7, #12]
 8016f28:	693b      	ldr	r3, [r7, #16]
 8016f2a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016f2e:	2304      	movs	r3, #4
 8016f30:	2237      	movs	r2, #55	; 0x37
 8016f32:	f000 f93d 	bl	80171b0 <dhcp_option>
 8016f36:	4603      	mov	r3, r0
 8016f38:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016f3a:	2300      	movs	r3, #0
 8016f3c:	77bb      	strb	r3, [r7, #30]
 8016f3e:	e00e      	b.n	8016f5e <dhcp_reboot+0xce>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016f40:	89b8      	ldrh	r0, [r7, #12]
 8016f42:	693b      	ldr	r3, [r7, #16]
 8016f44:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016f48:	7fbb      	ldrb	r3, [r7, #30]
 8016f4a:	4a30      	ldr	r2, [pc, #192]	; (801700c <dhcp_reboot+0x17c>)
 8016f4c:	5cd3      	ldrb	r3, [r2, r3]
 8016f4e:	461a      	mov	r2, r3
 8016f50:	f000 f962 	bl	8017218 <dhcp_option_byte>
 8016f54:	4603      	mov	r3, r0
 8016f56:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016f58:	7fbb      	ldrb	r3, [r7, #30]
 8016f5a:	3301      	adds	r3, #1
 8016f5c:	77bb      	strb	r3, [r7, #30]
 8016f5e:	7fbb      	ldrb	r3, [r7, #30]
 8016f60:	2b03      	cmp	r3, #3
 8016f62:	d9ed      	bls.n	8016f40 <dhcp_reboot+0xb0>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016f64:	89b8      	ldrh	r0, [r7, #12]
 8016f66:	693b      	ldr	r3, [r7, #16]
 8016f68:	33f0      	adds	r3, #240	; 0xf0
 8016f6a:	697a      	ldr	r2, [r7, #20]
 8016f6c:	4619      	mov	r1, r3
 8016f6e:	f000 ff35 	bl	8017ddc <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016f72:	4b27      	ldr	r3, [pc, #156]	; (8017010 <dhcp_reboot+0x180>)
 8016f74:	6818      	ldr	r0, [r3, #0]
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	9300      	str	r3, [sp, #0]
 8016f7a:	2343      	movs	r3, #67	; 0x43
 8016f7c:	4a25      	ldr	r2, [pc, #148]	; (8017014 <dhcp_reboot+0x184>)
 8016f7e:	6979      	ldr	r1, [r7, #20]
 8016f80:	f7fe f9bc 	bl	80152fc <udp_sendto_if>
 8016f84:	4603      	mov	r3, r0
 8016f86:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016f88:	6978      	ldr	r0, [r7, #20]
 8016f8a:	f7f7 fe81 	bl	800ec90 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
 8016f8e:	4822      	ldr	r0, [pc, #136]	; (8017018 <dhcp_reboot+0x188>)
 8016f90:	f009 fac0 	bl	8020514 <puts>
 8016f94:	e004      	b.n	8016fa0 <dhcp_reboot+0x110>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
 8016f96:	4821      	ldr	r0, [pc, #132]	; (801701c <dhcp_reboot+0x18c>)
 8016f98:	f009 fabc 	bl	8020514 <puts>
    result = ERR_MEM;
 8016f9c:	23ff      	movs	r3, #255	; 0xff
 8016f9e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016fa0:	69bb      	ldr	r3, [r7, #24]
 8016fa2:	799b      	ldrb	r3, [r3, #6]
 8016fa4:	2bff      	cmp	r3, #255	; 0xff
 8016fa6:	d005      	beq.n	8016fb4 <dhcp_reboot+0x124>
    dhcp->tries++;
 8016fa8:	69bb      	ldr	r3, [r7, #24]
 8016faa:	799b      	ldrb	r3, [r3, #6]
 8016fac:	3301      	adds	r3, #1
 8016fae:	b2da      	uxtb	r2, r3
 8016fb0:	69bb      	ldr	r3, [r7, #24]
 8016fb2:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8016fb4:	69bb      	ldr	r3, [r7, #24]
 8016fb6:	799b      	ldrb	r3, [r3, #6]
 8016fb8:	2b09      	cmp	r3, #9
 8016fba:	d80a      	bhi.n	8016fd2 <dhcp_reboot+0x142>
 8016fbc:	69bb      	ldr	r3, [r7, #24]
 8016fbe:	799b      	ldrb	r3, [r3, #6]
 8016fc0:	b29b      	uxth	r3, r3
 8016fc2:	461a      	mov	r2, r3
 8016fc4:	0152      	lsls	r2, r2, #5
 8016fc6:	1ad2      	subs	r2, r2, r3
 8016fc8:	0092      	lsls	r2, r2, #2
 8016fca:	4413      	add	r3, r2
 8016fcc:	00db      	lsls	r3, r3, #3
 8016fce:	b29b      	uxth	r3, r3
 8016fd0:	e001      	b.n	8016fd6 <dhcp_reboot+0x146>
 8016fd2:	f242 7310 	movw	r3, #10000	; 0x2710
 8016fd6:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016fd8:	89fb      	ldrh	r3, [r7, #14]
 8016fda:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016fde:	4a10      	ldr	r2, [pc, #64]	; (8017020 <dhcp_reboot+0x190>)
 8016fe0:	fb82 1203 	smull	r1, r2, r2, r3
 8016fe4:	1152      	asrs	r2, r2, #5
 8016fe6:	17db      	asrs	r3, r3, #31
 8016fe8:	1ad3      	subs	r3, r2, r3
 8016fea:	b29a      	uxth	r2, r3
 8016fec:	69bb      	ldr	r3, [r7, #24]
 8016fee:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
 8016ff0:	89fb      	ldrh	r3, [r7, #14]
 8016ff2:	4619      	mov	r1, r3
 8016ff4:	480b      	ldr	r0, [pc, #44]	; (8017024 <dhcp_reboot+0x194>)
 8016ff6:	f009 f9f1 	bl	80203dc <iprintf>
  return result;
 8016ffa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016ffe:	4618      	mov	r0, r3
 8017000:	3720      	adds	r7, #32
 8017002:	46bd      	mov	sp, r7
 8017004:	bdb0      	pop	{r4, r5, r7, pc}
 8017006:	bf00      	nop
 8017008:	08024be0 	.word	0x08024be0
 801700c:	20000034 	.word	0x20000034
 8017010:	20006888 	.word	0x20006888
 8017014:	08026bf8 	.word	0x08026bf8
 8017018:	08024bf0 	.word	0x08024bf0
 801701c:	08024c08 	.word	0x08024c08
 8017020:	10624dd3 	.word	0x10624dd3
 8017024:	08024c38 	.word	0x08024c38

08017028 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8017028:	b5b0      	push	{r4, r5, r7, lr}
 801702a:	b08a      	sub	sp, #40	; 0x28
 801702c:	af02      	add	r7, sp, #8
 801702e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017034:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
 8017036:	484c      	ldr	r0, [pc, #304]	; (8017168 <dhcp_release_and_stop+0x140>)
 8017038:	f009 fa6c 	bl	8020514 <puts>
  if (dhcp == NULL) {
 801703c:	69fb      	ldr	r3, [r7, #28]
 801703e:	2b00      	cmp	r3, #0
 8017040:	f000 808b 	beq.w	801715a <dhcp_release_and_stop+0x132>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8017044:	69fb      	ldr	r3, [r7, #28]
 8017046:	795b      	ldrb	r3, [r3, #5]
 8017048:	2b00      	cmp	r3, #0
 801704a:	f000 8088 	beq.w	801715e <dhcp_release_and_stop+0x136>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801704e:	69fb      	ldr	r3, [r7, #28]
 8017050:	699b      	ldr	r3, [r3, #24]
 8017052:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8017054:	69fb      	ldr	r3, [r7, #28]
 8017056:	2200      	movs	r2, #0
 8017058:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801705a:	69fb      	ldr	r3, [r7, #28]
 801705c:	2200      	movs	r2, #0
 801705e:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8017060:	69fb      	ldr	r3, [r7, #28]
 8017062:	2200      	movs	r2, #0
 8017064:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8017066:	69fb      	ldr	r3, [r7, #28]
 8017068:	2200      	movs	r2, #0
 801706a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801706c:	69fb      	ldr	r3, [r7, #28]
 801706e:	2200      	movs	r2, #0
 8017070:	631a      	str	r2, [r3, #48]	; 0x30
 8017072:	69fb      	ldr	r3, [r7, #28]
 8017074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017076:	69fb      	ldr	r3, [r7, #28]
 8017078:	62da      	str	r2, [r3, #44]	; 0x2c
 801707a:	69fb      	ldr	r3, [r7, #28]
 801707c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801707e:	69fb      	ldr	r3, [r7, #28]
 8017080:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8017082:	69fb      	ldr	r3, [r7, #28]
 8017084:	2200      	movs	r2, #0
 8017086:	829a      	strh	r2, [r3, #20]
 8017088:	69fb      	ldr	r3, [r7, #28]
 801708a:	8a9a      	ldrh	r2, [r3, #20]
 801708c:	69fb      	ldr	r3, [r7, #28]
 801708e:	825a      	strh	r2, [r3, #18]
 8017090:	69fb      	ldr	r3, [r7, #28]
 8017092:	8a5a      	ldrh	r2, [r3, #18]
 8017094:	69fb      	ldr	r3, [r7, #28]
 8017096:	821a      	strh	r2, [r3, #16]
 8017098:	69fb      	ldr	r3, [r7, #28]
 801709a:	8a1a      	ldrh	r2, [r3, #16]
 801709c:	69fb      	ldr	r3, [r7, #28]
 801709e:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80170a0:	6878      	ldr	r0, [r7, #4]
 80170a2:	f000 fec9 	bl	8017e38 <dhcp_supplied_address>
 80170a6:	4603      	mov	r3, r0
 80170a8:	2b00      	cmp	r3, #0
 80170aa:	d042      	beq.n	8017132 <dhcp_release_and_stop+0x10a>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80170ac:	f107 030e 	add.w	r3, r7, #14
 80170b0:	2207      	movs	r2, #7
 80170b2:	69f9      	ldr	r1, [r7, #28]
 80170b4:	6878      	ldr	r0, [r7, #4]
 80170b6:	f000 fdad 	bl	8017c14 <dhcp_create_msg>
 80170ba:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80170bc:	69bb      	ldr	r3, [r7, #24]
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d034      	beq.n	801712c <dhcp_release_and_stop+0x104>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80170c2:	69bb      	ldr	r3, [r7, #24]
 80170c4:	685b      	ldr	r3, [r3, #4]
 80170c6:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80170c8:	89f8      	ldrh	r0, [r7, #14]
 80170ca:	697b      	ldr	r3, [r7, #20]
 80170cc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80170d0:	2304      	movs	r3, #4
 80170d2:	2236      	movs	r2, #54	; 0x36
 80170d4:	f000 f86c 	bl	80171b0 <dhcp_option>
 80170d8:	4603      	mov	r3, r0
 80170da:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80170dc:	89fc      	ldrh	r4, [r7, #14]
 80170de:	697b      	ldr	r3, [r7, #20]
 80170e0:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80170e4:	693b      	ldr	r3, [r7, #16]
 80170e6:	4618      	mov	r0, r3
 80170e8:	f7f5 fc5f 	bl	800c9aa <lwip_htonl>
 80170ec:	4603      	mov	r3, r0
 80170ee:	461a      	mov	r2, r3
 80170f0:	4629      	mov	r1, r5
 80170f2:	4620      	mov	r0, r4
 80170f4:	f000 f8e8 	bl	80172c8 <dhcp_option_long>
 80170f8:	4603      	mov	r3, r0
 80170fa:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80170fc:	89f8      	ldrh	r0, [r7, #14]
 80170fe:	697b      	ldr	r3, [r7, #20]
 8017100:	33f0      	adds	r3, #240	; 0xf0
 8017102:	69ba      	ldr	r2, [r7, #24]
 8017104:	4619      	mov	r1, r3
 8017106:	f000 fe69 	bl	8017ddc <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801710a:	4b18      	ldr	r3, [pc, #96]	; (801716c <dhcp_release_and_stop+0x144>)
 801710c:	6818      	ldr	r0, [r3, #0]
 801710e:	f107 0210 	add.w	r2, r7, #16
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	9300      	str	r3, [sp, #0]
 8017116:	2343      	movs	r3, #67	; 0x43
 8017118:	69b9      	ldr	r1, [r7, #24]
 801711a:	f7fe f8ef 	bl	80152fc <udp_sendto_if>
      pbuf_free(p_out);
 801711e:	69b8      	ldr	r0, [r7, #24]
 8017120:	f7f7 fdb6 	bl	800ec90 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release: RELEASED, DHCP_STATE_OFF\n"));
 8017124:	4812      	ldr	r0, [pc, #72]	; (8017170 <dhcp_release_and_stop+0x148>)
 8017126:	f009 f9f5 	bl	8020514 <puts>
 801712a:	e002      	b.n	8017132 <dhcp_release_and_stop+0x10a>
    } else {
      /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
 801712c:	4811      	ldr	r0, [pc, #68]	; (8017174 <dhcp_release_and_stop+0x14c>)
 801712e:	f009 f9f1 	bl	8020514 <puts>
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8017132:	4b11      	ldr	r3, [pc, #68]	; (8017178 <dhcp_release_and_stop+0x150>)
 8017134:	4a10      	ldr	r2, [pc, #64]	; (8017178 <dhcp_release_and_stop+0x150>)
 8017136:	4910      	ldr	r1, [pc, #64]	; (8017178 <dhcp_release_and_stop+0x150>)
 8017138:	6878      	ldr	r0, [r7, #4]
 801713a:	f7f7 f87d 	bl	800e238 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801713e:	2100      	movs	r1, #0
 8017140:	69f8      	ldr	r0, [r7, #28]
 8017142:	f000 f81b 	bl	801717c <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8017146:	69fb      	ldr	r3, [r7, #28]
 8017148:	791b      	ldrb	r3, [r3, #4]
 801714a:	2b00      	cmp	r3, #0
 801714c:	d008      	beq.n	8017160 <dhcp_release_and_stop+0x138>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801714e:	f7fe fd7d 	bl	8015c4c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8017152:	69fb      	ldr	r3, [r7, #28]
 8017154:	2200      	movs	r2, #0
 8017156:	711a      	strb	r2, [r3, #4]
 8017158:	e002      	b.n	8017160 <dhcp_release_and_stop+0x138>
    return;
 801715a:	bf00      	nop
 801715c:	e000      	b.n	8017160 <dhcp_release_and_stop+0x138>
    return;
 801715e:	bf00      	nop
  }
}
 8017160:	3720      	adds	r7, #32
 8017162:	46bd      	mov	sp, r7
 8017164:	bdb0      	pop	{r4, r5, r7, pc}
 8017166:	bf00      	nop
 8017168:	08024c68 	.word	0x08024c68
 801716c:	20006888 	.word	0x20006888
 8017170:	08024c80 	.word	0x08024c80
 8017174:	08024ca8 	.word	0x08024ca8
 8017178:	08026bf4 	.word	0x08026bf4

0801717c <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801717c:	b480      	push	{r7}
 801717e:	b083      	sub	sp, #12
 8017180:	af00      	add	r7, sp, #0
 8017182:	6078      	str	r0, [r7, #4]
 8017184:	460b      	mov	r3, r1
 8017186:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	795b      	ldrb	r3, [r3, #5]
 801718c:	78fa      	ldrb	r2, [r7, #3]
 801718e:	429a      	cmp	r2, r3
 8017190:	d008      	beq.n	80171a4 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	78fa      	ldrb	r2, [r7, #3]
 8017196:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	2200      	movs	r2, #0
 801719c:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	2200      	movs	r2, #0
 80171a2:	811a      	strh	r2, [r3, #8]
  }
}
 80171a4:	bf00      	nop
 80171a6:	370c      	adds	r7, #12
 80171a8:	46bd      	mov	sp, r7
 80171aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ae:	4770      	bx	lr

080171b0 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 80171b0:	b580      	push	{r7, lr}
 80171b2:	b082      	sub	sp, #8
 80171b4:	af00      	add	r7, sp, #0
 80171b6:	6039      	str	r1, [r7, #0]
 80171b8:	4611      	mov	r1, r2
 80171ba:	461a      	mov	r2, r3
 80171bc:	4603      	mov	r3, r0
 80171be:	80fb      	strh	r3, [r7, #6]
 80171c0:	460b      	mov	r3, r1
 80171c2:	717b      	strb	r3, [r7, #5]
 80171c4:	4613      	mov	r3, r2
 80171c6:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80171c8:	88fa      	ldrh	r2, [r7, #6]
 80171ca:	793b      	ldrb	r3, [r7, #4]
 80171cc:	4413      	add	r3, r2
 80171ce:	3302      	adds	r3, #2
 80171d0:	2b44      	cmp	r3, #68	; 0x44
 80171d2:	d906      	bls.n	80171e2 <dhcp_option+0x32>
 80171d4:	4b0d      	ldr	r3, [pc, #52]	; (801720c <dhcp_option+0x5c>)
 80171d6:	f240 529a 	movw	r2, #1434	; 0x59a
 80171da:	490d      	ldr	r1, [pc, #52]	; (8017210 <dhcp_option+0x60>)
 80171dc:	480d      	ldr	r0, [pc, #52]	; (8017214 <dhcp_option+0x64>)
 80171de:	f009 f8fd 	bl	80203dc <iprintf>
  options[options_out_len++] = option_type;
 80171e2:	88fb      	ldrh	r3, [r7, #6]
 80171e4:	1c5a      	adds	r2, r3, #1
 80171e6:	80fa      	strh	r2, [r7, #6]
 80171e8:	461a      	mov	r2, r3
 80171ea:	683b      	ldr	r3, [r7, #0]
 80171ec:	4413      	add	r3, r2
 80171ee:	797a      	ldrb	r2, [r7, #5]
 80171f0:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80171f2:	88fb      	ldrh	r3, [r7, #6]
 80171f4:	1c5a      	adds	r2, r3, #1
 80171f6:	80fa      	strh	r2, [r7, #6]
 80171f8:	461a      	mov	r2, r3
 80171fa:	683b      	ldr	r3, [r7, #0]
 80171fc:	4413      	add	r3, r2
 80171fe:	793a      	ldrb	r2, [r7, #4]
 8017200:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8017202:	88fb      	ldrh	r3, [r7, #6]
}
 8017204:	4618      	mov	r0, r3
 8017206:	3708      	adds	r7, #8
 8017208:	46bd      	mov	sp, r7
 801720a:	bd80      	pop	{r7, pc}
 801720c:	080240f8 	.word	0x080240f8
 8017210:	08024cd8 	.word	0x08024cd8
 8017214:	08024158 	.word	0x08024158

08017218 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8017218:	b580      	push	{r7, lr}
 801721a:	b082      	sub	sp, #8
 801721c:	af00      	add	r7, sp, #0
 801721e:	4603      	mov	r3, r0
 8017220:	6039      	str	r1, [r7, #0]
 8017222:	80fb      	strh	r3, [r7, #6]
 8017224:	4613      	mov	r3, r2
 8017226:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8017228:	88fb      	ldrh	r3, [r7, #6]
 801722a:	2b43      	cmp	r3, #67	; 0x43
 801722c:	d906      	bls.n	801723c <dhcp_option_byte+0x24>
 801722e:	4b0a      	ldr	r3, [pc, #40]	; (8017258 <dhcp_option_byte+0x40>)
 8017230:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8017234:	4909      	ldr	r1, [pc, #36]	; (801725c <dhcp_option_byte+0x44>)
 8017236:	480a      	ldr	r0, [pc, #40]	; (8017260 <dhcp_option_byte+0x48>)
 8017238:	f009 f8d0 	bl	80203dc <iprintf>
  options[options_out_len++] = value;
 801723c:	88fb      	ldrh	r3, [r7, #6]
 801723e:	1c5a      	adds	r2, r3, #1
 8017240:	80fa      	strh	r2, [r7, #6]
 8017242:	461a      	mov	r2, r3
 8017244:	683b      	ldr	r3, [r7, #0]
 8017246:	4413      	add	r3, r2
 8017248:	797a      	ldrb	r2, [r7, #5]
 801724a:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801724c:	88fb      	ldrh	r3, [r7, #6]
}
 801724e:	4618      	mov	r0, r3
 8017250:	3708      	adds	r7, #8
 8017252:	46bd      	mov	sp, r7
 8017254:	bd80      	pop	{r7, pc}
 8017256:	bf00      	nop
 8017258:	080240f8 	.word	0x080240f8
 801725c:	08024d1c 	.word	0x08024d1c
 8017260:	08024158 	.word	0x08024158

08017264 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8017264:	b580      	push	{r7, lr}
 8017266:	b082      	sub	sp, #8
 8017268:	af00      	add	r7, sp, #0
 801726a:	4603      	mov	r3, r0
 801726c:	6039      	str	r1, [r7, #0]
 801726e:	80fb      	strh	r3, [r7, #6]
 8017270:	4613      	mov	r3, r2
 8017272:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8017274:	88fb      	ldrh	r3, [r7, #6]
 8017276:	3302      	adds	r3, #2
 8017278:	2b44      	cmp	r3, #68	; 0x44
 801727a:	d906      	bls.n	801728a <dhcp_option_short+0x26>
 801727c:	4b0f      	ldr	r3, [pc, #60]	; (80172bc <dhcp_option_short+0x58>)
 801727e:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8017282:	490f      	ldr	r1, [pc, #60]	; (80172c0 <dhcp_option_short+0x5c>)
 8017284:	480f      	ldr	r0, [pc, #60]	; (80172c4 <dhcp_option_short+0x60>)
 8017286:	f009 f8a9 	bl	80203dc <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801728a:	88bb      	ldrh	r3, [r7, #4]
 801728c:	0a1b      	lsrs	r3, r3, #8
 801728e:	b29a      	uxth	r2, r3
 8017290:	88fb      	ldrh	r3, [r7, #6]
 8017292:	1c59      	adds	r1, r3, #1
 8017294:	80f9      	strh	r1, [r7, #6]
 8017296:	4619      	mov	r1, r3
 8017298:	683b      	ldr	r3, [r7, #0]
 801729a:	440b      	add	r3, r1
 801729c:	b2d2      	uxtb	r2, r2
 801729e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80172a0:	88fb      	ldrh	r3, [r7, #6]
 80172a2:	1c5a      	adds	r2, r3, #1
 80172a4:	80fa      	strh	r2, [r7, #6]
 80172a6:	461a      	mov	r2, r3
 80172a8:	683b      	ldr	r3, [r7, #0]
 80172aa:	4413      	add	r3, r2
 80172ac:	88ba      	ldrh	r2, [r7, #4]
 80172ae:	b2d2      	uxtb	r2, r2
 80172b0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80172b2:	88fb      	ldrh	r3, [r7, #6]
}
 80172b4:	4618      	mov	r0, r3
 80172b6:	3708      	adds	r7, #8
 80172b8:	46bd      	mov	sp, r7
 80172ba:	bd80      	pop	{r7, pc}
 80172bc:	080240f8 	.word	0x080240f8
 80172c0:	08024d54 	.word	0x08024d54
 80172c4:	08024158 	.word	0x08024158

080172c8 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80172c8:	b580      	push	{r7, lr}
 80172ca:	b084      	sub	sp, #16
 80172cc:	af00      	add	r7, sp, #0
 80172ce:	4603      	mov	r3, r0
 80172d0:	60b9      	str	r1, [r7, #8]
 80172d2:	607a      	str	r2, [r7, #4]
 80172d4:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80172d6:	89fb      	ldrh	r3, [r7, #14]
 80172d8:	3304      	adds	r3, #4
 80172da:	2b44      	cmp	r3, #68	; 0x44
 80172dc:	d906      	bls.n	80172ec <dhcp_option_long+0x24>
 80172de:	4b19      	ldr	r3, [pc, #100]	; (8017344 <dhcp_option_long+0x7c>)
 80172e0:	f240 52b7 	movw	r2, #1463	; 0x5b7
 80172e4:	4918      	ldr	r1, [pc, #96]	; (8017348 <dhcp_option_long+0x80>)
 80172e6:	4819      	ldr	r0, [pc, #100]	; (801734c <dhcp_option_long+0x84>)
 80172e8:	f009 f878 	bl	80203dc <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	0e1a      	lsrs	r2, r3, #24
 80172f0:	89fb      	ldrh	r3, [r7, #14]
 80172f2:	1c59      	adds	r1, r3, #1
 80172f4:	81f9      	strh	r1, [r7, #14]
 80172f6:	4619      	mov	r1, r3
 80172f8:	68bb      	ldr	r3, [r7, #8]
 80172fa:	440b      	add	r3, r1
 80172fc:	b2d2      	uxtb	r2, r2
 80172fe:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	0c1a      	lsrs	r2, r3, #16
 8017304:	89fb      	ldrh	r3, [r7, #14]
 8017306:	1c59      	adds	r1, r3, #1
 8017308:	81f9      	strh	r1, [r7, #14]
 801730a:	4619      	mov	r1, r3
 801730c:	68bb      	ldr	r3, [r7, #8]
 801730e:	440b      	add	r3, r1
 8017310:	b2d2      	uxtb	r2, r2
 8017312:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	0a1a      	lsrs	r2, r3, #8
 8017318:	89fb      	ldrh	r3, [r7, #14]
 801731a:	1c59      	adds	r1, r3, #1
 801731c:	81f9      	strh	r1, [r7, #14]
 801731e:	4619      	mov	r1, r3
 8017320:	68bb      	ldr	r3, [r7, #8]
 8017322:	440b      	add	r3, r1
 8017324:	b2d2      	uxtb	r2, r2
 8017326:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8017328:	89fb      	ldrh	r3, [r7, #14]
 801732a:	1c5a      	adds	r2, r3, #1
 801732c:	81fa      	strh	r2, [r7, #14]
 801732e:	461a      	mov	r2, r3
 8017330:	68bb      	ldr	r3, [r7, #8]
 8017332:	4413      	add	r3, r2
 8017334:	687a      	ldr	r2, [r7, #4]
 8017336:	b2d2      	uxtb	r2, r2
 8017338:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801733a:	89fb      	ldrh	r3, [r7, #14]
}
 801733c:	4618      	mov	r0, r3
 801733e:	3710      	adds	r7, #16
 8017340:	46bd      	mov	sp, r7
 8017342:	bd80      	pop	{r7, pc}
 8017344:	080240f8 	.word	0x080240f8
 8017348:	08024d90 	.word	0x08024d90
 801734c:	08024158 	.word	0x08024158

08017350 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8017350:	b580      	push	{r7, lr}
 8017352:	b090      	sub	sp, #64	; 0x40
 8017354:	af00      	add	r7, sp, #0
 8017356:	6078      	str	r0, [r7, #4]
 8017358:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801735a:	2300      	movs	r3, #0
 801735c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 801735e:	2300      	movs	r3, #0
 8017360:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8017362:	220a      	movs	r2, #10
 8017364:	2100      	movs	r1, #0
 8017366:	48ba      	ldr	r0, [pc, #744]	; (8017650 <dhcp_parse_reply+0x300>)
 8017368:	f008 ff86 	bl	8020278 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	895b      	ldrh	r3, [r3, #10]
 8017370:	2b2b      	cmp	r3, #43	; 0x2b
 8017372:	d802      	bhi.n	801737a <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8017374:	f06f 0301 	mvn.w	r3, #1
 8017378:	e306      	b.n	8017988 <dhcp_parse_reply+0x638>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	685b      	ldr	r3, [r3, #4]
 801737e:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8017380:	23f0      	movs	r3, #240	; 0xf0
 8017382:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	891b      	ldrh	r3, [r3, #8]
 8017388:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801738e:	e00c      	b.n	80173aa <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8017390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017392:	895b      	ldrh	r3, [r3, #10]
 8017394:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8017396:	1ad3      	subs	r3, r2, r3
 8017398:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801739a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801739c:	895b      	ldrh	r3, [r3, #10]
 801739e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80173a0:	1ad3      	subs	r3, r2, r3
 80173a2:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 80173a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173a6:	681b      	ldr	r3, [r3, #0]
 80173a8:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80173aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d004      	beq.n	80173ba <dhcp_parse_reply+0x6a>
 80173b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173b2:	895b      	ldrh	r3, [r3, #10]
 80173b4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80173b6:	429a      	cmp	r2, r3
 80173b8:	d2ea      	bcs.n	8017390 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 80173ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173bc:	2b00      	cmp	r3, #0
 80173be:	d102      	bne.n	80173c6 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 80173c0:	f06f 0301 	mvn.w	r3, #1
 80173c4:	e2e0      	b.n	8017988 <dhcp_parse_reply+0x638>
  }
  offset = options_idx;
 80173c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80173c8:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 80173ca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80173cc:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 80173ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173d0:	685b      	ldr	r3, [r3, #4]
 80173d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80173d4:	e26c      	b.n	80178b0 <dhcp_parse_reply+0x560>
    u8_t op = options[offset];
 80173d6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80173d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80173da:	4413      	add	r3, r2
 80173dc:	781b      	ldrb	r3, [r3, #0]
 80173de:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 80173e0:	2300      	movs	r3, #0
 80173e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 80173e6:	f04f 33ff 	mov.w	r3, #4294967295
 80173ea:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 80173ec:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80173ee:	3302      	adds	r3, #2
 80173f0:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 80173f2:	8bfa      	ldrh	r2, [r7, #30]
 80173f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80173f6:	429a      	cmp	r2, r3
 80173f8:	d202      	bcs.n	8017400 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 80173fa:	f06f 0301 	mvn.w	r3, #1
 80173fe:	e2c3      	b.n	8017988 <dhcp_parse_reply+0x638>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8017400:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017402:	3301      	adds	r3, #1
 8017404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017406:	8952      	ldrh	r2, [r2, #10]
 8017408:	4293      	cmp	r3, r2
 801740a:	da07      	bge.n	801741c <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 801740c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801740e:	3301      	adds	r3, #1
 8017410:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017412:	4413      	add	r3, r2
 8017414:	781b      	ldrb	r3, [r3, #0]
 8017416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801741a:	e00b      	b.n	8017434 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801741c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801741e:	681b      	ldr	r3, [r3, #0]
 8017420:	2b00      	cmp	r3, #0
 8017422:	d004      	beq.n	801742e <dhcp_parse_reply+0xde>
 8017424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017426:	681b      	ldr	r3, [r3, #0]
 8017428:	685b      	ldr	r3, [r3, #4]
 801742a:	781b      	ldrb	r3, [r3, #0]
 801742c:	e000      	b.n	8017430 <dhcp_parse_reply+0xe0>
 801742e:	2300      	movs	r3, #0
 8017430:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8017434:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017438:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 801743c:	7dfb      	ldrb	r3, [r7, #23]
 801743e:	2b3b      	cmp	r3, #59	; 0x3b
 8017440:	f200 815a 	bhi.w	80176f8 <dhcp_parse_reply+0x3a8>
 8017444:	a201      	add	r2, pc, #4	; (adr r2, 801744c <dhcp_parse_reply+0xfc>)
 8017446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801744a:	bf00      	nop
 801744c:	0801753d 	.word	0x0801753d
 8017450:	0801754d 	.word	0x0801754d
 8017454:	080176f9 	.word	0x080176f9
 8017458:	0801756f 	.word	0x0801756f
 801745c:	080176f9 	.word	0x080176f9
 8017460:	080176f9 	.word	0x080176f9
 8017464:	0801759b 	.word	0x0801759b
 8017468:	080176f9 	.word	0x080176f9
 801746c:	080176f9 	.word	0x080176f9
 8017470:	080176f9 	.word	0x080176f9
 8017474:	080176f9 	.word	0x080176f9
 8017478:	080176f9 	.word	0x080176f9
 801747c:	080176f9 	.word	0x080176f9
 8017480:	080176f9 	.word	0x080176f9
 8017484:	080176f9 	.word	0x080176f9
 8017488:	080176f9 	.word	0x080176f9
 801748c:	080176f9 	.word	0x080176f9
 8017490:	080176f9 	.word	0x080176f9
 8017494:	080176f9 	.word	0x080176f9
 8017498:	080176f9 	.word	0x080176f9
 801749c:	080176f9 	.word	0x080176f9
 80174a0:	080176f9 	.word	0x080176f9
 80174a4:	080176f9 	.word	0x080176f9
 80174a8:	080176f9 	.word	0x080176f9
 80174ac:	080176f9 	.word	0x080176f9
 80174b0:	080176f9 	.word	0x080176f9
 80174b4:	080176f9 	.word	0x080176f9
 80174b8:	080176f9 	.word	0x080176f9
 80174bc:	080176f9 	.word	0x080176f9
 80174c0:	080176f9 	.word	0x080176f9
 80174c4:	080176f9 	.word	0x080176f9
 80174c8:	080176f9 	.word	0x080176f9
 80174cc:	080176f9 	.word	0x080176f9
 80174d0:	080176f9 	.word	0x080176f9
 80174d4:	080176f9 	.word	0x080176f9
 80174d8:	080176f9 	.word	0x080176f9
 80174dc:	080176f9 	.word	0x080176f9
 80174e0:	080176f9 	.word	0x080176f9
 80174e4:	080176f9 	.word	0x080176f9
 80174e8:	080176f9 	.word	0x080176f9
 80174ec:	080176f9 	.word	0x080176f9
 80174f0:	080176f9 	.word	0x080176f9
 80174f4:	080176f9 	.word	0x080176f9
 80174f8:	080176f9 	.word	0x080176f9
 80174fc:	080176f9 	.word	0x080176f9
 8017500:	080176f9 	.word	0x080176f9
 8017504:	080176f9 	.word	0x080176f9
 8017508:	080176f9 	.word	0x080176f9
 801750c:	080176f9 	.word	0x080176f9
 8017510:	080176f9 	.word	0x080176f9
 8017514:	080176f9 	.word	0x080176f9
 8017518:	080175f1 	.word	0x080175f1
 801751c:	08017613 	.word	0x08017613
 8017520:	08017671 	.word	0x08017671
 8017524:	08017693 	.word	0x08017693
 8017528:	080176f9 	.word	0x080176f9
 801752c:	080176f9 	.word	0x080176f9
 8017530:	080176f9 	.word	0x080176f9
 8017534:	080176b5 	.word	0x080176b5
 8017538:	080176d7 	.word	0x080176d7
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801753c:	2300      	movs	r3, #0
 801753e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017542:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017546:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801754a:	e0de      	b.n	801770a <dhcp_parse_reply+0x3ba>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801754c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017550:	2b04      	cmp	r3, #4
 8017552:	d009      	beq.n	8017568 <dhcp_parse_reply+0x218>
 8017554:	4b3f      	ldr	r3, [pc, #252]	; (8017654 <dhcp_parse_reply+0x304>)
 8017556:	f240 622e 	movw	r2, #1582	; 0x62e
 801755a:	493f      	ldr	r1, [pc, #252]	; (8017658 <dhcp_parse_reply+0x308>)
 801755c:	483f      	ldr	r0, [pc, #252]	; (801765c <dhcp_parse_reply+0x30c>)
 801755e:	f008 ff3d 	bl	80203dc <iprintf>
 8017562:	f06f 0305 	mvn.w	r3, #5
 8017566:	e20f      	b.n	8017988 <dhcp_parse_reply+0x638>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8017568:	2306      	movs	r3, #6
 801756a:	623b      	str	r3, [r7, #32]
        break;
 801756c:	e0cd      	b.n	801770a <dhcp_parse_reply+0x3ba>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801756e:	2304      	movs	r3, #4
 8017570:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8017574:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017578:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801757c:	429a      	cmp	r2, r3
 801757e:	d209      	bcs.n	8017594 <dhcp_parse_reply+0x244>
 8017580:	4b34      	ldr	r3, [pc, #208]	; (8017654 <dhcp_parse_reply+0x304>)
 8017582:	f240 6233 	movw	r2, #1587	; 0x633
 8017586:	4936      	ldr	r1, [pc, #216]	; (8017660 <dhcp_parse_reply+0x310>)
 8017588:	4834      	ldr	r0, [pc, #208]	; (801765c <dhcp_parse_reply+0x30c>)
 801758a:	f008 ff27 	bl	80203dc <iprintf>
 801758e:	f06f 0305 	mvn.w	r3, #5
 8017592:	e1f9      	b.n	8017988 <dhcp_parse_reply+0x638>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8017594:	2307      	movs	r3, #7
 8017596:	623b      	str	r3, [r7, #32]
        break;
 8017598:	e0b7      	b.n	801770a <dhcp_parse_reply+0x3ba>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case (DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 801759a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801759e:	f003 0303 	and.w	r3, r3, #3
 80175a2:	b2db      	uxtb	r3, r3
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d009      	beq.n	80175bc <dhcp_parse_reply+0x26c>
 80175a8:	4b2a      	ldr	r3, [pc, #168]	; (8017654 <dhcp_parse_reply+0x304>)
 80175aa:	f240 6239 	movw	r2, #1593	; 0x639
 80175ae:	492d      	ldr	r1, [pc, #180]	; (8017664 <dhcp_parse_reply+0x314>)
 80175b0:	482a      	ldr	r0, [pc, #168]	; (801765c <dhcp_parse_reply+0x30c>)
 80175b2:	f008 ff13 	bl	80203dc <iprintf>
 80175b6:	f06f 0305 	mvn.w	r3, #5
 80175ba:	e1e5      	b.n	8017988 <dhcp_parse_reply+0x638>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 80175bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80175c0:	2b08      	cmp	r3, #8
 80175c2:	bf28      	it	cs
 80175c4:	2308      	movcs	r3, #8
 80175c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80175ca:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80175ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80175d2:	429a      	cmp	r2, r3
 80175d4:	d209      	bcs.n	80175ea <dhcp_parse_reply+0x29a>
 80175d6:	4b1f      	ldr	r3, [pc, #124]	; (8017654 <dhcp_parse_reply+0x304>)
 80175d8:	f240 623c 	movw	r2, #1596	; 0x63c
 80175dc:	4920      	ldr	r1, [pc, #128]	; (8017660 <dhcp_parse_reply+0x310>)
 80175de:	481f      	ldr	r0, [pc, #124]	; (801765c <dhcp_parse_reply+0x30c>)
 80175e0:	f008 fefc 	bl	80203dc <iprintf>
 80175e4:	f06f 0305 	mvn.w	r3, #5
 80175e8:	e1ce      	b.n	8017988 <dhcp_parse_reply+0x638>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 80175ea:	2308      	movs	r3, #8
 80175ec:	623b      	str	r3, [r7, #32]
        break;
 80175ee:	e08c      	b.n	801770a <dhcp_parse_reply+0x3ba>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80175f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80175f4:	2b04      	cmp	r3, #4
 80175f6:	d009      	beq.n	801760c <dhcp_parse_reply+0x2bc>
 80175f8:	4b16      	ldr	r3, [pc, #88]	; (8017654 <dhcp_parse_reply+0x304>)
 80175fa:	f240 6241 	movw	r2, #1601	; 0x641
 80175fe:	4916      	ldr	r1, [pc, #88]	; (8017658 <dhcp_parse_reply+0x308>)
 8017600:	4816      	ldr	r0, [pc, #88]	; (801765c <dhcp_parse_reply+0x30c>)
 8017602:	f008 feeb 	bl	80203dc <iprintf>
 8017606:	f06f 0305 	mvn.w	r3, #5
 801760a:	e1bd      	b.n	8017988 <dhcp_parse_reply+0x638>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801760c:	2303      	movs	r3, #3
 801760e:	623b      	str	r3, [r7, #32]
        break;
 8017610:	e07b      	b.n	801770a <dhcp_parse_reply+0x3ba>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8017612:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017616:	2b01      	cmp	r3, #1
 8017618:	d009      	beq.n	801762e <dhcp_parse_reply+0x2de>
 801761a:	4b0e      	ldr	r3, [pc, #56]	; (8017654 <dhcp_parse_reply+0x304>)
 801761c:	f240 624f 	movw	r2, #1615	; 0x64f
 8017620:	4911      	ldr	r1, [pc, #68]	; (8017668 <dhcp_parse_reply+0x318>)
 8017622:	480e      	ldr	r0, [pc, #56]	; (801765c <dhcp_parse_reply+0x30c>)
 8017624:	f008 feda 	bl	80203dc <iprintf>
 8017628:	f06f 0305 	mvn.w	r3, #5
 801762c:	e1ac      	b.n	8017988 <dhcp_parse_reply+0x638>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801762e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017630:	2bf0      	cmp	r3, #240	; 0xf0
 8017632:	d009      	beq.n	8017648 <dhcp_parse_reply+0x2f8>
 8017634:	4b07      	ldr	r3, [pc, #28]	; (8017654 <dhcp_parse_reply+0x304>)
 8017636:	f240 6251 	movw	r2, #1617	; 0x651
 801763a:	490c      	ldr	r1, [pc, #48]	; (801766c <dhcp_parse_reply+0x31c>)
 801763c:	4807      	ldr	r0, [pc, #28]	; (801765c <dhcp_parse_reply+0x30c>)
 801763e:	f008 fecd 	bl	80203dc <iprintf>
 8017642:	f06f 0305 	mvn.w	r3, #5
 8017646:	e19f      	b.n	8017988 <dhcp_parse_reply+0x638>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8017648:	2300      	movs	r3, #0
 801764a:	623b      	str	r3, [r7, #32]
        break;
 801764c:	e05d      	b.n	801770a <dhcp_parse_reply+0x3ba>
 801764e:	bf00      	nop
 8017650:	2000a530 	.word	0x2000a530
 8017654:	080240f8 	.word	0x080240f8
 8017658:	08024dcc 	.word	0x08024dcc
 801765c:	08024158 	.word	0x08024158
 8017660:	08024dd8 	.word	0x08024dd8
 8017664:	08024dec 	.word	0x08024dec
 8017668:	08024dfc 	.word	0x08024dfc
 801766c:	08024e08 	.word	0x08024e08
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8017670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017674:	2b01      	cmp	r3, #1
 8017676:	d009      	beq.n	801768c <dhcp_parse_reply+0x33c>
 8017678:	4ba8      	ldr	r3, [pc, #672]	; (801791c <dhcp_parse_reply+0x5cc>)
 801767a:	f240 6255 	movw	r2, #1621	; 0x655
 801767e:	49a8      	ldr	r1, [pc, #672]	; (8017920 <dhcp_parse_reply+0x5d0>)
 8017680:	48a8      	ldr	r0, [pc, #672]	; (8017924 <dhcp_parse_reply+0x5d4>)
 8017682:	f008 feab 	bl	80203dc <iprintf>
 8017686:	f06f 0305 	mvn.w	r3, #5
 801768a:	e17d      	b.n	8017988 <dhcp_parse_reply+0x638>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801768c:	2301      	movs	r3, #1
 801768e:	623b      	str	r3, [r7, #32]
        break;
 8017690:	e03b      	b.n	801770a <dhcp_parse_reply+0x3ba>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017692:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017696:	2b04      	cmp	r3, #4
 8017698:	d009      	beq.n	80176ae <dhcp_parse_reply+0x35e>
 801769a:	4ba0      	ldr	r3, [pc, #640]	; (801791c <dhcp_parse_reply+0x5cc>)
 801769c:	f240 6259 	movw	r2, #1625	; 0x659
 80176a0:	49a1      	ldr	r1, [pc, #644]	; (8017928 <dhcp_parse_reply+0x5d8>)
 80176a2:	48a0      	ldr	r0, [pc, #640]	; (8017924 <dhcp_parse_reply+0x5d4>)
 80176a4:	f008 fe9a 	bl	80203dc <iprintf>
 80176a8:	f06f 0305 	mvn.w	r3, #5
 80176ac:	e16c      	b.n	8017988 <dhcp_parse_reply+0x638>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80176ae:	2302      	movs	r3, #2
 80176b0:	623b      	str	r3, [r7, #32]
        break;
 80176b2:	e02a      	b.n	801770a <dhcp_parse_reply+0x3ba>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80176b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80176b8:	2b04      	cmp	r3, #4
 80176ba:	d009      	beq.n	80176d0 <dhcp_parse_reply+0x380>
 80176bc:	4b97      	ldr	r3, [pc, #604]	; (801791c <dhcp_parse_reply+0x5cc>)
 80176be:	f240 625d 	movw	r2, #1629	; 0x65d
 80176c2:	4999      	ldr	r1, [pc, #612]	; (8017928 <dhcp_parse_reply+0x5d8>)
 80176c4:	4897      	ldr	r0, [pc, #604]	; (8017924 <dhcp_parse_reply+0x5d4>)
 80176c6:	f008 fe89 	bl	80203dc <iprintf>
 80176ca:	f06f 0305 	mvn.w	r3, #5
 80176ce:	e15b      	b.n	8017988 <dhcp_parse_reply+0x638>
        decode_idx = DHCP_OPTION_IDX_T1;
 80176d0:	2304      	movs	r3, #4
 80176d2:	623b      	str	r3, [r7, #32]
        break;
 80176d4:	e019      	b.n	801770a <dhcp_parse_reply+0x3ba>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80176d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80176da:	2b04      	cmp	r3, #4
 80176dc:	d009      	beq.n	80176f2 <dhcp_parse_reply+0x3a2>
 80176de:	4b8f      	ldr	r3, [pc, #572]	; (801791c <dhcp_parse_reply+0x5cc>)
 80176e0:	f240 6261 	movw	r2, #1633	; 0x661
 80176e4:	4990      	ldr	r1, [pc, #576]	; (8017928 <dhcp_parse_reply+0x5d8>)
 80176e6:	488f      	ldr	r0, [pc, #572]	; (8017924 <dhcp_parse_reply+0x5d4>)
 80176e8:	f008 fe78 	bl	80203dc <iprintf>
 80176ec:	f06f 0305 	mvn.w	r3, #5
 80176f0:	e14a      	b.n	8017988 <dhcp_parse_reply+0x638>
        decode_idx = DHCP_OPTION_IDX_T2;
 80176f2:	2305      	movs	r3, #5
 80176f4:	623b      	str	r3, [r7, #32]
        break;
 80176f6:	e008      	b.n	801770a <dhcp_parse_reply+0x3ba>
      default:
        decode_len = 0;
 80176f8:	2300      	movs	r3, #0
 80176fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
 80176fe:	7dfb      	ldrb	r3, [r7, #23]
 8017700:	4619      	mov	r1, r3
 8017702:	488a      	ldr	r0, [pc, #552]	; (801792c <dhcp_parse_reply+0x5dc>)
 8017704:	f008 fe6a 	bl	80203dc <iprintf>
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8017708:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801770a:	7dfb      	ldrb	r3, [r7, #23]
 801770c:	2b00      	cmp	r3, #0
 801770e:	d103      	bne.n	8017718 <dhcp_parse_reply+0x3c8>
      offset++;
 8017710:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017712:	3301      	adds	r3, #1
 8017714:	877b      	strh	r3, [r7, #58]	; 0x3a
 8017716:	e0a1      	b.n	801785c <dhcp_parse_reply+0x50c>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8017718:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801771a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801771e:	4413      	add	r3, r2
 8017720:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8017724:	4293      	cmp	r3, r2
 8017726:	dd02      	ble.n	801772e <dhcp_parse_reply+0x3de>
        /* overflow */
        return ERR_BUF;
 8017728:	f06f 0301 	mvn.w	r3, #1
 801772c:	e12c      	b.n	8017988 <dhcp_parse_reply+0x638>
      }
      offset = (u16_t)(offset + len + 2);
 801772e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017732:	b29a      	uxth	r2, r3
 8017734:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017736:	4413      	add	r3, r2
 8017738:	b29b      	uxth	r3, r3
 801773a:	3302      	adds	r3, #2
 801773c:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 801773e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017742:	2b00      	cmp	r3, #0
 8017744:	f000 808a 	beq.w	801785c <dhcp_parse_reply+0x50c>
        u32_t value = 0;
 8017748:	2300      	movs	r3, #0
 801774a:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801774c:	6a3b      	ldr	r3, [r7, #32]
 801774e:	2b00      	cmp	r3, #0
 8017750:	db02      	blt.n	8017758 <dhcp_parse_reply+0x408>
 8017752:	6a3b      	ldr	r3, [r7, #32]
 8017754:	2b09      	cmp	r3, #9
 8017756:	dd06      	ble.n	8017766 <dhcp_parse_reply+0x416>
 8017758:	4b70      	ldr	r3, [pc, #448]	; (801791c <dhcp_parse_reply+0x5cc>)
 801775a:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801775e:	4974      	ldr	r1, [pc, #464]	; (8017930 <dhcp_parse_reply+0x5e0>)
 8017760:	4870      	ldr	r0, [pc, #448]	; (8017924 <dhcp_parse_reply+0x5d4>)
 8017762:	f008 fe3b 	bl	80203dc <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8017766:	4a73      	ldr	r2, [pc, #460]	; (8017934 <dhcp_parse_reply+0x5e4>)
 8017768:	6a3b      	ldr	r3, [r7, #32]
 801776a:	4413      	add	r3, r2
 801776c:	781b      	ldrb	r3, [r3, #0]
 801776e:	2b00      	cmp	r3, #0
 8017770:	d174      	bne.n	801785c <dhcp_parse_reply+0x50c>
          copy_len = LWIP_MIN(decode_len, 4);
 8017772:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017776:	2b04      	cmp	r3, #4
 8017778:	bf28      	it	cs
 801777a:	2304      	movcs	r3, #4
 801777c:	b2db      	uxtb	r3, r3
 801777e:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8017780:	8bfb      	ldrh	r3, [r7, #30]
 8017782:	8aba      	ldrh	r2, [r7, #20]
 8017784:	f107 0108 	add.w	r1, r7, #8
 8017788:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801778a:	f7f7 fc87 	bl	800f09c <pbuf_copy_partial>
 801778e:	4603      	mov	r3, r0
 8017790:	461a      	mov	r2, r3
 8017792:	8abb      	ldrh	r3, [r7, #20]
 8017794:	4293      	cmp	r3, r2
 8017796:	d002      	beq.n	801779e <dhcp_parse_reply+0x44e>
            return ERR_BUF;
 8017798:	f06f 0301 	mvn.w	r3, #1
 801779c:	e0f4      	b.n	8017988 <dhcp_parse_reply+0x638>
          }
          if (decode_len > 4) {
 801779e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80177a2:	2b04      	cmp	r3, #4
 80177a4:	d933      	bls.n	801780e <dhcp_parse_reply+0x4be>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80177a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80177aa:	f003 0303 	and.w	r3, r3, #3
 80177ae:	b2db      	uxtb	r3, r3
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d009      	beq.n	80177c8 <dhcp_parse_reply+0x478>
 80177b4:	4b59      	ldr	r3, [pc, #356]	; (801791c <dhcp_parse_reply+0x5cc>)
 80177b6:	f240 6281 	movw	r2, #1665	; 0x681
 80177ba:	495f      	ldr	r1, [pc, #380]	; (8017938 <dhcp_parse_reply+0x5e8>)
 80177bc:	4859      	ldr	r0, [pc, #356]	; (8017924 <dhcp_parse_reply+0x5d4>)
 80177be:	f008 fe0d 	bl	80203dc <iprintf>
 80177c2:	f06f 0305 	mvn.w	r3, #5
 80177c6:	e0df      	b.n	8017988 <dhcp_parse_reply+0x638>
            dhcp_got_option(dhcp, decode_idx);
 80177c8:	4a5a      	ldr	r2, [pc, #360]	; (8017934 <dhcp_parse_reply+0x5e4>)
 80177ca:	6a3b      	ldr	r3, [r7, #32]
 80177cc:	4413      	add	r3, r2
 80177ce:	2201      	movs	r2, #1
 80177d0:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80177d2:	68bb      	ldr	r3, [r7, #8]
 80177d4:	4618      	mov	r0, r3
 80177d6:	f7f5 f8e8 	bl	800c9aa <lwip_htonl>
 80177da:	4602      	mov	r2, r0
 80177dc:	4957      	ldr	r1, [pc, #348]	; (801793c <dhcp_parse_reply+0x5ec>)
 80177de:	6a3b      	ldr	r3, [r7, #32]
 80177e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80177e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80177e8:	3b04      	subs	r3, #4
 80177ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 80177ee:	8bfb      	ldrh	r3, [r7, #30]
 80177f0:	3304      	adds	r3, #4
 80177f2:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 80177f4:	8a7a      	ldrh	r2, [r7, #18]
 80177f6:	8bfb      	ldrh	r3, [r7, #30]
 80177f8:	429a      	cmp	r2, r3
 80177fa:	d202      	bcs.n	8017802 <dhcp_parse_reply+0x4b2>
              /* overflow */
              return ERR_BUF;
 80177fc:	f06f 0301 	mvn.w	r3, #1
 8017800:	e0c2      	b.n	8017988 <dhcp_parse_reply+0x638>
            }
            val_offset = next_val_offset;
 8017802:	8a7b      	ldrh	r3, [r7, #18]
 8017804:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8017806:	6a3b      	ldr	r3, [r7, #32]
 8017808:	3301      	adds	r3, #1
 801780a:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801780c:	e79e      	b.n	801774c <dhcp_parse_reply+0x3fc>
          } else if (decode_len == 4) {
 801780e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017812:	2b04      	cmp	r3, #4
 8017814:	d106      	bne.n	8017824 <dhcp_parse_reply+0x4d4>
            value = lwip_ntohl(value);
 8017816:	68bb      	ldr	r3, [r7, #8]
 8017818:	4618      	mov	r0, r3
 801781a:	f7f5 f8c6 	bl	800c9aa <lwip_htonl>
 801781e:	4603      	mov	r3, r0
 8017820:	60bb      	str	r3, [r7, #8]
 8017822:	e011      	b.n	8017848 <dhcp_parse_reply+0x4f8>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8017824:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017828:	2b01      	cmp	r3, #1
 801782a:	d009      	beq.n	8017840 <dhcp_parse_reply+0x4f0>
 801782c:	4b3b      	ldr	r3, [pc, #236]	; (801791c <dhcp_parse_reply+0x5cc>)
 801782e:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8017832:	4943      	ldr	r1, [pc, #268]	; (8017940 <dhcp_parse_reply+0x5f0>)
 8017834:	483b      	ldr	r0, [pc, #236]	; (8017924 <dhcp_parse_reply+0x5d4>)
 8017836:	f008 fdd1 	bl	80203dc <iprintf>
 801783a:	f06f 0305 	mvn.w	r3, #5
 801783e:	e0a3      	b.n	8017988 <dhcp_parse_reply+0x638>
            value = ((u8_t *)&value)[0];
 8017840:	f107 0308 	add.w	r3, r7, #8
 8017844:	781b      	ldrb	r3, [r3, #0]
 8017846:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8017848:	4a3a      	ldr	r2, [pc, #232]	; (8017934 <dhcp_parse_reply+0x5e4>)
 801784a:	6a3b      	ldr	r3, [r7, #32]
 801784c:	4413      	add	r3, r2
 801784e:	2201      	movs	r2, #1
 8017850:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8017852:	68ba      	ldr	r2, [r7, #8]
 8017854:	4939      	ldr	r1, [pc, #228]	; (801793c <dhcp_parse_reply+0x5ec>)
 8017856:	6a3b      	ldr	r3, [r7, #32]
 8017858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801785c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801785e:	895b      	ldrh	r3, [r3, #10]
 8017860:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017862:	429a      	cmp	r2, r3
 8017864:	d324      	bcc.n	80178b0 <dhcp_parse_reply+0x560>
      offset = (u16_t)(offset - q->len);
 8017866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017868:	895b      	ldrh	r3, [r3, #10]
 801786a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801786c:	1ad3      	subs	r3, r2, r3
 801786e:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8017870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017872:	895b      	ldrh	r3, [r3, #10]
 8017874:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8017876:	1ad3      	subs	r3, r2, r3
 8017878:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801787a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801787c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801787e:	429a      	cmp	r2, r3
 8017880:	d213      	bcs.n	80178aa <dhcp_parse_reply+0x55a>
        q = q->next;
 8017882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017884:	681b      	ldr	r3, [r3, #0]
 8017886:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8017888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801788a:	2b00      	cmp	r3, #0
 801788c:	d109      	bne.n	80178a2 <dhcp_parse_reply+0x552>
 801788e:	4b23      	ldr	r3, [pc, #140]	; (801791c <dhcp_parse_reply+0x5cc>)
 8017890:	f240 629d 	movw	r2, #1693	; 0x69d
 8017894:	492b      	ldr	r1, [pc, #172]	; (8017944 <dhcp_parse_reply+0x5f4>)
 8017896:	4823      	ldr	r0, [pc, #140]	; (8017924 <dhcp_parse_reply+0x5d4>)
 8017898:	f008 fda0 	bl	80203dc <iprintf>
 801789c:	f06f 0305 	mvn.w	r3, #5
 80178a0:	e072      	b.n	8017988 <dhcp_parse_reply+0x638>
        options = (u8_t *)q->payload;
 80178a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178a4:	685b      	ldr	r3, [r3, #4]
 80178a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80178a8:	e002      	b.n	80178b0 <dhcp_parse_reply+0x560>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80178aa:	f06f 0301 	mvn.w	r3, #1
 80178ae:	e06b      	b.n	8017988 <dhcp_parse_reply+0x638>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80178b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178b2:	2b00      	cmp	r3, #0
 80178b4:	d00a      	beq.n	80178cc <dhcp_parse_reply+0x57c>
 80178b6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80178b8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80178ba:	429a      	cmp	r2, r3
 80178bc:	d206      	bcs.n	80178cc <dhcp_parse_reply+0x57c>
 80178be:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80178c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80178c2:	4413      	add	r3, r2
 80178c4:	781b      	ldrb	r3, [r3, #0]
 80178c6:	2bff      	cmp	r3, #255	; 0xff
 80178c8:	f47f ad85 	bne.w	80173d6 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80178cc:	4b19      	ldr	r3, [pc, #100]	; (8017934 <dhcp_parse_reply+0x5e4>)
 80178ce:	781b      	ldrb	r3, [r3, #0]
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	d044      	beq.n	801795e <dhcp_parse_reply+0x60e>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80178d4:	4b19      	ldr	r3, [pc, #100]	; (801793c <dhcp_parse_reply+0x5ec>)
 80178d6:	681b      	ldr	r3, [r3, #0]
 80178d8:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80178da:	4b16      	ldr	r3, [pc, #88]	; (8017934 <dhcp_parse_reply+0x5e4>)
 80178dc:	2200      	movs	r2, #0
 80178de:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80178e0:	68fb      	ldr	r3, [r7, #12]
 80178e2:	2b01      	cmp	r3, #1
 80178e4:	d105      	bne.n	80178f2 <dhcp_parse_reply+0x5a2>
      parse_file_as_options = 1;
 80178e6:	2301      	movs	r3, #1
 80178e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
 80178ea:	4817      	ldr	r0, [pc, #92]	; (8017948 <dhcp_parse_reply+0x5f8>)
 80178ec:	f008 fe12 	bl	8020514 <puts>
 80178f0:	e035      	b.n	801795e <dhcp_parse_reply+0x60e>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80178f2:	68fb      	ldr	r3, [r7, #12]
 80178f4:	2b02      	cmp	r3, #2
 80178f6:	d105      	bne.n	8017904 <dhcp_parse_reply+0x5b4>
      parse_sname_as_options = 1;
 80178f8:	2301      	movs	r3, #1
 80178fa:	62bb      	str	r3, [r7, #40]	; 0x28
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
 80178fc:	4813      	ldr	r0, [pc, #76]	; (801794c <dhcp_parse_reply+0x5fc>)
 80178fe:	f008 fe09 	bl	8020514 <puts>
 8017902:	e02c      	b.n	801795e <dhcp_parse_reply+0x60e>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8017904:	68fb      	ldr	r3, [r7, #12]
 8017906:	2b03      	cmp	r3, #3
 8017908:	d124      	bne.n	8017954 <dhcp_parse_reply+0x604>
      parse_sname_as_options = 1;
 801790a:	2301      	movs	r3, #1
 801790c:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 801790e:	2301      	movs	r3, #1
 8017910:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
 8017912:	480f      	ldr	r0, [pc, #60]	; (8017950 <dhcp_parse_reply+0x600>)
 8017914:	f008 fdfe 	bl	8020514 <puts>
 8017918:	e021      	b.n	801795e <dhcp_parse_reply+0x60e>
 801791a:	bf00      	nop
 801791c:	080240f8 	.word	0x080240f8
 8017920:	08024dfc 	.word	0x08024dfc
 8017924:	08024158 	.word	0x08024158
 8017928:	08024dcc 	.word	0x08024dcc
 801792c:	08024e20 	.word	0x08024e20
 8017930:	08024e40 	.word	0x08024e40
 8017934:	2000a530 	.word	0x2000a530
 8017938:	08024e54 	.word	0x08024e54
 801793c:	2000a53c 	.word	0x2000a53c
 8017940:	08024e6c 	.word	0x08024e6c
 8017944:	08024e80 	.word	0x08024e80
 8017948:	08024e94 	.word	0x08024e94
 801794c:	08024eac 	.word	0x08024eac
 8017950:	08024ec4 	.word	0x08024ec4
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
 8017954:	68fb      	ldr	r3, [r7, #12]
 8017956:	4619      	mov	r1, r3
 8017958:	480d      	ldr	r0, [pc, #52]	; (8017990 <dhcp_parse_reply+0x640>)
 801795a:	f008 fd3f 	bl	80203dc <iprintf>
    }
  }
  if (parse_file_as_options) {
 801795e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017960:	2b00      	cmp	r3, #0
 8017962:	d006      	beq.n	8017972 <dhcp_parse_reply+0x622>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8017964:	2300      	movs	r3, #0
 8017966:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8017968:	236c      	movs	r3, #108	; 0x6c
 801796a:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801796c:	23ec      	movs	r3, #236	; 0xec
 801796e:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8017970:	e50b      	b.n	801738a <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8017972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017974:	2b00      	cmp	r3, #0
 8017976:	d006      	beq.n	8017986 <dhcp_parse_reply+0x636>
    parse_sname_as_options = 0;
 8017978:	2300      	movs	r3, #0
 801797a:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 801797c:	232c      	movs	r3, #44	; 0x2c
 801797e:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8017980:	236c      	movs	r3, #108	; 0x6c
 8017982:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8017984:	e501      	b.n	801738a <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8017986:	2300      	movs	r3, #0
}
 8017988:	4618      	mov	r0, r3
 801798a:	3740      	adds	r7, #64	; 0x40
 801798c:	46bd      	mov	sp, r7
 801798e:	bd80      	pop	{r7, pc}
 8017990:	08024ee4 	.word	0x08024ee4

08017994 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8017994:	b590      	push	{r4, r7, lr}
 8017996:	b08f      	sub	sp, #60	; 0x3c
 8017998:	af04      	add	r7, sp, #16
 801799a:	60f8      	str	r0, [r7, #12]
 801799c:	60b9      	str	r1, [r7, #8]
 801799e:	607a      	str	r2, [r7, #4]
 80179a0:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80179a2:	4b8c      	ldr	r3, [pc, #560]	; (8017bd4 <dhcp_recv+0x240>)
 80179a4:	685b      	ldr	r3, [r3, #4]
 80179a6:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80179a8:	6a3b      	ldr	r3, [r7, #32]
 80179aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179ac:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	685b      	ldr	r3, [r3, #4]
 80179b2:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80179b4:	69fb      	ldr	r3, [r7, #28]
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	f000 8102 	beq.w	8017bc0 <dhcp_recv+0x22c>
 80179bc:	69fb      	ldr	r3, [r7, #28]
 80179be:	791b      	ldrb	r3, [r3, #4]
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	f000 80fd 	beq.w	8017bc0 <dhcp_recv+0x22c>
    goto free_pbuf_and_return;
  }

  LWIP_ASSERT("invalid server address type", IP_IS_V4(addr));

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_recv(pbuf = %p) from DHCP server %"U16_F".%"U16_F".%"U16_F".%"U16_F" port %"U16_F"\n", (void *)p,
 80179c6:	683b      	ldr	r3, [r7, #0]
 80179c8:	781b      	ldrb	r3, [r3, #0]
 80179ca:	4618      	mov	r0, r3
 80179cc:	683b      	ldr	r3, [r7, #0]
 80179ce:	3301      	adds	r3, #1
 80179d0:	781b      	ldrb	r3, [r3, #0]
 80179d2:	461c      	mov	r4, r3
 80179d4:	683b      	ldr	r3, [r7, #0]
 80179d6:	3302      	adds	r3, #2
 80179d8:	781b      	ldrb	r3, [r3, #0]
 80179da:	461a      	mov	r2, r3
 80179dc:	683b      	ldr	r3, [r7, #0]
 80179de:	3303      	adds	r3, #3
 80179e0:	781b      	ldrb	r3, [r3, #0]
 80179e2:	4619      	mov	r1, r3
 80179e4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80179e6:	9302      	str	r3, [sp, #8]
 80179e8:	9101      	str	r1, [sp, #4]
 80179ea:	9200      	str	r2, [sp, #0]
 80179ec:	4623      	mov	r3, r4
 80179ee:	4602      	mov	r2, r0
 80179f0:	6879      	ldr	r1, [r7, #4]
 80179f2:	4879      	ldr	r0, [pc, #484]	; (8017bd8 <dhcp_recv+0x244>)
 80179f4:	f008 fcf2 	bl	80203dc <iprintf>
              ip4_addr1_16(ip_2_ip4(addr)), ip4_addr2_16(ip_2_ip4(addr)), ip4_addr3_16(ip_2_ip4(addr)), ip4_addr4_16(ip_2_ip4(addr)), port));
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("pbuf->len = %"U16_F"\n", p->len));
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	895b      	ldrh	r3, [r3, #10]
 80179fc:	4619      	mov	r1, r3
 80179fe:	4877      	ldr	r0, [pc, #476]	; (8017bdc <dhcp_recv+0x248>)
 8017a00:	f008 fcec 	bl	80203dc <iprintf>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("pbuf->tot_len = %"U16_F"\n", p->tot_len));
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	891b      	ldrh	r3, [r3, #8]
 8017a08:	4619      	mov	r1, r3
 8017a0a:	4875      	ldr	r0, [pc, #468]	; (8017be0 <dhcp_recv+0x24c>)
 8017a0c:	f008 fce6 	bl	80203dc <iprintf>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	895b      	ldrh	r3, [r3, #10]
 8017a14:	2b2b      	cmp	r3, #43	; 0x2b
 8017a16:	d803      	bhi.n	8017a20 <dhcp_recv+0x8c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
 8017a18:	4872      	ldr	r0, [pc, #456]	; (8017be4 <dhcp_recv+0x250>)
 8017a1a:	f008 fd7b 	bl	8020514 <puts>
    goto free_pbuf_and_return;
 8017a1e:	e0d2      	b.n	8017bc6 <dhcp_recv+0x232>
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8017a20:	69bb      	ldr	r3, [r7, #24]
 8017a22:	781b      	ldrb	r3, [r3, #0]
 8017a24:	2b02      	cmp	r3, #2
 8017a26:	d006      	beq.n	8017a36 <dhcp_recv+0xa2>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
 8017a28:	69bb      	ldr	r3, [r7, #24]
 8017a2a:	781b      	ldrb	r3, [r3, #0]
 8017a2c:	4619      	mov	r1, r3
 8017a2e:	486e      	ldr	r0, [pc, #440]	; (8017be8 <dhcp_recv+0x254>)
 8017a30:	f008 fcd4 	bl	80203dc <iprintf>
    goto free_pbuf_and_return;
 8017a34:	e0c7      	b.n	8017bc6 <dhcp_recv+0x232>
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8017a36:	2300      	movs	r3, #0
 8017a38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017a3c:	e028      	b.n	8017a90 <dhcp_recv+0xfc>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8017a3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017a42:	6a3a      	ldr	r2, [r7, #32]
 8017a44:	4413      	add	r3, r2
 8017a46:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8017a4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017a4e:	69b9      	ldr	r1, [r7, #24]
 8017a50:	440b      	add	r3, r1
 8017a52:	7f1b      	ldrb	r3, [r3, #28]
 8017a54:	429a      	cmp	r2, r3
 8017a56:	d016      	beq.n	8017a86 <dhcp_recv+0xf2>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 8017a58:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8017a5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017a60:	6a3a      	ldr	r2, [r7, #32]
 8017a62:	4413      	add	r3, r2
 8017a64:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8017a68:	461c      	mov	r4, r3
 8017a6a:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 8017a6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017a72:	69ba      	ldr	r2, [r7, #24]
 8017a74:	4413      	add	r3, r2
 8017a76:	7f1b      	ldrb	r3, [r3, #28]
 8017a78:	9300      	str	r3, [sp, #0]
 8017a7a:	4603      	mov	r3, r0
 8017a7c:	4622      	mov	r2, r4
 8017a7e:	485b      	ldr	r0, [pc, #364]	; (8017bec <dhcp_recv+0x258>)
 8017a80:	f008 fcac 	bl	80203dc <iprintf>
                  ("netif->hwaddr[%"U16_F"]==%02"X16_F" != reply_msg->chaddr[%"U16_F"]==%02"X16_F"\n",
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
 8017a84:	e09f      	b.n	8017bc6 <dhcp_recv+0x232>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8017a86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017a8a:	3301      	adds	r3, #1
 8017a8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017a90:	6a3b      	ldr	r3, [r7, #32]
 8017a92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017a96:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017a9a:	429a      	cmp	r2, r3
 8017a9c:	d203      	bcs.n	8017aa6 <dhcp_recv+0x112>
 8017a9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017aa2:	2b05      	cmp	r3, #5
 8017aa4:	d9cb      	bls.n	8017a3e <dhcp_recv+0xaa>
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8017aa6:	69bb      	ldr	r3, [r7, #24]
 8017aa8:	685b      	ldr	r3, [r3, #4]
 8017aaa:	4618      	mov	r0, r3
 8017aac:	f7f4 ff7d 	bl	800c9aa <lwip_htonl>
 8017ab0:	4602      	mov	r2, r0
 8017ab2:	69fb      	ldr	r3, [r7, #28]
 8017ab4:	681b      	ldr	r3, [r3, #0]
 8017ab6:	429a      	cmp	r2, r3
 8017ab8:	d00c      	beq.n	8017ad4 <dhcp_recv+0x140>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 8017aba:	69bb      	ldr	r3, [r7, #24]
 8017abc:	685b      	ldr	r3, [r3, #4]
 8017abe:	4618      	mov	r0, r3
 8017ac0:	f7f4 ff73 	bl	800c9aa <lwip_htonl>
 8017ac4:	4601      	mov	r1, r0
 8017ac6:	69fb      	ldr	r3, [r7, #28]
 8017ac8:	681b      	ldr	r3, [r3, #0]
 8017aca:	461a      	mov	r2, r3
 8017acc:	4848      	ldr	r0, [pc, #288]	; (8017bf0 <dhcp_recv+0x25c>)
 8017ace:	f008 fc85 	bl	80203dc <iprintf>
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
 8017ad2:	e078      	b.n	8017bc6 <dhcp_recv+0x232>
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8017ad4:	69f9      	ldr	r1, [r7, #28]
 8017ad6:	6878      	ldr	r0, [r7, #4]
 8017ad8:	f7ff fc3a 	bl	8017350 <dhcp_parse_reply>
 8017adc:	4603      	mov	r3, r0
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	d003      	beq.n	8017aea <dhcp_recv+0x156>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 8017ae2:	4844      	ldr	r0, [pc, #272]	; (8017bf4 <dhcp_recv+0x260>)
 8017ae4:	f008 fd16 	bl	8020514 <puts>
                ("problem unfolding DHCP message - too short on memory?\n"));
    goto free_pbuf_and_return;
 8017ae8:	e06d      	b.n	8017bc6 <dhcp_recv+0x232>
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
 8017aea:	4843      	ldr	r0, [pc, #268]	; (8017bf8 <dhcp_recv+0x264>)
 8017aec:	f008 fd12 	bl	8020514 <puts>
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8017af0:	4b42      	ldr	r3, [pc, #264]	; (8017bfc <dhcp_recv+0x268>)
 8017af2:	785b      	ldrb	r3, [r3, #1]
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	d103      	bne.n	8017b00 <dhcp_recv+0x16c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
 8017af8:	4841      	ldr	r0, [pc, #260]	; (8017c00 <dhcp_recv+0x26c>)
 8017afa:	f008 fd0b 	bl	8020514 <puts>
    goto free_pbuf_and_return;
 8017afe:	e062      	b.n	8017bc6 <dhcp_recv+0x232>
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	685b      	ldr	r3, [r3, #4]
 8017b04:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8017b06:	4b3f      	ldr	r3, [pc, #252]	; (8017c04 <dhcp_recv+0x270>)
 8017b08:	685b      	ldr	r3, [r3, #4]
 8017b0a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8017b0c:	7cfb      	ldrb	r3, [r7, #19]
 8017b0e:	2b05      	cmp	r3, #5
 8017b10:	d12d      	bne.n	8017b6e <dhcp_recv+0x1da>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
 8017b12:	483d      	ldr	r0, [pc, #244]	; (8017c08 <dhcp_recv+0x274>)
 8017b14:	f008 fcfe 	bl	8020514 <puts>
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8017b18:	69fb      	ldr	r3, [r7, #28]
 8017b1a:	795b      	ldrb	r3, [r3, #5]
 8017b1c:	2b01      	cmp	r3, #1
 8017b1e:	d112      	bne.n	8017b46 <dhcp_recv+0x1b2>
      dhcp_handle_ack(netif, msg_in);
 8017b20:	6979      	ldr	r1, [r7, #20]
 8017b22:	6a38      	ldr	r0, [r7, #32]
 8017b24:	f7fe fc24 	bl	8016370 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8017b28:	6a3b      	ldr	r3, [r7, #32]
 8017b2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8017b2e:	f003 0308 	and.w	r3, r3, #8
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d003      	beq.n	8017b3e <dhcp_recv+0x1aa>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8017b36:	6a38      	ldr	r0, [r7, #32]
 8017b38:	f7fe f8e0 	bl	8015cfc <dhcp_check>
 8017b3c:	e043      	b.n	8017bc6 <dhcp_recv+0x232>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8017b3e:	6a38      	ldr	r0, [r7, #32]
 8017b40:	f7fe ff14 	bl	801696c <dhcp_bind>
 8017b44:	e03f      	b.n	8017bc6 <dhcp_recv+0x232>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8017b46:	69fb      	ldr	r3, [r7, #28]
 8017b48:	795b      	ldrb	r3, [r3, #5]
 8017b4a:	2b03      	cmp	r3, #3
 8017b4c:	d007      	beq.n	8017b5e <dhcp_recv+0x1ca>
 8017b4e:	69fb      	ldr	r3, [r7, #28]
 8017b50:	795b      	ldrb	r3, [r3, #5]
 8017b52:	2b04      	cmp	r3, #4
 8017b54:	d003      	beq.n	8017b5e <dhcp_recv+0x1ca>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8017b56:	69fb      	ldr	r3, [r7, #28]
 8017b58:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8017b5a:	2b05      	cmp	r3, #5
 8017b5c:	d133      	bne.n	8017bc6 <dhcp_recv+0x232>
      dhcp_handle_ack(netif, msg_in);
 8017b5e:	6979      	ldr	r1, [r7, #20]
 8017b60:	6a38      	ldr	r0, [r7, #32]
 8017b62:	f7fe fc05 	bl	8016370 <dhcp_handle_ack>
      dhcp_bind(netif);
 8017b66:	6a38      	ldr	r0, [r7, #32]
 8017b68:	f7fe ff00 	bl	801696c <dhcp_bind>
 8017b6c:	e02b      	b.n	8017bc6 <dhcp_recv+0x232>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8017b6e:	7cfb      	ldrb	r3, [r7, #19]
 8017b70:	2b06      	cmp	r3, #6
 8017b72:	d116      	bne.n	8017ba2 <dhcp_recv+0x20e>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8017b74:	69fb      	ldr	r3, [r7, #28]
 8017b76:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8017b78:	2b03      	cmp	r3, #3
 8017b7a:	d00b      	beq.n	8017b94 <dhcp_recv+0x200>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8017b7c:	69fb      	ldr	r3, [r7, #28]
 8017b7e:	795b      	ldrb	r3, [r3, #5]
 8017b80:	2b01      	cmp	r3, #1
 8017b82:	d007      	beq.n	8017b94 <dhcp_recv+0x200>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8017b84:	69fb      	ldr	r3, [r7, #28]
 8017b86:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8017b88:	2b04      	cmp	r3, #4
 8017b8a:	d003      	beq.n	8017b94 <dhcp_recv+0x200>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8017b8c:	69fb      	ldr	r3, [r7, #28]
 8017b8e:	795b      	ldrb	r3, [r3, #5]
 8017b90:	2b05      	cmp	r3, #5
 8017b92:	d106      	bne.n	8017ba2 <dhcp_recv+0x20e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
 8017b94:	481d      	ldr	r0, [pc, #116]	; (8017c0c <dhcp_recv+0x278>)
 8017b96:	f008 fcbd 	bl	8020514 <puts>
    dhcp_handle_nak(netif);
 8017b9a:	6a38      	ldr	r0, [r7, #32]
 8017b9c:	f7fe f880 	bl	8015ca0 <dhcp_handle_nak>
 8017ba0:	e011      	b.n	8017bc6 <dhcp_recv+0x232>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8017ba2:	7cfb      	ldrb	r3, [r7, #19]
 8017ba4:	2b02      	cmp	r3, #2
 8017ba6:	d10d      	bne.n	8017bc4 <dhcp_recv+0x230>
 8017ba8:	69fb      	ldr	r3, [r7, #28]
 8017baa:	795b      	ldrb	r3, [r3, #5]
 8017bac:	2b06      	cmp	r3, #6
 8017bae:	d109      	bne.n	8017bc4 <dhcp_recv+0x230>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
 8017bb0:	4817      	ldr	r0, [pc, #92]	; (8017c10 <dhcp_recv+0x27c>)
 8017bb2:	f008 fcaf 	bl	8020514 <puts>
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8017bb6:	6979      	ldr	r1, [r7, #20]
 8017bb8:	6a38      	ldr	r0, [r7, #32]
 8017bba:	f7fe f8ef 	bl	8015d9c <dhcp_handle_offer>
 8017bbe:	e002      	b.n	8017bc6 <dhcp_recv+0x232>
    goto free_pbuf_and_return;
 8017bc0:	bf00      	nop
 8017bc2:	e000      	b.n	8017bc6 <dhcp_recv+0x232>
  }

free_pbuf_and_return:
 8017bc4:	bf00      	nop
  pbuf_free(p);
 8017bc6:	6878      	ldr	r0, [r7, #4]
 8017bc8:	f7f7 f862 	bl	800ec90 <pbuf_free>
}
 8017bcc:	bf00      	nop
 8017bce:	372c      	adds	r7, #44	; 0x2c
 8017bd0:	46bd      	mov	sp, r7
 8017bd2:	bd90      	pop	{r4, r7, pc}
 8017bd4:	200070d4 	.word	0x200070d4
 8017bd8:	08024f04 	.word	0x08024f04
 8017bdc:	08024f44 	.word	0x08024f44
 8017be0:	08024f58 	.word	0x08024f58
 8017be4:	08024f70 	.word	0x08024f70
 8017be8:	08024f98 	.word	0x08024f98
 8017bec:	08024fc0 	.word	0x08024fc0
 8017bf0:	08024ffc 	.word	0x08024ffc
 8017bf4:	0802503c 	.word	0x0802503c
 8017bf8:	08025074 	.word	0x08025074
 8017bfc:	2000a530 	.word	0x2000a530
 8017c00:	08025098 	.word	0x08025098
 8017c04:	2000a53c 	.word	0x2000a53c
 8017c08:	080250c4 	.word	0x080250c4
 8017c0c:	080250d8 	.word	0x080250d8
 8017c10:	080250ec 	.word	0x080250ec

08017c14 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8017c14:	b580      	push	{r7, lr}
 8017c16:	b088      	sub	sp, #32
 8017c18:	af00      	add	r7, sp, #0
 8017c1a:	60f8      	str	r0, [r7, #12]
 8017c1c:	60b9      	str	r1, [r7, #8]
 8017c1e:	603b      	str	r3, [r7, #0]
 8017c20:	4613      	mov	r3, r2
 8017c22:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8017c24:	68fb      	ldr	r3, [r7, #12]
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	d108      	bne.n	8017c3c <dhcp_create_msg+0x28>
 8017c2a:	4b64      	ldr	r3, [pc, #400]	; (8017dbc <dhcp_create_msg+0x1a8>)
 8017c2c:	f240 7269 	movw	r2, #1897	; 0x769
 8017c30:	4963      	ldr	r1, [pc, #396]	; (8017dc0 <dhcp_create_msg+0x1ac>)
 8017c32:	4864      	ldr	r0, [pc, #400]	; (8017dc4 <dhcp_create_msg+0x1b0>)
 8017c34:	f008 fbd2 	bl	80203dc <iprintf>
 8017c38:	2300      	movs	r3, #0
 8017c3a:	e0ba      	b.n	8017db2 <dhcp_create_msg+0x19e>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8017c3c:	68bb      	ldr	r3, [r7, #8]
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	d108      	bne.n	8017c54 <dhcp_create_msg+0x40>
 8017c42:	4b5e      	ldr	r3, [pc, #376]	; (8017dbc <dhcp_create_msg+0x1a8>)
 8017c44:	f240 726a 	movw	r2, #1898	; 0x76a
 8017c48:	495f      	ldr	r1, [pc, #380]	; (8017dc8 <dhcp_create_msg+0x1b4>)
 8017c4a:	485e      	ldr	r0, [pc, #376]	; (8017dc4 <dhcp_create_msg+0x1b0>)
 8017c4c:	f008 fbc6 	bl	80203dc <iprintf>
 8017c50:	2300      	movs	r3, #0
 8017c52:	e0ae      	b.n	8017db2 <dhcp_create_msg+0x19e>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8017c54:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017c58:	f44f 719a 	mov.w	r1, #308	; 0x134
 8017c5c:	2036      	movs	r0, #54	; 0x36
 8017c5e:	f7f6 fd33 	bl	800e6c8 <pbuf_alloc>
 8017c62:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8017c64:	69bb      	ldr	r3, [r7, #24]
 8017c66:	2b00      	cmp	r3, #0
 8017c68:	d104      	bne.n	8017c74 <dhcp_create_msg+0x60>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 8017c6a:	4858      	ldr	r0, [pc, #352]	; (8017dcc <dhcp_create_msg+0x1b8>)
 8017c6c:	f008 fc52 	bl	8020514 <puts>
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8017c70:	2300      	movs	r3, #0
 8017c72:	e09e      	b.n	8017db2 <dhcp_create_msg+0x19e>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8017c74:	69bb      	ldr	r3, [r7, #24]
 8017c76:	895b      	ldrh	r3, [r3, #10]
 8017c78:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8017c7c:	d206      	bcs.n	8017c8c <dhcp_create_msg+0x78>
 8017c7e:	4b4f      	ldr	r3, [pc, #316]	; (8017dbc <dhcp_create_msg+0x1a8>)
 8017c80:	f240 7271 	movw	r2, #1905	; 0x771
 8017c84:	4952      	ldr	r1, [pc, #328]	; (8017dd0 <dhcp_create_msg+0x1bc>)
 8017c86:	484f      	ldr	r0, [pc, #316]	; (8017dc4 <dhcp_create_msg+0x1b0>)
 8017c88:	f008 fba8 	bl	80203dc <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8017c8c:	79fb      	ldrb	r3, [r7, #7]
 8017c8e:	2b03      	cmp	r3, #3
 8017c90:	d103      	bne.n	8017c9a <dhcp_create_msg+0x86>
 8017c92:	68bb      	ldr	r3, [r7, #8]
 8017c94:	795b      	ldrb	r3, [r3, #5]
 8017c96:	2b03      	cmp	r3, #3
 8017c98:	d10d      	bne.n	8017cb6 <dhcp_create_msg+0xa2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8017c9a:	68bb      	ldr	r3, [r7, #8]
 8017c9c:	799b      	ldrb	r3, [r3, #6]
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	d105      	bne.n	8017cae <dhcp_create_msg+0x9a>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8017ca2:	f008 fc3f 	bl	8020524 <rand>
 8017ca6:	4603      	mov	r3, r0
 8017ca8:	461a      	mov	r2, r3
 8017caa:	4b4a      	ldr	r3, [pc, #296]	; (8017dd4 <dhcp_create_msg+0x1c0>)
 8017cac:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8017cae:	4b49      	ldr	r3, [pc, #292]	; (8017dd4 <dhcp_create_msg+0x1c0>)
 8017cb0:	681a      	ldr	r2, [r3, #0]
 8017cb2:	68bb      	ldr	r3, [r7, #8]
 8017cb4:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
 8017cb6:	4b47      	ldr	r3, [pc, #284]	; (8017dd4 <dhcp_create_msg+0x1c0>)
 8017cb8:	681b      	ldr	r3, [r3, #0]
 8017cba:	4619      	mov	r1, r3
 8017cbc:	4846      	ldr	r0, [pc, #280]	; (8017dd8 <dhcp_create_msg+0x1c4>)
 8017cbe:	f008 fb8d 	bl	80203dc <iprintf>
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8017cc2:	69bb      	ldr	r3, [r7, #24]
 8017cc4:	685b      	ldr	r3, [r3, #4]
 8017cc6:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8017cc8:	f44f 729a 	mov.w	r2, #308	; 0x134
 8017ccc:	2100      	movs	r1, #0
 8017cce:	6978      	ldr	r0, [r7, #20]
 8017cd0:	f008 fad2 	bl	8020278 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8017cd4:	697b      	ldr	r3, [r7, #20]
 8017cd6:	2201      	movs	r2, #1
 8017cd8:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8017cda:	697b      	ldr	r3, [r7, #20]
 8017cdc:	2201      	movs	r2, #1
 8017cde:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8017ce0:	68fb      	ldr	r3, [r7, #12]
 8017ce2:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8017ce6:	697b      	ldr	r3, [r7, #20]
 8017ce8:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8017cea:	68bb      	ldr	r3, [r7, #8]
 8017cec:	681b      	ldr	r3, [r3, #0]
 8017cee:	4618      	mov	r0, r3
 8017cf0:	f7f4 fe5b 	bl	800c9aa <lwip_htonl>
 8017cf4:	4602      	mov	r2, r0
 8017cf6:	697b      	ldr	r3, [r7, #20]
 8017cf8:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8017cfa:	79fb      	ldrb	r3, [r7, #7]
 8017cfc:	2b08      	cmp	r3, #8
 8017cfe:	d010      	beq.n	8017d22 <dhcp_create_msg+0x10e>
 8017d00:	79fb      	ldrb	r3, [r7, #7]
 8017d02:	2b04      	cmp	r3, #4
 8017d04:	d00d      	beq.n	8017d22 <dhcp_create_msg+0x10e>
 8017d06:	79fb      	ldrb	r3, [r7, #7]
 8017d08:	2b07      	cmp	r3, #7
 8017d0a:	d00a      	beq.n	8017d22 <dhcp_create_msg+0x10e>
 8017d0c:	79fb      	ldrb	r3, [r7, #7]
 8017d0e:	2b03      	cmp	r3, #3
 8017d10:	d10c      	bne.n	8017d2c <dhcp_create_msg+0x118>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8017d12:	68bb      	ldr	r3, [r7, #8]
 8017d14:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8017d16:	2b05      	cmp	r3, #5
 8017d18:	d003      	beq.n	8017d22 <dhcp_create_msg+0x10e>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8017d1a:	68bb      	ldr	r3, [r7, #8]
 8017d1c:	795b      	ldrb	r3, [r3, #5]
 8017d1e:	2b04      	cmp	r3, #4
 8017d20:	d104      	bne.n	8017d2c <dhcp_create_msg+0x118>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8017d22:	68fb      	ldr	r3, [r7, #12]
 8017d24:	3304      	adds	r3, #4
 8017d26:	681a      	ldr	r2, [r3, #0]
 8017d28:	697b      	ldr	r3, [r7, #20]
 8017d2a:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8017d2c:	2300      	movs	r3, #0
 8017d2e:	83fb      	strh	r3, [r7, #30]
 8017d30:	e00c      	b.n	8017d4c <dhcp_create_msg+0x138>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8017d32:	8bfa      	ldrh	r2, [r7, #30]
 8017d34:	8bfb      	ldrh	r3, [r7, #30]
 8017d36:	68f9      	ldr	r1, [r7, #12]
 8017d38:	440a      	add	r2, r1
 8017d3a:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
 8017d3e:	697a      	ldr	r2, [r7, #20]
 8017d40:	4413      	add	r3, r2
 8017d42:	460a      	mov	r2, r1
 8017d44:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8017d46:	8bfb      	ldrh	r3, [r7, #30]
 8017d48:	3301      	adds	r3, #1
 8017d4a:	83fb      	strh	r3, [r7, #30]
 8017d4c:	8bfb      	ldrh	r3, [r7, #30]
 8017d4e:	2b05      	cmp	r3, #5
 8017d50:	d9ef      	bls.n	8017d32 <dhcp_create_msg+0x11e>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8017d52:	697b      	ldr	r3, [r7, #20]
 8017d54:	2200      	movs	r2, #0
 8017d56:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8017d5a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8017d5e:	2200      	movs	r2, #0
 8017d60:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8017d64:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8017d68:	2200      	movs	r2, #0
 8017d6a:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8017d6e:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8017d72:	2200      	movs	r2, #0
 8017d74:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8017d78:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8017d7c:	697b      	ldr	r3, [r7, #20]
 8017d7e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017d82:	2301      	movs	r3, #1
 8017d84:	2235      	movs	r2, #53	; 0x35
 8017d86:	2000      	movs	r0, #0
 8017d88:	f7ff fa12 	bl	80171b0 <dhcp_option>
 8017d8c:	4603      	mov	r3, r0
 8017d8e:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8017d90:	697b      	ldr	r3, [r7, #20]
 8017d92:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017d96:	79fa      	ldrb	r2, [r7, #7]
 8017d98:	8a7b      	ldrh	r3, [r7, #18]
 8017d9a:	4618      	mov	r0, r3
 8017d9c:	f7ff fa3c 	bl	8017218 <dhcp_option_byte>
 8017da0:	4603      	mov	r3, r0
 8017da2:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8017da4:	683b      	ldr	r3, [r7, #0]
 8017da6:	2b00      	cmp	r3, #0
 8017da8:	d002      	beq.n	8017db0 <dhcp_create_msg+0x19c>
    *options_out_len = options_out_len_loc;
 8017daa:	683b      	ldr	r3, [r7, #0]
 8017dac:	8a7a      	ldrh	r2, [r7, #18]
 8017dae:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8017db0:	69bb      	ldr	r3, [r7, #24]
}
 8017db2:	4618      	mov	r0, r3
 8017db4:	3720      	adds	r7, #32
 8017db6:	46bd      	mov	sp, r7
 8017db8:	bd80      	pop	{r7, pc}
 8017dba:	bf00      	nop
 8017dbc:	080240f8 	.word	0x080240f8
 8017dc0:	08025120 	.word	0x08025120
 8017dc4:	08024158 	.word	0x08024158
 8017dc8:	08025140 	.word	0x08025140
 8017dcc:	08025160 	.word	0x08025160
 8017dd0:	0802518c 	.word	0x0802518c
 8017dd4:	20006890 	.word	0x20006890
 8017dd8:	080251cc 	.word	0x080251cc

08017ddc <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8017ddc:	b580      	push	{r7, lr}
 8017dde:	b084      	sub	sp, #16
 8017de0:	af00      	add	r7, sp, #0
 8017de2:	4603      	mov	r3, r0
 8017de4:	60b9      	str	r1, [r7, #8]
 8017de6:	607a      	str	r2, [r7, #4]
 8017de8:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8017dea:	89fb      	ldrh	r3, [r7, #14]
 8017dec:	1c5a      	adds	r2, r3, #1
 8017dee:	81fa      	strh	r2, [r7, #14]
 8017df0:	461a      	mov	r2, r3
 8017df2:	68bb      	ldr	r3, [r7, #8]
 8017df4:	4413      	add	r3, r2
 8017df6:	22ff      	movs	r2, #255	; 0xff
 8017df8:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8017dfa:	e007      	b.n	8017e0c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8017dfc:	89fb      	ldrh	r3, [r7, #14]
 8017dfe:	1c5a      	adds	r2, r3, #1
 8017e00:	81fa      	strh	r2, [r7, #14]
 8017e02:	461a      	mov	r2, r3
 8017e04:	68bb      	ldr	r3, [r7, #8]
 8017e06:	4413      	add	r3, r2
 8017e08:	2200      	movs	r2, #0
 8017e0a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8017e0c:	89fb      	ldrh	r3, [r7, #14]
 8017e0e:	2b43      	cmp	r3, #67	; 0x43
 8017e10:	d904      	bls.n	8017e1c <dhcp_option_trailer+0x40>
 8017e12:	89fb      	ldrh	r3, [r7, #14]
 8017e14:	f003 0303 	and.w	r3, r3, #3
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	d002      	beq.n	8017e22 <dhcp_option_trailer+0x46>
 8017e1c:	89fb      	ldrh	r3, [r7, #14]
 8017e1e:	2b43      	cmp	r3, #67	; 0x43
 8017e20:	d9ec      	bls.n	8017dfc <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8017e22:	89fb      	ldrh	r3, [r7, #14]
 8017e24:	33f0      	adds	r3, #240	; 0xf0
 8017e26:	b29b      	uxth	r3, r3
 8017e28:	4619      	mov	r1, r3
 8017e2a:	6878      	ldr	r0, [r7, #4]
 8017e2c:	f7f6 fdaa 	bl	800e984 <pbuf_realloc>
}
 8017e30:	bf00      	nop
 8017e32:	3710      	adds	r7, #16
 8017e34:	46bd      	mov	sp, r7
 8017e36:	bd80      	pop	{r7, pc}

08017e38 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8017e38:	b480      	push	{r7}
 8017e3a:	b085      	sub	sp, #20
 8017e3c:	af00      	add	r7, sp, #0
 8017e3e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	d017      	beq.n	8017e76 <dhcp_supplied_address+0x3e>
 8017e46:	687b      	ldr	r3, [r7, #4]
 8017e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	d013      	beq.n	8017e76 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e52:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8017e54:	68fb      	ldr	r3, [r7, #12]
 8017e56:	795b      	ldrb	r3, [r3, #5]
 8017e58:	2b0a      	cmp	r3, #10
 8017e5a:	d007      	beq.n	8017e6c <dhcp_supplied_address+0x34>
 8017e5c:	68fb      	ldr	r3, [r7, #12]
 8017e5e:	795b      	ldrb	r3, [r3, #5]
 8017e60:	2b05      	cmp	r3, #5
 8017e62:	d003      	beq.n	8017e6c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8017e64:	68fb      	ldr	r3, [r7, #12]
 8017e66:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8017e68:	2b04      	cmp	r3, #4
 8017e6a:	d101      	bne.n	8017e70 <dhcp_supplied_address+0x38>
 8017e6c:	2301      	movs	r3, #1
 8017e6e:	e000      	b.n	8017e72 <dhcp_supplied_address+0x3a>
 8017e70:	2300      	movs	r3, #0
 8017e72:	b2db      	uxtb	r3, r3
 8017e74:	e000      	b.n	8017e78 <dhcp_supplied_address+0x40>
  }
  return 0;
 8017e76:	2300      	movs	r3, #0
}
 8017e78:	4618      	mov	r0, r3
 8017e7a:	3714      	adds	r7, #20
 8017e7c:	46bd      	mov	sp, r7
 8017e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e82:	4770      	bx	lr

08017e84 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8017e84:	b580      	push	{r7, lr}
 8017e86:	b082      	sub	sp, #8
 8017e88:	af00      	add	r7, sp, #0
 8017e8a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8017e8c:	4933      	ldr	r1, [pc, #204]	; (8017f5c <etharp_free_entry+0xd8>)
 8017e8e:	687a      	ldr	r2, [r7, #4]
 8017e90:	4613      	mov	r3, r2
 8017e92:	005b      	lsls	r3, r3, #1
 8017e94:	4413      	add	r3, r2
 8017e96:	00db      	lsls	r3, r3, #3
 8017e98:	440b      	add	r3, r1
 8017e9a:	681b      	ldr	r3, [r3, #0]
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d023      	beq.n	8017ee8 <etharp_free_entry+0x64>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	b29b      	uxth	r3, r3
 8017ea4:	4618      	mov	r0, r3
 8017ea6:	492d      	ldr	r1, [pc, #180]	; (8017f5c <etharp_free_entry+0xd8>)
 8017ea8:	687a      	ldr	r2, [r7, #4]
 8017eaa:	4613      	mov	r3, r2
 8017eac:	005b      	lsls	r3, r3, #1
 8017eae:	4413      	add	r3, r2
 8017eb0:	00db      	lsls	r3, r3, #3
 8017eb2:	440b      	add	r3, r1
 8017eb4:	681b      	ldr	r3, [r3, #0]
 8017eb6:	461a      	mov	r2, r3
 8017eb8:	4601      	mov	r1, r0
 8017eba:	4829      	ldr	r0, [pc, #164]	; (8017f60 <etharp_free_entry+0xdc>)
 8017ebc:	f008 fa8e 	bl	80203dc <iprintf>
    free_etharp_q(arp_table[i].q);
 8017ec0:	4926      	ldr	r1, [pc, #152]	; (8017f5c <etharp_free_entry+0xd8>)
 8017ec2:	687a      	ldr	r2, [r7, #4]
 8017ec4:	4613      	mov	r3, r2
 8017ec6:	005b      	lsls	r3, r3, #1
 8017ec8:	4413      	add	r3, r2
 8017eca:	00db      	lsls	r3, r3, #3
 8017ecc:	440b      	add	r3, r1
 8017ece:	681b      	ldr	r3, [r3, #0]
 8017ed0:	4618      	mov	r0, r3
 8017ed2:	f7f6 fedd 	bl	800ec90 <pbuf_free>
    arp_table[i].q = NULL;
 8017ed6:	4921      	ldr	r1, [pc, #132]	; (8017f5c <etharp_free_entry+0xd8>)
 8017ed8:	687a      	ldr	r2, [r7, #4]
 8017eda:	4613      	mov	r3, r2
 8017edc:	005b      	lsls	r3, r3, #1
 8017ede:	4413      	add	r3, r2
 8017ee0:	00db      	lsls	r3, r3, #3
 8017ee2:	440b      	add	r3, r1
 8017ee4:	2200      	movs	r2, #0
 8017ee6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8017ee8:	491c      	ldr	r1, [pc, #112]	; (8017f5c <etharp_free_entry+0xd8>)
 8017eea:	687a      	ldr	r2, [r7, #4]
 8017eec:	4613      	mov	r3, r2
 8017eee:	005b      	lsls	r3, r3, #1
 8017ef0:	4413      	add	r3, r2
 8017ef2:	00db      	lsls	r3, r3, #3
 8017ef4:	440b      	add	r3, r1
 8017ef6:	3314      	adds	r3, #20
 8017ef8:	2200      	movs	r2, #0
 8017efa:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 8017efc:	4917      	ldr	r1, [pc, #92]	; (8017f5c <etharp_free_entry+0xd8>)
 8017efe:	687a      	ldr	r2, [r7, #4]
 8017f00:	4613      	mov	r3, r2
 8017f02:	005b      	lsls	r3, r3, #1
 8017f04:	4413      	add	r3, r2
 8017f06:	00db      	lsls	r3, r3, #3
 8017f08:	440b      	add	r3, r1
 8017f0a:	3312      	adds	r3, #18
 8017f0c:	2200      	movs	r2, #0
 8017f0e:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 8017f10:	4912      	ldr	r1, [pc, #72]	; (8017f5c <etharp_free_entry+0xd8>)
 8017f12:	687a      	ldr	r2, [r7, #4]
 8017f14:	4613      	mov	r3, r2
 8017f16:	005b      	lsls	r3, r3, #1
 8017f18:	4413      	add	r3, r2
 8017f1a:	00db      	lsls	r3, r3, #3
 8017f1c:	440b      	add	r3, r1
 8017f1e:	3308      	adds	r3, #8
 8017f20:	2200      	movs	r2, #0
 8017f22:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 8017f24:	490d      	ldr	r1, [pc, #52]	; (8017f5c <etharp_free_entry+0xd8>)
 8017f26:	687a      	ldr	r2, [r7, #4]
 8017f28:	4613      	mov	r3, r2
 8017f2a:	005b      	lsls	r3, r3, #1
 8017f2c:	4413      	add	r3, r2
 8017f2e:	00db      	lsls	r3, r3, #3
 8017f30:	440b      	add	r3, r1
 8017f32:	3304      	adds	r3, #4
 8017f34:	2200      	movs	r2, #0
 8017f36:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 8017f38:	4908      	ldr	r1, [pc, #32]	; (8017f5c <etharp_free_entry+0xd8>)
 8017f3a:	687a      	ldr	r2, [r7, #4]
 8017f3c:	4613      	mov	r3, r2
 8017f3e:	005b      	lsls	r3, r3, #1
 8017f40:	4413      	add	r3, r2
 8017f42:	00db      	lsls	r3, r3, #3
 8017f44:	440b      	add	r3, r1
 8017f46:	3308      	adds	r3, #8
 8017f48:	4a06      	ldr	r2, [pc, #24]	; (8017f64 <etharp_free_entry+0xe0>)
 8017f4a:	3304      	adds	r3, #4
 8017f4c:	6810      	ldr	r0, [r2, #0]
 8017f4e:	6018      	str	r0, [r3, #0]
 8017f50:	8892      	ldrh	r2, [r2, #4]
 8017f52:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 8017f54:	bf00      	nop
 8017f56:	3708      	adds	r7, #8
 8017f58:	46bd      	mov	sp, r7
 8017f5a:	bd80      	pop	{r7, pc}
 8017f5c:	20006894 	.word	0x20006894
 8017f60:	080251e8 	.word	0x080251e8
 8017f64:	08026c04 	.word	0x08026c04

08017f68 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8017f68:	b580      	push	{r7, lr}
 8017f6a:	b082      	sub	sp, #8
 8017f6c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
 8017f6e:	485c      	ldr	r0, [pc, #368]	; (80180e0 <etharp_tmr+0x178>)
 8017f70:	f008 fad0 	bl	8020514 <puts>
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017f74:	2300      	movs	r3, #0
 8017f76:	607b      	str	r3, [r7, #4]
 8017f78:	e0a9      	b.n	80180ce <etharp_tmr+0x166>
    u8_t state = arp_table[i].state;
 8017f7a:	495a      	ldr	r1, [pc, #360]	; (80180e4 <etharp_tmr+0x17c>)
 8017f7c:	687a      	ldr	r2, [r7, #4]
 8017f7e:	4613      	mov	r3, r2
 8017f80:	005b      	lsls	r3, r3, #1
 8017f82:	4413      	add	r3, r2
 8017f84:	00db      	lsls	r3, r3, #3
 8017f86:	440b      	add	r3, r1
 8017f88:	3314      	adds	r3, #20
 8017f8a:	781b      	ldrb	r3, [r3, #0]
 8017f8c:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8017f8e:	78fb      	ldrb	r3, [r7, #3]
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	f000 8099 	beq.w	80180c8 <etharp_tmr+0x160>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8017f96:	4953      	ldr	r1, [pc, #332]	; (80180e4 <etharp_tmr+0x17c>)
 8017f98:	687a      	ldr	r2, [r7, #4]
 8017f9a:	4613      	mov	r3, r2
 8017f9c:	005b      	lsls	r3, r3, #1
 8017f9e:	4413      	add	r3, r2
 8017fa0:	00db      	lsls	r3, r3, #3
 8017fa2:	440b      	add	r3, r1
 8017fa4:	3312      	adds	r3, #18
 8017fa6:	881b      	ldrh	r3, [r3, #0]
 8017fa8:	3301      	adds	r3, #1
 8017faa:	b298      	uxth	r0, r3
 8017fac:	494d      	ldr	r1, [pc, #308]	; (80180e4 <etharp_tmr+0x17c>)
 8017fae:	687a      	ldr	r2, [r7, #4]
 8017fb0:	4613      	mov	r3, r2
 8017fb2:	005b      	lsls	r3, r3, #1
 8017fb4:	4413      	add	r3, r2
 8017fb6:	00db      	lsls	r3, r3, #3
 8017fb8:	440b      	add	r3, r1
 8017fba:	3312      	adds	r3, #18
 8017fbc:	4602      	mov	r2, r0
 8017fbe:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017fc0:	4948      	ldr	r1, [pc, #288]	; (80180e4 <etharp_tmr+0x17c>)
 8017fc2:	687a      	ldr	r2, [r7, #4]
 8017fc4:	4613      	mov	r3, r2
 8017fc6:	005b      	lsls	r3, r3, #1
 8017fc8:	4413      	add	r3, r2
 8017fca:	00db      	lsls	r3, r3, #3
 8017fcc:	440b      	add	r3, r1
 8017fce:	3312      	adds	r3, #18
 8017fd0:	881b      	ldrh	r3, [r3, #0]
 8017fd2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8017fd6:	d215      	bcs.n	8018004 <etharp_tmr+0x9c>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8017fd8:	4942      	ldr	r1, [pc, #264]	; (80180e4 <etharp_tmr+0x17c>)
 8017fda:	687a      	ldr	r2, [r7, #4]
 8017fdc:	4613      	mov	r3, r2
 8017fde:	005b      	lsls	r3, r3, #1
 8017fe0:	4413      	add	r3, r2
 8017fe2:	00db      	lsls	r3, r3, #3
 8017fe4:	440b      	add	r3, r1
 8017fe6:	3314      	adds	r3, #20
 8017fe8:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017fea:	2b01      	cmp	r3, #1
 8017fec:	d121      	bne.n	8018032 <etharp_tmr+0xca>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8017fee:	493d      	ldr	r1, [pc, #244]	; (80180e4 <etharp_tmr+0x17c>)
 8017ff0:	687a      	ldr	r2, [r7, #4]
 8017ff2:	4613      	mov	r3, r2
 8017ff4:	005b      	lsls	r3, r3, #1
 8017ff6:	4413      	add	r3, r2
 8017ff8:	00db      	lsls	r3, r3, #3
 8017ffa:	440b      	add	r3, r1
 8017ffc:	3312      	adds	r3, #18
 8017ffe:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018000:	2b04      	cmp	r3, #4
 8018002:	d916      	bls.n	8018032 <etharp_tmr+0xca>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
 8018004:	4937      	ldr	r1, [pc, #220]	; (80180e4 <etharp_tmr+0x17c>)
 8018006:	687a      	ldr	r2, [r7, #4]
 8018008:	4613      	mov	r3, r2
 801800a:	005b      	lsls	r3, r3, #1
 801800c:	4413      	add	r3, r2
 801800e:	00db      	lsls	r3, r3, #3
 8018010:	440b      	add	r3, r1
 8018012:	3314      	adds	r3, #20
 8018014:	781b      	ldrb	r3, [r3, #0]
 8018016:	2b01      	cmp	r3, #1
 8018018:	d901      	bls.n	801801e <etharp_tmr+0xb6>
 801801a:	4b33      	ldr	r3, [pc, #204]	; (80180e8 <etharp_tmr+0x180>)
 801801c:	e000      	b.n	8018020 <etharp_tmr+0xb8>
 801801e:	4b33      	ldr	r3, [pc, #204]	; (80180ec <etharp_tmr+0x184>)
 8018020:	687a      	ldr	r2, [r7, #4]
 8018022:	4619      	mov	r1, r3
 8018024:	4832      	ldr	r0, [pc, #200]	; (80180f0 <etharp_tmr+0x188>)
 8018026:	f008 f9d9 	bl	80203dc <iprintf>
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801802a:	6878      	ldr	r0, [r7, #4]
 801802c:	f7ff ff2a 	bl	8017e84 <etharp_free_entry>
 8018030:	e04a      	b.n	80180c8 <etharp_tmr+0x160>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8018032:	492c      	ldr	r1, [pc, #176]	; (80180e4 <etharp_tmr+0x17c>)
 8018034:	687a      	ldr	r2, [r7, #4]
 8018036:	4613      	mov	r3, r2
 8018038:	005b      	lsls	r3, r3, #1
 801803a:	4413      	add	r3, r2
 801803c:	00db      	lsls	r3, r3, #3
 801803e:	440b      	add	r3, r1
 8018040:	3314      	adds	r3, #20
 8018042:	781b      	ldrb	r3, [r3, #0]
 8018044:	2b03      	cmp	r3, #3
 8018046:	d10a      	bne.n	801805e <etharp_tmr+0xf6>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8018048:	4926      	ldr	r1, [pc, #152]	; (80180e4 <etharp_tmr+0x17c>)
 801804a:	687a      	ldr	r2, [r7, #4]
 801804c:	4613      	mov	r3, r2
 801804e:	005b      	lsls	r3, r3, #1
 8018050:	4413      	add	r3, r2
 8018052:	00db      	lsls	r3, r3, #3
 8018054:	440b      	add	r3, r1
 8018056:	3314      	adds	r3, #20
 8018058:	2204      	movs	r2, #4
 801805a:	701a      	strb	r2, [r3, #0]
 801805c:	e034      	b.n	80180c8 <etharp_tmr+0x160>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801805e:	4921      	ldr	r1, [pc, #132]	; (80180e4 <etharp_tmr+0x17c>)
 8018060:	687a      	ldr	r2, [r7, #4]
 8018062:	4613      	mov	r3, r2
 8018064:	005b      	lsls	r3, r3, #1
 8018066:	4413      	add	r3, r2
 8018068:	00db      	lsls	r3, r3, #3
 801806a:	440b      	add	r3, r1
 801806c:	3314      	adds	r3, #20
 801806e:	781b      	ldrb	r3, [r3, #0]
 8018070:	2b04      	cmp	r3, #4
 8018072:	d10a      	bne.n	801808a <etharp_tmr+0x122>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8018074:	491b      	ldr	r1, [pc, #108]	; (80180e4 <etharp_tmr+0x17c>)
 8018076:	687a      	ldr	r2, [r7, #4]
 8018078:	4613      	mov	r3, r2
 801807a:	005b      	lsls	r3, r3, #1
 801807c:	4413      	add	r3, r2
 801807e:	00db      	lsls	r3, r3, #3
 8018080:	440b      	add	r3, r1
 8018082:	3314      	adds	r3, #20
 8018084:	2202      	movs	r2, #2
 8018086:	701a      	strb	r2, [r3, #0]
 8018088:	e01e      	b.n	80180c8 <etharp_tmr+0x160>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801808a:	4916      	ldr	r1, [pc, #88]	; (80180e4 <etharp_tmr+0x17c>)
 801808c:	687a      	ldr	r2, [r7, #4]
 801808e:	4613      	mov	r3, r2
 8018090:	005b      	lsls	r3, r3, #1
 8018092:	4413      	add	r3, r2
 8018094:	00db      	lsls	r3, r3, #3
 8018096:	440b      	add	r3, r1
 8018098:	3314      	adds	r3, #20
 801809a:	781b      	ldrb	r3, [r3, #0]
 801809c:	2b01      	cmp	r3, #1
 801809e:	d113      	bne.n	80180c8 <etharp_tmr+0x160>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80180a0:	4910      	ldr	r1, [pc, #64]	; (80180e4 <etharp_tmr+0x17c>)
 80180a2:	687a      	ldr	r2, [r7, #4]
 80180a4:	4613      	mov	r3, r2
 80180a6:	005b      	lsls	r3, r3, #1
 80180a8:	4413      	add	r3, r2
 80180aa:	00db      	lsls	r3, r3, #3
 80180ac:	440b      	add	r3, r1
 80180ae:	3308      	adds	r3, #8
 80180b0:	6818      	ldr	r0, [r3, #0]
 80180b2:	687a      	ldr	r2, [r7, #4]
 80180b4:	4613      	mov	r3, r2
 80180b6:	005b      	lsls	r3, r3, #1
 80180b8:	4413      	add	r3, r2
 80180ba:	00db      	lsls	r3, r3, #3
 80180bc:	4a09      	ldr	r2, [pc, #36]	; (80180e4 <etharp_tmr+0x17c>)
 80180be:	4413      	add	r3, r2
 80180c0:	3304      	adds	r3, #4
 80180c2:	4619      	mov	r1, r3
 80180c4:	f000 ffae 	bl	8019024 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	3301      	adds	r3, #1
 80180cc:	607b      	str	r3, [r7, #4]
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	2b09      	cmp	r3, #9
 80180d2:	f77f af52 	ble.w	8017f7a <etharp_tmr+0x12>
      }
    }
  }
}
 80180d6:	bf00      	nop
 80180d8:	bf00      	nop
 80180da:	3708      	adds	r7, #8
 80180dc:	46bd      	mov	sp, r7
 80180de:	bd80      	pop	{r7, pc}
 80180e0:	08025220 	.word	0x08025220
 80180e4:	20006894 	.word	0x20006894
 80180e8:	08025230 	.word	0x08025230
 80180ec:	08025238 	.word	0x08025238
 80180f0:	08025240 	.word	0x08025240

080180f4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80180f4:	b580      	push	{r7, lr}
 80180f6:	b08a      	sub	sp, #40	; 0x28
 80180f8:	af00      	add	r7, sp, #0
 80180fa:	60f8      	str	r0, [r7, #12]
 80180fc:	460b      	mov	r3, r1
 80180fe:	607a      	str	r2, [r7, #4]
 8018100:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8018102:	230a      	movs	r3, #10
 8018104:	84fb      	strh	r3, [r7, #38]	; 0x26
 8018106:	230a      	movs	r3, #10
 8018108:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801810a:	230a      	movs	r3, #10
 801810c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801810e:	2300      	movs	r3, #0
 8018110:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8018112:	230a      	movs	r3, #10
 8018114:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8018116:	2300      	movs	r3, #0
 8018118:	83bb      	strh	r3, [r7, #28]
 801811a:	2300      	movs	r3, #0
 801811c:	837b      	strh	r3, [r7, #26]
 801811e:	2300      	movs	r3, #0
 8018120:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018122:	2300      	movs	r3, #0
 8018124:	843b      	strh	r3, [r7, #32]
 8018126:	e0ba      	b.n	801829e <etharp_find_entry+0x1aa>
    u8_t state = arp_table[i].state;
 8018128:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801812c:	4993      	ldr	r1, [pc, #588]	; (801837c <etharp_find_entry+0x288>)
 801812e:	4613      	mov	r3, r2
 8018130:	005b      	lsls	r3, r3, #1
 8018132:	4413      	add	r3, r2
 8018134:	00db      	lsls	r3, r3, #3
 8018136:	440b      	add	r3, r1
 8018138:	3314      	adds	r3, #20
 801813a:	781b      	ldrb	r3, [r3, #0]
 801813c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801813e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018142:	2b0a      	cmp	r3, #10
 8018144:	d10b      	bne.n	801815e <etharp_find_entry+0x6a>
 8018146:	7dfb      	ldrb	r3, [r7, #23]
 8018148:	2b00      	cmp	r3, #0
 801814a:	d108      	bne.n	801815e <etharp_find_entry+0x6a>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
 801814c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018150:	4619      	mov	r1, r3
 8018152:	488b      	ldr	r0, [pc, #556]	; (8018380 <etharp_find_entry+0x28c>)
 8018154:	f008 f942 	bl	80203dc <iprintf>
      /* remember first empty entry */
      empty = i;
 8018158:	8c3b      	ldrh	r3, [r7, #32]
 801815a:	847b      	strh	r3, [r7, #34]	; 0x22
 801815c:	e09b      	b.n	8018296 <etharp_find_entry+0x1a2>
    } else if (state != ETHARP_STATE_EMPTY) {
 801815e:	7dfb      	ldrb	r3, [r7, #23]
 8018160:	2b00      	cmp	r3, #0
 8018162:	f000 8098 	beq.w	8018296 <etharp_find_entry+0x1a2>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8018166:	7dfb      	ldrb	r3, [r7, #23]
 8018168:	2b01      	cmp	r3, #1
 801816a:	d009      	beq.n	8018180 <etharp_find_entry+0x8c>
 801816c:	7dfb      	ldrb	r3, [r7, #23]
 801816e:	2b01      	cmp	r3, #1
 8018170:	d806      	bhi.n	8018180 <etharp_find_entry+0x8c>
 8018172:	4b84      	ldr	r3, [pc, #528]	; (8018384 <etharp_find_entry+0x290>)
 8018174:	f240 1223 	movw	r2, #291	; 0x123
 8018178:	4983      	ldr	r1, [pc, #524]	; (8018388 <etharp_find_entry+0x294>)
 801817a:	4884      	ldr	r0, [pc, #528]	; (801838c <etharp_find_entry+0x298>)
 801817c:	f008 f92e 	bl	80203dc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8018180:	68fb      	ldr	r3, [r7, #12]
 8018182:	2b00      	cmp	r3, #0
 8018184:	d026      	beq.n	80181d4 <etharp_find_entry+0xe0>
 8018186:	68fb      	ldr	r3, [r7, #12]
 8018188:	6819      	ldr	r1, [r3, #0]
 801818a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801818e:	487b      	ldr	r0, [pc, #492]	; (801837c <etharp_find_entry+0x288>)
 8018190:	4613      	mov	r3, r2
 8018192:	005b      	lsls	r3, r3, #1
 8018194:	4413      	add	r3, r2
 8018196:	00db      	lsls	r3, r3, #3
 8018198:	4403      	add	r3, r0
 801819a:	3304      	adds	r3, #4
 801819c:	681b      	ldr	r3, [r3, #0]
 801819e:	4299      	cmp	r1, r3
 80181a0:	d118      	bne.n	80181d4 <etharp_find_entry+0xe0>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	2b00      	cmp	r3, #0
 80181a6:	d00c      	beq.n	80181c2 <etharp_find_entry+0xce>
 80181a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80181ac:	4973      	ldr	r1, [pc, #460]	; (801837c <etharp_find_entry+0x288>)
 80181ae:	4613      	mov	r3, r2
 80181b0:	005b      	lsls	r3, r3, #1
 80181b2:	4413      	add	r3, r2
 80181b4:	00db      	lsls	r3, r3, #3
 80181b6:	440b      	add	r3, r1
 80181b8:	3308      	adds	r3, #8
 80181ba:	681b      	ldr	r3, [r3, #0]
 80181bc:	687a      	ldr	r2, [r7, #4]
 80181be:	429a      	cmp	r2, r3
 80181c0:	d108      	bne.n	80181d4 <etharp_find_entry+0xe0>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
 80181c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80181c6:	4619      	mov	r1, r3
 80181c8:	4871      	ldr	r0, [pc, #452]	; (8018390 <etharp_find_entry+0x29c>)
 80181ca:	f008 f907 	bl	80203dc <iprintf>
        /* found exact IP address match, simply bail out */
        return i;
 80181ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80181d2:	e142      	b.n	801845a <etharp_find_entry+0x366>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80181d4:	7dfb      	ldrb	r3, [r7, #23]
 80181d6:	2b01      	cmp	r3, #1
 80181d8:	d140      	bne.n	801825c <etharp_find_entry+0x168>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80181da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80181de:	4967      	ldr	r1, [pc, #412]	; (801837c <etharp_find_entry+0x288>)
 80181e0:	4613      	mov	r3, r2
 80181e2:	005b      	lsls	r3, r3, #1
 80181e4:	4413      	add	r3, r2
 80181e6:	00db      	lsls	r3, r3, #3
 80181e8:	440b      	add	r3, r1
 80181ea:	681b      	ldr	r3, [r3, #0]
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	d01a      	beq.n	8018226 <etharp_find_entry+0x132>
          if (arp_table[i].ctime >= age_queue) {
 80181f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80181f4:	4961      	ldr	r1, [pc, #388]	; (801837c <etharp_find_entry+0x288>)
 80181f6:	4613      	mov	r3, r2
 80181f8:	005b      	lsls	r3, r3, #1
 80181fa:	4413      	add	r3, r2
 80181fc:	00db      	lsls	r3, r3, #3
 80181fe:	440b      	add	r3, r1
 8018200:	3312      	adds	r3, #18
 8018202:	881b      	ldrh	r3, [r3, #0]
 8018204:	8bba      	ldrh	r2, [r7, #28]
 8018206:	429a      	cmp	r2, r3
 8018208:	d845      	bhi.n	8018296 <etharp_find_entry+0x1a2>
            old_queue = i;
 801820a:	8c3b      	ldrh	r3, [r7, #32]
 801820c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801820e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018212:	495a      	ldr	r1, [pc, #360]	; (801837c <etharp_find_entry+0x288>)
 8018214:	4613      	mov	r3, r2
 8018216:	005b      	lsls	r3, r3, #1
 8018218:	4413      	add	r3, r2
 801821a:	00db      	lsls	r3, r3, #3
 801821c:	440b      	add	r3, r1
 801821e:	3312      	adds	r3, #18
 8018220:	881b      	ldrh	r3, [r3, #0]
 8018222:	83bb      	strh	r3, [r7, #28]
 8018224:	e037      	b.n	8018296 <etharp_find_entry+0x1a2>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8018226:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801822a:	4954      	ldr	r1, [pc, #336]	; (801837c <etharp_find_entry+0x288>)
 801822c:	4613      	mov	r3, r2
 801822e:	005b      	lsls	r3, r3, #1
 8018230:	4413      	add	r3, r2
 8018232:	00db      	lsls	r3, r3, #3
 8018234:	440b      	add	r3, r1
 8018236:	3312      	adds	r3, #18
 8018238:	881b      	ldrh	r3, [r3, #0]
 801823a:	8b7a      	ldrh	r2, [r7, #26]
 801823c:	429a      	cmp	r2, r3
 801823e:	d82a      	bhi.n	8018296 <etharp_find_entry+0x1a2>
            old_pending = i;
 8018240:	8c3b      	ldrh	r3, [r7, #32]
 8018242:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8018244:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018248:	494c      	ldr	r1, [pc, #304]	; (801837c <etharp_find_entry+0x288>)
 801824a:	4613      	mov	r3, r2
 801824c:	005b      	lsls	r3, r3, #1
 801824e:	4413      	add	r3, r2
 8018250:	00db      	lsls	r3, r3, #3
 8018252:	440b      	add	r3, r1
 8018254:	3312      	adds	r3, #18
 8018256:	881b      	ldrh	r3, [r3, #0]
 8018258:	837b      	strh	r3, [r7, #26]
 801825a:	e01c      	b.n	8018296 <etharp_find_entry+0x1a2>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801825c:	7dfb      	ldrb	r3, [r7, #23]
 801825e:	2b01      	cmp	r3, #1
 8018260:	d919      	bls.n	8018296 <etharp_find_entry+0x1a2>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8018262:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018266:	4945      	ldr	r1, [pc, #276]	; (801837c <etharp_find_entry+0x288>)
 8018268:	4613      	mov	r3, r2
 801826a:	005b      	lsls	r3, r3, #1
 801826c:	4413      	add	r3, r2
 801826e:	00db      	lsls	r3, r3, #3
 8018270:	440b      	add	r3, r1
 8018272:	3312      	adds	r3, #18
 8018274:	881b      	ldrh	r3, [r3, #0]
 8018276:	8b3a      	ldrh	r2, [r7, #24]
 8018278:	429a      	cmp	r2, r3
 801827a:	d80c      	bhi.n	8018296 <etharp_find_entry+0x1a2>
            old_stable = i;
 801827c:	8c3b      	ldrh	r3, [r7, #32]
 801827e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8018280:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018284:	493d      	ldr	r1, [pc, #244]	; (801837c <etharp_find_entry+0x288>)
 8018286:	4613      	mov	r3, r2
 8018288:	005b      	lsls	r3, r3, #1
 801828a:	4413      	add	r3, r2
 801828c:	00db      	lsls	r3, r3, #3
 801828e:	440b      	add	r3, r1
 8018290:	3312      	adds	r3, #18
 8018292:	881b      	ldrh	r3, [r3, #0]
 8018294:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018296:	8c3b      	ldrh	r3, [r7, #32]
 8018298:	3301      	adds	r3, #1
 801829a:	b29b      	uxth	r3, r3
 801829c:	843b      	strh	r3, [r7, #32]
 801829e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80182a2:	2b09      	cmp	r3, #9
 80182a4:	f77f af40 	ble.w	8018128 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80182a8:	7afb      	ldrb	r3, [r7, #11]
 80182aa:	f003 0302 	and.w	r3, r3, #2
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	d108      	bne.n	80182c4 <etharp_find_entry+0x1d0>
 80182b2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80182b6:	2b0a      	cmp	r3, #10
 80182b8:	d10a      	bne.n	80182d0 <etharp_find_entry+0x1dc>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80182ba:	7afb      	ldrb	r3, [r7, #11]
 80182bc:	f003 0301 	and.w	r3, r3, #1
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d105      	bne.n	80182d0 <etharp_find_entry+0x1dc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
 80182c4:	4833      	ldr	r0, [pc, #204]	; (8018394 <etharp_find_entry+0x2a0>)
 80182c6:	f008 f925 	bl	8020514 <puts>
    return (s16_t)ERR_MEM;
 80182ca:	f04f 33ff 	mov.w	r3, #4294967295
 80182ce:	e0c4      	b.n	801845a <etharp_find_entry+0x366>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80182d0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80182d4:	2b09      	cmp	r3, #9
 80182d6:	dc08      	bgt.n	80182ea <etharp_find_entry+0x1f6>
    i = empty;
 80182d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80182da:	843b      	strh	r3, [r7, #32]
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
 80182dc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80182e0:	4619      	mov	r1, r3
 80182e2:	482d      	ldr	r0, [pc, #180]	; (8018398 <etharp_find_entry+0x2a4>)
 80182e4:	f008 f87a 	bl	80203dc <iprintf>
 80182e8:	e072      	b.n	80183d0 <etharp_find_entry+0x2dc>
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80182ea:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80182ee:	2b09      	cmp	r3, #9
 80182f0:	dc1a      	bgt.n	8018328 <etharp_find_entry+0x234>
      /* recycle oldest stable*/
      i = old_stable;
 80182f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80182f4:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
 80182f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80182fa:	4619      	mov	r1, r3
 80182fc:	4827      	ldr	r0, [pc, #156]	; (801839c <etharp_find_entry+0x2a8>)
 80182fe:	f008 f86d 	bl	80203dc <iprintf>
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8018302:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018306:	491d      	ldr	r1, [pc, #116]	; (801837c <etharp_find_entry+0x288>)
 8018308:	4613      	mov	r3, r2
 801830a:	005b      	lsls	r3, r3, #1
 801830c:	4413      	add	r3, r2
 801830e:	00db      	lsls	r3, r3, #3
 8018310:	440b      	add	r3, r1
 8018312:	681b      	ldr	r3, [r3, #0]
 8018314:	2b00      	cmp	r3, #0
 8018316:	d04b      	beq.n	80183b0 <etharp_find_entry+0x2bc>
 8018318:	4b1a      	ldr	r3, [pc, #104]	; (8018384 <etharp_find_entry+0x290>)
 801831a:	f240 126d 	movw	r2, #365	; 0x16d
 801831e:	4920      	ldr	r1, [pc, #128]	; (80183a0 <etharp_find_entry+0x2ac>)
 8018320:	481a      	ldr	r0, [pc, #104]	; (801838c <etharp_find_entry+0x298>)
 8018322:	f008 f85b 	bl	80203dc <iprintf>
 8018326:	e043      	b.n	80183b0 <etharp_find_entry+0x2bc>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8018328:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801832c:	2b09      	cmp	r3, #9
 801832e:	dc08      	bgt.n	8018342 <etharp_find_entry+0x24e>
      /* recycle oldest pending */
      i = old_pending;
 8018330:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018332:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
 8018334:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018338:	4619      	mov	r1, r3
 801833a:	481a      	ldr	r0, [pc, #104]	; (80183a4 <etharp_find_entry+0x2b0>)
 801833c:	f008 f84e 	bl	80203dc <iprintf>
 8018340:	e036      	b.n	80183b0 <etharp_find_entry+0x2bc>
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8018342:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8018346:	2b09      	cmp	r3, #9
 8018348:	dc11      	bgt.n	801836e <etharp_find_entry+0x27a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801834a:	8bfb      	ldrh	r3, [r7, #30]
 801834c:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
 801834e:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
 8018352:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018356:	4809      	ldr	r0, [pc, #36]	; (801837c <etharp_find_entry+0x288>)
 8018358:	4613      	mov	r3, r2
 801835a:	005b      	lsls	r3, r3, #1
 801835c:	4413      	add	r3, r2
 801835e:	00db      	lsls	r3, r3, #3
 8018360:	4403      	add	r3, r0
 8018362:	681b      	ldr	r3, [r3, #0]
 8018364:	461a      	mov	r2, r3
 8018366:	4810      	ldr	r0, [pc, #64]	; (80183a8 <etharp_find_entry+0x2b4>)
 8018368:	f008 f838 	bl	80203dc <iprintf>
 801836c:	e020      	b.n	80183b0 <etharp_find_entry+0x2bc>
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
 801836e:	480f      	ldr	r0, [pc, #60]	; (80183ac <etharp_find_entry+0x2b8>)
 8018370:	f008 f8d0 	bl	8020514 <puts>
      return (s16_t)ERR_MEM;
 8018374:	f04f 33ff 	mov.w	r3, #4294967295
 8018378:	e06f      	b.n	801845a <etharp_find_entry+0x366>
 801837a:	bf00      	nop
 801837c:	20006894 	.word	0x20006894
 8018380:	08025264 	.word	0x08025264
 8018384:	08025290 	.word	0x08025290
 8018388:	080252c8 	.word	0x080252c8
 801838c:	08025308 	.word	0x08025308
 8018390:	08025330 	.word	0x08025330
 8018394:	0802535c 	.word	0x0802535c
 8018398:	080253a0 	.word	0x080253a0
 801839c:	080253d0 	.word	0x080253d0
 80183a0:	08025408 	.word	0x08025408
 80183a4:	08025420 	.word	0x08025420
 80183a8:	08025468 	.word	0x08025468
 80183ac:	080254b8 	.word	0x080254b8
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80183b0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80183b4:	2b09      	cmp	r3, #9
 80183b6:	dd06      	ble.n	80183c6 <etharp_find_entry+0x2d2>
 80183b8:	4b2a      	ldr	r3, [pc, #168]	; (8018464 <etharp_find_entry+0x370>)
 80183ba:	f240 127f 	movw	r2, #383	; 0x17f
 80183be:	492a      	ldr	r1, [pc, #168]	; (8018468 <etharp_find_entry+0x374>)
 80183c0:	482a      	ldr	r0, [pc, #168]	; (801846c <etharp_find_entry+0x378>)
 80183c2:	f008 f80b 	bl	80203dc <iprintf>
    etharp_free_entry(i);
 80183c6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80183ca:	4618      	mov	r0, r3
 80183cc:	f7ff fd5a 	bl	8017e84 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80183d0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80183d4:	2b09      	cmp	r3, #9
 80183d6:	dd06      	ble.n	80183e6 <etharp_find_entry+0x2f2>
 80183d8:	4b22      	ldr	r3, [pc, #136]	; (8018464 <etharp_find_entry+0x370>)
 80183da:	f240 1283 	movw	r2, #387	; 0x183
 80183de:	4922      	ldr	r1, [pc, #136]	; (8018468 <etharp_find_entry+0x374>)
 80183e0:	4822      	ldr	r0, [pc, #136]	; (801846c <etharp_find_entry+0x378>)
 80183e2:	f007 fffb 	bl	80203dc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80183e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80183ea:	4921      	ldr	r1, [pc, #132]	; (8018470 <etharp_find_entry+0x37c>)
 80183ec:	4613      	mov	r3, r2
 80183ee:	005b      	lsls	r3, r3, #1
 80183f0:	4413      	add	r3, r2
 80183f2:	00db      	lsls	r3, r3, #3
 80183f4:	440b      	add	r3, r1
 80183f6:	3314      	adds	r3, #20
 80183f8:	781b      	ldrb	r3, [r3, #0]
 80183fa:	2b00      	cmp	r3, #0
 80183fc:	d006      	beq.n	801840c <etharp_find_entry+0x318>
 80183fe:	4b19      	ldr	r3, [pc, #100]	; (8018464 <etharp_find_entry+0x370>)
 8018400:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8018404:	491b      	ldr	r1, [pc, #108]	; (8018474 <etharp_find_entry+0x380>)
 8018406:	4819      	ldr	r0, [pc, #100]	; (801846c <etharp_find_entry+0x378>)
 8018408:	f007 ffe8 	bl	80203dc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801840c:	68fb      	ldr	r3, [r7, #12]
 801840e:	2b00      	cmp	r3, #0
 8018410:	d00b      	beq.n	801842a <etharp_find_entry+0x336>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8018412:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018416:	68fb      	ldr	r3, [r7, #12]
 8018418:	6819      	ldr	r1, [r3, #0]
 801841a:	4815      	ldr	r0, [pc, #84]	; (8018470 <etharp_find_entry+0x37c>)
 801841c:	4613      	mov	r3, r2
 801841e:	005b      	lsls	r3, r3, #1
 8018420:	4413      	add	r3, r2
 8018422:	00db      	lsls	r3, r3, #3
 8018424:	4403      	add	r3, r0
 8018426:	3304      	adds	r3, #4
 8018428:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801842a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801842e:	4910      	ldr	r1, [pc, #64]	; (8018470 <etharp_find_entry+0x37c>)
 8018430:	4613      	mov	r3, r2
 8018432:	005b      	lsls	r3, r3, #1
 8018434:	4413      	add	r3, r2
 8018436:	00db      	lsls	r3, r3, #3
 8018438:	440b      	add	r3, r1
 801843a:	3312      	adds	r3, #18
 801843c:	2200      	movs	r2, #0
 801843e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8018440:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018444:	490a      	ldr	r1, [pc, #40]	; (8018470 <etharp_find_entry+0x37c>)
 8018446:	4613      	mov	r3, r2
 8018448:	005b      	lsls	r3, r3, #1
 801844a:	4413      	add	r3, r2
 801844c:	00db      	lsls	r3, r3, #3
 801844e:	440b      	add	r3, r1
 8018450:	3308      	adds	r3, #8
 8018452:	687a      	ldr	r2, [r7, #4]
 8018454:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8018456:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801845a:	4618      	mov	r0, r3
 801845c:	3728      	adds	r7, #40	; 0x28
 801845e:	46bd      	mov	sp, r7
 8018460:	bd80      	pop	{r7, pc}
 8018462:	bf00      	nop
 8018464:	08025290 	.word	0x08025290
 8018468:	080254f0 	.word	0x080254f0
 801846c:	08025308 	.word	0x08025308
 8018470:	20006894 	.word	0x20006894
 8018474:	08025504 	.word	0x08025504

08018478 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8018478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801847c:	b08e      	sub	sp, #56	; 0x38
 801847e:	af08      	add	r7, sp, #32
 8018480:	60f8      	str	r0, [r7, #12]
 8018482:	60b9      	str	r1, [r7, #8]
 8018484:	607a      	str	r2, [r7, #4]
 8018486:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8018488:	68fb      	ldr	r3, [r7, #12]
 801848a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801848e:	2b06      	cmp	r3, #6
 8018490:	d006      	beq.n	80184a0 <etharp_update_arp_entry+0x28>
 8018492:	4b64      	ldr	r3, [pc, #400]	; (8018624 <etharp_update_arp_entry+0x1ac>)
 8018494:	f240 12a9 	movw	r2, #425	; 0x1a9
 8018498:	4963      	ldr	r1, [pc, #396]	; (8018628 <etharp_update_arp_entry+0x1b0>)
 801849a:	4864      	ldr	r0, [pc, #400]	; (801862c <etharp_update_arp_entry+0x1b4>)
 801849c:	f007 ff9e 	bl	80203dc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
 80184a0:	68bb      	ldr	r3, [r7, #8]
 80184a2:	781b      	ldrb	r3, [r3, #0]
 80184a4:	469c      	mov	ip, r3
 80184a6:	68bb      	ldr	r3, [r7, #8]
 80184a8:	3301      	adds	r3, #1
 80184aa:	781b      	ldrb	r3, [r3, #0]
 80184ac:	469e      	mov	lr, r3
 80184ae:	68bb      	ldr	r3, [r7, #8]
 80184b0:	3302      	adds	r3, #2
 80184b2:	781b      	ldrb	r3, [r3, #0]
 80184b4:	4698      	mov	r8, r3
 80184b6:	68bb      	ldr	r3, [r7, #8]
 80184b8:	3303      	adds	r3, #3
 80184ba:	781b      	ldrb	r3, [r3, #0]
 80184bc:	461a      	mov	r2, r3
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	781b      	ldrb	r3, [r3, #0]
 80184c2:	4619      	mov	r1, r3
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	785b      	ldrb	r3, [r3, #1]
 80184c8:	4618      	mov	r0, r3
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	789b      	ldrb	r3, [r3, #2]
 80184ce:	461c      	mov	r4, r3
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	78db      	ldrb	r3, [r3, #3]
 80184d4:	461d      	mov	r5, r3
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	791b      	ldrb	r3, [r3, #4]
 80184da:	461e      	mov	r6, r3
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	795b      	ldrb	r3, [r3, #5]
 80184e0:	9306      	str	r3, [sp, #24]
 80184e2:	9605      	str	r6, [sp, #20]
 80184e4:	9504      	str	r5, [sp, #16]
 80184e6:	9403      	str	r4, [sp, #12]
 80184e8:	9002      	str	r0, [sp, #8]
 80184ea:	9101      	str	r1, [sp, #4]
 80184ec:	9200      	str	r2, [sp, #0]
 80184ee:	4643      	mov	r3, r8
 80184f0:	4672      	mov	r2, lr
 80184f2:	4661      	mov	r1, ip
 80184f4:	484e      	ldr	r0, [pc, #312]	; (8018630 <etharp_update_arp_entry+0x1b8>)
 80184f6:	f007 ff71 	bl	80203dc <iprintf>
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80184fa:	68bb      	ldr	r3, [r7, #8]
 80184fc:	2b00      	cmp	r3, #0
 80184fe:	d012      	beq.n	8018526 <etharp_update_arp_entry+0xae>
 8018500:	68bb      	ldr	r3, [r7, #8]
 8018502:	681b      	ldr	r3, [r3, #0]
 8018504:	2b00      	cmp	r3, #0
 8018506:	d00e      	beq.n	8018526 <etharp_update_arp_entry+0xae>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018508:	68bb      	ldr	r3, [r7, #8]
 801850a:	681b      	ldr	r3, [r3, #0]
 801850c:	68f9      	ldr	r1, [r7, #12]
 801850e:	4618      	mov	r0, r3
 8018510:	f002 fa82 	bl	801aa18 <ip4_addr_isbroadcast_u32>
 8018514:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8018516:	2b00      	cmp	r3, #0
 8018518:	d105      	bne.n	8018526 <etharp_update_arp_entry+0xae>
      ip4_addr_ismulticast(ipaddr)) {
 801851a:	68bb      	ldr	r3, [r7, #8]
 801851c:	681b      	ldr	r3, [r3, #0]
 801851e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018522:	2be0      	cmp	r3, #224	; 0xe0
 8018524:	d105      	bne.n	8018532 <etharp_update_arp_entry+0xba>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
 8018526:	4843      	ldr	r0, [pc, #268]	; (8018634 <etharp_update_arp_entry+0x1bc>)
 8018528:	f007 fff4 	bl	8020514 <puts>
    return ERR_ARG;
 801852c:	f06f 030f 	mvn.w	r3, #15
 8018530:	e072      	b.n	8018618 <etharp_update_arp_entry+0x1a0>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8018532:	78fb      	ldrb	r3, [r7, #3]
 8018534:	68fa      	ldr	r2, [r7, #12]
 8018536:	4619      	mov	r1, r3
 8018538:	68b8      	ldr	r0, [r7, #8]
 801853a:	f7ff fddb 	bl	80180f4 <etharp_find_entry>
 801853e:	4603      	mov	r3, r0
 8018540:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8018542:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018546:	2b00      	cmp	r3, #0
 8018548:	da02      	bge.n	8018550 <etharp_update_arp_entry+0xd8>
    return (err_t)i;
 801854a:	8afb      	ldrh	r3, [r7, #22]
 801854c:	b25b      	sxtb	r3, r3
 801854e:	e063      	b.n	8018618 <etharp_update_arp_entry+0x1a0>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8018550:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018554:	4938      	ldr	r1, [pc, #224]	; (8018638 <etharp_update_arp_entry+0x1c0>)
 8018556:	4613      	mov	r3, r2
 8018558:	005b      	lsls	r3, r3, #1
 801855a:	4413      	add	r3, r2
 801855c:	00db      	lsls	r3, r3, #3
 801855e:	440b      	add	r3, r1
 8018560:	3314      	adds	r3, #20
 8018562:	2202      	movs	r2, #2
 8018564:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8018566:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801856a:	4933      	ldr	r1, [pc, #204]	; (8018638 <etharp_update_arp_entry+0x1c0>)
 801856c:	4613      	mov	r3, r2
 801856e:	005b      	lsls	r3, r3, #1
 8018570:	4413      	add	r3, r2
 8018572:	00db      	lsls	r3, r3, #3
 8018574:	440b      	add	r3, r1
 8018576:	3308      	adds	r3, #8
 8018578:	68fa      	ldr	r2, [r7, #12]
 801857a:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
 801857c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018580:	4619      	mov	r1, r3
 8018582:	482e      	ldr	r0, [pc, #184]	; (801863c <etharp_update_arp_entry+0x1c4>)
 8018584:	f007 ff2a 	bl	80203dc <iprintf>
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8018588:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801858c:	4613      	mov	r3, r2
 801858e:	005b      	lsls	r3, r3, #1
 8018590:	4413      	add	r3, r2
 8018592:	00db      	lsls	r3, r3, #3
 8018594:	3308      	adds	r3, #8
 8018596:	4a28      	ldr	r2, [pc, #160]	; (8018638 <etharp_update_arp_entry+0x1c0>)
 8018598:	4413      	add	r3, r2
 801859a:	3304      	adds	r3, #4
 801859c:	2206      	movs	r2, #6
 801859e:	6879      	ldr	r1, [r7, #4]
 80185a0:	4618      	mov	r0, r3
 80185a2:	f007 fe5b 	bl	802025c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80185a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80185aa:	4923      	ldr	r1, [pc, #140]	; (8018638 <etharp_update_arp_entry+0x1c0>)
 80185ac:	4613      	mov	r3, r2
 80185ae:	005b      	lsls	r3, r3, #1
 80185b0:	4413      	add	r3, r2
 80185b2:	00db      	lsls	r3, r3, #3
 80185b4:	440b      	add	r3, r1
 80185b6:	3312      	adds	r3, #18
 80185b8:	2200      	movs	r2, #0
 80185ba:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80185bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80185c0:	491d      	ldr	r1, [pc, #116]	; (8018638 <etharp_update_arp_entry+0x1c0>)
 80185c2:	4613      	mov	r3, r2
 80185c4:	005b      	lsls	r3, r3, #1
 80185c6:	4413      	add	r3, r2
 80185c8:	00db      	lsls	r3, r3, #3
 80185ca:	440b      	add	r3, r1
 80185cc:	681b      	ldr	r3, [r3, #0]
 80185ce:	2b00      	cmp	r3, #0
 80185d0:	d021      	beq.n	8018616 <etharp_update_arp_entry+0x19e>
    struct pbuf *p = arp_table[i].q;
 80185d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80185d6:	4918      	ldr	r1, [pc, #96]	; (8018638 <etharp_update_arp_entry+0x1c0>)
 80185d8:	4613      	mov	r3, r2
 80185da:	005b      	lsls	r3, r3, #1
 80185dc:	4413      	add	r3, r2
 80185de:	00db      	lsls	r3, r3, #3
 80185e0:	440b      	add	r3, r1
 80185e2:	681b      	ldr	r3, [r3, #0]
 80185e4:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80185e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80185ea:	4913      	ldr	r1, [pc, #76]	; (8018638 <etharp_update_arp_entry+0x1c0>)
 80185ec:	4613      	mov	r3, r2
 80185ee:	005b      	lsls	r3, r3, #1
 80185f0:	4413      	add	r3, r2
 80185f2:	00db      	lsls	r3, r3, #3
 80185f4:	440b      	add	r3, r1
 80185f6:	2200      	movs	r2, #0
 80185f8:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80185fa:	68fb      	ldr	r3, [r7, #12]
 80185fc:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 8018600:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018604:	9300      	str	r3, [sp, #0]
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	6939      	ldr	r1, [r7, #16]
 801860a:	68f8      	ldr	r0, [r7, #12]
 801860c:	f003 faee 	bl	801bbec <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8018610:	6938      	ldr	r0, [r7, #16]
 8018612:	f7f6 fb3d 	bl	800ec90 <pbuf_free>
  }
  return ERR_OK;
 8018616:	2300      	movs	r3, #0
}
 8018618:	4618      	mov	r0, r3
 801861a:	3718      	adds	r7, #24
 801861c:	46bd      	mov	sp, r7
 801861e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018622:	bf00      	nop
 8018624:	08025290 	.word	0x08025290
 8018628:	08025530 	.word	0x08025530
 801862c:	08025308 	.word	0x08025308
 8018630:	08025554 	.word	0x08025554
 8018634:	080255a4 	.word	0x080255a4
 8018638:	20006894 	.word	0x20006894
 801863c:	080255f0 	.word	0x080255f0

08018640 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8018640:	b580      	push	{r7, lr}
 8018642:	b084      	sub	sp, #16
 8018644:	af00      	add	r7, sp, #0
 8018646:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018648:	2300      	movs	r3, #0
 801864a:	60fb      	str	r3, [r7, #12]
 801864c:	e01e      	b.n	801868c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801864e:	4913      	ldr	r1, [pc, #76]	; (801869c <etharp_cleanup_netif+0x5c>)
 8018650:	68fa      	ldr	r2, [r7, #12]
 8018652:	4613      	mov	r3, r2
 8018654:	005b      	lsls	r3, r3, #1
 8018656:	4413      	add	r3, r2
 8018658:	00db      	lsls	r3, r3, #3
 801865a:	440b      	add	r3, r1
 801865c:	3314      	adds	r3, #20
 801865e:	781b      	ldrb	r3, [r3, #0]
 8018660:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8018662:	7afb      	ldrb	r3, [r7, #11]
 8018664:	2b00      	cmp	r3, #0
 8018666:	d00e      	beq.n	8018686 <etharp_cleanup_netif+0x46>
 8018668:	490c      	ldr	r1, [pc, #48]	; (801869c <etharp_cleanup_netif+0x5c>)
 801866a:	68fa      	ldr	r2, [r7, #12]
 801866c:	4613      	mov	r3, r2
 801866e:	005b      	lsls	r3, r3, #1
 8018670:	4413      	add	r3, r2
 8018672:	00db      	lsls	r3, r3, #3
 8018674:	440b      	add	r3, r1
 8018676:	3308      	adds	r3, #8
 8018678:	681b      	ldr	r3, [r3, #0]
 801867a:	687a      	ldr	r2, [r7, #4]
 801867c:	429a      	cmp	r2, r3
 801867e:	d102      	bne.n	8018686 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8018680:	68f8      	ldr	r0, [r7, #12]
 8018682:	f7ff fbff 	bl	8017e84 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018686:	68fb      	ldr	r3, [r7, #12]
 8018688:	3301      	adds	r3, #1
 801868a:	60fb      	str	r3, [r7, #12]
 801868c:	68fb      	ldr	r3, [r7, #12]
 801868e:	2b09      	cmp	r3, #9
 8018690:	dddd      	ble.n	801864e <etharp_cleanup_netif+0xe>
    }
  }
}
 8018692:	bf00      	nop
 8018694:	bf00      	nop
 8018696:	3710      	adds	r7, #16
 8018698:	46bd      	mov	sp, r7
 801869a:	bd80      	pop	{r7, pc}
 801869c:	20006894 	.word	0x20006894

080186a0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80186a0:	b5b0      	push	{r4, r5, r7, lr}
 80186a2:	b08a      	sub	sp, #40	; 0x28
 80186a4:	af04      	add	r7, sp, #16
 80186a6:	6078      	str	r0, [r7, #4]
 80186a8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80186aa:	683b      	ldr	r3, [r7, #0]
 80186ac:	2b00      	cmp	r3, #0
 80186ae:	d107      	bne.n	80186c0 <etharp_input+0x20>
 80186b0:	4b63      	ldr	r3, [pc, #396]	; (8018840 <etharp_input+0x1a0>)
 80186b2:	f240 228a 	movw	r2, #650	; 0x28a
 80186b6:	4963      	ldr	r1, [pc, #396]	; (8018844 <etharp_input+0x1a4>)
 80186b8:	4863      	ldr	r0, [pc, #396]	; (8018848 <etharp_input+0x1a8>)
 80186ba:	f007 fe8f 	bl	80203dc <iprintf>
 80186be:	e0bc      	b.n	801883a <etharp_input+0x19a>

  hdr = (struct etharp_hdr *)p->payload;
 80186c0:	687b      	ldr	r3, [r7, #4]
 80186c2:	685b      	ldr	r3, [r3, #4]
 80186c4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80186c6:	693b      	ldr	r3, [r7, #16]
 80186c8:	881b      	ldrh	r3, [r3, #0]
 80186ca:	b29b      	uxth	r3, r3
 80186cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80186d0:	d10c      	bne.n	80186ec <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80186d2:	693b      	ldr	r3, [r7, #16]
 80186d4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80186d6:	2b06      	cmp	r3, #6
 80186d8:	d108      	bne.n	80186ec <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80186da:	693b      	ldr	r3, [r7, #16]
 80186dc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80186de:	2b04      	cmp	r3, #4
 80186e0:	d104      	bne.n	80186ec <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80186e2:	693b      	ldr	r3, [r7, #16]
 80186e4:	885b      	ldrh	r3, [r3, #2]
 80186e6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80186e8:	2b08      	cmp	r3, #8
 80186ea:	d021      	beq.n	8018730 <etharp_input+0x90>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 80186ec:	693b      	ldr	r3, [r7, #16]
 80186ee:	881b      	ldrh	r3, [r3, #0]
 80186f0:	b29b      	uxth	r3, r3
 80186f2:	4619      	mov	r1, r3
 80186f4:	693b      	ldr	r3, [r7, #16]
 80186f6:	791b      	ldrb	r3, [r3, #4]
 80186f8:	461a      	mov	r2, r3
 80186fa:	693b      	ldr	r3, [r7, #16]
 80186fc:	885b      	ldrh	r3, [r3, #2]
 80186fe:	b29b      	uxth	r3, r3
 8018700:	4618      	mov	r0, r3
 8018702:	693b      	ldr	r3, [r7, #16]
 8018704:	795b      	ldrb	r3, [r3, #5]
 8018706:	9300      	str	r3, [sp, #0]
 8018708:	4603      	mov	r3, r0
 801870a:	4850      	ldr	r0, [pc, #320]	; (801884c <etharp_input+0x1ac>)
 801870c:	f007 fe66 	bl	80203dc <iprintf>
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 8018710:	4b4f      	ldr	r3, [pc, #316]	; (8018850 <etharp_input+0x1b0>)
 8018712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018714:	3301      	adds	r3, #1
 8018716:	b29a      	uxth	r2, r3
 8018718:	4b4d      	ldr	r3, [pc, #308]	; (8018850 <etharp_input+0x1b0>)
 801871a:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 801871c:	4b4c      	ldr	r3, [pc, #304]	; (8018850 <etharp_input+0x1b0>)
 801871e:	8bdb      	ldrh	r3, [r3, #30]
 8018720:	3301      	adds	r3, #1
 8018722:	b29a      	uxth	r2, r3
 8018724:	4b4a      	ldr	r3, [pc, #296]	; (8018850 <etharp_input+0x1b0>)
 8018726:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 8018728:	6878      	ldr	r0, [r7, #4]
 801872a:	f7f6 fab1 	bl	800ec90 <pbuf_free>
    return;
 801872e:	e084      	b.n	801883a <etharp_input+0x19a>
  }
  ETHARP_STATS_INC(etharp.recv);
 8018730:	4b47      	ldr	r3, [pc, #284]	; (8018850 <etharp_input+0x1b0>)
 8018732:	8b5b      	ldrh	r3, [r3, #26]
 8018734:	3301      	adds	r3, #1
 8018736:	b29a      	uxth	r2, r3
 8018738:	4b45      	ldr	r3, [pc, #276]	; (8018850 <etharp_input+0x1b0>)
 801873a:	835a      	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801873c:	693b      	ldr	r3, [r7, #16]
 801873e:	330e      	adds	r3, #14
 8018740:	681b      	ldr	r3, [r3, #0]
 8018742:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8018744:	693b      	ldr	r3, [r7, #16]
 8018746:	3318      	adds	r3, #24
 8018748:	681b      	ldr	r3, [r3, #0]
 801874a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801874c:	683b      	ldr	r3, [r7, #0]
 801874e:	3304      	adds	r3, #4
 8018750:	681b      	ldr	r3, [r3, #0]
 8018752:	2b00      	cmp	r3, #0
 8018754:	d102      	bne.n	801875c <etharp_input+0xbc>
    for_us = 0;
 8018756:	2300      	movs	r3, #0
 8018758:	75fb      	strb	r3, [r7, #23]
 801875a:	e009      	b.n	8018770 <etharp_input+0xd0>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801875c:	68ba      	ldr	r2, [r7, #8]
 801875e:	683b      	ldr	r3, [r7, #0]
 8018760:	3304      	adds	r3, #4
 8018762:	681b      	ldr	r3, [r3, #0]
 8018764:	429a      	cmp	r2, r3
 8018766:	bf0c      	ite	eq
 8018768:	2301      	moveq	r3, #1
 801876a:	2300      	movne	r3, #0
 801876c:	b2db      	uxtb	r3, r3
 801876e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8018770:	693b      	ldr	r3, [r7, #16]
 8018772:	f103 0208 	add.w	r2, r3, #8
 8018776:	7dfb      	ldrb	r3, [r7, #23]
 8018778:	2b00      	cmp	r3, #0
 801877a:	d001      	beq.n	8018780 <etharp_input+0xe0>
 801877c:	2301      	movs	r3, #1
 801877e:	e000      	b.n	8018782 <etharp_input+0xe2>
 8018780:	2302      	movs	r3, #2
 8018782:	f107 010c 	add.w	r1, r7, #12
 8018786:	6838      	ldr	r0, [r7, #0]
 8018788:	f7ff fe76 	bl	8018478 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801878c:	693b      	ldr	r3, [r7, #16]
 801878e:	88db      	ldrh	r3, [r3, #6]
 8018790:	b29b      	uxth	r3, r3
 8018792:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018796:	d003      	beq.n	80187a0 <etharp_input+0x100>
 8018798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801879c:	d02e      	beq.n	80187fc <etharp_input+0x15c>
 801879e:	e037      	b.n	8018810 <etharp_input+0x170>
    case PP_HTONS(ARP_REQUEST):
      /* ARP request. If it asked for our address, we send out a
       * reply. In any case, we time-stamp any existing ARP entry,
       * and possibly send out an IP packet that was queued on it. */

      LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
 80187a0:	482c      	ldr	r0, [pc, #176]	; (8018854 <etharp_input+0x1b4>)
 80187a2:	f007 feb7 	bl	8020514 <puts>
      /* ARP request for our address? */
      if (for_us) {
 80187a6:	7dfb      	ldrb	r3, [r7, #23]
 80187a8:	2b00      	cmp	r3, #0
 80187aa:	d01a      	beq.n	80187e2 <etharp_input+0x142>
        /* send ARP response */
        etharp_raw(netif,
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80187ac:	683b      	ldr	r3, [r7, #0]
 80187ae:	f103 002e 	add.w	r0, r3, #46	; 0x2e
 80187b2:	693b      	ldr	r3, [r7, #16]
 80187b4:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80187b8:	683b      	ldr	r3, [r7, #0]
 80187ba:	f103 052e 	add.w	r5, r3, #46	; 0x2e
 80187be:	683b      	ldr	r3, [r7, #0]
 80187c0:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80187c2:	693a      	ldr	r2, [r7, #16]
 80187c4:	3208      	adds	r2, #8
        etharp_raw(netif,
 80187c6:	2102      	movs	r1, #2
 80187c8:	9103      	str	r1, [sp, #12]
 80187ca:	f107 010c 	add.w	r1, r7, #12
 80187ce:	9102      	str	r1, [sp, #8]
 80187d0:	9201      	str	r2, [sp, #4]
 80187d2:	9300      	str	r3, [sp, #0]
 80187d4:	462b      	mov	r3, r5
 80187d6:	4622      	mov	r2, r4
 80187d8:	4601      	mov	r1, r0
 80187da:	6838      	ldr	r0, [r7, #0]
 80187dc:	f000 fb5c 	bl	8018e98 <etharp_raw>
        /* request was not directed to us */
      } else {
        /* { for_us == 0 and netif->ip_addr.addr != 0 } */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
      }
      break;
 80187e0:	e028      	b.n	8018834 <etharp_input+0x194>
      } else if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80187e2:	683b      	ldr	r3, [r7, #0]
 80187e4:	3304      	adds	r3, #4
 80187e6:	681b      	ldr	r3, [r3, #0]
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	d103      	bne.n	80187f4 <etharp_input+0x154>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: we are unconfigured, ARP request ignored.\n"));
 80187ec:	481a      	ldr	r0, [pc, #104]	; (8018858 <etharp_input+0x1b8>)
 80187ee:	f007 fe91 	bl	8020514 <puts>
      break;
 80187f2:	e01f      	b.n	8018834 <etharp_input+0x194>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
 80187f4:	4819      	ldr	r0, [pc, #100]	; (801885c <etharp_input+0x1bc>)
 80187f6:	f007 fe8d 	bl	8020514 <puts>
      break;
 80187fa:	e01b      	b.n	8018834 <etharp_input+0x194>
    case PP_HTONS(ARP_REPLY):
      /* ARP reply. We already updated the ARP cache earlier. */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP reply\n"));
 80187fc:	4818      	ldr	r0, [pc, #96]	; (8018860 <etharp_input+0x1c0>)
 80187fe:	f007 fe89 	bl	8020514 <puts>
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
      /* DHCP wants to know about ARP replies from any host with an
       * IP address also offered to us by the DHCP server. We do not
       * want to take a duplicate IP address on a single network.
       * @todo How should we handle redundant (fail-over) interfaces? */
      dhcp_arp_reply(netif, &sipaddr);
 8018802:	f107 030c 	add.w	r3, r7, #12
 8018806:	4619      	mov	r1, r3
 8018808:	6838      	ldr	r0, [r7, #0]
 801880a:	f7fd ff1d 	bl	8016648 <dhcp_arp_reply>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
 801880e:	e011      	b.n	8018834 <etharp_input+0x194>
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
 8018810:	693b      	ldr	r3, [r7, #16]
 8018812:	88db      	ldrh	r3, [r3, #6]
 8018814:	b29b      	uxth	r3, r3
 8018816:	4618      	mov	r0, r3
 8018818:	f7f4 f8b2 	bl	800c980 <lwip_htons>
 801881c:	4603      	mov	r3, r0
 801881e:	4619      	mov	r1, r3
 8018820:	4810      	ldr	r0, [pc, #64]	; (8018864 <etharp_input+0x1c4>)
 8018822:	f007 fddb 	bl	80203dc <iprintf>
      ETHARP_STATS_INC(etharp.err);
 8018826:	4b0a      	ldr	r3, [pc, #40]	; (8018850 <etharp_input+0x1b0>)
 8018828:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801882a:	3301      	adds	r3, #1
 801882c:	b29a      	uxth	r2, r3
 801882e:	4b08      	ldr	r3, [pc, #32]	; (8018850 <etharp_input+0x1b0>)
 8018830:	859a      	strh	r2, [r3, #44]	; 0x2c
      break;
 8018832:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8018834:	6878      	ldr	r0, [r7, #4]
 8018836:	f7f6 fa2b 	bl	800ec90 <pbuf_free>
}
 801883a:	3718      	adds	r7, #24
 801883c:	46bd      	mov	sp, r7
 801883e:	bdb0      	pop	{r4, r5, r7, pc}
 8018840:	08025290 	.word	0x08025290
 8018844:	08025658 	.word	0x08025658
 8018848:	08025308 	.word	0x08025308
 801884c:	08025678 	.word	0x08025678
 8018850:	2000a3ec 	.word	0x2000a3ec
 8018854:	080256e0 	.word	0x080256e0
 8018858:	08025704 	.word	0x08025704
 801885c:	0802573c 	.word	0x0802573c
 8018860:	08025768 	.word	0x08025768
 8018864:	0802578c 	.word	0x0802578c

08018868 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8018868:	b580      	push	{r7, lr}
 801886a:	b086      	sub	sp, #24
 801886c:	af02      	add	r7, sp, #8
 801886e:	60f8      	str	r0, [r7, #12]
 8018870:	60b9      	str	r1, [r7, #8]
 8018872:	4613      	mov	r3, r2
 8018874:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8018876:	79fa      	ldrb	r2, [r7, #7]
 8018878:	4944      	ldr	r1, [pc, #272]	; (801898c <etharp_output_to_arp_index+0x124>)
 801887a:	4613      	mov	r3, r2
 801887c:	005b      	lsls	r3, r3, #1
 801887e:	4413      	add	r3, r2
 8018880:	00db      	lsls	r3, r3, #3
 8018882:	440b      	add	r3, r1
 8018884:	3314      	adds	r3, #20
 8018886:	781b      	ldrb	r3, [r3, #0]
 8018888:	2b01      	cmp	r3, #1
 801888a:	d806      	bhi.n	801889a <etharp_output_to_arp_index+0x32>
 801888c:	4b40      	ldr	r3, [pc, #256]	; (8018990 <etharp_output_to_arp_index+0x128>)
 801888e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8018892:	4940      	ldr	r1, [pc, #256]	; (8018994 <etharp_output_to_arp_index+0x12c>)
 8018894:	4840      	ldr	r0, [pc, #256]	; (8018998 <etharp_output_to_arp_index+0x130>)
 8018896:	f007 fda1 	bl	80203dc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801889a:	79fa      	ldrb	r2, [r7, #7]
 801889c:	493b      	ldr	r1, [pc, #236]	; (801898c <etharp_output_to_arp_index+0x124>)
 801889e:	4613      	mov	r3, r2
 80188a0:	005b      	lsls	r3, r3, #1
 80188a2:	4413      	add	r3, r2
 80188a4:	00db      	lsls	r3, r3, #3
 80188a6:	440b      	add	r3, r1
 80188a8:	3314      	adds	r3, #20
 80188aa:	781b      	ldrb	r3, [r3, #0]
 80188ac:	2b02      	cmp	r3, #2
 80188ae:	d153      	bne.n	8018958 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80188b0:	79fa      	ldrb	r2, [r7, #7]
 80188b2:	4936      	ldr	r1, [pc, #216]	; (801898c <etharp_output_to_arp_index+0x124>)
 80188b4:	4613      	mov	r3, r2
 80188b6:	005b      	lsls	r3, r3, #1
 80188b8:	4413      	add	r3, r2
 80188ba:	00db      	lsls	r3, r3, #3
 80188bc:	440b      	add	r3, r1
 80188be:	3312      	adds	r3, #18
 80188c0:	881b      	ldrh	r3, [r3, #0]
 80188c2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80188c6:	d919      	bls.n	80188fc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80188c8:	79fa      	ldrb	r2, [r7, #7]
 80188ca:	4613      	mov	r3, r2
 80188cc:	005b      	lsls	r3, r3, #1
 80188ce:	4413      	add	r3, r2
 80188d0:	00db      	lsls	r3, r3, #3
 80188d2:	4a2e      	ldr	r2, [pc, #184]	; (801898c <etharp_output_to_arp_index+0x124>)
 80188d4:	4413      	add	r3, r2
 80188d6:	3304      	adds	r3, #4
 80188d8:	4619      	mov	r1, r3
 80188da:	68f8      	ldr	r0, [r7, #12]
 80188dc:	f000 fba2 	bl	8019024 <etharp_request>
 80188e0:	4603      	mov	r3, r0
 80188e2:	2b00      	cmp	r3, #0
 80188e4:	d138      	bne.n	8018958 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80188e6:	79fa      	ldrb	r2, [r7, #7]
 80188e8:	4928      	ldr	r1, [pc, #160]	; (801898c <etharp_output_to_arp_index+0x124>)
 80188ea:	4613      	mov	r3, r2
 80188ec:	005b      	lsls	r3, r3, #1
 80188ee:	4413      	add	r3, r2
 80188f0:	00db      	lsls	r3, r3, #3
 80188f2:	440b      	add	r3, r1
 80188f4:	3314      	adds	r3, #20
 80188f6:	2203      	movs	r2, #3
 80188f8:	701a      	strb	r2, [r3, #0]
 80188fa:	e02d      	b.n	8018958 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80188fc:	79fa      	ldrb	r2, [r7, #7]
 80188fe:	4923      	ldr	r1, [pc, #140]	; (801898c <etharp_output_to_arp_index+0x124>)
 8018900:	4613      	mov	r3, r2
 8018902:	005b      	lsls	r3, r3, #1
 8018904:	4413      	add	r3, r2
 8018906:	00db      	lsls	r3, r3, #3
 8018908:	440b      	add	r3, r1
 801890a:	3312      	adds	r3, #18
 801890c:	881b      	ldrh	r3, [r3, #0]
 801890e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8018912:	d321      	bcc.n	8018958 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8018914:	79fa      	ldrb	r2, [r7, #7]
 8018916:	4613      	mov	r3, r2
 8018918:	005b      	lsls	r3, r3, #1
 801891a:	4413      	add	r3, r2
 801891c:	00db      	lsls	r3, r3, #3
 801891e:	4a1b      	ldr	r2, [pc, #108]	; (801898c <etharp_output_to_arp_index+0x124>)
 8018920:	4413      	add	r3, r2
 8018922:	1d19      	adds	r1, r3, #4
 8018924:	79fa      	ldrb	r2, [r7, #7]
 8018926:	4613      	mov	r3, r2
 8018928:	005b      	lsls	r3, r3, #1
 801892a:	4413      	add	r3, r2
 801892c:	00db      	lsls	r3, r3, #3
 801892e:	3308      	adds	r3, #8
 8018930:	4a16      	ldr	r2, [pc, #88]	; (801898c <etharp_output_to_arp_index+0x124>)
 8018932:	4413      	add	r3, r2
 8018934:	3304      	adds	r3, #4
 8018936:	461a      	mov	r2, r3
 8018938:	68f8      	ldr	r0, [r7, #12]
 801893a:	f000 fb51 	bl	8018fe0 <etharp_request_dst>
 801893e:	4603      	mov	r3, r0
 8018940:	2b00      	cmp	r3, #0
 8018942:	d109      	bne.n	8018958 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018944:	79fa      	ldrb	r2, [r7, #7]
 8018946:	4911      	ldr	r1, [pc, #68]	; (801898c <etharp_output_to_arp_index+0x124>)
 8018948:	4613      	mov	r3, r2
 801894a:	005b      	lsls	r3, r3, #1
 801894c:	4413      	add	r3, r2
 801894e:	00db      	lsls	r3, r3, #3
 8018950:	440b      	add	r3, r1
 8018952:	3314      	adds	r3, #20
 8018954:	2203      	movs	r2, #3
 8018956:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8018958:	68fb      	ldr	r3, [r7, #12]
 801895a:	f103 012e 	add.w	r1, r3, #46	; 0x2e
 801895e:	79fa      	ldrb	r2, [r7, #7]
 8018960:	4613      	mov	r3, r2
 8018962:	005b      	lsls	r3, r3, #1
 8018964:	4413      	add	r3, r2
 8018966:	00db      	lsls	r3, r3, #3
 8018968:	3308      	adds	r3, #8
 801896a:	4a08      	ldr	r2, [pc, #32]	; (801898c <etharp_output_to_arp_index+0x124>)
 801896c:	4413      	add	r3, r2
 801896e:	3304      	adds	r3, #4
 8018970:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018974:	9200      	str	r2, [sp, #0]
 8018976:	460a      	mov	r2, r1
 8018978:	68b9      	ldr	r1, [r7, #8]
 801897a:	68f8      	ldr	r0, [r7, #12]
 801897c:	f003 f936 	bl	801bbec <ethernet_output>
 8018980:	4603      	mov	r3, r0
}
 8018982:	4618      	mov	r0, r3
 8018984:	3710      	adds	r7, #16
 8018986:	46bd      	mov	sp, r7
 8018988:	bd80      	pop	{r7, pc}
 801898a:	bf00      	nop
 801898c:	20006894 	.word	0x20006894
 8018990:	08025290 	.word	0x08025290
 8018994:	080257b8 	.word	0x080257b8
 8018998:	08025308 	.word	0x08025308

0801899c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801899c:	b580      	push	{r7, lr}
 801899e:	b08a      	sub	sp, #40	; 0x28
 80189a0:	af02      	add	r7, sp, #8
 80189a2:	60f8      	str	r0, [r7, #12]
 80189a4:	60b9      	str	r1, [r7, #8]
 80189a6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80189ac:	68fb      	ldr	r3, [r7, #12]
 80189ae:	2b00      	cmp	r3, #0
 80189b0:	d106      	bne.n	80189c0 <etharp_output+0x24>
 80189b2:	4b76      	ldr	r3, [pc, #472]	; (8018b8c <etharp_output+0x1f0>)
 80189b4:	f240 321e 	movw	r2, #798	; 0x31e
 80189b8:	4975      	ldr	r1, [pc, #468]	; (8018b90 <etharp_output+0x1f4>)
 80189ba:	4876      	ldr	r0, [pc, #472]	; (8018b94 <etharp_output+0x1f8>)
 80189bc:	f007 fd0e 	bl	80203dc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80189c0:	68bb      	ldr	r3, [r7, #8]
 80189c2:	2b00      	cmp	r3, #0
 80189c4:	d106      	bne.n	80189d4 <etharp_output+0x38>
 80189c6:	4b71      	ldr	r3, [pc, #452]	; (8018b8c <etharp_output+0x1f0>)
 80189c8:	f240 321f 	movw	r2, #799	; 0x31f
 80189cc:	4972      	ldr	r1, [pc, #456]	; (8018b98 <etharp_output+0x1fc>)
 80189ce:	4871      	ldr	r0, [pc, #452]	; (8018b94 <etharp_output+0x1f8>)
 80189d0:	f007 fd04 	bl	80203dc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	2b00      	cmp	r3, #0
 80189d8:	d106      	bne.n	80189e8 <etharp_output+0x4c>
 80189da:	4b6c      	ldr	r3, [pc, #432]	; (8018b8c <etharp_output+0x1f0>)
 80189dc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80189e0:	496e      	ldr	r1, [pc, #440]	; (8018b9c <etharp_output+0x200>)
 80189e2:	486c      	ldr	r0, [pc, #432]	; (8018b94 <etharp_output+0x1f8>)
 80189e4:	f007 fcfa 	bl	80203dc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	681b      	ldr	r3, [r3, #0]
 80189ec:	68f9      	ldr	r1, [r7, #12]
 80189ee:	4618      	mov	r0, r3
 80189f0:	f002 f812 	bl	801aa18 <ip4_addr_isbroadcast_u32>
 80189f4:	4603      	mov	r3, r0
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	d002      	beq.n	8018a00 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80189fa:	4b69      	ldr	r3, [pc, #420]	; (8018ba0 <etharp_output+0x204>)
 80189fc:	61fb      	str	r3, [r7, #28]
 80189fe:	e0b5      	b.n	8018b6c <etharp_output+0x1d0>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	681b      	ldr	r3, [r3, #0]
 8018a04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018a08:	2be0      	cmp	r3, #224	; 0xe0
 8018a0a:	d118      	bne.n	8018a3e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8018a0c:	2301      	movs	r3, #1
 8018a0e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8018a10:	2300      	movs	r3, #0
 8018a12:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8018a14:	235e      	movs	r3, #94	; 0x5e
 8018a16:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	3301      	adds	r3, #1
 8018a1c:	781b      	ldrb	r3, [r3, #0]
 8018a1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018a22:	b2db      	uxtb	r3, r3
 8018a24:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8018a26:	687b      	ldr	r3, [r7, #4]
 8018a28:	3302      	adds	r3, #2
 8018a2a:	781b      	ldrb	r3, [r3, #0]
 8018a2c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	3303      	adds	r3, #3
 8018a32:	781b      	ldrb	r3, [r3, #0]
 8018a34:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8018a36:	f107 0310 	add.w	r3, r7, #16
 8018a3a:	61fb      	str	r3, [r7, #28]
 8018a3c:	e096      	b.n	8018b6c <etharp_output+0x1d0>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018a3e:	687b      	ldr	r3, [r7, #4]
 8018a40:	681a      	ldr	r2, [r3, #0]
 8018a42:	68fb      	ldr	r3, [r7, #12]
 8018a44:	3304      	adds	r3, #4
 8018a46:	681b      	ldr	r3, [r3, #0]
 8018a48:	405a      	eors	r2, r3
 8018a4a:	68fb      	ldr	r3, [r7, #12]
 8018a4c:	3308      	adds	r3, #8
 8018a4e:	681b      	ldr	r3, [r3, #0]
 8018a50:	4013      	ands	r3, r2
 8018a52:	2b00      	cmp	r3, #0
 8018a54:	d012      	beq.n	8018a7c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8018a56:	687b      	ldr	r3, [r7, #4]
 8018a58:	681b      	ldr	r3, [r3, #0]
 8018a5a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018a5c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8018a60:	4293      	cmp	r3, r2
 8018a62:	d00b      	beq.n	8018a7c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8018a64:	68fb      	ldr	r3, [r7, #12]
 8018a66:	330c      	adds	r3, #12
 8018a68:	681b      	ldr	r3, [r3, #0]
 8018a6a:	2b00      	cmp	r3, #0
 8018a6c:	d003      	beq.n	8018a76 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8018a6e:	68fb      	ldr	r3, [r7, #12]
 8018a70:	330c      	adds	r3, #12
 8018a72:	61bb      	str	r3, [r7, #24]
 8018a74:	e002      	b.n	8018a7c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8018a76:	f06f 0303 	mvn.w	r3, #3
 8018a7a:	e083      	b.n	8018b84 <etharp_output+0x1e8>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018a7c:	4b49      	ldr	r3, [pc, #292]	; (8018ba4 <etharp_output+0x208>)
 8018a7e:	781b      	ldrb	r3, [r3, #0]
 8018a80:	4619      	mov	r1, r3
 8018a82:	4a49      	ldr	r2, [pc, #292]	; (8018ba8 <etharp_output+0x20c>)
 8018a84:	460b      	mov	r3, r1
 8018a86:	005b      	lsls	r3, r3, #1
 8018a88:	440b      	add	r3, r1
 8018a8a:	00db      	lsls	r3, r3, #3
 8018a8c:	4413      	add	r3, r2
 8018a8e:	3314      	adds	r3, #20
 8018a90:	781b      	ldrb	r3, [r3, #0]
 8018a92:	2b01      	cmp	r3, #1
 8018a94:	d92b      	bls.n	8018aee <etharp_output+0x152>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018a96:	4b43      	ldr	r3, [pc, #268]	; (8018ba4 <etharp_output+0x208>)
 8018a98:	781b      	ldrb	r3, [r3, #0]
 8018a9a:	4619      	mov	r1, r3
 8018a9c:	4a42      	ldr	r2, [pc, #264]	; (8018ba8 <etharp_output+0x20c>)
 8018a9e:	460b      	mov	r3, r1
 8018aa0:	005b      	lsls	r3, r3, #1
 8018aa2:	440b      	add	r3, r1
 8018aa4:	00db      	lsls	r3, r3, #3
 8018aa6:	4413      	add	r3, r2
 8018aa8:	3308      	adds	r3, #8
 8018aaa:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018aac:	68fa      	ldr	r2, [r7, #12]
 8018aae:	429a      	cmp	r2, r3
 8018ab0:	d11d      	bne.n	8018aee <etharp_output+0x152>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8018ab2:	69bb      	ldr	r3, [r7, #24]
 8018ab4:	681a      	ldr	r2, [r3, #0]
 8018ab6:	4b3b      	ldr	r3, [pc, #236]	; (8018ba4 <etharp_output+0x208>)
 8018ab8:	781b      	ldrb	r3, [r3, #0]
 8018aba:	4618      	mov	r0, r3
 8018abc:	493a      	ldr	r1, [pc, #232]	; (8018ba8 <etharp_output+0x20c>)
 8018abe:	4603      	mov	r3, r0
 8018ac0:	005b      	lsls	r3, r3, #1
 8018ac2:	4403      	add	r3, r0
 8018ac4:	00db      	lsls	r3, r3, #3
 8018ac6:	440b      	add	r3, r1
 8018ac8:	3304      	adds	r3, #4
 8018aca:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018acc:	429a      	cmp	r2, r3
 8018ace:	d10e      	bne.n	8018aee <etharp_output+0x152>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 8018ad0:	4b36      	ldr	r3, [pc, #216]	; (8018bac <etharp_output+0x210>)
 8018ad2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8018ad4:	3301      	adds	r3, #1
 8018ad6:	b29a      	uxth	r2, r3
 8018ad8:	4b34      	ldr	r3, [pc, #208]	; (8018bac <etharp_output+0x210>)
 8018ada:	85da      	strh	r2, [r3, #46]	; 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8018adc:	4b31      	ldr	r3, [pc, #196]	; (8018ba4 <etharp_output+0x208>)
 8018ade:	781b      	ldrb	r3, [r3, #0]
 8018ae0:	461a      	mov	r2, r3
 8018ae2:	68b9      	ldr	r1, [r7, #8]
 8018ae4:	68f8      	ldr	r0, [r7, #12]
 8018ae6:	f7ff febf 	bl	8018868 <etharp_output_to_arp_index>
 8018aea:	4603      	mov	r3, r0
 8018aec:	e04a      	b.n	8018b84 <etharp_output+0x1e8>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018aee:	2300      	movs	r3, #0
 8018af0:	75fb      	strb	r3, [r7, #23]
 8018af2:	e031      	b.n	8018b58 <etharp_output+0x1bc>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018af4:	7dfa      	ldrb	r2, [r7, #23]
 8018af6:	492c      	ldr	r1, [pc, #176]	; (8018ba8 <etharp_output+0x20c>)
 8018af8:	4613      	mov	r3, r2
 8018afa:	005b      	lsls	r3, r3, #1
 8018afc:	4413      	add	r3, r2
 8018afe:	00db      	lsls	r3, r3, #3
 8018b00:	440b      	add	r3, r1
 8018b02:	3314      	adds	r3, #20
 8018b04:	781b      	ldrb	r3, [r3, #0]
 8018b06:	2b01      	cmp	r3, #1
 8018b08:	d923      	bls.n	8018b52 <etharp_output+0x1b6>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8018b0a:	7dfa      	ldrb	r2, [r7, #23]
 8018b0c:	4926      	ldr	r1, [pc, #152]	; (8018ba8 <etharp_output+0x20c>)
 8018b0e:	4613      	mov	r3, r2
 8018b10:	005b      	lsls	r3, r3, #1
 8018b12:	4413      	add	r3, r2
 8018b14:	00db      	lsls	r3, r3, #3
 8018b16:	440b      	add	r3, r1
 8018b18:	3308      	adds	r3, #8
 8018b1a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018b1c:	68fa      	ldr	r2, [r7, #12]
 8018b1e:	429a      	cmp	r2, r3
 8018b20:	d117      	bne.n	8018b52 <etharp_output+0x1b6>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8018b22:	69bb      	ldr	r3, [r7, #24]
 8018b24:	6819      	ldr	r1, [r3, #0]
 8018b26:	7dfa      	ldrb	r2, [r7, #23]
 8018b28:	481f      	ldr	r0, [pc, #124]	; (8018ba8 <etharp_output+0x20c>)
 8018b2a:	4613      	mov	r3, r2
 8018b2c:	005b      	lsls	r3, r3, #1
 8018b2e:	4413      	add	r3, r2
 8018b30:	00db      	lsls	r3, r3, #3
 8018b32:	4403      	add	r3, r0
 8018b34:	3304      	adds	r3, #4
 8018b36:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8018b38:	4299      	cmp	r1, r3
 8018b3a:	d10a      	bne.n	8018b52 <etharp_output+0x1b6>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8018b3c:	4a19      	ldr	r2, [pc, #100]	; (8018ba4 <etharp_output+0x208>)
 8018b3e:	7dfb      	ldrb	r3, [r7, #23]
 8018b40:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8018b42:	7dfb      	ldrb	r3, [r7, #23]
 8018b44:	461a      	mov	r2, r3
 8018b46:	68b9      	ldr	r1, [r7, #8]
 8018b48:	68f8      	ldr	r0, [r7, #12]
 8018b4a:	f7ff fe8d 	bl	8018868 <etharp_output_to_arp_index>
 8018b4e:	4603      	mov	r3, r0
 8018b50:	e018      	b.n	8018b84 <etharp_output+0x1e8>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018b52:	7dfb      	ldrb	r3, [r7, #23]
 8018b54:	3301      	adds	r3, #1
 8018b56:	75fb      	strb	r3, [r7, #23]
 8018b58:	7dfb      	ldrb	r3, [r7, #23]
 8018b5a:	2b09      	cmp	r3, #9
 8018b5c:	d9ca      	bls.n	8018af4 <etharp_output+0x158>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8018b5e:	68ba      	ldr	r2, [r7, #8]
 8018b60:	69b9      	ldr	r1, [r7, #24]
 8018b62:	68f8      	ldr	r0, [r7, #12]
 8018b64:	f000 f824 	bl	8018bb0 <etharp_query>
 8018b68:	4603      	mov	r3, r0
 8018b6a:	e00b      	b.n	8018b84 <etharp_output+0x1e8>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8018b6c:	68fb      	ldr	r3, [r7, #12]
 8018b6e:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 8018b72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018b76:	9300      	str	r3, [sp, #0]
 8018b78:	69fb      	ldr	r3, [r7, #28]
 8018b7a:	68b9      	ldr	r1, [r7, #8]
 8018b7c:	68f8      	ldr	r0, [r7, #12]
 8018b7e:	f003 f835 	bl	801bbec <ethernet_output>
 8018b82:	4603      	mov	r3, r0
}
 8018b84:	4618      	mov	r0, r3
 8018b86:	3720      	adds	r7, #32
 8018b88:	46bd      	mov	sp, r7
 8018b8a:	bd80      	pop	{r7, pc}
 8018b8c:	08025290 	.word	0x08025290
 8018b90:	08025658 	.word	0x08025658
 8018b94:	08025308 	.word	0x08025308
 8018b98:	080257e8 	.word	0x080257e8
 8018b9c:	08025648 	.word	0x08025648
 8018ba0:	08026bfc 	.word	0x08026bfc
 8018ba4:	20006984 	.word	0x20006984
 8018ba8:	20006894 	.word	0x20006894
 8018bac:	2000a3ec 	.word	0x2000a3ec

08018bb0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8018bb0:	b580      	push	{r7, lr}
 8018bb2:	b08c      	sub	sp, #48	; 0x30
 8018bb4:	af02      	add	r7, sp, #8
 8018bb6:	60f8      	str	r0, [r7, #12]
 8018bb8:	60b9      	str	r1, [r7, #8]
 8018bba:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8018bbc:	68fb      	ldr	r3, [r7, #12]
 8018bbe:	332e      	adds	r3, #46	; 0x2e
 8018bc0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8018bc2:	23ff      	movs	r3, #255	; 0xff
 8018bc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8018bc8:	2300      	movs	r3, #0
 8018bca:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018bcc:	68bb      	ldr	r3, [r7, #8]
 8018bce:	681b      	ldr	r3, [r3, #0]
 8018bd0:	68f9      	ldr	r1, [r7, #12]
 8018bd2:	4618      	mov	r0, r3
 8018bd4:	f001 ff20 	bl	801aa18 <ip4_addr_isbroadcast_u32>
 8018bd8:	4603      	mov	r3, r0
 8018bda:	2b00      	cmp	r3, #0
 8018bdc:	d10c      	bne.n	8018bf8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018bde:	68bb      	ldr	r3, [r7, #8]
 8018be0:	681b      	ldr	r3, [r3, #0]
 8018be2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018be6:	2be0      	cmp	r3, #224	; 0xe0
 8018be8:	d006      	beq.n	8018bf8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018bea:	68bb      	ldr	r3, [r7, #8]
 8018bec:	2b00      	cmp	r3, #0
 8018bee:	d003      	beq.n	8018bf8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8018bf0:	68bb      	ldr	r3, [r7, #8]
 8018bf2:	681b      	ldr	r3, [r3, #0]
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	d105      	bne.n	8018c04 <etharp_query+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
 8018bf8:	4898      	ldr	r0, [pc, #608]	; (8018e5c <etharp_query+0x2ac>)
 8018bfa:	f007 fc8b 	bl	8020514 <puts>
    return ERR_ARG;
 8018bfe:	f06f 030f 	mvn.w	r3, #15
 8018c02:	e126      	b.n	8018e52 <etharp_query+0x2a2>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8018c04:	68fa      	ldr	r2, [r7, #12]
 8018c06:	2101      	movs	r1, #1
 8018c08:	68b8      	ldr	r0, [r7, #8]
 8018c0a:	f7ff fa73 	bl	80180f4 <etharp_find_entry>
 8018c0e:	4603      	mov	r3, r0
 8018c10:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8018c12:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018c16:	2b00      	cmp	r3, #0
 8018c18:	da11      	bge.n	8018c3e <etharp_query+0x8e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
 8018c1a:	4891      	ldr	r0, [pc, #580]	; (8018e60 <etharp_query+0x2b0>)
 8018c1c:	f007 fc7a 	bl	8020514 <puts>
    if (q) {
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	d008      	beq.n	8018c38 <etharp_query+0x88>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
 8018c26:	488f      	ldr	r0, [pc, #572]	; (8018e64 <etharp_query+0x2b4>)
 8018c28:	f007 fc74 	bl	8020514 <puts>
      ETHARP_STATS_INC(etharp.memerr);
 8018c2c:	4b8e      	ldr	r3, [pc, #568]	; (8018e68 <etharp_query+0x2b8>)
 8018c2e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018c30:	3301      	adds	r3, #1
 8018c32:	b29a      	uxth	r2, r3
 8018c34:	4b8c      	ldr	r3, [pc, #560]	; (8018e68 <etharp_query+0x2b8>)
 8018c36:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    return (err_t)i_err;
 8018c38:	8a7b      	ldrh	r3, [r7, #18]
 8018c3a:	b25b      	sxtb	r3, r3
 8018c3c:	e109      	b.n	8018e52 <etharp_query+0x2a2>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8018c3e:	8a7b      	ldrh	r3, [r7, #18]
 8018c40:	2b7e      	cmp	r3, #126	; 0x7e
 8018c42:	d906      	bls.n	8018c52 <etharp_query+0xa2>
 8018c44:	4b89      	ldr	r3, [pc, #548]	; (8018e6c <etharp_query+0x2bc>)
 8018c46:	f240 32c1 	movw	r2, #961	; 0x3c1
 8018c4a:	4989      	ldr	r1, [pc, #548]	; (8018e70 <etharp_query+0x2c0>)
 8018c4c:	4889      	ldr	r0, [pc, #548]	; (8018e74 <etharp_query+0x2c4>)
 8018c4e:	f007 fbc5 	bl	80203dc <iprintf>
  i = (netif_addr_idx_t)i_err;
 8018c52:	8a7b      	ldrh	r3, [r7, #18]
 8018c54:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8018c56:	7c7a      	ldrb	r2, [r7, #17]
 8018c58:	4987      	ldr	r1, [pc, #540]	; (8018e78 <etharp_query+0x2c8>)
 8018c5a:	4613      	mov	r3, r2
 8018c5c:	005b      	lsls	r3, r3, #1
 8018c5e:	4413      	add	r3, r2
 8018c60:	00db      	lsls	r3, r3, #3
 8018c62:	440b      	add	r3, r1
 8018c64:	3314      	adds	r3, #20
 8018c66:	781b      	ldrb	r3, [r3, #0]
 8018c68:	2b00      	cmp	r3, #0
 8018c6a:	d115      	bne.n	8018c98 <etharp_query+0xe8>
    is_new_entry = 1;
 8018c6c:	2301      	movs	r3, #1
 8018c6e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8018c70:	7c7a      	ldrb	r2, [r7, #17]
 8018c72:	4981      	ldr	r1, [pc, #516]	; (8018e78 <etharp_query+0x2c8>)
 8018c74:	4613      	mov	r3, r2
 8018c76:	005b      	lsls	r3, r3, #1
 8018c78:	4413      	add	r3, r2
 8018c7a:	00db      	lsls	r3, r3, #3
 8018c7c:	440b      	add	r3, r1
 8018c7e:	3314      	adds	r3, #20
 8018c80:	2201      	movs	r2, #1
 8018c82:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8018c84:	7c7a      	ldrb	r2, [r7, #17]
 8018c86:	497c      	ldr	r1, [pc, #496]	; (8018e78 <etharp_query+0x2c8>)
 8018c88:	4613      	mov	r3, r2
 8018c8a:	005b      	lsls	r3, r3, #1
 8018c8c:	4413      	add	r3, r2
 8018c8e:	00db      	lsls	r3, r3, #3
 8018c90:	440b      	add	r3, r1
 8018c92:	3308      	adds	r3, #8
 8018c94:	68fa      	ldr	r2, [r7, #12]
 8018c96:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8018c98:	7c7a      	ldrb	r2, [r7, #17]
 8018c9a:	4977      	ldr	r1, [pc, #476]	; (8018e78 <etharp_query+0x2c8>)
 8018c9c:	4613      	mov	r3, r2
 8018c9e:	005b      	lsls	r3, r3, #1
 8018ca0:	4413      	add	r3, r2
 8018ca2:	00db      	lsls	r3, r3, #3
 8018ca4:	440b      	add	r3, r1
 8018ca6:	3314      	adds	r3, #20
 8018ca8:	781b      	ldrb	r3, [r3, #0]
 8018caa:	2b01      	cmp	r3, #1
 8018cac:	d011      	beq.n	8018cd2 <etharp_query+0x122>
 8018cae:	7c7a      	ldrb	r2, [r7, #17]
 8018cb0:	4971      	ldr	r1, [pc, #452]	; (8018e78 <etharp_query+0x2c8>)
 8018cb2:	4613      	mov	r3, r2
 8018cb4:	005b      	lsls	r3, r3, #1
 8018cb6:	4413      	add	r3, r2
 8018cb8:	00db      	lsls	r3, r3, #3
 8018cba:	440b      	add	r3, r1
 8018cbc:	3314      	adds	r3, #20
 8018cbe:	781b      	ldrb	r3, [r3, #0]
 8018cc0:	2b01      	cmp	r3, #1
 8018cc2:	d806      	bhi.n	8018cd2 <etharp_query+0x122>
 8018cc4:	4b69      	ldr	r3, [pc, #420]	; (8018e6c <etharp_query+0x2bc>)
 8018cc6:	f240 32cd 	movw	r2, #973	; 0x3cd
 8018cca:	496c      	ldr	r1, [pc, #432]	; (8018e7c <etharp_query+0x2cc>)
 8018ccc:	4869      	ldr	r0, [pc, #420]	; (8018e74 <etharp_query+0x2c4>)
 8018cce:	f007 fb85 	bl	80203dc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8018cd2:	6a3b      	ldr	r3, [r7, #32]
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	d102      	bne.n	8018cde <etharp_query+0x12e>
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	2b00      	cmp	r3, #0
 8018cdc:	d10c      	bne.n	8018cf8 <etharp_query+0x148>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8018cde:	68b9      	ldr	r1, [r7, #8]
 8018ce0:	68f8      	ldr	r0, [r7, #12]
 8018ce2:	f000 f99f 	bl	8019024 <etharp_request>
 8018ce6:	4603      	mov	r3, r0
 8018ce8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	d102      	bne.n	8018cf8 <etharp_query+0x148>
      return result;
 8018cf2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018cf6:	e0ac      	b.n	8018e52 <etharp_query+0x2a2>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	2b00      	cmp	r3, #0
 8018cfc:	d106      	bne.n	8018d0c <etharp_query+0x15c>
 8018cfe:	4b5b      	ldr	r3, [pc, #364]	; (8018e6c <etharp_query+0x2bc>)
 8018d00:	f240 32e1 	movw	r2, #993	; 0x3e1
 8018d04:	495e      	ldr	r1, [pc, #376]	; (8018e80 <etharp_query+0x2d0>)
 8018d06:	485b      	ldr	r0, [pc, #364]	; (8018e74 <etharp_query+0x2c4>)
 8018d08:	f007 fb68 	bl	80203dc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8018d0c:	7c7a      	ldrb	r2, [r7, #17]
 8018d0e:	495a      	ldr	r1, [pc, #360]	; (8018e78 <etharp_query+0x2c8>)
 8018d10:	4613      	mov	r3, r2
 8018d12:	005b      	lsls	r3, r3, #1
 8018d14:	4413      	add	r3, r2
 8018d16:	00db      	lsls	r3, r3, #3
 8018d18:	440b      	add	r3, r1
 8018d1a:	3314      	adds	r3, #20
 8018d1c:	781b      	ldrb	r3, [r3, #0]
 8018d1e:	2b01      	cmp	r3, #1
 8018d20:	d917      	bls.n	8018d52 <etharp_query+0x1a2>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8018d22:	4a58      	ldr	r2, [pc, #352]	; (8018e84 <etharp_query+0x2d4>)
 8018d24:	7c7b      	ldrb	r3, [r7, #17]
 8018d26:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8018d28:	7c7a      	ldrb	r2, [r7, #17]
 8018d2a:	4613      	mov	r3, r2
 8018d2c:	005b      	lsls	r3, r3, #1
 8018d2e:	4413      	add	r3, r2
 8018d30:	00db      	lsls	r3, r3, #3
 8018d32:	3308      	adds	r3, #8
 8018d34:	4a50      	ldr	r2, [pc, #320]	; (8018e78 <etharp_query+0x2c8>)
 8018d36:	4413      	add	r3, r2
 8018d38:	3304      	adds	r3, #4
 8018d3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018d3e:	9200      	str	r2, [sp, #0]
 8018d40:	697a      	ldr	r2, [r7, #20]
 8018d42:	6879      	ldr	r1, [r7, #4]
 8018d44:	68f8      	ldr	r0, [r7, #12]
 8018d46:	f002 ff51 	bl	801bbec <ethernet_output>
 8018d4a:	4603      	mov	r3, r0
 8018d4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018d50:	e07d      	b.n	8018e4e <etharp_query+0x29e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018d52:	7c7a      	ldrb	r2, [r7, #17]
 8018d54:	4948      	ldr	r1, [pc, #288]	; (8018e78 <etharp_query+0x2c8>)
 8018d56:	4613      	mov	r3, r2
 8018d58:	005b      	lsls	r3, r3, #1
 8018d5a:	4413      	add	r3, r2
 8018d5c:	00db      	lsls	r3, r3, #3
 8018d5e:	440b      	add	r3, r1
 8018d60:	3314      	adds	r3, #20
 8018d62:	781b      	ldrb	r3, [r3, #0]
 8018d64:	2b01      	cmp	r3, #1
 8018d66:	d172      	bne.n	8018e4e <etharp_query+0x29e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8018d68:	2300      	movs	r3, #0
 8018d6a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8018d6c:	687b      	ldr	r3, [r7, #4]
 8018d6e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018d70:	e01c      	b.n	8018dac <etharp_query+0x1fc>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8018d72:	69fb      	ldr	r3, [r7, #28]
 8018d74:	895a      	ldrh	r2, [r3, #10]
 8018d76:	69fb      	ldr	r3, [r7, #28]
 8018d78:	891b      	ldrh	r3, [r3, #8]
 8018d7a:	429a      	cmp	r2, r3
 8018d7c:	d10a      	bne.n	8018d94 <etharp_query+0x1e4>
 8018d7e:	69fb      	ldr	r3, [r7, #28]
 8018d80:	681b      	ldr	r3, [r3, #0]
 8018d82:	2b00      	cmp	r3, #0
 8018d84:	d006      	beq.n	8018d94 <etharp_query+0x1e4>
 8018d86:	4b39      	ldr	r3, [pc, #228]	; (8018e6c <etharp_query+0x2bc>)
 8018d88:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8018d8c:	493e      	ldr	r1, [pc, #248]	; (8018e88 <etharp_query+0x2d8>)
 8018d8e:	4839      	ldr	r0, [pc, #228]	; (8018e74 <etharp_query+0x2c4>)
 8018d90:	f007 fb24 	bl	80203dc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8018d94:	69fb      	ldr	r3, [r7, #28]
 8018d96:	7b1b      	ldrb	r3, [r3, #12]
 8018d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d002      	beq.n	8018da6 <etharp_query+0x1f6>
        copy_needed = 1;
 8018da0:	2301      	movs	r3, #1
 8018da2:	61bb      	str	r3, [r7, #24]
        break;
 8018da4:	e005      	b.n	8018db2 <etharp_query+0x202>
      }
      p = p->next;
 8018da6:	69fb      	ldr	r3, [r7, #28]
 8018da8:	681b      	ldr	r3, [r3, #0]
 8018daa:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018dac:	69fb      	ldr	r3, [r7, #28]
 8018dae:	2b00      	cmp	r3, #0
 8018db0:	d1df      	bne.n	8018d72 <etharp_query+0x1c2>
    }
    if (copy_needed) {
 8018db2:	69bb      	ldr	r3, [r7, #24]
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	d007      	beq.n	8018dc8 <etharp_query+0x218>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8018db8:	687a      	ldr	r2, [r7, #4]
 8018dba:	f44f 7120 	mov.w	r1, #640	; 0x280
 8018dbe:	200e      	movs	r0, #14
 8018dc0:	f7f6 fb16 	bl	800f3f0 <pbuf_clone>
 8018dc4:	61f8      	str	r0, [r7, #28]
 8018dc6:	e004      	b.n	8018dd2 <etharp_query+0x222>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8018dcc:	69f8      	ldr	r0, [r7, #28]
 8018dce:	f7f6 f805 	bl	800eddc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8018dd2:	69fb      	ldr	r3, [r7, #28]
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	d02d      	beq.n	8018e34 <etharp_query+0x284>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8018dd8:	7c7a      	ldrb	r2, [r7, #17]
 8018dda:	4927      	ldr	r1, [pc, #156]	; (8018e78 <etharp_query+0x2c8>)
 8018ddc:	4613      	mov	r3, r2
 8018dde:	005b      	lsls	r3, r3, #1
 8018de0:	4413      	add	r3, r2
 8018de2:	00db      	lsls	r3, r3, #3
 8018de4:	440b      	add	r3, r1
 8018de6:	681b      	ldr	r3, [r3, #0]
 8018de8:	2b00      	cmp	r3, #0
 8018dea:	d010      	beq.n	8018e0e <etharp_query+0x25e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
 8018dec:	7c7b      	ldrb	r3, [r7, #17]
 8018dee:	461a      	mov	r2, r3
 8018df0:	6879      	ldr	r1, [r7, #4]
 8018df2:	4826      	ldr	r0, [pc, #152]	; (8018e8c <etharp_query+0x2dc>)
 8018df4:	f007 faf2 	bl	80203dc <iprintf>
        pbuf_free(arp_table[i].q);
 8018df8:	7c7a      	ldrb	r2, [r7, #17]
 8018dfa:	491f      	ldr	r1, [pc, #124]	; (8018e78 <etharp_query+0x2c8>)
 8018dfc:	4613      	mov	r3, r2
 8018dfe:	005b      	lsls	r3, r3, #1
 8018e00:	4413      	add	r3, r2
 8018e02:	00db      	lsls	r3, r3, #3
 8018e04:	440b      	add	r3, r1
 8018e06:	681b      	ldr	r3, [r3, #0]
 8018e08:	4618      	mov	r0, r3
 8018e0a:	f7f5 ff41 	bl	800ec90 <pbuf_free>
      }
      arp_table[i].q = p;
 8018e0e:	7c7a      	ldrb	r2, [r7, #17]
 8018e10:	4919      	ldr	r1, [pc, #100]	; (8018e78 <etharp_query+0x2c8>)
 8018e12:	4613      	mov	r3, r2
 8018e14:	005b      	lsls	r3, r3, #1
 8018e16:	4413      	add	r3, r2
 8018e18:	00db      	lsls	r3, r3, #3
 8018e1a:	440b      	add	r3, r1
 8018e1c:	69fa      	ldr	r2, [r7, #28]
 8018e1e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8018e20:	2300      	movs	r3, #0
 8018e22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
 8018e26:	7c7b      	ldrb	r3, [r7, #17]
 8018e28:	461a      	mov	r2, r3
 8018e2a:	6879      	ldr	r1, [r7, #4]
 8018e2c:	4818      	ldr	r0, [pc, #96]	; (8018e90 <etharp_query+0x2e0>)
 8018e2e:	f007 fad5 	bl	80203dc <iprintf>
 8018e32:	e00c      	b.n	8018e4e <etharp_query+0x29e>
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 8018e34:	4b0c      	ldr	r3, [pc, #48]	; (8018e68 <etharp_query+0x2b8>)
 8018e36:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018e38:	3301      	adds	r3, #1
 8018e3a:	b29a      	uxth	r2, r3
 8018e3c:	4b0a      	ldr	r3, [pc, #40]	; (8018e68 <etharp_query+0x2b8>)
 8018e3e:	849a      	strh	r2, [r3, #36]	; 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
 8018e40:	6879      	ldr	r1, [r7, #4]
 8018e42:	4814      	ldr	r0, [pc, #80]	; (8018e94 <etharp_query+0x2e4>)
 8018e44:	f007 faca 	bl	80203dc <iprintf>
      result = ERR_MEM;
 8018e48:	23ff      	movs	r3, #255	; 0xff
 8018e4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8018e4e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8018e52:	4618      	mov	r0, r3
 8018e54:	3728      	adds	r7, #40	; 0x28
 8018e56:	46bd      	mov	sp, r7
 8018e58:	bd80      	pop	{r7, pc}
 8018e5a:	bf00      	nop
 8018e5c:	080257f4 	.word	0x080257f4
 8018e60:	08025834 	.word	0x08025834
 8018e64:	08025860 	.word	0x08025860
 8018e68:	2000a3ec 	.word	0x2000a3ec
 8018e6c:	08025290 	.word	0x08025290
 8018e70:	08025880 	.word	0x08025880
 8018e74:	08025308 	.word	0x08025308
 8018e78:	20006894 	.word	0x20006894
 8018e7c:	08025890 	.word	0x08025890
 8018e80:	080257e8 	.word	0x080257e8
 8018e84:	20006984 	.word	0x20006984
 8018e88:	080258b8 	.word	0x080258b8
 8018e8c:	080258d4 	.word	0x080258d4
 8018e90:	0802591c 	.word	0x0802591c
 8018e94:	08025950 	.word	0x08025950

08018e98 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8018e98:	b580      	push	{r7, lr}
 8018e9a:	b08a      	sub	sp, #40	; 0x28
 8018e9c:	af02      	add	r7, sp, #8
 8018e9e:	60f8      	str	r0, [r7, #12]
 8018ea0:	60b9      	str	r1, [r7, #8]
 8018ea2:	607a      	str	r2, [r7, #4]
 8018ea4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8018ea6:	2300      	movs	r3, #0
 8018ea8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018eaa:	68fb      	ldr	r3, [r7, #12]
 8018eac:	2b00      	cmp	r3, #0
 8018eae:	d106      	bne.n	8018ebe <etharp_raw+0x26>
 8018eb0:	4b43      	ldr	r3, [pc, #268]	; (8018fc0 <etharp_raw+0x128>)
 8018eb2:	f240 4257 	movw	r2, #1111	; 0x457
 8018eb6:	4943      	ldr	r1, [pc, #268]	; (8018fc4 <etharp_raw+0x12c>)
 8018eb8:	4843      	ldr	r0, [pc, #268]	; (8018fc8 <etharp_raw+0x130>)
 8018eba:	f007 fa8f 	bl	80203dc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8018ebe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018ec2:	211c      	movs	r1, #28
 8018ec4:	200e      	movs	r0, #14
 8018ec6:	f7f5 fbff 	bl	800e6c8 <pbuf_alloc>
 8018eca:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8018ecc:	69bb      	ldr	r3, [r7, #24]
 8018ece:	2b00      	cmp	r3, #0
 8018ed0:	d10b      	bne.n	8018eea <etharp_raw+0x52>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 8018ed2:	483e      	ldr	r0, [pc, #248]	; (8018fcc <etharp_raw+0x134>)
 8018ed4:	f007 fb1e 	bl	8020514 <puts>
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 8018ed8:	4b3d      	ldr	r3, [pc, #244]	; (8018fd0 <etharp_raw+0x138>)
 8018eda:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018edc:	3301      	adds	r3, #1
 8018ede:	b29a      	uxth	r2, r3
 8018ee0:	4b3b      	ldr	r3, [pc, #236]	; (8018fd0 <etharp_raw+0x138>)
 8018ee2:	849a      	strh	r2, [r3, #36]	; 0x24
    return ERR_MEM;
 8018ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8018ee8:	e066      	b.n	8018fb8 <etharp_raw+0x120>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8018eea:	69bb      	ldr	r3, [r7, #24]
 8018eec:	895b      	ldrh	r3, [r3, #10]
 8018eee:	2b1b      	cmp	r3, #27
 8018ef0:	d806      	bhi.n	8018f00 <etharp_raw+0x68>
 8018ef2:	4b33      	ldr	r3, [pc, #204]	; (8018fc0 <etharp_raw+0x128>)
 8018ef4:	f240 4262 	movw	r2, #1122	; 0x462
 8018ef8:	4936      	ldr	r1, [pc, #216]	; (8018fd4 <etharp_raw+0x13c>)
 8018efa:	4833      	ldr	r0, [pc, #204]	; (8018fc8 <etharp_raw+0x130>)
 8018efc:	f007 fa6e 	bl	80203dc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8018f00:	69bb      	ldr	r3, [r7, #24]
 8018f02:	685b      	ldr	r3, [r3, #4]
 8018f04:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
 8018f06:	4834      	ldr	r0, [pc, #208]	; (8018fd8 <etharp_raw+0x140>)
 8018f08:	f007 fb04 	bl	8020514 <puts>
  hdr->opcode = lwip_htons(opcode);
 8018f0c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018f0e:	4618      	mov	r0, r3
 8018f10:	f7f3 fd36 	bl	800c980 <lwip_htons>
 8018f14:	4603      	mov	r3, r0
 8018f16:	461a      	mov	r2, r3
 8018f18:	697b      	ldr	r3, [r7, #20]
 8018f1a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8018f1c:	68fb      	ldr	r3, [r7, #12]
 8018f1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018f22:	2b06      	cmp	r3, #6
 8018f24:	d006      	beq.n	8018f34 <etharp_raw+0x9c>
 8018f26:	4b26      	ldr	r3, [pc, #152]	; (8018fc0 <etharp_raw+0x128>)
 8018f28:	f240 4269 	movw	r2, #1129	; 0x469
 8018f2c:	492b      	ldr	r1, [pc, #172]	; (8018fdc <etharp_raw+0x144>)
 8018f2e:	4826      	ldr	r0, [pc, #152]	; (8018fc8 <etharp_raw+0x130>)
 8018f30:	f007 fa54 	bl	80203dc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8018f34:	697b      	ldr	r3, [r7, #20]
 8018f36:	3308      	adds	r3, #8
 8018f38:	2206      	movs	r2, #6
 8018f3a:	6839      	ldr	r1, [r7, #0]
 8018f3c:	4618      	mov	r0, r3
 8018f3e:	f007 f98d 	bl	802025c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8018f42:	697b      	ldr	r3, [r7, #20]
 8018f44:	3312      	adds	r3, #18
 8018f46:	2206      	movs	r2, #6
 8018f48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018f4a:	4618      	mov	r0, r3
 8018f4c:	f007 f986 	bl	802025c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8018f50:	697b      	ldr	r3, [r7, #20]
 8018f52:	330e      	adds	r3, #14
 8018f54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018f56:	6812      	ldr	r2, [r2, #0]
 8018f58:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8018f5a:	697b      	ldr	r3, [r7, #20]
 8018f5c:	3318      	adds	r3, #24
 8018f5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018f60:	6812      	ldr	r2, [r2, #0]
 8018f62:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8018f64:	697b      	ldr	r3, [r7, #20]
 8018f66:	2200      	movs	r2, #0
 8018f68:	701a      	strb	r2, [r3, #0]
 8018f6a:	2200      	movs	r2, #0
 8018f6c:	f042 0201 	orr.w	r2, r2, #1
 8018f70:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8018f72:	697b      	ldr	r3, [r7, #20]
 8018f74:	2200      	movs	r2, #0
 8018f76:	f042 0208 	orr.w	r2, r2, #8
 8018f7a:	709a      	strb	r2, [r3, #2]
 8018f7c:	2200      	movs	r2, #0
 8018f7e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8018f80:	697b      	ldr	r3, [r7, #20]
 8018f82:	2206      	movs	r2, #6
 8018f84:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8018f86:	697b      	ldr	r3, [r7, #20]
 8018f88:	2204      	movs	r2, #4
 8018f8a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8018f8c:	f640 0306 	movw	r3, #2054	; 0x806
 8018f90:	9300      	str	r3, [sp, #0]
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	68ba      	ldr	r2, [r7, #8]
 8018f96:	69b9      	ldr	r1, [r7, #24]
 8018f98:	68f8      	ldr	r0, [r7, #12]
 8018f9a:	f002 fe27 	bl	801bbec <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 8018f9e:	4b0c      	ldr	r3, [pc, #48]	; (8018fd0 <etharp_raw+0x138>)
 8018fa0:	8b1b      	ldrh	r3, [r3, #24]
 8018fa2:	3301      	adds	r3, #1
 8018fa4:	b29a      	uxth	r2, r3
 8018fa6:	4b0a      	ldr	r3, [pc, #40]	; (8018fd0 <etharp_raw+0x138>)
 8018fa8:	831a      	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
 8018faa:	69b8      	ldr	r0, [r7, #24]
 8018fac:	f7f5 fe70 	bl	800ec90 <pbuf_free>
  p = NULL;
 8018fb0:	2300      	movs	r3, #0
 8018fb2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8018fb4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018fb8:	4618      	mov	r0, r3
 8018fba:	3720      	adds	r7, #32
 8018fbc:	46bd      	mov	sp, r7
 8018fbe:	bd80      	pop	{r7, pc}
 8018fc0:	08025290 	.word	0x08025290
 8018fc4:	08025658 	.word	0x08025658
 8018fc8:	08025308 	.word	0x08025308
 8018fcc:	0802599c 	.word	0x0802599c
 8018fd0:	2000a3ec 	.word	0x2000a3ec
 8018fd4:	080259d4 	.word	0x080259d4
 8018fd8:	08025a08 	.word	0x08025a08
 8018fdc:	08025a2c 	.word	0x08025a2c

08018fe0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8018fe0:	b580      	push	{r7, lr}
 8018fe2:	b088      	sub	sp, #32
 8018fe4:	af04      	add	r7, sp, #16
 8018fe6:	60f8      	str	r0, [r7, #12]
 8018fe8:	60b9      	str	r1, [r7, #8]
 8018fea:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018fec:	68fb      	ldr	r3, [r7, #12]
 8018fee:	f103 012e 	add.w	r1, r3, #46	; 0x2e
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8018ff2:	68fb      	ldr	r3, [r7, #12]
 8018ff4:	f103 002e 	add.w	r0, r3, #46	; 0x2e
 8018ff8:	68fb      	ldr	r3, [r7, #12]
 8018ffa:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018ffc:	2201      	movs	r2, #1
 8018ffe:	9203      	str	r2, [sp, #12]
 8019000:	68ba      	ldr	r2, [r7, #8]
 8019002:	9202      	str	r2, [sp, #8]
 8019004:	4a06      	ldr	r2, [pc, #24]	; (8019020 <etharp_request_dst+0x40>)
 8019006:	9201      	str	r2, [sp, #4]
 8019008:	9300      	str	r3, [sp, #0]
 801900a:	4603      	mov	r3, r0
 801900c:	687a      	ldr	r2, [r7, #4]
 801900e:	68f8      	ldr	r0, [r7, #12]
 8019010:	f7ff ff42 	bl	8018e98 <etharp_raw>
 8019014:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8019016:	4618      	mov	r0, r3
 8019018:	3710      	adds	r7, #16
 801901a:	46bd      	mov	sp, r7
 801901c:	bd80      	pop	{r7, pc}
 801901e:	bf00      	nop
 8019020:	08026c04 	.word	0x08026c04

08019024 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8019024:	b580      	push	{r7, lr}
 8019026:	b082      	sub	sp, #8
 8019028:	af00      	add	r7, sp, #0
 801902a:	6078      	str	r0, [r7, #4]
 801902c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
 801902e:	4806      	ldr	r0, [pc, #24]	; (8019048 <etharp_request+0x24>)
 8019030:	f007 fa70 	bl	8020514 <puts>
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8019034:	4a05      	ldr	r2, [pc, #20]	; (801904c <etharp_request+0x28>)
 8019036:	6839      	ldr	r1, [r7, #0]
 8019038:	6878      	ldr	r0, [r7, #4]
 801903a:	f7ff ffd1 	bl	8018fe0 <etharp_request_dst>
 801903e:	4603      	mov	r3, r0
}
 8019040:	4618      	mov	r0, r3
 8019042:	3708      	adds	r7, #8
 8019044:	46bd      	mov	sp, r7
 8019046:	bd80      	pop	{r7, pc}
 8019048:	08025a70 	.word	0x08025a70
 801904c:	08026bfc 	.word	0x08026bfc

08019050 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8019050:	b580      	push	{r7, lr}
 8019052:	b08e      	sub	sp, #56	; 0x38
 8019054:	af04      	add	r7, sp, #16
 8019056:	6078      	str	r0, [r7, #4]
 8019058:	6039      	str	r1, [r7, #0]
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
 801905a:	4ba6      	ldr	r3, [pc, #664]	; (80192f4 <icmp_input+0x2a4>)
 801905c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8019060:	3301      	adds	r3, #1
 8019062:	b29a      	uxth	r2, r3
 8019064:	4ba3      	ldr	r3, [pc, #652]	; (80192f4 <icmp_input+0x2a4>)
 8019066:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801906a:	4ba3      	ldr	r3, [pc, #652]	; (80192f8 <icmp_input+0x2a8>)
 801906c:	689b      	ldr	r3, [r3, #8]
 801906e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8019070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019072:	781b      	ldrb	r3, [r3, #0]
 8019074:	f003 030f 	and.w	r3, r3, #15
 8019078:	b2db      	uxtb	r3, r3
 801907a:	009b      	lsls	r3, r3, #2
 801907c:	b2db      	uxtb	r3, r3
 801907e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8019080:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019082:	2b13      	cmp	r3, #19
 8019084:	f240 810e 	bls.w	80192a4 <icmp_input+0x254>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	895b      	ldrh	r3, [r3, #10]
 801908c:	2b03      	cmp	r3, #3
 801908e:	f240 810b 	bls.w	80192a8 <icmp_input+0x258>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	685b      	ldr	r3, [r3, #4]
 8019096:	781b      	ldrb	r3, [r3, #0]
 8019098:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	685b      	ldr	r3, [r3, #4]
 80190a0:	785b      	ldrb	r3, [r3, #1]
 80190a2:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80190a6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80190aa:	2b00      	cmp	r3, #0
 80190ac:	f000 80f3 	beq.w	8019296 <icmp_input+0x246>
 80190b0:	2b08      	cmp	r3, #8
 80190b2:	f040 80df 	bne.w	8019274 <icmp_input+0x224>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80190b6:	4b91      	ldr	r3, [pc, #580]	; (80192fc <icmp_input+0x2ac>)
 80190b8:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80190ba:	4b8f      	ldr	r3, [pc, #572]	; (80192f8 <icmp_input+0x2a8>)
 80190bc:	695b      	ldr	r3, [r3, #20]
 80190be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80190c2:	2be0      	cmp	r3, #224	; 0xe0
 80190c4:	f000 80ff 	beq.w	80192c6 <icmp_input+0x276>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80190c8:	4b8b      	ldr	r3, [pc, #556]	; (80192f8 <icmp_input+0x2a8>)
 80190ca:	695b      	ldr	r3, [r3, #20]
 80190cc:	4a8a      	ldr	r2, [pc, #552]	; (80192f8 <icmp_input+0x2a8>)
 80190ce:	6812      	ldr	r2, [r2, #0]
 80190d0:	4611      	mov	r1, r2
 80190d2:	4618      	mov	r0, r3
 80190d4:	f001 fca0 	bl	801aa18 <ip4_addr_isbroadcast_u32>
 80190d8:	4603      	mov	r3, r0
 80190da:	2b00      	cmp	r3, #0
 80190dc:	f040 80f5 	bne.w	80192ca <icmp_input+0x27a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	891b      	ldrh	r3, [r3, #8]
 80190e4:	2b07      	cmp	r3, #7
 80190e6:	f240 80e1 	bls.w	80192ac <icmp_input+0x25c>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 80190ea:	6878      	ldr	r0, [r7, #4]
 80190ec:	f7f3 ffd2 	bl	800d094 <inet_chksum_pbuf>
 80190f0:	4603      	mov	r3, r0
 80190f2:	2b00      	cmp	r3, #0
 80190f4:	d00b      	beq.n	801910e <icmp_input+0xbe>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 80190f6:	6878      	ldr	r0, [r7, #4]
 80190f8:	f7f5 fdca 	bl	800ec90 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
 80190fc:	4b7d      	ldr	r3, [pc, #500]	; (80192f4 <icmp_input+0x2a4>)
 80190fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8019102:	3301      	adds	r3, #1
 8019104:	b29a      	uxth	r2, r3
 8019106:	4b7b      	ldr	r3, [pc, #492]	; (80192f4 <icmp_input+0x2a4>)
 8019108:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 801910c:	e0ee      	b.n	80192ec <icmp_input+0x29c>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801910e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019110:	330e      	adds	r3, #14
 8019112:	4619      	mov	r1, r3
 8019114:	6878      	ldr	r0, [r7, #4]
 8019116:	f7f5 fd25 	bl	800eb64 <pbuf_add_header>
 801911a:	4603      	mov	r3, r0
 801911c:	2b00      	cmp	r3, #0
 801911e:	d04b      	beq.n	80191b8 <icmp_input+0x168>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8019120:	687b      	ldr	r3, [r7, #4]
 8019122:	891a      	ldrh	r2, [r3, #8]
 8019124:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019126:	4413      	add	r3, r2
 8019128:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	891b      	ldrh	r3, [r3, #8]
 801912e:	8b7a      	ldrh	r2, [r7, #26]
 8019130:	429a      	cmp	r2, r3
 8019132:	f0c0 80cc 	bcc.w	80192ce <icmp_input+0x27e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8019136:	8b7b      	ldrh	r3, [r7, #26]
 8019138:	f44f 7220 	mov.w	r2, #640	; 0x280
 801913c:	4619      	mov	r1, r3
 801913e:	200e      	movs	r0, #14
 8019140:	f7f5 fac2 	bl	800e6c8 <pbuf_alloc>
 8019144:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8019146:	697b      	ldr	r3, [r7, #20]
 8019148:	2b00      	cmp	r3, #0
 801914a:	f000 80c2 	beq.w	80192d2 <icmp_input+0x282>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801914e:	697b      	ldr	r3, [r7, #20]
 8019150:	895b      	ldrh	r3, [r3, #10]
 8019152:	461a      	mov	r2, r3
 8019154:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019156:	3308      	adds	r3, #8
 8019158:	429a      	cmp	r2, r3
 801915a:	d203      	bcs.n	8019164 <icmp_input+0x114>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801915c:	6978      	ldr	r0, [r7, #20]
 801915e:	f7f5 fd97 	bl	800ec90 <pbuf_free>
          goto icmperr;
 8019162:	e0b7      	b.n	80192d4 <icmp_input+0x284>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8019164:	697b      	ldr	r3, [r7, #20]
 8019166:	685b      	ldr	r3, [r3, #4]
 8019168:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801916a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801916c:	4618      	mov	r0, r3
 801916e:	f007 f875 	bl	802025c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8019172:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019174:	4619      	mov	r1, r3
 8019176:	6978      	ldr	r0, [r7, #20]
 8019178:	f7f5 fd04 	bl	800eb84 <pbuf_remove_header>
 801917c:	4603      	mov	r3, r0
 801917e:	2b00      	cmp	r3, #0
 8019180:	d009      	beq.n	8019196 <icmp_input+0x146>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8019182:	4b5f      	ldr	r3, [pc, #380]	; (8019300 <icmp_input+0x2b0>)
 8019184:	22b6      	movs	r2, #182	; 0xb6
 8019186:	495f      	ldr	r1, [pc, #380]	; (8019304 <icmp_input+0x2b4>)
 8019188:	485f      	ldr	r0, [pc, #380]	; (8019308 <icmp_input+0x2b8>)
 801918a:	f007 f927 	bl	80203dc <iprintf>
          pbuf_free(r);
 801918e:	6978      	ldr	r0, [r7, #20]
 8019190:	f7f5 fd7e 	bl	800ec90 <pbuf_free>
          goto icmperr;
 8019194:	e09e      	b.n	80192d4 <icmp_input+0x284>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8019196:	6879      	ldr	r1, [r7, #4]
 8019198:	6978      	ldr	r0, [r7, #20]
 801919a:	f7f5 fead 	bl	800eef8 <pbuf_copy>
 801919e:	4603      	mov	r3, r0
 80191a0:	2b00      	cmp	r3, #0
 80191a2:	d003      	beq.n	80191ac <icmp_input+0x15c>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80191a4:	6978      	ldr	r0, [r7, #20]
 80191a6:	f7f5 fd73 	bl	800ec90 <pbuf_free>
          goto icmperr;
 80191aa:	e093      	b.n	80192d4 <icmp_input+0x284>
        }
        /* free the original p */
        pbuf_free(p);
 80191ac:	6878      	ldr	r0, [r7, #4]
 80191ae:	f7f5 fd6f 	bl	800ec90 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80191b2:	697b      	ldr	r3, [r7, #20]
 80191b4:	607b      	str	r3, [r7, #4]
 80191b6:	e00f      	b.n	80191d8 <icmp_input+0x188>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80191b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80191ba:	330e      	adds	r3, #14
 80191bc:	4619      	mov	r1, r3
 80191be:	6878      	ldr	r0, [r7, #4]
 80191c0:	f7f5 fce0 	bl	800eb84 <pbuf_remove_header>
 80191c4:	4603      	mov	r3, r0
 80191c6:	2b00      	cmp	r3, #0
 80191c8:	d006      	beq.n	80191d8 <icmp_input+0x188>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80191ca:	4b4d      	ldr	r3, [pc, #308]	; (8019300 <icmp_input+0x2b0>)
 80191cc:	22c7      	movs	r2, #199	; 0xc7
 80191ce:	494f      	ldr	r1, [pc, #316]	; (801930c <icmp_input+0x2bc>)
 80191d0:	484d      	ldr	r0, [pc, #308]	; (8019308 <icmp_input+0x2b8>)
 80191d2:	f007 f903 	bl	80203dc <iprintf>
          goto icmperr;
 80191d6:	e07d      	b.n	80192d4 <icmp_input+0x284>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	685b      	ldr	r3, [r3, #4]
 80191dc:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80191de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80191e0:	4619      	mov	r1, r3
 80191e2:	6878      	ldr	r0, [r7, #4]
 80191e4:	f7f5 fcbe 	bl	800eb64 <pbuf_add_header>
 80191e8:	4603      	mov	r3, r0
 80191ea:	2b00      	cmp	r3, #0
 80191ec:	d155      	bne.n	801929a <icmp_input+0x24a>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	685b      	ldr	r3, [r3, #4]
 80191f2:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80191f4:	69fb      	ldr	r3, [r7, #28]
 80191f6:	681a      	ldr	r2, [r3, #0]
 80191f8:	68fb      	ldr	r3, [r7, #12]
 80191fa:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80191fc:	4b3e      	ldr	r3, [pc, #248]	; (80192f8 <icmp_input+0x2a8>)
 80191fe:	691a      	ldr	r2, [r3, #16]
 8019200:	68fb      	ldr	r3, [r7, #12]
 8019202:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8019204:	693b      	ldr	r3, [r7, #16]
 8019206:	2200      	movs	r2, #0
 8019208:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801920a:	693b      	ldr	r3, [r7, #16]
 801920c:	885b      	ldrh	r3, [r3, #2]
 801920e:	b29b      	uxth	r3, r3
 8019210:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8019214:	4293      	cmp	r3, r2
 8019216:	d907      	bls.n	8019228 <icmp_input+0x1d8>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8019218:	693b      	ldr	r3, [r7, #16]
 801921a:	885b      	ldrh	r3, [r3, #2]
 801921c:	b29b      	uxth	r3, r3
 801921e:	3309      	adds	r3, #9
 8019220:	b29a      	uxth	r2, r3
 8019222:	693b      	ldr	r3, [r7, #16]
 8019224:	805a      	strh	r2, [r3, #2]
 8019226:	e006      	b.n	8019236 <icmp_input+0x1e6>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8019228:	693b      	ldr	r3, [r7, #16]
 801922a:	885b      	ldrh	r3, [r3, #2]
 801922c:	b29b      	uxth	r3, r3
 801922e:	3308      	adds	r3, #8
 8019230:	b29a      	uxth	r2, r3
 8019232:	693b      	ldr	r3, [r7, #16]
 8019234:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8019236:	68fb      	ldr	r3, [r7, #12]
 8019238:	22ff      	movs	r2, #255	; 0xff
 801923a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801923c:	68fb      	ldr	r3, [r7, #12]
 801923e:	2200      	movs	r2, #0
 8019240:	729a      	strb	r2, [r3, #10]
 8019242:	2200      	movs	r2, #0
 8019244:	72da      	strb	r2, [r3, #11]
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
        }
#endif /* CHECKSUM_GEN_IP */

        ICMP_STATS_INC(icmp.xmit);
 8019246:	4b2b      	ldr	r3, [pc, #172]	; (80192f4 <icmp_input+0x2a4>)
 8019248:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801924c:	3301      	adds	r3, #1
 801924e:	b29a      	uxth	r2, r3
 8019250:	4b28      	ldr	r3, [pc, #160]	; (80192f4 <icmp_input+0x2a4>)
 8019252:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8019256:	683b      	ldr	r3, [r7, #0]
 8019258:	9302      	str	r3, [sp, #8]
 801925a:	2301      	movs	r3, #1
 801925c:	9301      	str	r3, [sp, #4]
 801925e:	2300      	movs	r3, #0
 8019260:	9300      	str	r3, [sp, #0]
 8019262:	23ff      	movs	r3, #255	; 0xff
 8019264:	2200      	movs	r2, #0
 8019266:	69f9      	ldr	r1, [r7, #28]
 8019268:	6878      	ldr	r0, [r7, #4]
 801926a:	f001 f96d 	bl	801a548 <ip4_output_if>
 801926e:	4603      	mov	r3, r0
 8019270:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8019272:	e012      	b.n	801929a <icmp_input+0x24a>
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
 8019274:	4b1f      	ldr	r3, [pc, #124]	; (80192f4 <icmp_input+0x2a4>)
 8019276:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 801927a:	3301      	adds	r3, #1
 801927c:	b29a      	uxth	r2, r3
 801927e:	4b1d      	ldr	r3, [pc, #116]	; (80192f4 <icmp_input+0x2a4>)
 8019280:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
      ICMP_STATS_INC(icmp.drop);
 8019284:	4b1b      	ldr	r3, [pc, #108]	; (80192f4 <icmp_input+0x2a4>)
 8019286:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801928a:	3301      	adds	r3, #1
 801928c:	b29a      	uxth	r2, r3
 801928e:	4b19      	ldr	r3, [pc, #100]	; (80192f4 <icmp_input+0x2a4>)
 8019290:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8019294:	e002      	b.n	801929c <icmp_input+0x24c>
      break;
 8019296:	bf00      	nop
 8019298:	e000      	b.n	801929c <icmp_input+0x24c>
      break;
 801929a:	bf00      	nop
  }
  pbuf_free(p);
 801929c:	6878      	ldr	r0, [r7, #4]
 801929e:	f7f5 fcf7 	bl	800ec90 <pbuf_free>
  return;
 80192a2:	e023      	b.n	80192ec <icmp_input+0x29c>
    goto lenerr;
 80192a4:	bf00      	nop
 80192a6:	e002      	b.n	80192ae <icmp_input+0x25e>
    goto lenerr;
 80192a8:	bf00      	nop
 80192aa:	e000      	b.n	80192ae <icmp_input+0x25e>
        goto lenerr;
 80192ac:	bf00      	nop
lenerr:
  pbuf_free(p);
 80192ae:	6878      	ldr	r0, [r7, #4]
 80192b0:	f7f5 fcee 	bl	800ec90 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 80192b4:	4b0f      	ldr	r3, [pc, #60]	; (80192f4 <icmp_input+0x2a4>)
 80192b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80192ba:	3301      	adds	r3, #1
 80192bc:	b29a      	uxth	r2, r3
 80192be:	4b0d      	ldr	r3, [pc, #52]	; (80192f4 <icmp_input+0x2a4>)
 80192c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80192c4:	e012      	b.n	80192ec <icmp_input+0x29c>
        goto icmperr;
 80192c6:	bf00      	nop
 80192c8:	e004      	b.n	80192d4 <icmp_input+0x284>
        goto icmperr;
 80192ca:	bf00      	nop
 80192cc:	e002      	b.n	80192d4 <icmp_input+0x284>
          goto icmperr;
 80192ce:	bf00      	nop
 80192d0:	e000      	b.n	80192d4 <icmp_input+0x284>
          goto icmperr;
 80192d2:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80192d4:	6878      	ldr	r0, [r7, #4]
 80192d6:	f7f5 fcdb 	bl	800ec90 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 80192da:	4b06      	ldr	r3, [pc, #24]	; (80192f4 <icmp_input+0x2a4>)
 80192dc:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 80192e0:	3301      	adds	r3, #1
 80192e2:	b29a      	uxth	r2, r3
 80192e4:	4b03      	ldr	r3, [pc, #12]	; (80192f4 <icmp_input+0x2a4>)
 80192e6:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80192ea:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80192ec:	3728      	adds	r7, #40	; 0x28
 80192ee:	46bd      	mov	sp, r7
 80192f0:	bd80      	pop	{r7, pc}
 80192f2:	bf00      	nop
 80192f4:	2000a3ec 	.word	0x2000a3ec
 80192f8:	200070d4 	.word	0x200070d4
 80192fc:	200070e8 	.word	0x200070e8
 8019300:	08025a98 	.word	0x08025a98
 8019304:	08025ad0 	.word	0x08025ad0
 8019308:	08025b08 	.word	0x08025b08
 801930c:	08025b30 	.word	0x08025b30

08019310 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8019310:	b580      	push	{r7, lr}
 8019312:	b082      	sub	sp, #8
 8019314:	af00      	add	r7, sp, #0
 8019316:	6078      	str	r0, [r7, #4]
 8019318:	460b      	mov	r3, r1
 801931a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801931c:	78fb      	ldrb	r3, [r7, #3]
 801931e:	461a      	mov	r2, r3
 8019320:	2103      	movs	r1, #3
 8019322:	6878      	ldr	r0, [r7, #4]
 8019324:	f000 f814 	bl	8019350 <icmp_send_response>
}
 8019328:	bf00      	nop
 801932a:	3708      	adds	r7, #8
 801932c:	46bd      	mov	sp, r7
 801932e:	bd80      	pop	{r7, pc}

08019330 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8019330:	b580      	push	{r7, lr}
 8019332:	b082      	sub	sp, #8
 8019334:	af00      	add	r7, sp, #0
 8019336:	6078      	str	r0, [r7, #4]
 8019338:	460b      	mov	r3, r1
 801933a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801933c:	78fb      	ldrb	r3, [r7, #3]
 801933e:	461a      	mov	r2, r3
 8019340:	210b      	movs	r1, #11
 8019342:	6878      	ldr	r0, [r7, #4]
 8019344:	f000 f804 	bl	8019350 <icmp_send_response>
}
 8019348:	bf00      	nop
 801934a:	3708      	adds	r7, #8
 801934c:	46bd      	mov	sp, r7
 801934e:	bd80      	pop	{r7, pc}

08019350 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8019350:	b580      	push	{r7, lr}
 8019352:	b08c      	sub	sp, #48	; 0x30
 8019354:	af04      	add	r7, sp, #16
 8019356:	6078      	str	r0, [r7, #4]
 8019358:	460b      	mov	r3, r1
 801935a:	70fb      	strb	r3, [r7, #3]
 801935c:	4613      	mov	r3, r2
 801935e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8019360:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019364:	2124      	movs	r1, #36	; 0x24
 8019366:	2022      	movs	r0, #34	; 0x22
 8019368:	f7f5 f9ae 	bl	800e6c8 <pbuf_alloc>
 801936c:	61b8      	str	r0, [r7, #24]
                 PBUF_RAM);
  if (q == NULL) {
 801936e:	69bb      	ldr	r3, [r7, #24]
 8019370:	2b00      	cmp	r3, #0
 8019372:	d05e      	beq.n	8019432 <icmp_send_response+0xe2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8019374:	69bb      	ldr	r3, [r7, #24]
 8019376:	895b      	ldrh	r3, [r3, #10]
 8019378:	2b23      	cmp	r3, #35	; 0x23
 801937a:	d806      	bhi.n	801938a <icmp_send_response+0x3a>
 801937c:	4b2f      	ldr	r3, [pc, #188]	; (801943c <icmp_send_response+0xec>)
 801937e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8019382:	492f      	ldr	r1, [pc, #188]	; (8019440 <icmp_send_response+0xf0>)
 8019384:	482f      	ldr	r0, [pc, #188]	; (8019444 <icmp_send_response+0xf4>)
 8019386:	f007 f829 	bl	80203dc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	685b      	ldr	r3, [r3, #4]
 801938e:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8019390:	69bb      	ldr	r3, [r7, #24]
 8019392:	685b      	ldr	r3, [r3, #4]
 8019394:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
 8019396:	693b      	ldr	r3, [r7, #16]
 8019398:	78fa      	ldrb	r2, [r7, #3]
 801939a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801939c:	693b      	ldr	r3, [r7, #16]
 801939e:	78ba      	ldrb	r2, [r7, #2]
 80193a0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80193a2:	693b      	ldr	r3, [r7, #16]
 80193a4:	2200      	movs	r2, #0
 80193a6:	711a      	strb	r2, [r3, #4]
 80193a8:	2200      	movs	r2, #0
 80193aa:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80193ac:	693b      	ldr	r3, [r7, #16]
 80193ae:	2200      	movs	r2, #0
 80193b0:	719a      	strb	r2, [r3, #6]
 80193b2:	2200      	movs	r2, #0
 80193b4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80193b6:	69bb      	ldr	r3, [r7, #24]
 80193b8:	685b      	ldr	r3, [r3, #4]
 80193ba:	f103 0008 	add.w	r0, r3, #8
 80193be:	687b      	ldr	r3, [r7, #4]
 80193c0:	685b      	ldr	r3, [r3, #4]
 80193c2:	221c      	movs	r2, #28
 80193c4:	4619      	mov	r1, r3
 80193c6:	f006 ff49 	bl	802025c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80193ca:	697b      	ldr	r3, [r7, #20]
 80193cc:	68db      	ldr	r3, [r3, #12]
 80193ce:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80193d0:	f107 030c 	add.w	r3, r7, #12
 80193d4:	4618      	mov	r0, r3
 80193d6:	f000 fd57 	bl	8019e88 <ip4_route>
 80193da:	61f8      	str	r0, [r7, #28]
#endif
  if (netif != NULL) {
 80193dc:	69fb      	ldr	r3, [r7, #28]
 80193de:	2b00      	cmp	r3, #0
 80193e0:	d023      	beq.n	801942a <icmp_send_response+0xda>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80193e2:	693b      	ldr	r3, [r7, #16]
 80193e4:	2200      	movs	r2, #0
 80193e6:	709a      	strb	r2, [r3, #2]
 80193e8:	2200      	movs	r2, #0
 80193ea:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80193ec:	69bb      	ldr	r3, [r7, #24]
 80193ee:	895b      	ldrh	r3, [r3, #10]
 80193f0:	4619      	mov	r1, r3
 80193f2:	6938      	ldr	r0, [r7, #16]
 80193f4:	f7f3 fe3c 	bl	800d070 <inet_chksum>
 80193f8:	4603      	mov	r3, r0
 80193fa:	461a      	mov	r2, r3
 80193fc:	693b      	ldr	r3, [r7, #16]
 80193fe:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 8019400:	4b11      	ldr	r3, [pc, #68]	; (8019448 <icmp_send_response+0xf8>)
 8019402:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019406:	3301      	adds	r3, #1
 8019408:	b29a      	uxth	r2, r3
 801940a:	4b0f      	ldr	r3, [pc, #60]	; (8019448 <icmp_send_response+0xf8>)
 801940c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8019410:	f107 020c 	add.w	r2, r7, #12
 8019414:	69fb      	ldr	r3, [r7, #28]
 8019416:	9302      	str	r3, [sp, #8]
 8019418:	2301      	movs	r3, #1
 801941a:	9301      	str	r3, [sp, #4]
 801941c:	2300      	movs	r3, #0
 801941e:	9300      	str	r3, [sp, #0]
 8019420:	23ff      	movs	r3, #255	; 0xff
 8019422:	2100      	movs	r1, #0
 8019424:	69b8      	ldr	r0, [r7, #24]
 8019426:	f001 f88f 	bl	801a548 <ip4_output_if>
  }
  pbuf_free(q);
 801942a:	69b8      	ldr	r0, [r7, #24]
 801942c:	f7f5 fc30 	bl	800ec90 <pbuf_free>
 8019430:	e000      	b.n	8019434 <icmp_send_response+0xe4>
    return;
 8019432:	bf00      	nop
}
 8019434:	3720      	adds	r7, #32
 8019436:	46bd      	mov	sp, r7
 8019438:	bd80      	pop	{r7, pc}
 801943a:	bf00      	nop
 801943c:	08025a98 	.word	0x08025a98
 8019440:	08025b64 	.word	0x08025b64
 8019444:	08025b08 	.word	0x08025b08
 8019448:	2000a3ec 	.word	0x2000a3ec

0801944c <igmp_init>:
/**
 * Initialize the IGMP module
 */
void
igmp_init(void)
{
 801944c:	b480      	push	{r7}
 801944e:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_init: initializing\n"));

  IP4_ADDR(&allsystems, 224, 0, 0, 1);
 8019450:	4b05      	ldr	r3, [pc, #20]	; (8019468 <igmp_init+0x1c>)
 8019452:	4a06      	ldr	r2, [pc, #24]	; (801946c <igmp_init+0x20>)
 8019454:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&allrouters, 224, 0, 0, 2);
 8019456:	4b06      	ldr	r3, [pc, #24]	; (8019470 <igmp_init+0x24>)
 8019458:	4a06      	ldr	r2, [pc, #24]	; (8019474 <igmp_init+0x28>)
 801945a:	601a      	str	r2, [r3, #0]
}
 801945c:	bf00      	nop
 801945e:	46bd      	mov	sp, r7
 8019460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019464:	4770      	bx	lr
 8019466:	bf00      	nop
 8019468:	20006988 	.word	0x20006988
 801946c:	010000e0 	.word	0x010000e0
 8019470:	2000698c 	.word	0x2000698c
 8019474:	020000e0 	.word	0x020000e0

08019478 <igmp_start>:
 *
 * @param netif network interface on which start IGMP processing
 */
err_t
igmp_start(struct netif *netif)
{
 8019478:	b580      	push	{r7, lr}
 801947a:	b084      	sub	sp, #16
 801947c:	af00      	add	r7, sp, #0
 801947e:	6078      	str	r0, [r7, #4]
  struct igmp_group *group;

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: starting IGMP processing on if %p\n", (void *)netif));

  group = igmp_lookup_group(netif, &allsystems);
 8019480:	4911      	ldr	r1, [pc, #68]	; (80194c8 <igmp_start+0x50>)
 8019482:	6878      	ldr	r0, [r7, #4]
 8019484:	f000 f85e 	bl	8019544 <igmp_lookup_group>
 8019488:	60f8      	str	r0, [r7, #12]

  if (group != NULL) {
 801948a:	68fb      	ldr	r3, [r7, #12]
 801948c:	2b00      	cmp	r3, #0
 801948e:	d014      	beq.n	80194ba <igmp_start+0x42>
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 8019490:	68fb      	ldr	r3, [r7, #12]
 8019492:	2202      	movs	r2, #2
 8019494:	725a      	strb	r2, [r3, #9]
    group->use++;
 8019496:	68fb      	ldr	r3, [r7, #12]
 8019498:	7b1b      	ldrb	r3, [r3, #12]
 801949a:	3301      	adds	r3, #1
 801949c:	b2da      	uxtb	r2, r3
 801949e:	68fb      	ldr	r3, [r7, #12]
 80194a0:	731a      	strb	r2, [r3, #12]

    /* Allow the igmp messages at the MAC level */
    if (netif->igmp_mac_filter != NULL) {
 80194a2:	687b      	ldr	r3, [r7, #4]
 80194a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	d005      	beq.n	80194b6 <igmp_start+0x3e>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: igmp_mac_filter(ADD "));
      ip4_addr_debug_print_val(IGMP_DEBUG, allsystems);
      LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void *)netif));
      netif->igmp_mac_filter(netif, &allsystems, NETIF_ADD_MAC_FILTER);
 80194aa:	687b      	ldr	r3, [r7, #4]
 80194ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80194ae:	2201      	movs	r2, #1
 80194b0:	4905      	ldr	r1, [pc, #20]	; (80194c8 <igmp_start+0x50>)
 80194b2:	6878      	ldr	r0, [r7, #4]
 80194b4:	4798      	blx	r3
    }

    return ERR_OK;
 80194b6:	2300      	movs	r3, #0
 80194b8:	e001      	b.n	80194be <igmp_start+0x46>
  }

  return ERR_MEM;
 80194ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80194be:	4618      	mov	r0, r3
 80194c0:	3710      	adds	r7, #16
 80194c2:	46bd      	mov	sp, r7
 80194c4:	bd80      	pop	{r7, pc}
 80194c6:	bf00      	nop
 80194c8:	20006988 	.word	0x20006988

080194cc <igmp_report_groups>:
 *
 * @param netif network interface on which report IGMP memberships
 */
void
igmp_report_groups(struct netif *netif)
{
 80194cc:	b580      	push	{r7, lr}
 80194ce:	b084      	sub	sp, #16
 80194d0:	af00      	add	r7, sp, #0
 80194d2:	6078      	str	r0, [r7, #4]
  struct igmp_group *group = netif_igmp_data(netif);
 80194d4:	687b      	ldr	r3, [r7, #4]
 80194d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80194d8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_report_groups: sending IGMP reports on if %p\n", (void *)netif));

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  if (group != NULL) {
 80194da:	68fb      	ldr	r3, [r7, #12]
 80194dc:	2b00      	cmp	r3, #0
 80194de:	d00a      	beq.n	80194f6 <igmp_report_groups+0x2a>
    group = group->next;
 80194e0:	68fb      	ldr	r3, [r7, #12]
 80194e2:	681b      	ldr	r3, [r3, #0]
 80194e4:	60fb      	str	r3, [r7, #12]
  }

  while (group != NULL) {
 80194e6:	e006      	b.n	80194f6 <igmp_report_groups+0x2a>
    igmp_delaying_member(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
 80194e8:	2105      	movs	r1, #5
 80194ea:	68f8      	ldr	r0, [r7, #12]
 80194ec:	f000 fbfb 	bl	8019ce6 <igmp_delaying_member>
    group = group->next;
 80194f0:	68fb      	ldr	r3, [r7, #12]
 80194f2:	681b      	ldr	r3, [r3, #0]
 80194f4:	60fb      	str	r3, [r7, #12]
  while (group != NULL) {
 80194f6:	68fb      	ldr	r3, [r7, #12]
 80194f8:	2b00      	cmp	r3, #0
 80194fa:	d1f5      	bne.n	80194e8 <igmp_report_groups+0x1c>
  }
}
 80194fc:	bf00      	nop
 80194fe:	bf00      	nop
 8019500:	3710      	adds	r7, #16
 8019502:	46bd      	mov	sp, r7
 8019504:	bd80      	pop	{r7, pc}

08019506 <igmp_lookfor_group>:
 * @return a struct igmp_group* if the group has been found,
 *         NULL if the group wasn't found.
 */
struct igmp_group *
igmp_lookfor_group(struct netif *ifp, const ip4_addr_t *addr)
{
 8019506:	b480      	push	{r7}
 8019508:	b085      	sub	sp, #20
 801950a:	af00      	add	r7, sp, #0
 801950c:	6078      	str	r0, [r7, #4]
 801950e:	6039      	str	r1, [r7, #0]
  struct igmp_group *group = netif_igmp_data(ifp);
 8019510:	687b      	ldr	r3, [r7, #4]
 8019512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019514:	60fb      	str	r3, [r7, #12]

  while (group != NULL) {
 8019516:	e00a      	b.n	801952e <igmp_lookfor_group+0x28>
    if (ip4_addr_cmp(&(group->group_address), addr)) {
 8019518:	68fb      	ldr	r3, [r7, #12]
 801951a:	685a      	ldr	r2, [r3, #4]
 801951c:	683b      	ldr	r3, [r7, #0]
 801951e:	681b      	ldr	r3, [r3, #0]
 8019520:	429a      	cmp	r2, r3
 8019522:	d101      	bne.n	8019528 <igmp_lookfor_group+0x22>
      return group;
 8019524:	68fb      	ldr	r3, [r7, #12]
 8019526:	e006      	b.n	8019536 <igmp_lookfor_group+0x30>
    }
    group = group->next;
 8019528:	68fb      	ldr	r3, [r7, #12]
 801952a:	681b      	ldr	r3, [r3, #0]
 801952c:	60fb      	str	r3, [r7, #12]
  while (group != NULL) {
 801952e:	68fb      	ldr	r3, [r7, #12]
 8019530:	2b00      	cmp	r3, #0
 8019532:	d1f1      	bne.n	8019518 <igmp_lookfor_group+0x12>
  }

  /* to be clearer, we return NULL here instead of
   * 'group' (which is also NULL at this point).
   */
  return NULL;
 8019534:	2300      	movs	r3, #0
}
 8019536:	4618      	mov	r0, r3
 8019538:	3714      	adds	r7, #20
 801953a:	46bd      	mov	sp, r7
 801953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019540:	4770      	bx	lr
	...

08019544 <igmp_lookup_group>:
 * @return a struct igmp_group*,
 *         NULL on memory error.
 */
static struct igmp_group *
igmp_lookup_group(struct netif *ifp, const ip4_addr_t *addr)
{
 8019544:	b580      	push	{r7, lr}
 8019546:	b084      	sub	sp, #16
 8019548:	af00      	add	r7, sp, #0
 801954a:	6078      	str	r0, [r7, #4]
 801954c:	6039      	str	r1, [r7, #0]
  struct igmp_group *group;
  struct igmp_group *list_head = netif_igmp_data(ifp);
 801954e:	687b      	ldr	r3, [r7, #4]
 8019550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019552:	60fb      	str	r3, [r7, #12]

  /* Search if the group already exists */
  group = igmp_lookfor_group(ifp, addr);
 8019554:	6839      	ldr	r1, [r7, #0]
 8019556:	6878      	ldr	r0, [r7, #4]
 8019558:	f7ff ffd5 	bl	8019506 <igmp_lookfor_group>
 801955c:	60b8      	str	r0, [r7, #8]
  if (group != NULL) {
 801955e:	68bb      	ldr	r3, [r7, #8]
 8019560:	2b00      	cmp	r3, #0
 8019562:	d001      	beq.n	8019568 <igmp_lookup_group+0x24>
    /* Group already exists. */
    return group;
 8019564:	68bb      	ldr	r3, [r7, #8]
 8019566:	e047      	b.n	80195f8 <igmp_lookup_group+0xb4>
  }

  /* Group doesn't exist yet, create a new one */
  group = (struct igmp_group *)memp_malloc(MEMP_IGMP_GROUP);
 8019568:	200a      	movs	r0, #10
 801956a:	f7f4 fb59 	bl	800dc20 <memp_malloc>
 801956e:	60b8      	str	r0, [r7, #8]
  if (group != NULL) {
 8019570:	68bb      	ldr	r3, [r7, #8]
 8019572:	2b00      	cmp	r3, #0
 8019574:	d03f      	beq.n	80195f6 <igmp_lookup_group+0xb2>
    ip4_addr_set(&(group->group_address), addr);
 8019576:	683b      	ldr	r3, [r7, #0]
 8019578:	2b00      	cmp	r3, #0
 801957a:	d002      	beq.n	8019582 <igmp_lookup_group+0x3e>
 801957c:	683b      	ldr	r3, [r7, #0]
 801957e:	681b      	ldr	r3, [r3, #0]
 8019580:	e000      	b.n	8019584 <igmp_lookup_group+0x40>
 8019582:	2300      	movs	r3, #0
 8019584:	68ba      	ldr	r2, [r7, #8]
 8019586:	6053      	str	r3, [r2, #4]
    group->timer              = 0; /* Not running */
 8019588:	68bb      	ldr	r3, [r7, #8]
 801958a:	2200      	movs	r2, #0
 801958c:	815a      	strh	r2, [r3, #10]
    group->group_state        = IGMP_GROUP_NON_MEMBER;
 801958e:	68bb      	ldr	r3, [r7, #8]
 8019590:	2200      	movs	r2, #0
 8019592:	725a      	strb	r2, [r3, #9]
    group->last_reporter_flag = 0;
 8019594:	68bb      	ldr	r3, [r7, #8]
 8019596:	2200      	movs	r2, #0
 8019598:	721a      	strb	r2, [r3, #8]
    group->use                = 0;
 801959a:	68bb      	ldr	r3, [r7, #8]
 801959c:	2200      	movs	r2, #0
 801959e:	731a      	strb	r2, [r3, #12]

    /* Ensure allsystems group is always first in list */
    if (list_head == NULL) {
 80195a0:	68fb      	ldr	r3, [r7, #12]
 80195a2:	2b00      	cmp	r3, #0
 80195a4:	d113      	bne.n	80195ce <igmp_lookup_group+0x8a>
      /* this is the first entry in linked list */
      LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
 80195a6:	683b      	ldr	r3, [r7, #0]
 80195a8:	681a      	ldr	r2, [r3, #0]
 80195aa:	4b15      	ldr	r3, [pc, #84]	; (8019600 <igmp_lookup_group+0xbc>)
 80195ac:	681b      	ldr	r3, [r3, #0]
 80195ae:	429a      	cmp	r2, r3
 80195b0:	d006      	beq.n	80195c0 <igmp_lookup_group+0x7c>
 80195b2:	4b14      	ldr	r3, [pc, #80]	; (8019604 <igmp_lookup_group+0xc0>)
 80195b4:	f44f 7286 	mov.w	r2, #268	; 0x10c
 80195b8:	4913      	ldr	r1, [pc, #76]	; (8019608 <igmp_lookup_group+0xc4>)
 80195ba:	4814      	ldr	r0, [pc, #80]	; (801960c <igmp_lookup_group+0xc8>)
 80195bc:	f006 ff0e 	bl	80203dc <iprintf>
                  (ip4_addr_cmp(addr, &allsystems) != 0));
      group->next = NULL;
 80195c0:	68bb      	ldr	r3, [r7, #8]
 80195c2:	2200      	movs	r2, #0
 80195c4:	601a      	str	r2, [r3, #0]
      netif_set_client_data(ifp, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, group);
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	68ba      	ldr	r2, [r7, #8]
 80195ca:	629a      	str	r2, [r3, #40]	; 0x28
 80195cc:	e013      	b.n	80195f6 <igmp_lookup_group+0xb2>
    } else {
      /* append _after_ first entry */
      LWIP_ASSERT("igmp_lookup_group: all except first group must not be allsystems",
 80195ce:	683b      	ldr	r3, [r7, #0]
 80195d0:	681a      	ldr	r2, [r3, #0]
 80195d2:	4b0b      	ldr	r3, [pc, #44]	; (8019600 <igmp_lookup_group+0xbc>)
 80195d4:	681b      	ldr	r3, [r3, #0]
 80195d6:	429a      	cmp	r2, r3
 80195d8:	d106      	bne.n	80195e8 <igmp_lookup_group+0xa4>
 80195da:	4b0a      	ldr	r3, [pc, #40]	; (8019604 <igmp_lookup_group+0xc0>)
 80195dc:	f44f 7289 	mov.w	r2, #274	; 0x112
 80195e0:	490b      	ldr	r1, [pc, #44]	; (8019610 <igmp_lookup_group+0xcc>)
 80195e2:	480a      	ldr	r0, [pc, #40]	; (801960c <igmp_lookup_group+0xc8>)
 80195e4:	f006 fefa 	bl	80203dc <iprintf>
                  (ip4_addr_cmp(addr, &allsystems) == 0));
      group->next = list_head->next;
 80195e8:	68fb      	ldr	r3, [r7, #12]
 80195ea:	681a      	ldr	r2, [r3, #0]
 80195ec:	68bb      	ldr	r3, [r7, #8]
 80195ee:	601a      	str	r2, [r3, #0]
      list_head->next = group;
 80195f0:	68fb      	ldr	r3, [r7, #12]
 80195f2:	68ba      	ldr	r2, [r7, #8]
 80195f4:	601a      	str	r2, [r3, #0]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_lookup_group: %sallocated a new group with address ", (group ? "" : "impossible to ")));
  ip4_addr_debug_print(IGMP_DEBUG, addr);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)ifp));

  return group;
 80195f6:	68bb      	ldr	r3, [r7, #8]
}
 80195f8:	4618      	mov	r0, r3
 80195fa:	3710      	adds	r7, #16
 80195fc:	46bd      	mov	sp, r7
 80195fe:	bd80      	pop	{r7, pc}
 8019600:	20006988 	.word	0x20006988
 8019604:	08025b90 	.word	0x08025b90
 8019608:	08025bc8 	.word	0x08025bc8
 801960c:	08025bfc 	.word	0x08025bfc
 8019610:	08025c24 	.word	0x08025c24

08019614 <igmp_remove_group>:
 * @param group the group to remove from the netif's igmp group list
 * @return ERR_OK if group was removed from the list, an err_t otherwise
 */
static err_t
igmp_remove_group(struct netif *netif, struct igmp_group *group)
{
 8019614:	b480      	push	{r7}
 8019616:	b085      	sub	sp, #20
 8019618:	af00      	add	r7, sp, #0
 801961a:	6078      	str	r0, [r7, #4]
 801961c:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 801961e:	2300      	movs	r3, #0
 8019620:	73fb      	strb	r3, [r7, #15]
  struct igmp_group *tmp_group;

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  for (tmp_group = netif_igmp_data(netif); tmp_group != NULL; tmp_group = tmp_group->next) {
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019626:	60bb      	str	r3, [r7, #8]
 8019628:	e00c      	b.n	8019644 <igmp_remove_group+0x30>
    if (tmp_group->next == group) {
 801962a:	68bb      	ldr	r3, [r7, #8]
 801962c:	681b      	ldr	r3, [r3, #0]
 801962e:	683a      	ldr	r2, [r7, #0]
 8019630:	429a      	cmp	r2, r3
 8019632:	d104      	bne.n	801963e <igmp_remove_group+0x2a>
      tmp_group->next = group->next;
 8019634:	683b      	ldr	r3, [r7, #0]
 8019636:	681a      	ldr	r2, [r3, #0]
 8019638:	68bb      	ldr	r3, [r7, #8]
 801963a:	601a      	str	r2, [r3, #0]
      break;
 801963c:	e005      	b.n	801964a <igmp_remove_group+0x36>
  for (tmp_group = netif_igmp_data(netif); tmp_group != NULL; tmp_group = tmp_group->next) {
 801963e:	68bb      	ldr	r3, [r7, #8]
 8019640:	681b      	ldr	r3, [r3, #0]
 8019642:	60bb      	str	r3, [r7, #8]
 8019644:	68bb      	ldr	r3, [r7, #8]
 8019646:	2b00      	cmp	r3, #0
 8019648:	d1ef      	bne.n	801962a <igmp_remove_group+0x16>
    }
  }
  /* Group not found in netif's igmp group list */
  if (tmp_group == NULL) {
 801964a:	68bb      	ldr	r3, [r7, #8]
 801964c:	2b00      	cmp	r3, #0
 801964e:	d101      	bne.n	8019654 <igmp_remove_group+0x40>
    err = ERR_ARG;
 8019650:	23f0      	movs	r3, #240	; 0xf0
 8019652:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8019654:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019658:	4618      	mov	r0, r3
 801965a:	3714      	adds	r7, #20
 801965c:	46bd      	mov	sp, r7
 801965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019662:	4770      	bx	lr

08019664 <igmp_input>:
 * @param inp network interface on which the packet was received
 * @param dest destination ip address of the igmp packet
 */
void
igmp_input(struct pbuf *p, struct netif *inp, const ip4_addr_t *dest)
{
 8019664:	b580      	push	{r7, lr}
 8019666:	b088      	sub	sp, #32
 8019668:	af00      	add	r7, sp, #0
 801966a:	60f8      	str	r0, [r7, #12]
 801966c:	60b9      	str	r1, [r7, #8]
 801966e:	607a      	str	r2, [r7, #4]
  struct igmp_msg   *igmp;
  struct igmp_group *group;
  struct igmp_group *groupref;

  IGMP_STATS_INC(igmp.recv);
 8019670:	4b77      	ldr	r3, [pc, #476]	; (8019850 <igmp_input+0x1ec>)
 8019672:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8019676:	3301      	adds	r3, #1
 8019678:	b29a      	uxth	r2, r3
 801967a:	4b75      	ldr	r3, [pc, #468]	; (8019850 <igmp_input+0x1ec>)
 801967c:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

  /* Note that the length CAN be greater than 8 but only 8 are used - All are included in the checksum */
  if (p->len < IGMP_MINLEN) {
 8019680:	68fb      	ldr	r3, [r7, #12]
 8019682:	895b      	ldrh	r3, [r3, #10]
 8019684:	2b07      	cmp	r3, #7
 8019686:	d80b      	bhi.n	80196a0 <igmp_input+0x3c>
    pbuf_free(p);
 8019688:	68f8      	ldr	r0, [r7, #12]
 801968a:	f7f5 fb01 	bl	800ec90 <pbuf_free>
    IGMP_STATS_INC(igmp.lenerr);
 801968e:	4b70      	ldr	r3, [pc, #448]	; (8019850 <igmp_input+0x1ec>)
 8019690:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8019694:	3301      	adds	r3, #1
 8019696:	b29a      	uxth	r2, r3
 8019698:	4b6d      	ldr	r3, [pc, #436]	; (8019850 <igmp_input+0x1ec>)
 801969a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: length error\n"));
    return;
 801969e:	e0d3      	b.n	8019848 <igmp_input+0x1e4>
  LWIP_DEBUGF(IGMP_DEBUG, (" to address "));
  ip4_addr_debug_print_val(IGMP_DEBUG, ip4_current_header()->dest);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)inp));

  /* Now calculate and check the checksum */
  igmp = (struct igmp_msg *)p->payload;
 80196a0:	68fb      	ldr	r3, [r7, #12]
 80196a2:	685b      	ldr	r3, [r3, #4]
 80196a4:	61bb      	str	r3, [r7, #24]
  if (inet_chksum(igmp, p->len)) {
 80196a6:	68fb      	ldr	r3, [r7, #12]
 80196a8:	895b      	ldrh	r3, [r3, #10]
 80196aa:	4619      	mov	r1, r3
 80196ac:	69b8      	ldr	r0, [r7, #24]
 80196ae:	f7f3 fcdf 	bl	800d070 <inet_chksum>
 80196b2:	4603      	mov	r3, r0
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	d00b      	beq.n	80196d0 <igmp_input+0x6c>
    pbuf_free(p);
 80196b8:	68f8      	ldr	r0, [r7, #12]
 80196ba:	f7f5 fae9 	bl	800ec90 <pbuf_free>
    IGMP_STATS_INC(igmp.chkerr);
 80196be:	4b64      	ldr	r3, [pc, #400]	; (8019850 <igmp_input+0x1ec>)
 80196c0:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 80196c4:	3301      	adds	r3, #1
 80196c6:	b29a      	uxth	r2, r3
 80196c8:	4b61      	ldr	r3, [pc, #388]	; (8019850 <igmp_input+0x1ec>)
 80196ca:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: checksum error\n"));
    return;
 80196ce:	e0bb      	b.n	8019848 <igmp_input+0x1e4>
  }

  /* Packet is ok so find an existing group */
  group = igmp_lookfor_group(inp, dest); /* use the destination IP address of incoming packet */
 80196d0:	6879      	ldr	r1, [r7, #4]
 80196d2:	68b8      	ldr	r0, [r7, #8]
 80196d4:	f7ff ff17 	bl	8019506 <igmp_lookfor_group>
 80196d8:	4603      	mov	r3, r0
 80196da:	617b      	str	r3, [r7, #20]

  /* If group can be found or create... */
  if (!group) {
 80196dc:	697b      	ldr	r3, [r7, #20]
 80196de:	2b00      	cmp	r3, #0
 80196e0:	d10b      	bne.n	80196fa <igmp_input+0x96>
    pbuf_free(p);
 80196e2:	68f8      	ldr	r0, [r7, #12]
 80196e4:	f7f5 fad4 	bl	800ec90 <pbuf_free>
    IGMP_STATS_INC(igmp.drop);
 80196e8:	4b59      	ldr	r3, [pc, #356]	; (8019850 <igmp_input+0x1ec>)
 80196ea:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80196ee:	3301      	adds	r3, #1
 80196f0:	b29a      	uxth	r2, r3
 80196f2:	4b57      	ldr	r3, [pc, #348]	; (8019850 <igmp_input+0x1ec>)
 80196f4:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP frame not for us\n"));
    return;
 80196f8:	e0a6      	b.n	8019848 <igmp_input+0x1e4>
  }

  /* NOW ACT ON THE INCOMING MESSAGE TYPE... */
  switch (igmp->igmp_msgtype) {
 80196fa:	69bb      	ldr	r3, [r7, #24]
 80196fc:	781b      	ldrb	r3, [r3, #0]
 80196fe:	2b11      	cmp	r3, #17
 8019700:	d002      	beq.n	8019708 <igmp_input+0xa4>
 8019702:	2b16      	cmp	r3, #22
 8019704:	d07c      	beq.n	8019800 <igmp_input+0x19c>
 8019706:	e091      	b.n	801982c <igmp_input+0x1c8>
    case IGMP_MEMB_QUERY:
      /* IGMP_MEMB_QUERY to the "all systems" address ? */
      if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 8019708:	687b      	ldr	r3, [r7, #4]
 801970a:	681a      	ldr	r2, [r3, #0]
 801970c:	4b51      	ldr	r3, [pc, #324]	; (8019854 <igmp_input+0x1f0>)
 801970e:	681b      	ldr	r3, [r3, #0]
 8019710:	429a      	cmp	r2, r3
 8019712:	d136      	bne.n	8019782 <igmp_input+0x11e>
 8019714:	69bb      	ldr	r3, [r7, #24]
 8019716:	3304      	adds	r3, #4
 8019718:	2b00      	cmp	r3, #0
 801971a:	d003      	beq.n	8019724 <igmp_input+0xc0>
 801971c:	69bb      	ldr	r3, [r7, #24]
 801971e:	685b      	ldr	r3, [r3, #4]
 8019720:	2b00      	cmp	r3, #0
 8019722:	d12e      	bne.n	8019782 <igmp_input+0x11e>
        /* THIS IS THE GENERAL QUERY */
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: General IGMP_MEMB_QUERY on \"ALL SYSTEMS\" address (224.0.0.1) [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));

        if (igmp->igmp_maxresp == 0) {
 8019724:	69bb      	ldr	r3, [r7, #24]
 8019726:	785b      	ldrb	r3, [r3, #1]
 8019728:	2b00      	cmp	r3, #0
 801972a:	d10b      	bne.n	8019744 <igmp_input+0xe0>
          IGMP_STATS_INC(igmp.rx_v1);
 801972c:	4b48      	ldr	r3, [pc, #288]	; (8019850 <igmp_input+0x1ec>)
 801972e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8019732:	3301      	adds	r3, #1
 8019734:	b29a      	uxth	r2, r3
 8019736:	4b46      	ldr	r3, [pc, #280]	; (8019850 <igmp_input+0x1ec>)
 8019738:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
          LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: got an all hosts query with time== 0 - this is V1 and not implemented - treat as v2\n"));
          igmp->igmp_maxresp = IGMP_V1_DELAYING_MEMBER_TMR;
 801973c:	69bb      	ldr	r3, [r7, #24]
 801973e:	220a      	movs	r2, #10
 8019740:	705a      	strb	r2, [r3, #1]
 8019742:	e007      	b.n	8019754 <igmp_input+0xf0>
        } else {
          IGMP_STATS_INC(igmp.rx_general);
 8019744:	4b42      	ldr	r3, [pc, #264]	; (8019850 <igmp_input+0x1ec>)
 8019746:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 801974a:	3301      	adds	r3, #1
 801974c:	b29a      	uxth	r2, r3
 801974e:	4b40      	ldr	r3, [pc, #256]	; (8019850 <igmp_input+0x1ec>)
 8019750:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
        }

        groupref = netif_igmp_data(inp);
 8019754:	68bb      	ldr	r3, [r7, #8]
 8019756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019758:	61fb      	str	r3, [r7, #28]

        /* Do not send messages on the all systems group address! */
        /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
        if (groupref != NULL) {
 801975a:	69fb      	ldr	r3, [r7, #28]
 801975c:	2b00      	cmp	r3, #0
 801975e:	d00c      	beq.n	801977a <igmp_input+0x116>
          groupref = groupref->next;
 8019760:	69fb      	ldr	r3, [r7, #28]
 8019762:	681b      	ldr	r3, [r3, #0]
 8019764:	61fb      	str	r3, [r7, #28]
        }

        while (groupref) {
 8019766:	e008      	b.n	801977a <igmp_input+0x116>
          igmp_delaying_member(groupref, igmp->igmp_maxresp);
 8019768:	69bb      	ldr	r3, [r7, #24]
 801976a:	785b      	ldrb	r3, [r3, #1]
 801976c:	4619      	mov	r1, r3
 801976e:	69f8      	ldr	r0, [r7, #28]
 8019770:	f000 fab9 	bl	8019ce6 <igmp_delaying_member>
          groupref = groupref->next;
 8019774:	69fb      	ldr	r3, [r7, #28]
 8019776:	681b      	ldr	r3, [r3, #0]
 8019778:	61fb      	str	r3, [r7, #28]
        while (groupref) {
 801977a:	69fb      	ldr	r3, [r7, #28]
 801977c:	2b00      	cmp	r3, #0
 801977e:	d1f3      	bne.n	8019768 <igmp_input+0x104>
      if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 8019780:	e03d      	b.n	80197fe <igmp_input+0x19a>
        }
      } else {
        /* IGMP_MEMB_QUERY to a specific group ? */
        if (!ip4_addr_isany(&igmp->igmp_group_address)) {
 8019782:	69bb      	ldr	r3, [r7, #24]
 8019784:	3304      	adds	r3, #4
 8019786:	2b00      	cmp	r3, #0
 8019788:	d030      	beq.n	80197ec <igmp_input+0x188>
 801978a:	69bb      	ldr	r3, [r7, #24]
 801978c:	685b      	ldr	r3, [r3, #4]
 801978e:	2b00      	cmp	r3, #0
 8019790:	d02c      	beq.n	80197ec <igmp_input+0x188>
          LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP_MEMB_QUERY to a specific group "));
          ip4_addr_debug_print_val(IGMP_DEBUG, igmp->igmp_group_address);
          if (ip4_addr_cmp(dest, &allsystems)) {
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	681a      	ldr	r2, [r3, #0]
 8019796:	4b2f      	ldr	r3, [pc, #188]	; (8019854 <igmp_input+0x1f0>)
 8019798:	681b      	ldr	r3, [r3, #0]
 801979a:	429a      	cmp	r2, r3
 801979c:	d10a      	bne.n	80197b4 <igmp_input+0x150>
            ip4_addr_t groupaddr;
            LWIP_DEBUGF(IGMP_DEBUG, (" using \"ALL SYSTEMS\" address (224.0.0.1) [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));
            /* we first need to re-look for the group since we used dest last time */
            ip4_addr_copy(groupaddr, igmp->igmp_group_address);
 801979e:	69bb      	ldr	r3, [r7, #24]
 80197a0:	685b      	ldr	r3, [r3, #4]
 80197a2:	613b      	str	r3, [r7, #16]
            group = igmp_lookfor_group(inp, &groupaddr);
 80197a4:	f107 0310 	add.w	r3, r7, #16
 80197a8:	4619      	mov	r1, r3
 80197aa:	68b8      	ldr	r0, [r7, #8]
 80197ac:	f7ff feab 	bl	8019506 <igmp_lookfor_group>
 80197b0:	4603      	mov	r3, r0
 80197b2:	617b      	str	r3, [r7, #20]
          } else {
            LWIP_DEBUGF(IGMP_DEBUG, (" with the group address as destination [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));
          }

          if (group != NULL) {
 80197b4:	697b      	ldr	r3, [r7, #20]
 80197b6:	2b00      	cmp	r3, #0
 80197b8:	d00f      	beq.n	80197da <igmp_input+0x176>
            IGMP_STATS_INC(igmp.rx_group);
 80197ba:	4b25      	ldr	r3, [pc, #148]	; (8019850 <igmp_input+0x1ec>)
 80197bc:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80197c0:	3301      	adds	r3, #1
 80197c2:	b29a      	uxth	r2, r3
 80197c4:	4b22      	ldr	r3, [pc, #136]	; (8019850 <igmp_input+0x1ec>)
 80197c6:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
            igmp_delaying_member(group, igmp->igmp_maxresp);
 80197ca:	697a      	ldr	r2, [r7, #20]
 80197cc:	69bb      	ldr	r3, [r7, #24]
 80197ce:	785b      	ldrb	r3, [r3, #1]
 80197d0:	4619      	mov	r1, r3
 80197d2:	4610      	mov	r0, r2
 80197d4:	f000 fa87 	bl	8019ce6 <igmp_delaying_member>
          if (group != NULL) {
 80197d8:	e011      	b.n	80197fe <igmp_input+0x19a>
          } else {
            IGMP_STATS_INC(igmp.drop);
 80197da:	4b1d      	ldr	r3, [pc, #116]	; (8019850 <igmp_input+0x1ec>)
 80197dc:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80197e0:	3301      	adds	r3, #1
 80197e2:	b29a      	uxth	r2, r3
 80197e4:	4b1a      	ldr	r3, [pc, #104]	; (8019850 <igmp_input+0x1ec>)
 80197e6:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
          if (group != NULL) {
 80197ea:	e008      	b.n	80197fe <igmp_input+0x19a>
          }
        } else {
          IGMP_STATS_INC(igmp.proterr);
 80197ec:	4b18      	ldr	r3, [pc, #96]	; (8019850 <igmp_input+0x1ec>)
 80197ee:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80197f2:	3301      	adds	r3, #1
 80197f4:	b29a      	uxth	r2, r3
 80197f6:	4b16      	ldr	r3, [pc, #88]	; (8019850 <igmp_input+0x1ec>)
 80197f8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
        }
      }
      break;
 80197fc:	e020      	b.n	8019840 <igmp_input+0x1dc>
 80197fe:	e01f      	b.n	8019840 <igmp_input+0x1dc>
    case IGMP_V2_MEMB_REPORT:
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP_V2_MEMB_REPORT\n"));
      IGMP_STATS_INC(igmp.rx_report);
 8019800:	4b13      	ldr	r3, [pc, #76]	; (8019850 <igmp_input+0x1ec>)
 8019802:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8019806:	3301      	adds	r3, #1
 8019808:	b29a      	uxth	r2, r3
 801980a:	4b11      	ldr	r3, [pc, #68]	; (8019850 <igmp_input+0x1ec>)
 801980c:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
      if (group->group_state == IGMP_GROUP_DELAYING_MEMBER) {
 8019810:	697b      	ldr	r3, [r7, #20]
 8019812:	7a5b      	ldrb	r3, [r3, #9]
 8019814:	2b01      	cmp	r3, #1
 8019816:	d112      	bne.n	801983e <igmp_input+0x1da>
        /* This is on a specific group we have already looked up */
        group->timer = 0; /* stopped */
 8019818:	697b      	ldr	r3, [r7, #20]
 801981a:	2200      	movs	r2, #0
 801981c:	815a      	strh	r2, [r3, #10]
        group->group_state = IGMP_GROUP_IDLE_MEMBER;
 801981e:	697b      	ldr	r3, [r7, #20]
 8019820:	2202      	movs	r2, #2
 8019822:	725a      	strb	r2, [r3, #9]
        group->last_reporter_flag = 0;
 8019824:	697b      	ldr	r3, [r7, #20]
 8019826:	2200      	movs	r2, #0
 8019828:	721a      	strb	r2, [r3, #8]
      }
      break;
 801982a:	e008      	b.n	801983e <igmp_input+0x1da>
    default:
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: unexpected msg %d in state %d on group %p on if %p\n",
                               igmp->igmp_msgtype, group->group_state, (void *)&group, (void *)inp));
      IGMP_STATS_INC(igmp.proterr);
 801982c:	4b08      	ldr	r3, [pc, #32]	; (8019850 <igmp_input+0x1ec>)
 801982e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8019832:	3301      	adds	r3, #1
 8019834:	b29a      	uxth	r2, r3
 8019836:	4b06      	ldr	r3, [pc, #24]	; (8019850 <igmp_input+0x1ec>)
 8019838:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
      break;
 801983c:	e000      	b.n	8019840 <igmp_input+0x1dc>
      break;
 801983e:	bf00      	nop
  }

  pbuf_free(p);
 8019840:	68f8      	ldr	r0, [r7, #12]
 8019842:	f7f5 fa25 	bl	800ec90 <pbuf_free>
  return;
 8019846:	bf00      	nop
}
 8019848:	3720      	adds	r7, #32
 801984a:	46bd      	mov	sp, r7
 801984c:	bd80      	pop	{r7, pc}
 801984e:	bf00      	nop
 8019850:	2000a3ec 	.word	0x2000a3ec
 8019854:	20006988 	.word	0x20006988

08019858 <igmp_joingroup>:
 * @param groupaddr the ip address of the group which to join
 * @return ERR_OK if group was joined on the netif(s), an err_t otherwise
 */
err_t
igmp_joingroup(const ip4_addr_t *ifaddr, const ip4_addr_t *groupaddr)
{
 8019858:	b580      	push	{r7, lr}
 801985a:	b084      	sub	sp, #16
 801985c:	af00      	add	r7, sp, #0
 801985e:	6078      	str	r0, [r7, #4]
 8019860:	6039      	str	r1, [r7, #0]
  err_t err = ERR_VAL; /* no matching interface */
 8019862:	23fa      	movs	r3, #250	; 0xfa
 8019864:	73fb      	strb	r3, [r7, #15]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_joingroup: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 8019866:	683b      	ldr	r3, [r7, #0]
 8019868:	681b      	ldr	r3, [r3, #0]
 801986a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801986e:	2be0      	cmp	r3, #224	; 0xe0
 8019870:	d009      	beq.n	8019886 <igmp_joingroup+0x2e>
 8019872:	4b26      	ldr	r3, [pc, #152]	; (801990c <igmp_joingroup+0xb4>)
 8019874:	f240 12c9 	movw	r2, #457	; 0x1c9
 8019878:	4925      	ldr	r1, [pc, #148]	; (8019910 <igmp_joingroup+0xb8>)
 801987a:	4826      	ldr	r0, [pc, #152]	; (8019914 <igmp_joingroup+0xbc>)
 801987c:	f006 fdae 	bl	80203dc <iprintf>
 8019880:	f06f 0305 	mvn.w	r3, #5
 8019884:	e03d      	b.n	8019902 <igmp_joingroup+0xaa>
  LWIP_ERROR("igmp_joingroup: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 8019886:	683b      	ldr	r3, [r7, #0]
 8019888:	681a      	ldr	r2, [r3, #0]
 801988a:	4b23      	ldr	r3, [pc, #140]	; (8019918 <igmp_joingroup+0xc0>)
 801988c:	681b      	ldr	r3, [r3, #0]
 801988e:	429a      	cmp	r2, r3
 8019890:	d109      	bne.n	80198a6 <igmp_joingroup+0x4e>
 8019892:	4b1e      	ldr	r3, [pc, #120]	; (801990c <igmp_joingroup+0xb4>)
 8019894:	f44f 72e5 	mov.w	r2, #458	; 0x1ca
 8019898:	4920      	ldr	r1, [pc, #128]	; (801991c <igmp_joingroup+0xc4>)
 801989a:	481e      	ldr	r0, [pc, #120]	; (8019914 <igmp_joingroup+0xbc>)
 801989c:	f006 fd9e 	bl	80203dc <iprintf>
 80198a0:	f06f 0305 	mvn.w	r3, #5
 80198a4:	e02d      	b.n	8019902 <igmp_joingroup+0xaa>

  /* loop through netif's */
  NETIF_FOREACH(netif) {
 80198a6:	4b1e      	ldr	r3, [pc, #120]	; (8019920 <igmp_joingroup+0xc8>)
 80198a8:	681b      	ldr	r3, [r3, #0]
 80198aa:	60bb      	str	r3, [r7, #8]
 80198ac:	e024      	b.n	80198f8 <igmp_joingroup+0xa0>
    /* Should we join this interface ? */
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
 80198ae:	68bb      	ldr	r3, [r7, #8]
 80198b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80198b4:	f003 0320 	and.w	r3, r3, #32
 80198b8:	2b00      	cmp	r3, #0
 80198ba:	d01a      	beq.n	80198f2 <igmp_joingroup+0x9a>
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	2b00      	cmp	r3, #0
 80198c0:	d00a      	beq.n	80198d8 <igmp_joingroup+0x80>
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	681b      	ldr	r3, [r3, #0]
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	d006      	beq.n	80198d8 <igmp_joingroup+0x80>
 80198ca:	68bb      	ldr	r3, [r7, #8]
 80198cc:	3304      	adds	r3, #4
 80198ce:	681a      	ldr	r2, [r3, #0]
 80198d0:	687b      	ldr	r3, [r7, #4]
 80198d2:	681b      	ldr	r3, [r3, #0]
 80198d4:	429a      	cmp	r2, r3
 80198d6:	d10c      	bne.n	80198f2 <igmp_joingroup+0x9a>
      err = igmp_joingroup_netif(netif, groupaddr);
 80198d8:	6839      	ldr	r1, [r7, #0]
 80198da:	68b8      	ldr	r0, [r7, #8]
 80198dc:	f000 f822 	bl	8019924 <igmp_joingroup_netif>
 80198e0:	4603      	mov	r3, r0
 80198e2:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 80198e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80198e8:	2b00      	cmp	r3, #0
 80198ea:	d002      	beq.n	80198f2 <igmp_joingroup+0x9a>
        /* Return an error even if some network interfaces are joined */
        /** @todo undo any other netif already joined */
        return err;
 80198ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80198f0:	e007      	b.n	8019902 <igmp_joingroup+0xaa>
  NETIF_FOREACH(netif) {
 80198f2:	68bb      	ldr	r3, [r7, #8]
 80198f4:	681b      	ldr	r3, [r3, #0]
 80198f6:	60bb      	str	r3, [r7, #8]
 80198f8:	68bb      	ldr	r3, [r7, #8]
 80198fa:	2b00      	cmp	r3, #0
 80198fc:	d1d7      	bne.n	80198ae <igmp_joingroup+0x56>
      }
    }
  }

  return err;
 80198fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019902:	4618      	mov	r0, r3
 8019904:	3710      	adds	r7, #16
 8019906:	46bd      	mov	sp, r7
 8019908:	bd80      	pop	{r7, pc}
 801990a:	bf00      	nop
 801990c:	08025b90 	.word	0x08025b90
 8019910:	08025c68 	.word	0x08025c68
 8019914:	08025bfc 	.word	0x08025bfc
 8019918:	20006988 	.word	0x20006988
 801991c:	08025ca0 	.word	0x08025ca0
 8019920:	2000a3e0 	.word	0x2000a3e0

08019924 <igmp_joingroup_netif>:
 * @param groupaddr the ip address of the group which to join
 * @return ERR_OK if group was joined on the netif, an err_t otherwise
 */
err_t
igmp_joingroup_netif(struct netif *netif, const ip4_addr_t *groupaddr)
{
 8019924:	b580      	push	{r7, lr}
 8019926:	b084      	sub	sp, #16
 8019928:	af00      	add	r7, sp, #0
 801992a:	6078      	str	r0, [r7, #4]
 801992c:	6039      	str	r1, [r7, #0]
  struct igmp_group *group;

  LWIP_ASSERT_CORE_LOCKED();

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_joingroup_netif: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 801992e:	683b      	ldr	r3, [r7, #0]
 8019930:	681b      	ldr	r3, [r3, #0]
 8019932:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019936:	2be0      	cmp	r3, #224	; 0xe0
 8019938:	d009      	beq.n	801994e <igmp_joingroup_netif+0x2a>
 801993a:	4b33      	ldr	r3, [pc, #204]	; (8019a08 <igmp_joingroup_netif+0xe4>)
 801993c:	f44f 72f6 	mov.w	r2, #492	; 0x1ec
 8019940:	4932      	ldr	r1, [pc, #200]	; (8019a0c <igmp_joingroup_netif+0xe8>)
 8019942:	4833      	ldr	r0, [pc, #204]	; (8019a10 <igmp_joingroup_netif+0xec>)
 8019944:	f006 fd4a 	bl	80203dc <iprintf>
 8019948:	f06f 0305 	mvn.w	r3, #5
 801994c:	e058      	b.n	8019a00 <igmp_joingroup_netif+0xdc>
  LWIP_ERROR("igmp_joingroup_netif: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 801994e:	683b      	ldr	r3, [r7, #0]
 8019950:	681a      	ldr	r2, [r3, #0]
 8019952:	4b30      	ldr	r3, [pc, #192]	; (8019a14 <igmp_joingroup_netif+0xf0>)
 8019954:	681b      	ldr	r3, [r3, #0]
 8019956:	429a      	cmp	r2, r3
 8019958:	d109      	bne.n	801996e <igmp_joingroup_netif+0x4a>
 801995a:	4b2b      	ldr	r3, [pc, #172]	; (8019a08 <igmp_joingroup_netif+0xe4>)
 801995c:	f240 12ed 	movw	r2, #493	; 0x1ed
 8019960:	492d      	ldr	r1, [pc, #180]	; (8019a18 <igmp_joingroup_netif+0xf4>)
 8019962:	482b      	ldr	r0, [pc, #172]	; (8019a10 <igmp_joingroup_netif+0xec>)
 8019964:	f006 fd3a 	bl	80203dc <iprintf>
 8019968:	f06f 0305 	mvn.w	r3, #5
 801996c:	e048      	b.n	8019a00 <igmp_joingroup_netif+0xdc>

  /* make sure it is an igmp-enabled netif */
  LWIP_ERROR("igmp_joingroup_netif: attempt to join on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8019974:	f003 0320 	and.w	r3, r3, #32
 8019978:	2b00      	cmp	r3, #0
 801997a:	d109      	bne.n	8019990 <igmp_joingroup_netif+0x6c>
 801997c:	4b22      	ldr	r3, [pc, #136]	; (8019a08 <igmp_joingroup_netif+0xe4>)
 801997e:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8019982:	4926      	ldr	r1, [pc, #152]	; (8019a1c <igmp_joingroup_netif+0xf8>)
 8019984:	4822      	ldr	r0, [pc, #136]	; (8019a10 <igmp_joingroup_netif+0xec>)
 8019986:	f006 fd29 	bl	80203dc <iprintf>
 801998a:	f06f 0305 	mvn.w	r3, #5
 801998e:	e037      	b.n	8019a00 <igmp_joingroup_netif+0xdc>

  /* find group or create a new one if not found */
  group = igmp_lookup_group(netif, groupaddr);
 8019990:	6839      	ldr	r1, [r7, #0]
 8019992:	6878      	ldr	r0, [r7, #4]
 8019994:	f7ff fdd6 	bl	8019544 <igmp_lookup_group>
 8019998:	60f8      	str	r0, [r7, #12]

  if (group != NULL) {
 801999a:	68fb      	ldr	r3, [r7, #12]
 801999c:	2b00      	cmp	r3, #0
 801999e:	d02d      	beq.n	80199fc <igmp_joingroup_netif+0xd8>
    /* This should create a new group, check the state to make sure */
    if (group->group_state != IGMP_GROUP_NON_MEMBER) {
 80199a0:	68fb      	ldr	r3, [r7, #12]
 80199a2:	7a5b      	ldrb	r3, [r3, #9]
 80199a4:	2b00      	cmp	r3, #0
 80199a6:	d121      	bne.n	80199ec <igmp_joingroup_netif+0xc8>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: join to new group: "));
      ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
      LWIP_DEBUGF(IGMP_DEBUG, ("\n"));

      /* If first use of the group, allow the group at the MAC level */
      if ((group->use == 0) && (netif->igmp_mac_filter != NULL)) {
 80199a8:	68fb      	ldr	r3, [r7, #12]
 80199aa:	7b1b      	ldrb	r3, [r3, #12]
 80199ac:	2b00      	cmp	r3, #0
 80199ae:	d109      	bne.n	80199c4 <igmp_joingroup_netif+0xa0>
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80199b4:	2b00      	cmp	r3, #0
 80199b6:	d005      	beq.n	80199c4 <igmp_joingroup_netif+0xa0>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: igmp_mac_filter(ADD "));
        ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
        LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void *)netif));
        netif->igmp_mac_filter(netif, groupaddr, NETIF_ADD_MAC_FILTER);
 80199b8:	687b      	ldr	r3, [r7, #4]
 80199ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80199bc:	2201      	movs	r2, #1
 80199be:	6839      	ldr	r1, [r7, #0]
 80199c0:	6878      	ldr	r0, [r7, #4]
 80199c2:	4798      	blx	r3
      }

      IGMP_STATS_INC(igmp.tx_join);
 80199c4:	4b16      	ldr	r3, [pc, #88]	; (8019a20 <igmp_joingroup_netif+0xfc>)
 80199c6:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 80199ca:	3301      	adds	r3, #1
 80199cc:	b29a      	uxth	r2, r3
 80199ce:	4b14      	ldr	r3, [pc, #80]	; (8019a20 <igmp_joingroup_netif+0xfc>)
 80199d0:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
      igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
 80199d4:	2216      	movs	r2, #22
 80199d6:	68f9      	ldr	r1, [r7, #12]
 80199d8:	6878      	ldr	r0, [r7, #4]
 80199da:	f000 f9d5 	bl	8019d88 <igmp_send>

      igmp_start_timer(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
 80199de:	2105      	movs	r1, #5
 80199e0:	68f8      	ldr	r0, [r7, #12]
 80199e2:	f000 f95d 	bl	8019ca0 <igmp_start_timer>

      /* Need to work out where this timer comes from */
      group->group_state = IGMP_GROUP_DELAYING_MEMBER;
 80199e6:	68fb      	ldr	r3, [r7, #12]
 80199e8:	2201      	movs	r2, #1
 80199ea:	725a      	strb	r2, [r3, #9]
    }
    /* Increment group use */
    group->use++;
 80199ec:	68fb      	ldr	r3, [r7, #12]
 80199ee:	7b1b      	ldrb	r3, [r3, #12]
 80199f0:	3301      	adds	r3, #1
 80199f2:	b2da      	uxtb	r2, r3
 80199f4:	68fb      	ldr	r3, [r7, #12]
 80199f6:	731a      	strb	r2, [r3, #12]
    /* Join on this interface */
    return ERR_OK;
 80199f8:	2300      	movs	r3, #0
 80199fa:	e001      	b.n	8019a00 <igmp_joingroup_netif+0xdc>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: Not enough memory to join to group\n"));
    return ERR_MEM;
 80199fc:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8019a00:	4618      	mov	r0, r3
 8019a02:	3710      	adds	r7, #16
 8019a04:	46bd      	mov	sp, r7
 8019a06:	bd80      	pop	{r7, pc}
 8019a08:	08025b90 	.word	0x08025b90
 8019a0c:	08025cd4 	.word	0x08025cd4
 8019a10:	08025bfc 	.word	0x08025bfc
 8019a14:	20006988 	.word	0x20006988
 8019a18:	08025d10 	.word	0x08025d10
 8019a1c:	08025d4c 	.word	0x08025d4c
 8019a20:	2000a3ec 	.word	0x2000a3ec

08019a24 <igmp_leavegroup>:
 * @param groupaddr the ip address of the group which to leave
 * @return ERR_OK if group was left on the netif(s), an err_t otherwise
 */
err_t
igmp_leavegroup(const ip4_addr_t *ifaddr, const ip4_addr_t *groupaddr)
{
 8019a24:	b580      	push	{r7, lr}
 8019a26:	b086      	sub	sp, #24
 8019a28:	af00      	add	r7, sp, #0
 8019a2a:	6078      	str	r0, [r7, #4]
 8019a2c:	6039      	str	r1, [r7, #0]
  err_t err = ERR_VAL; /* no matching interface */
 8019a2e:	23fa      	movs	r3, #250	; 0xfa
 8019a30:	75fb      	strb	r3, [r7, #23]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_leavegroup: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 8019a32:	683b      	ldr	r3, [r7, #0]
 8019a34:	681b      	ldr	r3, [r3, #0]
 8019a36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019a3a:	2be0      	cmp	r3, #224	; 0xe0
 8019a3c:	d009      	beq.n	8019a52 <igmp_leavegroup+0x2e>
 8019a3e:	4b25      	ldr	r3, [pc, #148]	; (8019ad4 <igmp_leavegroup+0xb0>)
 8019a40:	f240 222a 	movw	r2, #554	; 0x22a
 8019a44:	4924      	ldr	r1, [pc, #144]	; (8019ad8 <igmp_leavegroup+0xb4>)
 8019a46:	4825      	ldr	r0, [pc, #148]	; (8019adc <igmp_leavegroup+0xb8>)
 8019a48:	f006 fcc8 	bl	80203dc <iprintf>
 8019a4c:	f06f 0305 	mvn.w	r3, #5
 8019a50:	e03c      	b.n	8019acc <igmp_leavegroup+0xa8>
  LWIP_ERROR("igmp_leavegroup: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 8019a52:	683b      	ldr	r3, [r7, #0]
 8019a54:	681a      	ldr	r2, [r3, #0]
 8019a56:	4b22      	ldr	r3, [pc, #136]	; (8019ae0 <igmp_leavegroup+0xbc>)
 8019a58:	681b      	ldr	r3, [r3, #0]
 8019a5a:	429a      	cmp	r2, r3
 8019a5c:	d109      	bne.n	8019a72 <igmp_leavegroup+0x4e>
 8019a5e:	4b1d      	ldr	r3, [pc, #116]	; (8019ad4 <igmp_leavegroup+0xb0>)
 8019a60:	f240 222b 	movw	r2, #555	; 0x22b
 8019a64:	491f      	ldr	r1, [pc, #124]	; (8019ae4 <igmp_leavegroup+0xc0>)
 8019a66:	481d      	ldr	r0, [pc, #116]	; (8019adc <igmp_leavegroup+0xb8>)
 8019a68:	f006 fcb8 	bl	80203dc <iprintf>
 8019a6c:	f06f 0305 	mvn.w	r3, #5
 8019a70:	e02c      	b.n	8019acc <igmp_leavegroup+0xa8>

  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8019a72:	4b1d      	ldr	r3, [pc, #116]	; (8019ae8 <igmp_leavegroup+0xc4>)
 8019a74:	681b      	ldr	r3, [r3, #0]
 8019a76:	613b      	str	r3, [r7, #16]
 8019a78:	e023      	b.n	8019ac2 <igmp_leavegroup+0x9e>
    /* Should we leave this interface ? */
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
 8019a7a:	693b      	ldr	r3, [r7, #16]
 8019a7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8019a80:	f003 0320 	and.w	r3, r3, #32
 8019a84:	2b00      	cmp	r3, #0
 8019a86:	d019      	beq.n	8019abc <igmp_leavegroup+0x98>
 8019a88:	687b      	ldr	r3, [r7, #4]
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	d00a      	beq.n	8019aa4 <igmp_leavegroup+0x80>
 8019a8e:	687b      	ldr	r3, [r7, #4]
 8019a90:	681b      	ldr	r3, [r3, #0]
 8019a92:	2b00      	cmp	r3, #0
 8019a94:	d006      	beq.n	8019aa4 <igmp_leavegroup+0x80>
 8019a96:	693b      	ldr	r3, [r7, #16]
 8019a98:	3304      	adds	r3, #4
 8019a9a:	681a      	ldr	r2, [r3, #0]
 8019a9c:	687b      	ldr	r3, [r7, #4]
 8019a9e:	681b      	ldr	r3, [r3, #0]
 8019aa0:	429a      	cmp	r2, r3
 8019aa2:	d10b      	bne.n	8019abc <igmp_leavegroup+0x98>
      err_t res = igmp_leavegroup_netif(netif, groupaddr);
 8019aa4:	6839      	ldr	r1, [r7, #0]
 8019aa6:	6938      	ldr	r0, [r7, #16]
 8019aa8:	f000 f820 	bl	8019aec <igmp_leavegroup_netif>
 8019aac:	4603      	mov	r3, r0
 8019aae:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8019ab0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8019ab4:	2b00      	cmp	r3, #0
 8019ab6:	d001      	beq.n	8019abc <igmp_leavegroup+0x98>
        /* Store this result if we have not yet gotten a success */
        err = res;
 8019ab8:	7bfb      	ldrb	r3, [r7, #15]
 8019aba:	75fb      	strb	r3, [r7, #23]
  NETIF_FOREACH(netif) {
 8019abc:	693b      	ldr	r3, [r7, #16]
 8019abe:	681b      	ldr	r3, [r3, #0]
 8019ac0:	613b      	str	r3, [r7, #16]
 8019ac2:	693b      	ldr	r3, [r7, #16]
 8019ac4:	2b00      	cmp	r3, #0
 8019ac6:	d1d8      	bne.n	8019a7a <igmp_leavegroup+0x56>
      }
    }
  }

  return err;
 8019ac8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019acc:	4618      	mov	r0, r3
 8019ace:	3718      	adds	r7, #24
 8019ad0:	46bd      	mov	sp, r7
 8019ad2:	bd80      	pop	{r7, pc}
 8019ad4:	08025b90 	.word	0x08025b90
 8019ad8:	08025d84 	.word	0x08025d84
 8019adc:	08025bfc 	.word	0x08025bfc
 8019ae0:	20006988 	.word	0x20006988
 8019ae4:	08025dbc 	.word	0x08025dbc
 8019ae8:	2000a3e0 	.word	0x2000a3e0

08019aec <igmp_leavegroup_netif>:
 * @param groupaddr the ip address of the group which to leave
 * @return ERR_OK if group was left on the netif, an err_t otherwise
 */
err_t
igmp_leavegroup_netif(struct netif *netif, const ip4_addr_t *groupaddr)
{
 8019aec:	b580      	push	{r7, lr}
 8019aee:	b084      	sub	sp, #16
 8019af0:	af00      	add	r7, sp, #0
 8019af2:	6078      	str	r0, [r7, #4]
 8019af4:	6039      	str	r1, [r7, #0]
  struct igmp_group *group;

  LWIP_ASSERT_CORE_LOCKED();

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 8019af6:	683b      	ldr	r3, [r7, #0]
 8019af8:	681b      	ldr	r3, [r3, #0]
 8019afa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019afe:	2be0      	cmp	r3, #224	; 0xe0
 8019b00:	d009      	beq.n	8019b16 <igmp_leavegroup_netif+0x2a>
 8019b02:	4b34      	ldr	r3, [pc, #208]	; (8019bd4 <igmp_leavegroup_netif+0xe8>)
 8019b04:	f44f 7213 	mov.w	r2, #588	; 0x24c
 8019b08:	4933      	ldr	r1, [pc, #204]	; (8019bd8 <igmp_leavegroup_netif+0xec>)
 8019b0a:	4834      	ldr	r0, [pc, #208]	; (8019bdc <igmp_leavegroup_netif+0xf0>)
 8019b0c:	f006 fc66 	bl	80203dc <iprintf>
 8019b10:	f06f 0305 	mvn.w	r3, #5
 8019b14:	e05a      	b.n	8019bcc <igmp_leavegroup_netif+0xe0>
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 8019b16:	683b      	ldr	r3, [r7, #0]
 8019b18:	681a      	ldr	r2, [r3, #0]
 8019b1a:	4b31      	ldr	r3, [pc, #196]	; (8019be0 <igmp_leavegroup_netif+0xf4>)
 8019b1c:	681b      	ldr	r3, [r3, #0]
 8019b1e:	429a      	cmp	r2, r3
 8019b20:	d109      	bne.n	8019b36 <igmp_leavegroup_netif+0x4a>
 8019b22:	4b2c      	ldr	r3, [pc, #176]	; (8019bd4 <igmp_leavegroup_netif+0xe8>)
 8019b24:	f240 224d 	movw	r2, #589	; 0x24d
 8019b28:	492e      	ldr	r1, [pc, #184]	; (8019be4 <igmp_leavegroup_netif+0xf8>)
 8019b2a:	482c      	ldr	r0, [pc, #176]	; (8019bdc <igmp_leavegroup_netif+0xf0>)
 8019b2c:	f006 fc56 	bl	80203dc <iprintf>
 8019b30:	f06f 0305 	mvn.w	r3, #5
 8019b34:	e04a      	b.n	8019bcc <igmp_leavegroup_netif+0xe0>

  /* make sure it is an igmp-enabled netif */
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
 8019b36:	687b      	ldr	r3, [r7, #4]
 8019b38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8019b3c:	f003 0320 	and.w	r3, r3, #32
 8019b40:	2b00      	cmp	r3, #0
 8019b42:	d109      	bne.n	8019b58 <igmp_leavegroup_netif+0x6c>
 8019b44:	4b23      	ldr	r3, [pc, #140]	; (8019bd4 <igmp_leavegroup_netif+0xe8>)
 8019b46:	f44f 7214 	mov.w	r2, #592	; 0x250
 8019b4a:	4927      	ldr	r1, [pc, #156]	; (8019be8 <igmp_leavegroup_netif+0xfc>)
 8019b4c:	4823      	ldr	r0, [pc, #140]	; (8019bdc <igmp_leavegroup_netif+0xf0>)
 8019b4e:	f006 fc45 	bl	80203dc <iprintf>
 8019b52:	f06f 0305 	mvn.w	r3, #5
 8019b56:	e039      	b.n	8019bcc <igmp_leavegroup_netif+0xe0>

  /* find group */
  group = igmp_lookfor_group(netif, groupaddr);
 8019b58:	6839      	ldr	r1, [r7, #0]
 8019b5a:	6878      	ldr	r0, [r7, #4]
 8019b5c:	f7ff fcd3 	bl	8019506 <igmp_lookfor_group>
 8019b60:	60f8      	str	r0, [r7, #12]

  if (group != NULL) {
 8019b62:	68fb      	ldr	r3, [r7, #12]
 8019b64:	2b00      	cmp	r3, #0
 8019b66:	d02f      	beq.n	8019bc8 <igmp_leavegroup_netif+0xdc>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: Leaving group: "));
    ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
    LWIP_DEBUGF(IGMP_DEBUG, ("\n"));

    /* If there is no other use of the group */
    if (group->use <= 1) {
 8019b68:	68fb      	ldr	r3, [r7, #12]
 8019b6a:	7b1b      	ldrb	r3, [r3, #12]
 8019b6c:	2b01      	cmp	r3, #1
 8019b6e:	d823      	bhi.n	8019bb8 <igmp_leavegroup_netif+0xcc>
      /* Remove the group from the list */
      igmp_remove_group(netif, group);
 8019b70:	68f9      	ldr	r1, [r7, #12]
 8019b72:	6878      	ldr	r0, [r7, #4]
 8019b74:	f7ff fd4e 	bl	8019614 <igmp_remove_group>

      /* If we are the last reporter for this group */
      if (group->last_reporter_flag) {
 8019b78:	68fb      	ldr	r3, [r7, #12]
 8019b7a:	7a1b      	ldrb	r3, [r3, #8]
 8019b7c:	2b00      	cmp	r3, #0
 8019b7e:	d00c      	beq.n	8019b9a <igmp_leavegroup_netif+0xae>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: sending leaving group\n"));
        IGMP_STATS_INC(igmp.tx_leave);
 8019b80:	4b1a      	ldr	r3, [pc, #104]	; (8019bec <igmp_leavegroup_netif+0x100>)
 8019b82:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8019b86:	3301      	adds	r3, #1
 8019b88:	b29a      	uxth	r2, r3
 8019b8a:	4b18      	ldr	r3, [pc, #96]	; (8019bec <igmp_leavegroup_netif+0x100>)
 8019b8c:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
        igmp_send(netif, group, IGMP_LEAVE_GROUP);
 8019b90:	2217      	movs	r2, #23
 8019b92:	68f9      	ldr	r1, [r7, #12]
 8019b94:	6878      	ldr	r0, [r7, #4]
 8019b96:	f000 f8f7 	bl	8019d88 <igmp_send>
      }

      /* Disable the group at the MAC level */
      if (netif->igmp_mac_filter != NULL) {
 8019b9a:	687b      	ldr	r3, [r7, #4]
 8019b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019b9e:	2b00      	cmp	r3, #0
 8019ba0:	d005      	beq.n	8019bae <igmp_leavegroup_netif+0xc2>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: igmp_mac_filter(DEL "));
        ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
        LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void *)netif));
        netif->igmp_mac_filter(netif, groupaddr, NETIF_DEL_MAC_FILTER);
 8019ba2:	687b      	ldr	r3, [r7, #4]
 8019ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019ba6:	2200      	movs	r2, #0
 8019ba8:	6839      	ldr	r1, [r7, #0]
 8019baa:	6878      	ldr	r0, [r7, #4]
 8019bac:	4798      	blx	r3
      }

      /* Free group struct */
      memp_free(MEMP_IGMP_GROUP, group);
 8019bae:	68f9      	ldr	r1, [r7, #12]
 8019bb0:	200a      	movs	r0, #10
 8019bb2:	f7f4 f8b1 	bl	800dd18 <memp_free>
 8019bb6:	e005      	b.n	8019bc4 <igmp_leavegroup_netif+0xd8>
    } else {
      /* Decrement group use */
      group->use--;
 8019bb8:	68fb      	ldr	r3, [r7, #12]
 8019bba:	7b1b      	ldrb	r3, [r3, #12]
 8019bbc:	3b01      	subs	r3, #1
 8019bbe:	b2da      	uxtb	r2, r3
 8019bc0:	68fb      	ldr	r3, [r7, #12]
 8019bc2:	731a      	strb	r2, [r3, #12]
    }
    return ERR_OK;
 8019bc4:	2300      	movs	r3, #0
 8019bc6:	e001      	b.n	8019bcc <igmp_leavegroup_netif+0xe0>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: not member of group\n"));
    return ERR_VAL;
 8019bc8:	f06f 0305 	mvn.w	r3, #5
  }
}
 8019bcc:	4618      	mov	r0, r3
 8019bce:	3710      	adds	r7, #16
 8019bd0:	46bd      	mov	sp, r7
 8019bd2:	bd80      	pop	{r7, pc}
 8019bd4:	08025b90 	.word	0x08025b90
 8019bd8:	08025df4 	.word	0x08025df4
 8019bdc:	08025bfc 	.word	0x08025bfc
 8019be0:	20006988 	.word	0x20006988
 8019be4:	08025e34 	.word	0x08025e34
 8019be8:	08025e70 	.word	0x08025e70
 8019bec:	2000a3ec 	.word	0x2000a3ec

08019bf0 <igmp_tmr>:
 * The igmp timer function (both for NO_SYS=1 and =0)
 * Should be called every IGMP_TMR_INTERVAL milliseconds (100 ms is default).
 */
void
igmp_tmr(void)
{
 8019bf0:	b580      	push	{r7, lr}
 8019bf2:	b082      	sub	sp, #8
 8019bf4:	af00      	add	r7, sp, #0
  struct netif *netif;

  NETIF_FOREACH(netif) {
 8019bf6:	4b15      	ldr	r3, [pc, #84]	; (8019c4c <igmp_tmr+0x5c>)
 8019bf8:	681b      	ldr	r3, [r3, #0]
 8019bfa:	607b      	str	r3, [r7, #4]
 8019bfc:	e01e      	b.n	8019c3c <igmp_tmr+0x4c>
    struct igmp_group *group = netif_igmp_data(netif);
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019c02:	603b      	str	r3, [r7, #0]

    while (group != NULL) {
 8019c04:	e014      	b.n	8019c30 <igmp_tmr+0x40>
      if (group->timer > 0) {
 8019c06:	683b      	ldr	r3, [r7, #0]
 8019c08:	895b      	ldrh	r3, [r3, #10]
 8019c0a:	2b00      	cmp	r3, #0
 8019c0c:	d00d      	beq.n	8019c2a <igmp_tmr+0x3a>
        group->timer--;
 8019c0e:	683b      	ldr	r3, [r7, #0]
 8019c10:	895b      	ldrh	r3, [r3, #10]
 8019c12:	3b01      	subs	r3, #1
 8019c14:	b29a      	uxth	r2, r3
 8019c16:	683b      	ldr	r3, [r7, #0]
 8019c18:	815a      	strh	r2, [r3, #10]
        if (group->timer == 0) {
 8019c1a:	683b      	ldr	r3, [r7, #0]
 8019c1c:	895b      	ldrh	r3, [r3, #10]
 8019c1e:	2b00      	cmp	r3, #0
 8019c20:	d103      	bne.n	8019c2a <igmp_tmr+0x3a>
          igmp_timeout(netif, group);
 8019c22:	6839      	ldr	r1, [r7, #0]
 8019c24:	6878      	ldr	r0, [r7, #4]
 8019c26:	f000 f813 	bl	8019c50 <igmp_timeout>
        }
      }
      group = group->next;
 8019c2a:	683b      	ldr	r3, [r7, #0]
 8019c2c:	681b      	ldr	r3, [r3, #0]
 8019c2e:	603b      	str	r3, [r7, #0]
    while (group != NULL) {
 8019c30:	683b      	ldr	r3, [r7, #0]
 8019c32:	2b00      	cmp	r3, #0
 8019c34:	d1e7      	bne.n	8019c06 <igmp_tmr+0x16>
  NETIF_FOREACH(netif) {
 8019c36:	687b      	ldr	r3, [r7, #4]
 8019c38:	681b      	ldr	r3, [r3, #0]
 8019c3a:	607b      	str	r3, [r7, #4]
 8019c3c:	687b      	ldr	r3, [r7, #4]
 8019c3e:	2b00      	cmp	r3, #0
 8019c40:	d1dd      	bne.n	8019bfe <igmp_tmr+0xe>
    }
  }
}
 8019c42:	bf00      	nop
 8019c44:	bf00      	nop
 8019c46:	3708      	adds	r7, #8
 8019c48:	46bd      	mov	sp, r7
 8019c4a:	bd80      	pop	{r7, pc}
 8019c4c:	2000a3e0 	.word	0x2000a3e0

08019c50 <igmp_timeout>:
 *
 * @param group an igmp_group for which a timeout is reached
 */
static void
igmp_timeout(struct netif *netif, struct igmp_group *group)
{
 8019c50:	b580      	push	{r7, lr}
 8019c52:	b082      	sub	sp, #8
 8019c54:	af00      	add	r7, sp, #0
 8019c56:	6078      	str	r0, [r7, #4]
 8019c58:	6039      	str	r1, [r7, #0]
  /* If the state is IGMP_GROUP_DELAYING_MEMBER then we send a report for this group
     (unless it is the allsystems group) */
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 8019c5a:	683b      	ldr	r3, [r7, #0]
 8019c5c:	7a5b      	ldrb	r3, [r3, #9]
 8019c5e:	2b01      	cmp	r3, #1
 8019c60:	d115      	bne.n	8019c8e <igmp_timeout+0x3e>
      (!(ip4_addr_cmp(&(group->group_address), &allsystems)))) {
 8019c62:	683b      	ldr	r3, [r7, #0]
 8019c64:	685a      	ldr	r2, [r3, #4]
 8019c66:	4b0c      	ldr	r3, [pc, #48]	; (8019c98 <igmp_timeout+0x48>)
 8019c68:	681b      	ldr	r3, [r3, #0]
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 8019c6a:	429a      	cmp	r2, r3
 8019c6c:	d00f      	beq.n	8019c8e <igmp_timeout+0x3e>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_timeout: report membership for group with address "));
    ip4_addr_debug_print_val(IGMP_DEBUG, group->group_address);
    LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)netif));

    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 8019c6e:	683b      	ldr	r3, [r7, #0]
 8019c70:	2202      	movs	r2, #2
 8019c72:	725a      	strb	r2, [r3, #9]

    IGMP_STATS_INC(igmp.tx_report);
 8019c74:	4b09      	ldr	r3, [pc, #36]	; (8019c9c <igmp_timeout+0x4c>)
 8019c76:	f8b3 3092 	ldrh.w	r3, [r3, #146]	; 0x92
 8019c7a:	3301      	adds	r3, #1
 8019c7c:	b29a      	uxth	r2, r3
 8019c7e:	4b07      	ldr	r3, [pc, #28]	; (8019c9c <igmp_timeout+0x4c>)
 8019c80:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
    igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
 8019c84:	2216      	movs	r2, #22
 8019c86:	6839      	ldr	r1, [r7, #0]
 8019c88:	6878      	ldr	r0, [r7, #4]
 8019c8a:	f000 f87d 	bl	8019d88 <igmp_send>
  }
}
 8019c8e:	bf00      	nop
 8019c90:	3708      	adds	r7, #8
 8019c92:	46bd      	mov	sp, r7
 8019c94:	bd80      	pop	{r7, pc}
 8019c96:	bf00      	nop
 8019c98:	20006988 	.word	0x20006988
 8019c9c:	2000a3ec 	.word	0x2000a3ec

08019ca0 <igmp_start_timer>:
 * @param max_time the time in multiples of IGMP_TMR_INTERVAL (decrease with
 *        every call to igmp_tmr())
 */
static void
igmp_start_timer(struct igmp_group *group, u8_t max_time)
{
 8019ca0:	b580      	push	{r7, lr}
 8019ca2:	b082      	sub	sp, #8
 8019ca4:	af00      	add	r7, sp, #0
 8019ca6:	6078      	str	r0, [r7, #4]
 8019ca8:	460b      	mov	r3, r1
 8019caa:	70fb      	strb	r3, [r7, #3]
#ifdef LWIP_RAND
  group->timer = (u16_t)(max_time > 2 ? (LWIP_RAND() % max_time) : 1);
 8019cac:	78fb      	ldrb	r3, [r7, #3]
 8019cae:	2b02      	cmp	r3, #2
 8019cb0:	d90b      	bls.n	8019cca <igmp_start_timer+0x2a>
 8019cb2:	f006 fc37 	bl	8020524 <rand>
 8019cb6:	4603      	mov	r3, r0
 8019cb8:	461a      	mov	r2, r3
 8019cba:	78fb      	ldrb	r3, [r7, #3]
 8019cbc:	fbb2 f1f3 	udiv	r1, r2, r3
 8019cc0:	fb03 f301 	mul.w	r3, r3, r1
 8019cc4:	1ad3      	subs	r3, r2, r3
 8019cc6:	b29a      	uxth	r2, r3
 8019cc8:	e000      	b.n	8019ccc <igmp_start_timer+0x2c>
 8019cca:	2201      	movs	r2, #1
 8019ccc:	687b      	ldr	r3, [r7, #4]
 8019cce:	815a      	strh	r2, [r3, #10]
#else /* LWIP_RAND */
  /* ATTENTION: use this only if absolutely necessary! */
  group->timer = max_time / 2;
#endif /* LWIP_RAND */

  if (group->timer == 0) {
 8019cd0:	687b      	ldr	r3, [r7, #4]
 8019cd2:	895b      	ldrh	r3, [r3, #10]
 8019cd4:	2b00      	cmp	r3, #0
 8019cd6:	d102      	bne.n	8019cde <igmp_start_timer+0x3e>
    group->timer = 1;
 8019cd8:	687b      	ldr	r3, [r7, #4]
 8019cda:	2201      	movs	r2, #1
 8019cdc:	815a      	strh	r2, [r3, #10]
  }
}
 8019cde:	bf00      	nop
 8019ce0:	3708      	adds	r7, #8
 8019ce2:	46bd      	mov	sp, r7
 8019ce4:	bd80      	pop	{r7, pc}

08019ce6 <igmp_delaying_member>:
 * @param group the igmp_group for which "delaying" membership report
 * @param maxresp query delay
 */
static void
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
{
 8019ce6:	b580      	push	{r7, lr}
 8019ce8:	b082      	sub	sp, #8
 8019cea:	af00      	add	r7, sp, #0
 8019cec:	6078      	str	r0, [r7, #4]
 8019cee:	460b      	mov	r3, r1
 8019cf0:	70fb      	strb	r3, [r7, #3]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 8019cf2:	687b      	ldr	r3, [r7, #4]
 8019cf4:	7a5b      	ldrb	r3, [r3, #9]
 8019cf6:	2b02      	cmp	r3, #2
 8019cf8:	d00d      	beq.n	8019d16 <igmp_delaying_member+0x30>
      ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	7a5b      	ldrb	r3, [r3, #9]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 8019cfe:	2b01      	cmp	r3, #1
 8019d00:	d111      	bne.n	8019d26 <igmp_delaying_member+0x40>
       ((group->timer == 0) || (maxresp < group->timer)))) {
 8019d02:	687b      	ldr	r3, [r7, #4]
 8019d04:	895b      	ldrh	r3, [r3, #10]
      ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	d005      	beq.n	8019d16 <igmp_delaying_member+0x30>
       ((group->timer == 0) || (maxresp < group->timer)))) {
 8019d0a:	78fb      	ldrb	r3, [r7, #3]
 8019d0c:	b29a      	uxth	r2, r3
 8019d0e:	687b      	ldr	r3, [r7, #4]
 8019d10:	895b      	ldrh	r3, [r3, #10]
 8019d12:	429a      	cmp	r2, r3
 8019d14:	d207      	bcs.n	8019d26 <igmp_delaying_member+0x40>
    igmp_start_timer(group, maxresp);
 8019d16:	78fb      	ldrb	r3, [r7, #3]
 8019d18:	4619      	mov	r1, r3
 8019d1a:	6878      	ldr	r0, [r7, #4]
 8019d1c:	f7ff ffc0 	bl	8019ca0 <igmp_start_timer>
    group->group_state = IGMP_GROUP_DELAYING_MEMBER;
 8019d20:	687b      	ldr	r3, [r7, #4]
 8019d22:	2201      	movs	r2, #1
 8019d24:	725a      	strb	r2, [r3, #9]
  }
}
 8019d26:	bf00      	nop
 8019d28:	3708      	adds	r7, #8
 8019d2a:	46bd      	mov	sp, r7
 8019d2c:	bd80      	pop	{r7, pc}
	...

08019d30 <igmp_ip_output_if>:
 *         ERR_BUF if p doesn't have enough space for IP/LINK headers
 *         returns errors returned by netif->output
 */
static err_t
igmp_ip_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest, struct netif *netif)
{
 8019d30:	b580      	push	{r7, lr}
 8019d32:	b08c      	sub	sp, #48	; 0x30
 8019d34:	af06      	add	r7, sp, #24
 8019d36:	60f8      	str	r0, [r7, #12]
 8019d38:	60b9      	str	r1, [r7, #8]
 8019d3a:	607a      	str	r2, [r7, #4]
 8019d3c:	603b      	str	r3, [r7, #0]
  /* This is the "router alert" option */
  u16_t ra[2];
  ra[0] = PP_HTONS(ROUTER_ALERT);
 8019d3e:	f240 4394 	movw	r3, #1172	; 0x494
 8019d42:	82bb      	strh	r3, [r7, #20]
  ra[1] = 0x0000; /* Router shall examine packet */
 8019d44:	2300      	movs	r3, #0
 8019d46:	82fb      	strh	r3, [r7, #22]
  IGMP_STATS_INC(igmp.xmit);
 8019d48:	4b0e      	ldr	r3, [pc, #56]	; (8019d84 <igmp_ip_output_if+0x54>)
 8019d4a:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8019d4e:	3301      	adds	r3, #1
 8019d50:	b29a      	uxth	r2, r3
 8019d52:	4b0c      	ldr	r3, [pc, #48]	; (8019d84 <igmp_ip_output_if+0x54>)
 8019d54:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
  return ip4_output_if_opt(p, src, dest, IGMP_TTL, 0, IP_PROTO_IGMP, netif, ra, ROUTER_ALERTLEN);
 8019d58:	2304      	movs	r3, #4
 8019d5a:	9304      	str	r3, [sp, #16]
 8019d5c:	f107 0314 	add.w	r3, r7, #20
 8019d60:	9303      	str	r3, [sp, #12]
 8019d62:	683b      	ldr	r3, [r7, #0]
 8019d64:	9302      	str	r3, [sp, #8]
 8019d66:	2302      	movs	r3, #2
 8019d68:	9301      	str	r3, [sp, #4]
 8019d6a:	2300      	movs	r3, #0
 8019d6c:	9300      	str	r3, [sp, #0]
 8019d6e:	2301      	movs	r3, #1
 8019d70:	687a      	ldr	r2, [r7, #4]
 8019d72:	68b9      	ldr	r1, [r7, #8]
 8019d74:	68f8      	ldr	r0, [r7, #12]
 8019d76:	f000 fc04 	bl	801a582 <ip4_output_if_opt>
 8019d7a:	4603      	mov	r3, r0
}
 8019d7c:	4618      	mov	r0, r3
 8019d7e:	3718      	adds	r7, #24
 8019d80:	46bd      	mov	sp, r7
 8019d82:	bd80      	pop	{r7, pc}
 8019d84:	2000a3ec 	.word	0x2000a3ec

08019d88 <igmp_send>:
 * @param group the group to which to send the packet
 * @param type the type of igmp packet to send
 */
static void
igmp_send(struct netif *netif, struct igmp_group *group, u8_t type)
{
 8019d88:	b580      	push	{r7, lr}
 8019d8a:	b088      	sub	sp, #32
 8019d8c:	af00      	add	r7, sp, #0
 8019d8e:	60f8      	str	r0, [r7, #12]
 8019d90:	60b9      	str	r1, [r7, #8]
 8019d92:	4613      	mov	r3, r2
 8019d94:	71fb      	strb	r3, [r7, #7]
  struct pbuf     *p    = NULL;
 8019d96:	2300      	movs	r3, #0
 8019d98:	61bb      	str	r3, [r7, #24]
  struct igmp_msg *igmp = NULL;
 8019d9a:	2300      	movs	r3, #0
 8019d9c:	617b      	str	r3, [r7, #20]
  ip4_addr_t   src  = *IP4_ADDR_ANY4;
 8019d9e:	4b34      	ldr	r3, [pc, #208]	; (8019e70 <igmp_send+0xe8>)
 8019da0:	681b      	ldr	r3, [r3, #0]
 8019da2:	613b      	str	r3, [r7, #16]
  ip4_addr_t  *dest = NULL;
 8019da4:	2300      	movs	r3, #0
 8019da6:	61fb      	str	r3, [r7, #28]

  /* IP header + "router alert" option + IGMP header */
  p = pbuf_alloc(PBUF_TRANSPORT, IGMP_MINLEN, PBUF_RAM);
 8019da8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019dac:	2108      	movs	r1, #8
 8019dae:	2036      	movs	r0, #54	; 0x36
 8019db0:	f7f4 fc8a 	bl	800e6c8 <pbuf_alloc>
 8019db4:	61b8      	str	r0, [r7, #24]

  if (p) {
 8019db6:	69bb      	ldr	r3, [r7, #24]
 8019db8:	2b00      	cmp	r3, #0
 8019dba:	d04c      	beq.n	8019e56 <igmp_send+0xce>
    igmp = (struct igmp_msg *)p->payload;
 8019dbc:	69bb      	ldr	r3, [r7, #24]
 8019dbe:	685b      	ldr	r3, [r3, #4]
 8019dc0:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
 8019dc2:	69bb      	ldr	r3, [r7, #24]
 8019dc4:	895b      	ldrh	r3, [r3, #10]
 8019dc6:	2b07      	cmp	r3, #7
 8019dc8:	d806      	bhi.n	8019dd8 <igmp_send+0x50>
 8019dca:	4b2a      	ldr	r3, [pc, #168]	; (8019e74 <igmp_send+0xec>)
 8019dcc:	f240 3202 	movw	r2, #770	; 0x302
 8019dd0:	4929      	ldr	r1, [pc, #164]	; (8019e78 <igmp_send+0xf0>)
 8019dd2:	482a      	ldr	r0, [pc, #168]	; (8019e7c <igmp_send+0xf4>)
 8019dd4:	f006 fb02 	bl	80203dc <iprintf>
                (p->len >= sizeof(struct igmp_msg)));
    ip4_addr_copy(src, *netif_ip4_addr(netif));
 8019dd8:	68fb      	ldr	r3, [r7, #12]
 8019dda:	3304      	adds	r3, #4
 8019ddc:	681b      	ldr	r3, [r3, #0]
 8019dde:	613b      	str	r3, [r7, #16]

    if (type == IGMP_V2_MEMB_REPORT) {
 8019de0:	79fb      	ldrb	r3, [r7, #7]
 8019de2:	2b16      	cmp	r3, #22
 8019de4:	d10a      	bne.n	8019dfc <igmp_send+0x74>
      dest = &(group->group_address);
 8019de6:	68bb      	ldr	r3, [r7, #8]
 8019de8:	3304      	adds	r3, #4
 8019dea:	61fb      	str	r3, [r7, #28]
      ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 8019dec:	68bb      	ldr	r3, [r7, #8]
 8019dee:	685a      	ldr	r2, [r3, #4]
 8019df0:	697b      	ldr	r3, [r7, #20]
 8019df2:	605a      	str	r2, [r3, #4]
      group->last_reporter_flag = 1; /* Remember we were the last to report */
 8019df4:	68bb      	ldr	r3, [r7, #8]
 8019df6:	2201      	movs	r2, #1
 8019df8:	721a      	strb	r2, [r3, #8]
 8019dfa:	e008      	b.n	8019e0e <igmp_send+0x86>
    } else {
      if (type == IGMP_LEAVE_GROUP) {
 8019dfc:	79fb      	ldrb	r3, [r7, #7]
 8019dfe:	2b17      	cmp	r3, #23
 8019e00:	d105      	bne.n	8019e0e <igmp_send+0x86>
        dest = &allrouters;
 8019e02:	4b1f      	ldr	r3, [pc, #124]	; (8019e80 <igmp_send+0xf8>)
 8019e04:	61fb      	str	r3, [r7, #28]
        ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 8019e06:	68bb      	ldr	r3, [r7, #8]
 8019e08:	685a      	ldr	r2, [r3, #4]
 8019e0a:	697b      	ldr	r3, [r7, #20]
 8019e0c:	605a      	str	r2, [r3, #4]
      }
    }

    if ((type == IGMP_V2_MEMB_REPORT) || (type == IGMP_LEAVE_GROUP)) {
 8019e0e:	79fb      	ldrb	r3, [r7, #7]
 8019e10:	2b16      	cmp	r3, #22
 8019e12:	d002      	beq.n	8019e1a <igmp_send+0x92>
 8019e14:	79fb      	ldrb	r3, [r7, #7]
 8019e16:	2b17      	cmp	r3, #23
 8019e18:	d119      	bne.n	8019e4e <igmp_send+0xc6>
      igmp->igmp_msgtype  = type;
 8019e1a:	697b      	ldr	r3, [r7, #20]
 8019e1c:	79fa      	ldrb	r2, [r7, #7]
 8019e1e:	701a      	strb	r2, [r3, #0]
      igmp->igmp_maxresp  = 0;
 8019e20:	697b      	ldr	r3, [r7, #20]
 8019e22:	2200      	movs	r2, #0
 8019e24:	705a      	strb	r2, [r3, #1]
      igmp->igmp_checksum = 0;
 8019e26:	697b      	ldr	r3, [r7, #20]
 8019e28:	2200      	movs	r2, #0
 8019e2a:	709a      	strb	r2, [r3, #2]
 8019e2c:	2200      	movs	r2, #0
 8019e2e:	70da      	strb	r2, [r3, #3]
      igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);
 8019e30:	2108      	movs	r1, #8
 8019e32:	6978      	ldr	r0, [r7, #20]
 8019e34:	f7f3 f91c 	bl	800d070 <inet_chksum>
 8019e38:	4603      	mov	r3, r0
 8019e3a:	461a      	mov	r2, r3
 8019e3c:	697b      	ldr	r3, [r7, #20]
 8019e3e:	805a      	strh	r2, [r3, #2]

      igmp_ip_output_if(p, &src, dest, netif);
 8019e40:	f107 0110 	add.w	r1, r7, #16
 8019e44:	68fb      	ldr	r3, [r7, #12]
 8019e46:	69fa      	ldr	r2, [r7, #28]
 8019e48:	69b8      	ldr	r0, [r7, #24]
 8019e4a:	f7ff ff71 	bl	8019d30 <igmp_ip_output_if>
    }

    pbuf_free(p);
 8019e4e:	69b8      	ldr	r0, [r7, #24]
 8019e50:	f7f4 ff1e 	bl	800ec90 <pbuf_free>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_send: not enough memory for igmp_send\n"));
    IGMP_STATS_INC(igmp.memerr);
  }
}
 8019e54:	e007      	b.n	8019e66 <igmp_send+0xde>
    IGMP_STATS_INC(igmp.memerr);
 8019e56:	4b0b      	ldr	r3, [pc, #44]	; (8019e84 <igmp_send+0xfc>)
 8019e58:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8019e5c:	3301      	adds	r3, #1
 8019e5e:	b29a      	uxth	r2, r3
 8019e60:	4b08      	ldr	r3, [pc, #32]	; (8019e84 <igmp_send+0xfc>)
 8019e62:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
}
 8019e66:	bf00      	nop
 8019e68:	3720      	adds	r7, #32
 8019e6a:	46bd      	mov	sp, r7
 8019e6c:	bd80      	pop	{r7, pc}
 8019e6e:	bf00      	nop
 8019e70:	08026bf4 	.word	0x08026bf4
 8019e74:	08025b90 	.word	0x08025b90
 8019e78:	08025eac 	.word	0x08025eac
 8019e7c:	08025bfc 	.word	0x08025bfc
 8019e80:	2000698c 	.word	0x2000698c
 8019e84:	2000a3ec 	.word	0x2000a3ec

08019e88 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8019e88:	b580      	push	{r7, lr}
 8019e8a:	b086      	sub	sp, #24
 8019e8c:	af02      	add	r7, sp, #8
 8019e8e:	6078      	str	r0, [r7, #4]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_MULTICAST_TX_OPTIONS
  /* Use administratively selected interface for multicast by default */
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
 8019e90:	687b      	ldr	r3, [r7, #4]
 8019e92:	681b      	ldr	r3, [r3, #0]
 8019e94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019e98:	2be0      	cmp	r3, #224	; 0xe0
 8019e9a:	d106      	bne.n	8019eaa <ip4_route+0x22>
 8019e9c:	4b43      	ldr	r3, [pc, #268]	; (8019fac <ip4_route+0x124>)
 8019e9e:	681b      	ldr	r3, [r3, #0]
 8019ea0:	2b00      	cmp	r3, #0
 8019ea2:	d002      	beq.n	8019eaa <ip4_route+0x22>
    return ip4_default_multicast_netif;
 8019ea4:	4b41      	ldr	r3, [pc, #260]	; (8019fac <ip4_route+0x124>)
 8019ea6:	681b      	ldr	r3, [r3, #0]
 8019ea8:	e07b      	b.n	8019fa2 <ip4_route+0x11a>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8019eaa:	4b41      	ldr	r3, [pc, #260]	; (8019fb0 <ip4_route+0x128>)
 8019eac:	681b      	ldr	r3, [r3, #0]
 8019eae:	60fb      	str	r3, [r7, #12]
 8019eb0:	e036      	b.n	8019f20 <ip4_route+0x98>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019eb2:	68fb      	ldr	r3, [r7, #12]
 8019eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8019eb8:	f003 0301 	and.w	r3, r3, #1
 8019ebc:	b2db      	uxtb	r3, r3
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	d02b      	beq.n	8019f1a <ip4_route+0x92>
 8019ec2:	68fb      	ldr	r3, [r7, #12]
 8019ec4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8019ec8:	089b      	lsrs	r3, r3, #2
 8019eca:	f003 0301 	and.w	r3, r3, #1
 8019ece:	b2db      	uxtb	r3, r3
 8019ed0:	2b00      	cmp	r3, #0
 8019ed2:	d022      	beq.n	8019f1a <ip4_route+0x92>
 8019ed4:	68fb      	ldr	r3, [r7, #12]
 8019ed6:	3304      	adds	r3, #4
 8019ed8:	681b      	ldr	r3, [r3, #0]
 8019eda:	2b00      	cmp	r3, #0
 8019edc:	d01d      	beq.n	8019f1a <ip4_route+0x92>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	681a      	ldr	r2, [r3, #0]
 8019ee2:	68fb      	ldr	r3, [r7, #12]
 8019ee4:	3304      	adds	r3, #4
 8019ee6:	681b      	ldr	r3, [r3, #0]
 8019ee8:	405a      	eors	r2, r3
 8019eea:	68fb      	ldr	r3, [r7, #12]
 8019eec:	3308      	adds	r3, #8
 8019eee:	681b      	ldr	r3, [r3, #0]
 8019ef0:	4013      	ands	r3, r2
 8019ef2:	2b00      	cmp	r3, #0
 8019ef4:	d101      	bne.n	8019efa <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 8019ef6:	68fb      	ldr	r3, [r7, #12]
 8019ef8:	e053      	b.n	8019fa2 <ip4_route+0x11a>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8019efa:	68fb      	ldr	r3, [r7, #12]
 8019efc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8019f00:	f003 0302 	and.w	r3, r3, #2
 8019f04:	2b00      	cmp	r3, #0
 8019f06:	d108      	bne.n	8019f1a <ip4_route+0x92>
 8019f08:	687b      	ldr	r3, [r7, #4]
 8019f0a:	681a      	ldr	r2, [r3, #0]
 8019f0c:	68fb      	ldr	r3, [r7, #12]
 8019f0e:	330c      	adds	r3, #12
 8019f10:	681b      	ldr	r3, [r3, #0]
 8019f12:	429a      	cmp	r2, r3
 8019f14:	d101      	bne.n	8019f1a <ip4_route+0x92>
        /* return netif on which to forward IP packet */
        return netif;
 8019f16:	68fb      	ldr	r3, [r7, #12]
 8019f18:	e043      	b.n	8019fa2 <ip4_route+0x11a>
  NETIF_FOREACH(netif) {
 8019f1a:	68fb      	ldr	r3, [r7, #12]
 8019f1c:	681b      	ldr	r3, [r3, #0]
 8019f1e:	60fb      	str	r3, [r7, #12]
 8019f20:	68fb      	ldr	r3, [r7, #12]
 8019f22:	2b00      	cmp	r3, #0
 8019f24:	d1c5      	bne.n	8019eb2 <ip4_route+0x2a>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019f26:	4b23      	ldr	r3, [pc, #140]	; (8019fb4 <ip4_route+0x12c>)
 8019f28:	681b      	ldr	r3, [r3, #0]
 8019f2a:	2b00      	cmp	r3, #0
 8019f2c:	d01a      	beq.n	8019f64 <ip4_route+0xdc>
 8019f2e:	4b21      	ldr	r3, [pc, #132]	; (8019fb4 <ip4_route+0x12c>)
 8019f30:	681b      	ldr	r3, [r3, #0]
 8019f32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8019f36:	f003 0301 	and.w	r3, r3, #1
 8019f3a:	2b00      	cmp	r3, #0
 8019f3c:	d012      	beq.n	8019f64 <ip4_route+0xdc>
 8019f3e:	4b1d      	ldr	r3, [pc, #116]	; (8019fb4 <ip4_route+0x12c>)
 8019f40:	681b      	ldr	r3, [r3, #0]
 8019f42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8019f46:	f003 0304 	and.w	r3, r3, #4
 8019f4a:	2b00      	cmp	r3, #0
 8019f4c:	d00a      	beq.n	8019f64 <ip4_route+0xdc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019f4e:	4b19      	ldr	r3, [pc, #100]	; (8019fb4 <ip4_route+0x12c>)
 8019f50:	681b      	ldr	r3, [r3, #0]
 8019f52:	3304      	adds	r3, #4
 8019f54:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019f56:	2b00      	cmp	r3, #0
 8019f58:	d004      	beq.n	8019f64 <ip4_route+0xdc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019f5a:	687b      	ldr	r3, [r7, #4]
 8019f5c:	681b      	ldr	r3, [r3, #0]
 8019f5e:	b2db      	uxtb	r3, r3
 8019f60:	2b7f      	cmp	r3, #127	; 0x7f
 8019f62:	d11c      	bne.n	8019f9e <ip4_route+0x116>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	781b      	ldrb	r3, [r3, #0]
 8019f68:	4619      	mov	r1, r3
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	3301      	adds	r3, #1
 8019f6e:	781b      	ldrb	r3, [r3, #0]
 8019f70:	461a      	mov	r2, r3
 8019f72:	687b      	ldr	r3, [r7, #4]
 8019f74:	3302      	adds	r3, #2
 8019f76:	781b      	ldrb	r3, [r3, #0]
 8019f78:	4618      	mov	r0, r3
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	3303      	adds	r3, #3
 8019f7e:	781b      	ldrb	r3, [r3, #0]
 8019f80:	9300      	str	r3, [sp, #0]
 8019f82:	4603      	mov	r3, r0
 8019f84:	480c      	ldr	r0, [pc, #48]	; (8019fb8 <ip4_route+0x130>)
 8019f86:	f006 fa29 	bl	80203dc <iprintf>
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 8019f8a:	4b0c      	ldr	r3, [pc, #48]	; (8019fbc <ip4_route+0x134>)
 8019f8c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8019f90:	3301      	adds	r3, #1
 8019f92:	b29a      	uxth	r2, r3
 8019f94:	4b09      	ldr	r3, [pc, #36]	; (8019fbc <ip4_route+0x134>)
 8019f96:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8019f9a:	2300      	movs	r3, #0
 8019f9c:	e001      	b.n	8019fa2 <ip4_route+0x11a>
  }

  return netif_default;
 8019f9e:	4b05      	ldr	r3, [pc, #20]	; (8019fb4 <ip4_route+0x12c>)
 8019fa0:	681b      	ldr	r3, [r3, #0]
}
 8019fa2:	4618      	mov	r0, r3
 8019fa4:	3710      	adds	r7, #16
 8019fa6:	46bd      	mov	sp, r7
 8019fa8:	bd80      	pop	{r7, pc}
 8019faa:	bf00      	nop
 8019fac:	20006994 	.word	0x20006994
 8019fb0:	2000a3e0 	.word	0x2000a3e0
 8019fb4:	2000a3e4 	.word	0x2000a3e4
 8019fb8:	08025ee8 	.word	0x08025ee8
 8019fbc:	2000a3ec 	.word	0x2000a3ec

08019fc0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8019fc0:	b5b0      	push	{r4, r5, r7, lr}
 8019fc2:	b084      	sub	sp, #16
 8019fc4:	af02      	add	r7, sp, #8
 8019fc6:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: iphdr->dest 0x%"X32_F" netif->ip_addr 0x%"X32_F" (0x%"X32_F", 0x%"X32_F", 0x%"X32_F")\n",
 8019fc8:	4b28      	ldr	r3, [pc, #160]	; (801a06c <ip4_input_accept+0xac>)
 8019fca:	6958      	ldr	r0, [r3, #20]
 8019fcc:	687b      	ldr	r3, [r7, #4]
 8019fce:	3304      	adds	r3, #4
 8019fd0:	681c      	ldr	r4, [r3, #0]
 8019fd2:	4b26      	ldr	r3, [pc, #152]	; (801a06c <ip4_input_accept+0xac>)
 8019fd4:	695a      	ldr	r2, [r3, #20]
 8019fd6:	687b      	ldr	r3, [r7, #4]
 8019fd8:	3308      	adds	r3, #8
 8019fda:	681b      	ldr	r3, [r3, #0]
 8019fdc:	ea02 0503 	and.w	r5, r2, r3
 8019fe0:	687b      	ldr	r3, [r7, #4]
 8019fe2:	3304      	adds	r3, #4
 8019fe4:	681a      	ldr	r2, [r3, #0]
 8019fe6:	687b      	ldr	r3, [r7, #4]
 8019fe8:	3308      	adds	r3, #8
 8019fea:	681b      	ldr	r3, [r3, #0]
 8019fec:	4013      	ands	r3, r2
 8019fee:	4a1f      	ldr	r2, [pc, #124]	; (801a06c <ip4_input_accept+0xac>)
 8019ff0:	6951      	ldr	r1, [r2, #20]
 8019ff2:	687a      	ldr	r2, [r7, #4]
 8019ff4:	3208      	adds	r2, #8
 8019ff6:	6812      	ldr	r2, [r2, #0]
 8019ff8:	43d2      	mvns	r2, r2
 8019ffa:	400a      	ands	r2, r1
 8019ffc:	9201      	str	r2, [sp, #4]
 8019ffe:	9300      	str	r3, [sp, #0]
 801a000:	462b      	mov	r3, r5
 801a002:	4622      	mov	r2, r4
 801a004:	4601      	mov	r1, r0
 801a006:	481a      	ldr	r0, [pc, #104]	; (801a070 <ip4_input_accept+0xb0>)
 801a008:	f006 f9e8 	bl	80203dc <iprintf>
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801a00c:	687b      	ldr	r3, [r7, #4]
 801a00e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801a012:	f003 0301 	and.w	r3, r3, #1
 801a016:	b2db      	uxtb	r3, r3
 801a018:	2b00      	cmp	r3, #0
 801a01a:	d021      	beq.n	801a060 <ip4_input_accept+0xa0>
 801a01c:	687b      	ldr	r3, [r7, #4]
 801a01e:	3304      	adds	r3, #4
 801a020:	681b      	ldr	r3, [r3, #0]
 801a022:	2b00      	cmp	r3, #0
 801a024:	d01c      	beq.n	801a060 <ip4_input_accept+0xa0>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801a026:	4b11      	ldr	r3, [pc, #68]	; (801a06c <ip4_input_accept+0xac>)
 801a028:	695a      	ldr	r2, [r3, #20]
 801a02a:	687b      	ldr	r3, [r7, #4]
 801a02c:	3304      	adds	r3, #4
 801a02e:	681b      	ldr	r3, [r3, #0]
 801a030:	429a      	cmp	r2, r3
 801a032:	d008      	beq.n	801a046 <ip4_input_accept+0x86>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801a034:	4b0d      	ldr	r3, [pc, #52]	; (801a06c <ip4_input_accept+0xac>)
 801a036:	695b      	ldr	r3, [r3, #20]
 801a038:	6879      	ldr	r1, [r7, #4]
 801a03a:	4618      	mov	r0, r3
 801a03c:	f000 fcec 	bl	801aa18 <ip4_addr_isbroadcast_u32>
 801a040:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801a042:	2b00      	cmp	r3, #0
 801a044:	d00c      	beq.n	801a060 <ip4_input_accept+0xa0>
#if LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF
        || (ip4_addr_get_u32(ip4_current_dest_addr()) == PP_HTONL(IPADDR_LOOPBACK))
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
 801a046:	687b      	ldr	r3, [r7, #4]
 801a048:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801a04c:	4619      	mov	r1, r3
 801a04e:	687b      	ldr	r3, [r7, #4]
 801a050:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 801a054:	461a      	mov	r2, r3
 801a056:	4807      	ldr	r0, [pc, #28]	; (801a074 <ip4_input_accept+0xb4>)
 801a058:	f006 f9c0 	bl	80203dc <iprintf>
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801a05c:	2301      	movs	r3, #1
 801a05e:	e000      	b.n	801a062 <ip4_input_accept+0xa2>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801a060:	2300      	movs	r3, #0
}
 801a062:	4618      	mov	r0, r3
 801a064:	3708      	adds	r7, #8
 801a066:	46bd      	mov	sp, r7
 801a068:	bdb0      	pop	{r4, r5, r7, pc}
 801a06a:	bf00      	nop
 801a06c:	200070d4 	.word	0x200070d4
 801a070:	08025f10 	.word	0x08025f10
 801a074:	08025f58 	.word	0x08025f58

0801a078 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801a078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a07c:	b08a      	sub	sp, #40	; 0x28
 801a07e:	af02      	add	r7, sp, #8
 801a080:	6078      	str	r0, [r7, #4]
 801a082:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801a084:	2301      	movs	r3, #1
 801a086:	617b      	str	r3, [r7, #20]
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();

  IP_STATS_INC(ip.recv);
 801a088:	4b9f      	ldr	r3, [pc, #636]	; (801a308 <ip4_input+0x290>)
 801a08a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801a08e:	3301      	adds	r3, #1
 801a090:	b29a      	uxth	r2, r3
 801a092:	4b9d      	ldr	r3, [pc, #628]	; (801a308 <ip4_input+0x290>)
 801a094:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	685b      	ldr	r3, [r3, #4]
 801a09c:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801a09e:	69fb      	ldr	r3, [r7, #28]
 801a0a0:	781b      	ldrb	r3, [r3, #0]
 801a0a2:	091b      	lsrs	r3, r3, #4
 801a0a4:	b2db      	uxtb	r3, r3
 801a0a6:	2b04      	cmp	r3, #4
 801a0a8:	d01f      	beq.n	801a0ea <ip4_input+0x72>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
 801a0aa:	69fb      	ldr	r3, [r7, #28]
 801a0ac:	781b      	ldrb	r3, [r3, #0]
 801a0ae:	091b      	lsrs	r3, r3, #4
 801a0b0:	b2db      	uxtb	r3, r3
 801a0b2:	4619      	mov	r1, r3
 801a0b4:	4895      	ldr	r0, [pc, #596]	; (801a30c <ip4_input+0x294>)
 801a0b6:	f006 f991 	bl	80203dc <iprintf>
    ip4_debug_print(p);
 801a0ba:	6878      	ldr	r0, [r7, #4]
 801a0bc:	f000 fbe8 	bl	801a890 <ip4_debug_print>
    pbuf_free(p);
 801a0c0:	6878      	ldr	r0, [r7, #4]
 801a0c2:	f7f4 fde5 	bl	800ec90 <pbuf_free>
    IP_STATS_INC(ip.err);
 801a0c6:	4b90      	ldr	r3, [pc, #576]	; (801a308 <ip4_input+0x290>)
 801a0c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801a0cc:	3301      	adds	r3, #1
 801a0ce:	b29a      	uxth	r2, r3
 801a0d0:	4b8d      	ldr	r3, [pc, #564]	; (801a308 <ip4_input+0x290>)
 801a0d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
 801a0d6:	4b8c      	ldr	r3, [pc, #560]	; (801a308 <ip4_input+0x290>)
 801a0d8:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 801a0dc:	3301      	adds	r3, #1
 801a0de:	b29a      	uxth	r2, r3
 801a0e0:	4b89      	ldr	r3, [pc, #548]	; (801a308 <ip4_input+0x290>)
 801a0e2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801a0e6:	2300      	movs	r3, #0
 801a0e8:	e21b      	b.n	801a522 <ip4_input+0x4aa>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801a0ea:	69fb      	ldr	r3, [r7, #28]
 801a0ec:	781b      	ldrb	r3, [r3, #0]
 801a0ee:	f003 030f 	and.w	r3, r3, #15
 801a0f2:	b2db      	uxtb	r3, r3
 801a0f4:	009b      	lsls	r3, r3, #2
 801a0f6:	b2db      	uxtb	r3, r3
 801a0f8:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801a0fa:	69fb      	ldr	r3, [r7, #28]
 801a0fc:	885b      	ldrh	r3, [r3, #2]
 801a0fe:	b29b      	uxth	r3, r3
 801a100:	4618      	mov	r0, r3
 801a102:	f7f2 fc3d 	bl	800c980 <lwip_htons>
 801a106:	4603      	mov	r3, r0
 801a108:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801a10a:	687b      	ldr	r3, [r7, #4]
 801a10c:	891b      	ldrh	r3, [r3, #8]
 801a10e:	8a3a      	ldrh	r2, [r7, #16]
 801a110:	429a      	cmp	r2, r3
 801a112:	d204      	bcs.n	801a11e <ip4_input+0xa6>
    pbuf_realloc(p, iphdr_len);
 801a114:	8a3b      	ldrh	r3, [r7, #16]
 801a116:	4619      	mov	r1, r3
 801a118:	6878      	ldr	r0, [r7, #4]
 801a11a:	f7f4 fc33 	bl	800e984 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	895b      	ldrh	r3, [r3, #10]
 801a122:	8a7a      	ldrh	r2, [r7, #18]
 801a124:	429a      	cmp	r2, r3
 801a126:	d807      	bhi.n	801a138 <ip4_input+0xc0>
 801a128:	687b      	ldr	r3, [r7, #4]
 801a12a:	891b      	ldrh	r3, [r3, #8]
 801a12c:	8a3a      	ldrh	r2, [r7, #16]
 801a12e:	429a      	cmp	r2, r3
 801a130:	d802      	bhi.n	801a138 <ip4_input+0xc0>
 801a132:	8a7b      	ldrh	r3, [r7, #18]
 801a134:	2b13      	cmp	r3, #19
 801a136:	d834      	bhi.n	801a1a2 <ip4_input+0x12a>
    if (iphdr_hlen < IP_HLEN) {
 801a138:	8a7b      	ldrh	r3, [r7, #18]
 801a13a:	2b13      	cmp	r3, #19
 801a13c:	d804      	bhi.n	801a148 <ip4_input+0xd0>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 801a13e:	8a7b      	ldrh	r3, [r7, #18]
 801a140:	4619      	mov	r1, r3
 801a142:	4873      	ldr	r0, [pc, #460]	; (801a310 <ip4_input+0x298>)
 801a144:	f006 f94a 	bl	80203dc <iprintf>
                  ("ip4_input: short IP header (%"U16_F" bytes) received, IP packet dropped\n", iphdr_hlen));
    }
    if (iphdr_hlen > p->len) {
 801a148:	687b      	ldr	r3, [r7, #4]
 801a14a:	895b      	ldrh	r3, [r3, #10]
 801a14c:	8a7a      	ldrh	r2, [r7, #18]
 801a14e:	429a      	cmp	r2, r3
 801a150:	d906      	bls.n	801a160 <ip4_input+0xe8>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 801a152:	8a79      	ldrh	r1, [r7, #18]
 801a154:	687b      	ldr	r3, [r7, #4]
 801a156:	895b      	ldrh	r3, [r3, #10]
 801a158:	461a      	mov	r2, r3
 801a15a:	486e      	ldr	r0, [pc, #440]	; (801a314 <ip4_input+0x29c>)
 801a15c:	f006 f93e 	bl	80203dc <iprintf>
                  ("IP header (len %"U16_F") does not fit in first pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_hlen, p->len));
    }
    if (iphdr_len > p->tot_len) {
 801a160:	687b      	ldr	r3, [r7, #4]
 801a162:	891b      	ldrh	r3, [r3, #8]
 801a164:	8a3a      	ldrh	r2, [r7, #16]
 801a166:	429a      	cmp	r2, r3
 801a168:	d906      	bls.n	801a178 <ip4_input+0x100>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 801a16a:	8a39      	ldrh	r1, [r7, #16]
 801a16c:	687b      	ldr	r3, [r7, #4]
 801a16e:	891b      	ldrh	r3, [r3, #8]
 801a170:	461a      	mov	r2, r3
 801a172:	4869      	ldr	r0, [pc, #420]	; (801a318 <ip4_input+0x2a0>)
 801a174:	f006 f932 	bl	80203dc <iprintf>
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801a178:	6878      	ldr	r0, [r7, #4]
 801a17a:	f7f4 fd89 	bl	800ec90 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 801a17e:	4b62      	ldr	r3, [pc, #392]	; (801a308 <ip4_input+0x290>)
 801a180:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801a184:	3301      	adds	r3, #1
 801a186:	b29a      	uxth	r2, r3
 801a188:	4b5f      	ldr	r3, [pc, #380]	; (801a308 <ip4_input+0x290>)
 801a18a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    IP_STATS_INC(ip.drop);
 801a18e:	4b5e      	ldr	r3, [pc, #376]	; (801a308 <ip4_input+0x290>)
 801a190:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 801a194:	3301      	adds	r3, #1
 801a196:	b29a      	uxth	r2, r3
 801a198:	4b5b      	ldr	r3, [pc, #364]	; (801a308 <ip4_input+0x290>)
 801a19a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801a19e:	2300      	movs	r3, #0
 801a1a0:	e1bf      	b.n	801a522 <ip4_input+0x4aa>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801a1a2:	69fb      	ldr	r3, [r7, #28]
 801a1a4:	691b      	ldr	r3, [r3, #16]
 801a1a6:	4a5d      	ldr	r2, [pc, #372]	; (801a31c <ip4_input+0x2a4>)
 801a1a8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801a1aa:	69fb      	ldr	r3, [r7, #28]
 801a1ac:	68db      	ldr	r3, [r3, #12]
 801a1ae:	4a5b      	ldr	r2, [pc, #364]	; (801a31c <ip4_input+0x2a4>)
 801a1b0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a1b2:	4b5a      	ldr	r3, [pc, #360]	; (801a31c <ip4_input+0x2a4>)
 801a1b4:	695b      	ldr	r3, [r3, #20]
 801a1b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a1ba:	2be0      	cmp	r3, #224	; 0xe0
 801a1bc:	d120      	bne.n	801a200 <ip4_input+0x188>
#if LWIP_IGMP
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 801a1be:	683b      	ldr	r3, [r7, #0]
 801a1c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801a1c4:	f003 0320 	and.w	r3, r3, #32
 801a1c8:	2b00      	cmp	r3, #0
 801a1ca:	d016      	beq.n	801a1fa <ip4_input+0x182>
 801a1cc:	4954      	ldr	r1, [pc, #336]	; (801a320 <ip4_input+0x2a8>)
 801a1ce:	6838      	ldr	r0, [r7, #0]
 801a1d0:	f7ff f999 	bl	8019506 <igmp_lookfor_group>
 801a1d4:	4603      	mov	r3, r0
 801a1d6:	2b00      	cmp	r3, #0
 801a1d8:	d00f      	beq.n	801a1fa <ip4_input+0x182>
      /* IGMP snooping switches need 0.0.0.0 to be allowed as source address (RFC 4541) */
      ip4_addr_t allsystems;
      IP4_ADDR(&allsystems, 224, 0, 0, 1);
 801a1da:	4b52      	ldr	r3, [pc, #328]	; (801a324 <ip4_input+0x2ac>)
 801a1dc:	60bb      	str	r3, [r7, #8]
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
 801a1de:	4b4f      	ldr	r3, [pc, #316]	; (801a31c <ip4_input+0x2a4>)
 801a1e0:	695a      	ldr	r2, [r3, #20]
 801a1e2:	68bb      	ldr	r3, [r7, #8]
 801a1e4:	429a      	cmp	r2, r3
 801a1e6:	d105      	bne.n	801a1f4 <ip4_input+0x17c>
          ip4_addr_isany(ip4_current_src_addr())) {
 801a1e8:	4b4c      	ldr	r3, [pc, #304]	; (801a31c <ip4_input+0x2a4>)
 801a1ea:	691b      	ldr	r3, [r3, #16]
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
 801a1ec:	2b00      	cmp	r3, #0
 801a1ee:	d101      	bne.n	801a1f4 <ip4_input+0x17c>
        check_ip_src = 0;
 801a1f0:	2300      	movs	r3, #0
 801a1f2:	617b      	str	r3, [r7, #20]
      }
      netif = inp;
 801a1f4:	683b      	ldr	r3, [r7, #0]
 801a1f6:	61bb      	str	r3, [r7, #24]
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 801a1f8:	e02a      	b.n	801a250 <ip4_input+0x1d8>
    } else {
      netif = NULL;
 801a1fa:	2300      	movs	r3, #0
 801a1fc:	61bb      	str	r3, [r7, #24]
 801a1fe:	e027      	b.n	801a250 <ip4_input+0x1d8>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801a200:	6838      	ldr	r0, [r7, #0]
 801a202:	f7ff fedd 	bl	8019fc0 <ip4_input_accept>
 801a206:	4603      	mov	r3, r0
 801a208:	2b00      	cmp	r3, #0
 801a20a:	d002      	beq.n	801a212 <ip4_input+0x19a>
      netif = inp;
 801a20c:	683b      	ldr	r3, [r7, #0]
 801a20e:	61bb      	str	r3, [r7, #24]
 801a210:	e01e      	b.n	801a250 <ip4_input+0x1d8>
    } else {
      netif = NULL;
 801a212:	2300      	movs	r3, #0
 801a214:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801a216:	4b41      	ldr	r3, [pc, #260]	; (801a31c <ip4_input+0x2a4>)
 801a218:	695b      	ldr	r3, [r3, #20]
 801a21a:	b2db      	uxtb	r3, r3
 801a21c:	2b7f      	cmp	r3, #127	; 0x7f
 801a21e:	d017      	beq.n	801a250 <ip4_input+0x1d8>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801a220:	4b41      	ldr	r3, [pc, #260]	; (801a328 <ip4_input+0x2b0>)
 801a222:	681b      	ldr	r3, [r3, #0]
 801a224:	61bb      	str	r3, [r7, #24]
 801a226:	e00e      	b.n	801a246 <ip4_input+0x1ce>
          if (netif == inp) {
 801a228:	69ba      	ldr	r2, [r7, #24]
 801a22a:	683b      	ldr	r3, [r7, #0]
 801a22c:	429a      	cmp	r2, r3
 801a22e:	d006      	beq.n	801a23e <ip4_input+0x1c6>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801a230:	69b8      	ldr	r0, [r7, #24]
 801a232:	f7ff fec5 	bl	8019fc0 <ip4_input_accept>
 801a236:	4603      	mov	r3, r0
 801a238:	2b00      	cmp	r3, #0
 801a23a:	d108      	bne.n	801a24e <ip4_input+0x1d6>
 801a23c:	e000      	b.n	801a240 <ip4_input+0x1c8>
            continue;
 801a23e:	bf00      	nop
        NETIF_FOREACH(netif) {
 801a240:	69bb      	ldr	r3, [r7, #24]
 801a242:	681b      	ldr	r3, [r3, #0]
 801a244:	61bb      	str	r3, [r7, #24]
 801a246:	69bb      	ldr	r3, [r7, #24]
 801a248:	2b00      	cmp	r3, #0
 801a24a:	d1ed      	bne.n	801a228 <ip4_input+0x1b0>
 801a24c:	e000      	b.n	801a250 <ip4_input+0x1d8>
            break;
 801a24e:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801a250:	69bb      	ldr	r3, [r7, #24]
 801a252:	2b00      	cmp	r3, #0
 801a254:	d11f      	bne.n	801a296 <ip4_input+0x21e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801a256:	69fb      	ldr	r3, [r7, #28]
 801a258:	7a5b      	ldrb	r3, [r3, #9]
 801a25a:	2b11      	cmp	r3, #17
 801a25c:	d11b      	bne.n	801a296 <ip4_input+0x21e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801a25e:	8a7b      	ldrh	r3, [r7, #18]
 801a260:	69fa      	ldr	r2, [r7, #28]
 801a262:	4413      	add	r3, r2
 801a264:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
 801a266:	68fb      	ldr	r3, [r7, #12]
 801a268:	885b      	ldrh	r3, [r3, #2]
 801a26a:	b29b      	uxth	r3, r3
 801a26c:	4618      	mov	r0, r3
 801a26e:	f7f2 fb87 	bl	800c980 <lwip_htons>
 801a272:	4603      	mov	r3, r0
 801a274:	4619      	mov	r1, r3
 801a276:	482d      	ldr	r0, [pc, #180]	; (801a32c <ip4_input+0x2b4>)
 801a278:	f006 f8b0 	bl	80203dc <iprintf>
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801a27c:	68fb      	ldr	r3, [r7, #12]
 801a27e:	885b      	ldrh	r3, [r3, #2]
 801a280:	b29b      	uxth	r3, r3
 801a282:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801a286:	d106      	bne.n	801a296 <ip4_input+0x21e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
 801a288:	4829      	ldr	r0, [pc, #164]	; (801a330 <ip4_input+0x2b8>)
 801a28a:	f006 f943 	bl	8020514 <puts>
        netif = inp;
 801a28e:	683b      	ldr	r3, [r7, #0]
 801a290:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801a292:	2300      	movs	r3, #0
 801a294:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801a296:	697b      	ldr	r3, [r7, #20]
 801a298:	2b00      	cmp	r3, #0
 801a29a:	d022      	beq.n	801a2e2 <ip4_input+0x26a>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801a29c:	4b1f      	ldr	r3, [pc, #124]	; (801a31c <ip4_input+0x2a4>)
 801a29e:	691b      	ldr	r3, [r3, #16]
 801a2a0:	2b00      	cmp	r3, #0
 801a2a2:	d01e      	beq.n	801a2e2 <ip4_input+0x26a>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801a2a4:	4b1d      	ldr	r3, [pc, #116]	; (801a31c <ip4_input+0x2a4>)
 801a2a6:	691b      	ldr	r3, [r3, #16]
 801a2a8:	6839      	ldr	r1, [r7, #0]
 801a2aa:	4618      	mov	r0, r3
 801a2ac:	f000 fbb4 	bl	801aa18 <ip4_addr_isbroadcast_u32>
 801a2b0:	4603      	mov	r3, r0
 801a2b2:	2b00      	cmp	r3, #0
 801a2b4:	d105      	bne.n	801a2c2 <ip4_input+0x24a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801a2b6:	4b19      	ldr	r3, [pc, #100]	; (801a31c <ip4_input+0x2a4>)
 801a2b8:	691b      	ldr	r3, [r3, #16]
 801a2ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801a2be:	2be0      	cmp	r3, #224	; 0xe0
 801a2c0:	d10f      	bne.n	801a2e2 <ip4_input+0x26a>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
 801a2c2:	481c      	ldr	r0, [pc, #112]	; (801a334 <ip4_input+0x2bc>)
 801a2c4:	f006 f926 	bl	8020514 <puts>
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801a2c8:	6878      	ldr	r0, [r7, #4]
 801a2ca:	f7f4 fce1 	bl	800ec90 <pbuf_free>
      IP_STATS_INC(ip.drop);
 801a2ce:	4b0e      	ldr	r3, [pc, #56]	; (801a308 <ip4_input+0x290>)
 801a2d0:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 801a2d4:	3301      	adds	r3, #1
 801a2d6:	b29a      	uxth	r2, r3
 801a2d8:	4b0b      	ldr	r3, [pc, #44]	; (801a308 <ip4_input+0x290>)
 801a2da:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801a2de:	2300      	movs	r3, #0
 801a2e0:	e11f      	b.n	801a522 <ip4_input+0x4aa>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801a2e2:	69bb      	ldr	r3, [r7, #24]
 801a2e4:	2b00      	cmp	r3, #0
 801a2e6:	d129      	bne.n	801a33c <ip4_input+0x2c4>
    /* packet not for us, route or discard */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: packet not for us.\n"));
 801a2e8:	4813      	ldr	r0, [pc, #76]	; (801a338 <ip4_input+0x2c0>)
 801a2ea:	f006 f913 	bl	8020514 <puts>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, (struct ip_hdr *)p->payload, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
 801a2ee:	4b06      	ldr	r3, [pc, #24]	; (801a308 <ip4_input+0x290>)
 801a2f0:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 801a2f4:	3301      	adds	r3, #1
 801a2f6:	b29a      	uxth	r2, r3
 801a2f8:	4b03      	ldr	r3, [pc, #12]	; (801a308 <ip4_input+0x290>)
 801a2fa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801a2fe:	6878      	ldr	r0, [r7, #4]
 801a300:	f7f4 fcc6 	bl	800ec90 <pbuf_free>
    return ERR_OK;
 801a304:	2300      	movs	r3, #0
 801a306:	e10c      	b.n	801a522 <ip4_input+0x4aa>
 801a308:	2000a3ec 	.word	0x2000a3ec
 801a30c:	08025f88 	.word	0x08025f88
 801a310:	08025fbc 	.word	0x08025fbc
 801a314:	08026000 	.word	0x08026000
 801a318:	08026050 	.word	0x08026050
 801a31c:	200070d4 	.word	0x200070d4
 801a320:	200070e8 	.word	0x200070e8
 801a324:	010000e0 	.word	0x010000e0
 801a328:	2000a3e0 	.word	0x2000a3e0
 801a32c:	08026090 	.word	0x08026090
 801a330:	080260c0 	.word	0x080260c0
 801a334:	080260e4 	.word	0x080260e4
 801a338:	0802610c 	.word	0x0802610c
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801a33c:	69fb      	ldr	r3, [r7, #28]
 801a33e:	88db      	ldrh	r3, [r3, #6]
 801a340:	b29b      	uxth	r3, r3
 801a342:	461a      	mov	r2, r3
 801a344:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801a348:	4013      	ands	r3, r2
 801a34a:	2b00      	cmp	r3, #0
 801a34c:	d03d      	beq.n	801a3ca <ip4_input+0x352>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
 801a34e:	69fb      	ldr	r3, [r7, #28]
 801a350:	889b      	ldrh	r3, [r3, #4]
 801a352:	b29b      	uxth	r3, r3
 801a354:	4618      	mov	r0, r3
 801a356:	f7f2 fb13 	bl	800c980 <lwip_htons>
 801a35a:	4603      	mov	r3, r0
 801a35c:	461d      	mov	r5, r3
 801a35e:	687b      	ldr	r3, [r7, #4]
 801a360:	891b      	ldrh	r3, [r3, #8]
 801a362:	461e      	mov	r6, r3
 801a364:	69fb      	ldr	r3, [r7, #28]
 801a366:	885b      	ldrh	r3, [r3, #2]
 801a368:	b29b      	uxth	r3, r3
 801a36a:	4618      	mov	r0, r3
 801a36c:	f7f2 fb08 	bl	800c980 <lwip_htons>
 801a370:	4603      	mov	r3, r0
 801a372:	4698      	mov	r8, r3
 801a374:	69fb      	ldr	r3, [r7, #28]
 801a376:	88db      	ldrh	r3, [r3, #6]
 801a378:	b29b      	uxth	r3, r3
 801a37a:	f003 0320 	and.w	r3, r3, #32
 801a37e:	2b00      	cmp	r3, #0
 801a380:	bf14      	ite	ne
 801a382:	2301      	movne	r3, #1
 801a384:	2300      	moveq	r3, #0
 801a386:	b2db      	uxtb	r3, r3
 801a388:	461c      	mov	r4, r3
 801a38a:	69fb      	ldr	r3, [r7, #28]
 801a38c:	88db      	ldrh	r3, [r3, #6]
 801a38e:	b29b      	uxth	r3, r3
 801a390:	4618      	mov	r0, r3
 801a392:	f7f2 faf5 	bl	800c980 <lwip_htons>
 801a396:	4603      	mov	r3, r0
 801a398:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a39c:	b29b      	uxth	r3, r3
 801a39e:	00db      	lsls	r3, r3, #3
 801a3a0:	b29b      	uxth	r3, r3
 801a3a2:	9301      	str	r3, [sp, #4]
 801a3a4:	9400      	str	r4, [sp, #0]
 801a3a6:	4643      	mov	r3, r8
 801a3a8:	4632      	mov	r2, r6
 801a3aa:	4629      	mov	r1, r5
 801a3ac:	485f      	ldr	r0, [pc, #380]	; (801a52c <ip4_input+0x4b4>)
 801a3ae:	f006 f815 	bl	80203dc <iprintf>
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801a3b2:	6878      	ldr	r0, [r7, #4]
 801a3b4:	f000 ffa8 	bl	801b308 <ip4_reass>
 801a3b8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801a3ba:	687b      	ldr	r3, [r7, #4]
 801a3bc:	2b00      	cmp	r3, #0
 801a3be:	d101      	bne.n	801a3c4 <ip4_input+0x34c>
      return ERR_OK;
 801a3c0:	2300      	movs	r3, #0
 801a3c2:	e0ae      	b.n	801a522 <ip4_input+0x4aa>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801a3c4:	687b      	ldr	r3, [r7, #4]
 801a3c6:	685b      	ldr	r3, [r3, #4]
 801a3c8:	61fb      	str	r3, [r7, #28]
    return ERR_OK;
  }
#endif /* IP_OPTIONS_ALLOWED == 0 */

  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
 801a3ca:	4859      	ldr	r0, [pc, #356]	; (801a530 <ip4_input+0x4b8>)
 801a3cc:	f006 f8a2 	bl	8020514 <puts>
  ip4_debug_print(p);
 801a3d0:	6878      	ldr	r0, [r7, #4]
 801a3d2:	f000 fa5d 	bl	801a890 <ip4_debug_print>
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));
 801a3d6:	687b      	ldr	r3, [r7, #4]
 801a3d8:	895b      	ldrh	r3, [r3, #10]
 801a3da:	4619      	mov	r1, r3
 801a3dc:	687b      	ldr	r3, [r7, #4]
 801a3de:	891b      	ldrh	r3, [r3, #8]
 801a3e0:	461a      	mov	r2, r3
 801a3e2:	4854      	ldr	r0, [pc, #336]	; (801a534 <ip4_input+0x4bc>)
 801a3e4:	f005 fffa 	bl	80203dc <iprintf>

  ip_data.current_netif = netif;
 801a3e8:	4a53      	ldr	r2, [pc, #332]	; (801a538 <ip4_input+0x4c0>)
 801a3ea:	69bb      	ldr	r3, [r7, #24]
 801a3ec:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801a3ee:	4a52      	ldr	r2, [pc, #328]	; (801a538 <ip4_input+0x4c0>)
 801a3f0:	683b      	ldr	r3, [r7, #0]
 801a3f2:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801a3f4:	4a50      	ldr	r2, [pc, #320]	; (801a538 <ip4_input+0x4c0>)
 801a3f6:	69fb      	ldr	r3, [r7, #28]
 801a3f8:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801a3fa:	69fb      	ldr	r3, [r7, #28]
 801a3fc:	781b      	ldrb	r3, [r3, #0]
 801a3fe:	f003 030f 	and.w	r3, r3, #15
 801a402:	b2db      	uxtb	r3, r3
 801a404:	009b      	lsls	r3, r3, #2
 801a406:	b2db      	uxtb	r3, r3
 801a408:	b29a      	uxth	r2, r3
 801a40a:	4b4b      	ldr	r3, [pc, #300]	; (801a538 <ip4_input+0x4c0>)
 801a40c:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801a40e:	8a7b      	ldrh	r3, [r7, #18]
 801a410:	4619      	mov	r1, r3
 801a412:	6878      	ldr	r0, [r7, #4]
 801a414:	f7f4 fbb6 	bl	800eb84 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801a418:	69fb      	ldr	r3, [r7, #28]
 801a41a:	7a5b      	ldrb	r3, [r3, #9]
 801a41c:	3b01      	subs	r3, #1
 801a41e:	2b10      	cmp	r3, #16
 801a420:	d839      	bhi.n	801a496 <ip4_input+0x41e>
 801a422:	a201      	add	r2, pc, #4	; (adr r2, 801a428 <ip4_input+0x3b0>)
 801a424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a428:	0801a481 	.word	0x0801a481
 801a42c:	0801a48b 	.word	0x0801a48b
 801a430:	0801a497 	.word	0x0801a497
 801a434:	0801a497 	.word	0x0801a497
 801a438:	0801a497 	.word	0x0801a497
 801a43c:	0801a477 	.word	0x0801a477
 801a440:	0801a497 	.word	0x0801a497
 801a444:	0801a497 	.word	0x0801a497
 801a448:	0801a497 	.word	0x0801a497
 801a44c:	0801a497 	.word	0x0801a497
 801a450:	0801a497 	.word	0x0801a497
 801a454:	0801a497 	.word	0x0801a497
 801a458:	0801a497 	.word	0x0801a497
 801a45c:	0801a497 	.word	0x0801a497
 801a460:	0801a497 	.word	0x0801a497
 801a464:	0801a497 	.word	0x0801a497
 801a468:	0801a46d 	.word	0x0801a46d
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801a46c:	6839      	ldr	r1, [r7, #0]
 801a46e:	6878      	ldr	r0, [r7, #4]
 801a470:	f7fa fc7e 	bl	8014d70 <udp_input>
        break;
 801a474:	e042      	b.n	801a4fc <ip4_input+0x484>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801a476:	6839      	ldr	r1, [r7, #0]
 801a478:	6878      	ldr	r0, [r7, #4]
 801a47a:	f7f6 fbe7 	bl	8010c4c <tcp_input>
        break;
 801a47e:	e03d      	b.n	801a4fc <ip4_input+0x484>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801a480:	6839      	ldr	r1, [r7, #0]
 801a482:	6878      	ldr	r0, [r7, #4]
 801a484:	f7fe fde4 	bl	8019050 <icmp_input>
        break;
 801a488:	e038      	b.n	801a4fc <ip4_input+0x484>
#endif /* LWIP_ICMP */
#if LWIP_IGMP
      case IP_PROTO_IGMP:
        igmp_input(p, inp, ip4_current_dest_addr());
 801a48a:	4a2c      	ldr	r2, [pc, #176]	; (801a53c <ip4_input+0x4c4>)
 801a48c:	6839      	ldr	r1, [r7, #0]
 801a48e:	6878      	ldr	r0, [r7, #4]
 801a490:	f7ff f8e8 	bl	8019664 <igmp_input>
        break;
 801a494:	e032      	b.n	801a4fc <ip4_input+0x484>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a496:	4b28      	ldr	r3, [pc, #160]	; (801a538 <ip4_input+0x4c0>)
 801a498:	695b      	ldr	r3, [r3, #20]
 801a49a:	69b9      	ldr	r1, [r7, #24]
 801a49c:	4618      	mov	r0, r3
 801a49e:	f000 fabb 	bl	801aa18 <ip4_addr_isbroadcast_u32>
 801a4a2:	4603      	mov	r3, r0
 801a4a4:	2b00      	cmp	r3, #0
 801a4a6:	d10f      	bne.n	801a4c8 <ip4_input+0x450>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a4a8:	4b23      	ldr	r3, [pc, #140]	; (801a538 <ip4_input+0x4c0>)
 801a4aa:	695b      	ldr	r3, [r3, #20]
 801a4ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a4b0:	2be0      	cmp	r3, #224	; 0xe0
 801a4b2:	d009      	beq.n	801a4c8 <ip4_input+0x450>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801a4b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801a4b8:	4619      	mov	r1, r3
 801a4ba:	6878      	ldr	r0, [r7, #4]
 801a4bc:	f7f4 fbd5 	bl	800ec6a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801a4c0:	2102      	movs	r1, #2
 801a4c2:	6878      	ldr	r0, [r7, #4]
 801a4c4:	f7fe ff24 	bl	8019310 <icmp_dest_unreach>
          }
#endif /* LWIP_ICMP */

          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));
 801a4c8:	69fb      	ldr	r3, [r7, #28]
 801a4ca:	7a5b      	ldrb	r3, [r3, #9]
 801a4cc:	4619      	mov	r1, r3
 801a4ce:	481c      	ldr	r0, [pc, #112]	; (801a540 <ip4_input+0x4c8>)
 801a4d0:	f005 ff84 	bl	80203dc <iprintf>

          IP_STATS_INC(ip.proterr);
 801a4d4:	4b1b      	ldr	r3, [pc, #108]	; (801a544 <ip4_input+0x4cc>)
 801a4d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801a4da:	3301      	adds	r3, #1
 801a4dc:	b29a      	uxth	r2, r3
 801a4de:	4b19      	ldr	r3, [pc, #100]	; (801a544 <ip4_input+0x4cc>)
 801a4e0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
          IP_STATS_INC(ip.drop);
 801a4e4:	4b17      	ldr	r3, [pc, #92]	; (801a544 <ip4_input+0x4cc>)
 801a4e6:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 801a4ea:	3301      	adds	r3, #1
 801a4ec:	b29a      	uxth	r2, r3
 801a4ee:	4b15      	ldr	r3, [pc, #84]	; (801a544 <ip4_input+0x4cc>)
 801a4f0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801a4f4:	6878      	ldr	r0, [r7, #4]
 801a4f6:	f7f4 fbcb 	bl	800ec90 <pbuf_free>
        break;
 801a4fa:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801a4fc:	4b0e      	ldr	r3, [pc, #56]	; (801a538 <ip4_input+0x4c0>)
 801a4fe:	2200      	movs	r2, #0
 801a500:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801a502:	4b0d      	ldr	r3, [pc, #52]	; (801a538 <ip4_input+0x4c0>)
 801a504:	2200      	movs	r2, #0
 801a506:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801a508:	4b0b      	ldr	r3, [pc, #44]	; (801a538 <ip4_input+0x4c0>)
 801a50a:	2200      	movs	r2, #0
 801a50c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801a50e:	4b0a      	ldr	r3, [pc, #40]	; (801a538 <ip4_input+0x4c0>)
 801a510:	2200      	movs	r2, #0
 801a512:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801a514:	4b08      	ldr	r3, [pc, #32]	; (801a538 <ip4_input+0x4c0>)
 801a516:	2200      	movs	r2, #0
 801a518:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801a51a:	4b07      	ldr	r3, [pc, #28]	; (801a538 <ip4_input+0x4c0>)
 801a51c:	2200      	movs	r2, #0
 801a51e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801a520:	2300      	movs	r3, #0
}
 801a522:	4618      	mov	r0, r3
 801a524:	3720      	adds	r7, #32
 801a526:	46bd      	mov	sp, r7
 801a528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a52c:	0802612c 	.word	0x0802612c
 801a530:	08026190 	.word	0x08026190
 801a534:	0802619c 	.word	0x0802619c
 801a538:	200070d4 	.word	0x200070d4
 801a53c:	200070e8 	.word	0x200070e8
 801a540:	080261c4 	.word	0x080261c4
 801a544:	2000a3ec 	.word	0x2000a3ec

0801a548 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801a548:	b580      	push	{r7, lr}
 801a54a:	b08a      	sub	sp, #40	; 0x28
 801a54c:	af06      	add	r7, sp, #24
 801a54e:	60f8      	str	r0, [r7, #12]
 801a550:	60b9      	str	r1, [r7, #8]
 801a552:	607a      	str	r2, [r7, #4]
 801a554:	70fb      	strb	r3, [r7, #3]
#if IP_OPTIONS_SEND
  return ip4_output_if_opt(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 801a556:	78fa      	ldrb	r2, [r7, #3]
 801a558:	2300      	movs	r3, #0
 801a55a:	9304      	str	r3, [sp, #16]
 801a55c:	2300      	movs	r3, #0
 801a55e:	9303      	str	r3, [sp, #12]
 801a560:	6a3b      	ldr	r3, [r7, #32]
 801a562:	9302      	str	r3, [sp, #8]
 801a564:	7f3b      	ldrb	r3, [r7, #28]
 801a566:	9301      	str	r3, [sp, #4]
 801a568:	7e3b      	ldrb	r3, [r7, #24]
 801a56a:	9300      	str	r3, [sp, #0]
 801a56c:	4613      	mov	r3, r2
 801a56e:	687a      	ldr	r2, [r7, #4]
 801a570:	68b9      	ldr	r1, [r7, #8]
 801a572:	68f8      	ldr	r0, [r7, #12]
 801a574:	f000 f805 	bl	801a582 <ip4_output_if_opt>
 801a578:	4603      	mov	r3, r0
}
 801a57a:	4618      	mov	r0, r3
 801a57c:	3710      	adds	r7, #16
 801a57e:	46bd      	mov	sp, r7
 801a580:	bd80      	pop	{r7, pc}

0801a582 <ip4_output_if_opt>:
 */
err_t
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
 801a582:	b580      	push	{r7, lr}
 801a584:	b08c      	sub	sp, #48	; 0x30
 801a586:	af06      	add	r7, sp, #24
 801a588:	60f8      	str	r0, [r7, #12]
 801a58a:	60b9      	str	r1, [r7, #8]
 801a58c:	607a      	str	r2, [r7, #4]
 801a58e:	70fb      	strb	r3, [r7, #3]
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801a590:	68bb      	ldr	r3, [r7, #8]
 801a592:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801a594:	687b      	ldr	r3, [r7, #4]
 801a596:	2b00      	cmp	r3, #0
 801a598:	d009      	beq.n	801a5ae <ip4_output_if_opt+0x2c>
    if (ip4_addr_isany(src)) {
 801a59a:	68bb      	ldr	r3, [r7, #8]
 801a59c:	2b00      	cmp	r3, #0
 801a59e:	d003      	beq.n	801a5a8 <ip4_output_if_opt+0x26>
 801a5a0:	68bb      	ldr	r3, [r7, #8]
 801a5a2:	681b      	ldr	r3, [r3, #0]
 801a5a4:	2b00      	cmp	r3, #0
 801a5a6:	d102      	bne.n	801a5ae <ip4_output_if_opt+0x2c>
      src_used = netif_ip4_addr(netif);
 801a5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5aa:	3304      	adds	r3, #4
 801a5ac:	617b      	str	r3, [r7, #20]
    }
  }

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
 801a5ae:	78fa      	ldrb	r2, [r7, #3]
 801a5b0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801a5b2:	9304      	str	r3, [sp, #16]
 801a5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5b6:	9303      	str	r3, [sp, #12]
 801a5b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5ba:	9302      	str	r3, [sp, #8]
 801a5bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a5c0:	9301      	str	r3, [sp, #4]
 801a5c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 801a5c6:	9300      	str	r3, [sp, #0]
 801a5c8:	4613      	mov	r3, r2
 801a5ca:	687a      	ldr	r2, [r7, #4]
 801a5cc:	6979      	ldr	r1, [r7, #20]
 801a5ce:	68f8      	ldr	r0, [r7, #12]
 801a5d0:	f000 f822 	bl	801a618 <ip4_output_if_opt_src>
 801a5d4:	4603      	mov	r3, r0
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
#endif /* IP_OPTIONS_SEND */
}
 801a5d6:	4618      	mov	r0, r3
 801a5d8:	3718      	adds	r7, #24
 801a5da:	46bd      	mov	sp, r7
 801a5dc:	bd80      	pop	{r7, pc}

0801a5de <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801a5de:	b580      	push	{r7, lr}
 801a5e0:	b08a      	sub	sp, #40	; 0x28
 801a5e2:	af06      	add	r7, sp, #24
 801a5e4:	60f8      	str	r0, [r7, #12]
 801a5e6:	60b9      	str	r1, [r7, #8]
 801a5e8:	607a      	str	r2, [r7, #4]
 801a5ea:	70fb      	strb	r3, [r7, #3]
#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 801a5ec:	78fa      	ldrb	r2, [r7, #3]
 801a5ee:	2300      	movs	r3, #0
 801a5f0:	9304      	str	r3, [sp, #16]
 801a5f2:	2300      	movs	r3, #0
 801a5f4:	9303      	str	r3, [sp, #12]
 801a5f6:	6a3b      	ldr	r3, [r7, #32]
 801a5f8:	9302      	str	r3, [sp, #8]
 801a5fa:	7f3b      	ldrb	r3, [r7, #28]
 801a5fc:	9301      	str	r3, [sp, #4]
 801a5fe:	7e3b      	ldrb	r3, [r7, #24]
 801a600:	9300      	str	r3, [sp, #0]
 801a602:	4613      	mov	r3, r2
 801a604:	687a      	ldr	r2, [r7, #4]
 801a606:	68b9      	ldr	r1, [r7, #8]
 801a608:	68f8      	ldr	r0, [r7, #12]
 801a60a:	f000 f805 	bl	801a618 <ip4_output_if_opt_src>
 801a60e:	4603      	mov	r3, r0
}
 801a610:	4618      	mov	r0, r3
 801a612:	3710      	adds	r7, #16
 801a614:	46bd      	mov	sp, r7
 801a616:	bd80      	pop	{r7, pc}

0801a618 <ip4_output_if_opt_src>:
 */
err_t
ip4_output_if_opt_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                      u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                      u16_t optlen)
{
 801a618:	b580      	push	{r7, lr}
 801a61a:	b088      	sub	sp, #32
 801a61c:	af00      	add	r7, sp, #0
 801a61e:	60f8      	str	r0, [r7, #12]
 801a620:	60b9      	str	r1, [r7, #8]
 801a622:	607a      	str	r2, [r7, #4]
 801a624:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801a626:	68fb      	ldr	r3, [r7, #12]
 801a628:	7b9b      	ldrb	r3, [r3, #14]
 801a62a:	2b01      	cmp	r3, #1
 801a62c:	d006      	beq.n	801a63c <ip4_output_if_opt_src+0x24>
 801a62e:	4b8b      	ldr	r3, [pc, #556]	; (801a85c <ip4_output_if_opt_src+0x244>)
 801a630:	f44f 7255 	mov.w	r2, #852	; 0x354
 801a634:	498a      	ldr	r1, [pc, #552]	; (801a860 <ip4_output_if_opt_src+0x248>)
 801a636:	488b      	ldr	r0, [pc, #556]	; (801a864 <ip4_output_if_opt_src+0x24c>)
 801a638:	f005 fed0 	bl	80203dc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801a63c:	687b      	ldr	r3, [r7, #4]
 801a63e:	2b00      	cmp	r3, #0
 801a640:	f000 80b8 	beq.w	801a7b4 <ip4_output_if_opt_src+0x19c>
    u16_t ip_hlen = IP_HLEN;
 801a644:	2314      	movs	r3, #20
 801a646:	83fb      	strh	r3, [r7, #30]
#if IP_OPTIONS_SEND
    u16_t optlen_aligned = 0;
 801a648:	2300      	movs	r3, #0
 801a64a:	82fb      	strh	r3, [r7, #22]
    if (optlen != 0) {
 801a64c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801a64e:	2b00      	cmp	r3, #0
 801a650:	d046      	beq.n	801a6e0 <ip4_output_if_opt_src+0xc8>
#if CHECKSUM_GEN_IP_INLINE
      int i;
#endif /* CHECKSUM_GEN_IP_INLINE */
      if (optlen > (IP_HLEN_MAX - IP_HLEN)) {
 801a652:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801a654:	2b28      	cmp	r3, #40	; 0x28
 801a656:	d90d      	bls.n	801a674 <ip4_output_if_opt_src+0x5c>
        /* optlen too long */
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: optlen too long\n"));
 801a658:	4883      	ldr	r0, [pc, #524]	; (801a868 <ip4_output_if_opt_src+0x250>)
 801a65a:	f005 ff5b 	bl	8020514 <puts>
        IP_STATS_INC(ip.err);
 801a65e:	4b83      	ldr	r3, [pc, #524]	; (801a86c <ip4_output_if_opt_src+0x254>)
 801a660:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801a664:	3301      	adds	r3, #1
 801a666:	b29a      	uxth	r2, r3
 801a668:	4b80      	ldr	r3, [pc, #512]	; (801a86c <ip4_output_if_opt_src+0x254>)
 801a66a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_VAL;
 801a66e:	f06f 0305 	mvn.w	r3, #5
 801a672:	e0ee      	b.n	801a852 <ip4_output_if_opt_src+0x23a>
      }
      /* round up to a multiple of 4 */
      optlen_aligned = (u16_t)((optlen + 3) & ~3);
 801a674:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801a676:	3303      	adds	r3, #3
 801a678:	b29b      	uxth	r3, r3
 801a67a:	f023 0303 	bic.w	r3, r3, #3
 801a67e:	82fb      	strh	r3, [r7, #22]
      ip_hlen = (u16_t)(ip_hlen + optlen_aligned);
 801a680:	8bfa      	ldrh	r2, [r7, #30]
 801a682:	8afb      	ldrh	r3, [r7, #22]
 801a684:	4413      	add	r3, r2
 801a686:	83fb      	strh	r3, [r7, #30]
      /* First write in the IP options */
      if (pbuf_add_header(p, optlen_aligned)) {
 801a688:	8afb      	ldrh	r3, [r7, #22]
 801a68a:	4619      	mov	r1, r3
 801a68c:	68f8      	ldr	r0, [r7, #12]
 801a68e:	f7f4 fa69 	bl	800eb64 <pbuf_add_header>
 801a692:	4603      	mov	r3, r0
 801a694:	2b00      	cmp	r3, #0
 801a696:	d00d      	beq.n	801a6b4 <ip4_output_if_opt_src+0x9c>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: not enough room for IP options in pbuf\n"));
 801a698:	4875      	ldr	r0, [pc, #468]	; (801a870 <ip4_output_if_opt_src+0x258>)
 801a69a:	f005 ff3b 	bl	8020514 <puts>
        IP_STATS_INC(ip.err);
 801a69e:	4b73      	ldr	r3, [pc, #460]	; (801a86c <ip4_output_if_opt_src+0x254>)
 801a6a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801a6a4:	3301      	adds	r3, #1
 801a6a6:	b29a      	uxth	r2, r3
 801a6a8:	4b70      	ldr	r3, [pc, #448]	; (801a86c <ip4_output_if_opt_src+0x254>)
 801a6aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_BUF;
 801a6ae:	f06f 0301 	mvn.w	r3, #1
 801a6b2:	e0ce      	b.n	801a852 <ip4_output_if_opt_src+0x23a>
      }
      MEMCPY(p->payload, ip_options, optlen);
 801a6b4:	68fb      	ldr	r3, [r7, #12]
 801a6b6:	685b      	ldr	r3, [r3, #4]
 801a6b8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801a6ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a6bc:	4618      	mov	r0, r3
 801a6be:	f005 fdcd 	bl	802025c <memcpy>
      if (optlen < optlen_aligned) {
 801a6c2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801a6c4:	8afb      	ldrh	r3, [r7, #22]
 801a6c6:	429a      	cmp	r2, r3
 801a6c8:	d20a      	bcs.n	801a6e0 <ip4_output_if_opt_src+0xc8>
        /* zero the remaining bytes */
        memset(((char *)p->payload) + optlen, 0, (size_t)(optlen_aligned - optlen));
 801a6ca:	68fb      	ldr	r3, [r7, #12]
 801a6cc:	685a      	ldr	r2, [r3, #4]
 801a6ce:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801a6d0:	18d0      	adds	r0, r2, r3
 801a6d2:	8afa      	ldrh	r2, [r7, #22]
 801a6d4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801a6d6:	1ad3      	subs	r3, r2, r3
 801a6d8:	461a      	mov	r2, r3
 801a6da:	2100      	movs	r1, #0
 801a6dc:	f005 fdcc 	bl	8020278 <memset>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801a6e0:	2114      	movs	r1, #20
 801a6e2:	68f8      	ldr	r0, [r7, #12]
 801a6e4:	f7f4 fa3e 	bl	800eb64 <pbuf_add_header>
 801a6e8:	4603      	mov	r3, r0
 801a6ea:	2b00      	cmp	r3, #0
 801a6ec:	d00d      	beq.n	801a70a <ip4_output_if_opt_src+0xf2>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));
 801a6ee:	4861      	ldr	r0, [pc, #388]	; (801a874 <ip4_output_if_opt_src+0x25c>)
 801a6f0:	f005 ff10 	bl	8020514 <puts>

      IP_STATS_INC(ip.err);
 801a6f4:	4b5d      	ldr	r3, [pc, #372]	; (801a86c <ip4_output_if_opt_src+0x254>)
 801a6f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801a6fa:	3301      	adds	r3, #1
 801a6fc:	b29a      	uxth	r2, r3
 801a6fe:	4b5b      	ldr	r3, [pc, #364]	; (801a86c <ip4_output_if_opt_src+0x254>)
 801a700:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801a704:	f06f 0301 	mvn.w	r3, #1
 801a708:	e0a3      	b.n	801a852 <ip4_output_if_opt_src+0x23a>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801a70a:	68fb      	ldr	r3, [r7, #12]
 801a70c:	685b      	ldr	r3, [r3, #4]
 801a70e:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801a710:	68fb      	ldr	r3, [r7, #12]
 801a712:	895b      	ldrh	r3, [r3, #10]
 801a714:	2b13      	cmp	r3, #19
 801a716:	d806      	bhi.n	801a726 <ip4_output_if_opt_src+0x10e>
 801a718:	4b50      	ldr	r3, [pc, #320]	; (801a85c <ip4_output_if_opt_src+0x244>)
 801a71a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801a71e:	4956      	ldr	r1, [pc, #344]	; (801a878 <ip4_output_if_opt_src+0x260>)
 801a720:	4850      	ldr	r0, [pc, #320]	; (801a864 <ip4_output_if_opt_src+0x24c>)
 801a722:	f005 fe5b 	bl	80203dc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801a726:	69bb      	ldr	r3, [r7, #24]
 801a728:	78fa      	ldrb	r2, [r7, #3]
 801a72a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801a72c:	69bb      	ldr	r3, [r7, #24]
 801a72e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801a732:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801a734:	687b      	ldr	r3, [r7, #4]
 801a736:	681a      	ldr	r2, [r3, #0]
 801a738:	69bb      	ldr	r3, [r7, #24]
 801a73a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801a73c:	8bfb      	ldrh	r3, [r7, #30]
 801a73e:	089b      	lsrs	r3, r3, #2
 801a740:	b29b      	uxth	r3, r3
 801a742:	b2db      	uxtb	r3, r3
 801a744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a748:	b2da      	uxtb	r2, r3
 801a74a:	69bb      	ldr	r3, [r7, #24]
 801a74c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801a74e:	69bb      	ldr	r3, [r7, #24]
 801a750:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801a754:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801a756:	68fb      	ldr	r3, [r7, #12]
 801a758:	891b      	ldrh	r3, [r3, #8]
 801a75a:	4618      	mov	r0, r3
 801a75c:	f7f2 f910 	bl	800c980 <lwip_htons>
 801a760:	4603      	mov	r3, r0
 801a762:	461a      	mov	r2, r3
 801a764:	69bb      	ldr	r3, [r7, #24]
 801a766:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801a768:	69bb      	ldr	r3, [r7, #24]
 801a76a:	2200      	movs	r2, #0
 801a76c:	719a      	strb	r2, [r3, #6]
 801a76e:	2200      	movs	r2, #0
 801a770:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801a772:	4b42      	ldr	r3, [pc, #264]	; (801a87c <ip4_output_if_opt_src+0x264>)
 801a774:	881b      	ldrh	r3, [r3, #0]
 801a776:	4618      	mov	r0, r3
 801a778:	f7f2 f902 	bl	800c980 <lwip_htons>
 801a77c:	4603      	mov	r3, r0
 801a77e:	461a      	mov	r2, r3
 801a780:	69bb      	ldr	r3, [r7, #24]
 801a782:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801a784:	4b3d      	ldr	r3, [pc, #244]	; (801a87c <ip4_output_if_opt_src+0x264>)
 801a786:	881b      	ldrh	r3, [r3, #0]
 801a788:	3301      	adds	r3, #1
 801a78a:	b29a      	uxth	r2, r3
 801a78c:	4b3b      	ldr	r3, [pc, #236]	; (801a87c <ip4_output_if_opt_src+0x264>)
 801a78e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801a790:	68bb      	ldr	r3, [r7, #8]
 801a792:	2b00      	cmp	r3, #0
 801a794:	d104      	bne.n	801a7a0 <ip4_output_if_opt_src+0x188>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801a796:	4b3a      	ldr	r3, [pc, #232]	; (801a880 <ip4_output_if_opt_src+0x268>)
 801a798:	681a      	ldr	r2, [r3, #0]
 801a79a:	69bb      	ldr	r3, [r7, #24]
 801a79c:	60da      	str	r2, [r3, #12]
 801a79e:	e003      	b.n	801a7a8 <ip4_output_if_opt_src+0x190>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801a7a0:	68bb      	ldr	r3, [r7, #8]
 801a7a2:	681a      	ldr	r2, [r3, #0]
 801a7a4:	69bb      	ldr	r3, [r7, #24]
 801a7a6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801a7a8:	69bb      	ldr	r3, [r7, #24]
 801a7aa:	2200      	movs	r2, #0
 801a7ac:	729a      	strb	r2, [r3, #10]
 801a7ae:	2200      	movs	r2, #0
 801a7b0:	72da      	strb	r2, [r3, #11]
 801a7b2:	e01a      	b.n	801a7ea <ip4_output_if_opt_src+0x1d2>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801a7b4:	68fb      	ldr	r3, [r7, #12]
 801a7b6:	895b      	ldrh	r3, [r3, #10]
 801a7b8:	2b13      	cmp	r3, #19
 801a7ba:	d80d      	bhi.n	801a7d8 <ip4_output_if_opt_src+0x1c0>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
 801a7bc:	4831      	ldr	r0, [pc, #196]	; (801a884 <ip4_output_if_opt_src+0x26c>)
 801a7be:	f005 fea9 	bl	8020514 <puts>
      IP_STATS_INC(ip.err);
 801a7c2:	4b2a      	ldr	r3, [pc, #168]	; (801a86c <ip4_output_if_opt_src+0x254>)
 801a7c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801a7c8:	3301      	adds	r3, #1
 801a7ca:	b29a      	uxth	r2, r3
 801a7cc:	4b27      	ldr	r3, [pc, #156]	; (801a86c <ip4_output_if_opt_src+0x254>)
 801a7ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801a7d2:	f06f 0301 	mvn.w	r3, #1
 801a7d6:	e03c      	b.n	801a852 <ip4_output_if_opt_src+0x23a>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801a7d8:	68fb      	ldr	r3, [r7, #12]
 801a7da:	685b      	ldr	r3, [r3, #4]
 801a7dc:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801a7de:	69bb      	ldr	r3, [r7, #24]
 801a7e0:	691b      	ldr	r3, [r3, #16]
 801a7e2:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 801a7e4:	f107 0310 	add.w	r3, r7, #16
 801a7e8:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 801a7ea:	4b20      	ldr	r3, [pc, #128]	; (801a86c <ip4_output_if_opt_src+0x254>)
 801a7ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a7f0:	3301      	adds	r3, #1
 801a7f2:	b29a      	uxth	r2, r3
 801a7f4:	4b1d      	ldr	r3, [pc, #116]	; (801a86c <ip4_output_if_opt_src+0x254>)
 801a7f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
 801a7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a7fc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801a800:	4619      	mov	r1, r3
 801a802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a804:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 801a808:	461a      	mov	r2, r3
 801a80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a80c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801a810:	481d      	ldr	r0, [pc, #116]	; (801a888 <ip4_output_if_opt_src+0x270>)
 801a812:	f005 fde3 	bl	80203dc <iprintf>
  ip4_debug_print(p);
 801a816:	68f8      	ldr	r0, [r7, #12]
 801a818:	f000 f83a 	bl	801a890 <ip4_debug_print>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801a81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a81e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801a820:	2b00      	cmp	r3, #0
 801a822:	d00c      	beq.n	801a83e <ip4_output_if_opt_src+0x226>
 801a824:	68fb      	ldr	r3, [r7, #12]
 801a826:	891a      	ldrh	r2, [r3, #8]
 801a828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a82a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801a82c:	429a      	cmp	r2, r3
 801a82e:	d906      	bls.n	801a83e <ip4_output_if_opt_src+0x226>
    return ip4_frag(p, netif, dest);
 801a830:	687a      	ldr	r2, [r7, #4]
 801a832:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a834:	68f8      	ldr	r0, [r7, #12]
 801a836:	f000 ff79 	bl	801b72c <ip4_frag>
 801a83a:	4603      	mov	r3, r0
 801a83c:	e009      	b.n	801a852 <ip4_output_if_opt_src+0x23a>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
 801a83e:	4813      	ldr	r0, [pc, #76]	; (801a88c <ip4_output_if_opt_src+0x274>)
 801a840:	f005 fe68 	bl	8020514 <puts>
  return netif->output(netif, p, dest);
 801a844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a846:	695b      	ldr	r3, [r3, #20]
 801a848:	687a      	ldr	r2, [r7, #4]
 801a84a:	68f9      	ldr	r1, [r7, #12]
 801a84c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a84e:	4798      	blx	r3
 801a850:	4603      	mov	r3, r0
}
 801a852:	4618      	mov	r0, r3
 801a854:	3720      	adds	r7, #32
 801a856:	46bd      	mov	sp, r7
 801a858:	bd80      	pop	{r7, pc}
 801a85a:	bf00      	nop
 801a85c:	080261e8 	.word	0x080261e8
 801a860:	0802621c 	.word	0x0802621c
 801a864:	08026228 	.word	0x08026228
 801a868:	08026250 	.word	0x08026250
 801a86c:	2000a3ec 	.word	0x2000a3ec
 801a870:	08026274 	.word	0x08026274
 801a874:	080262b0 	.word	0x080262b0
 801a878:	080262e4 	.word	0x080262e4
 801a87c:	20006990 	.word	0x20006990
 801a880:	08026bf4 	.word	0x08026bf4
 801a884:	08026314 	.word	0x08026314
 801a888:	08026348 	.word	0x08026348
 801a88c:	08026360 	.word	0x08026360

0801a890 <ip4_debug_print>:
/* Print an IP header by using LWIP_DEBUGF
 * @param p an IP packet, p->payload pointing to the IP header
 */
void
ip4_debug_print(struct pbuf *p)
{
 801a890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a894:	b086      	sub	sp, #24
 801a896:	af02      	add	r7, sp, #8
 801a898:	6078      	str	r0, [r7, #4]
  struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801a89a:	687b      	ldr	r3, [r7, #4]
 801a89c:	685b      	ldr	r3, [r3, #4]
 801a89e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(IP_DEBUG, ("IP header:\n"));
 801a8a0:	4856      	ldr	r0, [pc, #344]	; (801a9fc <ip4_debug_print+0x16c>)
 801a8a2:	f005 fe37 	bl	8020514 <puts>
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 801a8a6:	4856      	ldr	r0, [pc, #344]	; (801aa00 <ip4_debug_print+0x170>)
 801a8a8:	f005 fe34 	bl	8020514 <puts>
  LWIP_DEBUGF(IP_DEBUG, ("|%2"S16_F" |%2"S16_F" |  0x%02"X16_F" |     %5"U16_F"     | (v, hl, tos, len)\n",
 801a8ac:	68fb      	ldr	r3, [r7, #12]
 801a8ae:	781b      	ldrb	r3, [r3, #0]
 801a8b0:	091b      	lsrs	r3, r3, #4
 801a8b2:	b2db      	uxtb	r3, r3
 801a8b4:	461d      	mov	r5, r3
 801a8b6:	68fb      	ldr	r3, [r7, #12]
 801a8b8:	781b      	ldrb	r3, [r3, #0]
 801a8ba:	f003 040f 	and.w	r4, r3, #15
 801a8be:	68fb      	ldr	r3, [r7, #12]
 801a8c0:	785b      	ldrb	r3, [r3, #1]
 801a8c2:	461e      	mov	r6, r3
 801a8c4:	68fb      	ldr	r3, [r7, #12]
 801a8c6:	885b      	ldrh	r3, [r3, #2]
 801a8c8:	b29b      	uxth	r3, r3
 801a8ca:	4618      	mov	r0, r3
 801a8cc:	f7f2 f858 	bl	800c980 <lwip_htons>
 801a8d0:	4603      	mov	r3, r0
 801a8d2:	9300      	str	r3, [sp, #0]
 801a8d4:	4633      	mov	r3, r6
 801a8d6:	4622      	mov	r2, r4
 801a8d8:	4629      	mov	r1, r5
 801a8da:	484a      	ldr	r0, [pc, #296]	; (801aa04 <ip4_debug_print+0x174>)
 801a8dc:	f005 fd7e 	bl	80203dc <iprintf>
                         (u16_t)IPH_V(iphdr),
                         (u16_t)IPH_HL(iphdr),
                         (u16_t)IPH_TOS(iphdr),
                         lwip_ntohs(IPH_LEN(iphdr))));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 801a8e0:	4847      	ldr	r0, [pc, #284]	; (801aa00 <ip4_debug_print+0x170>)
 801a8e2:	f005 fe17 	bl	8020514 <puts>
  LWIP_DEBUGF(IP_DEBUG, ("|    %5"U16_F"      |%"U16_F"%"U16_F"%"U16_F"|    %4"U16_F"   | (id, flags, offset)\n",
 801a8e6:	68fb      	ldr	r3, [r7, #12]
 801a8e8:	889b      	ldrh	r3, [r3, #4]
 801a8ea:	b29b      	uxth	r3, r3
 801a8ec:	4618      	mov	r0, r3
 801a8ee:	f7f2 f847 	bl	800c980 <lwip_htons>
 801a8f2:	4603      	mov	r3, r0
 801a8f4:	4698      	mov	r8, r3
 801a8f6:	68fb      	ldr	r3, [r7, #12]
 801a8f8:	88db      	ldrh	r3, [r3, #6]
 801a8fa:	b29b      	uxth	r3, r3
 801a8fc:	4618      	mov	r0, r3
 801a8fe:	f7f2 f83f 	bl	800c980 <lwip_htons>
 801a902:	4603      	mov	r3, r0
 801a904:	0bdb      	lsrs	r3, r3, #15
 801a906:	b29b      	uxth	r3, r3
 801a908:	f003 0501 	and.w	r5, r3, #1
 801a90c:	68fb      	ldr	r3, [r7, #12]
 801a90e:	88db      	ldrh	r3, [r3, #6]
 801a910:	b29b      	uxth	r3, r3
 801a912:	4618      	mov	r0, r3
 801a914:	f7f2 f834 	bl	800c980 <lwip_htons>
 801a918:	4603      	mov	r3, r0
 801a91a:	0b9b      	lsrs	r3, r3, #14
 801a91c:	b29b      	uxth	r3, r3
 801a91e:	f003 0601 	and.w	r6, r3, #1
 801a922:	68fb      	ldr	r3, [r7, #12]
 801a924:	88db      	ldrh	r3, [r3, #6]
 801a926:	b29b      	uxth	r3, r3
 801a928:	4618      	mov	r0, r3
 801a92a:	f7f2 f829 	bl	800c980 <lwip_htons>
 801a92e:	4603      	mov	r3, r0
 801a930:	0b5b      	lsrs	r3, r3, #13
 801a932:	b29b      	uxth	r3, r3
 801a934:	f003 0401 	and.w	r4, r3, #1
 801a938:	68fb      	ldr	r3, [r7, #12]
 801a93a:	88db      	ldrh	r3, [r3, #6]
 801a93c:	b29b      	uxth	r3, r3
 801a93e:	4618      	mov	r0, r3
 801a940:	f7f2 f81e 	bl	800c980 <lwip_htons>
 801a944:	4603      	mov	r3, r0
 801a946:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a94a:	9301      	str	r3, [sp, #4]
 801a94c:	9400      	str	r4, [sp, #0]
 801a94e:	4633      	mov	r3, r6
 801a950:	462a      	mov	r2, r5
 801a952:	4641      	mov	r1, r8
 801a954:	482c      	ldr	r0, [pc, #176]	; (801aa08 <ip4_debug_print+0x178>)
 801a956:	f005 fd41 	bl	80203dc <iprintf>
                         lwip_ntohs(IPH_ID(iphdr)),
                         (u16_t)(lwip_ntohs(IPH_OFFSET(iphdr)) >> 15 & 1),
                         (u16_t)(lwip_ntohs(IPH_OFFSET(iphdr)) >> 14 & 1),
                         (u16_t)(lwip_ntohs(IPH_OFFSET(iphdr)) >> 13 & 1),
                         (u16_t)(lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 801a95a:	4829      	ldr	r0, [pc, #164]	; (801aa00 <ip4_debug_print+0x170>)
 801a95c:	f005 fdda 	bl	8020514 <puts>
  LWIP_DEBUGF(IP_DEBUG, ("|  %3"U16_F"  |  %3"U16_F"  |    0x%04"X16_F"     | (ttl, proto, chksum)\n",
 801a960:	68fb      	ldr	r3, [r7, #12]
 801a962:	7a1b      	ldrb	r3, [r3, #8]
 801a964:	461c      	mov	r4, r3
 801a966:	68fb      	ldr	r3, [r7, #12]
 801a968:	7a5b      	ldrb	r3, [r3, #9]
 801a96a:	461d      	mov	r5, r3
 801a96c:	68fb      	ldr	r3, [r7, #12]
 801a96e:	895b      	ldrh	r3, [r3, #10]
 801a970:	b29b      	uxth	r3, r3
 801a972:	4618      	mov	r0, r3
 801a974:	f7f2 f804 	bl	800c980 <lwip_htons>
 801a978:	4603      	mov	r3, r0
 801a97a:	462a      	mov	r2, r5
 801a97c:	4621      	mov	r1, r4
 801a97e:	4823      	ldr	r0, [pc, #140]	; (801aa0c <ip4_debug_print+0x17c>)
 801a980:	f005 fd2c 	bl	80203dc <iprintf>
                         (u16_t)IPH_TTL(iphdr),
                         (u16_t)IPH_PROTO(iphdr),
                         lwip_ntohs(IPH_CHKSUM(iphdr))));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 801a984:	481e      	ldr	r0, [pc, #120]	; (801aa00 <ip4_debug_print+0x170>)
 801a986:	f005 fdc5 	bl	8020514 <puts>
  LWIP_DEBUGF(IP_DEBUG, ("|  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  | (src)\n",
 801a98a:	68fb      	ldr	r3, [r7, #12]
 801a98c:	68db      	ldr	r3, [r3, #12]
 801a98e:	b2db      	uxtb	r3, r3
 801a990:	4619      	mov	r1, r3
 801a992:	68fb      	ldr	r3, [r7, #12]
 801a994:	68db      	ldr	r3, [r3, #12]
 801a996:	0a1b      	lsrs	r3, r3, #8
 801a998:	b2db      	uxtb	r3, r3
 801a99a:	461a      	mov	r2, r3
 801a99c:	68fb      	ldr	r3, [r7, #12]
 801a99e:	68db      	ldr	r3, [r3, #12]
 801a9a0:	0c1b      	lsrs	r3, r3, #16
 801a9a2:	b2db      	uxtb	r3, r3
 801a9a4:	4618      	mov	r0, r3
 801a9a6:	68fb      	ldr	r3, [r7, #12]
 801a9a8:	68db      	ldr	r3, [r3, #12]
 801a9aa:	0e1b      	lsrs	r3, r3, #24
 801a9ac:	b2db      	uxtb	r3, r3
 801a9ae:	9300      	str	r3, [sp, #0]
 801a9b0:	4603      	mov	r3, r0
 801a9b2:	4817      	ldr	r0, [pc, #92]	; (801aa10 <ip4_debug_print+0x180>)
 801a9b4:	f005 fd12 	bl	80203dc <iprintf>
                         ip4_addr1_16_val(iphdr->src),
                         ip4_addr2_16_val(iphdr->src),
                         ip4_addr3_16_val(iphdr->src),
                         ip4_addr4_16_val(iphdr->src)));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 801a9b8:	4811      	ldr	r0, [pc, #68]	; (801aa00 <ip4_debug_print+0x170>)
 801a9ba:	f005 fdab 	bl	8020514 <puts>
  LWIP_DEBUGF(IP_DEBUG, ("|  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  | (dest)\n",
 801a9be:	68fb      	ldr	r3, [r7, #12]
 801a9c0:	691b      	ldr	r3, [r3, #16]
 801a9c2:	b2db      	uxtb	r3, r3
 801a9c4:	4619      	mov	r1, r3
 801a9c6:	68fb      	ldr	r3, [r7, #12]
 801a9c8:	691b      	ldr	r3, [r3, #16]
 801a9ca:	0a1b      	lsrs	r3, r3, #8
 801a9cc:	b2db      	uxtb	r3, r3
 801a9ce:	461a      	mov	r2, r3
 801a9d0:	68fb      	ldr	r3, [r7, #12]
 801a9d2:	691b      	ldr	r3, [r3, #16]
 801a9d4:	0c1b      	lsrs	r3, r3, #16
 801a9d6:	b2db      	uxtb	r3, r3
 801a9d8:	4618      	mov	r0, r3
 801a9da:	68fb      	ldr	r3, [r7, #12]
 801a9dc:	691b      	ldr	r3, [r3, #16]
 801a9de:	0e1b      	lsrs	r3, r3, #24
 801a9e0:	b2db      	uxtb	r3, r3
 801a9e2:	9300      	str	r3, [sp, #0]
 801a9e4:	4603      	mov	r3, r0
 801a9e6:	480b      	ldr	r0, [pc, #44]	; (801aa14 <ip4_debug_print+0x184>)
 801a9e8:	f005 fcf8 	bl	80203dc <iprintf>
                         ip4_addr1_16_val(iphdr->dest),
                         ip4_addr2_16_val(iphdr->dest),
                         ip4_addr3_16_val(iphdr->dest),
                         ip4_addr4_16_val(iphdr->dest)));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 801a9ec:	4804      	ldr	r0, [pc, #16]	; (801aa00 <ip4_debug_print+0x170>)
 801a9ee:	f005 fd91 	bl	8020514 <puts>
}
 801a9f2:	bf00      	nop
 801a9f4:	3710      	adds	r7, #16
 801a9f6:	46bd      	mov	sp, r7
 801a9f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a9fc:	080263b0 	.word	0x080263b0
 801aa00:	080263bc 	.word	0x080263bc
 801aa04:	080263e0 	.word	0x080263e0
 801aa08:	0802641c 	.word	0x0802641c
 801aa0c:	08026458 	.word	0x08026458
 801aa10:	08026494 	.word	0x08026494
 801aa14:	080264c4 	.word	0x080264c4

0801aa18 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801aa18:	b480      	push	{r7}
 801aa1a:	b085      	sub	sp, #20
 801aa1c:	af00      	add	r7, sp, #0
 801aa1e:	6078      	str	r0, [r7, #4]
 801aa20:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801aa22:	687b      	ldr	r3, [r7, #4]
 801aa24:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801aa26:	687b      	ldr	r3, [r7, #4]
 801aa28:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aa2c:	d002      	beq.n	801aa34 <ip4_addr_isbroadcast_u32+0x1c>
 801aa2e:	687b      	ldr	r3, [r7, #4]
 801aa30:	2b00      	cmp	r3, #0
 801aa32:	d101      	bne.n	801aa38 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801aa34:	2301      	movs	r3, #1
 801aa36:	e02a      	b.n	801aa8e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801aa38:	683b      	ldr	r3, [r7, #0]
 801aa3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801aa3e:	f003 0302 	and.w	r3, r3, #2
 801aa42:	2b00      	cmp	r3, #0
 801aa44:	d101      	bne.n	801aa4a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801aa46:	2300      	movs	r3, #0
 801aa48:	e021      	b.n	801aa8e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801aa4a:	683b      	ldr	r3, [r7, #0]
 801aa4c:	3304      	adds	r3, #4
 801aa4e:	681b      	ldr	r3, [r3, #0]
 801aa50:	687a      	ldr	r2, [r7, #4]
 801aa52:	429a      	cmp	r2, r3
 801aa54:	d101      	bne.n	801aa5a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801aa56:	2300      	movs	r3, #0
 801aa58:	e019      	b.n	801aa8e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801aa5a:	68fa      	ldr	r2, [r7, #12]
 801aa5c:	683b      	ldr	r3, [r7, #0]
 801aa5e:	3304      	adds	r3, #4
 801aa60:	681b      	ldr	r3, [r3, #0]
 801aa62:	405a      	eors	r2, r3
 801aa64:	683b      	ldr	r3, [r7, #0]
 801aa66:	3308      	adds	r3, #8
 801aa68:	681b      	ldr	r3, [r3, #0]
 801aa6a:	4013      	ands	r3, r2
 801aa6c:	2b00      	cmp	r3, #0
 801aa6e:	d10d      	bne.n	801aa8c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801aa70:	683b      	ldr	r3, [r7, #0]
 801aa72:	3308      	adds	r3, #8
 801aa74:	681b      	ldr	r3, [r3, #0]
 801aa76:	43da      	mvns	r2, r3
 801aa78:	687b      	ldr	r3, [r7, #4]
 801aa7a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801aa7c:	683b      	ldr	r3, [r7, #0]
 801aa7e:	3308      	adds	r3, #8
 801aa80:	681b      	ldr	r3, [r3, #0]
 801aa82:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801aa84:	429a      	cmp	r2, r3
 801aa86:	d101      	bne.n	801aa8c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801aa88:	2301      	movs	r3, #1
 801aa8a:	e000      	b.n	801aa8e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801aa8c:	2300      	movs	r3, #0
  }
}
 801aa8e:	4618      	mov	r0, r3
 801aa90:	3714      	adds	r7, #20
 801aa92:	46bd      	mov	sp, r7
 801aa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa98:	4770      	bx	lr
	...

0801aa9c <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 801aa9c:	b580      	push	{r7, lr}
 801aa9e:	b08a      	sub	sp, #40	; 0x28
 801aaa0:	af00      	add	r7, sp, #0
 801aaa2:	6078      	str	r0, [r7, #4]
 801aaa4:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 801aaa6:	f107 030c 	add.w	r3, r7, #12
 801aaaa:	61fb      	str	r3, [r7, #28]

  c = *cp;
 801aaac:	687b      	ldr	r3, [r7, #4]
 801aaae:	781b      	ldrb	r3, [r3, #0]
 801aab0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 801aab4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801aab8:	3301      	adds	r3, #1
 801aaba:	4a89      	ldr	r2, [pc, #548]	; (801ace0 <ip4addr_aton+0x244>)
 801aabc:	4413      	add	r3, r2
 801aabe:	781b      	ldrb	r3, [r3, #0]
 801aac0:	f003 0304 	and.w	r3, r3, #4
 801aac4:	2b00      	cmp	r3, #0
 801aac6:	d101      	bne.n	801aacc <ip4addr_aton+0x30>
      return 0;
 801aac8:	2300      	movs	r3, #0
 801aaca:	e105      	b.n	801acd8 <ip4addr_aton+0x23c>
    }
    val = 0;
 801aacc:	2300      	movs	r3, #0
 801aace:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 801aad0:	230a      	movs	r3, #10
 801aad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 801aad6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801aada:	2b30      	cmp	r3, #48	; 0x30
 801aadc:	d11c      	bne.n	801ab18 <ip4addr_aton+0x7c>
      c = *++cp;
 801aade:	687b      	ldr	r3, [r7, #4]
 801aae0:	3301      	adds	r3, #1
 801aae2:	607b      	str	r3, [r7, #4]
 801aae4:	687b      	ldr	r3, [r7, #4]
 801aae6:	781b      	ldrb	r3, [r3, #0]
 801aae8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 801aaec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801aaf0:	2b78      	cmp	r3, #120	; 0x78
 801aaf2:	d003      	beq.n	801aafc <ip4addr_aton+0x60>
 801aaf4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801aaf8:	2b58      	cmp	r3, #88	; 0x58
 801aafa:	d10a      	bne.n	801ab12 <ip4addr_aton+0x76>
        base = 16;
 801aafc:	2310      	movs	r3, #16
 801aafe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 801ab02:	687b      	ldr	r3, [r7, #4]
 801ab04:	3301      	adds	r3, #1
 801ab06:	607b      	str	r3, [r7, #4]
 801ab08:	687b      	ldr	r3, [r7, #4]
 801ab0a:	781b      	ldrb	r3, [r3, #0]
 801ab0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801ab10:	e002      	b.n	801ab18 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 801ab12:	2308      	movs	r3, #8
 801ab14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 801ab18:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ab1c:	3301      	adds	r3, #1
 801ab1e:	4a70      	ldr	r2, [pc, #448]	; (801ace0 <ip4addr_aton+0x244>)
 801ab20:	4413      	add	r3, r2
 801ab22:	781b      	ldrb	r3, [r3, #0]
 801ab24:	f003 0304 	and.w	r3, r3, #4
 801ab28:	2b00      	cmp	r3, #0
 801ab2a:	d011      	beq.n	801ab50 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 801ab2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801ab30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ab32:	fb02 f203 	mul.w	r2, r2, r3
 801ab36:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ab3a:	4413      	add	r3, r2
 801ab3c:	3b30      	subs	r3, #48	; 0x30
 801ab3e:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801ab40:	687b      	ldr	r3, [r7, #4]
 801ab42:	3301      	adds	r3, #1
 801ab44:	607b      	str	r3, [r7, #4]
 801ab46:	687b      	ldr	r3, [r7, #4]
 801ab48:	781b      	ldrb	r3, [r3, #0]
 801ab4a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801ab4e:	e7e3      	b.n	801ab18 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 801ab50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801ab54:	2b10      	cmp	r3, #16
 801ab56:	d127      	bne.n	801aba8 <ip4addr_aton+0x10c>
 801ab58:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ab5c:	3301      	adds	r3, #1
 801ab5e:	4a60      	ldr	r2, [pc, #384]	; (801ace0 <ip4addr_aton+0x244>)
 801ab60:	4413      	add	r3, r2
 801ab62:	781b      	ldrb	r3, [r3, #0]
 801ab64:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801ab68:	2b00      	cmp	r3, #0
 801ab6a:	d01d      	beq.n	801aba8 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801ab6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab6e:	011b      	lsls	r3, r3, #4
 801ab70:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801ab74:	f102 010a 	add.w	r1, r2, #10
 801ab78:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801ab7c:	3201      	adds	r2, #1
 801ab7e:	4858      	ldr	r0, [pc, #352]	; (801ace0 <ip4addr_aton+0x244>)
 801ab80:	4402      	add	r2, r0
 801ab82:	7812      	ldrb	r2, [r2, #0]
 801ab84:	f002 0203 	and.w	r2, r2, #3
 801ab88:	2a02      	cmp	r2, #2
 801ab8a:	d101      	bne.n	801ab90 <ip4addr_aton+0xf4>
 801ab8c:	2261      	movs	r2, #97	; 0x61
 801ab8e:	e000      	b.n	801ab92 <ip4addr_aton+0xf6>
 801ab90:	2241      	movs	r2, #65	; 0x41
 801ab92:	1a8a      	subs	r2, r1, r2
 801ab94:	4313      	orrs	r3, r2
 801ab96:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	3301      	adds	r3, #1
 801ab9c:	607b      	str	r3, [r7, #4]
 801ab9e:	687b      	ldr	r3, [r7, #4]
 801aba0:	781b      	ldrb	r3, [r3, #0]
 801aba2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 801aba6:	e7b7      	b.n	801ab18 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 801aba8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801abac:	2b2e      	cmp	r3, #46	; 0x2e
 801abae:	d114      	bne.n	801abda <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801abb0:	f107 030c 	add.w	r3, r7, #12
 801abb4:	330c      	adds	r3, #12
 801abb6:	69fa      	ldr	r2, [r7, #28]
 801abb8:	429a      	cmp	r2, r3
 801abba:	d301      	bcc.n	801abc0 <ip4addr_aton+0x124>
        return 0;
 801abbc:	2300      	movs	r3, #0
 801abbe:	e08b      	b.n	801acd8 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 801abc0:	69fb      	ldr	r3, [r7, #28]
 801abc2:	1d1a      	adds	r2, r3, #4
 801abc4:	61fa      	str	r2, [r7, #28]
 801abc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801abc8:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	3301      	adds	r3, #1
 801abce:	607b      	str	r3, [r7, #4]
 801abd0:	687b      	ldr	r3, [r7, #4]
 801abd2:	781b      	ldrb	r3, [r3, #0]
 801abd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 801abd8:	e76c      	b.n	801aab4 <ip4addr_aton+0x18>
    } else {
      break;
 801abda:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 801abdc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801abe0:	2b00      	cmp	r3, #0
 801abe2:	d00b      	beq.n	801abfc <ip4addr_aton+0x160>
 801abe4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801abe8:	3301      	adds	r3, #1
 801abea:	4a3d      	ldr	r2, [pc, #244]	; (801ace0 <ip4addr_aton+0x244>)
 801abec:	4413      	add	r3, r2
 801abee:	781b      	ldrb	r3, [r3, #0]
 801abf0:	f003 0308 	and.w	r3, r3, #8
 801abf4:	2b00      	cmp	r3, #0
 801abf6:	d101      	bne.n	801abfc <ip4addr_aton+0x160>
    return 0;
 801abf8:	2300      	movs	r3, #0
 801abfa:	e06d      	b.n	801acd8 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 801abfc:	f107 030c 	add.w	r3, r7, #12
 801ac00:	69fa      	ldr	r2, [r7, #28]
 801ac02:	1ad3      	subs	r3, r2, r3
 801ac04:	109b      	asrs	r3, r3, #2
 801ac06:	3301      	adds	r3, #1
 801ac08:	2b04      	cmp	r3, #4
 801ac0a:	d853      	bhi.n	801acb4 <ip4addr_aton+0x218>
 801ac0c:	a201      	add	r2, pc, #4	; (adr r2, 801ac14 <ip4addr_aton+0x178>)
 801ac0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ac12:	bf00      	nop
 801ac14:	0801ac29 	.word	0x0801ac29
 801ac18:	0801acc3 	.word	0x0801acc3
 801ac1c:	0801ac2d 	.word	0x0801ac2d
 801ac20:	0801ac4f 	.word	0x0801ac4f
 801ac24:	0801ac7d 	.word	0x0801ac7d

    case 0:
      return 0;       /* initial nondigit */
 801ac28:	2300      	movs	r3, #0
 801ac2a:	e055      	b.n	801acd8 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 801ac2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac2e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801ac32:	d301      	bcc.n	801ac38 <ip4addr_aton+0x19c>
        return 0;
 801ac34:	2300      	movs	r3, #0
 801ac36:	e04f      	b.n	801acd8 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 801ac38:	68fb      	ldr	r3, [r7, #12]
 801ac3a:	2bff      	cmp	r3, #255	; 0xff
 801ac3c:	d901      	bls.n	801ac42 <ip4addr_aton+0x1a6>
        return 0;
 801ac3e:	2300      	movs	r3, #0
 801ac40:	e04a      	b.n	801acd8 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 801ac42:	68fb      	ldr	r3, [r7, #12]
 801ac44:	061b      	lsls	r3, r3, #24
 801ac46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ac48:	4313      	orrs	r3, r2
 801ac4a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801ac4c:	e03a      	b.n	801acc4 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 801ac4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ac54:	d301      	bcc.n	801ac5a <ip4addr_aton+0x1be>
        return 0;
 801ac56:	2300      	movs	r3, #0
 801ac58:	e03e      	b.n	801acd8 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801ac5a:	68fb      	ldr	r3, [r7, #12]
 801ac5c:	2bff      	cmp	r3, #255	; 0xff
 801ac5e:	d802      	bhi.n	801ac66 <ip4addr_aton+0x1ca>
 801ac60:	693b      	ldr	r3, [r7, #16]
 801ac62:	2bff      	cmp	r3, #255	; 0xff
 801ac64:	d901      	bls.n	801ac6a <ip4addr_aton+0x1ce>
        return 0;
 801ac66:	2300      	movs	r3, #0
 801ac68:	e036      	b.n	801acd8 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 801ac6a:	68fb      	ldr	r3, [r7, #12]
 801ac6c:	061a      	lsls	r2, r3, #24
 801ac6e:	693b      	ldr	r3, [r7, #16]
 801ac70:	041b      	lsls	r3, r3, #16
 801ac72:	4313      	orrs	r3, r2
 801ac74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ac76:	4313      	orrs	r3, r2
 801ac78:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801ac7a:	e023      	b.n	801acc4 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 801ac7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac7e:	2bff      	cmp	r3, #255	; 0xff
 801ac80:	d901      	bls.n	801ac86 <ip4addr_aton+0x1ea>
        return 0;
 801ac82:	2300      	movs	r3, #0
 801ac84:	e028      	b.n	801acd8 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801ac86:	68fb      	ldr	r3, [r7, #12]
 801ac88:	2bff      	cmp	r3, #255	; 0xff
 801ac8a:	d805      	bhi.n	801ac98 <ip4addr_aton+0x1fc>
 801ac8c:	693b      	ldr	r3, [r7, #16]
 801ac8e:	2bff      	cmp	r3, #255	; 0xff
 801ac90:	d802      	bhi.n	801ac98 <ip4addr_aton+0x1fc>
 801ac92:	697b      	ldr	r3, [r7, #20]
 801ac94:	2bff      	cmp	r3, #255	; 0xff
 801ac96:	d901      	bls.n	801ac9c <ip4addr_aton+0x200>
        return 0;
 801ac98:	2300      	movs	r3, #0
 801ac9a:	e01d      	b.n	801acd8 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801ac9c:	68fb      	ldr	r3, [r7, #12]
 801ac9e:	061a      	lsls	r2, r3, #24
 801aca0:	693b      	ldr	r3, [r7, #16]
 801aca2:	041b      	lsls	r3, r3, #16
 801aca4:	431a      	orrs	r2, r3
 801aca6:	697b      	ldr	r3, [r7, #20]
 801aca8:	021b      	lsls	r3, r3, #8
 801acaa:	4313      	orrs	r3, r2
 801acac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801acae:	4313      	orrs	r3, r2
 801acb0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801acb2:	e007      	b.n	801acc4 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 801acb4:	4b0b      	ldr	r3, [pc, #44]	; (801ace4 <ip4addr_aton+0x248>)
 801acb6:	22f9      	movs	r2, #249	; 0xf9
 801acb8:	490b      	ldr	r1, [pc, #44]	; (801ace8 <ip4addr_aton+0x24c>)
 801acba:	480c      	ldr	r0, [pc, #48]	; (801acec <ip4addr_aton+0x250>)
 801acbc:	f005 fb8e 	bl	80203dc <iprintf>
      break;
 801acc0:	e000      	b.n	801acc4 <ip4addr_aton+0x228>
      break;
 801acc2:	bf00      	nop
  }
  if (addr) {
 801acc4:	683b      	ldr	r3, [r7, #0]
 801acc6:	2b00      	cmp	r3, #0
 801acc8:	d005      	beq.n	801acd6 <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801acca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801accc:	f7f1 fe6d 	bl	800c9aa <lwip_htonl>
 801acd0:	4602      	mov	r2, r0
 801acd2:	683b      	ldr	r3, [r7, #0]
 801acd4:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801acd6:	2301      	movs	r3, #1
}
 801acd8:	4618      	mov	r0, r3
 801acda:	3728      	adds	r7, #40	; 0x28
 801acdc:	46bd      	mov	sp, r7
 801acde:	bd80      	pop	{r7, pc}
 801ace0:	08026c0a 	.word	0x08026c0a
 801ace4:	080264f4 	.word	0x080264f4
 801ace8:	08026530 	.word	0x08026530
 801acec:	0802653c 	.word	0x0802653c

0801acf0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801acf0:	b580      	push	{r7, lr}
 801acf2:	b084      	sub	sp, #16
 801acf4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801acf6:	2300      	movs	r3, #0
 801acf8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801acfa:	4b12      	ldr	r3, [pc, #72]	; (801ad44 <ip_reass_tmr+0x54>)
 801acfc:	681b      	ldr	r3, [r3, #0]
 801acfe:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801ad00:	e018      	b.n	801ad34 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801ad02:	68fb      	ldr	r3, [r7, #12]
 801ad04:	7fdb      	ldrb	r3, [r3, #31]
 801ad06:	2b00      	cmp	r3, #0
 801ad08:	d00b      	beq.n	801ad22 <ip_reass_tmr+0x32>
      r->timer--;
 801ad0a:	68fb      	ldr	r3, [r7, #12]
 801ad0c:	7fdb      	ldrb	r3, [r3, #31]
 801ad0e:	3b01      	subs	r3, #1
 801ad10:	b2da      	uxtb	r2, r3
 801ad12:	68fb      	ldr	r3, [r7, #12]
 801ad14:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801ad16:	68fb      	ldr	r3, [r7, #12]
 801ad18:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801ad1a:	68fb      	ldr	r3, [r7, #12]
 801ad1c:	681b      	ldr	r3, [r3, #0]
 801ad1e:	60fb      	str	r3, [r7, #12]
 801ad20:	e008      	b.n	801ad34 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801ad22:	68fb      	ldr	r3, [r7, #12]
 801ad24:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801ad26:	68fb      	ldr	r3, [r7, #12]
 801ad28:	681b      	ldr	r3, [r3, #0]
 801ad2a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801ad2c:	68b9      	ldr	r1, [r7, #8]
 801ad2e:	6878      	ldr	r0, [r7, #4]
 801ad30:	f000 f80a 	bl	801ad48 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801ad34:	68fb      	ldr	r3, [r7, #12]
 801ad36:	2b00      	cmp	r3, #0
 801ad38:	d1e3      	bne.n	801ad02 <ip_reass_tmr+0x12>
    }
  }
}
 801ad3a:	bf00      	nop
 801ad3c:	bf00      	nop
 801ad3e:	3710      	adds	r7, #16
 801ad40:	46bd      	mov	sp, r7
 801ad42:	bd80      	pop	{r7, pc}
 801ad44:	20006998 	.word	0x20006998

0801ad48 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801ad48:	b580      	push	{r7, lr}
 801ad4a:	b088      	sub	sp, #32
 801ad4c:	af00      	add	r7, sp, #0
 801ad4e:	6078      	str	r0, [r7, #4]
 801ad50:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801ad52:	2300      	movs	r3, #0
 801ad54:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801ad56:	683a      	ldr	r2, [r7, #0]
 801ad58:	687b      	ldr	r3, [r7, #4]
 801ad5a:	429a      	cmp	r2, r3
 801ad5c:	d105      	bne.n	801ad6a <ip_reass_free_complete_datagram+0x22>
 801ad5e:	4b45      	ldr	r3, [pc, #276]	; (801ae74 <ip_reass_free_complete_datagram+0x12c>)
 801ad60:	22ab      	movs	r2, #171	; 0xab
 801ad62:	4945      	ldr	r1, [pc, #276]	; (801ae78 <ip_reass_free_complete_datagram+0x130>)
 801ad64:	4845      	ldr	r0, [pc, #276]	; (801ae7c <ip_reass_free_complete_datagram+0x134>)
 801ad66:	f005 fb39 	bl	80203dc <iprintf>
  if (prev != NULL) {
 801ad6a:	683b      	ldr	r3, [r7, #0]
 801ad6c:	2b00      	cmp	r3, #0
 801ad6e:	d00a      	beq.n	801ad86 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801ad70:	683b      	ldr	r3, [r7, #0]
 801ad72:	681b      	ldr	r3, [r3, #0]
 801ad74:	687a      	ldr	r2, [r7, #4]
 801ad76:	429a      	cmp	r2, r3
 801ad78:	d005      	beq.n	801ad86 <ip_reass_free_complete_datagram+0x3e>
 801ad7a:	4b3e      	ldr	r3, [pc, #248]	; (801ae74 <ip_reass_free_complete_datagram+0x12c>)
 801ad7c:	22ad      	movs	r2, #173	; 0xad
 801ad7e:	4940      	ldr	r1, [pc, #256]	; (801ae80 <ip_reass_free_complete_datagram+0x138>)
 801ad80:	483e      	ldr	r0, [pc, #248]	; (801ae7c <ip_reass_free_complete_datagram+0x134>)
 801ad82:	f005 fb2b 	bl	80203dc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801ad86:	687b      	ldr	r3, [r7, #4]
 801ad88:	685b      	ldr	r3, [r3, #4]
 801ad8a:	685b      	ldr	r3, [r3, #4]
 801ad8c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801ad8e:	697b      	ldr	r3, [r7, #20]
 801ad90:	889b      	ldrh	r3, [r3, #4]
 801ad92:	b29b      	uxth	r3, r3
 801ad94:	2b00      	cmp	r3, #0
 801ad96:	d12a      	bne.n	801adee <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801ad98:	687b      	ldr	r3, [r7, #4]
 801ad9a:	685b      	ldr	r3, [r3, #4]
 801ad9c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801ad9e:	697b      	ldr	r3, [r7, #20]
 801ada0:	681a      	ldr	r2, [r3, #0]
 801ada2:	687b      	ldr	r3, [r7, #4]
 801ada4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801ada6:	69bb      	ldr	r3, [r7, #24]
 801ada8:	6858      	ldr	r0, [r3, #4]
 801adaa:	687b      	ldr	r3, [r7, #4]
 801adac:	3308      	adds	r3, #8
 801adae:	2214      	movs	r2, #20
 801adb0:	4619      	mov	r1, r3
 801adb2:	f005 fa53 	bl	802025c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801adb6:	2101      	movs	r1, #1
 801adb8:	69b8      	ldr	r0, [r7, #24]
 801adba:	f7fe fab9 	bl	8019330 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801adbe:	69b8      	ldr	r0, [r7, #24]
 801adc0:	f7f3 fff4 	bl	800edac <pbuf_clen>
 801adc4:	4603      	mov	r3, r0
 801adc6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801adc8:	8bfa      	ldrh	r2, [r7, #30]
 801adca:	8a7b      	ldrh	r3, [r7, #18]
 801adcc:	4413      	add	r3, r2
 801adce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801add2:	db05      	blt.n	801ade0 <ip_reass_free_complete_datagram+0x98>
 801add4:	4b27      	ldr	r3, [pc, #156]	; (801ae74 <ip_reass_free_complete_datagram+0x12c>)
 801add6:	22bc      	movs	r2, #188	; 0xbc
 801add8:	492a      	ldr	r1, [pc, #168]	; (801ae84 <ip_reass_free_complete_datagram+0x13c>)
 801adda:	4828      	ldr	r0, [pc, #160]	; (801ae7c <ip_reass_free_complete_datagram+0x134>)
 801addc:	f005 fafe 	bl	80203dc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801ade0:	8bfa      	ldrh	r2, [r7, #30]
 801ade2:	8a7b      	ldrh	r3, [r7, #18]
 801ade4:	4413      	add	r3, r2
 801ade6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801ade8:	69b8      	ldr	r0, [r7, #24]
 801adea:	f7f3 ff51 	bl	800ec90 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801adee:	687b      	ldr	r3, [r7, #4]
 801adf0:	685b      	ldr	r3, [r3, #4]
 801adf2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801adf4:	e01f      	b.n	801ae36 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801adf6:	69bb      	ldr	r3, [r7, #24]
 801adf8:	685b      	ldr	r3, [r3, #4]
 801adfa:	617b      	str	r3, [r7, #20]
    pcur = p;
 801adfc:	69bb      	ldr	r3, [r7, #24]
 801adfe:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801ae00:	697b      	ldr	r3, [r7, #20]
 801ae02:	681b      	ldr	r3, [r3, #0]
 801ae04:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801ae06:	68f8      	ldr	r0, [r7, #12]
 801ae08:	f7f3 ffd0 	bl	800edac <pbuf_clen>
 801ae0c:	4603      	mov	r3, r0
 801ae0e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801ae10:	8bfa      	ldrh	r2, [r7, #30]
 801ae12:	8a7b      	ldrh	r3, [r7, #18]
 801ae14:	4413      	add	r3, r2
 801ae16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ae1a:	db05      	blt.n	801ae28 <ip_reass_free_complete_datagram+0xe0>
 801ae1c:	4b15      	ldr	r3, [pc, #84]	; (801ae74 <ip_reass_free_complete_datagram+0x12c>)
 801ae1e:	22cc      	movs	r2, #204	; 0xcc
 801ae20:	4918      	ldr	r1, [pc, #96]	; (801ae84 <ip_reass_free_complete_datagram+0x13c>)
 801ae22:	4816      	ldr	r0, [pc, #88]	; (801ae7c <ip_reass_free_complete_datagram+0x134>)
 801ae24:	f005 fada 	bl	80203dc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801ae28:	8bfa      	ldrh	r2, [r7, #30]
 801ae2a:	8a7b      	ldrh	r3, [r7, #18]
 801ae2c:	4413      	add	r3, r2
 801ae2e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801ae30:	68f8      	ldr	r0, [r7, #12]
 801ae32:	f7f3 ff2d 	bl	800ec90 <pbuf_free>
  while (p != NULL) {
 801ae36:	69bb      	ldr	r3, [r7, #24]
 801ae38:	2b00      	cmp	r3, #0
 801ae3a:	d1dc      	bne.n	801adf6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801ae3c:	6839      	ldr	r1, [r7, #0]
 801ae3e:	6878      	ldr	r0, [r7, #4]
 801ae40:	f000 f8ca 	bl	801afd8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801ae44:	4b10      	ldr	r3, [pc, #64]	; (801ae88 <ip_reass_free_complete_datagram+0x140>)
 801ae46:	881b      	ldrh	r3, [r3, #0]
 801ae48:	8bfa      	ldrh	r2, [r7, #30]
 801ae4a:	429a      	cmp	r2, r3
 801ae4c:	d905      	bls.n	801ae5a <ip_reass_free_complete_datagram+0x112>
 801ae4e:	4b09      	ldr	r3, [pc, #36]	; (801ae74 <ip_reass_free_complete_datagram+0x12c>)
 801ae50:	22d2      	movs	r2, #210	; 0xd2
 801ae52:	490e      	ldr	r1, [pc, #56]	; (801ae8c <ip_reass_free_complete_datagram+0x144>)
 801ae54:	4809      	ldr	r0, [pc, #36]	; (801ae7c <ip_reass_free_complete_datagram+0x134>)
 801ae56:	f005 fac1 	bl	80203dc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801ae5a:	4b0b      	ldr	r3, [pc, #44]	; (801ae88 <ip_reass_free_complete_datagram+0x140>)
 801ae5c:	881a      	ldrh	r2, [r3, #0]
 801ae5e:	8bfb      	ldrh	r3, [r7, #30]
 801ae60:	1ad3      	subs	r3, r2, r3
 801ae62:	b29a      	uxth	r2, r3
 801ae64:	4b08      	ldr	r3, [pc, #32]	; (801ae88 <ip_reass_free_complete_datagram+0x140>)
 801ae66:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801ae68:	8bfb      	ldrh	r3, [r7, #30]
}
 801ae6a:	4618      	mov	r0, r3
 801ae6c:	3720      	adds	r7, #32
 801ae6e:	46bd      	mov	sp, r7
 801ae70:	bd80      	pop	{r7, pc}
 801ae72:	bf00      	nop
 801ae74:	08026564 	.word	0x08026564
 801ae78:	080265a0 	.word	0x080265a0
 801ae7c:	080265ac 	.word	0x080265ac
 801ae80:	080265d4 	.word	0x080265d4
 801ae84:	080265e8 	.word	0x080265e8
 801ae88:	2000699c 	.word	0x2000699c
 801ae8c:	08026608 	.word	0x08026608

0801ae90 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801ae90:	b580      	push	{r7, lr}
 801ae92:	b08a      	sub	sp, #40	; 0x28
 801ae94:	af00      	add	r7, sp, #0
 801ae96:	6078      	str	r0, [r7, #4]
 801ae98:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801ae9a:	2300      	movs	r3, #0
 801ae9c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801ae9e:	2300      	movs	r3, #0
 801aea0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801aea2:	2300      	movs	r3, #0
 801aea4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801aea6:	2300      	movs	r3, #0
 801aea8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801aeaa:	2300      	movs	r3, #0
 801aeac:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801aeae:	4b28      	ldr	r3, [pc, #160]	; (801af50 <ip_reass_remove_oldest_datagram+0xc0>)
 801aeb0:	681b      	ldr	r3, [r3, #0]
 801aeb2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801aeb4:	e030      	b.n	801af18 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801aeb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aeb8:	695a      	ldr	r2, [r3, #20]
 801aeba:	687b      	ldr	r3, [r7, #4]
 801aebc:	68db      	ldr	r3, [r3, #12]
 801aebe:	429a      	cmp	r2, r3
 801aec0:	d10c      	bne.n	801aedc <ip_reass_remove_oldest_datagram+0x4c>
 801aec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aec4:	699a      	ldr	r2, [r3, #24]
 801aec6:	687b      	ldr	r3, [r7, #4]
 801aec8:	691b      	ldr	r3, [r3, #16]
 801aeca:	429a      	cmp	r2, r3
 801aecc:	d106      	bne.n	801aedc <ip_reass_remove_oldest_datagram+0x4c>
 801aece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aed0:	899a      	ldrh	r2, [r3, #12]
 801aed2:	687b      	ldr	r3, [r7, #4]
 801aed4:	889b      	ldrh	r3, [r3, #4]
 801aed6:	b29b      	uxth	r3, r3
 801aed8:	429a      	cmp	r2, r3
 801aeda:	d014      	beq.n	801af06 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801aedc:	693b      	ldr	r3, [r7, #16]
 801aede:	3301      	adds	r3, #1
 801aee0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801aee2:	6a3b      	ldr	r3, [r7, #32]
 801aee4:	2b00      	cmp	r3, #0
 801aee6:	d104      	bne.n	801aef2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801aee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aeea:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801aeec:	69fb      	ldr	r3, [r7, #28]
 801aeee:	61bb      	str	r3, [r7, #24]
 801aef0:	e009      	b.n	801af06 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801aef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aef4:	7fda      	ldrb	r2, [r3, #31]
 801aef6:	6a3b      	ldr	r3, [r7, #32]
 801aef8:	7fdb      	ldrb	r3, [r3, #31]
 801aefa:	429a      	cmp	r2, r3
 801aefc:	d803      	bhi.n	801af06 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801aefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af00:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801af02:	69fb      	ldr	r3, [r7, #28]
 801af04:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801af06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af08:	681b      	ldr	r3, [r3, #0]
 801af0a:	2b00      	cmp	r3, #0
 801af0c:	d001      	beq.n	801af12 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801af0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af10:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801af12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af14:	681b      	ldr	r3, [r3, #0]
 801af16:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801af18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af1a:	2b00      	cmp	r3, #0
 801af1c:	d1cb      	bne.n	801aeb6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801af1e:	6a3b      	ldr	r3, [r7, #32]
 801af20:	2b00      	cmp	r3, #0
 801af22:	d008      	beq.n	801af36 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801af24:	69b9      	ldr	r1, [r7, #24]
 801af26:	6a38      	ldr	r0, [r7, #32]
 801af28:	f7ff ff0e 	bl	801ad48 <ip_reass_free_complete_datagram>
 801af2c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801af2e:	697a      	ldr	r2, [r7, #20]
 801af30:	68fb      	ldr	r3, [r7, #12]
 801af32:	4413      	add	r3, r2
 801af34:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801af36:	697a      	ldr	r2, [r7, #20]
 801af38:	683b      	ldr	r3, [r7, #0]
 801af3a:	429a      	cmp	r2, r3
 801af3c:	da02      	bge.n	801af44 <ip_reass_remove_oldest_datagram+0xb4>
 801af3e:	693b      	ldr	r3, [r7, #16]
 801af40:	2b01      	cmp	r3, #1
 801af42:	dcac      	bgt.n	801ae9e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801af44:	697b      	ldr	r3, [r7, #20]
}
 801af46:	4618      	mov	r0, r3
 801af48:	3728      	adds	r7, #40	; 0x28
 801af4a:	46bd      	mov	sp, r7
 801af4c:	bd80      	pop	{r7, pc}
 801af4e:	bf00      	nop
 801af50:	20006998 	.word	0x20006998

0801af54 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801af54:	b580      	push	{r7, lr}
 801af56:	b084      	sub	sp, #16
 801af58:	af00      	add	r7, sp, #0
 801af5a:	6078      	str	r0, [r7, #4]
 801af5c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801af5e:	2004      	movs	r0, #4
 801af60:	f7f2 fe5e 	bl	800dc20 <memp_malloc>
 801af64:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801af66:	68fb      	ldr	r3, [r7, #12]
 801af68:	2b00      	cmp	r3, #0
 801af6a:	d116      	bne.n	801af9a <ip_reass_enqueue_new_datagram+0x46>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801af6c:	6839      	ldr	r1, [r7, #0]
 801af6e:	6878      	ldr	r0, [r7, #4]
 801af70:	f7ff ff8e 	bl	801ae90 <ip_reass_remove_oldest_datagram>
 801af74:	4602      	mov	r2, r0
 801af76:	683b      	ldr	r3, [r7, #0]
 801af78:	4293      	cmp	r3, r2
 801af7a:	dc03      	bgt.n	801af84 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801af7c:	2004      	movs	r0, #4
 801af7e:	f7f2 fe4f 	bl	800dc20 <memp_malloc>
 801af82:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801af84:	68fb      	ldr	r3, [r7, #12]
 801af86:	2b00      	cmp	r3, #0
 801af88:	d107      	bne.n	801af9a <ip_reass_enqueue_new_datagram+0x46>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 801af8a:	4b11      	ldr	r3, [pc, #68]	; (801afd0 <ip_reass_enqueue_new_datagram+0x7c>)
 801af8c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801af8e:	3301      	adds	r3, #1
 801af90:	b29a      	uxth	r2, r3
 801af92:	4b0f      	ldr	r3, [pc, #60]	; (801afd0 <ip_reass_enqueue_new_datagram+0x7c>)
 801af94:	879a      	strh	r2, [r3, #60]	; 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801af96:	2300      	movs	r3, #0
 801af98:	e016      	b.n	801afc8 <ip_reass_enqueue_new_datagram+0x74>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801af9a:	2220      	movs	r2, #32
 801af9c:	2100      	movs	r1, #0
 801af9e:	68f8      	ldr	r0, [r7, #12]
 801afa0:	f005 f96a 	bl	8020278 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801afa4:	68fb      	ldr	r3, [r7, #12]
 801afa6:	220f      	movs	r2, #15
 801afa8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801afaa:	4b0a      	ldr	r3, [pc, #40]	; (801afd4 <ip_reass_enqueue_new_datagram+0x80>)
 801afac:	681a      	ldr	r2, [r3, #0]
 801afae:	68fb      	ldr	r3, [r7, #12]
 801afb0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801afb2:	4a08      	ldr	r2, [pc, #32]	; (801afd4 <ip_reass_enqueue_new_datagram+0x80>)
 801afb4:	68fb      	ldr	r3, [r7, #12]
 801afb6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801afb8:	68fb      	ldr	r3, [r7, #12]
 801afba:	3308      	adds	r3, #8
 801afbc:	2214      	movs	r2, #20
 801afbe:	6879      	ldr	r1, [r7, #4]
 801afc0:	4618      	mov	r0, r3
 801afc2:	f005 f94b 	bl	802025c <memcpy>
  return ipr;
 801afc6:	68fb      	ldr	r3, [r7, #12]
}
 801afc8:	4618      	mov	r0, r3
 801afca:	3710      	adds	r7, #16
 801afcc:	46bd      	mov	sp, r7
 801afce:	bd80      	pop	{r7, pc}
 801afd0:	2000a3ec 	.word	0x2000a3ec
 801afd4:	20006998 	.word	0x20006998

0801afd8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801afd8:	b580      	push	{r7, lr}
 801afda:	b082      	sub	sp, #8
 801afdc:	af00      	add	r7, sp, #0
 801afde:	6078      	str	r0, [r7, #4]
 801afe0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801afe2:	4b10      	ldr	r3, [pc, #64]	; (801b024 <ip_reass_dequeue_datagram+0x4c>)
 801afe4:	681b      	ldr	r3, [r3, #0]
 801afe6:	687a      	ldr	r2, [r7, #4]
 801afe8:	429a      	cmp	r2, r3
 801afea:	d104      	bne.n	801aff6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801afec:	687b      	ldr	r3, [r7, #4]
 801afee:	681b      	ldr	r3, [r3, #0]
 801aff0:	4a0c      	ldr	r2, [pc, #48]	; (801b024 <ip_reass_dequeue_datagram+0x4c>)
 801aff2:	6013      	str	r3, [r2, #0]
 801aff4:	e00d      	b.n	801b012 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801aff6:	683b      	ldr	r3, [r7, #0]
 801aff8:	2b00      	cmp	r3, #0
 801affa:	d106      	bne.n	801b00a <ip_reass_dequeue_datagram+0x32>
 801affc:	4b0a      	ldr	r3, [pc, #40]	; (801b028 <ip_reass_dequeue_datagram+0x50>)
 801affe:	f240 1245 	movw	r2, #325	; 0x145
 801b002:	490a      	ldr	r1, [pc, #40]	; (801b02c <ip_reass_dequeue_datagram+0x54>)
 801b004:	480a      	ldr	r0, [pc, #40]	; (801b030 <ip_reass_dequeue_datagram+0x58>)
 801b006:	f005 f9e9 	bl	80203dc <iprintf>
    prev->next = ipr->next;
 801b00a:	687b      	ldr	r3, [r7, #4]
 801b00c:	681a      	ldr	r2, [r3, #0]
 801b00e:	683b      	ldr	r3, [r7, #0]
 801b010:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801b012:	6879      	ldr	r1, [r7, #4]
 801b014:	2004      	movs	r0, #4
 801b016:	f7f2 fe7f 	bl	800dd18 <memp_free>
}
 801b01a:	bf00      	nop
 801b01c:	3708      	adds	r7, #8
 801b01e:	46bd      	mov	sp, r7
 801b020:	bd80      	pop	{r7, pc}
 801b022:	bf00      	nop
 801b024:	20006998 	.word	0x20006998
 801b028:	08026564 	.word	0x08026564
 801b02c:	0802662c 	.word	0x0802662c
 801b030:	080265ac 	.word	0x080265ac

0801b034 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801b034:	b580      	push	{r7, lr}
 801b036:	b08c      	sub	sp, #48	; 0x30
 801b038:	af00      	add	r7, sp, #0
 801b03a:	60f8      	str	r0, [r7, #12]
 801b03c:	60b9      	str	r1, [r7, #8]
 801b03e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801b040:	2300      	movs	r3, #0
 801b042:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801b044:	2301      	movs	r3, #1
 801b046:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801b048:	68bb      	ldr	r3, [r7, #8]
 801b04a:	685b      	ldr	r3, [r3, #4]
 801b04c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801b04e:	69fb      	ldr	r3, [r7, #28]
 801b050:	885b      	ldrh	r3, [r3, #2]
 801b052:	b29b      	uxth	r3, r3
 801b054:	4618      	mov	r0, r3
 801b056:	f7f1 fc93 	bl	800c980 <lwip_htons>
 801b05a:	4603      	mov	r3, r0
 801b05c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801b05e:	69fb      	ldr	r3, [r7, #28]
 801b060:	781b      	ldrb	r3, [r3, #0]
 801b062:	f003 030f 	and.w	r3, r3, #15
 801b066:	b2db      	uxtb	r3, r3
 801b068:	009b      	lsls	r3, r3, #2
 801b06a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801b06c:	7e7b      	ldrb	r3, [r7, #25]
 801b06e:	b29b      	uxth	r3, r3
 801b070:	8b7a      	ldrh	r2, [r7, #26]
 801b072:	429a      	cmp	r2, r3
 801b074:	d202      	bcs.n	801b07c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b076:	f04f 33ff 	mov.w	r3, #4294967295
 801b07a:	e135      	b.n	801b2e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801b07c:	7e7b      	ldrb	r3, [r7, #25]
 801b07e:	b29b      	uxth	r3, r3
 801b080:	8b7a      	ldrh	r2, [r7, #26]
 801b082:	1ad3      	subs	r3, r2, r3
 801b084:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801b086:	69fb      	ldr	r3, [r7, #28]
 801b088:	88db      	ldrh	r3, [r3, #6]
 801b08a:	b29b      	uxth	r3, r3
 801b08c:	4618      	mov	r0, r3
 801b08e:	f7f1 fc77 	bl	800c980 <lwip_htons>
 801b092:	4603      	mov	r3, r0
 801b094:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b098:	b29b      	uxth	r3, r3
 801b09a:	00db      	lsls	r3, r3, #3
 801b09c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801b09e:	68bb      	ldr	r3, [r7, #8]
 801b0a0:	685b      	ldr	r3, [r3, #4]
 801b0a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801b0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b0a6:	2200      	movs	r2, #0
 801b0a8:	701a      	strb	r2, [r3, #0]
 801b0aa:	2200      	movs	r2, #0
 801b0ac:	705a      	strb	r2, [r3, #1]
 801b0ae:	2200      	movs	r2, #0
 801b0b0:	709a      	strb	r2, [r3, #2]
 801b0b2:	2200      	movs	r2, #0
 801b0b4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801b0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b0b8:	8afa      	ldrh	r2, [r7, #22]
 801b0ba:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801b0bc:	8afa      	ldrh	r2, [r7, #22]
 801b0be:	8b7b      	ldrh	r3, [r7, #26]
 801b0c0:	4413      	add	r3, r2
 801b0c2:	b29a      	uxth	r2, r3
 801b0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b0c6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801b0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b0ca:	88db      	ldrh	r3, [r3, #6]
 801b0cc:	b29b      	uxth	r3, r3
 801b0ce:	8afa      	ldrh	r2, [r7, #22]
 801b0d0:	429a      	cmp	r2, r3
 801b0d2:	d902      	bls.n	801b0da <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b0d4:	f04f 33ff 	mov.w	r3, #4294967295
 801b0d8:	e106      	b.n	801b2e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801b0da:	68fb      	ldr	r3, [r7, #12]
 801b0dc:	685b      	ldr	r3, [r3, #4]
 801b0de:	627b      	str	r3, [r7, #36]	; 0x24
 801b0e0:	e068      	b.n	801b1b4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801b0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0e4:	685b      	ldr	r3, [r3, #4]
 801b0e6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801b0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b0ea:	889b      	ldrh	r3, [r3, #4]
 801b0ec:	b29a      	uxth	r2, r3
 801b0ee:	693b      	ldr	r3, [r7, #16]
 801b0f0:	889b      	ldrh	r3, [r3, #4]
 801b0f2:	b29b      	uxth	r3, r3
 801b0f4:	429a      	cmp	r2, r3
 801b0f6:	d235      	bcs.n	801b164 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801b0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b0fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b0fc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801b0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b100:	2b00      	cmp	r3, #0
 801b102:	d020      	beq.n	801b146 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801b104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b106:	889b      	ldrh	r3, [r3, #4]
 801b108:	b29a      	uxth	r2, r3
 801b10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b10c:	88db      	ldrh	r3, [r3, #6]
 801b10e:	b29b      	uxth	r3, r3
 801b110:	429a      	cmp	r2, r3
 801b112:	d307      	bcc.n	801b124 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801b114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b116:	88db      	ldrh	r3, [r3, #6]
 801b118:	b29a      	uxth	r2, r3
 801b11a:	693b      	ldr	r3, [r7, #16]
 801b11c:	889b      	ldrh	r3, [r3, #4]
 801b11e:	b29b      	uxth	r3, r3
 801b120:	429a      	cmp	r2, r3
 801b122:	d902      	bls.n	801b12a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b124:	f04f 33ff 	mov.w	r3, #4294967295
 801b128:	e0de      	b.n	801b2e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801b12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b12c:	68ba      	ldr	r2, [r7, #8]
 801b12e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801b130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b132:	88db      	ldrh	r3, [r3, #6]
 801b134:	b29a      	uxth	r2, r3
 801b136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b138:	889b      	ldrh	r3, [r3, #4]
 801b13a:	b29b      	uxth	r3, r3
 801b13c:	429a      	cmp	r2, r3
 801b13e:	d03d      	beq.n	801b1bc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801b140:	2300      	movs	r3, #0
 801b142:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801b144:	e03a      	b.n	801b1bc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801b146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b148:	88db      	ldrh	r3, [r3, #6]
 801b14a:	b29a      	uxth	r2, r3
 801b14c:	693b      	ldr	r3, [r7, #16]
 801b14e:	889b      	ldrh	r3, [r3, #4]
 801b150:	b29b      	uxth	r3, r3
 801b152:	429a      	cmp	r2, r3
 801b154:	d902      	bls.n	801b15c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b156:	f04f 33ff 	mov.w	r3, #4294967295
 801b15a:	e0c5      	b.n	801b2e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801b15c:	68fb      	ldr	r3, [r7, #12]
 801b15e:	68ba      	ldr	r2, [r7, #8]
 801b160:	605a      	str	r2, [r3, #4]
      break;
 801b162:	e02b      	b.n	801b1bc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801b164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b166:	889b      	ldrh	r3, [r3, #4]
 801b168:	b29a      	uxth	r2, r3
 801b16a:	693b      	ldr	r3, [r7, #16]
 801b16c:	889b      	ldrh	r3, [r3, #4]
 801b16e:	b29b      	uxth	r3, r3
 801b170:	429a      	cmp	r2, r3
 801b172:	d102      	bne.n	801b17a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b174:	f04f 33ff 	mov.w	r3, #4294967295
 801b178:	e0b6      	b.n	801b2e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801b17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b17c:	889b      	ldrh	r3, [r3, #4]
 801b17e:	b29a      	uxth	r2, r3
 801b180:	693b      	ldr	r3, [r7, #16]
 801b182:	88db      	ldrh	r3, [r3, #6]
 801b184:	b29b      	uxth	r3, r3
 801b186:	429a      	cmp	r2, r3
 801b188:	d202      	bcs.n	801b190 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b18a:	f04f 33ff 	mov.w	r3, #4294967295
 801b18e:	e0ab      	b.n	801b2e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801b190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b192:	2b00      	cmp	r3, #0
 801b194:	d009      	beq.n	801b1aa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801b196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b198:	88db      	ldrh	r3, [r3, #6]
 801b19a:	b29a      	uxth	r2, r3
 801b19c:	693b      	ldr	r3, [r7, #16]
 801b19e:	889b      	ldrh	r3, [r3, #4]
 801b1a0:	b29b      	uxth	r3, r3
 801b1a2:	429a      	cmp	r2, r3
 801b1a4:	d001      	beq.n	801b1aa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801b1a6:	2300      	movs	r3, #0
 801b1a8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801b1aa:	693b      	ldr	r3, [r7, #16]
 801b1ac:	681b      	ldr	r3, [r3, #0]
 801b1ae:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801b1b0:	693b      	ldr	r3, [r7, #16]
 801b1b2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801b1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1b6:	2b00      	cmp	r3, #0
 801b1b8:	d193      	bne.n	801b0e2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801b1ba:	e000      	b.n	801b1be <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801b1bc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801b1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1c0:	2b00      	cmp	r3, #0
 801b1c2:	d12d      	bne.n	801b220 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801b1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b1c6:	2b00      	cmp	r3, #0
 801b1c8:	d01c      	beq.n	801b204 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801b1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b1cc:	88db      	ldrh	r3, [r3, #6]
 801b1ce:	b29a      	uxth	r2, r3
 801b1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b1d2:	889b      	ldrh	r3, [r3, #4]
 801b1d4:	b29b      	uxth	r3, r3
 801b1d6:	429a      	cmp	r2, r3
 801b1d8:	d906      	bls.n	801b1e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801b1da:	4b45      	ldr	r3, [pc, #276]	; (801b2f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b1dc:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801b1e0:	4944      	ldr	r1, [pc, #272]	; (801b2f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801b1e2:	4845      	ldr	r0, [pc, #276]	; (801b2f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b1e4:	f005 f8fa 	bl	80203dc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801b1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b1ea:	68ba      	ldr	r2, [r7, #8]
 801b1ec:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801b1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b1f0:	88db      	ldrh	r3, [r3, #6]
 801b1f2:	b29a      	uxth	r2, r3
 801b1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b1f6:	889b      	ldrh	r3, [r3, #4]
 801b1f8:	b29b      	uxth	r3, r3
 801b1fa:	429a      	cmp	r2, r3
 801b1fc:	d010      	beq.n	801b220 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801b1fe:	2300      	movs	r3, #0
 801b200:	623b      	str	r3, [r7, #32]
 801b202:	e00d      	b.n	801b220 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801b204:	68fb      	ldr	r3, [r7, #12]
 801b206:	685b      	ldr	r3, [r3, #4]
 801b208:	2b00      	cmp	r3, #0
 801b20a:	d006      	beq.n	801b21a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801b20c:	4b38      	ldr	r3, [pc, #224]	; (801b2f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b20e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801b212:	493a      	ldr	r1, [pc, #232]	; (801b2fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801b214:	4838      	ldr	r0, [pc, #224]	; (801b2f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b216:	f005 f8e1 	bl	80203dc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801b21a:	68fb      	ldr	r3, [r7, #12]
 801b21c:	68ba      	ldr	r2, [r7, #8]
 801b21e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801b220:	687b      	ldr	r3, [r7, #4]
 801b222:	2b00      	cmp	r3, #0
 801b224:	d105      	bne.n	801b232 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801b226:	68fb      	ldr	r3, [r7, #12]
 801b228:	7f9b      	ldrb	r3, [r3, #30]
 801b22a:	f003 0301 	and.w	r3, r3, #1
 801b22e:	2b00      	cmp	r3, #0
 801b230:	d059      	beq.n	801b2e6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801b232:	6a3b      	ldr	r3, [r7, #32]
 801b234:	2b00      	cmp	r3, #0
 801b236:	d04f      	beq.n	801b2d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801b238:	68fb      	ldr	r3, [r7, #12]
 801b23a:	685b      	ldr	r3, [r3, #4]
 801b23c:	2b00      	cmp	r3, #0
 801b23e:	d006      	beq.n	801b24e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801b240:	68fb      	ldr	r3, [r7, #12]
 801b242:	685b      	ldr	r3, [r3, #4]
 801b244:	685b      	ldr	r3, [r3, #4]
 801b246:	889b      	ldrh	r3, [r3, #4]
 801b248:	b29b      	uxth	r3, r3
 801b24a:	2b00      	cmp	r3, #0
 801b24c:	d002      	beq.n	801b254 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801b24e:	2300      	movs	r3, #0
 801b250:	623b      	str	r3, [r7, #32]
 801b252:	e041      	b.n	801b2d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801b254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b256:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801b258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b25a:	681b      	ldr	r3, [r3, #0]
 801b25c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801b25e:	e012      	b.n	801b286 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801b260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b262:	685b      	ldr	r3, [r3, #4]
 801b264:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801b266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b268:	88db      	ldrh	r3, [r3, #6]
 801b26a:	b29a      	uxth	r2, r3
 801b26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b26e:	889b      	ldrh	r3, [r3, #4]
 801b270:	b29b      	uxth	r3, r3
 801b272:	429a      	cmp	r2, r3
 801b274:	d002      	beq.n	801b27c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801b276:	2300      	movs	r3, #0
 801b278:	623b      	str	r3, [r7, #32]
            break;
 801b27a:	e007      	b.n	801b28c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801b27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b27e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801b280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b282:	681b      	ldr	r3, [r3, #0]
 801b284:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801b286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b288:	2b00      	cmp	r3, #0
 801b28a:	d1e9      	bne.n	801b260 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801b28c:	6a3b      	ldr	r3, [r7, #32]
 801b28e:	2b00      	cmp	r3, #0
 801b290:	d022      	beq.n	801b2d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801b292:	68fb      	ldr	r3, [r7, #12]
 801b294:	685b      	ldr	r3, [r3, #4]
 801b296:	2b00      	cmp	r3, #0
 801b298:	d106      	bne.n	801b2a8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801b29a:	4b15      	ldr	r3, [pc, #84]	; (801b2f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b29c:	f240 12df 	movw	r2, #479	; 0x1df
 801b2a0:	4917      	ldr	r1, [pc, #92]	; (801b300 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801b2a2:	4815      	ldr	r0, [pc, #84]	; (801b2f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b2a4:	f005 f89a 	bl	80203dc <iprintf>
          LWIP_ASSERT("sanity check",
 801b2a8:	68fb      	ldr	r3, [r7, #12]
 801b2aa:	685b      	ldr	r3, [r3, #4]
 801b2ac:	685b      	ldr	r3, [r3, #4]
 801b2ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b2b0:	429a      	cmp	r2, r3
 801b2b2:	d106      	bne.n	801b2c2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801b2b4:	4b0e      	ldr	r3, [pc, #56]	; (801b2f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b2b6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801b2ba:	4911      	ldr	r1, [pc, #68]	; (801b300 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801b2bc:	480e      	ldr	r0, [pc, #56]	; (801b2f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b2be:	f005 f88d 	bl	80203dc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801b2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b2c4:	681b      	ldr	r3, [r3, #0]
 801b2c6:	2b00      	cmp	r3, #0
 801b2c8:	d006      	beq.n	801b2d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801b2ca:	4b09      	ldr	r3, [pc, #36]	; (801b2f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b2cc:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801b2d0:	490c      	ldr	r1, [pc, #48]	; (801b304 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801b2d2:	4809      	ldr	r0, [pc, #36]	; (801b2f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b2d4:	f005 f882 	bl	80203dc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801b2d8:	6a3b      	ldr	r3, [r7, #32]
 801b2da:	2b00      	cmp	r3, #0
 801b2dc:	bf14      	ite	ne
 801b2de:	2301      	movne	r3, #1
 801b2e0:	2300      	moveq	r3, #0
 801b2e2:	b2db      	uxtb	r3, r3
 801b2e4:	e000      	b.n	801b2e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801b2e6:	2300      	movs	r3, #0
}
 801b2e8:	4618      	mov	r0, r3
 801b2ea:	3730      	adds	r7, #48	; 0x30
 801b2ec:	46bd      	mov	sp, r7
 801b2ee:	bd80      	pop	{r7, pc}
 801b2f0:	08026564 	.word	0x08026564
 801b2f4:	08026648 	.word	0x08026648
 801b2f8:	080265ac 	.word	0x080265ac
 801b2fc:	08026668 	.word	0x08026668
 801b300:	080266a0 	.word	0x080266a0
 801b304:	080266b0 	.word	0x080266b0

0801b308 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801b308:	b580      	push	{r7, lr}
 801b30a:	b08e      	sub	sp, #56	; 0x38
 801b30c:	af00      	add	r7, sp, #0
 801b30e:	6078      	str	r0, [r7, #4]
  u16_t offset, len, clen;
  u8_t hlen;
  int valid;
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
 801b310:	4b9f      	ldr	r3, [pc, #636]	; (801b590 <ip4_reass+0x288>)
 801b312:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b314:	3301      	adds	r3, #1
 801b316:	b29a      	uxth	r2, r3
 801b318:	4b9d      	ldr	r3, [pc, #628]	; (801b590 <ip4_reass+0x288>)
 801b31a:	865a      	strh	r2, [r3, #50]	; 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801b31c:	687b      	ldr	r3, [r7, #4]
 801b31e:	685b      	ldr	r3, [r3, #4]
 801b320:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801b322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b324:	781b      	ldrb	r3, [r3, #0]
 801b326:	f003 030f 	and.w	r3, r3, #15
 801b32a:	b2db      	uxtb	r3, r3
 801b32c:	009b      	lsls	r3, r3, #2
 801b32e:	b2db      	uxtb	r3, r3
 801b330:	2b14      	cmp	r3, #20
 801b332:	d008      	beq.n	801b346 <ip4_reass+0x3e>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 801b334:	4b96      	ldr	r3, [pc, #600]	; (801b590 <ip4_reass+0x288>)
 801b336:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801b33a:	3301      	adds	r3, #1
 801b33c:	b29a      	uxth	r2, r3
 801b33e:	4b94      	ldr	r3, [pc, #592]	; (801b590 <ip4_reass+0x288>)
 801b340:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    goto nullreturn;
 801b344:	e17c      	b.n	801b640 <ip4_reass+0x338>
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801b346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b348:	88db      	ldrh	r3, [r3, #6]
 801b34a:	b29b      	uxth	r3, r3
 801b34c:	4618      	mov	r0, r3
 801b34e:	f7f1 fb17 	bl	800c980 <lwip_htons>
 801b352:	4603      	mov	r3, r0
 801b354:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b358:	b29b      	uxth	r3, r3
 801b35a:	00db      	lsls	r3, r3, #3
 801b35c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801b35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b360:	885b      	ldrh	r3, [r3, #2]
 801b362:	b29b      	uxth	r3, r3
 801b364:	4618      	mov	r0, r3
 801b366:	f7f1 fb0b 	bl	800c980 <lwip_htons>
 801b36a:	4603      	mov	r3, r0
 801b36c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801b36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b370:	781b      	ldrb	r3, [r3, #0]
 801b372:	f003 030f 	and.w	r3, r3, #15
 801b376:	b2db      	uxtb	r3, r3
 801b378:	009b      	lsls	r3, r3, #2
 801b37a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801b37e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801b382:	b29b      	uxth	r3, r3
 801b384:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801b386:	429a      	cmp	r2, r3
 801b388:	f0c0 8157 	bcc.w	801b63a <ip4_reass+0x332>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801b38c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801b390:	b29b      	uxth	r3, r3
 801b392:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801b394:	1ad3      	subs	r3, r2, r3
 801b396:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801b398:	6878      	ldr	r0, [r7, #4]
 801b39a:	f7f3 fd07 	bl	800edac <pbuf_clen>
 801b39e:	4603      	mov	r3, r0
 801b3a0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801b3a2:	4b7c      	ldr	r3, [pc, #496]	; (801b594 <ip4_reass+0x28c>)
 801b3a4:	881b      	ldrh	r3, [r3, #0]
 801b3a6:	461a      	mov	r2, r3
 801b3a8:	8c3b      	ldrh	r3, [r7, #32]
 801b3aa:	4413      	add	r3, r2
 801b3ac:	2b0a      	cmp	r3, #10
 801b3ae:	dd15      	ble.n	801b3dc <ip4_reass+0xd4>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801b3b0:	8c3b      	ldrh	r3, [r7, #32]
 801b3b2:	4619      	mov	r1, r3
 801b3b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b3b6:	f7ff fd6b 	bl	801ae90 <ip_reass_remove_oldest_datagram>
 801b3ba:	4603      	mov	r3, r0
 801b3bc:	2b00      	cmp	r3, #0
 801b3be:	d006      	beq.n	801b3ce <ip4_reass+0xc6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801b3c0:	4b74      	ldr	r3, [pc, #464]	; (801b594 <ip4_reass+0x28c>)
 801b3c2:	881b      	ldrh	r3, [r3, #0]
 801b3c4:	461a      	mov	r2, r3
 801b3c6:	8c3b      	ldrh	r3, [r7, #32]
 801b3c8:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801b3ca:	2b0a      	cmp	r3, #10
 801b3cc:	dd06      	ble.n	801b3dc <ip4_reass+0xd4>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
                                   ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 801b3ce:	4b70      	ldr	r3, [pc, #448]	; (801b590 <ip4_reass+0x288>)
 801b3d0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b3d2:	3301      	adds	r3, #1
 801b3d4:	b29a      	uxth	r2, r3
 801b3d6:	4b6e      	ldr	r3, [pc, #440]	; (801b590 <ip4_reass+0x288>)
 801b3d8:	879a      	strh	r2, [r3, #60]	; 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 801b3da:	e131      	b.n	801b640 <ip4_reass+0x338>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801b3dc:	4b6e      	ldr	r3, [pc, #440]	; (801b598 <ip4_reass+0x290>)
 801b3de:	681b      	ldr	r3, [r3, #0]
 801b3e0:	633b      	str	r3, [r7, #48]	; 0x30
 801b3e2:	e01e      	b.n	801b422 <ip4_reass+0x11a>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801b3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b3e6:	695a      	ldr	r2, [r3, #20]
 801b3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b3ea:	68db      	ldr	r3, [r3, #12]
 801b3ec:	429a      	cmp	r2, r3
 801b3ee:	d115      	bne.n	801b41c <ip4_reass+0x114>
 801b3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b3f2:	699a      	ldr	r2, [r3, #24]
 801b3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b3f6:	691b      	ldr	r3, [r3, #16]
 801b3f8:	429a      	cmp	r2, r3
 801b3fa:	d10f      	bne.n	801b41c <ip4_reass+0x114>
 801b3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b3fe:	899a      	ldrh	r2, [r3, #12]
 801b400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b402:	889b      	ldrh	r3, [r3, #4]
 801b404:	b29b      	uxth	r3, r3
 801b406:	429a      	cmp	r2, r3
 801b408:	d108      	bne.n	801b41c <ip4_reass+0x114>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 801b40a:	4b61      	ldr	r3, [pc, #388]	; (801b590 <ip4_reass+0x288>)
 801b40c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801b410:	3301      	adds	r3, #1
 801b412:	b29a      	uxth	r2, r3
 801b414:	4b5e      	ldr	r3, [pc, #376]	; (801b590 <ip4_reass+0x288>)
 801b416:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      break;
 801b41a:	e005      	b.n	801b428 <ip4_reass+0x120>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801b41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b41e:	681b      	ldr	r3, [r3, #0]
 801b420:	633b      	str	r3, [r7, #48]	; 0x30
 801b422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b424:	2b00      	cmp	r3, #0
 801b426:	d1dd      	bne.n	801b3e4 <ip4_reass+0xdc>
    }
  }

  if (ipr == NULL) {
 801b428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b42a:	2b00      	cmp	r3, #0
 801b42c:	d109      	bne.n	801b442 <ip4_reass+0x13a>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801b42e:	8c3b      	ldrh	r3, [r7, #32]
 801b430:	4619      	mov	r1, r3
 801b432:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b434:	f7ff fd8e 	bl	801af54 <ip_reass_enqueue_new_datagram>
 801b438:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801b43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b43c:	2b00      	cmp	r3, #0
 801b43e:	d11c      	bne.n	801b47a <ip4_reass+0x172>
      goto nullreturn;
 801b440:	e0fe      	b.n	801b640 <ip4_reass+0x338>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801b442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b444:	88db      	ldrh	r3, [r3, #6]
 801b446:	b29b      	uxth	r3, r3
 801b448:	4618      	mov	r0, r3
 801b44a:	f7f1 fa99 	bl	800c980 <lwip_htons>
 801b44e:	4603      	mov	r3, r0
 801b450:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b454:	2b00      	cmp	r3, #0
 801b456:	d110      	bne.n	801b47a <ip4_reass+0x172>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801b458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b45a:	89db      	ldrh	r3, [r3, #14]
 801b45c:	4618      	mov	r0, r3
 801b45e:	f7f1 fa8f 	bl	800c980 <lwip_htons>
 801b462:	4603      	mov	r3, r0
 801b464:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801b468:	2b00      	cmp	r3, #0
 801b46a:	d006      	beq.n	801b47a <ip4_reass+0x172>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801b46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b46e:	3308      	adds	r3, #8
 801b470:	2214      	movs	r2, #20
 801b472:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801b474:	4618      	mov	r0, r3
 801b476:	f004 fef1 	bl	802025c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801b47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b47c:	88db      	ldrh	r3, [r3, #6]
 801b47e:	b29b      	uxth	r3, r3
 801b480:	f003 0320 	and.w	r3, r3, #32
 801b484:	2b00      	cmp	r3, #0
 801b486:	bf0c      	ite	eq
 801b488:	2301      	moveq	r3, #1
 801b48a:	2300      	movne	r3, #0
 801b48c:	b2db      	uxtb	r3, r3
 801b48e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801b490:	69fb      	ldr	r3, [r7, #28]
 801b492:	2b00      	cmp	r3, #0
 801b494:	d00e      	beq.n	801b4b4 <ip4_reass+0x1ac>
    u16_t datagram_len = (u16_t)(offset + len);
 801b496:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801b498:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b49a:	4413      	add	r3, r2
 801b49c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801b49e:	8b7a      	ldrh	r2, [r7, #26]
 801b4a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b4a2:	429a      	cmp	r2, r3
 801b4a4:	f0c0 80a7 	bcc.w	801b5f6 <ip4_reass+0x2ee>
 801b4a8:	8b7b      	ldrh	r3, [r7, #26]
 801b4aa:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801b4ae:	4293      	cmp	r3, r2
 801b4b0:	f200 80a1 	bhi.w	801b5f6 <ip4_reass+0x2ee>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801b4b4:	69fa      	ldr	r2, [r7, #28]
 801b4b6:	6879      	ldr	r1, [r7, #4]
 801b4b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b4ba:	f7ff fdbb 	bl	801b034 <ip_reass_chain_frag_into_datagram_and_validate>
 801b4be:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801b4c0:	697b      	ldr	r3, [r7, #20]
 801b4c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b4c6:	f000 8098 	beq.w	801b5fa <ip4_reass+0x2f2>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801b4ca:	4b32      	ldr	r3, [pc, #200]	; (801b594 <ip4_reass+0x28c>)
 801b4cc:	881a      	ldrh	r2, [r3, #0]
 801b4ce:	8c3b      	ldrh	r3, [r7, #32]
 801b4d0:	4413      	add	r3, r2
 801b4d2:	b29a      	uxth	r2, r3
 801b4d4:	4b2f      	ldr	r3, [pc, #188]	; (801b594 <ip4_reass+0x28c>)
 801b4d6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801b4d8:	69fb      	ldr	r3, [r7, #28]
 801b4da:	2b00      	cmp	r3, #0
 801b4dc:	d00d      	beq.n	801b4fa <ip4_reass+0x1f2>
    u16_t datagram_len = (u16_t)(offset + len);
 801b4de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801b4e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b4e2:	4413      	add	r3, r2
 801b4e4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801b4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b4e8:	8a7a      	ldrh	r2, [r7, #18]
 801b4ea:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801b4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b4ee:	7f9b      	ldrb	r3, [r3, #30]
 801b4f0:	f043 0301 	orr.w	r3, r3, #1
 801b4f4:	b2da      	uxtb	r2, r3
 801b4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b4f8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801b4fa:	697b      	ldr	r3, [r7, #20]
 801b4fc:	2b01      	cmp	r3, #1
 801b4fe:	d178      	bne.n	801b5f2 <ip4_reass+0x2ea>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801b500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b502:	8b9b      	ldrh	r3, [r3, #28]
 801b504:	3314      	adds	r3, #20
 801b506:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801b508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b50a:	685b      	ldr	r3, [r3, #4]
 801b50c:	685b      	ldr	r3, [r3, #4]
 801b50e:	681b      	ldr	r3, [r3, #0]
 801b510:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801b512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b514:	685b      	ldr	r3, [r3, #4]
 801b516:	685b      	ldr	r3, [r3, #4]
 801b518:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801b51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b51c:	3308      	adds	r3, #8
 801b51e:	2214      	movs	r2, #20
 801b520:	4619      	mov	r1, r3
 801b522:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b524:	f004 fe9a 	bl	802025c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801b528:	8a3b      	ldrh	r3, [r7, #16]
 801b52a:	4618      	mov	r0, r3
 801b52c:	f7f1 fa28 	bl	800c980 <lwip_htons>
 801b530:	4603      	mov	r3, r0
 801b532:	461a      	mov	r2, r3
 801b534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b536:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801b538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b53a:	2200      	movs	r2, #0
 801b53c:	719a      	strb	r2, [r3, #6]
 801b53e:	2200      	movs	r2, #0
 801b540:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801b542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b544:	2200      	movs	r2, #0
 801b546:	729a      	strb	r2, [r3, #10]
 801b548:	2200      	movs	r2, #0
 801b54a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801b54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b54e:	685b      	ldr	r3, [r3, #4]
 801b550:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801b552:	e00d      	b.n	801b570 <ip4_reass+0x268>
      iprh = (struct ip_reass_helper *)r->payload;
 801b554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b556:	685b      	ldr	r3, [r3, #4]
 801b558:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801b55a:	2114      	movs	r1, #20
 801b55c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b55e:	f7f3 fb11 	bl	800eb84 <pbuf_remove_header>
      pbuf_cat(p, r);
 801b562:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b564:	6878      	ldr	r0, [r7, #4]
 801b566:	f7f3 fc61 	bl	800ee2c <pbuf_cat>
      r = iprh->next_pbuf;
 801b56a:	68fb      	ldr	r3, [r7, #12]
 801b56c:	681b      	ldr	r3, [r3, #0]
 801b56e:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (r != NULL) {
 801b570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b572:	2b00      	cmp	r3, #0
 801b574:	d1ee      	bne.n	801b554 <ip4_reass+0x24c>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801b576:	4b08      	ldr	r3, [pc, #32]	; (801b598 <ip4_reass+0x290>)
 801b578:	681b      	ldr	r3, [r3, #0]
 801b57a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b57c:	429a      	cmp	r2, r3
 801b57e:	d102      	bne.n	801b586 <ip4_reass+0x27e>
      ipr_prev = NULL;
 801b580:	2300      	movs	r3, #0
 801b582:	637b      	str	r3, [r7, #52]	; 0x34
 801b584:	e017      	b.n	801b5b6 <ip4_reass+0x2ae>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801b586:	4b04      	ldr	r3, [pc, #16]	; (801b598 <ip4_reass+0x290>)
 801b588:	681b      	ldr	r3, [r3, #0]
 801b58a:	637b      	str	r3, [r7, #52]	; 0x34
 801b58c:	e00e      	b.n	801b5ac <ip4_reass+0x2a4>
 801b58e:	bf00      	nop
 801b590:	2000a3ec 	.word	0x2000a3ec
 801b594:	2000699c 	.word	0x2000699c
 801b598:	20006998 	.word	0x20006998
        if (ipr_prev->next == ipr) {
 801b59c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b59e:	681b      	ldr	r3, [r3, #0]
 801b5a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b5a2:	429a      	cmp	r2, r3
 801b5a4:	d006      	beq.n	801b5b4 <ip4_reass+0x2ac>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801b5a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b5a8:	681b      	ldr	r3, [r3, #0]
 801b5aa:	637b      	str	r3, [r7, #52]	; 0x34
 801b5ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b5ae:	2b00      	cmp	r3, #0
 801b5b0:	d1f4      	bne.n	801b59c <ip4_reass+0x294>
 801b5b2:	e000      	b.n	801b5b6 <ip4_reass+0x2ae>
          break;
 801b5b4:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801b5b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801b5b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b5ba:	f7ff fd0d 	bl	801afd8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801b5be:	6878      	ldr	r0, [r7, #4]
 801b5c0:	f7f3 fbf4 	bl	800edac <pbuf_clen>
 801b5c4:	4603      	mov	r3, r0
 801b5c6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801b5c8:	4b24      	ldr	r3, [pc, #144]	; (801b65c <ip4_reass+0x354>)
 801b5ca:	881b      	ldrh	r3, [r3, #0]
 801b5cc:	8c3a      	ldrh	r2, [r7, #32]
 801b5ce:	429a      	cmp	r2, r3
 801b5d0:	d906      	bls.n	801b5e0 <ip4_reass+0x2d8>
 801b5d2:	4b23      	ldr	r3, [pc, #140]	; (801b660 <ip4_reass+0x358>)
 801b5d4:	f240 229b 	movw	r2, #667	; 0x29b
 801b5d8:	4922      	ldr	r1, [pc, #136]	; (801b664 <ip4_reass+0x35c>)
 801b5da:	4823      	ldr	r0, [pc, #140]	; (801b668 <ip4_reass+0x360>)
 801b5dc:	f004 fefe 	bl	80203dc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801b5e0:	4b1e      	ldr	r3, [pc, #120]	; (801b65c <ip4_reass+0x354>)
 801b5e2:	881a      	ldrh	r2, [r3, #0]
 801b5e4:	8c3b      	ldrh	r3, [r7, #32]
 801b5e6:	1ad3      	subs	r3, r2, r3
 801b5e8:	b29a      	uxth	r2, r3
 801b5ea:	4b1c      	ldr	r3, [pc, #112]	; (801b65c <ip4_reass+0x354>)
 801b5ec:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801b5ee:	687b      	ldr	r3, [r7, #4]
 801b5f0:	e030      	b.n	801b654 <ip4_reass+0x34c>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801b5f2:	2300      	movs	r3, #0
 801b5f4:	e02e      	b.n	801b654 <ip4_reass+0x34c>
      goto nullreturn_ipr;
 801b5f6:	bf00      	nop
 801b5f8:	e000      	b.n	801b5fc <ip4_reass+0x2f4>
    goto nullreturn_ipr;
 801b5fa:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801b5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b5fe:	2b00      	cmp	r3, #0
 801b600:	d106      	bne.n	801b610 <ip4_reass+0x308>
 801b602:	4b17      	ldr	r3, [pc, #92]	; (801b660 <ip4_reass+0x358>)
 801b604:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801b608:	4918      	ldr	r1, [pc, #96]	; (801b66c <ip4_reass+0x364>)
 801b60a:	4817      	ldr	r0, [pc, #92]	; (801b668 <ip4_reass+0x360>)
 801b60c:	f004 fee6 	bl	80203dc <iprintf>
  if (ipr->p == NULL) {
 801b610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b612:	685b      	ldr	r3, [r3, #4]
 801b614:	2b00      	cmp	r3, #0
 801b616:	d112      	bne.n	801b63e <ip4_reass+0x336>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801b618:	4b15      	ldr	r3, [pc, #84]	; (801b670 <ip4_reass+0x368>)
 801b61a:	681b      	ldr	r3, [r3, #0]
 801b61c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b61e:	429a      	cmp	r2, r3
 801b620:	d006      	beq.n	801b630 <ip4_reass+0x328>
 801b622:	4b0f      	ldr	r3, [pc, #60]	; (801b660 <ip4_reass+0x358>)
 801b624:	f240 22ab 	movw	r2, #683	; 0x2ab
 801b628:	4912      	ldr	r1, [pc, #72]	; (801b674 <ip4_reass+0x36c>)
 801b62a:	480f      	ldr	r0, [pc, #60]	; (801b668 <ip4_reass+0x360>)
 801b62c:	f004 fed6 	bl	80203dc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801b630:	2100      	movs	r1, #0
 801b632:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b634:	f7ff fcd0 	bl	801afd8 <ip_reass_dequeue_datagram>
 801b638:	e002      	b.n	801b640 <ip4_reass+0x338>
    goto nullreturn;
 801b63a:	bf00      	nop
 801b63c:	e000      	b.n	801b640 <ip4_reass+0x338>
  }

nullreturn:
 801b63e:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 801b640:	4b0d      	ldr	r3, [pc, #52]	; (801b678 <ip4_reass+0x370>)
 801b642:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801b644:	3301      	adds	r3, #1
 801b646:	b29a      	uxth	r2, r3
 801b648:	4b0b      	ldr	r3, [pc, #44]	; (801b678 <ip4_reass+0x370>)
 801b64a:	86da      	strh	r2, [r3, #54]	; 0x36
  pbuf_free(p);
 801b64c:	6878      	ldr	r0, [r7, #4]
 801b64e:	f7f3 fb1f 	bl	800ec90 <pbuf_free>
  return NULL;
 801b652:	2300      	movs	r3, #0
}
 801b654:	4618      	mov	r0, r3
 801b656:	3738      	adds	r7, #56	; 0x38
 801b658:	46bd      	mov	sp, r7
 801b65a:	bd80      	pop	{r7, pc}
 801b65c:	2000699c 	.word	0x2000699c
 801b660:	08026564 	.word	0x08026564
 801b664:	080266d4 	.word	0x080266d4
 801b668:	080265ac 	.word	0x080265ac
 801b66c:	080266f0 	.word	0x080266f0
 801b670:	20006998 	.word	0x20006998
 801b674:	080266fc 	.word	0x080266fc
 801b678:	2000a3ec 	.word	0x2000a3ec

0801b67c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801b67c:	b580      	push	{r7, lr}
 801b67e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801b680:	2005      	movs	r0, #5
 801b682:	f7f2 facd 	bl	800dc20 <memp_malloc>
 801b686:	4603      	mov	r3, r0
}
 801b688:	4618      	mov	r0, r3
 801b68a:	bd80      	pop	{r7, pc}

0801b68c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801b68c:	b580      	push	{r7, lr}
 801b68e:	b082      	sub	sp, #8
 801b690:	af00      	add	r7, sp, #0
 801b692:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801b694:	687b      	ldr	r3, [r7, #4]
 801b696:	2b00      	cmp	r3, #0
 801b698:	d106      	bne.n	801b6a8 <ip_frag_free_pbuf_custom_ref+0x1c>
 801b69a:	4b07      	ldr	r3, [pc, #28]	; (801b6b8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801b69c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801b6a0:	4906      	ldr	r1, [pc, #24]	; (801b6bc <ip_frag_free_pbuf_custom_ref+0x30>)
 801b6a2:	4807      	ldr	r0, [pc, #28]	; (801b6c0 <ip_frag_free_pbuf_custom_ref+0x34>)
 801b6a4:	f004 fe9a 	bl	80203dc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801b6a8:	6879      	ldr	r1, [r7, #4]
 801b6aa:	2005      	movs	r0, #5
 801b6ac:	f7f2 fb34 	bl	800dd18 <memp_free>
}
 801b6b0:	bf00      	nop
 801b6b2:	3708      	adds	r7, #8
 801b6b4:	46bd      	mov	sp, r7
 801b6b6:	bd80      	pop	{r7, pc}
 801b6b8:	08026564 	.word	0x08026564
 801b6bc:	0802671c 	.word	0x0802671c
 801b6c0:	080265ac 	.word	0x080265ac

0801b6c4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801b6c4:	b580      	push	{r7, lr}
 801b6c6:	b084      	sub	sp, #16
 801b6c8:	af00      	add	r7, sp, #0
 801b6ca:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801b6cc:	687b      	ldr	r3, [r7, #4]
 801b6ce:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801b6d0:	68fb      	ldr	r3, [r7, #12]
 801b6d2:	2b00      	cmp	r3, #0
 801b6d4:	d106      	bne.n	801b6e4 <ipfrag_free_pbuf_custom+0x20>
 801b6d6:	4b11      	ldr	r3, [pc, #68]	; (801b71c <ipfrag_free_pbuf_custom+0x58>)
 801b6d8:	f240 22ce 	movw	r2, #718	; 0x2ce
 801b6dc:	4910      	ldr	r1, [pc, #64]	; (801b720 <ipfrag_free_pbuf_custom+0x5c>)
 801b6de:	4811      	ldr	r0, [pc, #68]	; (801b724 <ipfrag_free_pbuf_custom+0x60>)
 801b6e0:	f004 fe7c 	bl	80203dc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801b6e4:	68fa      	ldr	r2, [r7, #12]
 801b6e6:	687b      	ldr	r3, [r7, #4]
 801b6e8:	429a      	cmp	r2, r3
 801b6ea:	d006      	beq.n	801b6fa <ipfrag_free_pbuf_custom+0x36>
 801b6ec:	4b0b      	ldr	r3, [pc, #44]	; (801b71c <ipfrag_free_pbuf_custom+0x58>)
 801b6ee:	f240 22cf 	movw	r2, #719	; 0x2cf
 801b6f2:	490d      	ldr	r1, [pc, #52]	; (801b728 <ipfrag_free_pbuf_custom+0x64>)
 801b6f4:	480b      	ldr	r0, [pc, #44]	; (801b724 <ipfrag_free_pbuf_custom+0x60>)
 801b6f6:	f004 fe71 	bl	80203dc <iprintf>
  if (pcr->original != NULL) {
 801b6fa:	68fb      	ldr	r3, [r7, #12]
 801b6fc:	695b      	ldr	r3, [r3, #20]
 801b6fe:	2b00      	cmp	r3, #0
 801b700:	d004      	beq.n	801b70c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801b702:	68fb      	ldr	r3, [r7, #12]
 801b704:	695b      	ldr	r3, [r3, #20]
 801b706:	4618      	mov	r0, r3
 801b708:	f7f3 fac2 	bl	800ec90 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801b70c:	68f8      	ldr	r0, [r7, #12]
 801b70e:	f7ff ffbd 	bl	801b68c <ip_frag_free_pbuf_custom_ref>
}
 801b712:	bf00      	nop
 801b714:	3710      	adds	r7, #16
 801b716:	46bd      	mov	sp, r7
 801b718:	bd80      	pop	{r7, pc}
 801b71a:	bf00      	nop
 801b71c:	08026564 	.word	0x08026564
 801b720:	08026728 	.word	0x08026728
 801b724:	080265ac 	.word	0x080265ac
 801b728:	08026734 	.word	0x08026734

0801b72c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801b72c:	b580      	push	{r7, lr}
 801b72e:	b094      	sub	sp, #80	; 0x50
 801b730:	af02      	add	r7, sp, #8
 801b732:	60f8      	str	r0, [r7, #12]
 801b734:	60b9      	str	r1, [r7, #8]
 801b736:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801b738:	2300      	movs	r3, #0
 801b73a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801b73e:	68bb      	ldr	r3, [r7, #8]
 801b740:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801b742:	3b14      	subs	r3, #20
 801b744:	2b00      	cmp	r3, #0
 801b746:	da00      	bge.n	801b74a <ip4_frag+0x1e>
 801b748:	3307      	adds	r3, #7
 801b74a:	10db      	asrs	r3, r3, #3
 801b74c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801b74e:	2314      	movs	r3, #20
 801b750:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801b752:	68fb      	ldr	r3, [r7, #12]
 801b754:	685b      	ldr	r3, [r3, #4]
 801b756:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801b758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b75a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801b75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b75e:	781b      	ldrb	r3, [r3, #0]
 801b760:	f003 030f 	and.w	r3, r3, #15
 801b764:	b2db      	uxtb	r3, r3
 801b766:	009b      	lsls	r3, r3, #2
 801b768:	b2db      	uxtb	r3, r3
 801b76a:	2b14      	cmp	r3, #20
 801b76c:	d002      	beq.n	801b774 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801b76e:	f06f 0305 	mvn.w	r3, #5
 801b772:	e116      	b.n	801b9a2 <ip4_frag+0x276>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801b774:	68fb      	ldr	r3, [r7, #12]
 801b776:	895b      	ldrh	r3, [r3, #10]
 801b778:	2b13      	cmp	r3, #19
 801b77a:	d809      	bhi.n	801b790 <ip4_frag+0x64>
 801b77c:	4b8b      	ldr	r3, [pc, #556]	; (801b9ac <ip4_frag+0x280>)
 801b77e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801b782:	498b      	ldr	r1, [pc, #556]	; (801b9b0 <ip4_frag+0x284>)
 801b784:	488b      	ldr	r0, [pc, #556]	; (801b9b4 <ip4_frag+0x288>)
 801b786:	f004 fe29 	bl	80203dc <iprintf>
 801b78a:	f06f 0305 	mvn.w	r3, #5
 801b78e:	e108      	b.n	801b9a2 <ip4_frag+0x276>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801b790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b792:	88db      	ldrh	r3, [r3, #6]
 801b794:	b29b      	uxth	r3, r3
 801b796:	4618      	mov	r0, r3
 801b798:	f7f1 f8f2 	bl	800c980 <lwip_htons>
 801b79c:	4603      	mov	r3, r0
 801b79e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801b7a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b7a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b7a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801b7aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b7ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b7b0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801b7b2:	68fb      	ldr	r3, [r7, #12]
 801b7b4:	891b      	ldrh	r3, [r3, #8]
 801b7b6:	3b14      	subs	r3, #20
 801b7b8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801b7bc:	e0e7      	b.n	801b98e <ip4_frag+0x262>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801b7be:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b7c0:	00db      	lsls	r3, r3, #3
 801b7c2:	b29b      	uxth	r3, r3
 801b7c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b7c8:	4293      	cmp	r3, r2
 801b7ca:	bf28      	it	cs
 801b7cc:	4613      	movcs	r3, r2
 801b7ce:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801b7d0:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b7d4:	2114      	movs	r1, #20
 801b7d6:	200e      	movs	r0, #14
 801b7d8:	f7f2 ff76 	bl	800e6c8 <pbuf_alloc>
 801b7dc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801b7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7e0:	2b00      	cmp	r3, #0
 801b7e2:	f000 80db 	beq.w	801b99c <ip4_frag+0x270>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801b7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7e8:	895b      	ldrh	r3, [r3, #10]
 801b7ea:	2b13      	cmp	r3, #19
 801b7ec:	d806      	bhi.n	801b7fc <ip4_frag+0xd0>
 801b7ee:	4b6f      	ldr	r3, [pc, #444]	; (801b9ac <ip4_frag+0x280>)
 801b7f0:	f44f 7249 	mov.w	r2, #804	; 0x324
 801b7f4:	4970      	ldr	r1, [pc, #448]	; (801b9b8 <ip4_frag+0x28c>)
 801b7f6:	486f      	ldr	r0, [pc, #444]	; (801b9b4 <ip4_frag+0x288>)
 801b7f8:	f004 fdf0 	bl	80203dc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801b7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7fe:	685b      	ldr	r3, [r3, #4]
 801b800:	2214      	movs	r2, #20
 801b802:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801b804:	4618      	mov	r0, r3
 801b806:	f004 fd29 	bl	802025c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801b80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b80c:	685b      	ldr	r3, [r3, #4]
 801b80e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801b810:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b812:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801b816:	e064      	b.n	801b8e2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801b818:	68fb      	ldr	r3, [r7, #12]
 801b81a:	895a      	ldrh	r2, [r3, #10]
 801b81c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b81e:	1ad3      	subs	r3, r2, r3
 801b820:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801b822:	68fb      	ldr	r3, [r7, #12]
 801b824:	895b      	ldrh	r3, [r3, #10]
 801b826:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801b828:	429a      	cmp	r2, r3
 801b82a:	d906      	bls.n	801b83a <ip4_frag+0x10e>
 801b82c:	4b5f      	ldr	r3, [pc, #380]	; (801b9ac <ip4_frag+0x280>)
 801b82e:	f240 322d 	movw	r2, #813	; 0x32d
 801b832:	4962      	ldr	r1, [pc, #392]	; (801b9bc <ip4_frag+0x290>)
 801b834:	485f      	ldr	r0, [pc, #380]	; (801b9b4 <ip4_frag+0x288>)
 801b836:	f004 fdd1 	bl	80203dc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801b83a:	8bfa      	ldrh	r2, [r7, #30]
 801b83c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801b840:	4293      	cmp	r3, r2
 801b842:	bf28      	it	cs
 801b844:	4613      	movcs	r3, r2
 801b846:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801b84a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801b84e:	2b00      	cmp	r3, #0
 801b850:	d105      	bne.n	801b85e <ip4_frag+0x132>
        poff = 0;
 801b852:	2300      	movs	r3, #0
 801b854:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801b856:	68fb      	ldr	r3, [r7, #12]
 801b858:	681b      	ldr	r3, [r3, #0]
 801b85a:	60fb      	str	r3, [r7, #12]
        continue;
 801b85c:	e041      	b.n	801b8e2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801b85e:	f7ff ff0d 	bl	801b67c <ip_frag_alloc_pbuf_custom_ref>
 801b862:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801b864:	69bb      	ldr	r3, [r7, #24]
 801b866:	2b00      	cmp	r3, #0
 801b868:	d103      	bne.n	801b872 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801b86a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b86c:	f7f3 fa10 	bl	800ec90 <pbuf_free>
        goto memerr;
 801b870:	e095      	b.n	801b99e <ip4_frag+0x272>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b872:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801b874:	68fb      	ldr	r3, [r7, #12]
 801b876:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b878:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b87a:	4413      	add	r3, r2
 801b87c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801b880:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801b884:	9201      	str	r2, [sp, #4]
 801b886:	9300      	str	r3, [sp, #0]
 801b888:	4603      	mov	r3, r0
 801b88a:	2241      	movs	r2, #65	; 0x41
 801b88c:	2000      	movs	r0, #0
 801b88e:	f7f3 f845 	bl	800e91c <pbuf_alloced_custom>
 801b892:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801b894:	697b      	ldr	r3, [r7, #20]
 801b896:	2b00      	cmp	r3, #0
 801b898:	d106      	bne.n	801b8a8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801b89a:	69b8      	ldr	r0, [r7, #24]
 801b89c:	f7ff fef6 	bl	801b68c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801b8a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b8a2:	f7f3 f9f5 	bl	800ec90 <pbuf_free>
        goto memerr;
 801b8a6:	e07a      	b.n	801b99e <ip4_frag+0x272>
      }
      pbuf_ref(p);
 801b8a8:	68f8      	ldr	r0, [r7, #12]
 801b8aa:	f7f3 fa97 	bl	800eddc <pbuf_ref>
      pcr->original = p;
 801b8ae:	69bb      	ldr	r3, [r7, #24]
 801b8b0:	68fa      	ldr	r2, [r7, #12]
 801b8b2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801b8b4:	69bb      	ldr	r3, [r7, #24]
 801b8b6:	4a42      	ldr	r2, [pc, #264]	; (801b9c0 <ip4_frag+0x294>)
 801b8b8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801b8ba:	6979      	ldr	r1, [r7, #20]
 801b8bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b8be:	f7f3 fab5 	bl	800ee2c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801b8c2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801b8c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801b8ca:	1ad3      	subs	r3, r2, r3
 801b8cc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801b8d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801b8d4:	2b00      	cmp	r3, #0
 801b8d6:	d004      	beq.n	801b8e2 <ip4_frag+0x1b6>
        poff = 0;
 801b8d8:	2300      	movs	r3, #0
 801b8da:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801b8dc:	68fb      	ldr	r3, [r7, #12]
 801b8de:	681b      	ldr	r3, [r3, #0]
 801b8e0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801b8e2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801b8e6:	2b00      	cmp	r3, #0
 801b8e8:	d196      	bne.n	801b818 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801b8ea:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801b8ec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801b8f0:	4413      	add	r3, r2
 801b8f2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801b8f4:	68bb      	ldr	r3, [r7, #8]
 801b8f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801b8f8:	f1a3 0213 	sub.w	r2, r3, #19
 801b8fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b900:	429a      	cmp	r2, r3
 801b902:	bfcc      	ite	gt
 801b904:	2301      	movgt	r3, #1
 801b906:	2300      	movle	r3, #0
 801b908:	b2db      	uxtb	r3, r3
 801b90a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801b90c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801b910:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b914:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801b916:	6a3b      	ldr	r3, [r7, #32]
 801b918:	2b00      	cmp	r3, #0
 801b91a:	d002      	beq.n	801b922 <ip4_frag+0x1f6>
 801b91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b91e:	2b00      	cmp	r3, #0
 801b920:	d003      	beq.n	801b92a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801b922:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b924:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801b928:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801b92a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b92c:	4618      	mov	r0, r3
 801b92e:	f7f1 f827 	bl	800c980 <lwip_htons>
 801b932:	4603      	mov	r3, r0
 801b934:	461a      	mov	r2, r3
 801b936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b938:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801b93a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b93c:	3314      	adds	r3, #20
 801b93e:	b29b      	uxth	r3, r3
 801b940:	4618      	mov	r0, r3
 801b942:	f7f1 f81d 	bl	800c980 <lwip_htons>
 801b946:	4603      	mov	r3, r0
 801b948:	461a      	mov	r2, r3
 801b94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b94c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801b94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b950:	2200      	movs	r2, #0
 801b952:	729a      	strb	r2, [r3, #10]
 801b954:	2200      	movs	r2, #0
 801b956:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801b958:	68bb      	ldr	r3, [r7, #8]
 801b95a:	695b      	ldr	r3, [r3, #20]
 801b95c:	687a      	ldr	r2, [r7, #4]
 801b95e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b960:	68b8      	ldr	r0, [r7, #8]
 801b962:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 801b964:	4b17      	ldr	r3, [pc, #92]	; (801b9c4 <ip4_frag+0x298>)
 801b966:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801b968:	3301      	adds	r3, #1
 801b96a:	b29a      	uxth	r2, r3
 801b96c:	4b15      	ldr	r3, [pc, #84]	; (801b9c4 <ip4_frag+0x298>)
 801b96e:	861a      	strh	r2, [r3, #48]	; 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801b970:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b972:	f7f3 f98d 	bl	800ec90 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801b976:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b97a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b97c:	1ad3      	subs	r3, r2, r3
 801b97e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801b982:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801b986:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b988:	4413      	add	r3, r2
 801b98a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801b98e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b992:	2b00      	cmp	r3, #0
 801b994:	f47f af13 	bne.w	801b7be <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801b998:	2300      	movs	r3, #0
 801b99a:	e002      	b.n	801b9a2 <ip4_frag+0x276>
      goto memerr;
 801b99c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801b99e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b9a2:	4618      	mov	r0, r3
 801b9a4:	3748      	adds	r7, #72	; 0x48
 801b9a6:	46bd      	mov	sp, r7
 801b9a8:	bd80      	pop	{r7, pc}
 801b9aa:	bf00      	nop
 801b9ac:	08026564 	.word	0x08026564
 801b9b0:	08026740 	.word	0x08026740
 801b9b4:	080265ac 	.word	0x080265ac
 801b9b8:	0802675c 	.word	0x0802675c
 801b9bc:	0802677c 	.word	0x0802677c
 801b9c0:	0801b6c5 	.word	0x0801b6c5
 801b9c4:	2000a3ec 	.word	0x2000a3ec

0801b9c8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801b9c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b9cc:	b096      	sub	sp, #88	; 0x58
 801b9ce:	af0a      	add	r7, sp, #40	; 0x28
 801b9d0:	61f8      	str	r0, [r7, #28]
 801b9d2:	61b9      	str	r1, [r7, #24]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801b9d4:	230e      	movs	r3, #14
 801b9d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801b9d8:	69fb      	ldr	r3, [r7, #28]
 801b9da:	895b      	ldrh	r3, [r3, #10]
 801b9dc:	2b0e      	cmp	r3, #14
 801b9de:	d80c      	bhi.n	801b9fa <ethernet_input+0x32>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 801b9e0:	4b7c      	ldr	r3, [pc, #496]	; (801bbd4 <ethernet_input+0x20c>)
 801b9e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b9e4:	3301      	adds	r3, #1
 801b9e6:	b29a      	uxth	r2, r3
 801b9e8:	4b7a      	ldr	r3, [pc, #488]	; (801bbd4 <ethernet_input+0x20c>)
 801b9ea:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 801b9ec:	4b79      	ldr	r3, [pc, #484]	; (801bbd4 <ethernet_input+0x20c>)
 801b9ee:	8bdb      	ldrh	r3, [r3, #30]
 801b9f0:	3301      	adds	r3, #1
 801b9f2:	b29a      	uxth	r2, r3
 801b9f4:	4b77      	ldr	r3, [pc, #476]	; (801bbd4 <ethernet_input+0x20c>)
 801b9f6:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
 801b9f8:	e0e3      	b.n	801bbc2 <ethernet_input+0x1fa>
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801b9fa:	69fb      	ldr	r3, [r7, #28]
 801b9fc:	7bdb      	ldrb	r3, [r3, #15]
 801b9fe:	2b00      	cmp	r3, #0
 801ba00:	d106      	bne.n	801ba10 <ethernet_input+0x48>
    p->if_idx = netif_get_index(netif);
 801ba02:	69bb      	ldr	r3, [r7, #24]
 801ba04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801ba08:	3301      	adds	r3, #1
 801ba0a:	b2da      	uxtb	r2, r3
 801ba0c:	69fb      	ldr	r3, [r7, #28]
 801ba0e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801ba10:	69fb      	ldr	r3, [r7, #28]
 801ba12:	685b      	ldr	r3, [r3, #4]
 801ba14:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
 801ba16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba18:	781b      	ldrb	r3, [r3, #0]
 801ba1a:	4698      	mov	r8, r3
 801ba1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba1e:	785b      	ldrb	r3, [r3, #1]
 801ba20:	4699      	mov	r9, r3
 801ba22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba24:	789b      	ldrb	r3, [r3, #2]
 801ba26:	469a      	mov	sl, r3
 801ba28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba2a:	78db      	ldrb	r3, [r3, #3]
 801ba2c:	461c      	mov	r4, r3
 801ba2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba30:	791b      	ldrb	r3, [r3, #4]
 801ba32:	461d      	mov	r5, r3
 801ba34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba36:	795b      	ldrb	r3, [r3, #5]
 801ba38:	461e      	mov	r6, r3
 801ba3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba3c:	799b      	ldrb	r3, [r3, #6]
 801ba3e:	617b      	str	r3, [r7, #20]
 801ba40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba42:	79db      	ldrb	r3, [r3, #7]
 801ba44:	613b      	str	r3, [r7, #16]
 801ba46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba48:	7a1b      	ldrb	r3, [r3, #8]
 801ba4a:	60fb      	str	r3, [r7, #12]
 801ba4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba4e:	7a5b      	ldrb	r3, [r3, #9]
 801ba50:	60bb      	str	r3, [r7, #8]
 801ba52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba54:	7a9b      	ldrb	r3, [r3, #10]
 801ba56:	607b      	str	r3, [r7, #4]
 801ba58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba5a:	7adb      	ldrb	r3, [r3, #11]
 801ba5c:	603b      	str	r3, [r7, #0]
 801ba5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba60:	899b      	ldrh	r3, [r3, #12]
 801ba62:	b29b      	uxth	r3, r3
 801ba64:	4618      	mov	r0, r3
 801ba66:	f7f0 ff8b 	bl	800c980 <lwip_htons>
 801ba6a:	4603      	mov	r3, r0
 801ba6c:	9309      	str	r3, [sp, #36]	; 0x24
 801ba6e:	683a      	ldr	r2, [r7, #0]
 801ba70:	9208      	str	r2, [sp, #32]
 801ba72:	687a      	ldr	r2, [r7, #4]
 801ba74:	9207      	str	r2, [sp, #28]
 801ba76:	68ba      	ldr	r2, [r7, #8]
 801ba78:	9206      	str	r2, [sp, #24]
 801ba7a:	68fa      	ldr	r2, [r7, #12]
 801ba7c:	9205      	str	r2, [sp, #20]
 801ba7e:	693a      	ldr	r2, [r7, #16]
 801ba80:	9204      	str	r2, [sp, #16]
 801ba82:	697b      	ldr	r3, [r7, #20]
 801ba84:	9303      	str	r3, [sp, #12]
 801ba86:	9602      	str	r6, [sp, #8]
 801ba88:	9501      	str	r5, [sp, #4]
 801ba8a:	9400      	str	r4, [sp, #0]
 801ba8c:	4653      	mov	r3, sl
 801ba8e:	464a      	mov	r2, r9
 801ba90:	4641      	mov	r1, r8
 801ba92:	4851      	ldr	r0, [pc, #324]	; (801bbd8 <ethernet_input+0x210>)
 801ba94:	f004 fca2 	bl	80203dc <iprintf>
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801ba98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba9a:	7b1a      	ldrb	r2, [r3, #12]
 801ba9c:	7b5b      	ldrb	r3, [r3, #13]
 801ba9e:	021b      	lsls	r3, r3, #8
 801baa0:	4313      	orrs	r3, r2
 801baa2:	84fb      	strh	r3, [r7, #38]	; 0x26

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801baa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801baa6:	781b      	ldrb	r3, [r3, #0]
 801baa8:	f003 0301 	and.w	r3, r3, #1
 801baac:	2b00      	cmp	r3, #0
 801baae:	d023      	beq.n	801baf8 <ethernet_input+0x130>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801bab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bab2:	781b      	ldrb	r3, [r3, #0]
 801bab4:	2b01      	cmp	r3, #1
 801bab6:	d10f      	bne.n	801bad8 <ethernet_input+0x110>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801bab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801baba:	785b      	ldrb	r3, [r3, #1]
 801babc:	2b00      	cmp	r3, #0
 801babe:	d11b      	bne.n	801baf8 <ethernet_input+0x130>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801bac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bac2:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801bac4:	2b5e      	cmp	r3, #94	; 0x5e
 801bac6:	d117      	bne.n	801baf8 <ethernet_input+0x130>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801bac8:	69fb      	ldr	r3, [r7, #28]
 801baca:	7b5b      	ldrb	r3, [r3, #13]
 801bacc:	f043 0310 	orr.w	r3, r3, #16
 801bad0:	b2da      	uxtb	r2, r3
 801bad2:	69fb      	ldr	r3, [r7, #28]
 801bad4:	735a      	strb	r2, [r3, #13]
 801bad6:	e00f      	b.n	801baf8 <ethernet_input+0x130>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801bad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bada:	2206      	movs	r2, #6
 801badc:	493f      	ldr	r1, [pc, #252]	; (801bbdc <ethernet_input+0x214>)
 801bade:	4618      	mov	r0, r3
 801bae0:	f004 fbae 	bl	8020240 <memcmp>
 801bae4:	4603      	mov	r3, r0
 801bae6:	2b00      	cmp	r3, #0
 801bae8:	d106      	bne.n	801baf8 <ethernet_input+0x130>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801baea:	69fb      	ldr	r3, [r7, #28]
 801baec:	7b5b      	ldrb	r3, [r3, #13]
 801baee:	f043 0308 	orr.w	r3, r3, #8
 801baf2:	b2da      	uxtb	r2, r3
 801baf4:	69fb      	ldr	r3, [r7, #28]
 801baf6:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801baf8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801bafa:	2b08      	cmp	r3, #8
 801bafc:	d003      	beq.n	801bb06 <ethernet_input+0x13e>
 801bafe:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801bb02:	d020      	beq.n	801bb46 <ethernet_input+0x17e>
 801bb04:	e04b      	b.n	801bb9e <ethernet_input+0x1d6>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801bb06:	69bb      	ldr	r3, [r7, #24]
 801bb08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801bb0c:	f003 0308 	and.w	r3, r3, #8
 801bb10:	2b00      	cmp	r3, #0
 801bb12:	d053      	beq.n	801bbbc <ethernet_input+0x1f4>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801bb14:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801bb16:	4619      	mov	r1, r3
 801bb18:	69f8      	ldr	r0, [r7, #28]
 801bb1a:	f7f3 f833 	bl	800eb84 <pbuf_remove_header>
 801bb1e:	4603      	mov	r3, r0
 801bb20:	2b00      	cmp	r3, #0
 801bb22:	d00b      	beq.n	801bb3c <ethernet_input+0x174>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 801bb24:	69fb      	ldr	r3, [r7, #28]
 801bb26:	891b      	ldrh	r3, [r3, #8]
 801bb28:	4619      	mov	r1, r3
 801bb2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801bb2c:	461a      	mov	r2, r3
 801bb2e:	482c      	ldr	r0, [pc, #176]	; (801bbe0 <ethernet_input+0x218>)
 801bb30:	f004 fc54 	bl	80203dc <iprintf>
                    ("ethernet_input: IPv4 packet dropped, too short (%"U16_F"/%"U16_F")\n",
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
 801bb34:	482b      	ldr	r0, [pc, #172]	; (801bbe4 <ethernet_input+0x21c>)
 801bb36:	f004 fc51 	bl	80203dc <iprintf>
        goto free_and_return;
 801bb3a:	e042      	b.n	801bbc2 <ethernet_input+0x1fa>
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 801bb3c:	69b9      	ldr	r1, [r7, #24]
 801bb3e:	69f8      	ldr	r0, [r7, #28]
 801bb40:	f7fe fa9a 	bl	801a078 <ip4_input>
      }
      break;
 801bb44:	e038      	b.n	801bbb8 <ethernet_input+0x1f0>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801bb46:	69bb      	ldr	r3, [r7, #24]
 801bb48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801bb4c:	f003 0308 	and.w	r3, r3, #8
 801bb50:	2b00      	cmp	r3, #0
 801bb52:	d035      	beq.n	801bbc0 <ethernet_input+0x1f8>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801bb54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801bb56:	4619      	mov	r1, r3
 801bb58:	69f8      	ldr	r0, [r7, #28]
 801bb5a:	f7f3 f813 	bl	800eb84 <pbuf_remove_header>
 801bb5e:	4603      	mov	r3, r0
 801bb60:	2b00      	cmp	r3, #0
 801bb62:	d017      	beq.n	801bb94 <ethernet_input+0x1cc>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 801bb64:	69fb      	ldr	r3, [r7, #28]
 801bb66:	891b      	ldrh	r3, [r3, #8]
 801bb68:	4619      	mov	r1, r3
 801bb6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801bb6c:	461a      	mov	r2, r3
 801bb6e:	481e      	ldr	r0, [pc, #120]	; (801bbe8 <ethernet_input+0x220>)
 801bb70:	f004 fc34 	bl	80203dc <iprintf>
                    ("ethernet_input: ARP response packet dropped, too short (%"U16_F"/%"U16_F")\n",
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
 801bb74:	481b      	ldr	r0, [pc, #108]	; (801bbe4 <ethernet_input+0x21c>)
 801bb76:	f004 fc31 	bl	80203dc <iprintf>
        ETHARP_STATS_INC(etharp.lenerr);
 801bb7a:	4b16      	ldr	r3, [pc, #88]	; (801bbd4 <ethernet_input+0x20c>)
 801bb7c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801bb7e:	3301      	adds	r3, #1
 801bb80:	b29a      	uxth	r2, r3
 801bb82:	4b14      	ldr	r3, [pc, #80]	; (801bbd4 <ethernet_input+0x20c>)
 801bb84:	845a      	strh	r2, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
 801bb86:	4b13      	ldr	r3, [pc, #76]	; (801bbd4 <ethernet_input+0x20c>)
 801bb88:	8bdb      	ldrh	r3, [r3, #30]
 801bb8a:	3301      	adds	r3, #1
 801bb8c:	b29a      	uxth	r2, r3
 801bb8e:	4b11      	ldr	r3, [pc, #68]	; (801bbd4 <ethernet_input+0x20c>)
 801bb90:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 801bb92:	e016      	b.n	801bbc2 <ethernet_input+0x1fa>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
 801bb94:	69b9      	ldr	r1, [r7, #24]
 801bb96:	69f8      	ldr	r0, [r7, #28]
 801bb98:	f7fc fd82 	bl	80186a0 <etharp_input>
      }
      break;
 801bb9c:	e00c      	b.n	801bbb8 <ethernet_input+0x1f0>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if (LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 801bb9e:	4b0d      	ldr	r3, [pc, #52]	; (801bbd4 <ethernet_input+0x20c>)
 801bba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801bba2:	3301      	adds	r3, #1
 801bba4:	b29a      	uxth	r2, r3
 801bba6:	4b0b      	ldr	r3, [pc, #44]	; (801bbd4 <ethernet_input+0x20c>)
 801bba8:	851a      	strh	r2, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 801bbaa:	4b0a      	ldr	r3, [pc, #40]	; (801bbd4 <ethernet_input+0x20c>)
 801bbac:	8bdb      	ldrh	r3, [r3, #30]
 801bbae:	3301      	adds	r3, #1
 801bbb0:	b29a      	uxth	r2, r3
 801bbb2:	4b08      	ldr	r3, [pc, #32]	; (801bbd4 <ethernet_input+0x20c>)
 801bbb4:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801bbb6:	e004      	b.n	801bbc2 <ethernet_input+0x1fa>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801bbb8:	2300      	movs	r3, #0
 801bbba:	e006      	b.n	801bbca <ethernet_input+0x202>
        goto free_and_return;
 801bbbc:	bf00      	nop
 801bbbe:	e000      	b.n	801bbc2 <ethernet_input+0x1fa>
        goto free_and_return;
 801bbc0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801bbc2:	69f8      	ldr	r0, [r7, #28]
 801bbc4:	f7f3 f864 	bl	800ec90 <pbuf_free>
  return ERR_OK;
 801bbc8:	2300      	movs	r3, #0
}
 801bbca:	4618      	mov	r0, r3
 801bbcc:	3730      	adds	r7, #48	; 0x30
 801bbce:	46bd      	mov	sp, r7
 801bbd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bbd4:	2000a3ec 	.word	0x2000a3ec
 801bbd8:	0802678c 	.word	0x0802678c
 801bbdc:	08026bfc 	.word	0x08026bfc
 801bbe0:	08026808 	.word	0x08026808
 801bbe4:	08026844 	.word	0x08026844
 801bbe8:	08026868 	.word	0x08026868

0801bbec <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801bbec:	b580      	push	{r7, lr}
 801bbee:	b086      	sub	sp, #24
 801bbf0:	af00      	add	r7, sp, #0
 801bbf2:	60f8      	str	r0, [r7, #12]
 801bbf4:	60b9      	str	r1, [r7, #8]
 801bbf6:	607a      	str	r2, [r7, #4]
 801bbf8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801bbfa:	8c3b      	ldrh	r3, [r7, #32]
 801bbfc:	4618      	mov	r0, r3
 801bbfe:	f7f0 febf 	bl	800c980 <lwip_htons>
 801bc02:	4603      	mov	r3, r0
 801bc04:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801bc06:	210e      	movs	r1, #14
 801bc08:	68b8      	ldr	r0, [r7, #8]
 801bc0a:	f7f2 ffab 	bl	800eb64 <pbuf_add_header>
 801bc0e:	4603      	mov	r3, r0
 801bc10:	2b00      	cmp	r3, #0
 801bc12:	d129      	bne.n	801bc68 <ethernet_output+0x7c>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801bc14:	68bb      	ldr	r3, [r7, #8]
 801bc16:	685b      	ldr	r3, [r3, #4]
 801bc18:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801bc1a:	693b      	ldr	r3, [r7, #16]
 801bc1c:	8afa      	ldrh	r2, [r7, #22]
 801bc1e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801bc20:	693b      	ldr	r3, [r7, #16]
 801bc22:	2206      	movs	r2, #6
 801bc24:	6839      	ldr	r1, [r7, #0]
 801bc26:	4618      	mov	r0, r3
 801bc28:	f004 fb18 	bl	802025c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801bc2c:	693b      	ldr	r3, [r7, #16]
 801bc2e:	3306      	adds	r3, #6
 801bc30:	2206      	movs	r2, #6
 801bc32:	6879      	ldr	r1, [r7, #4]
 801bc34:	4618      	mov	r0, r3
 801bc36:	f004 fb11 	bl	802025c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801bc3a:	68fb      	ldr	r3, [r7, #12]
 801bc3c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801bc40:	2b06      	cmp	r3, #6
 801bc42:	d006      	beq.n	801bc52 <ethernet_output+0x66>
 801bc44:	4b10      	ldr	r3, [pc, #64]	; (801bc88 <ethernet_output+0x9c>)
 801bc46:	f44f 7299 	mov.w	r2, #306	; 0x132
 801bc4a:	4910      	ldr	r1, [pc, #64]	; (801bc8c <ethernet_output+0xa0>)
 801bc4c:	4810      	ldr	r0, [pc, #64]	; (801bc90 <ethernet_output+0xa4>)
 801bc4e:	f004 fbc5 	bl	80203dc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
 801bc52:	68b9      	ldr	r1, [r7, #8]
 801bc54:	480f      	ldr	r0, [pc, #60]	; (801bc94 <ethernet_output+0xa8>)
 801bc56:	f004 fbc1 	bl	80203dc <iprintf>
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801bc5a:	68fb      	ldr	r3, [r7, #12]
 801bc5c:	699b      	ldr	r3, [r3, #24]
 801bc5e:	68b9      	ldr	r1, [r7, #8]
 801bc60:	68f8      	ldr	r0, [r7, #12]
 801bc62:	4798      	blx	r3
 801bc64:	4603      	mov	r3, r0
 801bc66:	e00b      	b.n	801bc80 <ethernet_output+0x94>
      goto pbuf_header_failed;
 801bc68:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 801bc6a:	480b      	ldr	r0, [pc, #44]	; (801bc98 <ethernet_output+0xac>)
 801bc6c:	f004 fc52 	bl	8020514 <puts>
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
 801bc70:	4b0a      	ldr	r3, [pc, #40]	; (801bc9c <ethernet_output+0xb0>)
 801bc72:	895b      	ldrh	r3, [r3, #10]
 801bc74:	3301      	adds	r3, #1
 801bc76:	b29a      	uxth	r2, r3
 801bc78:	4b08      	ldr	r3, [pc, #32]	; (801bc9c <ethernet_output+0xb0>)
 801bc7a:	815a      	strh	r2, [r3, #10]
  return ERR_BUF;
 801bc7c:	f06f 0301 	mvn.w	r3, #1
}
 801bc80:	4618      	mov	r0, r3
 801bc82:	3718      	adds	r7, #24
 801bc84:	46bd      	mov	sp, r7
 801bc86:	bd80      	pop	{r7, pc}
 801bc88:	080268ac 	.word	0x080268ac
 801bc8c:	080268e4 	.word	0x080268e4
 801bc90:	08026918 	.word	0x08026918
 801bc94:	08026940 	.word	0x08026940
 801bc98:	08026964 	.word	0x08026964
 801bc9c:	2000a3ec 	.word	0x2000a3ec

0801bca0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801bca0:	b580      	push	{r7, lr}
 801bca2:	b082      	sub	sp, #8
 801bca4:	af00      	add	r7, sp, #0
 801bca6:	6078      	str	r0, [r7, #4]
 801bca8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801bcaa:	683b      	ldr	r3, [r7, #0]
 801bcac:	2200      	movs	r2, #0
 801bcae:	2104      	movs	r1, #4
 801bcb0:	4618      	mov	r0, r3
 801bcb2:	f7ed f9f1 	bl	8009098 <osMessageQueueNew>
 801bcb6:	4602      	mov	r2, r0
 801bcb8:	687b      	ldr	r3, [r7, #4]
 801bcba:	601a      	str	r2, [r3, #0]
#endif
#if SYS_STATS
  ++lwip_stats.sys.mbox.used;
 801bcbc:	4b10      	ldr	r3, [pc, #64]	; (801bd00 <sys_mbox_new+0x60>)
 801bcbe:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 801bcc2:	3301      	adds	r3, #1
 801bcc4:	b29a      	uxth	r2, r3
 801bcc6:	4b0e      	ldr	r3, [pc, #56]	; (801bd00 <sys_mbox_new+0x60>)
 801bcc8:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
 801bccc:	4b0c      	ldr	r3, [pc, #48]	; (801bd00 <sys_mbox_new+0x60>)
 801bcce:	f8b3 211e 	ldrh.w	r2, [r3, #286]	; 0x11e
 801bcd2:	4b0b      	ldr	r3, [pc, #44]	; (801bd00 <sys_mbox_new+0x60>)
 801bcd4:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 801bcd8:	429a      	cmp	r2, r3
 801bcda:	d205      	bcs.n	801bce8 <sys_mbox_new+0x48>
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
 801bcdc:	4b08      	ldr	r3, [pc, #32]	; (801bd00 <sys_mbox_new+0x60>)
 801bcde:	f8b3 211c 	ldrh.w	r2, [r3, #284]	; 0x11c
 801bce2:	4b07      	ldr	r3, [pc, #28]	; (801bd00 <sys_mbox_new+0x60>)
 801bce4:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801bce8:	687b      	ldr	r3, [r7, #4]
 801bcea:	681b      	ldr	r3, [r3, #0]
 801bcec:	2b00      	cmp	r3, #0
 801bcee:	d102      	bne.n	801bcf6 <sys_mbox_new+0x56>
    return ERR_MEM;
 801bcf0:	f04f 33ff 	mov.w	r3, #4294967295
 801bcf4:	e000      	b.n	801bcf8 <sys_mbox_new+0x58>

  return ERR_OK;
 801bcf6:	2300      	movs	r3, #0
}
 801bcf8:	4618      	mov	r0, r3
 801bcfa:	3708      	adds	r7, #8
 801bcfc:	46bd      	mov	sp, r7
 801bcfe:	bd80      	pop	{r7, pc}
 801bd00:	2000a3ec 	.word	0x2000a3ec

0801bd04 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801bd04:	b580      	push	{r7, lr}
 801bd06:	b084      	sub	sp, #16
 801bd08:	af00      	add	r7, sp, #0
 801bd0a:	6078      	str	r0, [r7, #4]
 801bd0c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801bd0e:	687b      	ldr	r3, [r7, #4]
 801bd10:	6818      	ldr	r0, [r3, #0]
 801bd12:	4639      	mov	r1, r7
 801bd14:	2300      	movs	r3, #0
 801bd16:	2200      	movs	r2, #0
 801bd18:	f7ed fa44 	bl	80091a4 <osMessageQueuePut>
 801bd1c:	4603      	mov	r3, r0
 801bd1e:	2b00      	cmp	r3, #0
 801bd20:	d102      	bne.n	801bd28 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801bd22:	2300      	movs	r3, #0
 801bd24:	73fb      	strb	r3, [r7, #15]
 801bd26:	e009      	b.n	801bd3c <sys_mbox_trypost+0x38>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801bd28:	23ff      	movs	r3, #255	; 0xff
 801bd2a:	73fb      	strb	r3, [r7, #15]

#if SYS_STATS
    lwip_stats.sys.mbox.err++;
 801bd2c:	4b06      	ldr	r3, [pc, #24]	; (801bd48 <sys_mbox_trypost+0x44>)
 801bd2e:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 801bd32:	3301      	adds	r3, #1
 801bd34:	b29a      	uxth	r2, r3
 801bd36:	4b04      	ldr	r3, [pc, #16]	; (801bd48 <sys_mbox_trypost+0x44>)
 801bd38:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
#endif /* SYS_STATS */
  }

  return result;
 801bd3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801bd40:	4618      	mov	r0, r3
 801bd42:	3710      	adds	r7, #16
 801bd44:	46bd      	mov	sp, r7
 801bd46:	bd80      	pop	{r7, pc}
 801bd48:	2000a3ec 	.word	0x2000a3ec

0801bd4c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801bd4c:	b580      	push	{r7, lr}
 801bd4e:	b086      	sub	sp, #24
 801bd50:	af00      	add	r7, sp, #0
 801bd52:	60f8      	str	r0, [r7, #12]
 801bd54:	60b9      	str	r1, [r7, #8]
 801bd56:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801bd58:	f7ec fe00 	bl	800895c <osKernelGetTickCount>
 801bd5c:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801bd5e:	687b      	ldr	r3, [r7, #4]
 801bd60:	2b00      	cmp	r3, #0
 801bd62:	d013      	beq.n	801bd8c <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801bd64:	68fb      	ldr	r3, [r7, #12]
 801bd66:	6818      	ldr	r0, [r3, #0]
 801bd68:	687b      	ldr	r3, [r7, #4]
 801bd6a:	2200      	movs	r2, #0
 801bd6c:	68b9      	ldr	r1, [r7, #8]
 801bd6e:	f7ed fa8d 	bl	800928c <osMessageQueueGet>
 801bd72:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801bd74:	693b      	ldr	r3, [r7, #16]
 801bd76:	2b00      	cmp	r3, #0
 801bd78:	d105      	bne.n	801bd86 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801bd7a:	f7ec fdef 	bl	800895c <osKernelGetTickCount>
 801bd7e:	4602      	mov	r2, r0
 801bd80:	697b      	ldr	r3, [r7, #20]
 801bd82:	1ad3      	subs	r3, r2, r3
 801bd84:	e00f      	b.n	801bda6 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801bd86:	f04f 33ff 	mov.w	r3, #4294967295
 801bd8a:	e00c      	b.n	801bda6 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801bd8c:	68fb      	ldr	r3, [r7, #12]
 801bd8e:	6818      	ldr	r0, [r3, #0]
 801bd90:	f04f 33ff 	mov.w	r3, #4294967295
 801bd94:	2200      	movs	r2, #0
 801bd96:	68b9      	ldr	r1, [r7, #8]
 801bd98:	f7ed fa78 	bl	800928c <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801bd9c:	f7ec fdde 	bl	800895c <osKernelGetTickCount>
 801bda0:	4602      	mov	r2, r0
 801bda2:	697b      	ldr	r3, [r7, #20]
 801bda4:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801bda6:	4618      	mov	r0, r3
 801bda8:	3718      	adds	r7, #24
 801bdaa:	46bd      	mov	sp, r7
 801bdac:	bd80      	pop	{r7, pc}

0801bdae <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801bdae:	b480      	push	{r7}
 801bdb0:	b083      	sub	sp, #12
 801bdb2:	af00      	add	r7, sp, #0
 801bdb4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801bdb6:	687b      	ldr	r3, [r7, #4]
 801bdb8:	681b      	ldr	r3, [r3, #0]
 801bdba:	2b00      	cmp	r3, #0
 801bdbc:	d101      	bne.n	801bdc2 <sys_mbox_valid+0x14>
    return 0;
 801bdbe:	2300      	movs	r3, #0
 801bdc0:	e000      	b.n	801bdc4 <sys_mbox_valid+0x16>
  else
    return 1;
 801bdc2:	2301      	movs	r3, #1
}
 801bdc4:	4618      	mov	r0, r3
 801bdc6:	370c      	adds	r7, #12
 801bdc8:	46bd      	mov	sp, r7
 801bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdce:	4770      	bx	lr

0801bdd0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801bdd0:	b580      	push	{r7, lr}
 801bdd2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801bdd4:	2000      	movs	r0, #0
 801bdd6:	f7ec febd 	bl	8008b54 <osMutexNew>
 801bdda:	4603      	mov	r3, r0
 801bddc:	4a01      	ldr	r2, [pc, #4]	; (801bde4 <sys_init+0x14>)
 801bdde:	6013      	str	r3, [r2, #0]
#endif
}
 801bde0:	bf00      	nop
 801bde2:	bd80      	pop	{r7, pc}
 801bde4:	2000a568 	.word	0x2000a568

0801bde8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801bde8:	b580      	push	{r7, lr}
 801bdea:	b082      	sub	sp, #8
 801bdec:	af00      	add	r7, sp, #0
 801bdee:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801bdf0:	2000      	movs	r0, #0
 801bdf2:	f7ec feaf 	bl	8008b54 <osMutexNew>
 801bdf6:	4602      	mov	r2, r0
 801bdf8:	687b      	ldr	r3, [r7, #4]
 801bdfa:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801bdfc:	687b      	ldr	r3, [r7, #4]
 801bdfe:	681b      	ldr	r3, [r3, #0]
 801be00:	2b00      	cmp	r3, #0
 801be02:	d10a      	bne.n	801be1a <sys_mutex_new+0x32>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
 801be04:	4b12      	ldr	r3, [pc, #72]	; (801be50 <sys_mutex_new+0x68>)
 801be06:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 801be0a:	3301      	adds	r3, #1
 801be0c:	b29a      	uxth	r2, r3
 801be0e:	4b10      	ldr	r3, [pc, #64]	; (801be50 <sys_mutex_new+0x68>)
 801be10:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
#endif /* SYS_STATS */
    return ERR_MEM;
 801be14:	f04f 33ff 	mov.w	r3, #4294967295
 801be18:	e016      	b.n	801be48 <sys_mutex_new+0x60>
  }

#if SYS_STATS
  ++lwip_stats.sys.mutex.used;
 801be1a:	4b0d      	ldr	r3, [pc, #52]	; (801be50 <sys_mutex_new+0x68>)
 801be1c:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
 801be20:	3301      	adds	r3, #1
 801be22:	b29a      	uxth	r2, r3
 801be24:	4b0a      	ldr	r3, [pc, #40]	; (801be50 <sys_mutex_new+0x68>)
 801be26:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
 801be2a:	4b09      	ldr	r3, [pc, #36]	; (801be50 <sys_mutex_new+0x68>)
 801be2c:	f8b3 2118 	ldrh.w	r2, [r3, #280]	; 0x118
 801be30:	4b07      	ldr	r3, [pc, #28]	; (801be50 <sys_mutex_new+0x68>)
 801be32:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
 801be36:	429a      	cmp	r2, r3
 801be38:	d205      	bcs.n	801be46 <sys_mutex_new+0x5e>
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
 801be3a:	4b05      	ldr	r3, [pc, #20]	; (801be50 <sys_mutex_new+0x68>)
 801be3c:	f8b3 2116 	ldrh.w	r2, [r3, #278]	; 0x116
 801be40:	4b03      	ldr	r3, [pc, #12]	; (801be50 <sys_mutex_new+0x68>)
 801be42:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801be46:	2300      	movs	r3, #0
}
 801be48:	4618      	mov	r0, r3
 801be4a:	3708      	adds	r7, #8
 801be4c:	46bd      	mov	sp, r7
 801be4e:	bd80      	pop	{r7, pc}
 801be50:	2000a3ec 	.word	0x2000a3ec

0801be54 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801be54:	b580      	push	{r7, lr}
 801be56:	b082      	sub	sp, #8
 801be58:	af00      	add	r7, sp, #0
 801be5a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801be5c:	687b      	ldr	r3, [r7, #4]
 801be5e:	681b      	ldr	r3, [r3, #0]
 801be60:	f04f 31ff 	mov.w	r1, #4294967295
 801be64:	4618      	mov	r0, r3
 801be66:	f7ec ff0f 	bl	8008c88 <osMutexAcquire>
#endif
}
 801be6a:	bf00      	nop
 801be6c:	3708      	adds	r7, #8
 801be6e:	46bd      	mov	sp, r7
 801be70:	bd80      	pop	{r7, pc}

0801be72 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801be72:	b580      	push	{r7, lr}
 801be74:	b082      	sub	sp, #8
 801be76:	af00      	add	r7, sp, #0
 801be78:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801be7a:	687b      	ldr	r3, [r7, #4]
 801be7c:	681b      	ldr	r3, [r3, #0]
 801be7e:	4618      	mov	r0, r3
 801be80:	f7ec ff60 	bl	8008d44 <osMutexRelease>
}
 801be84:	bf00      	nop
 801be86:	3708      	adds	r7, #8
 801be88:	46bd      	mov	sp, r7
 801be8a:	bd80      	pop	{r7, pc}

0801be8c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801be8c:	b580      	push	{r7, lr}
 801be8e:	b08e      	sub	sp, #56	; 0x38
 801be90:	af00      	add	r7, sp, #0
 801be92:	60f8      	str	r0, [r7, #12]
 801be94:	60b9      	str	r1, [r7, #8]
 801be96:	607a      	str	r2, [r7, #4]
 801be98:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801be9a:	f107 0314 	add.w	r3, r7, #20
 801be9e:	2224      	movs	r2, #36	; 0x24
 801bea0:	2100      	movs	r1, #0
 801bea2:	4618      	mov	r0, r3
 801bea4:	f004 f9e8 	bl	8020278 <memset>
 801bea8:	68fb      	ldr	r3, [r7, #12]
 801beaa:	617b      	str	r3, [r7, #20]
 801beac:	683b      	ldr	r3, [r7, #0]
 801beae:	62bb      	str	r3, [r7, #40]	; 0x28
 801beb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801beb2:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801beb4:	f107 0314 	add.w	r3, r7, #20
 801beb8:	461a      	mov	r2, r3
 801beba:	6879      	ldr	r1, [r7, #4]
 801bebc:	68b8      	ldr	r0, [r7, #8]
 801bebe:	f7ec fd75 	bl	80089ac <osThreadNew>
 801bec2:	4603      	mov	r3, r0
#endif
}
 801bec4:	4618      	mov	r0, r3
 801bec6:	3738      	adds	r7, #56	; 0x38
 801bec8:	46bd      	mov	sp, r7
 801beca:	bd80      	pop	{r7, pc}

0801becc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801becc:	b580      	push	{r7, lr}
 801bece:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801bed0:	4b04      	ldr	r3, [pc, #16]	; (801bee4 <sys_arch_protect+0x18>)
 801bed2:	681b      	ldr	r3, [r3, #0]
 801bed4:	f04f 31ff 	mov.w	r1, #4294967295
 801bed8:	4618      	mov	r0, r3
 801beda:	f7ec fed5 	bl	8008c88 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801bede:	2301      	movs	r3, #1
}
 801bee0:	4618      	mov	r0, r3
 801bee2:	bd80      	pop	{r7, pc}
 801bee4:	2000a568 	.word	0x2000a568

0801bee8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801bee8:	b580      	push	{r7, lr}
 801beea:	b082      	sub	sp, #8
 801beec:	af00      	add	r7, sp, #0
 801beee:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801bef0:	4b04      	ldr	r3, [pc, #16]	; (801bf04 <sys_arch_unprotect+0x1c>)
 801bef2:	681b      	ldr	r3, [r3, #0]
 801bef4:	4618      	mov	r0, r3
 801bef6:	f7ec ff25 	bl	8008d44 <osMutexRelease>
}
 801befa:	bf00      	nop
 801befc:	3708      	adds	r7, #8
 801befe:	46bd      	mov	sp, r7
 801bf00:	bd80      	pop	{r7, pc}
 801bf02:	bf00      	nop
 801bf04:	2000a568 	.word	0x2000a568

0801bf08 <scaledNanosecondsToInternalTime>:
/* arith.c */

#include "ptpd.h"

void scaledNanosecondsToInternalTime(const int64_t *scaledNanoseconds, TimeInternal *internal)
{
 801bf08:	b580      	push	{r7, lr}
 801bf0a:	b086      	sub	sp, #24
 801bf0c:	af00      	add	r7, sp, #0
 801bf0e:	6078      	str	r0, [r7, #4]
 801bf10:	6039      	str	r1, [r7, #0]
	int sign;
	int64_t nanoseconds = *scaledNanoseconds;
 801bf12:	687b      	ldr	r3, [r7, #4]
 801bf14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf18:	e9c7 2302 	strd	r2, r3, [r7, #8]

	/* Determine sign of result big integer number */
	if (nanoseconds < 0)
 801bf1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801bf20:	2a00      	cmp	r2, #0
 801bf22:	f173 0300 	sbcs.w	r3, r3, #0
 801bf26:	da0a      	bge.n	801bf3e <scaledNanosecondsToInternalTime+0x36>
	{
		nanoseconds = -nanoseconds;
 801bf28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801bf2c:	4252      	negs	r2, r2
 801bf2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 801bf32:	e9c7 2302 	strd	r2, r3, [r7, #8]
		sign = -1;
 801bf36:	f04f 33ff 	mov.w	r3, #4294967295
 801bf3a:	617b      	str	r3, [r7, #20]
 801bf3c:	e001      	b.n	801bf42 <scaledNanosecondsToInternalTime+0x3a>
	}
	else
	{
		sign = 1;
 801bf3e:	2301      	movs	r3, #1
 801bf40:	617b      	str	r3, [r7, #20]
	}

	/* fractional nanoseconds are excluded (see 5.3.2) */
	nanoseconds >>= 16;
 801bf42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801bf46:	f04f 0200 	mov.w	r2, #0
 801bf4a:	f04f 0300 	mov.w	r3, #0
 801bf4e:	0c02      	lsrs	r2, r0, #16
 801bf50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801bf54:	140b      	asrs	r3, r1, #16
 801bf56:	e9c7 2302 	strd	r2, r3, [r7, #8]
	internal->seconds = sign * (nanoseconds / 1000000000);
 801bf5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801bf5e:	a310      	add	r3, pc, #64	; (adr r3, 801bfa0 <scaledNanosecondsToInternalTime+0x98>)
 801bf60:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf64:	f7e4 fa14 	bl	8000390 <__aeabi_ldivmod>
 801bf68:	4602      	mov	r2, r0
 801bf6a:	460b      	mov	r3, r1
 801bf6c:	697b      	ldr	r3, [r7, #20]
 801bf6e:	fb03 f302 	mul.w	r3, r3, r2
 801bf72:	461a      	mov	r2, r3
 801bf74:	683b      	ldr	r3, [r7, #0]
 801bf76:	601a      	str	r2, [r3, #0]
	internal->nanoseconds = sign * (nanoseconds % 1000000000);
 801bf78:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801bf7c:	a308      	add	r3, pc, #32	; (adr r3, 801bfa0 <scaledNanosecondsToInternalTime+0x98>)
 801bf7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf82:	f7e4 fa05 	bl	8000390 <__aeabi_ldivmod>
 801bf86:	697b      	ldr	r3, [r7, #20]
 801bf88:	fb03 f302 	mul.w	r3, r3, r2
 801bf8c:	461a      	mov	r2, r3
 801bf8e:	683b      	ldr	r3, [r7, #0]
 801bf90:	605a      	str	r2, [r3, #4]
}
 801bf92:	bf00      	nop
 801bf94:	3718      	adds	r7, #24
 801bf96:	46bd      	mov	sp, r7
 801bf98:	bd80      	pop	{r7, pc}
 801bf9a:	bf00      	nop
 801bf9c:	f3af 8000 	nop.w
 801bfa0:	3b9aca00 	.word	0x3b9aca00
 801bfa4:	00000000 	.word	0x00000000

0801bfa8 <fromInternalTime>:

void fromInternalTime(const TimeInternal *internal, Timestamp *external)
{
 801bfa8:	b480      	push	{r7}
 801bfaa:	b083      	sub	sp, #12
 801bfac:	af00      	add	r7, sp, #0
 801bfae:	6078      	str	r0, [r7, #4]
 801bfb0:	6039      	str	r1, [r7, #0]
	/* fromInternalTime is only used to convert time given by the system to a timestamp
	 * As a consequence, no negative value can normally be found in (internal)
	 * Note that offsets are also represented with TimeInternal structure, and can be negative,
	 * but offset are never convert into Timestamp so there is no problem here.*/
	if ((internal->seconds & ~INT_MAX) || (internal->nanoseconds & ~INT_MAX))
 801bfb2:	687b      	ldr	r3, [r7, #4]
 801bfb4:	681b      	ldr	r3, [r3, #0]
 801bfb6:	2b00      	cmp	r3, #0
 801bfb8:	db11      	blt.n	801bfde <fromInternalTime+0x36>
 801bfba:	687b      	ldr	r3, [r7, #4]
 801bfbc:	685b      	ldr	r3, [r3, #4]
 801bfbe:	2b00      	cmp	r3, #0
 801bfc0:	db0d      	blt.n	801bfde <fromInternalTime+0x36>
		DBG("Negative value canno't be converted into timestamp \n");
		return;
	}
	else
	{
		external->secondsField.lsb = internal->seconds;
 801bfc2:	687b      	ldr	r3, [r7, #4]
 801bfc4:	681b      	ldr	r3, [r3, #0]
 801bfc6:	461a      	mov	r2, r3
 801bfc8:	683b      	ldr	r3, [r7, #0]
 801bfca:	601a      	str	r2, [r3, #0]
		external->nanosecondsField = internal->nanoseconds;
 801bfcc:	687b      	ldr	r3, [r7, #4]
 801bfce:	685b      	ldr	r3, [r3, #4]
 801bfd0:	461a      	mov	r2, r3
 801bfd2:	683b      	ldr	r3, [r7, #0]
 801bfd4:	609a      	str	r2, [r3, #8]
		external->secondsField.msb = 0;
 801bfd6:	683b      	ldr	r3, [r7, #0]
 801bfd8:	2200      	movs	r2, #0
 801bfda:	809a      	strh	r2, [r3, #4]
 801bfdc:	e000      	b.n	801bfe0 <fromInternalTime+0x38>
		return;
 801bfde:	bf00      	nop
	}
}
 801bfe0:	370c      	adds	r7, #12
 801bfe2:	46bd      	mov	sp, r7
 801bfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfe8:	4770      	bx	lr

0801bfea <toInternalTime>:

void toInternalTime(TimeInternal *internal, const Timestamp *external)
{
 801bfea:	b480      	push	{r7}
 801bfec:	b083      	sub	sp, #12
 801bfee:	af00      	add	r7, sp, #0
 801bff0:	6078      	str	r0, [r7, #4]
 801bff2:	6039      	str	r1, [r7, #0]
	/* Program will not run after 2038... */
	if (external->secondsField.lsb < INT_MAX)
 801bff4:	683b      	ldr	r3, [r7, #0]
 801bff6:	681b      	ldr	r3, [r3, #0]
 801bff8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 801bffc:	4293      	cmp	r3, r2
 801bffe:	d20a      	bcs.n	801c016 <toInternalTime+0x2c>
	{
		internal->seconds = external->secondsField.lsb;
 801c000:	683b      	ldr	r3, [r7, #0]
 801c002:	681b      	ldr	r3, [r3, #0]
 801c004:	461a      	mov	r2, r3
 801c006:	687b      	ldr	r3, [r7, #4]
 801c008:	601a      	str	r2, [r3, #0]
		internal->nanoseconds = external->nanosecondsField;
 801c00a:	683b      	ldr	r3, [r7, #0]
 801c00c:	689b      	ldr	r3, [r3, #8]
 801c00e:	461a      	mov	r2, r3
 801c010:	687b      	ldr	r3, [r7, #4]
 801c012:	605a      	str	r2, [r3, #4]
 801c014:	e000      	b.n	801c018 <toInternalTime+0x2e>
	}
	else
	{
		DBG("Clock servo canno't be executed : seconds field is higher than signed integer (32bits)\n");
		return;
 801c016:	bf00      	nop
	}
}
 801c018:	370c      	adds	r7, #12
 801c01a:	46bd      	mov	sp, r7
 801c01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c020:	4770      	bx	lr
	...

0801c024 <normalizeTime>:

void normalizeTime(TimeInternal *r)
{
 801c024:	b480      	push	{r7}
 801c026:	b083      	sub	sp, #12
 801c028:	af00      	add	r7, sp, #0
 801c02a:	6078      	str	r0, [r7, #4]
	r->seconds += r->nanoseconds / 1000000000;
 801c02c:	687b      	ldr	r3, [r7, #4]
 801c02e:	681a      	ldr	r2, [r3, #0]
 801c030:	687b      	ldr	r3, [r7, #4]
 801c032:	685b      	ldr	r3, [r3, #4]
 801c034:	4921      	ldr	r1, [pc, #132]	; (801c0bc <normalizeTime+0x98>)
 801c036:	fb81 0103 	smull	r0, r1, r1, r3
 801c03a:	1709      	asrs	r1, r1, #28
 801c03c:	17db      	asrs	r3, r3, #31
 801c03e:	1acb      	subs	r3, r1, r3
 801c040:	441a      	add	r2, r3
 801c042:	687b      	ldr	r3, [r7, #4]
 801c044:	601a      	str	r2, [r3, #0]
	r->nanoseconds -= r->nanoseconds / 1000000000 * 1000000000;
 801c046:	687b      	ldr	r3, [r7, #4]
 801c048:	685a      	ldr	r2, [r3, #4]
 801c04a:	4b1c      	ldr	r3, [pc, #112]	; (801c0bc <normalizeTime+0x98>)
 801c04c:	fb83 1302 	smull	r1, r3, r3, r2
 801c050:	1719      	asrs	r1, r3, #28
 801c052:	17d3      	asrs	r3, r2, #31
 801c054:	1acb      	subs	r3, r1, r3
 801c056:	491a      	ldr	r1, [pc, #104]	; (801c0c0 <normalizeTime+0x9c>)
 801c058:	fb01 f303 	mul.w	r3, r1, r3
 801c05c:	1ad3      	subs	r3, r2, r3
 801c05e:	687a      	ldr	r2, [r7, #4]
 801c060:	6053      	str	r3, [r2, #4]

	if (r->seconds > 0 && r->nanoseconds < 0)
 801c062:	687b      	ldr	r3, [r7, #4]
 801c064:	681b      	ldr	r3, [r3, #0]
 801c066:	2b00      	cmp	r3, #0
 801c068:	dd0f      	ble.n	801c08a <normalizeTime+0x66>
 801c06a:	687b      	ldr	r3, [r7, #4]
 801c06c:	685b      	ldr	r3, [r3, #4]
 801c06e:	2b00      	cmp	r3, #0
 801c070:	da0b      	bge.n	801c08a <normalizeTime+0x66>
	{
		r->seconds -= 1;
 801c072:	687b      	ldr	r3, [r7, #4]
 801c074:	681b      	ldr	r3, [r3, #0]
 801c076:	1e5a      	subs	r2, r3, #1
 801c078:	687b      	ldr	r3, [r7, #4]
 801c07a:	601a      	str	r2, [r3, #0]
		r->nanoseconds += 1000000000;
 801c07c:	687b      	ldr	r3, [r7, #4]
 801c07e:	685a      	ldr	r2, [r3, #4]
 801c080:	4b0f      	ldr	r3, [pc, #60]	; (801c0c0 <normalizeTime+0x9c>)
 801c082:	4413      	add	r3, r2
 801c084:	687a      	ldr	r2, [r7, #4]
 801c086:	6053      	str	r3, [r2, #4]
	else if (r->seconds < 0 && r->nanoseconds > 0)
	{
		r->seconds += 1;
		r->nanoseconds -= 1000000000;
	}
}
 801c088:	e012      	b.n	801c0b0 <normalizeTime+0x8c>
	else if (r->seconds < 0 && r->nanoseconds > 0)
 801c08a:	687b      	ldr	r3, [r7, #4]
 801c08c:	681b      	ldr	r3, [r3, #0]
 801c08e:	2b00      	cmp	r3, #0
 801c090:	da0e      	bge.n	801c0b0 <normalizeTime+0x8c>
 801c092:	687b      	ldr	r3, [r7, #4]
 801c094:	685b      	ldr	r3, [r3, #4]
 801c096:	2b00      	cmp	r3, #0
 801c098:	dd0a      	ble.n	801c0b0 <normalizeTime+0x8c>
		r->seconds += 1;
 801c09a:	687b      	ldr	r3, [r7, #4]
 801c09c:	681b      	ldr	r3, [r3, #0]
 801c09e:	1c5a      	adds	r2, r3, #1
 801c0a0:	687b      	ldr	r3, [r7, #4]
 801c0a2:	601a      	str	r2, [r3, #0]
		r->nanoseconds -= 1000000000;
 801c0a4:	687b      	ldr	r3, [r7, #4]
 801c0a6:	685a      	ldr	r2, [r3, #4]
 801c0a8:	4b06      	ldr	r3, [pc, #24]	; (801c0c4 <normalizeTime+0xa0>)
 801c0aa:	4413      	add	r3, r2
 801c0ac:	687a      	ldr	r2, [r7, #4]
 801c0ae:	6053      	str	r3, [r2, #4]
}
 801c0b0:	bf00      	nop
 801c0b2:	370c      	adds	r7, #12
 801c0b4:	46bd      	mov	sp, r7
 801c0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0ba:	4770      	bx	lr
 801c0bc:	44b82fa1 	.word	0x44b82fa1
 801c0c0:	3b9aca00 	.word	0x3b9aca00
 801c0c4:	c4653600 	.word	0xc4653600

0801c0c8 <addTime>:

void addTime(TimeInternal *r, const TimeInternal *x, const TimeInternal *y)
{
 801c0c8:	b580      	push	{r7, lr}
 801c0ca:	b084      	sub	sp, #16
 801c0cc:	af00      	add	r7, sp, #0
 801c0ce:	60f8      	str	r0, [r7, #12]
 801c0d0:	60b9      	str	r1, [r7, #8]
 801c0d2:	607a      	str	r2, [r7, #4]
	r->seconds = x->seconds + y->seconds;
 801c0d4:	68bb      	ldr	r3, [r7, #8]
 801c0d6:	681a      	ldr	r2, [r3, #0]
 801c0d8:	687b      	ldr	r3, [r7, #4]
 801c0da:	681b      	ldr	r3, [r3, #0]
 801c0dc:	441a      	add	r2, r3
 801c0de:	68fb      	ldr	r3, [r7, #12]
 801c0e0:	601a      	str	r2, [r3, #0]
	r->nanoseconds = x->nanoseconds + y->nanoseconds;
 801c0e2:	68bb      	ldr	r3, [r7, #8]
 801c0e4:	685a      	ldr	r2, [r3, #4]
 801c0e6:	687b      	ldr	r3, [r7, #4]
 801c0e8:	685b      	ldr	r3, [r3, #4]
 801c0ea:	441a      	add	r2, r3
 801c0ec:	68fb      	ldr	r3, [r7, #12]
 801c0ee:	605a      	str	r2, [r3, #4]

	normalizeTime(r);
 801c0f0:	68f8      	ldr	r0, [r7, #12]
 801c0f2:	f7ff ff97 	bl	801c024 <normalizeTime>
}
 801c0f6:	bf00      	nop
 801c0f8:	3710      	adds	r7, #16
 801c0fa:	46bd      	mov	sp, r7
 801c0fc:	bd80      	pop	{r7, pc}

0801c0fe <subTime>:

void subTime(TimeInternal *r, const TimeInternal *x, const TimeInternal *y)
{
 801c0fe:	b580      	push	{r7, lr}
 801c100:	b084      	sub	sp, #16
 801c102:	af00      	add	r7, sp, #0
 801c104:	60f8      	str	r0, [r7, #12]
 801c106:	60b9      	str	r1, [r7, #8]
 801c108:	607a      	str	r2, [r7, #4]
	r->seconds = x->seconds - y->seconds;
 801c10a:	68bb      	ldr	r3, [r7, #8]
 801c10c:	681a      	ldr	r2, [r3, #0]
 801c10e:	687b      	ldr	r3, [r7, #4]
 801c110:	681b      	ldr	r3, [r3, #0]
 801c112:	1ad2      	subs	r2, r2, r3
 801c114:	68fb      	ldr	r3, [r7, #12]
 801c116:	601a      	str	r2, [r3, #0]
	r->nanoseconds = x->nanoseconds - y->nanoseconds;
 801c118:	68bb      	ldr	r3, [r7, #8]
 801c11a:	685a      	ldr	r2, [r3, #4]
 801c11c:	687b      	ldr	r3, [r7, #4]
 801c11e:	685b      	ldr	r3, [r3, #4]
 801c120:	1ad2      	subs	r2, r2, r3
 801c122:	68fb      	ldr	r3, [r7, #12]
 801c124:	605a      	str	r2, [r3, #4]

	normalizeTime(r);
 801c126:	68f8      	ldr	r0, [r7, #12]
 801c128:	f7ff ff7c 	bl	801c024 <normalizeTime>
}
 801c12c:	bf00      	nop
 801c12e:	3710      	adds	r7, #16
 801c130:	46bd      	mov	sp, r7
 801c132:	bd80      	pop	{r7, pc}

0801c134 <div2Time>:

void div2Time(TimeInternal *r)
{
 801c134:	b580      	push	{r7, lr}
 801c136:	b082      	sub	sp, #8
 801c138:	af00      	add	r7, sp, #0
 801c13a:	6078      	str	r0, [r7, #4]
	r->nanoseconds += r->seconds % 2 * 1000000000;
 801c13c:	687b      	ldr	r3, [r7, #4]
 801c13e:	685a      	ldr	r2, [r3, #4]
 801c140:	687b      	ldr	r3, [r7, #4]
 801c142:	681b      	ldr	r3, [r3, #0]
 801c144:	2b00      	cmp	r3, #0
 801c146:	f003 0301 	and.w	r3, r3, #1
 801c14a:	bfb8      	it	lt
 801c14c:	425b      	neglt	r3, r3
 801c14e:	490f      	ldr	r1, [pc, #60]	; (801c18c <div2Time+0x58>)
 801c150:	fb01 f303 	mul.w	r3, r1, r3
 801c154:	441a      	add	r2, r3
 801c156:	687b      	ldr	r3, [r7, #4]
 801c158:	605a      	str	r2, [r3, #4]
	r->seconds /= 2;
 801c15a:	687b      	ldr	r3, [r7, #4]
 801c15c:	681b      	ldr	r3, [r3, #0]
 801c15e:	2b00      	cmp	r3, #0
 801c160:	da00      	bge.n	801c164 <div2Time+0x30>
 801c162:	3301      	adds	r3, #1
 801c164:	105b      	asrs	r3, r3, #1
 801c166:	461a      	mov	r2, r3
 801c168:	687b      	ldr	r3, [r7, #4]
 801c16a:	601a      	str	r2, [r3, #0]
	r->nanoseconds /= 2;
 801c16c:	687b      	ldr	r3, [r7, #4]
 801c16e:	685b      	ldr	r3, [r3, #4]
 801c170:	2b00      	cmp	r3, #0
 801c172:	da00      	bge.n	801c176 <div2Time+0x42>
 801c174:	3301      	adds	r3, #1
 801c176:	105b      	asrs	r3, r3, #1
 801c178:	461a      	mov	r2, r3
 801c17a:	687b      	ldr	r3, [r7, #4]
 801c17c:	605a      	str	r2, [r3, #4]

	normalizeTime(r);
 801c17e:	6878      	ldr	r0, [r7, #4]
 801c180:	f7ff ff50 	bl	801c024 <normalizeTime>
}
 801c184:	bf00      	nop
 801c186:	3708      	adds	r7, #8
 801c188:	46bd      	mov	sp, r7
 801c18a:	bd80      	pop	{r7, pc}
 801c18c:	3b9aca00 	.word	0x3b9aca00

0801c190 <floorLog2>:

int32_t floorLog2(uint32_t n)
{
 801c190:	b480      	push	{r7}
 801c192:	b085      	sub	sp, #20
 801c194:	af00      	add	r7, sp, #0
 801c196:	6078      	str	r0, [r7, #4]
	int pos = 0;
 801c198:	2300      	movs	r3, #0
 801c19a:	60fb      	str	r3, [r7, #12]

	if (n == 0)
 801c19c:	687b      	ldr	r3, [r7, #4]
 801c19e:	2b00      	cmp	r3, #0
 801c1a0:	d102      	bne.n	801c1a8 <floorLog2+0x18>
		return -1;
 801c1a2:	f04f 33ff 	mov.w	r3, #4294967295
 801c1a6:	e02b      	b.n	801c200 <floorLog2+0x70>

	if (n >= 1<<16) { n >>= 16; pos += 16; }
 801c1a8:	687b      	ldr	r3, [r7, #4]
 801c1aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c1ae:	d305      	bcc.n	801c1bc <floorLog2+0x2c>
 801c1b0:	687b      	ldr	r3, [r7, #4]
 801c1b2:	0c1b      	lsrs	r3, r3, #16
 801c1b4:	607b      	str	r3, [r7, #4]
 801c1b6:	68fb      	ldr	r3, [r7, #12]
 801c1b8:	3310      	adds	r3, #16
 801c1ba:	60fb      	str	r3, [r7, #12]
	if (n >= 1<< 8) { n >>=  8; pos +=  8; }
 801c1bc:	687b      	ldr	r3, [r7, #4]
 801c1be:	2bff      	cmp	r3, #255	; 0xff
 801c1c0:	d905      	bls.n	801c1ce <floorLog2+0x3e>
 801c1c2:	687b      	ldr	r3, [r7, #4]
 801c1c4:	0a1b      	lsrs	r3, r3, #8
 801c1c6:	607b      	str	r3, [r7, #4]
 801c1c8:	68fb      	ldr	r3, [r7, #12]
 801c1ca:	3308      	adds	r3, #8
 801c1cc:	60fb      	str	r3, [r7, #12]
	if (n >= 1<< 4) { n >>=  4; pos +=  4; }
 801c1ce:	687b      	ldr	r3, [r7, #4]
 801c1d0:	2b0f      	cmp	r3, #15
 801c1d2:	d905      	bls.n	801c1e0 <floorLog2+0x50>
 801c1d4:	687b      	ldr	r3, [r7, #4]
 801c1d6:	091b      	lsrs	r3, r3, #4
 801c1d8:	607b      	str	r3, [r7, #4]
 801c1da:	68fb      	ldr	r3, [r7, #12]
 801c1dc:	3304      	adds	r3, #4
 801c1de:	60fb      	str	r3, [r7, #12]
	if (n >= 1<< 2) { n >>=  2; pos +=  2; }
 801c1e0:	687b      	ldr	r3, [r7, #4]
 801c1e2:	2b03      	cmp	r3, #3
 801c1e4:	d905      	bls.n	801c1f2 <floorLog2+0x62>
 801c1e6:	687b      	ldr	r3, [r7, #4]
 801c1e8:	089b      	lsrs	r3, r3, #2
 801c1ea:	607b      	str	r3, [r7, #4]
 801c1ec:	68fb      	ldr	r3, [r7, #12]
 801c1ee:	3302      	adds	r3, #2
 801c1f0:	60fb      	str	r3, [r7, #12]
	if (n >= 1<< 1) {           pos +=  1; }
 801c1f2:	687b      	ldr	r3, [r7, #4]
 801c1f4:	2b01      	cmp	r3, #1
 801c1f6:	d902      	bls.n	801c1fe <floorLog2+0x6e>
 801c1f8:	68fb      	ldr	r3, [r7, #12]
 801c1fa:	3301      	adds	r3, #1
 801c1fc:	60fb      	str	r3, [r7, #12]
	return pos;
 801c1fe:	68fb      	ldr	r3, [r7, #12]
}
 801c200:	4618      	mov	r0, r3
 801c202:	3714      	adds	r7, #20
 801c204:	46bd      	mov	sp, r7
 801c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c20a:	4770      	bx	lr

0801c20c <EUI48toEUI64>:

#include "ptpd.h"

/* Convert EUI48 format to EUI64 */
void EUI48toEUI64(const octet_t * eui48, octet_t * eui64)
{
 801c20c:	b480      	push	{r7}
 801c20e:	b083      	sub	sp, #12
 801c210:	af00      	add	r7, sp, #0
 801c212:	6078      	str	r0, [r7, #4]
 801c214:	6039      	str	r1, [r7, #0]
	eui64[0] = eui48[0];
 801c216:	687b      	ldr	r3, [r7, #4]
 801c218:	781a      	ldrb	r2, [r3, #0]
 801c21a:	683b      	ldr	r3, [r7, #0]
 801c21c:	701a      	strb	r2, [r3, #0]
	eui64[1] = eui48[1];
 801c21e:	683b      	ldr	r3, [r7, #0]
 801c220:	3301      	adds	r3, #1
 801c222:	687a      	ldr	r2, [r7, #4]
 801c224:	7852      	ldrb	r2, [r2, #1]
 801c226:	701a      	strb	r2, [r3, #0]
	eui64[2] = eui48[2];
 801c228:	683b      	ldr	r3, [r7, #0]
 801c22a:	3302      	adds	r3, #2
 801c22c:	687a      	ldr	r2, [r7, #4]
 801c22e:	7892      	ldrb	r2, [r2, #2]
 801c230:	701a      	strb	r2, [r3, #0]
	eui64[3] = 0xff;
 801c232:	683b      	ldr	r3, [r7, #0]
 801c234:	3303      	adds	r3, #3
 801c236:	22ff      	movs	r2, #255	; 0xff
 801c238:	701a      	strb	r2, [r3, #0]
	eui64[4] = 0xfe;
 801c23a:	683b      	ldr	r3, [r7, #0]
 801c23c:	3304      	adds	r3, #4
 801c23e:	22fe      	movs	r2, #254	; 0xfe
 801c240:	701a      	strb	r2, [r3, #0]
	eui64[5] = eui48[3];
 801c242:	683b      	ldr	r3, [r7, #0]
 801c244:	3305      	adds	r3, #5
 801c246:	687a      	ldr	r2, [r7, #4]
 801c248:	78d2      	ldrb	r2, [r2, #3]
 801c24a:	701a      	strb	r2, [r3, #0]
	eui64[6] = eui48[4];
 801c24c:	683b      	ldr	r3, [r7, #0]
 801c24e:	3306      	adds	r3, #6
 801c250:	687a      	ldr	r2, [r7, #4]
 801c252:	7912      	ldrb	r2, [r2, #4]
 801c254:	701a      	strb	r2, [r3, #0]
	eui64[7] = eui48[5];
 801c256:	683b      	ldr	r3, [r7, #0]
 801c258:	3307      	adds	r3, #7
 801c25a:	687a      	ldr	r2, [r7, #4]
 801c25c:	7952      	ldrb	r2, [r2, #5]
 801c25e:	701a      	strb	r2, [r3, #0]
}
 801c260:	bf00      	nop
 801c262:	370c      	adds	r7, #12
 801c264:	46bd      	mov	sp, r7
 801c266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c26a:	4770      	bx	lr

0801c26c <initData>:

/* Init ptpClock with run time values (initialization constants are in constants.h) */
void initData(PtpClock *ptpClock)
{
 801c26c:	b580      	push	{r7, lr}
 801c26e:	b084      	sub	sp, #16
 801c270:	af00      	add	r7, sp, #0
 801c272:	6078      	str	r0, [r7, #4]
	RunTimeOpts * rtOpts;

	DBG("initData\n");
	rtOpts = ptpClock->rtOpts;
 801c274:	687b      	ldr	r3, [r7, #4]
 801c276:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 801c27a:	60fb      	str	r3, [r7, #12]

	/* Default data set */
	ptpClock->defaultDS.twoStepFlag = DEFAULT_TWO_STEP_FLAG;
 801c27c:	687b      	ldr	r3, [r7, #4]
 801c27e:	2201      	movs	r2, #1
 801c280:	701a      	strb	r2, [r3, #0]

	/* Init clockIdentity with MAC address and 0xFF and 0xFE. see spec 7.5.2.2.2 */
	if ((CLOCK_IDENTITY_LENGTH == 8) && (PTP_UUID_LENGTH == 6))
	{
			DBGVV("initData: EUI48toEUI64\n");
			EUI48toEUI64(ptpClock->portUuidField, ptpClock->defaultDS.clockIdentity);
 801c282:	687b      	ldr	r3, [r7, #4]
 801c284:	f203 4209 	addw	r2, r3, #1033	; 0x409
 801c288:	687b      	ldr	r3, [r7, #4]
 801c28a:	3301      	adds	r3, #1
 801c28c:	4619      	mov	r1, r3
 801c28e:	4610      	mov	r0, r2
 801c290:	f7ff ffbc 	bl	801c20c <EUI48toEUI64>
	else
	{
			ERROR("initData: UUID length is not valid");
	}

	ptpClock->defaultDS.numberPorts = NUMBER_PORTS;
 801c294:	687b      	ldr	r3, [r7, #4]
 801c296:	2201      	movs	r2, #1
 801c298:	815a      	strh	r2, [r3, #10]

	ptpClock->defaultDS.clockQuality.clockAccuracy = rtOpts->clockQuality.clockAccuracy;
 801c29a:	68fb      	ldr	r3, [r7, #12]
 801c29c:	78da      	ldrb	r2, [r3, #3]
 801c29e:	687b      	ldr	r3, [r7, #4]
 801c2a0:	735a      	strb	r2, [r3, #13]
	ptpClock->defaultDS.clockQuality.clockClass = rtOpts->clockQuality.clockClass;
 801c2a2:	68fb      	ldr	r3, [r7, #12]
 801c2a4:	789a      	ldrb	r2, [r3, #2]
 801c2a6:	687b      	ldr	r3, [r7, #4]
 801c2a8:	731a      	strb	r2, [r3, #12]
	ptpClock->defaultDS.clockQuality.offsetScaledLogVariance = rtOpts->clockQuality.offsetScaledLogVariance;
 801c2aa:	68fb      	ldr	r3, [r7, #12]
 801c2ac:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801c2b0:	687b      	ldr	r3, [r7, #4]
 801c2b2:	81da      	strh	r2, [r3, #14]

	ptpClock->defaultDS.priority1 = rtOpts->priority1;
 801c2b4:	68fb      	ldr	r3, [r7, #12]
 801c2b6:	799a      	ldrb	r2, [r3, #6]
 801c2b8:	687b      	ldr	r3, [r7, #4]
 801c2ba:	741a      	strb	r2, [r3, #16]
	ptpClock->defaultDS.priority2 = rtOpts->priority2;
 801c2bc:	68fb      	ldr	r3, [r7, #12]
 801c2be:	79da      	ldrb	r2, [r3, #7]
 801c2c0:	687b      	ldr	r3, [r7, #4]
 801c2c2:	745a      	strb	r2, [r3, #17]

	ptpClock->defaultDS.domainNumber = rtOpts->domainNumber;
 801c2c4:	68fb      	ldr	r3, [r7, #12]
 801c2c6:	7a1a      	ldrb	r2, [r3, #8]
 801c2c8:	687b      	ldr	r3, [r7, #4]
 801c2ca:	749a      	strb	r2, [r3, #18]
	ptpClock->defaultDS.slaveOnly = rtOpts->slaveOnly;
 801c2cc:	68fb      	ldr	r3, [r7, #12]
 801c2ce:	7a5a      	ldrb	r2, [r3, #9]
 801c2d0:	687b      	ldr	r3, [r7, #4]
 801c2d2:	74da      	strb	r2, [r3, #19]

	/* Port configuration data set */

	/* PortIdentity Init (portNumber = 1 for an ardinary clock spec 7.5.2.3)*/
	memcpy(ptpClock->portDS.portIdentity.clockIdentity, ptpClock->defaultDS.clockIdentity, CLOCK_IDENTITY_LENGTH);
 801c2d4:	687b      	ldr	r3, [r7, #4]
 801c2d6:	f103 0058 	add.w	r0, r3, #88	; 0x58
 801c2da:	687b      	ldr	r3, [r7, #4]
 801c2dc:	3301      	adds	r3, #1
 801c2de:	2208      	movs	r2, #8
 801c2e0:	4619      	mov	r1, r3
 801c2e2:	f003 ffbb 	bl	802025c <memcpy>
	ptpClock->portDS.portIdentity.portNumber = NUMBER_PORTS;
 801c2e6:	687b      	ldr	r3, [r7, #4]
 801c2e8:	2201      	movs	r2, #1
 801c2ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	ptpClock->portDS.logMinDelayReqInterval = DEFAULT_DELAYREQ_INTERVAL;
 801c2ee:	687b      	ldr	r3, [r7, #4]
 801c2f0:	2203      	movs	r2, #3
 801c2f2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	ptpClock->portDS.peerMeanPathDelay.seconds = ptpClock->portDS.peerMeanPathDelay.nanoseconds = 0;
 801c2f6:	687b      	ldr	r3, [r7, #4]
 801c2f8:	2200      	movs	r2, #0
 801c2fa:	669a      	str	r2, [r3, #104]	; 0x68
 801c2fc:	687b      	ldr	r3, [r7, #4]
 801c2fe:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801c300:	687b      	ldr	r3, [r7, #4]
 801c302:	665a      	str	r2, [r3, #100]	; 0x64
	ptpClock->portDS.logAnnounceInterval = rtOpts->announceInterval;
 801c304:	68fb      	ldr	r3, [r7, #12]
 801c306:	f993 2000 	ldrsb.w	r2, [r3]
 801c30a:	687b      	ldr	r3, [r7, #4]
 801c30c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	ptpClock->portDS.announceReceiptTimeout = DEFAULT_ANNOUNCE_RECEIPT_TIMEOUT;
 801c310:	687b      	ldr	r3, [r7, #4]
 801c312:	2206      	movs	r2, #6
 801c314:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	ptpClock->portDS.logSyncInterval = rtOpts->syncInterval;
 801c318:	68fb      	ldr	r3, [r7, #12]
 801c31a:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801c31e:	687b      	ldr	r3, [r7, #4]
 801c320:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	ptpClock->portDS.delayMechanism = rtOpts->delayMechanism;
 801c324:	68fb      	ldr	r3, [r7, #12]
 801c326:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801c32a:	687b      	ldr	r3, [r7, #4]
 801c32c:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	ptpClock->portDS.logMinPdelayReqInterval = DEFAULT_PDELAYREQ_INTERVAL;
 801c330:	687b      	ldr	r3, [r7, #4]
 801c332:	2201      	movs	r2, #1
 801c334:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	ptpClock->portDS.versionNumber = VERSION_PTP;
 801c338:	687b      	ldr	r3, [r7, #4]
 801c33a:	2202      	movs	r2, #2
 801c33c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

	/* Init other stuff */
	ptpClock->foreignMasterDS.count = 0;
 801c340:	687b      	ldr	r3, [r7, #4]
 801c342:	2200      	movs	r2, #0
 801c344:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	ptpClock->foreignMasterDS.capacity = rtOpts->maxForeignRecords;
 801c348:	68fb      	ldr	r3, [r7, #12]
 801c34a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801c34e:	687b      	ldr	r3, [r7, #4]
 801c350:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

	ptpClock->inboundLatency = rtOpts->inboundLatency;
 801c354:	687b      	ldr	r3, [r7, #4]
 801c356:	68fa      	ldr	r2, [r7, #12]
 801c358:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 801c35c:	3220      	adds	r2, #32
 801c35e:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c362:	e883 0003 	stmia.w	r3, {r0, r1}
	ptpClock->outboundLatency = rtOpts->outboundLatency;
 801c366:	687b      	ldr	r3, [r7, #4]
 801c368:	68fa      	ldr	r2, [r7, #12]
 801c36a:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 801c36e:	3228      	adds	r2, #40	; 0x28
 801c370:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c374:	e883 0003 	stmia.w	r3, {r0, r1}

	ptpClock->servo.sDelay = rtOpts->servo.sDelay;
 801c378:	68fb      	ldr	r3, [r7, #12]
 801c37a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801c37c:	687b      	ldr	r3, [r7, #4]
 801c37e:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
	ptpClock->servo.sOffset = rtOpts->servo.sOffset;
 801c382:	68fb      	ldr	r3, [r7, #12]
 801c384:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801c386:	687b      	ldr	r3, [r7, #4]
 801c388:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
	ptpClock->servo.ai = rtOpts->servo.ai;
 801c38c:	68fb      	ldr	r3, [r7, #12]
 801c38e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801c390:	687b      	ldr	r3, [r7, #4]
 801c392:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
	ptpClock->servo.ap = rtOpts->servo.ap;
 801c396:	68fb      	ldr	r3, [r7, #12]
 801c398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801c39a:	687b      	ldr	r3, [r7, #4]
 801c39c:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
	ptpClock->servo.noAdjust = rtOpts->servo.noAdjust;
 801c3a0:	68fb      	ldr	r3, [r7, #12]
 801c3a2:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801c3a6:	687b      	ldr	r3, [r7, #4]
 801c3a8:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
	ptpClock->servo.noResetClock = rtOpts->servo.noResetClock;
 801c3ac:	68fb      	ldr	r3, [r7, #12]
 801c3ae:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801c3b2:	687b      	ldr	r3, [r7, #4]
 801c3b4:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420

	ptpClock->stats = rtOpts->stats;
 801c3b8:	68fb      	ldr	r3, [r7, #12]
 801c3ba:	7b9a      	ldrb	r2, [r3, #14]
 801c3bc:	687b      	ldr	r3, [r7, #4]
 801c3be:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
}
 801c3c2:	bf00      	nop
 801c3c4:	3710      	adds	r7, #16
 801c3c6:	46bd      	mov	sp, r7
 801c3c8:	bd80      	pop	{r7, pc}

0801c3ca <isSamePortIdentity>:

bool isSamePortIdentity(const PortIdentity * A, const PortIdentity * B)
{
 801c3ca:	b580      	push	{r7, lr}
 801c3cc:	b082      	sub	sp, #8
 801c3ce:	af00      	add	r7, sp, #0
 801c3d0:	6078      	str	r0, [r7, #4]
 801c3d2:	6039      	str	r1, [r7, #0]
	return (bool)(0 == memcmp(A->clockIdentity, B->clockIdentity, CLOCK_IDENTITY_LENGTH) && (A->portNumber == B->portNumber));
 801c3d4:	687b      	ldr	r3, [r7, #4]
 801c3d6:	6839      	ldr	r1, [r7, #0]
 801c3d8:	2208      	movs	r2, #8
 801c3da:	4618      	mov	r0, r3
 801c3dc:	f003 ff30 	bl	8020240 <memcmp>
 801c3e0:	4603      	mov	r3, r0
 801c3e2:	2b00      	cmp	r3, #0
 801c3e4:	d109      	bne.n	801c3fa <isSamePortIdentity+0x30>
 801c3e6:	687b      	ldr	r3, [r7, #4]
 801c3e8:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801c3ec:	683b      	ldr	r3, [r7, #0]
 801c3ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801c3f2:	429a      	cmp	r2, r3
 801c3f4:	d101      	bne.n	801c3fa <isSamePortIdentity+0x30>
 801c3f6:	2301      	movs	r3, #1
 801c3f8:	e000      	b.n	801c3fc <isSamePortIdentity+0x32>
 801c3fa:	2300      	movs	r3, #0
 801c3fc:	f003 0301 	and.w	r3, r3, #1
 801c400:	b2db      	uxtb	r3, r3
}
 801c402:	4618      	mov	r0, r3
 801c404:	3708      	adds	r7, #8
 801c406:	46bd      	mov	sp, r7
 801c408:	bd80      	pop	{r7, pc}

0801c40a <addForeign>:

void addForeign(PtpClock *ptpClock, const MsgHeader *header, const MsgAnnounce * announce)
{
 801c40a:	b5b0      	push	{r4, r5, r7, lr}
 801c40c:	b088      	sub	sp, #32
 801c40e:	af00      	add	r7, sp, #0
 801c410:	60f8      	str	r0, [r7, #12]
 801c412:	60b9      	str	r1, [r7, #8]
 801c414:	607a      	str	r2, [r7, #4]
	int i, j;
	bool found = FALSE;
 801c416:	2300      	movs	r3, #0
 801c418:	75fb      	strb	r3, [r7, #23]

	j = ptpClock->foreignMasterDS.best;
 801c41a:	68fb      	ldr	r3, [r7, #12]
 801c41c:	f9b3 307e 	ldrsh.w	r3, [r3, #126]	; 0x7e
 801c420:	61bb      	str	r3, [r7, #24]

	/* Check if Foreign master is already known */
	for (i = 0; i < ptpClock->foreignMasterDS.count; i++)
 801c422:	2300      	movs	r3, #0
 801c424:	61fb      	str	r3, [r7, #28]
 801c426:	e052      	b.n	801c4ce <addForeign+0xc4>
	{
		if (isSamePortIdentity(&header->sourcePortIdentity, &ptpClock->foreignMasterDS.records[j].foreignMasterPortIdentity))
 801c428:	68bb      	ldr	r3, [r7, #8]
 801c42a:	f103 0018 	add.w	r0, r3, #24
 801c42e:	68fb      	ldr	r3, [r7, #12]
 801c430:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 801c432:	69bb      	ldr	r3, [r7, #24]
 801c434:	2158      	movs	r1, #88	; 0x58
 801c436:	fb01 f303 	mul.w	r3, r1, r3
 801c43a:	4413      	add	r3, r2
 801c43c:	4619      	mov	r1, r3
 801c43e:	f7ff ffc4 	bl	801c3ca <isSamePortIdentity>
 801c442:	4603      	mov	r3, r0
 801c444:	2b00      	cmp	r3, #0
 801c446:	d034      	beq.n	801c4b2 <addForeign+0xa8>
		{
			/* Foreign Master is already in Foreignmaster data set */
			ptpClock->foreignMasterDS.records[j].foreignMasterAnnounceMessages++;
 801c448:	68fb      	ldr	r3, [r7, #12]
 801c44a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 801c44c:	69bb      	ldr	r3, [r7, #24]
 801c44e:	2158      	movs	r1, #88	; 0x58
 801c450:	fb01 f303 	mul.w	r3, r1, r3
 801c454:	4413      	add	r3, r2
 801c456:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 801c45a:	b292      	uxth	r2, r2
 801c45c:	3201      	adds	r2, #1
 801c45e:	b292      	uxth	r2, r2
 801c460:	b212      	sxth	r2, r2
 801c462:	815a      	strh	r2, [r3, #10]
			found = TRUE;
 801c464:	2301      	movs	r3, #1
 801c466:	75fb      	strb	r3, [r7, #23]
			DBGV("addForeign: AnnounceMessage incremented \n");
			ptpClock->foreignMasterDS.records[j].header = *header;
 801c468:	68fb      	ldr	r3, [r7, #12]
 801c46a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 801c46c:	69bb      	ldr	r3, [r7, #24]
 801c46e:	2158      	movs	r1, #88	; 0x58
 801c470:	fb01 f303 	mul.w	r3, r1, r3
 801c474:	4413      	add	r3, r2
 801c476:	68ba      	ldr	r2, [r7, #8]
 801c478:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801c47c:	4615      	mov	r5, r2
 801c47e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c480:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c482:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c484:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c486:	e895 0003 	ldmia.w	r5, {r0, r1}
 801c48a:	e884 0003 	stmia.w	r4, {r0, r1}
			ptpClock->foreignMasterDS.records[j].announce = *announce;
 801c48e:	68fb      	ldr	r3, [r7, #12]
 801c490:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 801c492:	69bb      	ldr	r3, [r7, #24]
 801c494:	2158      	movs	r1, #88	; 0x58
 801c496:	fb01 f303 	mul.w	r3, r1, r3
 801c49a:	4413      	add	r3, r2
 801c49c:	687a      	ldr	r2, [r7, #4]
 801c49e:	f103 040c 	add.w	r4, r3, #12
 801c4a2:	4615      	mov	r5, r2
 801c4a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c4a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c4a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c4aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c4ac:	682b      	ldr	r3, [r5, #0]
 801c4ae:	6023      	str	r3, [r4, #0]
			break;
 801c4b0:	e014      	b.n	801c4dc <addForeign+0xd2>
		}

		j = (j + 1) % ptpClock->foreignMasterDS.count;
 801c4b2:	69bb      	ldr	r3, [r7, #24]
 801c4b4:	3301      	adds	r3, #1
 801c4b6:	68fa      	ldr	r2, [r7, #12]
 801c4b8:	f9b2 2078 	ldrsh.w	r2, [r2, #120]	; 0x78
 801c4bc:	fb93 f1f2 	sdiv	r1, r3, r2
 801c4c0:	fb02 f201 	mul.w	r2, r2, r1
 801c4c4:	1a9b      	subs	r3, r3, r2
 801c4c6:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < ptpClock->foreignMasterDS.count; i++)
 801c4c8:	69fb      	ldr	r3, [r7, #28]
 801c4ca:	3301      	adds	r3, #1
 801c4cc:	61fb      	str	r3, [r7, #28]
 801c4ce:	68fb      	ldr	r3, [r7, #12]
 801c4d0:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	; 0x78
 801c4d4:	461a      	mov	r2, r3
 801c4d6:	69fb      	ldr	r3, [r7, #28]
 801c4d8:	4293      	cmp	r3, r2
 801c4da:	dba5      	blt.n	801c428 <addForeign+0x1e>
	}

	/* New Foreign Master */
	if (!found)
 801c4dc:	7dfb      	ldrb	r3, [r7, #23]
 801c4de:	f083 0301 	eor.w	r3, r3, #1
 801c4e2:	b2db      	uxtb	r3, r3
 801c4e4:	2b00      	cmp	r3, #0
 801c4e6:	d06b      	beq.n	801c5c0 <addForeign+0x1b6>
	{
		if (ptpClock->foreignMasterDS.count < ptpClock->foreignMasterDS.capacity)
 801c4e8:	68fb      	ldr	r3, [r7, #12]
 801c4ea:	f9b3 2078 	ldrsh.w	r2, [r3, #120]	; 0x78
 801c4ee:	68fb      	ldr	r3, [r7, #12]
 801c4f0:	f9b3 307a 	ldrsh.w	r3, [r3, #122]	; 0x7a
 801c4f4:	429a      	cmp	r2, r3
 801c4f6:	da09      	bge.n	801c50c <addForeign+0x102>
		{
			ptpClock->foreignMasterDS.count++;
 801c4f8:	68fb      	ldr	r3, [r7, #12]
 801c4fa:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	; 0x78
 801c4fe:	b29b      	uxth	r3, r3
 801c500:	3301      	adds	r3, #1
 801c502:	b29b      	uxth	r3, r3
 801c504:	b21a      	sxth	r2, r3
 801c506:	68fb      	ldr	r3, [r7, #12]
 801c508:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
		}

		j = ptpClock->foreignMasterDS.i;
 801c50c:	68fb      	ldr	r3, [r7, #12]
 801c50e:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 801c512:	61bb      	str	r3, [r7, #24]

		/* Copy new foreign master data set from Announce message */
		memcpy(ptpClock->foreignMasterDS.records[j].foreignMasterPortIdentity.clockIdentity, header->sourcePortIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 801c514:	68fb      	ldr	r3, [r7, #12]
 801c516:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 801c518:	69bb      	ldr	r3, [r7, #24]
 801c51a:	2158      	movs	r1, #88	; 0x58
 801c51c:	fb01 f303 	mul.w	r3, r1, r3
 801c520:	4413      	add	r3, r2
 801c522:	4618      	mov	r0, r3
 801c524:	68bb      	ldr	r3, [r7, #8]
 801c526:	3318      	adds	r3, #24
 801c528:	2208      	movs	r2, #8
 801c52a:	4619      	mov	r1, r3
 801c52c:	f003 fe96 	bl	802025c <memcpy>
		ptpClock->foreignMasterDS.records[j].foreignMasterPortIdentity.portNumber = header->sourcePortIdentity.portNumber;
 801c530:	68fb      	ldr	r3, [r7, #12]
 801c532:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 801c534:	69bb      	ldr	r3, [r7, #24]
 801c536:	2158      	movs	r1, #88	; 0x58
 801c538:	fb01 f303 	mul.w	r3, r1, r3
 801c53c:	4413      	add	r3, r2
 801c53e:	68ba      	ldr	r2, [r7, #8]
 801c540:	f9b2 2020 	ldrsh.w	r2, [r2, #32]
 801c544:	811a      	strh	r2, [r3, #8]
		ptpClock->foreignMasterDS.records[j].foreignMasterAnnounceMessages = 0;
 801c546:	68fb      	ldr	r3, [r7, #12]
 801c548:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 801c54a:	69bb      	ldr	r3, [r7, #24]
 801c54c:	2158      	movs	r1, #88	; 0x58
 801c54e:	fb01 f303 	mul.w	r3, r1, r3
 801c552:	4413      	add	r3, r2
 801c554:	2200      	movs	r2, #0
 801c556:	815a      	strh	r2, [r3, #10]

		/* Header and announce field of each Foreign Master are usefull to run Best Master Clock Algorithm */
		ptpClock->foreignMasterDS.records[j].header = *header;
 801c558:	68fb      	ldr	r3, [r7, #12]
 801c55a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 801c55c:	69bb      	ldr	r3, [r7, #24]
 801c55e:	2158      	movs	r1, #88	; 0x58
 801c560:	fb01 f303 	mul.w	r3, r1, r3
 801c564:	4413      	add	r3, r2
 801c566:	68ba      	ldr	r2, [r7, #8]
 801c568:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801c56c:	4615      	mov	r5, r2
 801c56e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c572:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c574:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c576:	e895 0003 	ldmia.w	r5, {r0, r1}
 801c57a:	e884 0003 	stmia.w	r4, {r0, r1}
		ptpClock->foreignMasterDS.records[j].announce = *announce;
 801c57e:	68fb      	ldr	r3, [r7, #12]
 801c580:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 801c582:	69bb      	ldr	r3, [r7, #24]
 801c584:	2158      	movs	r1, #88	; 0x58
 801c586:	fb01 f303 	mul.w	r3, r1, r3
 801c58a:	4413      	add	r3, r2
 801c58c:	687a      	ldr	r2, [r7, #4]
 801c58e:	f103 040c 	add.w	r4, r3, #12
 801c592:	4615      	mov	r5, r2
 801c594:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c596:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c598:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c59a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c59c:	682b      	ldr	r3, [r5, #0]
 801c59e:	6023      	str	r3, [r4, #0]
		DBGV("addForeign: New foreign Master added \n");

		ptpClock->foreignMasterDS.i = (ptpClock->foreignMasterDS.i + 1) % ptpClock->foreignMasterDS.capacity;
 801c5a0:	68fb      	ldr	r3, [r7, #12]
 801c5a2:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 801c5a6:	3301      	adds	r3, #1
 801c5a8:	68fa      	ldr	r2, [r7, #12]
 801c5aa:	f9b2 207a 	ldrsh.w	r2, [r2, #122]	; 0x7a
 801c5ae:	fb93 f1f2 	sdiv	r1, r3, r2
 801c5b2:	fb02 f201 	mul.w	r2, r2, r1
 801c5b6:	1a9b      	subs	r3, r3, r2
 801c5b8:	b21a      	sxth	r2, r3
 801c5ba:	68fb      	ldr	r3, [r7, #12]
 801c5bc:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	}
}
 801c5c0:	bf00      	nop
 801c5c2:	3720      	adds	r7, #32
 801c5c4:	46bd      	mov	sp, r7
 801c5c6:	bdb0      	pop	{r4, r5, r7, pc}

0801c5c8 <m1>:

#define m2 m1

/* Local clock is becoming Master. Table 13 (9.3.5) of the spec.*/
void m1(PtpClock *ptpClock)
{
 801c5c8:	b580      	push	{r7, lr}
 801c5ca:	b082      	sub	sp, #8
 801c5cc:	af00      	add	r7, sp, #0
 801c5ce:	6078      	str	r0, [r7, #4]
	DBGV("bmc: m1\n");

	/* Current data set update */
	ptpClock->currentDS.stepsRemoved = 0;
 801c5d0:	687b      	ldr	r3, [r7, #4]
 801c5d2:	2200      	movs	r2, #0
 801c5d4:	829a      	strh	r2, [r3, #20]
	ptpClock->currentDS.offsetFromMaster.seconds = ptpClock->currentDS.offsetFromMaster.nanoseconds = 0;
 801c5d6:	687b      	ldr	r3, [r7, #4]
 801c5d8:	2200      	movs	r2, #0
 801c5da:	61da      	str	r2, [r3, #28]
 801c5dc:	687b      	ldr	r3, [r7, #4]
 801c5de:	69da      	ldr	r2, [r3, #28]
 801c5e0:	687b      	ldr	r3, [r7, #4]
 801c5e2:	619a      	str	r2, [r3, #24]
	ptpClock->currentDS.meanPathDelay.seconds = ptpClock->currentDS.meanPathDelay.nanoseconds = 0;
 801c5e4:	687b      	ldr	r3, [r7, #4]
 801c5e6:	2200      	movs	r2, #0
 801c5e8:	625a      	str	r2, [r3, #36]	; 0x24
 801c5ea:	687b      	ldr	r3, [r7, #4]
 801c5ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c5ee:	687b      	ldr	r3, [r7, #4]
 801c5f0:	621a      	str	r2, [r3, #32]

	/* Parent data set */
	memcpy(ptpClock->parentDS.parentPortIdentity.clockIdentity, ptpClock->defaultDS.clockIdentity, CLOCK_IDENTITY_LENGTH);
 801c5f2:	687b      	ldr	r3, [r7, #4]
 801c5f4:	f103 0028 	add.w	r0, r3, #40	; 0x28
 801c5f8:	687b      	ldr	r3, [r7, #4]
 801c5fa:	3301      	adds	r3, #1
 801c5fc:	2208      	movs	r2, #8
 801c5fe:	4619      	mov	r1, r3
 801c600:	f003 fe2c 	bl	802025c <memcpy>
	ptpClock->parentDS.parentPortIdentity.portNumber = 0;
 801c604:	687b      	ldr	r3, [r7, #4]
 801c606:	2200      	movs	r2, #0
 801c608:	861a      	strh	r2, [r3, #48]	; 0x30
	memcpy(ptpClock->parentDS.grandmasterIdentity, ptpClock->defaultDS.clockIdentity, CLOCK_IDENTITY_LENGTH);
 801c60a:	687b      	ldr	r3, [r7, #4]
 801c60c:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 801c610:	687b      	ldr	r3, [r7, #4]
 801c612:	3301      	adds	r3, #1
 801c614:	2208      	movs	r2, #8
 801c616:	4619      	mov	r1, r3
 801c618:	f003 fe20 	bl	802025c <memcpy>
	ptpClock->parentDS.grandmasterClockQuality.clockAccuracy = ptpClock->defaultDS.clockQuality.clockAccuracy;
 801c61c:	687b      	ldr	r3, [r7, #4]
 801c61e:	7b5a      	ldrb	r2, [r3, #13]
 801c620:	687b      	ldr	r3, [r7, #4]
 801c622:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	ptpClock->parentDS.grandmasterClockQuality.clockClass = ptpClock->defaultDS.clockQuality.clockClass;
 801c626:	687b      	ldr	r3, [r7, #4]
 801c628:	7b1a      	ldrb	r2, [r3, #12]
 801c62a:	687b      	ldr	r3, [r7, #4]
 801c62c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	ptpClock->parentDS.grandmasterClockQuality.offsetScaledLogVariance = ptpClock->defaultDS.clockQuality.offsetScaledLogVariance;
 801c630:	687b      	ldr	r3, [r7, #4]
 801c632:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 801c636:	687b      	ldr	r3, [r7, #4]
 801c638:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	ptpClock->parentDS.grandmasterPriority1 = ptpClock->defaultDS.priority1;
 801c63c:	687b      	ldr	r3, [r7, #4]
 801c63e:	7c1a      	ldrb	r2, [r3, #16]
 801c640:	687b      	ldr	r3, [r7, #4]
 801c642:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	ptpClock->parentDS.grandmasterPriority2 = ptpClock->defaultDS.priority2;
 801c646:	687b      	ldr	r3, [r7, #4]
 801c648:	7c5a      	ldrb	r2, [r3, #17]
 801c64a:	687b      	ldr	r3, [r7, #4]
 801c64c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

	/* Time Properties data set */
	ptpClock->timePropertiesDS.currentUtcOffset = ptpClock->rtOpts->currentUtcOffset;
 801c650:	687b      	ldr	r3, [r7, #4]
 801c652:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 801c656:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 801c65a:	687b      	ldr	r3, [r7, #4]
 801c65c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	ptpClock->timePropertiesDS.currentUtcOffsetValid = DEFAULT_UTC_VALID;
 801c660:	687b      	ldr	r3, [r7, #4]
 801c662:	2200      	movs	r2, #0
 801c664:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	ptpClock->timePropertiesDS.leap59 = FALSE;
 801c668:	687b      	ldr	r3, [r7, #4]
 801c66a:	2200      	movs	r2, #0
 801c66c:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	ptpClock->timePropertiesDS.leap61 = FALSE;
 801c670:	687b      	ldr	r3, [r7, #4]
 801c672:	2200      	movs	r2, #0
 801c674:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	ptpClock->timePropertiesDS.timeTraceable = DEFAULT_TIME_TRACEABLE;
 801c678:	687b      	ldr	r3, [r7, #4]
 801c67a:	2200      	movs	r2, #0
 801c67c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	ptpClock->timePropertiesDS.frequencyTraceable = DEFAULT_FREQUENCY_TRACEABLE;
 801c680:	687b      	ldr	r3, [r7, #4]
 801c682:	2200      	movs	r2, #0
 801c684:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	ptpClock->timePropertiesDS.ptpTimescale = (bool)(DEFAULT_TIMESCALE == PTP_TIMESCALE);
 801c688:	687b      	ldr	r3, [r7, #4]
 801c68a:	2200      	movs	r2, #0
 801c68c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	ptpClock->timePropertiesDS.timeSource = DEFAULT_TIME_SOURCE;
 801c690:	687b      	ldr	r3, [r7, #4]
 801c692:	22a0      	movs	r2, #160	; 0xa0
 801c694:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
}
 801c698:	bf00      	nop
 801c69a:	3708      	adds	r7, #8
 801c69c:	46bd      	mov	sp, r7
 801c69e:	bd80      	pop	{r7, pc}

0801c6a0 <p1>:

void p1(PtpClock *ptpClock)
{
 801c6a0:	b480      	push	{r7}
 801c6a2:	b083      	sub	sp, #12
 801c6a4:	af00      	add	r7, sp, #0
 801c6a6:	6078      	str	r0, [r7, #4]
	DBGV("bmc: p1\n");
}
 801c6a8:	bf00      	nop
 801c6aa:	370c      	adds	r7, #12
 801c6ac:	46bd      	mov	sp, r7
 801c6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6b2:	4770      	bx	lr

0801c6b4 <s1>:

/* Local clock is synchronized to Ebest Table 16 (9.3.5) of the spec */
void s1(PtpClock *ptpClock, const MsgHeader *header, const MsgAnnounce *announce)
{
 801c6b4:	b580      	push	{r7, lr}
 801c6b6:	b086      	sub	sp, #24
 801c6b8:	af00      	add	r7, sp, #0
 801c6ba:	60f8      	str	r0, [r7, #12]
 801c6bc:	60b9      	str	r1, [r7, #8]
 801c6be:	607a      	str	r2, [r7, #4]
	bool isFromCurrentParent;

	DBGV("bmc: s1\n");

	/* Current DS */
	ptpClock->currentDS.stepsRemoved = announce->stepsRemoved + 1;
 801c6c0:	687b      	ldr	r3, [r7, #4]
 801c6c2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801c6c6:	b29b      	uxth	r3, r3
 801c6c8:	3301      	adds	r3, #1
 801c6ca:	b29b      	uxth	r3, r3
 801c6cc:	b21a      	sxth	r2, r3
 801c6ce:	68fb      	ldr	r3, [r7, #12]
 801c6d0:	829a      	strh	r2, [r3, #20]

	isFromCurrentParent = isSamePortIdentity(&ptpClock->parentDS.parentPortIdentity, &header->sourcePortIdentity);
 801c6d2:	68fb      	ldr	r3, [r7, #12]
 801c6d4:	f103 0228 	add.w	r2, r3, #40	; 0x28
 801c6d8:	68bb      	ldr	r3, [r7, #8]
 801c6da:	3318      	adds	r3, #24
 801c6dc:	4619      	mov	r1, r3
 801c6de:	4610      	mov	r0, r2
 801c6e0:	f7ff fe73 	bl	801c3ca <isSamePortIdentity>
 801c6e4:	4603      	mov	r3, r0
 801c6e6:	75fb      	strb	r3, [r7, #23]

	if (!isFromCurrentParent)
 801c6e8:	7dfb      	ldrb	r3, [r7, #23]
 801c6ea:	f083 0301 	eor.w	r3, r3, #1
 801c6ee:	b2db      	uxtb	r3, r3
 801c6f0:	2b00      	cmp	r3, #0
 801c6f2:	d007      	beq.n	801c704 <s1+0x50>
	{
			setFlag(ptpClock->events, MASTER_CLOCK_CHANGED);
 801c6f4:	68fb      	ldr	r3, [r7, #12]
 801c6f6:	f8d3 3434 	ldr.w	r3, [r3, #1076]	; 0x434
 801c6fa:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 801c6fe:	68fb      	ldr	r3, [r7, #12]
 801c700:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
	}

	/* Parent DS */
	memcpy(ptpClock->parentDS.parentPortIdentity.clockIdentity, header->sourcePortIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 801c704:	68fb      	ldr	r3, [r7, #12]
 801c706:	f103 0028 	add.w	r0, r3, #40	; 0x28
 801c70a:	68bb      	ldr	r3, [r7, #8]
 801c70c:	3318      	adds	r3, #24
 801c70e:	2208      	movs	r2, #8
 801c710:	4619      	mov	r1, r3
 801c712:	f003 fda3 	bl	802025c <memcpy>
	ptpClock->parentDS.parentPortIdentity.portNumber = header->sourcePortIdentity.portNumber;
 801c716:	68bb      	ldr	r3, [r7, #8]
 801c718:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 801c71c:	68fb      	ldr	r3, [r7, #12]
 801c71e:	861a      	strh	r2, [r3, #48]	; 0x30
	memcpy(ptpClock->parentDS.grandmasterIdentity, announce->grandmasterIdentity, CLOCK_IDENTITY_LENGTH);
 801c720:	68fb      	ldr	r3, [r7, #12]
 801c722:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 801c726:	687b      	ldr	r3, [r7, #4]
 801c728:	3315      	adds	r3, #21
 801c72a:	2208      	movs	r2, #8
 801c72c:	4619      	mov	r1, r3
 801c72e:	f003 fd95 	bl	802025c <memcpy>
	ptpClock->parentDS.grandmasterClockQuality.clockAccuracy = announce->grandmasterClockQuality.clockAccuracy;
 801c732:	687b      	ldr	r3, [r7, #4]
 801c734:	7c5a      	ldrb	r2, [r3, #17]
 801c736:	68fb      	ldr	r3, [r7, #12]
 801c738:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	ptpClock->parentDS.grandmasterClockQuality.clockClass = announce->grandmasterClockQuality.clockClass;
 801c73c:	687b      	ldr	r3, [r7, #4]
 801c73e:	7c1a      	ldrb	r2, [r3, #16]
 801c740:	68fb      	ldr	r3, [r7, #12]
 801c742:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	ptpClock->parentDS.grandmasterClockQuality.offsetScaledLogVariance = announce->grandmasterClockQuality.offsetScaledLogVariance;
 801c746:	687b      	ldr	r3, [r7, #4]
 801c748:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 801c74c:	68fb      	ldr	r3, [r7, #12]
 801c74e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	ptpClock->parentDS.grandmasterPriority1 = announce->grandmasterPriority1;
 801c752:	687b      	ldr	r3, [r7, #4]
 801c754:	7b9a      	ldrb	r2, [r3, #14]
 801c756:	68fb      	ldr	r3, [r7, #12]
 801c758:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	ptpClock->parentDS.grandmasterPriority2 = announce->grandmasterPriority2;
 801c75c:	687b      	ldr	r3, [r7, #4]
 801c75e:	7d1a      	ldrb	r2, [r3, #20]
 801c760:	68fb      	ldr	r3, [r7, #12]
 801c762:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

	/* Timeproperties DS */
	ptpClock->timePropertiesDS.currentUtcOffset = announce->currentUtcOffset;
 801c766:	687b      	ldr	r3, [r7, #4]
 801c768:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c76c:	68fb      	ldr	r3, [r7, #12]
 801c76e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	ptpClock->timePropertiesDS.currentUtcOffsetValid = getFlag(header->flagField[1], FLAG1_UTC_OFFSET_VALID);
 801c772:	68bb      	ldr	r3, [r7, #8]
 801c774:	7a1b      	ldrb	r3, [r3, #8]
 801c776:	f003 0304 	and.w	r3, r3, #4
 801c77a:	2b00      	cmp	r3, #0
 801c77c:	bf14      	ite	ne
 801c77e:	2301      	movne	r3, #1
 801c780:	2300      	moveq	r3, #0
 801c782:	b2da      	uxtb	r2, r3
 801c784:	68fb      	ldr	r3, [r7, #12]
 801c786:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	ptpClock->timePropertiesDS.leap59 = getFlag(header->flagField[1], FLAG1_LEAP59);
 801c78a:	68bb      	ldr	r3, [r7, #8]
 801c78c:	7a1b      	ldrb	r3, [r3, #8]
 801c78e:	f003 0302 	and.w	r3, r3, #2
 801c792:	2b00      	cmp	r3, #0
 801c794:	bf14      	ite	ne
 801c796:	2301      	movne	r3, #1
 801c798:	2300      	moveq	r3, #0
 801c79a:	b2da      	uxtb	r2, r3
 801c79c:	68fb      	ldr	r3, [r7, #12]
 801c79e:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	ptpClock->timePropertiesDS.leap61 = getFlag(header->flagField[1], FLAG1_LEAP61);
 801c7a2:	68bb      	ldr	r3, [r7, #8]
 801c7a4:	7a1b      	ldrb	r3, [r3, #8]
 801c7a6:	f003 0301 	and.w	r3, r3, #1
 801c7aa:	2b00      	cmp	r3, #0
 801c7ac:	bf14      	ite	ne
 801c7ae:	2301      	movne	r3, #1
 801c7b0:	2300      	moveq	r3, #0
 801c7b2:	b2da      	uxtb	r2, r3
 801c7b4:	68fb      	ldr	r3, [r7, #12]
 801c7b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	ptpClock->timePropertiesDS.timeTraceable = getFlag(header->flagField[1], FLAG1_TIME_TRACEABLE);
 801c7ba:	68bb      	ldr	r3, [r7, #8]
 801c7bc:	7a1b      	ldrb	r3, [r3, #8]
 801c7be:	f003 0310 	and.w	r3, r3, #16
 801c7c2:	2b00      	cmp	r3, #0
 801c7c4:	bf14      	ite	ne
 801c7c6:	2301      	movne	r3, #1
 801c7c8:	2300      	moveq	r3, #0
 801c7ca:	b2da      	uxtb	r2, r3
 801c7cc:	68fb      	ldr	r3, [r7, #12]
 801c7ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	ptpClock->timePropertiesDS.frequencyTraceable = getFlag(header->flagField[1], FLAG1_FREQUENCY_TRACEABLE);
 801c7d2:	68bb      	ldr	r3, [r7, #8]
 801c7d4:	7a1b      	ldrb	r3, [r3, #8]
 801c7d6:	f003 0320 	and.w	r3, r3, #32
 801c7da:	2b00      	cmp	r3, #0
 801c7dc:	bf14      	ite	ne
 801c7de:	2301      	movne	r3, #1
 801c7e0:	2300      	moveq	r3, #0
 801c7e2:	b2da      	uxtb	r2, r3
 801c7e4:	68fb      	ldr	r3, [r7, #12]
 801c7e6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	ptpClock->timePropertiesDS.ptpTimescale = getFlag(header->flagField[1], FLAG1_PTP_TIMESCALE);
 801c7ea:	68bb      	ldr	r3, [r7, #8]
 801c7ec:	7a1b      	ldrb	r3, [r3, #8]
 801c7ee:	f003 0308 	and.w	r3, r3, #8
 801c7f2:	2b00      	cmp	r3, #0
 801c7f4:	bf14      	ite	ne
 801c7f6:	2301      	movne	r3, #1
 801c7f8:	2300      	moveq	r3, #0
 801c7fa:	b2da      	uxtb	r2, r3
 801c7fc:	68fb      	ldr	r3, [r7, #12]
 801c7fe:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	ptpClock->timePropertiesDS.timeSource = announce->timeSource;
 801c802:	687b      	ldr	r3, [r7, #4]
 801c804:	f893 2020 	ldrb.w	r2, [r3, #32]
 801c808:	68fb      	ldr	r3, [r7, #12]
 801c80a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
}
 801c80e:	bf00      	nop
 801c810:	3718      	adds	r7, #24
 801c812:	46bd      	mov	sp, r7
 801c814:	bd80      	pop	{r7, pc}

0801c816 <copyD0>:

/**
 * \brief Copy local data set into header and announce message. 9.3.4 table 12
 */
void copyD0(MsgHeader *header, MsgAnnounce *announce, PtpClock *ptpClock)
{
 801c816:	b580      	push	{r7, lr}
 801c818:	b084      	sub	sp, #16
 801c81a:	af00      	add	r7, sp, #0
 801c81c:	60f8      	str	r0, [r7, #12]
 801c81e:	60b9      	str	r1, [r7, #8]
 801c820:	607a      	str	r2, [r7, #4]
	announce->grandmasterPriority1 = ptpClock->defaultDS.priority1;
 801c822:	687b      	ldr	r3, [r7, #4]
 801c824:	7c1a      	ldrb	r2, [r3, #16]
 801c826:	68bb      	ldr	r3, [r7, #8]
 801c828:	739a      	strb	r2, [r3, #14]
	memcpy(announce->grandmasterIdentity, ptpClock->defaultDS.clockIdentity, CLOCK_IDENTITY_LENGTH);
 801c82a:	68bb      	ldr	r3, [r7, #8]
 801c82c:	f103 0015 	add.w	r0, r3, #21
 801c830:	687b      	ldr	r3, [r7, #4]
 801c832:	3301      	adds	r3, #1
 801c834:	2208      	movs	r2, #8
 801c836:	4619      	mov	r1, r3
 801c838:	f003 fd10 	bl	802025c <memcpy>
	announce->grandmasterClockQuality.clockClass = ptpClock->defaultDS.clockQuality.clockClass;
 801c83c:	687b      	ldr	r3, [r7, #4]
 801c83e:	7b1a      	ldrb	r2, [r3, #12]
 801c840:	68bb      	ldr	r3, [r7, #8]
 801c842:	741a      	strb	r2, [r3, #16]
	announce->grandmasterClockQuality.clockAccuracy = ptpClock->defaultDS.clockQuality.clockAccuracy;
 801c844:	687b      	ldr	r3, [r7, #4]
 801c846:	7b5a      	ldrb	r2, [r3, #13]
 801c848:	68bb      	ldr	r3, [r7, #8]
 801c84a:	745a      	strb	r2, [r3, #17]
	announce->grandmasterClockQuality.offsetScaledLogVariance = ptpClock->defaultDS.clockQuality.offsetScaledLogVariance;
 801c84c:	687b      	ldr	r3, [r7, #4]
 801c84e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 801c852:	68bb      	ldr	r3, [r7, #8]
 801c854:	825a      	strh	r2, [r3, #18]
	announce->grandmasterPriority2 = ptpClock->defaultDS.priority2;
 801c856:	687b      	ldr	r3, [r7, #4]
 801c858:	7c5a      	ldrb	r2, [r3, #17]
 801c85a:	68bb      	ldr	r3, [r7, #8]
 801c85c:	751a      	strb	r2, [r3, #20]
	announce->stepsRemoved = 0;
 801c85e:	68bb      	ldr	r3, [r7, #8]
 801c860:	2200      	movs	r2, #0
 801c862:	83da      	strh	r2, [r3, #30]
	memcpy(header->sourcePortIdentity.clockIdentity, ptpClock->defaultDS.clockIdentity, CLOCK_IDENTITY_LENGTH);
 801c864:	68fb      	ldr	r3, [r7, #12]
 801c866:	f103 0018 	add.w	r0, r3, #24
 801c86a:	687b      	ldr	r3, [r7, #4]
 801c86c:	3301      	adds	r3, #1
 801c86e:	2208      	movs	r2, #8
 801c870:	4619      	mov	r1, r3
 801c872:	f003 fcf3 	bl	802025c <memcpy>
}
 801c876:	bf00      	nop
 801c878:	3710      	adds	r7, #16
 801c87a:	46bd      	mov	sp, r7
 801c87c:	bd80      	pop	{r7, pc}

0801c87e <bmcDataSetComparison>:
	}                                                                     \

/* Data set comparison bewteen two foreign masters (9.3.4 fig 27) return similar to memcmp() */
int8_t bmcDataSetComparison(MsgHeader *headerA, MsgAnnounce *announceA,
															MsgHeader *headerB, MsgAnnounce *announceB, PtpClock *ptpClock)
{
 801c87e:	b580      	push	{r7, lr}
 801c880:	b086      	sub	sp, #24
 801c882:	af00      	add	r7, sp, #0
 801c884:	60f8      	str	r0, [r7, #12]
 801c886:	60b9      	str	r1, [r7, #8]
 801c888:	607a      	str	r2, [r7, #4]
 801c88a:	603b      	str	r3, [r7, #0]
	int grandmasterIdentityComp;
	short comp = 0;
 801c88c:	2300      	movs	r3, #0
 801c88e:	82fb      	strh	r3, [r7, #22]
	DBGV("bmcDataSetComparison\n");
	/* Identity comparison */

	/* GM identity of A == GM identity of B */
	/* TODO: zkontrolovat memcmp, co vraci za vysledky !*/
	grandmasterIdentityComp = memcmp(announceA->grandmasterIdentity, announceB->grandmasterIdentity, CLOCK_IDENTITY_LENGTH);
 801c890:	68bb      	ldr	r3, [r7, #8]
 801c892:	f103 0015 	add.w	r0, r3, #21
 801c896:	683b      	ldr	r3, [r7, #0]
 801c898:	3315      	adds	r3, #21
 801c89a:	2208      	movs	r2, #8
 801c89c:	4619      	mov	r1, r3
 801c89e:	f003 fccf 	bl	8020240 <memcmp>
 801c8a2:	6138      	str	r0, [r7, #16]

	if (0 != grandmasterIdentityComp)
 801c8a4:	693b      	ldr	r3, [r7, #16]
 801c8a6:	2b00      	cmp	r3, #0
 801c8a8:	d063      	beq.n	801c972 <bmcDataSetComparison+0xf4>
	{
		/* Algoritgm part 1 - Figure 27 */
		COMPARE_AB_RETURN_BETTER(grandmasterPriority1,"grandmaster.Priority1");
 801c8aa:	68bb      	ldr	r3, [r7, #8]
 801c8ac:	7b9a      	ldrb	r2, [r3, #14]
 801c8ae:	683b      	ldr	r3, [r7, #0]
 801c8b0:	7b9b      	ldrb	r3, [r3, #14]
 801c8b2:	429a      	cmp	r2, r3
 801c8b4:	d902      	bls.n	801c8bc <bmcDataSetComparison+0x3e>
 801c8b6:	f04f 33ff 	mov.w	r3, #4294967295
 801c8ba:	e0d0      	b.n	801ca5e <bmcDataSetComparison+0x1e0>
 801c8bc:	683b      	ldr	r3, [r7, #0]
 801c8be:	7b9a      	ldrb	r2, [r3, #14]
 801c8c0:	68bb      	ldr	r3, [r7, #8]
 801c8c2:	7b9b      	ldrb	r3, [r3, #14]
 801c8c4:	429a      	cmp	r2, r3
 801c8c6:	d901      	bls.n	801c8cc <bmcDataSetComparison+0x4e>
 801c8c8:	2301      	movs	r3, #1
 801c8ca:	e0c8      	b.n	801ca5e <bmcDataSetComparison+0x1e0>
		COMPARE_AB_RETURN_BETTER(grandmasterClockQuality.clockClass,"grandmaster.clockClass");
 801c8cc:	68bb      	ldr	r3, [r7, #8]
 801c8ce:	7c1a      	ldrb	r2, [r3, #16]
 801c8d0:	683b      	ldr	r3, [r7, #0]
 801c8d2:	7c1b      	ldrb	r3, [r3, #16]
 801c8d4:	429a      	cmp	r2, r3
 801c8d6:	d902      	bls.n	801c8de <bmcDataSetComparison+0x60>
 801c8d8:	f04f 33ff 	mov.w	r3, #4294967295
 801c8dc:	e0bf      	b.n	801ca5e <bmcDataSetComparison+0x1e0>
 801c8de:	683b      	ldr	r3, [r7, #0]
 801c8e0:	7c1a      	ldrb	r2, [r3, #16]
 801c8e2:	68bb      	ldr	r3, [r7, #8]
 801c8e4:	7c1b      	ldrb	r3, [r3, #16]
 801c8e6:	429a      	cmp	r2, r3
 801c8e8:	d901      	bls.n	801c8ee <bmcDataSetComparison+0x70>
 801c8ea:	2301      	movs	r3, #1
 801c8ec:	e0b7      	b.n	801ca5e <bmcDataSetComparison+0x1e0>
		COMPARE_AB_RETURN_BETTER(grandmasterClockQuality.clockAccuracy,"grandmaster.clockAccuracy");
 801c8ee:	68bb      	ldr	r3, [r7, #8]
 801c8f0:	7c5a      	ldrb	r2, [r3, #17]
 801c8f2:	683b      	ldr	r3, [r7, #0]
 801c8f4:	7c5b      	ldrb	r3, [r3, #17]
 801c8f6:	429a      	cmp	r2, r3
 801c8f8:	d902      	bls.n	801c900 <bmcDataSetComparison+0x82>
 801c8fa:	f04f 33ff 	mov.w	r3, #4294967295
 801c8fe:	e0ae      	b.n	801ca5e <bmcDataSetComparison+0x1e0>
 801c900:	683b      	ldr	r3, [r7, #0]
 801c902:	7c5a      	ldrb	r2, [r3, #17]
 801c904:	68bb      	ldr	r3, [r7, #8]
 801c906:	7c5b      	ldrb	r3, [r3, #17]
 801c908:	429a      	cmp	r2, r3
 801c90a:	d901      	bls.n	801c910 <bmcDataSetComparison+0x92>
 801c90c:	2301      	movs	r3, #1
 801c90e:	e0a6      	b.n	801ca5e <bmcDataSetComparison+0x1e0>
		COMPARE_AB_RETURN_BETTER(grandmasterClockQuality.offsetScaledLogVariance,"grandmaster.Variance");
 801c910:	68bb      	ldr	r3, [r7, #8]
 801c912:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 801c916:	683b      	ldr	r3, [r7, #0]
 801c918:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801c91c:	429a      	cmp	r2, r3
 801c91e:	dd02      	ble.n	801c926 <bmcDataSetComparison+0xa8>
 801c920:	f04f 33ff 	mov.w	r3, #4294967295
 801c924:	e09b      	b.n	801ca5e <bmcDataSetComparison+0x1e0>
 801c926:	683b      	ldr	r3, [r7, #0]
 801c928:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 801c92c:	68bb      	ldr	r3, [r7, #8]
 801c92e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801c932:	429a      	cmp	r2, r3
 801c934:	dd01      	ble.n	801c93a <bmcDataSetComparison+0xbc>
 801c936:	2301      	movs	r3, #1
 801c938:	e091      	b.n	801ca5e <bmcDataSetComparison+0x1e0>
		COMPARE_AB_RETURN_BETTER(grandmasterPriority2,"grandmaster.Priority2");
 801c93a:	68bb      	ldr	r3, [r7, #8]
 801c93c:	7d1a      	ldrb	r2, [r3, #20]
 801c93e:	683b      	ldr	r3, [r7, #0]
 801c940:	7d1b      	ldrb	r3, [r3, #20]
 801c942:	429a      	cmp	r2, r3
 801c944:	d902      	bls.n	801c94c <bmcDataSetComparison+0xce>
 801c946:	f04f 33ff 	mov.w	r3, #4294967295
 801c94a:	e088      	b.n	801ca5e <bmcDataSetComparison+0x1e0>
 801c94c:	683b      	ldr	r3, [r7, #0]
 801c94e:	7d1a      	ldrb	r2, [r3, #20]
 801c950:	68bb      	ldr	r3, [r7, #8]
 801c952:	7d1b      	ldrb	r3, [r3, #20]
 801c954:	429a      	cmp	r2, r3
 801c956:	d901      	bls.n	801c95c <bmcDataSetComparison+0xde>
 801c958:	2301      	movs	r3, #1
 801c95a:	e080      	b.n	801ca5e <bmcDataSetComparison+0x1e0>

		if (grandmasterIdentityComp > 0)
 801c95c:	693b      	ldr	r3, [r7, #16]
 801c95e:	2b00      	cmp	r3, #0
 801c960:	dd02      	ble.n	801c968 <bmcDataSetComparison+0xea>
		{
			DBGVV("bmcDataSetComparison: grandmaster.Identity: B better then A\n");
			return B_better_then_A;
 801c962:	f04f 33ff 	mov.w	r3, #4294967295
 801c966:	e07a      	b.n	801ca5e <bmcDataSetComparison+0x1e0>
		}
		else if (grandmasterIdentityComp < 0)
 801c968:	693b      	ldr	r3, [r7, #16]
 801c96a:	2b00      	cmp	r3, #0
 801c96c:	da01      	bge.n	801c972 <bmcDataSetComparison+0xf4>
		{
			DBGVV("bmcDataSetComparison: grandmaster.Identity: A better then B\n");
			return A_better_then_B;
 801c96e:	2301      	movs	r3, #1
 801c970:	e075      	b.n	801ca5e <bmcDataSetComparison+0x1e0>
		}
	}

	/* Algoritgm part 2 - Figure 28 */
	if ((announceA->stepsRemoved) > (announceB->stepsRemoved + 1))
 801c972:	68bb      	ldr	r3, [r7, #8]
 801c974:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801c978:	461a      	mov	r2, r3
 801c97a:	683b      	ldr	r3, [r7, #0]
 801c97c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801c980:	3301      	adds	r3, #1
 801c982:	429a      	cmp	r2, r3
 801c984:	dd02      	ble.n	801c98c <bmcDataSetComparison+0x10e>
	{
		DBGVV("bmcDataSetComparison: stepsRemoved: B better then A\n");
		return B_better_then_A;
 801c986:	f04f 33ff 	mov.w	r3, #4294967295
 801c98a:	e068      	b.n	801ca5e <bmcDataSetComparison+0x1e0>
	}

	if ((announceB->stepsRemoved) > (announceA->stepsRemoved + 1))
 801c98c:	683b      	ldr	r3, [r7, #0]
 801c98e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801c992:	461a      	mov	r2, r3
 801c994:	68bb      	ldr	r3, [r7, #8]
 801c996:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801c99a:	3301      	adds	r3, #1
 801c99c:	429a      	cmp	r2, r3
 801c99e:	dd01      	ble.n	801c9a4 <bmcDataSetComparison+0x126>
	{
		DBGVV("bmcDataSetComparison: stepsRemoved: A better then B\n");
		return A_better_then_B;
 801c9a0:	2301      	movs	r3, #1
 801c9a2:	e05c      	b.n	801ca5e <bmcDataSetComparison+0x1e0>
	}

	if ((announceA->stepsRemoved) > (announceB->stepsRemoved))
 801c9a4:	68bb      	ldr	r3, [r7, #8]
 801c9a6:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 801c9aa:	683b      	ldr	r3, [r7, #0]
 801c9ac:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801c9b0:	429a      	cmp	r2, r3
 801c9b2:	dd1a      	ble.n	801c9ea <bmcDataSetComparison+0x16c>
	{
		comp = memcmp(headerA->sourcePortIdentity.clockIdentity, ptpClock->portDS.portIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 801c9b4:	68fb      	ldr	r3, [r7, #12]
 801c9b6:	f103 0018 	add.w	r0, r3, #24
 801c9ba:	6a3b      	ldr	r3, [r7, #32]
 801c9bc:	3358      	adds	r3, #88	; 0x58
 801c9be:	2208      	movs	r2, #8
 801c9c0:	4619      	mov	r1, r3
 801c9c2:	f003 fc3d 	bl	8020240 <memcmp>
 801c9c6:	4603      	mov	r3, r0
 801c9c8:	82fb      	strh	r3, [r7, #22]

		if (comp > 0)
 801c9ca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801c9ce:	2b00      	cmp	r3, #0
 801c9d0:	dd02      	ble.n	801c9d8 <bmcDataSetComparison+0x15a>
		{
			/* reciever < sender */
			DBGVV("bmcDataSetComparison: PortIdentity: B better then A\n");
			return B_better_then_A;
 801c9d2:	f04f 33ff 	mov.w	r3, #4294967295
 801c9d6:	e042      	b.n	801ca5e <bmcDataSetComparison+0x1e0>
		}
		else if (comp < 0)
 801c9d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801c9dc:	2b00      	cmp	r3, #0
 801c9de:	da02      	bge.n	801c9e6 <bmcDataSetComparison+0x168>
		{
			/* reciever > sender */
			DBGVV("bmcDataSetComparison: PortIdentity: B better by topology then A\n");
			return B_better_by_topology_then_A;
 801c9e0:	f04f 33ff 	mov.w	r3, #4294967295
 801c9e4:	e03b      	b.n	801ca5e <bmcDataSetComparison+0x1e0>
		}
		else
		{
			DBGVV("bmcDataSetComparison: ERROR 1\n");
			return ERROR_1;
 801c9e6:	2300      	movs	r3, #0
 801c9e8:	e039      	b.n	801ca5e <bmcDataSetComparison+0x1e0>
		}
	}
	else if ((announceA->stepsRemoved) < (announceB->stepsRemoved))
 801c9ea:	68bb      	ldr	r3, [r7, #8]
 801c9ec:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 801c9f0:	683b      	ldr	r3, [r7, #0]
 801c9f2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801c9f6:	429a      	cmp	r2, r3
 801c9f8:	da18      	bge.n	801ca2c <bmcDataSetComparison+0x1ae>
	{
		comp = memcmp(headerB->sourcePortIdentity.clockIdentity, ptpClock->portDS.portIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 801c9fa:	687b      	ldr	r3, [r7, #4]
 801c9fc:	f103 0018 	add.w	r0, r3, #24
 801ca00:	6a3b      	ldr	r3, [r7, #32]
 801ca02:	3358      	adds	r3, #88	; 0x58
 801ca04:	2208      	movs	r2, #8
 801ca06:	4619      	mov	r1, r3
 801ca08:	f003 fc1a 	bl	8020240 <memcmp>
 801ca0c:	4603      	mov	r3, r0
 801ca0e:	82fb      	strh	r3, [r7, #22]
		if (comp > 0)
 801ca10:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801ca14:	2b00      	cmp	r3, #0
 801ca16:	dd01      	ble.n	801ca1c <bmcDataSetComparison+0x19e>
		{
			/* reciever < sender */
			DBGVV("bmcDataSetComparison: PortIdentity: A better then B\n");
			return A_better_then_B;
 801ca18:	2301      	movs	r3, #1
 801ca1a:	e020      	b.n	801ca5e <bmcDataSetComparison+0x1e0>
		}
		else if (comp < 0)
 801ca1c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801ca20:	2b00      	cmp	r3, #0
 801ca22:	da01      	bge.n	801ca28 <bmcDataSetComparison+0x1aa>
		{
			/* reciever > sender */
			DBGVV("bmcDataSetComparison: PortIdentity: A better by topology then B\n");
			return A_better_by_topology_then_B;
 801ca24:	2301      	movs	r3, #1
 801ca26:	e01a      	b.n	801ca5e <bmcDataSetComparison+0x1e0>
		}
		else
		{
			DBGV("bmcDataSetComparison: ERROR 1\n");
			return ERROR_1;
 801ca28:	2300      	movs	r3, #0
 801ca2a:	e018      	b.n	801ca5e <bmcDataSetComparison+0x1e0>
		}
	}

	comp = memcmp(headerA->sourcePortIdentity.clockIdentity, headerB->sourcePortIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 801ca2c:	68fb      	ldr	r3, [r7, #12]
 801ca2e:	f103 0018 	add.w	r0, r3, #24
 801ca32:	687b      	ldr	r3, [r7, #4]
 801ca34:	3318      	adds	r3, #24
 801ca36:	2208      	movs	r2, #8
 801ca38:	4619      	mov	r1, r3
 801ca3a:	f003 fc01 	bl	8020240 <memcmp>
 801ca3e:	4603      	mov	r3, r0
 801ca40:	82fb      	strh	r3, [r7, #22]
	if (comp > 0)
 801ca42:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801ca46:	2b00      	cmp	r3, #0
 801ca48:	dd02      	ble.n	801ca50 <bmcDataSetComparison+0x1d2>
	{
		/* A > B */
		DBGVV("bmcDataSetComparison: sourcePortIdentity: B better by topology then A\n");
		return B_better_by_topology_then_A;
 801ca4a:	f04f 33ff 	mov.w	r3, #4294967295
 801ca4e:	e006      	b.n	801ca5e <bmcDataSetComparison+0x1e0>
	}
	else if (comp < 0)
 801ca50:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801ca54:	2b00      	cmp	r3, #0
 801ca56:	da01      	bge.n	801ca5c <bmcDataSetComparison+0x1de>
	{
		/* B > A */
		DBGVV("bmcDataSetComparison: sourcePortIdentity: A better by topology then B\n");
		return A_better_by_topology_then_B;
 801ca58:	2301      	movs	r3, #1
 801ca5a:	e000      	b.n	801ca5e <bmcDataSetComparison+0x1e0>
	}

	/* compare port numbers of recievers of A and B - same as we have only one port */
	DBGV("bmcDataSetComparison: ERROR 2\n");
	return ERROR_2;
 801ca5c:	2300      	movs	r3, #0
}
 801ca5e:	4618      	mov	r0, r3
 801ca60:	3718      	adds	r7, #24
 801ca62:	46bd      	mov	sp, r7
 801ca64:	bd80      	pop	{r7, pc}

0801ca66 <bmcStateDecision>:

/* State decision algorithm 9.3.3 Fig 26 */
uint8_t bmcStateDecision(MsgHeader *header, MsgAnnounce *announce, PtpClock *ptpClock)
{
 801ca66:	b580      	push	{r7, lr}
 801ca68:	b088      	sub	sp, #32
 801ca6a:	af02      	add	r7, sp, #8
 801ca6c:	60f8      	str	r0, [r7, #12]
 801ca6e:	60b9      	str	r1, [r7, #8]
 801ca70:	607a      	str	r2, [r7, #4]
	int comp;

	if ((!ptpClock->foreignMasterDS.count) && (ptpClock->portDS.portState == PTP_LISTENING))
 801ca72:	687b      	ldr	r3, [r7, #4]
 801ca74:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	; 0x78
 801ca78:	2b00      	cmp	r3, #0
 801ca7a:	d106      	bne.n	801ca8a <bmcStateDecision+0x24>
 801ca7c:	687b      	ldr	r3, [r7, #4]
 801ca7e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 801ca82:	2b03      	cmp	r3, #3
 801ca84:	d101      	bne.n	801ca8a <bmcStateDecision+0x24>
	{
		return PTP_LISTENING;
 801ca86:	2303      	movs	r3, #3
 801ca88:	e036      	b.n	801caf8 <bmcStateDecision+0x92>
	}

	copyD0(&ptpClock->msgTmpHeader, &ptpClock->msgTmp.announce, ptpClock);
 801ca8a:	687b      	ldr	r3, [r7, #4]
 801ca8c:	f103 0080 	add.w	r0, r3, #128	; 0x80
 801ca90:	687b      	ldr	r3, [r7, #4]
 801ca92:	33a8      	adds	r3, #168	; 0xa8
 801ca94:	687a      	ldr	r2, [r7, #4]
 801ca96:	4619      	mov	r1, r3
 801ca98:	f7ff febd 	bl	801c816 <copyD0>

	comp = bmcDataSetComparison(&ptpClock->msgTmpHeader, &ptpClock->msgTmp.announce, header, announce, ptpClock);
 801ca9c:	687b      	ldr	r3, [r7, #4]
 801ca9e:	f103 0080 	add.w	r0, r3, #128	; 0x80
 801caa2:	687b      	ldr	r3, [r7, #4]
 801caa4:	f103 01a8 	add.w	r1, r3, #168	; 0xa8
 801caa8:	687b      	ldr	r3, [r7, #4]
 801caaa:	9300      	str	r3, [sp, #0]
 801caac:	68bb      	ldr	r3, [r7, #8]
 801caae:	68fa      	ldr	r2, [r7, #12]
 801cab0:	f7ff fee5 	bl	801c87e <bmcDataSetComparison>
 801cab4:	4603      	mov	r3, r0
 801cab6:	617b      	str	r3, [r7, #20]

	DBGV("bmcStateDecision: %d\n", comp);

	if (ptpClock->defaultDS.clockQuality.clockClass < 128)
 801cab8:	687b      	ldr	r3, [r7, #4]
 801caba:	7b1b      	ldrb	r3, [r3, #12]
 801cabc:	b25b      	sxtb	r3, r3
 801cabe:	2b00      	cmp	r3, #0
 801cac0:	db0c      	blt.n	801cadc <bmcStateDecision+0x76>
	{
		if (A_better_then_B == comp)
 801cac2:	697b      	ldr	r3, [r7, #20]
 801cac4:	2b01      	cmp	r3, #1
 801cac6:	d104      	bne.n	801cad2 <bmcStateDecision+0x6c>
		{
			m1(ptpClock);  /* M1 */
 801cac8:	6878      	ldr	r0, [r7, #4]
 801caca:	f7ff fd7d 	bl	801c5c8 <m1>
			return PTP_MASTER;
 801cace:	2305      	movs	r3, #5
 801cad0:	e012      	b.n	801caf8 <bmcStateDecision+0x92>
		}
		else
		{
			p1(ptpClock);
 801cad2:	6878      	ldr	r0, [r7, #4]
 801cad4:	f7ff fde4 	bl	801c6a0 <p1>
			return PTP_PASSIVE;
 801cad8:	2306      	movs	r3, #6
 801cada:	e00d      	b.n	801caf8 <bmcStateDecision+0x92>
		}
	}
	else
	{
		if (A_better_then_B == comp)
 801cadc:	697b      	ldr	r3, [r7, #20]
 801cade:	2b01      	cmp	r3, #1
 801cae0:	d104      	bne.n	801caec <bmcStateDecision+0x86>
		{
			m2(ptpClock); /* M2 */
 801cae2:	6878      	ldr	r0, [r7, #4]
 801cae4:	f7ff fd70 	bl	801c5c8 <m1>
			return PTP_MASTER;
 801cae8:	2305      	movs	r3, #5
 801caea:	e005      	b.n	801caf8 <bmcStateDecision+0x92>
		}
		else
		{
			s1(ptpClock, header, announce);
 801caec:	68ba      	ldr	r2, [r7, #8]
 801caee:	68f9      	ldr	r1, [r7, #12]
 801caf0:	6878      	ldr	r0, [r7, #4]
 801caf2:	f7ff fddf 	bl	801c6b4 <s1>
			return PTP_SLAVE;
 801caf6:	2308      	movs	r3, #8
		}
	}
}
 801caf8:	4618      	mov	r0, r3
 801cafa:	3718      	adds	r7, #24
 801cafc:	46bd      	mov	sp, r7
 801cafe:	bd80      	pop	{r7, pc}

0801cb00 <bmc>:



uint8_t bmc(PtpClock *ptpClock)
{
 801cb00:	b5b0      	push	{r4, r5, r7, lr}
 801cb02:	b086      	sub	sp, #24
 801cb04:	af02      	add	r7, sp, #8
 801cb06:	6078      	str	r0, [r7, #4]
	int16_t i, best;

	/* Starting from i = 1, not necessery to test record[i = 0] against record[best = 0] -> they are the same */
	for (i = 1, best = 0; i < ptpClock->foreignMasterDS.count; i++)
 801cb08:	2301      	movs	r3, #1
 801cb0a:	81fb      	strh	r3, [r7, #14]
 801cb0c:	2300      	movs	r3, #0
 801cb0e:	81bb      	strh	r3, [r7, #12]
 801cb10:	e038      	b.n	801cb84 <bmc+0x84>
	{
		if ((bmcDataSetComparison(&ptpClock->foreignMasterDS.records[i].header, &ptpClock->foreignMasterDS.records[i].announce,
 801cb12:	687b      	ldr	r3, [r7, #4]
 801cb14:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 801cb16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801cb1a:	2158      	movs	r1, #88	; 0x58
 801cb1c:	fb01 f303 	mul.w	r3, r1, r3
 801cb20:	4413      	add	r3, r2
 801cb22:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801cb26:	687b      	ldr	r3, [r7, #4]
 801cb28:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 801cb2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801cb2e:	2158      	movs	r1, #88	; 0x58
 801cb30:	fb01 f303 	mul.w	r3, r1, r3
 801cb34:	4413      	add	r3, r2
 801cb36:	f103 010c 	add.w	r1, r3, #12
															&ptpClock->foreignMasterDS.records[best].header, &ptpClock->foreignMasterDS.records[best].announce, ptpClock)) < 0)
 801cb3a:	687b      	ldr	r3, [r7, #4]
 801cb3c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 801cb3e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801cb42:	2458      	movs	r4, #88	; 0x58
 801cb44:	fb04 f303 	mul.w	r3, r4, r3
 801cb48:	4413      	add	r3, r2
		if ((bmcDataSetComparison(&ptpClock->foreignMasterDS.records[i].header, &ptpClock->foreignMasterDS.records[i].announce,
 801cb4a:	f103 0430 	add.w	r4, r3, #48	; 0x30
															&ptpClock->foreignMasterDS.records[best].header, &ptpClock->foreignMasterDS.records[best].announce, ptpClock)) < 0)
 801cb4e:	687b      	ldr	r3, [r7, #4]
 801cb50:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 801cb52:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801cb56:	2558      	movs	r5, #88	; 0x58
 801cb58:	fb05 f303 	mul.w	r3, r5, r3
 801cb5c:	4413      	add	r3, r2
		if ((bmcDataSetComparison(&ptpClock->foreignMasterDS.records[i].header, &ptpClock->foreignMasterDS.records[i].announce,
 801cb5e:	f103 020c 	add.w	r2, r3, #12
 801cb62:	687b      	ldr	r3, [r7, #4]
 801cb64:	9300      	str	r3, [sp, #0]
 801cb66:	4613      	mov	r3, r2
 801cb68:	4622      	mov	r2, r4
 801cb6a:	f7ff fe88 	bl	801c87e <bmcDataSetComparison>
 801cb6e:	4603      	mov	r3, r0
 801cb70:	2b00      	cmp	r3, #0
 801cb72:	da01      	bge.n	801cb78 <bmc+0x78>
		{
			best = i;
 801cb74:	89fb      	ldrh	r3, [r7, #14]
 801cb76:	81bb      	strh	r3, [r7, #12]
	for (i = 1, best = 0; i < ptpClock->foreignMasterDS.count; i++)
 801cb78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801cb7c:	b29b      	uxth	r3, r3
 801cb7e:	3301      	adds	r3, #1
 801cb80:	b29b      	uxth	r3, r3
 801cb82:	81fb      	strh	r3, [r7, #14]
 801cb84:	687b      	ldr	r3, [r7, #4]
 801cb86:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	; 0x78
 801cb8a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801cb8e:	429a      	cmp	r2, r3
 801cb90:	dbbf      	blt.n	801cb12 <bmc+0x12>
		}
	}

	DBGV("bmc: best record %d\n", best);
	ptpClock->foreignMasterDS.best = best;
 801cb92:	687b      	ldr	r3, [r7, #4]
 801cb94:	89ba      	ldrh	r2, [r7, #12]
 801cb96:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	return bmcStateDecision(&ptpClock->foreignMasterDS.records[best].header, &ptpClock->foreignMasterDS.records[best].announce, ptpClock);
 801cb9a:	687b      	ldr	r3, [r7, #4]
 801cb9c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 801cb9e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801cba2:	2158      	movs	r1, #88	; 0x58
 801cba4:	fb01 f303 	mul.w	r3, r1, r3
 801cba8:	4413      	add	r3, r2
 801cbaa:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801cbae:	687b      	ldr	r3, [r7, #4]
 801cbb0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 801cbb2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801cbb6:	2158      	movs	r1, #88	; 0x58
 801cbb8:	fb01 f303 	mul.w	r3, r1, r3
 801cbbc:	4413      	add	r3, r2
 801cbbe:	330c      	adds	r3, #12
 801cbc0:	687a      	ldr	r2, [r7, #4]
 801cbc2:	4619      	mov	r1, r3
 801cbc4:	f7ff ff4f 	bl	801ca66 <bmcStateDecision>
 801cbc8:	4603      	mov	r3, r0
}
 801cbca:	4618      	mov	r0, r3
 801cbcc:	3710      	adds	r7, #16
 801cbce:	46bd      	mov	sp, r7
 801cbd0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801cbd4 <toState>:
}
#endif

/* Perform actions required when leaving 'port_state' and entering 'state' */
void toState(PtpClock *ptpClock, uint8_t state)
{
 801cbd4:	b580      	push	{r7, lr}
 801cbd6:	b082      	sub	sp, #8
 801cbd8:	af00      	add	r7, sp, #0
 801cbda:	6078      	str	r0, [r7, #4]
 801cbdc:	460b      	mov	r3, r1
 801cbde:	70fb      	strb	r3, [r7, #3]
	ptpClock->messageActivity = TRUE;
 801cbe0:	687b      	ldr	r3, [r7, #4]
 801cbe2:	2201      	movs	r2, #1
 801cbe4:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8

	DBG("leaving state %s\n", stateString(ptpClock->portDS.portState));

	/* leaving state tasks */
	switch (ptpClock->portDS.portState)
 801cbe8:	687b      	ldr	r3, [r7, #4]
 801cbea:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 801cbee:	3b03      	subs	r3, #3
 801cbf0:	2b05      	cmp	r3, #5
 801cbf2:	d851      	bhi.n	801cc98 <toState+0xc4>
 801cbf4:	a201      	add	r2, pc, #4	; (adr r2, 801cbfc <toState+0x28>)
 801cbf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cbfa:	bf00      	nop
 801cbfc:	0801cc7d 	.word	0x0801cc7d
 801cc00:	0801cc8b 	.word	0x0801cc8b
 801cc04:	0801cc15 	.word	0x0801cc15
 801cc08:	0801cc69 	.word	0x0801cc69
 801cc0c:	0801cc2f 	.word	0x0801cc2f
 801cc10:	0801cc2f 	.word	0x0801cc2f
	{
		case PTP_MASTER:

			initClock(ptpClock);
 801cc14:	6878      	ldr	r0, [r7, #4]
 801cc16:	f002 fedb 	bl	801f9d0 <initClock>
			timerStop(SYNC_INTERVAL_TIMER);
 801cc1a:	2002      	movs	r0, #2
 801cc1c:	f003 fa76 	bl	802010c <timerStop>
			timerStop(ANNOUNCE_INTERVAL_TIMER);
 801cc20:	2004      	movs	r0, #4
 801cc22:	f003 fa73 	bl	802010c <timerStop>
			timerStop(PDELAYREQ_INTERVAL_TIMER);
 801cc26:	2000      	movs	r0, #0
 801cc28:	f003 fa70 	bl	802010c <timerStop>
			break;
 801cc2c:	e037      	b.n	801cc9e <toState+0xca>

		case PTP_UNCALIBRATED:
		case PTP_SLAVE:

			if (state == PTP_UNCALIBRATED || state == PTP_SLAVE)
 801cc2e:	78fb      	ldrb	r3, [r7, #3]
 801cc30:	2b07      	cmp	r3, #7
 801cc32:	d033      	beq.n	801cc9c <toState+0xc8>
 801cc34:	78fb      	ldrb	r3, [r7, #3]
 801cc36:	2b08      	cmp	r3, #8
 801cc38:	d030      	beq.n	801cc9c <toState+0xc8>
			{
				break;
			}
			timerStop(ANNOUNCE_RECEIPT_TIMER);
 801cc3a:	2003      	movs	r0, #3
 801cc3c:	f003 fa66 	bl	802010c <timerStop>
			switch (ptpClock->portDS.delayMechanism)
 801cc40:	687b      	ldr	r3, [r7, #4]
 801cc42:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 801cc46:	2b01      	cmp	r3, #1
 801cc48:	d002      	beq.n	801cc50 <toState+0x7c>
 801cc4a:	2b02      	cmp	r3, #2
 801cc4c:	d004      	beq.n	801cc58 <toState+0x84>
				case P2P:
					timerStop(PDELAYREQ_INTERVAL_TIMER);
					break;
				default:
					/* none */
					break;
 801cc4e:	e007      	b.n	801cc60 <toState+0x8c>
					timerStop(DELAYREQ_INTERVAL_TIMER);
 801cc50:	2001      	movs	r0, #1
 801cc52:	f003 fa5b 	bl	802010c <timerStop>
					break;
 801cc56:	e003      	b.n	801cc60 <toState+0x8c>
					timerStop(PDELAYREQ_INTERVAL_TIMER);
 801cc58:	2000      	movs	r0, #0
 801cc5a:	f003 fa57 	bl	802010c <timerStop>
					break;
 801cc5e:	bf00      	nop
			}
			initClock(ptpClock);
 801cc60:	6878      	ldr	r0, [r7, #4]
 801cc62:	f002 feb5 	bl	801f9d0 <initClock>

			break;
 801cc66:	e01a      	b.n	801cc9e <toState+0xca>

		case PTP_PASSIVE:

			initClock(ptpClock);
 801cc68:	6878      	ldr	r0, [r7, #4]
 801cc6a:	f002 feb1 	bl	801f9d0 <initClock>
			timerStop(PDELAYREQ_INTERVAL_TIMER);
 801cc6e:	2000      	movs	r0, #0
 801cc70:	f003 fa4c 	bl	802010c <timerStop>
			timerStop(ANNOUNCE_RECEIPT_TIMER);
 801cc74:	2003      	movs	r0, #3
 801cc76:	f003 fa49 	bl	802010c <timerStop>
			break;
 801cc7a:	e010      	b.n	801cc9e <toState+0xca>

		case PTP_LISTENING:

			initClock(ptpClock);
 801cc7c:	6878      	ldr	r0, [r7, #4]
 801cc7e:	f002 fea7 	bl	801f9d0 <initClock>
			timerStop(ANNOUNCE_RECEIPT_TIMER);
 801cc82:	2003      	movs	r0, #3
 801cc84:	f003 fa42 	bl	802010c <timerStop>
			break;
 801cc88:	e009      	b.n	801cc9e <toState+0xca>

		case PTP_PRE_MASTER:

			initClock(ptpClock);
 801cc8a:	6878      	ldr	r0, [r7, #4]
 801cc8c:	f002 fea0 	bl	801f9d0 <initClock>
			timerStop(QUALIFICATION_TIMEOUT);
 801cc90:	2005      	movs	r0, #5
 801cc92:	f003 fa3b 	bl	802010c <timerStop>
			break;
 801cc96:	e002      	b.n	801cc9e <toState+0xca>

		default:
			break;
 801cc98:	bf00      	nop
 801cc9a:	e000      	b.n	801cc9e <toState+0xca>
	}

	DBG("entering state %s\n", stateString(state));
 801cc9c:	bf00      	nop

	/* Entering state tasks */
	switch (state)
 801cc9e:	78fb      	ldrb	r3, [r7, #3]
 801cca0:	2b08      	cmp	r3, #8
 801cca2:	f200 816b 	bhi.w	801cf7c <toState+0x3a8>
 801cca6:	a201      	add	r2, pc, #4	; (adr r2, 801ccac <toState+0xd8>)
 801cca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ccac:	0801ccd1 	.word	0x0801ccd1
 801ccb0:	0801cce3 	.word	0x0801cce3
 801ccb4:	0801cced 	.word	0x0801cced
 801ccb8:	0801ccf7 	.word	0x0801ccf7
 801ccbc:	0801cd47 	.word	0x0801cd47
 801ccc0:	0801cd47 	.word	0x0801cd47
 801ccc4:	0801ce11 	.word	0x0801ce11
 801ccc8:	0801ce9f 	.word	0x0801ce9f
 801cccc:	0801cf73 	.word	0x0801cf73
	{
		case PTP_INITIALIZING:

			ptpClock->portDS.portState = PTP_INITIALIZING;
 801ccd0:	687b      	ldr	r3, [r7, #4]
 801ccd2:	2200      	movs	r2, #0
 801ccd4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
			ptpClock->recommendedState = PTP_INITIALIZING;
 801ccd8:	687b      	ldr	r3, [r7, #4]
 801ccda:	2200      	movs	r2, #0
 801ccdc:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			break;
 801cce0:	e14d      	b.n	801cf7e <toState+0x3aa>

		case PTP_FAULTY:

			ptpClock->portDS.portState = PTP_FAULTY;
 801cce2:	687b      	ldr	r3, [r7, #4]
 801cce4:	2201      	movs	r2, #1
 801cce6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
			break;
 801ccea:	e148      	b.n	801cf7e <toState+0x3aa>

		case PTP_DISABLED:

			ptpClock->portDS.portState = PTP_DISABLED;
 801ccec:	687b      	ldr	r3, [r7, #4]
 801ccee:	2202      	movs	r2, #2
 801ccf0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
			break;
 801ccf4:	e143      	b.n	801cf7e <toState+0x3aa>

		case PTP_LISTENING:

			timerStart(ANNOUNCE_RECEIPT_TIMER, (ptpClock->portDS.announceReceiptTimeout) * (pow2ms(ptpClock->portDS.logAnnounceInterval)));
 801ccf6:	687b      	ldr	r3, [r7, #4]
 801ccf8:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 801ccfc:	4619      	mov	r1, r3
 801ccfe:	687b      	ldr	r3, [r7, #4]
 801cd00:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 801cd04:	2b00      	cmp	r3, #0
 801cd06:	dd07      	ble.n	801cd18 <toState+0x144>
 801cd08:	687b      	ldr	r3, [r7, #4]
 801cd0a:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 801cd0e:	461a      	mov	r2, r3
 801cd10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801cd14:	4093      	lsls	r3, r2
 801cd16:	e007      	b.n	801cd28 <toState+0x154>
 801cd18:	687b      	ldr	r3, [r7, #4]
 801cd1a:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 801cd1e:	425b      	negs	r3, r3
 801cd20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801cd24:	fa42 f303 	asr.w	r3, r2, r3
 801cd28:	fb01 f303 	mul.w	r3, r1, r3
 801cd2c:	4619      	mov	r1, r3
 801cd2e:	2003      	movs	r0, #3
 801cd30:	f003 fa10 	bl	8020154 <timerStart>
			ptpClock->portDS.portState = PTP_LISTENING;
 801cd34:	687b      	ldr	r3, [r7, #4]
 801cd36:	2203      	movs	r2, #3
 801cd38:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
			ptpClock->recommendedState = PTP_LISTENING;
 801cd3c:	687b      	ldr	r3, [r7, #4]
 801cd3e:	2203      	movs	r2, #3
 801cd40:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			break;
 801cd44:	e11b      	b.n	801cf7e <toState+0x3aa>
			break;
			*/

		case PTP_MASTER:

			ptpClock->portDS.logMinDelayReqInterval = DEFAULT_DELAYREQ_INTERVAL; /* it may change during slave state */
 801cd46:	687b      	ldr	r3, [r7, #4]
 801cd48:	2203      	movs	r2, #3
 801cd4a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
			timerStart(SYNC_INTERVAL_TIMER, pow2ms(ptpClock->portDS.logSyncInterval));
 801cd4e:	687b      	ldr	r3, [r7, #4]
 801cd50:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 801cd54:	2b00      	cmp	r3, #0
 801cd56:	dd07      	ble.n	801cd68 <toState+0x194>
 801cd58:	687b      	ldr	r3, [r7, #4]
 801cd5a:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 801cd5e:	461a      	mov	r2, r3
 801cd60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801cd64:	4093      	lsls	r3, r2
 801cd66:	e007      	b.n	801cd78 <toState+0x1a4>
 801cd68:	687b      	ldr	r3, [r7, #4]
 801cd6a:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 801cd6e:	425b      	negs	r3, r3
 801cd70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801cd74:	fa42 f303 	asr.w	r3, r2, r3
 801cd78:	4619      	mov	r1, r3
 801cd7a:	2002      	movs	r0, #2
 801cd7c:	f003 f9ea 	bl	8020154 <timerStart>
			DBG("SYNC INTERVAL TIMER : %d \n", pow2ms(ptpClock->portDS.logSyncInterval));
			timerStart(ANNOUNCE_INTERVAL_TIMER, pow2ms(ptpClock->portDS.logAnnounceInterval));
 801cd80:	687b      	ldr	r3, [r7, #4]
 801cd82:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 801cd86:	2b00      	cmp	r3, #0
 801cd88:	dd07      	ble.n	801cd9a <toState+0x1c6>
 801cd8a:	687b      	ldr	r3, [r7, #4]
 801cd8c:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 801cd90:	461a      	mov	r2, r3
 801cd92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801cd96:	4093      	lsls	r3, r2
 801cd98:	e007      	b.n	801cdaa <toState+0x1d6>
 801cd9a:	687b      	ldr	r3, [r7, #4]
 801cd9c:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 801cda0:	425b      	negs	r3, r3
 801cda2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801cda6:	fa42 f303 	asr.w	r3, r2, r3
 801cdaa:	4619      	mov	r1, r3
 801cdac:	2004      	movs	r0, #4
 801cdae:	f003 f9d1 	bl	8020154 <timerStart>

			switch (ptpClock->portDS.delayMechanism)
 801cdb2:	687b      	ldr	r3, [r7, #4]
 801cdb4:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 801cdb8:	2b01      	cmp	r3, #1
 801cdba:	d021      	beq.n	801ce00 <toState+0x22c>
 801cdbc:	2b02      	cmp	r3, #2
 801cdbe:	d121      	bne.n	801ce04 <toState+0x230>
			{
				case E2E:
						/* none */
						break;
				case P2P:
						timerStart(PDELAYREQ_INTERVAL_TIMER, getRand(pow2ms(ptpClock->portDS.logMinPdelayReqInterval) + 1));
 801cdc0:	687b      	ldr	r3, [r7, #4]
 801cdc2:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 801cdc6:	2b00      	cmp	r3, #0
 801cdc8:	dd08      	ble.n	801cddc <toState+0x208>
 801cdca:	687b      	ldr	r3, [r7, #4]
 801cdcc:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 801cdd0:	461a      	mov	r2, r3
 801cdd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801cdd6:	4093      	lsls	r3, r2
 801cdd8:	3301      	adds	r3, #1
 801cdda:	e008      	b.n	801cdee <toState+0x21a>
 801cddc:	687b      	ldr	r3, [r7, #4]
 801cdde:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 801cde2:	425b      	negs	r3, r3
 801cde4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801cde8:	fa42 f303 	asr.w	r3, r2, r3
 801cdec:	3301      	adds	r3, #1
 801cdee:	4618      	mov	r0, r3
 801cdf0:	f003 f936 	bl	8020060 <getRand>
 801cdf4:	4603      	mov	r3, r0
 801cdf6:	4619      	mov	r1, r3
 801cdf8:	2000      	movs	r0, #0
 801cdfa:	f003 f9ab 	bl	8020154 <timerStart>
						break;
 801cdfe:	e002      	b.n	801ce06 <toState+0x232>
						break;
 801ce00:	bf00      	nop
 801ce02:	e000      	b.n	801ce06 <toState+0x232>
				default:
						break;
 801ce04:	bf00      	nop
			}

			ptpClock->portDS.portState = PTP_MASTER;
 801ce06:	687b      	ldr	r3, [r7, #4]
 801ce08:	2205      	movs	r2, #5
 801ce0a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

			break;
 801ce0e:	e0b6      	b.n	801cf7e <toState+0x3aa>

		case PTP_PASSIVE:

			timerStart(ANNOUNCE_RECEIPT_TIMER, (ptpClock->portDS.announceReceiptTimeout)*(pow2ms(ptpClock->portDS.logAnnounceInterval)));
 801ce10:	687b      	ldr	r3, [r7, #4]
 801ce12:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 801ce16:	4619      	mov	r1, r3
 801ce18:	687b      	ldr	r3, [r7, #4]
 801ce1a:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 801ce1e:	2b00      	cmp	r3, #0
 801ce20:	dd07      	ble.n	801ce32 <toState+0x25e>
 801ce22:	687b      	ldr	r3, [r7, #4]
 801ce24:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 801ce28:	461a      	mov	r2, r3
 801ce2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801ce2e:	4093      	lsls	r3, r2
 801ce30:	e007      	b.n	801ce42 <toState+0x26e>
 801ce32:	687b      	ldr	r3, [r7, #4]
 801ce34:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 801ce38:	425b      	negs	r3, r3
 801ce3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801ce3e:	fa42 f303 	asr.w	r3, r2, r3
 801ce42:	fb01 f303 	mul.w	r3, r1, r3
 801ce46:	4619      	mov	r1, r3
 801ce48:	2003      	movs	r0, #3
 801ce4a:	f003 f983 	bl	8020154 <timerStart>
			if (ptpClock->portDS.delayMechanism == P2P)
 801ce4e:	687b      	ldr	r3, [r7, #4]
 801ce50:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 801ce54:	2b02      	cmp	r3, #2
 801ce56:	d11d      	bne.n	801ce94 <toState+0x2c0>
			{
				timerStart(PDELAYREQ_INTERVAL_TIMER, getRand(pow2ms(ptpClock->portDS.logMinPdelayReqInterval + 1)));
 801ce58:	687b      	ldr	r3, [r7, #4]
 801ce5a:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 801ce5e:	2b00      	cmp	r3, #0
 801ce60:	db08      	blt.n	801ce74 <toState+0x2a0>
 801ce62:	687b      	ldr	r3, [r7, #4]
 801ce64:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 801ce68:	3301      	adds	r3, #1
 801ce6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801ce6e:	fa02 f303 	lsl.w	r3, r2, r3
 801ce72:	e007      	b.n	801ce84 <toState+0x2b0>
 801ce74:	687b      	ldr	r3, [r7, #4]
 801ce76:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 801ce7a:	43db      	mvns	r3, r3
 801ce7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801ce80:	fa42 f303 	asr.w	r3, r2, r3
 801ce84:	4618      	mov	r0, r3
 801ce86:	f003 f8eb 	bl	8020060 <getRand>
 801ce8a:	4603      	mov	r3, r0
 801ce8c:	4619      	mov	r1, r3
 801ce8e:	2000      	movs	r0, #0
 801ce90:	f003 f960 	bl	8020154 <timerStart>
			}
			ptpClock->portDS.portState = PTP_PASSIVE;
 801ce94:	687b      	ldr	r3, [r7, #4]
 801ce96:	2206      	movs	r2, #6
 801ce98:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

			break;
 801ce9c:	e06f      	b.n	801cf7e <toState+0x3aa>

		case PTP_UNCALIBRATED:

			timerStart(ANNOUNCE_RECEIPT_TIMER, (ptpClock->portDS.announceReceiptTimeout)*(pow2ms(ptpClock->portDS.logAnnounceInterval)));
 801ce9e:	687b      	ldr	r3, [r7, #4]
 801cea0:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 801cea4:	4619      	mov	r1, r3
 801cea6:	687b      	ldr	r3, [r7, #4]
 801cea8:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 801ceac:	2b00      	cmp	r3, #0
 801ceae:	dd07      	ble.n	801cec0 <toState+0x2ec>
 801ceb0:	687b      	ldr	r3, [r7, #4]
 801ceb2:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 801ceb6:	461a      	mov	r2, r3
 801ceb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801cebc:	4093      	lsls	r3, r2
 801cebe:	e007      	b.n	801ced0 <toState+0x2fc>
 801cec0:	687b      	ldr	r3, [r7, #4]
 801cec2:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 801cec6:	425b      	negs	r3, r3
 801cec8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801cecc:	fa42 f303 	asr.w	r3, r2, r3
 801ced0:	fb01 f303 	mul.w	r3, r1, r3
 801ced4:	4619      	mov	r1, r3
 801ced6:	2003      	movs	r0, #3
 801ced8:	f003 f93c 	bl	8020154 <timerStart>
			switch (ptpClock->portDS.delayMechanism)
 801cedc:	687b      	ldr	r3, [r7, #4]
 801cede:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 801cee2:	2b01      	cmp	r3, #1
 801cee4:	d002      	beq.n	801ceec <toState+0x318>
 801cee6:	2b02      	cmp	r3, #2
 801cee8:	d01f      	beq.n	801cf2a <toState+0x356>
				case P2P:
						timerStart(PDELAYREQ_INTERVAL_TIMER, getRand(pow2ms(ptpClock->portDS.logMinPdelayReqInterval + 1)));
						break;
				default:
						/* none */
						break;
 801ceea:	e03d      	b.n	801cf68 <toState+0x394>
						timerStart(DELAYREQ_INTERVAL_TIMER, getRand(pow2ms(ptpClock->portDS.logMinDelayReqInterval + 1)));
 801ceec:	687b      	ldr	r3, [r7, #4]
 801ceee:	f993 3063 	ldrsb.w	r3, [r3, #99]	; 0x63
 801cef2:	2b00      	cmp	r3, #0
 801cef4:	db08      	blt.n	801cf08 <toState+0x334>
 801cef6:	687b      	ldr	r3, [r7, #4]
 801cef8:	f993 3063 	ldrsb.w	r3, [r3, #99]	; 0x63
 801cefc:	3301      	adds	r3, #1
 801cefe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801cf02:	fa02 f303 	lsl.w	r3, r2, r3
 801cf06:	e007      	b.n	801cf18 <toState+0x344>
 801cf08:	687b      	ldr	r3, [r7, #4]
 801cf0a:	f993 3063 	ldrsb.w	r3, [r3, #99]	; 0x63
 801cf0e:	43db      	mvns	r3, r3
 801cf10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801cf14:	fa42 f303 	asr.w	r3, r2, r3
 801cf18:	4618      	mov	r0, r3
 801cf1a:	f003 f8a1 	bl	8020060 <getRand>
 801cf1e:	4603      	mov	r3, r0
 801cf20:	4619      	mov	r1, r3
 801cf22:	2001      	movs	r0, #1
 801cf24:	f003 f916 	bl	8020154 <timerStart>
						break;
 801cf28:	e01e      	b.n	801cf68 <toState+0x394>
						timerStart(PDELAYREQ_INTERVAL_TIMER, getRand(pow2ms(ptpClock->portDS.logMinPdelayReqInterval + 1)));
 801cf2a:	687b      	ldr	r3, [r7, #4]
 801cf2c:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 801cf30:	2b00      	cmp	r3, #0
 801cf32:	db08      	blt.n	801cf46 <toState+0x372>
 801cf34:	687b      	ldr	r3, [r7, #4]
 801cf36:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 801cf3a:	3301      	adds	r3, #1
 801cf3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801cf40:	fa02 f303 	lsl.w	r3, r2, r3
 801cf44:	e007      	b.n	801cf56 <toState+0x382>
 801cf46:	687b      	ldr	r3, [r7, #4]
 801cf48:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 801cf4c:	43db      	mvns	r3, r3
 801cf4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801cf52:	fa42 f303 	asr.w	r3, r2, r3
 801cf56:	4618      	mov	r0, r3
 801cf58:	f003 f882 	bl	8020060 <getRand>
 801cf5c:	4603      	mov	r3, r0
 801cf5e:	4619      	mov	r1, r3
 801cf60:	2000      	movs	r0, #0
 801cf62:	f003 f8f7 	bl	8020154 <timerStart>
						break;
 801cf66:	bf00      	nop
			}
			ptpClock->portDS.portState = PTP_UNCALIBRATED;
 801cf68:	687b      	ldr	r3, [r7, #4]
 801cf6a:	2207      	movs	r2, #7
 801cf6c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

			break;
 801cf70:	e005      	b.n	801cf7e <toState+0x3aa>

		case PTP_SLAVE:

			ptpClock->portDS.portState = PTP_SLAVE;
 801cf72:	687b      	ldr	r3, [r7, #4]
 801cf74:	2208      	movs	r2, #8
 801cf76:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

			break;
 801cf7a:	e000      	b.n	801cf7e <toState+0x3aa>

		default:

			break;
 801cf7c:	bf00      	nop
	}
}
 801cf7e:	bf00      	nop
 801cf80:	3708      	adds	r7, #8
 801cf82:	46bd      	mov	sp, r7
 801cf84:	bd80      	pop	{r7, pc}
 801cf86:	bf00      	nop

0801cf88 <doInit>:


static bool doInit(PtpClock *ptpClock)
{
 801cf88:	b580      	push	{r7, lr}
 801cf8a:	b082      	sub	sp, #8
 801cf8c:	af00      	add	r7, sp, #0
 801cf8e:	6078      	str	r0, [r7, #4]
	DBG("manufacturerIdentity: %s\n", MANUFACTURER_ID);

	/* initialize networking */
	netShutdown(&ptpClock->netPath);
 801cf90:	687b      	ldr	r3, [r7, #4]
 801cf92:	f503 7373 	add.w	r3, r3, #972	; 0x3cc
 801cf96:	4618      	mov	r0, r3
 801cf98:	f002 f846 	bl	801f028 <netShutdown>

	if (!netInit(&ptpClock->netPath, ptpClock))
 801cf9c:	687b      	ldr	r3, [r7, #4]
 801cf9e:	f503 7373 	add.w	r3, r3, #972	; 0x3cc
 801cfa2:	6879      	ldr	r1, [r7, #4]
 801cfa4:	4618      	mov	r0, r3
 801cfa6:	f002 f8d3 	bl	801f150 <netInit>
 801cfaa:	4603      	mov	r3, r0
 801cfac:	f083 0301 	eor.w	r3, r3, #1
 801cfb0:	b2db      	uxtb	r3, r3
 801cfb2:	2b00      	cmp	r3, #0
 801cfb4:	d001      	beq.n	801cfba <doInit+0x32>
	{
		ERROR("doInit: failed to initialize network\n");
		return FALSE;
 801cfb6:	2300      	movs	r3, #0
 801cfb8:	e011      	b.n	801cfde <doInit+0x56>
	}
	else
	{
		/* initialize other stuff */
		initData(ptpClock);
 801cfba:	6878      	ldr	r0, [r7, #4]
 801cfbc:	f7ff f956 	bl	801c26c <initData>
		initTimer();
 801cfc0:	f003 f87c 	bl	80200bc <initTimer>
		initClock(ptpClock);
 801cfc4:	6878      	ldr	r0, [r7, #4]
 801cfc6:	f002 fd03 	bl	801f9d0 <initClock>
		m1(ptpClock);
 801cfca:	6878      	ldr	r0, [r7, #4]
 801cfcc:	f7ff fafc 	bl	801c5c8 <m1>
		msgPackHeader(ptpClock, ptpClock->msgObuf);
 801cfd0:	687b      	ldr	r3, [r7, #4]
 801cfd2:	33cc      	adds	r3, #204	; 0xcc
 801cfd4:	4619      	mov	r1, r3
 801cfd6:	6878      	ldr	r0, [r7, #4]
 801cfd8:	f001 fa45 	bl	801e466 <msgPackHeader>
		return TRUE;
 801cfdc:	2301      	movs	r3, #1
	}
}
 801cfde:	4618      	mov	r0, r3
 801cfe0:	3708      	adds	r7, #8
 801cfe2:	46bd      	mov	sp, r7
 801cfe4:	bd80      	pop	{r7, pc}
	...

0801cfe8 <doState>:

/* Handle actions and events for 'port_state' */
void doState(PtpClock *ptpClock)
{
 801cfe8:	b580      	push	{r7, lr}
 801cfea:	b082      	sub	sp, #8
 801cfec:	af00      	add	r7, sp, #0
 801cfee:	6078      	str	r0, [r7, #4]
	ptpClock->messageActivity = FALSE;
 801cff0:	687b      	ldr	r3, [r7, #4]
 801cff2:	2200      	movs	r2, #0
 801cff4:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8

	switch (ptpClock->portDS.portState)
 801cff8:	687b      	ldr	r3, [r7, #4]
 801cffa:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 801cffe:	3b03      	subs	r3, #3
 801d000:	2b05      	cmp	r3, #5
 801d002:	d82f      	bhi.n	801d064 <doState+0x7c>
		case PTP_PRE_MASTER:
		case PTP_MASTER:
		case PTP_PASSIVE:

			/* State decision Event */
			if (getFlag(ptpClock->events, STATE_DECISION_EVENT))
 801d004:	687b      	ldr	r3, [r7, #4]
 801d006:	f8d3 3434 	ldr.w	r3, [r3, #1076]	; 0x434
 801d00a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d00e:	2b00      	cmp	r3, #0
 801d010:	d022      	beq.n	801d058 <doState+0x70>
			{
				DBGV("event STATE_DECISION_EVENT\n");
				clearFlag(ptpClock->events, STATE_DECISION_EVENT);
 801d012:	687b      	ldr	r3, [r7, #4]
 801d014:	f8d3 3434 	ldr.w	r3, [r3, #1076]	; 0x434
 801d018:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 801d01c:	687b      	ldr	r3, [r7, #4]
 801d01e:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
				ptpClock->recommendedState = bmc(ptpClock);
 801d022:	6878      	ldr	r0, [r7, #4]
 801d024:	f7ff fd6c 	bl	801cb00 <bmc>
 801d028:	4603      	mov	r3, r0
 801d02a:	461a      	mov	r2, r3
 801d02c:	687b      	ldr	r3, [r7, #4]
 801d02e:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
				DBGV("recommending state %s\n", stateString(ptpClock->recommendedState));

				switch (ptpClock->recommendedState)
 801d032:	687b      	ldr	r3, [r7, #4]
 801d034:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 801d038:	3b05      	subs	r3, #5
 801d03a:	2b01      	cmp	r3, #1
 801d03c:	d80e      	bhi.n	801d05c <doState+0x74>
				{
					case PTP_MASTER:
					case PTP_PASSIVE:
						if (ptpClock->defaultDS.slaveOnly || ptpClock->defaultDS.clockQuality.clockClass == 255)
 801d03e:	687b      	ldr	r3, [r7, #4]
 801d040:	7cdb      	ldrb	r3, [r3, #19]
 801d042:	2b00      	cmp	r3, #0
 801d044:	d103      	bne.n	801d04e <doState+0x66>
 801d046:	687b      	ldr	r3, [r7, #4]
 801d048:	7b1b      	ldrb	r3, [r3, #12]
 801d04a:	2bff      	cmp	r3, #255	; 0xff
 801d04c:	d108      	bne.n	801d060 <doState+0x78>
						{
								ptpClock->recommendedState = PTP_LISTENING;
 801d04e:	687b      	ldr	r3, [r7, #4]
 801d050:	2203      	movs	r2, #3
 801d052:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
								DBGV("recommending state %s\n", stateString(ptpClock->recommendedState));
						}
						break;
 801d056:	e003      	b.n	801d060 <doState+0x78>

					default:
						break;
				}
			}
 801d058:	bf00      	nop
 801d05a:	e004      	b.n	801d066 <doState+0x7e>
						break;
 801d05c:	bf00      	nop
 801d05e:	e002      	b.n	801d066 <doState+0x7e>
						break;
 801d060:	bf00      	nop
			break;
 801d062:	e000      	b.n	801d066 <doState+0x7e>

			default:
				break;
 801d064:	bf00      	nop
	}

	switch (ptpClock->recommendedState)
 801d066:	687b      	ldr	r3, [r7, #4]
 801d068:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 801d06c:	2b08      	cmp	r3, #8
 801d06e:	f200 80a6 	bhi.w	801d1be <doState+0x1d6>
 801d072:	a201      	add	r2, pc, #4	; (adr r2, 801d078 <doState+0x90>)
 801d074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d078:	0801d1bf 	.word	0x0801d1bf
 801d07c:	0801d1bf 	.word	0x0801d1bf
 801d080:	0801d1bf 	.word	0x0801d1bf
 801d084:	0801d1a5 	.word	0x0801d1a5
 801d088:	0801d1bf 	.word	0x0801d1bf
 801d08c:	0801d09d 	.word	0x0801d09d
 801d090:	0801d0d5 	.word	0x0801d0d5
 801d094:	0801d1bf 	.word	0x0801d1bf
 801d098:	0801d0ef 	.word	0x0801d0ef
	{
		case PTP_MASTER:
			switch (ptpClock->portDS.portState)
 801d09c:	687b      	ldr	r3, [r7, #4]
 801d09e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 801d0a2:	2b04      	cmp	r3, #4
 801d0a4:	d002      	beq.n	801d0ac <doState+0xc4>
 801d0a6:	2b05      	cmp	r3, #5
 801d0a8:	d010      	beq.n	801d0cc <doState+0xe4>
 801d0aa:	e00a      	b.n	801d0c2 <doState+0xda>
			{
				case PTP_PRE_MASTER:
					if (timerExpired(QUALIFICATION_TIMEOUT)) toState(ptpClock, PTP_MASTER);
 801d0ac:	2005      	movs	r0, #5
 801d0ae:	f003 f877 	bl	80201a0 <timerExpired>
 801d0b2:	4603      	mov	r3, r0
 801d0b4:	2b00      	cmp	r3, #0
 801d0b6:	d00b      	beq.n	801d0d0 <doState+0xe8>
 801d0b8:	2105      	movs	r1, #5
 801d0ba:	6878      	ldr	r0, [r7, #4]
 801d0bc:	f7ff fd8a 	bl	801cbd4 <toState>
					break;
 801d0c0:	e006      	b.n	801d0d0 <doState+0xe8>
				case PTP_MASTER:
					break;
				default:
					toState(ptpClock, PTP_PRE_MASTER);
 801d0c2:	2104      	movs	r1, #4
 801d0c4:	6878      	ldr	r0, [r7, #4]
 801d0c6:	f7ff fd85 	bl	801cbd4 <toState>
					break;
 801d0ca:	e002      	b.n	801d0d2 <doState+0xea>
					break;
 801d0cc:	bf00      	nop
 801d0ce:	e07b      	b.n	801d1c8 <doState+0x1e0>
					break;
 801d0d0:	bf00      	nop
			}
			break;
 801d0d2:	e079      	b.n	801d1c8 <doState+0x1e0>

		case PTP_PASSIVE:
			if (ptpClock->portDS.portState != ptpClock->recommendedState) toState(ptpClock, PTP_PASSIVE);
 801d0d4:	687b      	ldr	r3, [r7, #4]
 801d0d6:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 801d0da:	687b      	ldr	r3, [r7, #4]
 801d0dc:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 801d0e0:	429a      	cmp	r2, r3
 801d0e2:	d06e      	beq.n	801d1c2 <doState+0x1da>
 801d0e4:	2106      	movs	r1, #6
 801d0e6:	6878      	ldr	r0, [r7, #4]
 801d0e8:	f7ff fd74 	bl	801cbd4 <toState>
			break;
 801d0ec:	e069      	b.n	801d1c2 <doState+0x1da>

		case PTP_SLAVE:

			switch (ptpClock->portDS.portState)
 801d0ee:	687b      	ldr	r3, [r7, #4]
 801d0f0:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 801d0f4:	2b07      	cmp	r3, #7
 801d0f6:	d002      	beq.n	801d0fe <doState+0x116>
 801d0f8:	2b08      	cmp	r3, #8
 801d0fa:	d023      	beq.n	801d144 <doState+0x15c>
 801d0fc:	e049      	b.n	801d192 <doState+0x1aa>
			{
				case PTP_UNCALIBRATED:

					if (getFlag(ptpClock->events, MASTER_CLOCK_SELECTED))
 801d0fe:	687b      	ldr	r3, [r7, #4]
 801d100:	f8d3 3434 	ldr.w	r3, [r3, #1076]	; 0x434
 801d104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801d108:	2b00      	cmp	r3, #0
 801d10a:	d00b      	beq.n	801d124 <doState+0x13c>
					{
						DBG("event MASTER_CLOCK_SELECTED\n");
						clearFlag(ptpClock->events, MASTER_CLOCK_SELECTED);
 801d10c:	687b      	ldr	r3, [r7, #4]
 801d10e:	f8d3 3434 	ldr.w	r3, [r3, #1076]	; 0x434
 801d112:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801d116:	687b      	ldr	r3, [r7, #4]
 801d118:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
						toState(ptpClock, PTP_SLAVE);
 801d11c:	2108      	movs	r1, #8
 801d11e:	6878      	ldr	r0, [r7, #4]
 801d120:	f7ff fd58 	bl	801cbd4 <toState>
					}

					if (getFlag(ptpClock->events, MASTER_CLOCK_CHANGED))
 801d124:	687b      	ldr	r3, [r7, #4]
 801d126:	f8d3 3434 	ldr.w	r3, [r3, #1076]	; 0x434
 801d12a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801d12e:	2b00      	cmp	r3, #0
 801d130:	d034      	beq.n	801d19c <doState+0x1b4>
					{
						DBG("event MASTER_CLOCK_CHANGED\n");
						clearFlag(ptpClock->events, MASTER_CLOCK_CHANGED);
 801d132:	687b      	ldr	r3, [r7, #4]
 801d134:	f8d3 3434 	ldr.w	r3, [r3, #1076]	; 0x434
 801d138:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801d13c:	687b      	ldr	r3, [r7, #4]
 801d13e:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
					}

					break;
 801d142:	e02b      	b.n	801d19c <doState+0x1b4>

				case PTP_SLAVE:

					if (getFlag(ptpClock->events, SYNCHRONIZATION_FAULT))
 801d144:	687b      	ldr	r3, [r7, #4]
 801d146:	f8d3 3434 	ldr.w	r3, [r3, #1076]	; 0x434
 801d14a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801d14e:	2b00      	cmp	r3, #0
 801d150:	d00b      	beq.n	801d16a <doState+0x182>
					{
							DBG("event SYNCHRONIZATION_FAULT\n");
							clearFlag(ptpClock->events, SYNCHRONIZATION_FAULT);
 801d152:	687b      	ldr	r3, [r7, #4]
 801d154:	f8d3 3434 	ldr.w	r3, [r3, #1076]	; 0x434
 801d158:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 801d15c:	687b      	ldr	r3, [r7, #4]
 801d15e:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
							toState(ptpClock, PTP_UNCALIBRATED);
 801d162:	2107      	movs	r1, #7
 801d164:	6878      	ldr	r0, [r7, #4]
 801d166:	f7ff fd35 	bl	801cbd4 <toState>
					}

					if (getFlag(ptpClock->events, MASTER_CLOCK_CHANGED))
 801d16a:	687b      	ldr	r3, [r7, #4]
 801d16c:	f8d3 3434 	ldr.w	r3, [r3, #1076]	; 0x434
 801d170:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801d174:	2b00      	cmp	r3, #0
 801d176:	d013      	beq.n	801d1a0 <doState+0x1b8>
					{
							DBG("event MASTER_CLOCK_CHANGED\n");
							clearFlag(ptpClock->events, MASTER_CLOCK_CHANGED);
 801d178:	687b      	ldr	r3, [r7, #4]
 801d17a:	f8d3 3434 	ldr.w	r3, [r3, #1076]	; 0x434
 801d17e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801d182:	687b      	ldr	r3, [r7, #4]
 801d184:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
							toState(ptpClock, PTP_UNCALIBRATED);
 801d188:	2107      	movs	r1, #7
 801d18a:	6878      	ldr	r0, [r7, #4]
 801d18c:	f7ff fd22 	bl	801cbd4 <toState>
					}

					break;
 801d190:	e006      	b.n	801d1a0 <doState+0x1b8>

				default:

					toState(ptpClock, PTP_UNCALIBRATED);
 801d192:	2107      	movs	r1, #7
 801d194:	6878      	ldr	r0, [r7, #4]
 801d196:	f7ff fd1d 	bl	801cbd4 <toState>
					break;
 801d19a:	e002      	b.n	801d1a2 <doState+0x1ba>
					break;
 801d19c:	bf00      	nop
 801d19e:	e013      	b.n	801d1c8 <doState+0x1e0>
					break;
 801d1a0:	bf00      	nop
			}

			break;
 801d1a2:	e011      	b.n	801d1c8 <doState+0x1e0>

		case PTP_LISTENING:

			if (ptpClock->portDS.portState != ptpClock->recommendedState)
 801d1a4:	687b      	ldr	r3, [r7, #4]
 801d1a6:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 801d1aa:	687b      	ldr	r3, [r7, #4]
 801d1ac:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 801d1b0:	429a      	cmp	r2, r3
 801d1b2:	d008      	beq.n	801d1c6 <doState+0x1de>
			{
				toState(ptpClock, PTP_LISTENING);
 801d1b4:	2103      	movs	r1, #3
 801d1b6:	6878      	ldr	r0, [r7, #4]
 801d1b8:	f7ff fd0c 	bl	801cbd4 <toState>
			}

			break;
 801d1bc:	e003      	b.n	801d1c6 <doState+0x1de>
		case PTP_INITIALIZING:
			break;

		default:
			DBG("doState: unrecognized recommended state %d\n", ptpClock->recommendedState);
			break;
 801d1be:	bf00      	nop
 801d1c0:	e002      	b.n	801d1c8 <doState+0x1e0>
			break;
 801d1c2:	bf00      	nop
 801d1c4:	e000      	b.n	801d1c8 <doState+0x1e0>
			break;
 801d1c6:	bf00      	nop
	}

	switch (ptpClock->portDS.portState)
 801d1c8:	687b      	ldr	r3, [r7, #4]
 801d1ca:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 801d1ce:	2b08      	cmp	r3, #8
 801d1d0:	d879      	bhi.n	801d2c6 <doState+0x2de>
 801d1d2:	a201      	add	r2, pc, #4	; (adr r2, 801d1d8 <doState+0x1f0>)
 801d1d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d1d8:	0801d1fd 	.word	0x0801d1fd
 801d1dc:	0801d21d 	.word	0x0801d21d
 801d1e0:	0801d227 	.word	0x0801d227
 801d1e4:	0801d22f 	.word	0x0801d22f
 801d1e8:	0801d2c7 	.word	0x0801d2c7
 801d1ec:	0801d295 	.word	0x0801d295
 801d1f0:	0801d22f 	.word	0x0801d22f
 801d1f4:	0801d22f 	.word	0x0801d22f
 801d1f8:	0801d22f 	.word	0x0801d22f
	{
		case PTP_INITIALIZING:

			if (doInit(ptpClock) == TRUE)
 801d1fc:	6878      	ldr	r0, [r7, #4]
 801d1fe:	f7ff fec3 	bl	801cf88 <doInit>
 801d202:	4603      	mov	r3, r0
 801d204:	2b00      	cmp	r3, #0
 801d206:	d004      	beq.n	801d212 <doState+0x22a>
			{
				toState(ptpClock, PTP_LISTENING);
 801d208:	2103      	movs	r1, #3
 801d20a:	6878      	ldr	r0, [r7, #4]
 801d20c:	f7ff fce2 	bl	801cbd4 <toState>
			else
			{
				toState(ptpClock, PTP_FAULTY);
			}

			break;
 801d210:	e05c      	b.n	801d2cc <doState+0x2e4>
				toState(ptpClock, PTP_FAULTY);
 801d212:	2101      	movs	r1, #1
 801d214:	6878      	ldr	r0, [r7, #4]
 801d216:	f7ff fcdd 	bl	801cbd4 <toState>
			break;
 801d21a:	e057      	b.n	801d2cc <doState+0x2e4>

		case PTP_FAULTY:

			/* Imaginary troubleshooting */
			DBG("event FAULT_CLEARED for state PTP_FAULT\n");
			toState(ptpClock, PTP_INITIALIZING);
 801d21c:	2100      	movs	r1, #0
 801d21e:	6878      	ldr	r0, [r7, #4]
 801d220:	f7ff fcd8 	bl	801cbd4 <toState>
			return;
 801d224:	e052      	b.n	801d2cc <doState+0x2e4>

		case PTP_DISABLED:
			handle(ptpClock);
 801d226:	6878      	ldr	r0, [r7, #4]
 801d228:	f000 f854 	bl	801d2d4 <handle>
			break;
 801d22c:	e04e      	b.n	801d2cc <doState+0x2e4>
		case PTP_LISTENING:
		case PTP_UNCALIBRATED:
		case PTP_SLAVE:
		case PTP_PASSIVE:

			if (timerExpired(ANNOUNCE_RECEIPT_TIMER))
 801d22e:	2003      	movs	r0, #3
 801d230:	f002 ffb6 	bl	80201a0 <timerExpired>
 801d234:	4603      	mov	r3, r0
 801d236:	2b00      	cmp	r3, #0
 801d238:	d028      	beq.n	801d28c <doState+0x2a4>
			{
				DBGV("event ANNOUNCE_RECEIPT_TIMEOUT_EXPIRES for state %s\n", stateString(ptpClock->portDS.portState));
				ptpClock->foreignMasterDS.count = 0;
 801d23a:	687b      	ldr	r3, [r7, #4]
 801d23c:	2200      	movs	r2, #0
 801d23e:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
				ptpClock->foreignMasterDS.i = 0;
 801d242:	687b      	ldr	r3, [r7, #4]
 801d244:	2200      	movs	r2, #0
 801d246:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c

				if (!(ptpClock->defaultDS.slaveOnly || ptpClock->defaultDS.clockQuality.clockClass == 255))
 801d24a:	687b      	ldr	r3, [r7, #4]
 801d24c:	7cdb      	ldrb	r3, [r3, #19]
 801d24e:	f083 0301 	eor.w	r3, r3, #1
 801d252:	b2db      	uxtb	r3, r3
 801d254:	2b00      	cmp	r3, #0
 801d256:	d00f      	beq.n	801d278 <doState+0x290>
 801d258:	687b      	ldr	r3, [r7, #4]
 801d25a:	7b1b      	ldrb	r3, [r3, #12]
 801d25c:	2bff      	cmp	r3, #255	; 0xff
 801d25e:	d00b      	beq.n	801d278 <doState+0x290>
				{
					m1(ptpClock);
 801d260:	6878      	ldr	r0, [r7, #4]
 801d262:	f7ff f9b1 	bl	801c5c8 <m1>
					ptpClock->recommendedState = PTP_MASTER;
 801d266:	687b      	ldr	r3, [r7, #4]
 801d268:	2205      	movs	r2, #5
 801d26a:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
					DBGV("recommending state %s\n", stateString(ptpClock->recommendedState));
					toState(ptpClock, PTP_MASTER);
 801d26e:	2105      	movs	r1, #5
 801d270:	6878      	ldr	r0, [r7, #4]
 801d272:	f7ff fcaf 	bl	801cbd4 <toState>
				else if (ptpClock->portDS.portState != PTP_LISTENING)
				{
					toState(ptpClock, PTP_LISTENING);
				}

				break;
 801d276:	e028      	b.n	801d2ca <doState+0x2e2>
				else if (ptpClock->portDS.portState != PTP_LISTENING)
 801d278:	687b      	ldr	r3, [r7, #4]
 801d27a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 801d27e:	2b03      	cmp	r3, #3
 801d280:	d023      	beq.n	801d2ca <doState+0x2e2>
					toState(ptpClock, PTP_LISTENING);
 801d282:	2103      	movs	r1, #3
 801d284:	6878      	ldr	r0, [r7, #4]
 801d286:	f7ff fca5 	bl	801cbd4 <toState>
				break;
 801d28a:	e01e      	b.n	801d2ca <doState+0x2e2>
			}

			handle(ptpClock);
 801d28c:	6878      	ldr	r0, [r7, #4]
 801d28e:	f000 f821 	bl	801d2d4 <handle>

			break;
 801d292:	e01b      	b.n	801d2cc <doState+0x2e4>

		case PTP_MASTER:

			if (timerExpired(SYNC_INTERVAL_TIMER))
 801d294:	2002      	movs	r0, #2
 801d296:	f002 ff83 	bl	80201a0 <timerExpired>
 801d29a:	4603      	mov	r3, r0
 801d29c:	2b00      	cmp	r3, #0
 801d29e:	d002      	beq.n	801d2a6 <doState+0x2be>
			{
					DBGV("event SYNC_INTERVAL_TIMEOUT_EXPIRES for state PTP_MASTER\n");
					issueSync(ptpClock);
 801d2a0:	6878      	ldr	r0, [r7, #4]
 801d2a2:	f000 fe3a 	bl	801df1a <issueSync>
			}

			if (timerExpired(ANNOUNCE_INTERVAL_TIMER))
 801d2a6:	2004      	movs	r0, #4
 801d2a8:	f002 ff7a 	bl	80201a0 <timerExpired>
 801d2ac:	4603      	mov	r3, r0
 801d2ae:	2b00      	cmp	r3, #0
 801d2b0:	d002      	beq.n	801d2b8 <doState+0x2d0>
			{
					DBGV("event ANNOUNCE_INTERVAL_TIMEOUT_EXPIRES for state PTP_MASTER\n");
					issueAnnounce(ptpClock);
 801d2b2:	6878      	ldr	r0, [r7, #4]
 801d2b4:	f000 fe08 	bl	801dec8 <issueAnnounce>
			}

			handle(ptpClock);
 801d2b8:	6878      	ldr	r0, [r7, #4]
 801d2ba:	f000 f80b 	bl	801d2d4 <handle>
			issueDelayReqTimerExpired(ptpClock);
 801d2be:	6878      	ldr	r0, [r7, #4]
 801d2c0:	f000 fd98 	bl	801ddf4 <issueDelayReqTimerExpired>

			break;
 801d2c4:	e002      	b.n	801d2cc <doState+0x2e4>

		default:
			DBG("doState: do unrecognized state %d\n", ptpClock->portDS.portState);
			break;
 801d2c6:	bf00      	nop
 801d2c8:	e000      	b.n	801d2cc <doState+0x2e4>
				break;
 801d2ca:	bf00      	nop
	}
}
 801d2cc:	3708      	adds	r7, #8
 801d2ce:	46bd      	mov	sp, r7
 801d2d0:	bd80      	pop	{r7, pc}
 801d2d2:	bf00      	nop

0801d2d4 <handle>:


/* Check and handle received messages */
static void handle(PtpClock *ptpClock)
{
 801d2d4:	b580      	push	{r7, lr}
 801d2d6:	b086      	sub	sp, #24
 801d2d8:	af00      	add	r7, sp, #0
 801d2da:	6078      	str	r0, [r7, #4]

		int ret;
		bool  isFromSelf;
		TimeInternal time = { 0, 0 };
 801d2dc:	2300      	movs	r3, #0
 801d2de:	60bb      	str	r3, [r7, #8]
 801d2e0:	2300      	movs	r3, #0
 801d2e2:	60fb      	str	r3, [r7, #12]

		if (FALSE == ptpClock->messageActivity)
 801d2e4:	687b      	ldr	r3, [r7, #4]
 801d2e6:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 801d2ea:	f083 0301 	eor.w	r3, r3, #1
 801d2ee:	b2db      	uxtb	r3, r3
 801d2f0:	2b00      	cmp	r3, #0
 801d2f2:	d013      	beq.n	801d31c <handle+0x48>
		{
				ret = netSelect(&ptpClock->netPath, 0);
 801d2f4:	687b      	ldr	r3, [r7, #4]
 801d2f6:	f503 7373 	add.w	r3, r3, #972	; 0x3cc
 801d2fa:	2100      	movs	r1, #0
 801d2fc:	4618      	mov	r0, r3
 801d2fe:	f001 ffdb 	bl	801f2b8 <netSelect>
 801d302:	6178      	str	r0, [r7, #20]

				if (ret < 0)
 801d304:	697b      	ldr	r3, [r7, #20]
 801d306:	2b00      	cmp	r3, #0
 801d308:	da04      	bge.n	801d314 <handle+0x40>
				{
						ERROR("handle: failed to poll sockets\n");
						toState(ptpClock, PTP_FAULTY);
 801d30a:	2101      	movs	r1, #1
 801d30c:	6878      	ldr	r0, [r7, #4]
 801d30e:	f7ff fc61 	bl	801cbd4 <toState>
						return;
 801d312:	e0f8      	b.n	801d506 <handle+0x232>
				}
				else if (!ret)
 801d314:	697b      	ldr	r3, [r7, #20]
 801d316:	2b00      	cmp	r3, #0
 801d318:	f000 80ec 	beq.w	801d4f4 <handle+0x220>
		}

		DBGVV("handle: something\n");

		/* Receive an event. */
		ptpClock->msgIbufLength = netRecvEvent(&ptpClock->netPath, ptpClock->msgIbuf, &time);
 801d31c:	687b      	ldr	r3, [r7, #4]
 801d31e:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
 801d322:	687b      	ldr	r3, [r7, #4]
 801d324:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801d328:	f107 0208 	add.w	r2, r7, #8
 801d32c:	4619      	mov	r1, r3
 801d32e:	f002 f843 	bl	801f3b8 <netRecvEvent>
 801d332:	4602      	mov	r2, r0
 801d334:	687b      	ldr	r3, [r7, #4]
 801d336:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
		/* local time is not UTC, we can calculate UTC on demand, otherwise UTC time is not used */
		/* time.seconds += ptpClock->timePropertiesDS.currentUtcOffset; */
		DBGV("handle: netRecvEvent returned %d\n", ptpClock->msgIbufLength);

		if (ptpClock->msgIbufLength < 0)
 801d33a:	687b      	ldr	r3, [r7, #4]
 801d33c:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 801d340:	2b00      	cmp	r3, #0
 801d342:	da04      	bge.n	801d34e <handle+0x7a>
		{
				ERROR("handle: failed to receive on the event socket\n");
				toState(ptpClock, PTP_FAULTY);
 801d344:	2101      	movs	r1, #1
 801d346:	6878      	ldr	r0, [r7, #4]
 801d348:	f7ff fc44 	bl	801cbd4 <toState>
				return;
 801d34c:	e0db      	b.n	801d506 <handle+0x232>
		}
		else if (!ptpClock->msgIbufLength)
 801d34e:	687b      	ldr	r3, [r7, #4]
 801d350:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 801d354:	2b00      	cmp	r3, #0
 801d356:	d11e      	bne.n	801d396 <handle+0xc2>
		{
				/* Receive a general packet. */
				ptpClock->msgIbufLength = netRecvGeneral(&ptpClock->netPath, ptpClock->msgIbuf, &time);
 801d358:	687b      	ldr	r3, [r7, #4]
 801d35a:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
 801d35e:	687b      	ldr	r3, [r7, #4]
 801d360:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801d364:	f107 0208 	add.w	r2, r7, #8
 801d368:	4619      	mov	r1, r3
 801d36a:	f002 f837 	bl	801f3dc <netRecvGeneral>
 801d36e:	4602      	mov	r2, r0
 801d370:	687b      	ldr	r3, [r7, #4]
 801d372:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
				DBGV("handle: netRecvGeneral returned %d\n", ptpClock->msgIbufLength);

				if (ptpClock->msgIbufLength < 0)
 801d376:	687b      	ldr	r3, [r7, #4]
 801d378:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 801d37c:	2b00      	cmp	r3, #0
 801d37e:	da04      	bge.n	801d38a <handle+0xb6>
				{
						ERROR("handle: failed to receive on the general socket\n");
						toState(ptpClock, PTP_FAULTY);
 801d380:	2101      	movs	r1, #1
 801d382:	6878      	ldr	r0, [r7, #4]
 801d384:	f7ff fc26 	bl	801cbd4 <toState>
						return;
 801d388:	e0bd      	b.n	801d506 <handle+0x232>
				}
				else if (!ptpClock->msgIbufLength)
 801d38a:	687b      	ldr	r3, [r7, #4]
 801d38c:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 801d390:	2b00      	cmp	r3, #0
 801d392:	f000 80b1 	beq.w	801d4f8 <handle+0x224>
						return;
		}

		ptpClock->messageActivity = TRUE;
 801d396:	687b      	ldr	r3, [r7, #4]
 801d398:	2201      	movs	r2, #1
 801d39a:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8

		if (ptpClock->msgIbufLength < HEADER_LENGTH)
 801d39e:	687b      	ldr	r3, [r7, #4]
 801d3a0:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 801d3a4:	2b21      	cmp	r3, #33	; 0x21
 801d3a6:	dc04      	bgt.n	801d3b2 <handle+0xde>
		{
				ERROR("handle: message shorter than header length\n");
				toState(ptpClock, PTP_FAULTY);
 801d3a8:	2101      	movs	r1, #1
 801d3aa:	6878      	ldr	r0, [r7, #4]
 801d3ac:	f7ff fc12 	bl	801cbd4 <toState>
				return;
 801d3b0:	e0a9      	b.n	801d506 <handle+0x232>
		}

		msgUnpackHeader(ptpClock->msgIbuf, &ptpClock->msgTmpHeader);
 801d3b2:	687b      	ldr	r3, [r7, #4]
 801d3b4:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
 801d3b8:	687b      	ldr	r3, [r7, #4]
 801d3ba:	3380      	adds	r3, #128	; 0x80
 801d3bc:	4619      	mov	r1, r3
 801d3be:	4610      	mov	r0, r2
 801d3c0:	f000 ffc0 	bl	801e344 <msgUnpackHeader>
		DBGV("handle: unpacked message type %d\n", ptpClock->msgTmpHeader.messageType);

		if (ptpClock->msgTmpHeader.versionPTP != ptpClock->portDS.versionNumber)
 801d3c4:	687b      	ldr	r3, [r7, #4]
 801d3c6:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 801d3ca:	687b      	ldr	r3, [r7, #4]
 801d3cc:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 801d3d0:	429a      	cmp	r2, r3
 801d3d2:	f040 8093 	bne.w	801d4fc <handle+0x228>
		{
				DBGV("handle: ignore version %d message\n", ptpClock->msgTmpHeader.versionPTP);
				return;
		}

		if (ptpClock->msgTmpHeader.domainNumber != ptpClock->defaultDS.domainNumber)
 801d3d6:	687b      	ldr	r3, [r7, #4]
 801d3d8:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
 801d3dc:	687b      	ldr	r3, [r7, #4]
 801d3de:	7c9b      	ldrb	r3, [r3, #18]
 801d3e0:	429a      	cmp	r2, r3
 801d3e2:	f040 808d 	bne.w	801d500 <handle+0x22c>
				return;
		}

		/* Spec 9.5.2.2 */
		isFromSelf = isSamePortIdentity(
		&ptpClock->portDS.portIdentity,
 801d3e6:	687b      	ldr	r3, [r7, #4]
 801d3e8:	f103 0258 	add.w	r2, r3, #88	; 0x58
		&ptpClock->msgTmpHeader.sourcePortIdentity);
 801d3ec:	687b      	ldr	r3, [r7, #4]
 801d3ee:	3398      	adds	r3, #152	; 0x98
		isFromSelf = isSamePortIdentity(
 801d3f0:	4619      	mov	r1, r3
 801d3f2:	4610      	mov	r0, r2
 801d3f4:	f7fe ffe9 	bl	801c3ca <isSamePortIdentity>
 801d3f8:	4603      	mov	r3, r0
 801d3fa:	74fb      	strb	r3, [r7, #19]

		/* Subtract the inbound latency adjustment if it is not a loop back and the
			 time stamp seems reasonable */
		if (!isFromSelf && time.seconds > 0)
 801d3fc:	7cfb      	ldrb	r3, [r7, #19]
 801d3fe:	f083 0301 	eor.w	r3, r3, #1
 801d402:	b2db      	uxtb	r3, r3
 801d404:	2b00      	cmp	r3, #0
 801d406:	d00c      	beq.n	801d422 <handle+0x14e>
 801d408:	68bb      	ldr	r3, [r7, #8]
 801d40a:	2b00      	cmp	r3, #0
 801d40c:	dd09      	ble.n	801d422 <handle+0x14e>
				subTime(&time, &time, &ptpClock->inboundLatency);
 801d40e:	687b      	ldr	r3, [r7, #4]
 801d410:	f503 6282 	add.w	r2, r3, #1040	; 0x410
 801d414:	f107 0108 	add.w	r1, r7, #8
 801d418:	f107 0308 	add.w	r3, r7, #8
 801d41c:	4618      	mov	r0, r3
 801d41e:	f7fe fe6e 	bl	801c0fe <subTime>

		switch (ptpClock->msgTmpHeader.messageType)
 801d422:	687b      	ldr	r3, [r7, #4]
 801d424:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801d428:	2b0d      	cmp	r3, #13
 801d42a:	d86b      	bhi.n	801d504 <handle+0x230>
 801d42c:	a201      	add	r2, pc, #4	; (adr r2, 801d434 <handle+0x160>)
 801d42e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d432:	bf00      	nop
 801d434:	0801d479 	.word	0x0801d479
 801d438:	0801d495 	.word	0x0801d495
 801d43c:	0801d4a5 	.word	0x0801d4a5
 801d440:	0801d4c1 	.word	0x0801d4c1
 801d444:	0801d505 	.word	0x0801d505
 801d448:	0801d505 	.word	0x0801d505
 801d44c:	0801d505 	.word	0x0801d505
 801d450:	0801d505 	.word	0x0801d505
 801d454:	0801d489 	.word	0x0801d489
 801d458:	0801d4b5 	.word	0x0801d4b5
 801d45c:	0801d4d1 	.word	0x0801d4d1
 801d460:	0801d46d 	.word	0x0801d46d
 801d464:	0801d4e9 	.word	0x0801d4e9
 801d468:	0801d4dd 	.word	0x0801d4dd
		{

		case ANNOUNCE:
				handleAnnounce(ptpClock, isFromSelf);
 801d46c:	7cfb      	ldrb	r3, [r7, #19]
 801d46e:	4619      	mov	r1, r3
 801d470:	6878      	ldr	r0, [r7, #4]
 801d472:	f000 f84b 	bl	801d50c <handleAnnounce>
				break;
 801d476:	e046      	b.n	801d506 <handle+0x232>

		case SYNC:
				handleSync(ptpClock, &time, isFromSelf);
 801d478:	7cfa      	ldrb	r2, [r7, #19]
 801d47a:	f107 0308 	add.w	r3, r7, #8
 801d47e:	4619      	mov	r1, r3
 801d480:	6878      	ldr	r0, [r7, #4]
 801d482:	f000 f8fb 	bl	801d67c <handleSync>
				break;
 801d486:	e03e      	b.n	801d506 <handle+0x232>

		case FOLLOW_UP:
				handleFollowUp(ptpClock, isFromSelf);
 801d488:	7cfb      	ldrb	r3, [r7, #19]
 801d48a:	4619      	mov	r1, r3
 801d48c:	6878      	ldr	r0, [r7, #4]
 801d48e:	f000 f99f 	bl	801d7d0 <handleFollowUp>
				break;
 801d492:	e038      	b.n	801d506 <handle+0x232>

		case DELAY_REQ:
				handleDelayReq(ptpClock, &time, isFromSelf);
 801d494:	7cfa      	ldrb	r2, [r7, #19]
 801d496:	f107 0308 	add.w	r3, r7, #8
 801d49a:	4619      	mov	r1, r3
 801d49c:	6878      	ldr	r0, [r7, #4]
 801d49e:	f000 fa31 	bl	801d904 <handleDelayReq>
				break;
 801d4a2:	e030      	b.n	801d506 <handle+0x232>

		case PDELAY_REQ:
				handlePDelayReq(ptpClock, &time, isFromSelf);
 801d4a4:	7cfa      	ldrb	r2, [r7, #19]
 801d4a6:	f107 0308 	add.w	r3, r7, #8
 801d4aa:	4619      	mov	r1, r3
 801d4ac:	6878      	ldr	r0, [r7, #4]
 801d4ae:	f000 faeb 	bl	801da88 <handlePDelayReq>
				break;
 801d4b2:	e028      	b.n	801d506 <handle+0x232>

		case DELAY_RESP:
				handleDelayResp(ptpClock, isFromSelf);
 801d4b4:	7cfb      	ldrb	r3, [r7, #19]
 801d4b6:	4619      	mov	r1, r3
 801d4b8:	6878      	ldr	r0, [r7, #4]
 801d4ba:	f000 fa67 	bl	801d98c <handleDelayResp>
				break;
 801d4be:	e022      	b.n	801d506 <handle+0x232>

		case PDELAY_RESP:
				handlePDelayResp(ptpClock, &time, isFromSelf);
 801d4c0:	7cfa      	ldrb	r2, [r7, #19]
 801d4c2:	f107 0308 	add.w	r3, r7, #8
 801d4c6:	4619      	mov	r1, r3
 801d4c8:	6878      	ldr	r0, [r7, #4]
 801d4ca:	f000 fb3b 	bl	801db44 <handlePDelayResp>
				break;
 801d4ce:	e01a      	b.n	801d506 <handle+0x232>

		case PDELAY_RESP_FOLLOW_UP:
				handlePDelayRespFollowUp(ptpClock, isFromSelf);
 801d4d0:	7cfb      	ldrb	r3, [r7, #19]
 801d4d2:	4619      	mov	r1, r3
 801d4d4:	6878      	ldr	r0, [r7, #4]
 801d4d6:	f000 fbef 	bl	801dcb8 <handlePDelayRespFollowUp>
				break;
 801d4da:	e014      	b.n	801d506 <handle+0x232>

		case MANAGEMENT:
				handleManagement(ptpClock, isFromSelf);
 801d4dc:	7cfb      	ldrb	r3, [r7, #19]
 801d4de:	4619      	mov	r1, r3
 801d4e0:	6878      	ldr	r0, [r7, #4]
 801d4e2:	f000 fc6f 	bl	801ddc4 <handleManagement>
				break;
 801d4e6:	e00e      	b.n	801d506 <handle+0x232>

		case SIGNALING:
				handleSignaling(ptpClock, isFromSelf);
 801d4e8:	7cfb      	ldrb	r3, [r7, #19]
 801d4ea:	4619      	mov	r1, r3
 801d4ec:	6878      	ldr	r0, [r7, #4]
 801d4ee:	f000 fc75 	bl	801dddc <handleSignaling>
				break;
 801d4f2:	e008      	b.n	801d506 <handle+0x232>
						return;
 801d4f4:	bf00      	nop
 801d4f6:	e006      	b.n	801d506 <handle+0x232>
						return;
 801d4f8:	bf00      	nop
 801d4fa:	e004      	b.n	801d506 <handle+0x232>
				return;
 801d4fc:	bf00      	nop
 801d4fe:	e002      	b.n	801d506 <handle+0x232>
				return;
 801d500:	bf00      	nop
 801d502:	e000      	b.n	801d506 <handle+0x232>

		default:
				DBG("handle: unrecognized message %d\n", ptpClock->msgTmpHeader.messageType);
				break;
 801d504:	bf00      	nop
		}
}
 801d506:	3718      	adds	r7, #24
 801d508:	46bd      	mov	sp, r7
 801d50a:	bd80      	pop	{r7, pc}

0801d50c <handleAnnounce>:

/* spec 9.5.3 */
static void handleAnnounce(PtpClock *ptpClock, bool isFromSelf)
{
 801d50c:	b580      	push	{r7, lr}
 801d50e:	b084      	sub	sp, #16
 801d510:	af00      	add	r7, sp, #0
 801d512:	6078      	str	r0, [r7, #4]
 801d514:	460b      	mov	r3, r1
 801d516:	70fb      	strb	r3, [r7, #3]
	bool  isFromCurrentParent = FALSE;
 801d518:	2300      	movs	r3, #0
 801d51a:	73fb      	strb	r3, [r7, #15]

	DBGV("handleAnnounce: received in state %s\n", stateString(ptpClock->portDS.portState));

	if (ptpClock->msgIbufLength < ANNOUNCE_LENGTH)
 801d51c:	687b      	ldr	r3, [r7, #4]
 801d51e:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 801d522:	2b3f      	cmp	r3, #63	; 0x3f
 801d524:	dc04      	bgt.n	801d530 <handleAnnounce+0x24>
	{
			ERROR("handleAnnounce: short message\n");
			toState(ptpClock, PTP_FAULTY);
 801d526:	2101      	movs	r1, #1
 801d528:	6878      	ldr	r0, [r7, #4]
 801d52a:	f7ff fb53 	bl	801cbd4 <toState>
			return;
 801d52e:	e0a2      	b.n	801d676 <handleAnnounce+0x16a>
	}

	if (isFromSelf)
 801d530:	78fb      	ldrb	r3, [r7, #3]
 801d532:	2b00      	cmp	r3, #0
 801d534:	f040 809c 	bne.w	801d670 <handleAnnounce+0x164>
	{
			DBGV("handleAnnounce: ignore from self\n");
			return;
	}

	switch (ptpClock->portDS.portState)
 801d538:	687b      	ldr	r3, [r7, #4]
 801d53a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 801d53e:	2b08      	cmp	r3, #8
 801d540:	dc7b      	bgt.n	801d63a <handleAnnounce+0x12e>
 801d542:	2b07      	cmp	r3, #7
 801d544:	da08      	bge.n	801d558 <handleAnnounce+0x4c>
 801d546:	2b02      	cmp	r3, #2
 801d548:	dc03      	bgt.n	801d552 <handleAnnounce+0x46>
 801d54a:	2b00      	cmp	r3, #0
 801d54c:	f280 8092 	bge.w	801d674 <handleAnnounce+0x168>
 801d550:	e073      	b.n	801d63a <handleAnnounce+0x12e>
 801d552:	2b06      	cmp	r3, #6
 801d554:	d052      	beq.n	801d5fc <handleAnnounce+0xf0>
 801d556:	e070      	b.n	801d63a <handleAnnounce+0x12e>

		case PTP_UNCALIBRATED:
		case PTP_SLAVE:

			/* Valid announce message is received : BMC algorithm will be executed */
			setFlag(ptpClock->events, STATE_DECISION_EVENT);
 801d558:	687b      	ldr	r3, [r7, #4]
 801d55a:	f8d3 3434 	ldr.w	r3, [r3, #1076]	; 0x434
 801d55e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801d562:	687b      	ldr	r3, [r7, #4]
 801d564:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
			isFromCurrentParent = isSamePortIdentity(
			&ptpClock->parentDS.parentPortIdentity,
 801d568:	687b      	ldr	r3, [r7, #4]
 801d56a:	f103 0228 	add.w	r2, r3, #40	; 0x28
			&ptpClock->msgTmpHeader.sourcePortIdentity);
 801d56e:	687b      	ldr	r3, [r7, #4]
 801d570:	3398      	adds	r3, #152	; 0x98
			isFromCurrentParent = isSamePortIdentity(
 801d572:	4619      	mov	r1, r3
 801d574:	4610      	mov	r0, r2
 801d576:	f7fe ff28 	bl	801c3ca <isSamePortIdentity>
 801d57a:	4603      	mov	r3, r0
 801d57c:	73fb      	strb	r3, [r7, #15]
			msgUnpackAnnounce(ptpClock->msgIbuf, &ptpClock->msgTmp.announce);
 801d57e:	687b      	ldr	r3, [r7, #4]
 801d580:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
 801d584:	687b      	ldr	r3, [r7, #4]
 801d586:	33a8      	adds	r3, #168	; 0xa8
 801d588:	4619      	mov	r1, r3
 801d58a:	4610      	mov	r0, r2
 801d58c:	f001 f837 	bl	801e5fe <msgUnpackAnnounce>
			if (isFromCurrentParent)
 801d590:	7bfb      	ldrb	r3, [r7, #15]
 801d592:	2b00      	cmp	r3, #0
 801d594:	d028      	beq.n	801d5e8 <handleAnnounce+0xdc>
			{
					s1(ptpClock, &ptpClock->msgTmpHeader, &ptpClock->msgTmp.announce);
 801d596:	687b      	ldr	r3, [r7, #4]
 801d598:	f103 0180 	add.w	r1, r3, #128	; 0x80
 801d59c:	687b      	ldr	r3, [r7, #4]
 801d59e:	33a8      	adds	r3, #168	; 0xa8
 801d5a0:	461a      	mov	r2, r3
 801d5a2:	6878      	ldr	r0, [r7, #4]
 801d5a4:	f7ff f886 	bl	801c6b4 <s1>
					/* Reset  Timer handling Announce receipt timeout */
					timerStart(ANNOUNCE_RECEIPT_TIMER, (ptpClock->portDS.announceReceiptTimeout) * (pow2ms(ptpClock->portDS.logAnnounceInterval)));
 801d5a8:	687b      	ldr	r3, [r7, #4]
 801d5aa:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 801d5ae:	4619      	mov	r1, r3
 801d5b0:	687b      	ldr	r3, [r7, #4]
 801d5b2:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 801d5b6:	2b00      	cmp	r3, #0
 801d5b8:	dd07      	ble.n	801d5ca <handleAnnounce+0xbe>
 801d5ba:	687b      	ldr	r3, [r7, #4]
 801d5bc:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 801d5c0:	461a      	mov	r2, r3
 801d5c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801d5c6:	4093      	lsls	r3, r2
 801d5c8:	e007      	b.n	801d5da <handleAnnounce+0xce>
 801d5ca:	687b      	ldr	r3, [r7, #4]
 801d5cc:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 801d5d0:	425b      	negs	r3, r3
 801d5d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d5d6:	fa42 f303 	asr.w	r3, r2, r3
 801d5da:	fb01 f303 	mul.w	r3, r1, r3
 801d5de:	4619      	mov	r1, r3
 801d5e0:	2003      	movs	r0, #3
 801d5e2:	f002 fdb7 	bl	8020154 <timerStart>
				DBGV("handleAnnounce: from another foreign master\n");
				/* addForeign takes care  of AnnounceUnpacking */
				addForeign(ptpClock, &ptpClock->msgTmpHeader, &ptpClock->msgTmp.announce);
			}

			break;
 801d5e6:	e046      	b.n	801d676 <handleAnnounce+0x16a>
				addForeign(ptpClock, &ptpClock->msgTmpHeader, &ptpClock->msgTmp.announce);
 801d5e8:	687b      	ldr	r3, [r7, #4]
 801d5ea:	f103 0180 	add.w	r1, r3, #128	; 0x80
 801d5ee:	687b      	ldr	r3, [r7, #4]
 801d5f0:	33a8      	adds	r3, #168	; 0xa8
 801d5f2:	461a      	mov	r2, r3
 801d5f4:	6878      	ldr	r0, [r7, #4]
 801d5f6:	f7fe ff08 	bl	801c40a <addForeign>
			break;
 801d5fa:	e03c      	b.n	801d676 <handleAnnounce+0x16a>

		case PTP_PASSIVE:
				timerStart(ANNOUNCE_RECEIPT_TIMER, (ptpClock->portDS.announceReceiptTimeout)*(pow2ms(ptpClock->portDS.logAnnounceInterval)));
 801d5fc:	687b      	ldr	r3, [r7, #4]
 801d5fe:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 801d602:	4619      	mov	r1, r3
 801d604:	687b      	ldr	r3, [r7, #4]
 801d606:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 801d60a:	2b00      	cmp	r3, #0
 801d60c:	dd07      	ble.n	801d61e <handleAnnounce+0x112>
 801d60e:	687b      	ldr	r3, [r7, #4]
 801d610:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 801d614:	461a      	mov	r2, r3
 801d616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801d61a:	4093      	lsls	r3, r2
 801d61c:	e007      	b.n	801d62e <handleAnnounce+0x122>
 801d61e:	687b      	ldr	r3, [r7, #4]
 801d620:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 801d624:	425b      	negs	r3, r3
 801d626:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d62a:	fa42 f303 	asr.w	r3, r2, r3
 801d62e:	fb01 f303 	mul.w	r3, r1, r3
 801d632:	4619      	mov	r1, r3
 801d634:	2003      	movs	r0, #3
 801d636:	f002 fd8d 	bl	8020154 <timerStart>
		case PTP_PRE_MASTER:
		case PTP_LISTENING:
		default :

			DBGV("handleAnnounce: from another foreign master\n");
			msgUnpackAnnounce(ptpClock->msgIbuf, &ptpClock->msgTmp.announce);
 801d63a:	687b      	ldr	r3, [r7, #4]
 801d63c:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
 801d640:	687b      	ldr	r3, [r7, #4]
 801d642:	33a8      	adds	r3, #168	; 0xa8
 801d644:	4619      	mov	r1, r3
 801d646:	4610      	mov	r0, r2
 801d648:	f000 ffd9 	bl	801e5fe <msgUnpackAnnounce>

			/* Valid announce message is received : BMC algorithm will be executed */
			setFlag(ptpClock->events, STATE_DECISION_EVENT);
 801d64c:	687b      	ldr	r3, [r7, #4]
 801d64e:	f8d3 3434 	ldr.w	r3, [r3, #1076]	; 0x434
 801d652:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801d656:	687b      	ldr	r3, [r7, #4]
 801d658:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
			addForeign(ptpClock, &ptpClock->msgTmpHeader, &ptpClock->msgTmp.announce);
 801d65c:	687b      	ldr	r3, [r7, #4]
 801d65e:	f103 0180 	add.w	r1, r3, #128	; 0x80
 801d662:	687b      	ldr	r3, [r7, #4]
 801d664:	33a8      	adds	r3, #168	; 0xa8
 801d666:	461a      	mov	r2, r3
 801d668:	6878      	ldr	r0, [r7, #4]
 801d66a:	f7fe fece 	bl	801c40a <addForeign>

			break;
 801d66e:	e002      	b.n	801d676 <handleAnnounce+0x16a>
			return;
 801d670:	bf00      	nop
 801d672:	e000      	b.n	801d676 <handleAnnounce+0x16a>
			break;
 801d674:	bf00      	nop
	}
}
 801d676:	3710      	adds	r7, #16
 801d678:	46bd      	mov	sp, r7
 801d67a:	bd80      	pop	{r7, pc}

0801d67c <handleSync>:

static void handleSync(PtpClock *ptpClock, TimeInternal *time, bool isFromSelf)
{
 801d67c:	b580      	push	{r7, lr}
 801d67e:	b08a      	sub	sp, #40	; 0x28
 801d680:	af00      	add	r7, sp, #0
 801d682:	60f8      	str	r0, [r7, #12]
 801d684:	60b9      	str	r1, [r7, #8]
 801d686:	4613      	mov	r3, r2
 801d688:	71fb      	strb	r3, [r7, #7]
	TimeInternal originTimestamp;
	TimeInternal correctionField;
	bool  isFromCurrentParent = FALSE;
 801d68a:	2300      	movs	r3, #0
 801d68c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	DBGV("handleSync: received in state %s\n", stateString(ptpClock->portDS.portState));

	if (ptpClock->msgIbufLength < SYNC_LENGTH)
 801d690:	68fb      	ldr	r3, [r7, #12]
 801d692:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 801d696:	2b2b      	cmp	r3, #43	; 0x2b
 801d698:	dc04      	bgt.n	801d6a4 <handleSync+0x28>
	{
		ERROR("handleSync: short message\n");
		toState(ptpClock, PTP_FAULTY);
 801d69a:	2101      	movs	r1, #1
 801d69c:	68f8      	ldr	r0, [r7, #12]
 801d69e:	f7ff fa99 	bl	801cbd4 <toState>
 801d6a2:	e092      	b.n	801d7ca <handleSync+0x14e>
		return;
	}

	switch (ptpClock->portDS.portState)
 801d6a4:	68fb      	ldr	r3, [r7, #12]
 801d6a6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 801d6aa:	2b08      	cmp	r3, #8
 801d6ac:	f200 8088 	bhi.w	801d7c0 <handleSync+0x144>
 801d6b0:	a201      	add	r2, pc, #4	; (adr r2, 801d6b8 <handleSync+0x3c>)
 801d6b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d6b6:	bf00      	nop
 801d6b8:	0801d7c1 	.word	0x0801d7c1
 801d6bc:	0801d7c1 	.word	0x0801d7c1
 801d6c0:	0801d7c1 	.word	0x0801d7c1
 801d6c4:	0801d7c1 	.word	0x0801d7c1
 801d6c8:	0801d7c1 	.word	0x0801d7c1
 801d6cc:	0801d7ad 	.word	0x0801d7ad
 801d6d0:	0801d7b9 	.word	0x0801d7b9
 801d6d4:	0801d6dd 	.word	0x0801d6dd
 801d6d8:	0801d6dd 	.word	0x0801d6dd
			break;

		case PTP_UNCALIBRATED:
		case PTP_SLAVE:

			if (isFromSelf)
 801d6dc:	79fb      	ldrb	r3, [r7, #7]
 801d6de:	2b00      	cmp	r3, #0
 801d6e0:	d170      	bne.n	801d7c4 <handleSync+0x148>
				DBGV("handleSync: ignore from self\n");
				break;
			}

			isFromCurrentParent = isSamePortIdentity(
			&ptpClock->parentDS.parentPortIdentity,
 801d6e2:	68fb      	ldr	r3, [r7, #12]
 801d6e4:	f103 0228 	add.w	r2, r3, #40	; 0x28
			&ptpClock->msgTmpHeader.sourcePortIdentity);
 801d6e8:	68fb      	ldr	r3, [r7, #12]
 801d6ea:	3398      	adds	r3, #152	; 0x98
			isFromCurrentParent = isSamePortIdentity(
 801d6ec:	4619      	mov	r1, r3
 801d6ee:	4610      	mov	r0, r2
 801d6f0:	f7fe fe6b 	bl	801c3ca <isSamePortIdentity>
 801d6f4:	4603      	mov	r3, r0
 801d6f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			if (!isFromCurrentParent)
 801d6fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d6fe:	f083 0301 	eor.w	r3, r3, #1
 801d702:	b2db      	uxtb	r3, r3
 801d704:	2b00      	cmp	r3, #0
 801d706:	d15f      	bne.n	801d7c8 <handleSync+0x14c>
			{
				DBGV("handleSync: ignore from another master\n");
				break;
			}

			ptpClock->timestamp_syncRecieve = *time;
 801d708:	68fb      	ldr	r3, [r7, #12]
 801d70a:	68ba      	ldr	r2, [r7, #8]
 801d70c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 801d710:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d714:	e883 0003 	stmia.w	r3, {r0, r1}
			scaledNanosecondsToInternalTime(&ptpClock->msgTmpHeader.correctionfield, &correctionField);
 801d718:	68fb      	ldr	r3, [r7, #12]
 801d71a:	3390      	adds	r3, #144	; 0x90
 801d71c:	f107 0214 	add.w	r2, r7, #20
 801d720:	4611      	mov	r1, r2
 801d722:	4618      	mov	r0, r3
 801d724:	f7fe fbf0 	bl	801bf08 <scaledNanosecondsToInternalTime>

			if (getFlag(ptpClock->msgTmpHeader.flagField[0], FLAG0_TWO_STEP))
 801d728:	68fb      	ldr	r3, [r7, #12]
 801d72a:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 801d72e:	f003 0302 	and.w	r3, r3, #2
 801d732:	2b00      	cmp	r3, #0
 801d734:	d013      	beq.n	801d75e <handleSync+0xe2>
			{
				ptpClock->waitingForFollowUp = TRUE;
 801d736:	68fb      	ldr	r3, [r7, #12]
 801d738:	2201      	movs	r2, #1
 801d73a:	f883 238c 	strb.w	r2, [r3, #908]	; 0x38c
				ptpClock->recvSyncSequenceId = ptpClock->msgTmpHeader.sequenceId;
 801d73e:	68fb      	ldr	r3, [r7, #12]
 801d740:	f9b3 20a2 	ldrsh.w	r2, [r3, #162]	; 0xa2
 801d744:	68fb      	ldr	r3, [r7, #12]
 801d746:	f8a3 238a 	strh.w	r2, [r3, #906]	; 0x38a
				/* Save correctionField of Sync message for future use */
				ptpClock->correctionField_sync = correctionField;
 801d74a:	68fb      	ldr	r3, [r7, #12]
 801d74c:	f503 735c 	add.w	r3, r3, #880	; 0x370
 801d750:	f107 0214 	add.w	r2, r7, #20
 801d754:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d758:	e883 0003 	stmia.w	r3, {r0, r1}
				updateOffset(ptpClock, &ptpClock->timestamp_syncRecieve, &originTimestamp, &correctionField);
				updateClock(ptpClock);
				issueDelayReqTimerExpired(ptpClock);
			}

			break;
 801d75c:	e035      	b.n	801d7ca <handleSync+0x14e>
				msgUnpackSync(ptpClock->msgIbuf, &ptpClock->msgTmp.sync);
 801d75e:	68fb      	ldr	r3, [r7, #12]
 801d760:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
 801d764:	68fb      	ldr	r3, [r7, #12]
 801d766:	33a8      	adds	r3, #168	; 0xa8
 801d768:	4619      	mov	r1, r3
 801d76a:	4610      	mov	r0, r2
 801d76c:	f001 f810 	bl	801e790 <msgUnpackSync>
				ptpClock->waitingForFollowUp = FALSE;
 801d770:	68fb      	ldr	r3, [r7, #12]
 801d772:	2200      	movs	r2, #0
 801d774:	f883 238c 	strb.w	r2, [r3, #908]	; 0x38c
				toInternalTime(&originTimestamp, &ptpClock->msgTmp.sync.originTimestamp);
 801d778:	68fb      	ldr	r3, [r7, #12]
 801d77a:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 801d77e:	f107 031c 	add.w	r3, r7, #28
 801d782:	4611      	mov	r1, r2
 801d784:	4618      	mov	r0, r3
 801d786:	f7fe fc30 	bl	801bfea <toInternalTime>
				updateOffset(ptpClock, &ptpClock->timestamp_syncRecieve, &originTimestamp, &correctionField);
 801d78a:	68fb      	ldr	r3, [r7, #12]
 801d78c:	f503 7156 	add.w	r1, r3, #856	; 0x358
 801d790:	f107 0314 	add.w	r3, r7, #20
 801d794:	f107 021c 	add.w	r2, r7, #28
 801d798:	68f8      	ldr	r0, [r7, #12]
 801d79a:	f002 fa2d 	bl	801fbf8 <updateOffset>
				updateClock(ptpClock);
 801d79e:	68f8      	ldr	r0, [r7, #12]
 801d7a0:	f002 fb5a 	bl	801fe58 <updateClock>
				issueDelayReqTimerExpired(ptpClock);
 801d7a4:	68f8      	ldr	r0, [r7, #12]
 801d7a6:	f000 fb25 	bl	801ddf4 <issueDelayReqTimerExpired>
			break;
 801d7aa:	e00e      	b.n	801d7ca <handleSync+0x14e>

		case PTP_MASTER:

			if (!isFromSelf)
 801d7ac:	79fb      	ldrb	r3, [r7, #7]
 801d7ae:	f083 0301 	eor.w	r3, r3, #1
 801d7b2:	b2db      	uxtb	r3, r3
 801d7b4:	2b00      	cmp	r3, #0
				break;
			}
			else
			{
				DBGV("handleSync: ignore from self\n");
				break;
 801d7b6:	e008      	b.n	801d7ca <handleSync+0x14e>
//            break;
//        }
		case PTP_PASSIVE:

			DBGV("handleSync: disreguard\n");
			issueDelayReqTimerExpired(ptpClock);
 801d7b8:	68f8      	ldr	r0, [r7, #12]
 801d7ba:	f000 fb1b 	bl	801ddf4 <issueDelayReqTimerExpired>

			break;
 801d7be:	e004      	b.n	801d7ca <handleSync+0x14e>

		default:

			DBGV("handleSync: disreguard\n");
			break;
 801d7c0:	bf00      	nop
 801d7c2:	e002      	b.n	801d7ca <handleSync+0x14e>
				break;
 801d7c4:	bf00      	nop
 801d7c6:	e000      	b.n	801d7ca <handleSync+0x14e>
				break;
 801d7c8:	bf00      	nop
	}
}
 801d7ca:	3728      	adds	r7, #40	; 0x28
 801d7cc:	46bd      	mov	sp, r7
 801d7ce:	bd80      	pop	{r7, pc}

0801d7d0 <handleFollowUp>:


static void handleFollowUp(PtpClock *ptpClock, bool isFromSelf)
{
 801d7d0:	b580      	push	{r7, lr}
 801d7d2:	b088      	sub	sp, #32
 801d7d4:	af00      	add	r7, sp, #0
 801d7d6:	6078      	str	r0, [r7, #4]
 801d7d8:	460b      	mov	r3, r1
 801d7da:	70fb      	strb	r3, [r7, #3]
	TimeInternal preciseOriginTimestamp;
	TimeInternal correctionField;
	bool  isFromCurrentParent = FALSE;
 801d7dc:	2300      	movs	r3, #0
 801d7de:	77fb      	strb	r3, [r7, #31]

	DBGV("handleFollowup: received in state %s\n", stateString(ptpClock->portDS.portState));

	if (ptpClock->msgIbufLength < FOLLOW_UP_LENGTH)
 801d7e0:	687b      	ldr	r3, [r7, #4]
 801d7e2:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 801d7e6:	2b2b      	cmp	r3, #43	; 0x2b
 801d7e8:	dc04      	bgt.n	801d7f4 <handleFollowUp+0x24>
	{
		ERROR("handleFollowup: short message\n");
		toState(ptpClock, PTP_FAULTY);
 801d7ea:	2101      	movs	r1, #1
 801d7ec:	6878      	ldr	r0, [r7, #4]
 801d7ee:	f7ff f9f1 	bl	801cbd4 <toState>
		return;
 801d7f2:	e084      	b.n	801d8fe <handleFollowUp+0x12e>
	}

	if (isFromSelf)
 801d7f4:	78fb      	ldrb	r3, [r7, #3]
 801d7f6:	2b00      	cmp	r3, #0
 801d7f8:	d178      	bne.n	801d8ec <handleFollowUp+0x11c>
	{
		DBGV("handleFollowup: ignore from self\n");
		return;
	}

	switch (ptpClock->portDS.portState)
 801d7fa:	687b      	ldr	r3, [r7, #4]
 801d7fc:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 801d800:	2b08      	cmp	r3, #8
 801d802:	d875      	bhi.n	801d8f0 <handleFollowUp+0x120>
 801d804:	a201      	add	r2, pc, #4	; (adr r2, 801d80c <handleFollowUp+0x3c>)
 801d806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d80a:	bf00      	nop
 801d80c:	0801d8f1 	.word	0x0801d8f1
 801d810:	0801d8f1 	.word	0x0801d8f1
 801d814:	0801d8f1 	.word	0x0801d8f1
 801d818:	0801d8f1 	.word	0x0801d8f1
 801d81c:	0801d8f1 	.word	0x0801d8f1
 801d820:	0801d8f1 	.word	0x0801d8f1
 801d824:	0801d8e5 	.word	0x0801d8e5
 801d828:	0801d831 	.word	0x0801d831
 801d82c:	0801d831 	.word	0x0801d831

		case PTP_UNCALIBRATED:
		case PTP_SLAVE:

			isFromCurrentParent = isSamePortIdentity(
			&ptpClock->parentDS.parentPortIdentity,
 801d830:	687b      	ldr	r3, [r7, #4]
 801d832:	f103 0228 	add.w	r2, r3, #40	; 0x28
			&ptpClock->msgTmpHeader.sourcePortIdentity);
 801d836:	687b      	ldr	r3, [r7, #4]
 801d838:	3398      	adds	r3, #152	; 0x98
			isFromCurrentParent = isSamePortIdentity(
 801d83a:	4619      	mov	r1, r3
 801d83c:	4610      	mov	r0, r2
 801d83e:	f7fe fdc4 	bl	801c3ca <isSamePortIdentity>
 801d842:	4603      	mov	r3, r0
 801d844:	77fb      	strb	r3, [r7, #31]

			if (!ptpClock->waitingForFollowUp)
 801d846:	687b      	ldr	r3, [r7, #4]
 801d848:	f893 338c 	ldrb.w	r3, [r3, #908]	; 0x38c
 801d84c:	f083 0301 	eor.w	r3, r3, #1
 801d850:	b2db      	uxtb	r3, r3
 801d852:	2b00      	cmp	r3, #0
 801d854:	d14e      	bne.n	801d8f4 <handleFollowUp+0x124>
			{
				DBGV("handleFollowup: not waiting a message\n");
				break;
			}

			if (!isFromCurrentParent)
 801d856:	7ffb      	ldrb	r3, [r7, #31]
 801d858:	f083 0301 	eor.w	r3, r3, #1
 801d85c:	b2db      	uxtb	r3, r3
 801d85e:	2b00      	cmp	r3, #0
 801d860:	d14a      	bne.n	801d8f8 <handleFollowUp+0x128>
			{
				DBGV("handleFollowup: not from current parent\n");
				break;
			}

			if (ptpClock->recvSyncSequenceId !=  ptpClock->msgTmpHeader.sequenceId)
 801d862:	687b      	ldr	r3, [r7, #4]
 801d864:	f9b3 238a 	ldrsh.w	r2, [r3, #906]	; 0x38a
 801d868:	687b      	ldr	r3, [r7, #4]
 801d86a:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 801d86e:	429a      	cmp	r2, r3
 801d870:	d144      	bne.n	801d8fc <handleFollowUp+0x12c>
			{
				DBGV("handleFollowup: SequenceID doesn't match with last Sync message\n");
				break;
			}

			msgUnpackFollowUp(ptpClock->msgIbuf, &ptpClock->msgTmp.follow);
 801d872:	687b      	ldr	r3, [r7, #4]
 801d874:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
 801d878:	687b      	ldr	r3, [r7, #4]
 801d87a:	33a8      	adds	r3, #168	; 0xa8
 801d87c:	4619      	mov	r1, r3
 801d87e:	4610      	mov	r0, r2
 801d880:	f001 f862 	bl	801e948 <msgUnpackFollowUp>

			ptpClock->waitingForFollowUp = FALSE;
 801d884:	687b      	ldr	r3, [r7, #4]
 801d886:	2200      	movs	r2, #0
 801d888:	f883 238c 	strb.w	r2, [r3, #908]	; 0x38c
			/* synchronize local clock */
			toInternalTime(&preciseOriginTimestamp, &ptpClock->msgTmp.follow.preciseOriginTimestamp);
 801d88c:	687b      	ldr	r3, [r7, #4]
 801d88e:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 801d892:	f107 0314 	add.w	r3, r7, #20
 801d896:	4611      	mov	r1, r2
 801d898:	4618      	mov	r0, r3
 801d89a:	f7fe fba6 	bl	801bfea <toInternalTime>
			scaledNanosecondsToInternalTime(&ptpClock->msgTmpHeader.correctionfield, &correctionField);
 801d89e:	687b      	ldr	r3, [r7, #4]
 801d8a0:	3390      	adds	r3, #144	; 0x90
 801d8a2:	f107 020c 	add.w	r2, r7, #12
 801d8a6:	4611      	mov	r1, r2
 801d8a8:	4618      	mov	r0, r3
 801d8aa:	f7fe fb2d 	bl	801bf08 <scaledNanosecondsToInternalTime>
			addTime(&correctionField, &correctionField, &ptpClock->correctionField_sync);
 801d8ae:	687b      	ldr	r3, [r7, #4]
 801d8b0:	f503 725c 	add.w	r2, r3, #880	; 0x370
 801d8b4:	f107 010c 	add.w	r1, r7, #12
 801d8b8:	f107 030c 	add.w	r3, r7, #12
 801d8bc:	4618      	mov	r0, r3
 801d8be:	f7fe fc03 	bl	801c0c8 <addTime>
			updateOffset(ptpClock, &ptpClock->timestamp_syncRecieve, &preciseOriginTimestamp, &correctionField);
 801d8c2:	687b      	ldr	r3, [r7, #4]
 801d8c4:	f503 7156 	add.w	r1, r3, #856	; 0x358
 801d8c8:	f107 030c 	add.w	r3, r7, #12
 801d8cc:	f107 0214 	add.w	r2, r7, #20
 801d8d0:	6878      	ldr	r0, [r7, #4]
 801d8d2:	f002 f991 	bl	801fbf8 <updateOffset>
			updateClock(ptpClock);
 801d8d6:	6878      	ldr	r0, [r7, #4]
 801d8d8:	f002 fabe 	bl	801fe58 <updateClock>

			issueDelayReqTimerExpired(ptpClock);
 801d8dc:	6878      	ldr	r0, [r7, #4]
 801d8de:	f000 fa89 	bl	801ddf4 <issueDelayReqTimerExpired>
			break;
 801d8e2:	e00c      	b.n	801d8fe <handleFollowUp+0x12e>
			break;

		case PTP_PASSIVE:

			DBGV("handleFollowup: disreguard\n");
			issueDelayReqTimerExpired(ptpClock);
 801d8e4:	6878      	ldr	r0, [r7, #4]
 801d8e6:	f000 fa85 	bl	801ddf4 <issueDelayReqTimerExpired>
			break;
 801d8ea:	e008      	b.n	801d8fe <handleFollowUp+0x12e>
		return;
 801d8ec:	bf00      	nop
 801d8ee:	e006      	b.n	801d8fe <handleFollowUp+0x12e>

		default:

			DBG("handleFollowup: unrecognized state\n");
			break;
 801d8f0:	bf00      	nop
 801d8f2:	e004      	b.n	801d8fe <handleFollowUp+0x12e>
				break;
 801d8f4:	bf00      	nop
 801d8f6:	e002      	b.n	801d8fe <handleFollowUp+0x12e>
				break;
 801d8f8:	bf00      	nop
 801d8fa:	e000      	b.n	801d8fe <handleFollowUp+0x12e>
				break;
 801d8fc:	bf00      	nop
	}
}
 801d8fe:	3720      	adds	r7, #32
 801d900:	46bd      	mov	sp, r7
 801d902:	bd80      	pop	{r7, pc}

0801d904 <handleDelayReq>:


static void handleDelayReq(PtpClock *ptpClock, TimeInternal *time, bool isFromSelf)
{
 801d904:	b580      	push	{r7, lr}
 801d906:	b084      	sub	sp, #16
 801d908:	af00      	add	r7, sp, #0
 801d90a:	60f8      	str	r0, [r7, #12]
 801d90c:	60b9      	str	r1, [r7, #8]
 801d90e:	4613      	mov	r3, r2
 801d910:	71fb      	strb	r3, [r7, #7]
	switch (ptpClock->portDS.delayMechanism)
 801d912:	68fb      	ldr	r3, [r7, #12]
 801d914:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 801d918:	2b01      	cmp	r3, #1
 801d91a:	d002      	beq.n	801d922 <handleDelayReq+0x1e>
 801d91c:	2b02      	cmp	r3, #2
 801d91e:	d02f      	beq.n	801d980 <handleDelayReq+0x7c>
			break;

		default:

			/* none */
			break;
 801d920:	e031      	b.n	801d986 <handleDelayReq+0x82>
			if (ptpClock->msgIbufLength < DELAY_REQ_LENGTH)
 801d922:	68fb      	ldr	r3, [r7, #12]
 801d924:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 801d928:	2b2b      	cmp	r3, #43	; 0x2b
 801d92a:	dc04      	bgt.n	801d936 <handleDelayReq+0x32>
				toState(ptpClock, PTP_FAULTY);
 801d92c:	2101      	movs	r1, #1
 801d92e:	68f8      	ldr	r0, [r7, #12]
 801d930:	f7ff f950 	bl	801cbd4 <toState>
				return;
 801d934:	e027      	b.n	801d986 <handleDelayReq+0x82>
			switch (ptpClock->portDS.portState)
 801d936:	68fb      	ldr	r3, [r7, #12]
 801d938:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 801d93c:	2b08      	cmp	r3, #8
 801d93e:	d81d      	bhi.n	801d97c <handleDelayReq+0x78>
 801d940:	a201      	add	r2, pc, #4	; (adr r2, 801d948 <handleDelayReq+0x44>)
 801d942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d946:	bf00      	nop
 801d948:	0801d985 	.word	0x0801d985
 801d94c:	0801d985 	.word	0x0801d985
 801d950:	0801d985 	.word	0x0801d985
 801d954:	0801d985 	.word	0x0801d985
 801d958:	0801d97d 	.word	0x0801d97d
 801d95c:	0801d96d 	.word	0x0801d96d
 801d960:	0801d97d 	.word	0x0801d97d
 801d964:	0801d985 	.word	0x0801d985
 801d968:	0801d97d 	.word	0x0801d97d
					issueDelayResp(ptpClock, time, &ptpClock->msgTmpHeader);
 801d96c:	68fb      	ldr	r3, [r7, #12]
 801d96e:	3380      	adds	r3, #128	; 0x80
 801d970:	461a      	mov	r2, r3
 801d972:	68b9      	ldr	r1, [r7, #8]
 801d974:	68f8      	ldr	r0, [r7, #12]
 801d976:	f000 fc1e 	bl	801e1b6 <issueDelayResp>
					break;
 801d97a:	e000      	b.n	801d97e <handleDelayReq+0x7a>
					break;
 801d97c:	bf00      	nop
			break;
 801d97e:	e002      	b.n	801d986 <handleDelayReq+0x82>
			break;
 801d980:	bf00      	nop
 801d982:	e000      	b.n	801d986 <handleDelayReq+0x82>
					return;
 801d984:	bf00      	nop
	}
}
 801d986:	3710      	adds	r7, #16
 801d988:	46bd      	mov	sp, r7
 801d98a:	bd80      	pop	{r7, pc}

0801d98c <handleDelayResp>:



static void handleDelayResp(PtpClock *ptpClock, bool  isFromSelf)
{
 801d98c:	b580      	push	{r7, lr}
 801d98e:	b086      	sub	sp, #24
 801d990:	af00      	add	r7, sp, #0
 801d992:	6078      	str	r0, [r7, #4]
 801d994:	460b      	mov	r3, r1
 801d996:	70fb      	strb	r3, [r7, #3]
	bool  isFromCurrentParent = FALSE;
 801d998:	2300      	movs	r3, #0
 801d99a:	75fb      	strb	r3, [r7, #23]
	bool  isCurrentRequest = FALSE;
 801d99c:	2300      	movs	r3, #0
 801d99e:	75bb      	strb	r3, [r7, #22]
	TimeInternal correctionField;

	switch (ptpClock->portDS.delayMechanism)
 801d9a0:	687b      	ldr	r3, [r7, #4]
 801d9a2:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 801d9a6:	2b01      	cmp	r3, #1
 801d9a8:	d002      	beq.n	801d9b0 <handleDelayResp+0x24>
 801d9aa:	2b02      	cmp	r3, #2
 801d9ac:	d065      	beq.n	801da7a <handleDelayResp+0xee>
			ERROR("handleDelayResp: disreguard in P2P mode\n");
			break;

		default:

			break;
 801d9ae:	e067      	b.n	801da80 <handleDelayResp+0xf4>
			if (ptpClock->msgIbufLength < DELAY_RESP_LENGTH)
 801d9b0:	687b      	ldr	r3, [r7, #4]
 801d9b2:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 801d9b6:	2b35      	cmp	r3, #53	; 0x35
 801d9b8:	dc04      	bgt.n	801d9c4 <handleDelayResp+0x38>
				toState(ptpClock, PTP_FAULTY);
 801d9ba:	2101      	movs	r1, #1
 801d9bc:	6878      	ldr	r0, [r7, #4]
 801d9be:	f7ff f909 	bl	801cbd4 <toState>
				return;
 801d9c2:	e05d      	b.n	801da80 <handleDelayResp+0xf4>
			switch (ptpClock->portDS.portState)
 801d9c4:	687b      	ldr	r3, [r7, #4]
 801d9c6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 801d9ca:	2b03      	cmp	r3, #3
 801d9cc:	dc01      	bgt.n	801d9d2 <handleDelayResp+0x46>
 801d9ce:	2b00      	cmp	r3, #0
					return;
 801d9d0:	e056      	b.n	801da80 <handleDelayResp+0xf4>
 801d9d2:	3b07      	subs	r3, #7
 801d9d4:	2b01      	cmp	r3, #1
 801d9d6:	d852      	bhi.n	801da7e <handleDelayResp+0xf2>
					msgUnpackDelayResp(ptpClock->msgIbuf, &ptpClock->msgTmp.resp);
 801d9d8:	687b      	ldr	r3, [r7, #4]
 801d9da:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
 801d9de:	687b      	ldr	r3, [r7, #4]
 801d9e0:	33a8      	adds	r3, #168	; 0xa8
 801d9e2:	4619      	mov	r1, r3
 801d9e4:	4610      	mov	r0, r2
 801d9e6:	f001 f867 	bl	801eab8 <msgUnpackDelayResp>
					&ptpClock->parentDS.parentPortIdentity,
 801d9ea:	687b      	ldr	r3, [r7, #4]
 801d9ec:	f103 0228 	add.w	r2, r3, #40	; 0x28
					&ptpClock->msgTmpHeader.sourcePortIdentity);
 801d9f0:	687b      	ldr	r3, [r7, #4]
 801d9f2:	3398      	adds	r3, #152	; 0x98
					isFromCurrentParent = isSamePortIdentity(
 801d9f4:	4619      	mov	r1, r3
 801d9f6:	4610      	mov	r0, r2
 801d9f8:	f7fe fce7 	bl	801c3ca <isSamePortIdentity>
 801d9fc:	4603      	mov	r3, r0
 801d9fe:	75fb      	strb	r3, [r7, #23]
					&ptpClock->portDS.portIdentity,
 801da00:	687b      	ldr	r3, [r7, #4]
 801da02:	f103 0258 	add.w	r2, r3, #88	; 0x58
					&ptpClock->msgTmp.resp.requestingPortIdentity);
 801da06:	687b      	ldr	r3, [r7, #4]
 801da08:	33b4      	adds	r3, #180	; 0xb4
					isCurrentRequest = isSamePortIdentity(
 801da0a:	4619      	mov	r1, r3
 801da0c:	4610      	mov	r0, r2
 801da0e:	f7fe fcdc 	bl	801c3ca <isSamePortIdentity>
 801da12:	4603      	mov	r3, r0
 801da14:	75bb      	strb	r3, [r7, #22]
					if (((ptpClock->sentDelayReqSequenceId - 1) == ptpClock->msgTmpHeader.sequenceId) && isCurrentRequest && isFromCurrentParent)
 801da16:	687b      	ldr	r3, [r7, #4]
 801da18:	f9b3 3382 	ldrsh.w	r3, [r3, #898]	; 0x382
 801da1c:	3b01      	subs	r3, #1
 801da1e:	687a      	ldr	r2, [r7, #4]
 801da20:	f9b2 20a2 	ldrsh.w	r2, [r2, #162]	; 0xa2
 801da24:	4293      	cmp	r3, r2
 801da26:	d12a      	bne.n	801da7e <handleDelayResp+0xf2>
 801da28:	7dbb      	ldrb	r3, [r7, #22]
 801da2a:	2b00      	cmp	r3, #0
 801da2c:	d027      	beq.n	801da7e <handleDelayResp+0xf2>
 801da2e:	7dfb      	ldrb	r3, [r7, #23]
 801da30:	2b00      	cmp	r3, #0
 801da32:	d024      	beq.n	801da7e <handleDelayResp+0xf2>
						toInternalTime(&ptpClock->timestamp_delayReqRecieve, &ptpClock->msgTmp.resp.receiveTimestamp);
 801da34:	687b      	ldr	r3, [r7, #4]
 801da36:	f503 725a 	add.w	r2, r3, #872	; 0x368
 801da3a:	687b      	ldr	r3, [r7, #4]
 801da3c:	33a8      	adds	r3, #168	; 0xa8
 801da3e:	4619      	mov	r1, r3
 801da40:	4610      	mov	r0, r2
 801da42:	f7fe fad2 	bl	801bfea <toInternalTime>
						scaledNanosecondsToInternalTime(&ptpClock->msgTmpHeader.correctionfield, &correctionField);
 801da46:	687b      	ldr	r3, [r7, #4]
 801da48:	3390      	adds	r3, #144	; 0x90
 801da4a:	f107 020c 	add.w	r2, r7, #12
 801da4e:	4611      	mov	r1, r2
 801da50:	4618      	mov	r0, r3
 801da52:	f7fe fa59 	bl	801bf08 <scaledNanosecondsToInternalTime>
						updateDelay(ptpClock, &ptpClock->timestamp_delayReqSend, &ptpClock->timestamp_delayReqRecieve, &correctionField);
 801da56:	687b      	ldr	r3, [r7, #4]
 801da58:	f503 7158 	add.w	r1, r3, #864	; 0x360
 801da5c:	687b      	ldr	r3, [r7, #4]
 801da5e:	f503 725a 	add.w	r2, r3, #872	; 0x368
 801da62:	f107 030c 	add.w	r3, r7, #12
 801da66:	6878      	ldr	r0, [r7, #4]
 801da68:	f002 f95c 	bl	801fd24 <updateDelay>
						ptpClock->portDS.logMinDelayReqInterval = ptpClock->msgTmpHeader.logMessageInterval;
 801da6c:	687b      	ldr	r3, [r7, #4]
 801da6e:	f993 20a5 	ldrsb.w	r2, [r3, #165]	; 0xa5
 801da72:	687b      	ldr	r3, [r7, #4]
 801da74:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
			break;
 801da78:	e001      	b.n	801da7e <handleDelayResp+0xf2>
			break;
 801da7a:	bf00      	nop
 801da7c:	e000      	b.n	801da80 <handleDelayResp+0xf4>
			break;
 801da7e:	bf00      	nop
	}
}
 801da80:	3718      	adds	r7, #24
 801da82:	46bd      	mov	sp, r7
 801da84:	bd80      	pop	{r7, pc}
	...

0801da88 <handlePDelayReq>:


static void handlePDelayReq(PtpClock *ptpClock, TimeInternal *time, bool  isFromSelf)
{
 801da88:	b580      	push	{r7, lr}
 801da8a:	b084      	sub	sp, #16
 801da8c:	af00      	add	r7, sp, #0
 801da8e:	60f8      	str	r0, [r7, #12]
 801da90:	60b9      	str	r1, [r7, #8]
 801da92:	4613      	mov	r3, r2
 801da94:	71fb      	strb	r3, [r7, #7]
	switch (ptpClock->portDS.delayMechanism)
 801da96:	68fb      	ldr	r3, [r7, #12]
 801da98:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 801da9c:	2b01      	cmp	r3, #1
 801da9e:	d04a      	beq.n	801db36 <handlePDelayReq+0xae>
 801daa0:	2b02      	cmp	r3, #2
 801daa2:	d000      	beq.n	801daa6 <handlePDelayReq+0x1e>
			}
			break;

		default:

			break;
 801daa4:	e04a      	b.n	801db3c <handlePDelayReq+0xb4>
			if (ptpClock->msgIbufLength < PDELAY_REQ_LENGTH)
 801daa6:	68fb      	ldr	r3, [r7, #12]
 801daa8:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 801daac:	2b35      	cmp	r3, #53	; 0x35
 801daae:	dc04      	bgt.n	801daba <handlePDelayReq+0x32>
					toState(ptpClock, PTP_FAULTY);
 801dab0:	2101      	movs	r1, #1
 801dab2:	68f8      	ldr	r0, [r7, #12]
 801dab4:	f7ff f88e 	bl	801cbd4 <toState>
					return;
 801dab8:	e040      	b.n	801db3c <handlePDelayReq+0xb4>
			switch (ptpClock->portDS.portState)
 801daba:	68fb      	ldr	r3, [r7, #12]
 801dabc:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 801dac0:	2b08      	cmp	r3, #8
 801dac2:	d832      	bhi.n	801db2a <handlePDelayReq+0xa2>
 801dac4:	a201      	add	r2, pc, #4	; (adr r2, 801dacc <handlePDelayReq+0x44>)
 801dac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801daca:	bf00      	nop
 801dacc:	0801db3b 	.word	0x0801db3b
 801dad0:	0801db3b 	.word	0x0801db3b
 801dad4:	0801db3b 	.word	0x0801db3b
 801dad8:	0801db3b 	.word	0x0801db3b
 801dadc:	0801db2b 	.word	0x0801db2b
 801dae0:	0801daf1 	.word	0x0801daf1
 801dae4:	0801daf1 	.word	0x0801daf1
 801dae8:	0801db3b 	.word	0x0801db3b
 801daec:	0801daf1 	.word	0x0801daf1
					if (isFromSelf)
 801daf0:	79fb      	ldrb	r3, [r7, #7]
 801daf2:	2b00      	cmp	r3, #0
 801daf4:	d11b      	bne.n	801db2e <handlePDelayReq+0xa6>
					issuePDelayResp(ptpClock, time, &ptpClock->msgTmpHeader);
 801daf6:	68fb      	ldr	r3, [r7, #12]
 801daf8:	3380      	adds	r3, #128	; 0x80
 801dafa:	461a      	mov	r2, r3
 801dafc:	68b9      	ldr	r1, [r7, #8]
 801dafe:	68f8      	ldr	r0, [r7, #12]
 801db00:	f000 fb23 	bl	801e14a <issuePDelayResp>
					if ((time->seconds != 0) && getFlag(ptpClock->msgTmpHeader.flagField[0], FLAG0_TWO_STEP)) /* not loopback mode */
 801db04:	68bb      	ldr	r3, [r7, #8]
 801db06:	681b      	ldr	r3, [r3, #0]
 801db08:	2b00      	cmp	r3, #0
 801db0a:	d012      	beq.n	801db32 <handlePDelayReq+0xaa>
 801db0c:	68fb      	ldr	r3, [r7, #12]
 801db0e:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 801db12:	f003 0302 	and.w	r3, r3, #2
 801db16:	2b00      	cmp	r3, #0
 801db18:	d00b      	beq.n	801db32 <handlePDelayReq+0xaa>
							issuePDelayRespFollowUp(ptpClock, time, &ptpClock->msgTmpHeader);
 801db1a:	68fb      	ldr	r3, [r7, #12]
 801db1c:	3380      	adds	r3, #128	; 0x80
 801db1e:	461a      	mov	r2, r3
 801db20:	68b9      	ldr	r1, [r7, #8]
 801db22:	68f8      	ldr	r0, [r7, #12]
 801db24:	f000 fb70 	bl	801e208 <issuePDelayRespFollowUp>
					break;
 801db28:	e003      	b.n	801db32 <handlePDelayReq+0xaa>
					break;
 801db2a:	bf00      	nop
 801db2c:	e006      	b.n	801db3c <handlePDelayReq+0xb4>
							break;
 801db2e:	bf00      	nop
 801db30:	e004      	b.n	801db3c <handlePDelayReq+0xb4>
					break;
 801db32:	bf00      	nop
			break;
 801db34:	e002      	b.n	801db3c <handlePDelayReq+0xb4>
			break;
 801db36:	bf00      	nop
 801db38:	e000      	b.n	801db3c <handlePDelayReq+0xb4>
					return;
 801db3a:	bf00      	nop
	}
}
 801db3c:	3710      	adds	r7, #16
 801db3e:	46bd      	mov	sp, r7
 801db40:	bd80      	pop	{r7, pc}
 801db42:	bf00      	nop

0801db44 <handlePDelayResp>:

static void handlePDelayResp(PtpClock *ptpClock, TimeInternal *time, bool isFromSelf)
{
 801db44:	b580      	push	{r7, lr}
 801db46:	b08a      	sub	sp, #40	; 0x28
 801db48:	af00      	add	r7, sp, #0
 801db4a:	60f8      	str	r0, [r7, #12]
 801db4c:	60b9      	str	r1, [r7, #8]
 801db4e:	4613      	mov	r3, r2
 801db50:	71fb      	strb	r3, [r7, #7]
	TimeInternal requestReceiptTimestamp;
	TimeInternal correctionField;
	bool  isCurrentRequest;

	switch (ptpClock->portDS.delayMechanism)
 801db52:	68fb      	ldr	r3, [r7, #12]
 801db54:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 801db58:	2b01      	cmp	r3, #1
 801db5a:	f000 80a7 	beq.w	801dcac <handlePDelayResp+0x168>
 801db5e:	2b02      	cmp	r3, #2
 801db60:	d000      	beq.n	801db64 <handlePDelayResp+0x20>
			}
			break;

		default:

			break;
 801db62:	e0a6      	b.n	801dcb2 <handlePDelayResp+0x16e>
			if (ptpClock->msgIbufLength < PDELAY_RESP_LENGTH)
 801db64:	68fb      	ldr	r3, [r7, #12]
 801db66:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 801db6a:	2b35      	cmp	r3, #53	; 0x35
 801db6c:	dc04      	bgt.n	801db78 <handlePDelayResp+0x34>
					toState(ptpClock, PTP_FAULTY);
 801db6e:	2101      	movs	r1, #1
 801db70:	68f8      	ldr	r0, [r7, #12]
 801db72:	f7ff f82f 	bl	801cbd4 <toState>
					return;
 801db76:	e09c      	b.n	801dcb2 <handlePDelayResp+0x16e>
			switch (ptpClock->portDS.portState)
 801db78:	68fb      	ldr	r3, [r7, #12]
 801db7a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 801db7e:	2b08      	cmp	r3, #8
 801db80:	f200 808e 	bhi.w	801dca0 <handlePDelayResp+0x15c>
 801db84:	a201      	add	r2, pc, #4	; (adr r2, 801db8c <handlePDelayResp+0x48>)
 801db86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801db8a:	bf00      	nop
 801db8c:	0801dcb1 	.word	0x0801dcb1
 801db90:	0801dcb1 	.word	0x0801dcb1
 801db94:	0801dcb1 	.word	0x0801dcb1
 801db98:	0801dcb1 	.word	0x0801dcb1
 801db9c:	0801dca1 	.word	0x0801dca1
 801dba0:	0801dbb1 	.word	0x0801dbb1
 801dba4:	0801dca1 	.word	0x0801dca1
 801dba8:	0801dcb1 	.word	0x0801dcb1
 801dbac:	0801dbb1 	.word	0x0801dbb1
					if (isFromSelf)
 801dbb0:	79fb      	ldrb	r3, [r7, #7]
 801dbb2:	2b00      	cmp	r3, #0
 801dbb4:	d176      	bne.n	801dca4 <handlePDelayResp+0x160>
					msgUnpackPDelayResp(ptpClock->msgIbuf, &ptpClock->msgTmp.presp);
 801dbb6:	68fb      	ldr	r3, [r7, #12]
 801dbb8:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
 801dbbc:	68fb      	ldr	r3, [r7, #12]
 801dbbe:	33a8      	adds	r3, #168	; 0xa8
 801dbc0:	4619      	mov	r1, r3
 801dbc2:	4610      	mov	r0, r2
 801dbc4:	f001 f889 	bl	801ecda <msgUnpackPDelayResp>
					&ptpClock->portDS.portIdentity,
 801dbc8:	68fb      	ldr	r3, [r7, #12]
 801dbca:	f103 0258 	add.w	r2, r3, #88	; 0x58
					&ptpClock->msgTmp.presp.requestingPortIdentity);
 801dbce:	68fb      	ldr	r3, [r7, #12]
 801dbd0:	33b4      	adds	r3, #180	; 0xb4
					isCurrentRequest = isSamePortIdentity(
 801dbd2:	4619      	mov	r1, r3
 801dbd4:	4610      	mov	r0, r2
 801dbd6:	f7fe fbf8 	bl	801c3ca <isSamePortIdentity>
 801dbda:	4603      	mov	r3, r0
 801dbdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					if (((ptpClock->sentPDelayReqSequenceId - 1) == ptpClock->msgTmpHeader.sequenceId) && isCurrentRequest)
 801dbe0:	68fb      	ldr	r3, [r7, #12]
 801dbe2:	f9b3 3380 	ldrsh.w	r3, [r3, #896]	; 0x380
 801dbe6:	3b01      	subs	r3, #1
 801dbe8:	68fa      	ldr	r2, [r7, #12]
 801dbea:	f9b2 20a2 	ldrsh.w	r2, [r2, #162]	; 0xa2
 801dbee:	4293      	cmp	r3, r2
 801dbf0:	d15a      	bne.n	801dca8 <handlePDelayResp+0x164>
 801dbf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801dbf6:	2b00      	cmp	r3, #0
 801dbf8:	d056      	beq.n	801dca8 <handlePDelayResp+0x164>
						if (getFlag(ptpClock->msgTmpHeader.flagField[0], FLAG0_TWO_STEP))
 801dbfa:	68fb      	ldr	r3, [r7, #12]
 801dbfc:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 801dc00:	f003 0302 	and.w	r3, r3, #2
 801dc04:	2b00      	cmp	r3, #0
 801dc06:	d02f      	beq.n	801dc68 <handlePDelayResp+0x124>
							ptpClock->waitingForPDelayRespFollowUp = TRUE;
 801dc08:	68fb      	ldr	r3, [r7, #12]
 801dc0a:	2201      	movs	r2, #1
 801dc0c:	f883 238d 	strb.w	r2, [r3, #909]	; 0x38d
							ptpClock->pdelay_t4 = *time;
 801dc10:	68fb      	ldr	r3, [r7, #12]
 801dc12:	68ba      	ldr	r2, [r7, #8]
 801dc14:	f503 7354 	add.w	r3, r3, #848	; 0x350
 801dc18:	e892 0003 	ldmia.w	r2, {r0, r1}
 801dc1c:	e883 0003 	stmia.w	r3, {r0, r1}
							toInternalTime(&requestReceiptTimestamp, &ptpClock->msgTmp.presp.requestReceiptTimestamp);
 801dc20:	68fb      	ldr	r3, [r7, #12]
 801dc22:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 801dc26:	f107 031c 	add.w	r3, r7, #28
 801dc2a:	4611      	mov	r1, r2
 801dc2c:	4618      	mov	r0, r3
 801dc2e:	f7fe f9dc 	bl	801bfea <toInternalTime>
							ptpClock->pdelay_t2 = requestReceiptTimestamp;
 801dc32:	68fb      	ldr	r3, [r7, #12]
 801dc34:	f503 7350 	add.w	r3, r3, #832	; 0x340
 801dc38:	f107 021c 	add.w	r2, r7, #28
 801dc3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801dc40:	e883 0003 	stmia.w	r3, {r0, r1}
							scaledNanosecondsToInternalTime(&ptpClock->msgTmpHeader.correctionfield, &correctionField);
 801dc44:	68fb      	ldr	r3, [r7, #12]
 801dc46:	3390      	adds	r3, #144	; 0x90
 801dc48:	f107 0214 	add.w	r2, r7, #20
 801dc4c:	4611      	mov	r1, r2
 801dc4e:	4618      	mov	r0, r3
 801dc50:	f7fe f95a 	bl	801bf08 <scaledNanosecondsToInternalTime>
							ptpClock->correctionField_pDelayResp = correctionField;
 801dc54:	68fb      	ldr	r3, [r7, #12]
 801dc56:	f503 735e 	add.w	r3, r3, #888	; 0x378
 801dc5a:	f107 0214 	add.w	r2, r7, #20
 801dc5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 801dc62:	e883 0003 	stmia.w	r3, {r0, r1}
					break;
 801dc66:	e01f      	b.n	801dca8 <handlePDelayResp+0x164>
							ptpClock->waitingForPDelayRespFollowUp = FALSE;
 801dc68:	68fb      	ldr	r3, [r7, #12]
 801dc6a:	2200      	movs	r2, #0
 801dc6c:	f883 238d 	strb.w	r2, [r3, #909]	; 0x38d
							ptpClock->pdelay_t4 = *time;
 801dc70:	68fb      	ldr	r3, [r7, #12]
 801dc72:	68ba      	ldr	r2, [r7, #8]
 801dc74:	f503 7354 	add.w	r3, r3, #848	; 0x350
 801dc78:	e892 0003 	ldmia.w	r2, {r0, r1}
 801dc7c:	e883 0003 	stmia.w	r3, {r0, r1}
							scaledNanosecondsToInternalTime(&ptpClock->msgTmpHeader.correctionfield, &correctionField);
 801dc80:	68fb      	ldr	r3, [r7, #12]
 801dc82:	3390      	adds	r3, #144	; 0x90
 801dc84:	f107 0214 	add.w	r2, r7, #20
 801dc88:	4611      	mov	r1, r2
 801dc8a:	4618      	mov	r0, r3
 801dc8c:	f7fe f93c 	bl	801bf08 <scaledNanosecondsToInternalTime>
							updatePeerDelay(ptpClock, &correctionField, FALSE);
 801dc90:	f107 0314 	add.w	r3, r7, #20
 801dc94:	2200      	movs	r2, #0
 801dc96:	4619      	mov	r1, r3
 801dc98:	68f8      	ldr	r0, [r7, #12]
 801dc9a:	f002 f885 	bl	801fda8 <updatePeerDelay>
					break;
 801dc9e:	e003      	b.n	801dca8 <handlePDelayResp+0x164>
						break;
 801dca0:	bf00      	nop
 801dca2:	e006      	b.n	801dcb2 <handlePDelayResp+0x16e>
							break;
 801dca4:	bf00      	nop
 801dca6:	e004      	b.n	801dcb2 <handlePDelayResp+0x16e>
					break;
 801dca8:	bf00      	nop
			break;
 801dcaa:	e002      	b.n	801dcb2 <handlePDelayResp+0x16e>
			break;
 801dcac:	bf00      	nop
 801dcae:	e000      	b.n	801dcb2 <handlePDelayResp+0x16e>
				return;
 801dcb0:	bf00      	nop
	}
}
 801dcb2:	3728      	adds	r7, #40	; 0x28
 801dcb4:	46bd      	mov	sp, r7
 801dcb6:	bd80      	pop	{r7, pc}

0801dcb8 <handlePDelayRespFollowUp>:

static void handlePDelayRespFollowUp(PtpClock *ptpClock, bool isFromSelf)
{
 801dcb8:	b580      	push	{r7, lr}
 801dcba:	b086      	sub	sp, #24
 801dcbc:	af00      	add	r7, sp, #0
 801dcbe:	6078      	str	r0, [r7, #4]
 801dcc0:	460b      	mov	r3, r1
 801dcc2:	70fb      	strb	r3, [r7, #3]
	TimeInternal responseOriginTimestamp;
	TimeInternal correctionField;

	switch (ptpClock->portDS.delayMechanism)
 801dcc4:	687b      	ldr	r3, [r7, #4]
 801dcc6:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 801dcca:	2b01      	cmp	r3, #1
 801dccc:	d073      	beq.n	801ddb6 <handlePDelayRespFollowUp+0xfe>
 801dcce:	2b02      	cmp	r3, #2
 801dcd0:	d000      	beq.n	801dcd4 <handlePDelayRespFollowUp+0x1c>
			}
			break;

		default:

			break;
 801dcd2:	e073      	b.n	801ddbc <handlePDelayRespFollowUp+0x104>
			if (ptpClock->msgIbufLength < PDELAY_RESP_FOLLOW_UP_LENGTH)
 801dcd4:	687b      	ldr	r3, [r7, #4]
 801dcd6:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 801dcda:	2b35      	cmp	r3, #53	; 0x35
 801dcdc:	dc04      	bgt.n	801dce8 <handlePDelayRespFollowUp+0x30>
				toState(ptpClock, PTP_FAULTY);
 801dcde:	2101      	movs	r1, #1
 801dce0:	6878      	ldr	r0, [r7, #4]
 801dce2:	f7fe ff77 	bl	801cbd4 <toState>
				return;
 801dce6:	e069      	b.n	801ddbc <handlePDelayRespFollowUp+0x104>
			switch (ptpClock->portDS.portState)
 801dce8:	687b      	ldr	r3, [r7, #4]
 801dcea:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 801dcee:	2b08      	cmp	r3, #8
 801dcf0:	d863      	bhi.n	801ddba <handlePDelayRespFollowUp+0x102>
 801dcf2:	a201      	add	r2, pc, #4	; (adr r2, 801dcf8 <handlePDelayRespFollowUp+0x40>)
 801dcf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dcf8:	0801ddbb 	.word	0x0801ddbb
 801dcfc:	0801ddbb 	.word	0x0801ddbb
 801dd00:	0801ddbb 	.word	0x0801ddbb
 801dd04:	0801ddbb 	.word	0x0801ddbb
 801dd08:	0801ddbb 	.word	0x0801ddbb
 801dd0c:	0801dd1d 	.word	0x0801dd1d
 801dd10:	0801ddbb 	.word	0x0801ddbb
 801dd14:	0801ddbb 	.word	0x0801ddbb
 801dd18:	0801dd1d 	.word	0x0801dd1d
					if (!ptpClock->waitingForPDelayRespFollowUp)
 801dd1c:	687b      	ldr	r3, [r7, #4]
 801dd1e:	f893 338d 	ldrb.w	r3, [r3, #909]	; 0x38d
 801dd22:	f083 0301 	eor.w	r3, r3, #1
 801dd26:	b2db      	uxtb	r3, r3
 801dd28:	2b00      	cmp	r3, #0
 801dd2a:	d142      	bne.n	801ddb2 <handlePDelayRespFollowUp+0xfa>
					if (ptpClock->msgTmpHeader.sequenceId == ptpClock->sentPDelayReqSequenceId - 1)
 801dd2c:	687b      	ldr	r3, [r7, #4]
 801dd2e:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 801dd32:	461a      	mov	r2, r3
 801dd34:	687b      	ldr	r3, [r7, #4]
 801dd36:	f9b3 3380 	ldrsh.w	r3, [r3, #896]	; 0x380
 801dd3a:	3b01      	subs	r3, #1
 801dd3c:	429a      	cmp	r2, r3
 801dd3e:	d13c      	bne.n	801ddba <handlePDelayRespFollowUp+0x102>
							msgUnpackPDelayRespFollowUp(ptpClock->msgIbuf, &ptpClock->msgTmp.prespfollow);
 801dd40:	687b      	ldr	r3, [r7, #4]
 801dd42:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
 801dd46:	687b      	ldr	r3, [r7, #4]
 801dd48:	33a8      	adds	r3, #168	; 0xa8
 801dd4a:	4619      	mov	r1, r3
 801dd4c:	4610      	mov	r0, r2
 801dd4e:	f001 f887 	bl	801ee60 <msgUnpackPDelayRespFollowUp>
							toInternalTime(&responseOriginTimestamp, &ptpClock->msgTmp.prespfollow.responseOriginTimestamp);
 801dd52:	687b      	ldr	r3, [r7, #4]
 801dd54:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 801dd58:	f107 0310 	add.w	r3, r7, #16
 801dd5c:	4611      	mov	r1, r2
 801dd5e:	4618      	mov	r0, r3
 801dd60:	f7fe f943 	bl	801bfea <toInternalTime>
							ptpClock->pdelay_t3 = responseOriginTimestamp;
 801dd64:	687b      	ldr	r3, [r7, #4]
 801dd66:	f503 7352 	add.w	r3, r3, #840	; 0x348
 801dd6a:	f107 0210 	add.w	r2, r7, #16
 801dd6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 801dd72:	e883 0003 	stmia.w	r3, {r0, r1}
							scaledNanosecondsToInternalTime(&ptpClock->msgTmpHeader.correctionfield, &correctionField);
 801dd76:	687b      	ldr	r3, [r7, #4]
 801dd78:	3390      	adds	r3, #144	; 0x90
 801dd7a:	f107 0208 	add.w	r2, r7, #8
 801dd7e:	4611      	mov	r1, r2
 801dd80:	4618      	mov	r0, r3
 801dd82:	f7fe f8c1 	bl	801bf08 <scaledNanosecondsToInternalTime>
							addTime(&correctionField, &correctionField, &ptpClock->correctionField_pDelayResp);
 801dd86:	687b      	ldr	r3, [r7, #4]
 801dd88:	f503 725e 	add.w	r2, r3, #888	; 0x378
 801dd8c:	f107 0108 	add.w	r1, r7, #8
 801dd90:	f107 0308 	add.w	r3, r7, #8
 801dd94:	4618      	mov	r0, r3
 801dd96:	f7fe f997 	bl	801c0c8 <addTime>
							updatePeerDelay(ptpClock, &correctionField, TRUE);
 801dd9a:	f107 0308 	add.w	r3, r7, #8
 801dd9e:	2201      	movs	r2, #1
 801dda0:	4619      	mov	r1, r3
 801dda2:	6878      	ldr	r0, [r7, #4]
 801dda4:	f002 f800 	bl	801fda8 <updatePeerDelay>
							ptpClock->waitingForPDelayRespFollowUp = FALSE;
 801dda8:	687b      	ldr	r3, [r7, #4]
 801ddaa:	2200      	movs	r2, #0
 801ddac:	f883 238d 	strb.w	r2, [r3, #909]	; 0x38d
							break;
 801ddb0:	e000      	b.n	801ddb4 <handlePDelayRespFollowUp+0xfc>
						break;
 801ddb2:	bf00      	nop
			break;
 801ddb4:	e001      	b.n	801ddba <handlePDelayRespFollowUp+0x102>
			break;
 801ddb6:	bf00      	nop
 801ddb8:	e000      	b.n	801ddbc <handlePDelayRespFollowUp+0x104>
			break;
 801ddba:	bf00      	nop
	}
}
 801ddbc:	3718      	adds	r7, #24
 801ddbe:	46bd      	mov	sp, r7
 801ddc0:	bd80      	pop	{r7, pc}
 801ddc2:	bf00      	nop

0801ddc4 <handleManagement>:

static void handleManagement(PtpClock *ptpClock, bool isFromSelf)
{
 801ddc4:	b480      	push	{r7}
 801ddc6:	b083      	sub	sp, #12
 801ddc8:	af00      	add	r7, sp, #0
 801ddca:	6078      	str	r0, [r7, #4]
 801ddcc:	460b      	mov	r3, r1
 801ddce:	70fb      	strb	r3, [r7, #3]
	/* ENABLE_PORT -> DESIGNATED_ENABLED -> toState(PTP_INITIALIZING) */
	/* DISABLE_PORT -> DESIGNATED_DISABLED -> toState(PTP_DISABLED) */
}
 801ddd0:	bf00      	nop
 801ddd2:	370c      	adds	r7, #12
 801ddd4:	46bd      	mov	sp, r7
 801ddd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddda:	4770      	bx	lr

0801dddc <handleSignaling>:

static void handleSignaling(PtpClock *ptpClock, bool  isFromSelf)
{
 801dddc:	b480      	push	{r7}
 801ddde:	b083      	sub	sp, #12
 801dde0:	af00      	add	r7, sp, #0
 801dde2:	6078      	str	r0, [r7, #4]
 801dde4:	460b      	mov	r3, r1
 801dde6:	70fb      	strb	r3, [r7, #3]
}
 801dde8:	bf00      	nop
 801ddea:	370c      	adds	r7, #12
 801ddec:	46bd      	mov	sp, r7
 801ddee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddf2:	4770      	bx	lr

0801ddf4 <issueDelayReqTimerExpired>:

static void issueDelayReqTimerExpired(PtpClock *ptpClock)
{
 801ddf4:	b580      	push	{r7, lr}
 801ddf6:	b082      	sub	sp, #8
 801ddf8:	af00      	add	r7, sp, #0
 801ddfa:	6078      	str	r0, [r7, #4]
	switch (ptpClock->portDS.delayMechanism)
 801ddfc:	687b      	ldr	r3, [r7, #4]
 801ddfe:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 801de02:	2b01      	cmp	r3, #1
 801de04:	d002      	beq.n	801de0c <issueDelayReqTimerExpired+0x18>
 801de06:	2b02      	cmp	r3, #2
 801de08:	d02d      	beq.n	801de66 <issueDelayReqTimerExpired+0x72>
					issuePDelayReq(ptpClock);
			}
			break;

		default:
				break;
 801de0a:	e059      	b.n	801dec0 <issueDelayReqTimerExpired+0xcc>
			if (ptpClock->portDS.portState != PTP_SLAVE)
 801de0c:	687b      	ldr	r3, [r7, #4]
 801de0e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 801de12:	2b08      	cmp	r3, #8
 801de14:	d14f      	bne.n	801deb6 <issueDelayReqTimerExpired+0xc2>
			if (timerExpired(DELAYREQ_INTERVAL_TIMER))
 801de16:	2001      	movs	r0, #1
 801de18:	f002 f9c2 	bl	80201a0 <timerExpired>
 801de1c:	4603      	mov	r3, r0
 801de1e:	2b00      	cmp	r3, #0
 801de20:	d04b      	beq.n	801deba <issueDelayReqTimerExpired+0xc6>
					timerStart(DELAYREQ_INTERVAL_TIMER, getRand(pow2ms(ptpClock->portDS.logMinDelayReqInterval + 1)));
 801de22:	687b      	ldr	r3, [r7, #4]
 801de24:	f993 3063 	ldrsb.w	r3, [r3, #99]	; 0x63
 801de28:	2b00      	cmp	r3, #0
 801de2a:	db08      	blt.n	801de3e <issueDelayReqTimerExpired+0x4a>
 801de2c:	687b      	ldr	r3, [r7, #4]
 801de2e:	f993 3063 	ldrsb.w	r3, [r3, #99]	; 0x63
 801de32:	3301      	adds	r3, #1
 801de34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801de38:	fa02 f303 	lsl.w	r3, r2, r3
 801de3c:	e007      	b.n	801de4e <issueDelayReqTimerExpired+0x5a>
 801de3e:	687b      	ldr	r3, [r7, #4]
 801de40:	f993 3063 	ldrsb.w	r3, [r3, #99]	; 0x63
 801de44:	43db      	mvns	r3, r3
 801de46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801de4a:	fa42 f303 	asr.w	r3, r2, r3
 801de4e:	4618      	mov	r0, r3
 801de50:	f002 f906 	bl	8020060 <getRand>
 801de54:	4603      	mov	r3, r0
 801de56:	4619      	mov	r1, r3
 801de58:	2001      	movs	r0, #1
 801de5a:	f002 f97b 	bl	8020154 <timerStart>
					issueDelayReq(ptpClock);
 801de5e:	6878      	ldr	r0, [r7, #4]
 801de60:	f000 f8d3 	bl	801e00a <issueDelayReq>
			break;
 801de64:	e029      	b.n	801deba <issueDelayReqTimerExpired+0xc6>
			if (timerExpired(PDELAYREQ_INTERVAL_TIMER))
 801de66:	2000      	movs	r0, #0
 801de68:	f002 f99a 	bl	80201a0 <timerExpired>
 801de6c:	4603      	mov	r3, r0
 801de6e:	2b00      	cmp	r3, #0
 801de70:	d025      	beq.n	801debe <issueDelayReqTimerExpired+0xca>
					timerStart(PDELAYREQ_INTERVAL_TIMER, getRand(pow2ms(ptpClock->portDS.logMinPdelayReqInterval + 1)));
 801de72:	687b      	ldr	r3, [r7, #4]
 801de74:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 801de78:	2b00      	cmp	r3, #0
 801de7a:	db08      	blt.n	801de8e <issueDelayReqTimerExpired+0x9a>
 801de7c:	687b      	ldr	r3, [r7, #4]
 801de7e:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 801de82:	3301      	adds	r3, #1
 801de84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801de88:	fa02 f303 	lsl.w	r3, r2, r3
 801de8c:	e007      	b.n	801de9e <issueDelayReqTimerExpired+0xaa>
 801de8e:	687b      	ldr	r3, [r7, #4]
 801de90:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 801de94:	43db      	mvns	r3, r3
 801de96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801de9a:	fa42 f303 	asr.w	r3, r2, r3
 801de9e:	4618      	mov	r0, r3
 801dea0:	f002 f8de 	bl	8020060 <getRand>
 801dea4:	4603      	mov	r3, r0
 801dea6:	4619      	mov	r1, r3
 801dea8:	2000      	movs	r0, #0
 801deaa:	f002 f953 	bl	8020154 <timerStart>
					issuePDelayReq(ptpClock);
 801deae:	6878      	ldr	r0, [r7, #4]
 801deb0:	f000 f8fb 	bl	801e0aa <issuePDelayReq>
			break;
 801deb4:	e003      	b.n	801debe <issueDelayReqTimerExpired+0xca>
					break;
 801deb6:	bf00      	nop
 801deb8:	e002      	b.n	801dec0 <issueDelayReqTimerExpired+0xcc>
			break;
 801deba:	bf00      	nop
 801debc:	e000      	b.n	801dec0 <issueDelayReqTimerExpired+0xcc>
			break;
 801debe:	bf00      	nop
	}
}
 801dec0:	bf00      	nop
 801dec2:	3708      	adds	r7, #8
 801dec4:	46bd      	mov	sp, r7
 801dec6:	bd80      	pop	{r7, pc}

0801dec8 <issueAnnounce>:


/* Pack and send  on general multicast ip adress an Announce message */
static void issueAnnounce(PtpClock *ptpClock)
{
 801dec8:	b580      	push	{r7, lr}
 801deca:	b082      	sub	sp, #8
 801decc:	af00      	add	r7, sp, #0
 801dece:	6078      	str	r0, [r7, #4]
	msgPackAnnounce(ptpClock, ptpClock->msgObuf);
 801ded0:	687b      	ldr	r3, [r7, #4]
 801ded2:	33cc      	adds	r3, #204	; 0xcc
 801ded4:	4619      	mov	r1, r3
 801ded6:	6878      	ldr	r0, [r7, #4]
 801ded8:	f000 fb07 	bl	801e4ea <msgPackAnnounce>

	if (!netSendGeneral(&ptpClock->netPath, ptpClock->msgObuf, ANNOUNCE_LENGTH))
 801dedc:	687b      	ldr	r3, [r7, #4]
 801dede:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
 801dee2:	687b      	ldr	r3, [r7, #4]
 801dee4:	33cc      	adds	r3, #204	; 0xcc
 801dee6:	2240      	movs	r2, #64	; 0x40
 801dee8:	4619      	mov	r1, r3
 801deea:	f001 fae4 	bl	801f4b6 <netSendGeneral>
 801deee:	4603      	mov	r3, r0
 801def0:	2b00      	cmp	r3, #0
 801def2:	d104      	bne.n	801defe <issueAnnounce+0x36>
	{
		ERROR("issueAnnounce: can't sent\n");
		toState(ptpClock, PTP_FAULTY);
 801def4:	2101      	movs	r1, #1
 801def6:	6878      	ldr	r0, [r7, #4]
 801def8:	f7fe fe6c 	bl	801cbd4 <toState>
	else
	{
		DBGV("issueAnnounce\n");
		ptpClock->sentAnnounceSequenceId++;
	}
}
 801defc:	e009      	b.n	801df12 <issueAnnounce+0x4a>
		ptpClock->sentAnnounceSequenceId++;
 801defe:	687b      	ldr	r3, [r7, #4]
 801df00:	f9b3 3386 	ldrsh.w	r3, [r3, #902]	; 0x386
 801df04:	b29b      	uxth	r3, r3
 801df06:	3301      	adds	r3, #1
 801df08:	b29b      	uxth	r3, r3
 801df0a:	b21a      	sxth	r2, r3
 801df0c:	687b      	ldr	r3, [r7, #4]
 801df0e:	f8a3 2386 	strh.w	r2, [r3, #902]	; 0x386
}
 801df12:	bf00      	nop
 801df14:	3708      	adds	r7, #8
 801df16:	46bd      	mov	sp, r7
 801df18:	bd80      	pop	{r7, pc}

0801df1a <issueSync>:

/* Pack and send  on event multicast ip adress a Sync message */
static void issueSync(PtpClock *ptpClock)
{
 801df1a:	b580      	push	{r7, lr}
 801df1c:	b088      	sub	sp, #32
 801df1e:	af00      	add	r7, sp, #0
 801df20:	6078      	str	r0, [r7, #4]
	Timestamp originTimestamp;
	TimeInternal internalTime;

	/* try to predict outgoing time stamp */
	getTime(&internalTime);
 801df22:	f107 030c 	add.w	r3, r7, #12
 801df26:	4618      	mov	r0, r3
 801df28:	f002 f874 	bl	8020014 <getTime>
	fromInternalTime(&internalTime, &originTimestamp);
 801df2c:	f107 0214 	add.w	r2, r7, #20
 801df30:	f107 030c 	add.w	r3, r7, #12
 801df34:	4611      	mov	r1, r2
 801df36:	4618      	mov	r0, r3
 801df38:	f7fe f836 	bl	801bfa8 <fromInternalTime>
	msgPackSync(ptpClock, ptpClock->msgObuf, &originTimestamp);
 801df3c:	687b      	ldr	r3, [r7, #4]
 801df3e:	33cc      	adds	r3, #204	; 0xcc
 801df40:	f107 0214 	add.w	r2, r7, #20
 801df44:	4619      	mov	r1, r3
 801df46:	6878      	ldr	r0, [r7, #4]
 801df48:	f000 fbc7 	bl	801e6da <msgPackSync>

	if (!netSendEvent(&ptpClock->netPath, ptpClock->msgObuf, SYNC_LENGTH, &internalTime))
 801df4c:	687b      	ldr	r3, [r7, #4]
 801df4e:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
 801df52:	687b      	ldr	r3, [r7, #4]
 801df54:	f103 01cc 	add.w	r1, r3, #204	; 0xcc
 801df58:	f107 030c 	add.w	r3, r7, #12
 801df5c:	222c      	movs	r2, #44	; 0x2c
 801df5e:	f001 fa92 	bl	801f486 <netSendEvent>
 801df62:	4603      	mov	r3, r0
 801df64:	2b00      	cmp	r3, #0
 801df66:	d104      	bne.n	801df72 <issueSync+0x58>
	{
		ERROR("issueSync: can't sent\n");
		toState(ptpClock, PTP_FAULTY);
 801df68:	2101      	movs	r1, #1
 801df6a:	6878      	ldr	r0, [r7, #4]
 801df6c:	f7fe fe32 	bl	801cbd4 <toState>
		else
		{
			// waitingForLoopback = ptpClock->twoStepFlag;
		}
	}
}
 801df70:	e020      	b.n	801dfb4 <issueSync+0x9a>
		ptpClock->sentSyncSequenceId++;
 801df72:	687b      	ldr	r3, [r7, #4]
 801df74:	f9b3 3384 	ldrsh.w	r3, [r3, #900]	; 0x384
 801df78:	b29b      	uxth	r3, r3
 801df7a:	3301      	adds	r3, #1
 801df7c:	b29b      	uxth	r3, r3
 801df7e:	b21a      	sxth	r2, r3
 801df80:	687b      	ldr	r3, [r7, #4]
 801df82:	f8a3 2384 	strh.w	r2, [r3, #900]	; 0x384
		if ((internalTime.seconds != 0) && (ptpClock->defaultDS.twoStepFlag))
 801df86:	68fb      	ldr	r3, [r7, #12]
 801df88:	2b00      	cmp	r3, #0
 801df8a:	d013      	beq.n	801dfb4 <issueSync+0x9a>
 801df8c:	687b      	ldr	r3, [r7, #4]
 801df8e:	781b      	ldrb	r3, [r3, #0]
 801df90:	2b00      	cmp	r3, #0
 801df92:	d00f      	beq.n	801dfb4 <issueSync+0x9a>
			addTime(&internalTime, &internalTime, &ptpClock->outboundLatency);
 801df94:	687b      	ldr	r3, [r7, #4]
 801df96:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 801df9a:	f107 010c 	add.w	r1, r7, #12
 801df9e:	f107 030c 	add.w	r3, r7, #12
 801dfa2:	4618      	mov	r0, r3
 801dfa4:	f7fe f890 	bl	801c0c8 <addTime>
			issueFollowup(ptpClock, &internalTime);
 801dfa8:	f107 030c 	add.w	r3, r7, #12
 801dfac:	4619      	mov	r1, r3
 801dfae:	6878      	ldr	r0, [r7, #4]
 801dfb0:	f000 f804 	bl	801dfbc <issueFollowup>
}
 801dfb4:	bf00      	nop
 801dfb6:	3720      	adds	r7, #32
 801dfb8:	46bd      	mov	sp, r7
 801dfba:	bd80      	pop	{r7, pc}

0801dfbc <issueFollowup>:

/* Pack and send on general multicast ip adress a FollowUp message */
static void issueFollowup(PtpClock *ptpClock, const TimeInternal *time)
{
 801dfbc:	b580      	push	{r7, lr}
 801dfbe:	b086      	sub	sp, #24
 801dfc0:	af00      	add	r7, sp, #0
 801dfc2:	6078      	str	r0, [r7, #4]
 801dfc4:	6039      	str	r1, [r7, #0]
	Timestamp preciseOriginTimestamp;

	fromInternalTime(time, &preciseOriginTimestamp);
 801dfc6:	f107 030c 	add.w	r3, r7, #12
 801dfca:	4619      	mov	r1, r3
 801dfcc:	6838      	ldr	r0, [r7, #0]
 801dfce:	f7fd ffeb 	bl	801bfa8 <fromInternalTime>
	msgPackFollowUp(ptpClock, ptpClock->msgObuf, &preciseOriginTimestamp);
 801dfd2:	687b      	ldr	r3, [r7, #4]
 801dfd4:	33cc      	adds	r3, #204	; 0xcc
 801dfd6:	f107 020c 	add.w	r2, r7, #12
 801dfda:	4619      	mov	r1, r3
 801dfdc:	6878      	ldr	r0, [r7, #4]
 801dfde:	f000 fc5a 	bl	801e896 <msgPackFollowUp>

	if (!netSendGeneral(&ptpClock->netPath, ptpClock->msgObuf, FOLLOW_UP_LENGTH))
 801dfe2:	687b      	ldr	r3, [r7, #4]
 801dfe4:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
 801dfe8:	687b      	ldr	r3, [r7, #4]
 801dfea:	33cc      	adds	r3, #204	; 0xcc
 801dfec:	222c      	movs	r2, #44	; 0x2c
 801dfee:	4619      	mov	r1, r3
 801dff0:	f001 fa61 	bl	801f4b6 <netSendGeneral>
 801dff4:	4603      	mov	r3, r0
 801dff6:	2b00      	cmp	r3, #0
 801dff8:	d103      	bne.n	801e002 <issueFollowup+0x46>
	{
		ERROR("issueFollowup: can't sent\n");
		toState(ptpClock, PTP_FAULTY);
 801dffa:	2101      	movs	r1, #1
 801dffc:	6878      	ldr	r0, [r7, #4]
 801dffe:	f7fe fde9 	bl	801cbd4 <toState>
	}
	else
	{
		DBGV("issueFollowup\n");
	}
}
 801e002:	bf00      	nop
 801e004:	3718      	adds	r7, #24
 801e006:	46bd      	mov	sp, r7
 801e008:	bd80      	pop	{r7, pc}

0801e00a <issueDelayReq>:


/* Pack and send on event multicast ip address a DelayReq message */
static void issueDelayReq(PtpClock *ptpClock)
{
 801e00a:	b580      	push	{r7, lr}
 801e00c:	b088      	sub	sp, #32
 801e00e:	af00      	add	r7, sp, #0
 801e010:	6078      	str	r0, [r7, #4]
	Timestamp originTimestamp;
	TimeInternal internalTime;

	getTime(&internalTime);
 801e012:	f107 030c 	add.w	r3, r7, #12
 801e016:	4618      	mov	r0, r3
 801e018:	f001 fffc 	bl	8020014 <getTime>
	fromInternalTime(&internalTime, &originTimestamp);
 801e01c:	f107 0214 	add.w	r2, r7, #20
 801e020:	f107 030c 	add.w	r3, r7, #12
 801e024:	4611      	mov	r1, r2
 801e026:	4618      	mov	r0, r3
 801e028:	f7fd ffbe 	bl	801bfa8 <fromInternalTime>

	msgPackDelayReq(ptpClock, ptpClock->msgObuf, &originTimestamp);
 801e02c:	687b      	ldr	r3, [r7, #4]
 801e02e:	33cc      	adds	r3, #204	; 0xcc
 801e030:	f107 0214 	add.w	r2, r7, #20
 801e034:	4619      	mov	r1, r3
 801e036:	6878      	ldr	r0, [r7, #4]
 801e038:	f000 fbd1 	bl	801e7de <msgPackDelayReq>

	if (!netSendEvent(&ptpClock->netPath, ptpClock->msgObuf, DELAY_REQ_LENGTH, &internalTime))
 801e03c:	687b      	ldr	r3, [r7, #4]
 801e03e:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
 801e042:	687b      	ldr	r3, [r7, #4]
 801e044:	f103 01cc 	add.w	r1, r3, #204	; 0xcc
 801e048:	f107 030c 	add.w	r3, r7, #12
 801e04c:	222c      	movs	r2, #44	; 0x2c
 801e04e:	f001 fa1a 	bl	801f486 <netSendEvent>
 801e052:	4603      	mov	r3, r0
 801e054:	2b00      	cmp	r3, #0
 801e056:	d104      	bne.n	801e062 <issueDelayReq+0x58>
	{
		ERROR("issueDelayReq: can't sent\n");
		toState(ptpClock, PTP_FAULTY);
 801e058:	2101      	movs	r1, #1
 801e05a:	6878      	ldr	r0, [r7, #4]
 801e05c:	f7fe fdba 	bl	801cbd4 <toState>
		{
			addTime(&internalTime, &internalTime, &ptpClock->outboundLatency);
			ptpClock->timestamp_delayReqSend = internalTime;
		}
	}
}
 801e060:	e01f      	b.n	801e0a2 <issueDelayReq+0x98>
		ptpClock->sentDelayReqSequenceId++;
 801e062:	687b      	ldr	r3, [r7, #4]
 801e064:	f9b3 3382 	ldrsh.w	r3, [r3, #898]	; 0x382
 801e068:	b29b      	uxth	r3, r3
 801e06a:	3301      	adds	r3, #1
 801e06c:	b29b      	uxth	r3, r3
 801e06e:	b21a      	sxth	r2, r3
 801e070:	687b      	ldr	r3, [r7, #4]
 801e072:	f8a3 2382 	strh.w	r2, [r3, #898]	; 0x382
		if (internalTime.seconds != 0)
 801e076:	68fb      	ldr	r3, [r7, #12]
 801e078:	2b00      	cmp	r3, #0
 801e07a:	d012      	beq.n	801e0a2 <issueDelayReq+0x98>
			addTime(&internalTime, &internalTime, &ptpClock->outboundLatency);
 801e07c:	687b      	ldr	r3, [r7, #4]
 801e07e:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 801e082:	f107 010c 	add.w	r1, r7, #12
 801e086:	f107 030c 	add.w	r3, r7, #12
 801e08a:	4618      	mov	r0, r3
 801e08c:	f7fe f81c 	bl	801c0c8 <addTime>
			ptpClock->timestamp_delayReqSend = internalTime;
 801e090:	687b      	ldr	r3, [r7, #4]
 801e092:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801e096:	f107 020c 	add.w	r2, r7, #12
 801e09a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801e09e:	e883 0003 	stmia.w	r3, {r0, r1}
}
 801e0a2:	bf00      	nop
 801e0a4:	3720      	adds	r7, #32
 801e0a6:	46bd      	mov	sp, r7
 801e0a8:	bd80      	pop	{r7, pc}

0801e0aa <issuePDelayReq>:

/* Pack and send on event multicast ip adress a PDelayReq message */
static void issuePDelayReq(PtpClock *ptpClock)
{
 801e0aa:	b580      	push	{r7, lr}
 801e0ac:	b088      	sub	sp, #32
 801e0ae:	af00      	add	r7, sp, #0
 801e0b0:	6078      	str	r0, [r7, #4]
	Timestamp originTimestamp;
	TimeInternal internalTime;

	getTime(&internalTime);
 801e0b2:	f107 030c 	add.w	r3, r7, #12
 801e0b6:	4618      	mov	r0, r3
 801e0b8:	f001 ffac 	bl	8020014 <getTime>
	fromInternalTime(&internalTime, &originTimestamp);
 801e0bc:	f107 0214 	add.w	r2, r7, #20
 801e0c0:	f107 030c 	add.w	r3, r7, #12
 801e0c4:	4611      	mov	r1, r2
 801e0c6:	4618      	mov	r0, r3
 801e0c8:	f7fd ff6e 	bl	801bfa8 <fromInternalTime>

	msgPackPDelayReq(ptpClock, ptpClock->msgObuf, &originTimestamp);
 801e0cc:	687b      	ldr	r3, [r7, #4]
 801e0ce:	33cc      	adds	r3, #204	; 0xcc
 801e0d0:	f107 0214 	add.w	r2, r7, #20
 801e0d4:	4619      	mov	r1, r3
 801e0d6:	6878      	ldr	r0, [r7, #4]
 801e0d8:	f000 fd2a 	bl	801eb30 <msgPackPDelayReq>

	if (!netSendPeerEvent(&ptpClock->netPath, ptpClock->msgObuf, PDELAY_REQ_LENGTH, &internalTime))
 801e0dc:	687b      	ldr	r3, [r7, #4]
 801e0de:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
 801e0e2:	687b      	ldr	r3, [r7, #4]
 801e0e4:	f103 01cc 	add.w	r1, r3, #204	; 0xcc
 801e0e8:	f107 030c 	add.w	r3, r7, #12
 801e0ec:	2236      	movs	r2, #54	; 0x36
 801e0ee:	f001 fa11 	bl	801f514 <netSendPeerEvent>
 801e0f2:	4603      	mov	r3, r0
 801e0f4:	2b00      	cmp	r3, #0
 801e0f6:	d104      	bne.n	801e102 <issuePDelayReq+0x58>
	{
		ERROR("issuePDelayReq: can't sent\n");
		toState(ptpClock, PTP_FAULTY);
 801e0f8:	2101      	movs	r1, #1
 801e0fa:	6878      	ldr	r0, [r7, #4]
 801e0fc:	f7fe fd6a 	bl	801cbd4 <toState>
		{
			addTime(&internalTime, &internalTime, &ptpClock->outboundLatency);
			ptpClock->pdelay_t1 = internalTime;
		}
	}
}
 801e100:	e01f      	b.n	801e142 <issuePDelayReq+0x98>
		ptpClock->sentPDelayReqSequenceId++;
 801e102:	687b      	ldr	r3, [r7, #4]
 801e104:	f9b3 3380 	ldrsh.w	r3, [r3, #896]	; 0x380
 801e108:	b29b      	uxth	r3, r3
 801e10a:	3301      	adds	r3, #1
 801e10c:	b29b      	uxth	r3, r3
 801e10e:	b21a      	sxth	r2, r3
 801e110:	687b      	ldr	r3, [r7, #4]
 801e112:	f8a3 2380 	strh.w	r2, [r3, #896]	; 0x380
		if (internalTime.seconds != 0)
 801e116:	68fb      	ldr	r3, [r7, #12]
 801e118:	2b00      	cmp	r3, #0
 801e11a:	d012      	beq.n	801e142 <issuePDelayReq+0x98>
			addTime(&internalTime, &internalTime, &ptpClock->outboundLatency);
 801e11c:	687b      	ldr	r3, [r7, #4]
 801e11e:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 801e122:	f107 010c 	add.w	r1, r7, #12
 801e126:	f107 030c 	add.w	r3, r7, #12
 801e12a:	4618      	mov	r0, r3
 801e12c:	f7fd ffcc 	bl	801c0c8 <addTime>
			ptpClock->pdelay_t1 = internalTime;
 801e130:	687b      	ldr	r3, [r7, #4]
 801e132:	f503 734e 	add.w	r3, r3, #824	; 0x338
 801e136:	f107 020c 	add.w	r2, r7, #12
 801e13a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801e13e:	e883 0003 	stmia.w	r3, {r0, r1}
}
 801e142:	bf00      	nop
 801e144:	3720      	adds	r7, #32
 801e146:	46bd      	mov	sp, r7
 801e148:	bd80      	pop	{r7, pc}

0801e14a <issuePDelayResp>:

/* Pack and send on event multicast ip adress a PDelayResp message */
static void issuePDelayResp(PtpClock *ptpClock, TimeInternal *time, const MsgHeader * pDelayReqHeader)
{
 801e14a:	b580      	push	{r7, lr}
 801e14c:	b088      	sub	sp, #32
 801e14e:	af00      	add	r7, sp, #0
 801e150:	60f8      	str	r0, [r7, #12]
 801e152:	60b9      	str	r1, [r7, #8]
 801e154:	607a      	str	r2, [r7, #4]
	Timestamp requestReceiptTimestamp;

	fromInternalTime(time, &requestReceiptTimestamp);
 801e156:	f107 0314 	add.w	r3, r7, #20
 801e15a:	4619      	mov	r1, r3
 801e15c:	68b8      	ldr	r0, [r7, #8]
 801e15e:	f7fd ff23 	bl	801bfa8 <fromInternalTime>
	msgPackPDelayResp(ptpClock->msgObuf, pDelayReqHeader, &requestReceiptTimestamp);
 801e162:	68fb      	ldr	r3, [r7, #12]
 801e164:	33cc      	adds	r3, #204	; 0xcc
 801e166:	f107 0214 	add.w	r2, r7, #20
 801e16a:	6879      	ldr	r1, [r7, #4]
 801e16c:	4618      	mov	r0, r3
 801e16e:	f000 fd42 	bl	801ebf6 <msgPackPDelayResp>

	if (!netSendPeerEvent(&ptpClock->netPath, ptpClock->msgObuf, PDELAY_RESP_LENGTH, time))
 801e172:	68fb      	ldr	r3, [r7, #12]
 801e174:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
 801e178:	68fb      	ldr	r3, [r7, #12]
 801e17a:	f103 01cc 	add.w	r1, r3, #204	; 0xcc
 801e17e:	68bb      	ldr	r3, [r7, #8]
 801e180:	2236      	movs	r2, #54	; 0x36
 801e182:	f001 f9c7 	bl	801f514 <netSendPeerEvent>
 801e186:	4603      	mov	r3, r0
 801e188:	2b00      	cmp	r3, #0
 801e18a:	d104      	bne.n	801e196 <issuePDelayResp+0x4c>
	{
		ERROR("issuePDelayResp: can't sent\n");
		toState(ptpClock, PTP_FAULTY);
 801e18c:	2101      	movs	r1, #1
 801e18e:	68f8      	ldr	r0, [r7, #12]
 801e190:	f7fe fd20 	bl	801cbd4 <toState>
			addTime(time, time, &ptpClock->outboundLatency);
		}

		DBGV("issuePDelayResp\n");
	}
}
 801e194:	e00b      	b.n	801e1ae <issuePDelayResp+0x64>
		if (time->seconds != 0)
 801e196:	68bb      	ldr	r3, [r7, #8]
 801e198:	681b      	ldr	r3, [r3, #0]
 801e19a:	2b00      	cmp	r3, #0
 801e19c:	d007      	beq.n	801e1ae <issuePDelayResp+0x64>
			addTime(time, time, &ptpClock->outboundLatency);
 801e19e:	68fb      	ldr	r3, [r7, #12]
 801e1a0:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 801e1a4:	461a      	mov	r2, r3
 801e1a6:	68b9      	ldr	r1, [r7, #8]
 801e1a8:	68b8      	ldr	r0, [r7, #8]
 801e1aa:	f7fd ff8d 	bl	801c0c8 <addTime>
}
 801e1ae:	bf00      	nop
 801e1b0:	3720      	adds	r7, #32
 801e1b2:	46bd      	mov	sp, r7
 801e1b4:	bd80      	pop	{r7, pc}

0801e1b6 <issueDelayResp>:


/* Pack and send on event multicast ip adress a DelayResp message */
static void issueDelayResp(PtpClock *ptpClock, const TimeInternal *time, const MsgHeader * delayReqHeader)
{
 801e1b6:	b580      	push	{r7, lr}
 801e1b8:	b088      	sub	sp, #32
 801e1ba:	af00      	add	r7, sp, #0
 801e1bc:	60f8      	str	r0, [r7, #12]
 801e1be:	60b9      	str	r1, [r7, #8]
 801e1c0:	607a      	str	r2, [r7, #4]
	Timestamp requestReceiptTimestamp;

	fromInternalTime(time, &requestReceiptTimestamp);
 801e1c2:	f107 0314 	add.w	r3, r7, #20
 801e1c6:	4619      	mov	r1, r3
 801e1c8:	68b8      	ldr	r0, [r7, #8]
 801e1ca:	f7fd feed 	bl	801bfa8 <fromInternalTime>
	msgPackDelayResp(ptpClock, ptpClock->msgObuf, delayReqHeader, &requestReceiptTimestamp);
 801e1ce:	68fb      	ldr	r3, [r7, #12]
 801e1d0:	f103 01cc 	add.w	r1, r3, #204	; 0xcc
 801e1d4:	f107 0314 	add.w	r3, r7, #20
 801e1d8:	687a      	ldr	r2, [r7, #4]
 801e1da:	68f8      	ldr	r0, [r7, #12]
 801e1dc:	f000 fbdb 	bl	801e996 <msgPackDelayResp>

	if (!netSendGeneral(&ptpClock->netPath, ptpClock->msgObuf, PDELAY_RESP_LENGTH))
 801e1e0:	68fb      	ldr	r3, [r7, #12]
 801e1e2:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
 801e1e6:	68fb      	ldr	r3, [r7, #12]
 801e1e8:	33cc      	adds	r3, #204	; 0xcc
 801e1ea:	2236      	movs	r2, #54	; 0x36
 801e1ec:	4619      	mov	r1, r3
 801e1ee:	f001 f962 	bl	801f4b6 <netSendGeneral>
 801e1f2:	4603      	mov	r3, r0
 801e1f4:	2b00      	cmp	r3, #0
 801e1f6:	d103      	bne.n	801e200 <issueDelayResp+0x4a>
	{
		ERROR("issueDelayResp: can't sent\n");
		toState(ptpClock, PTP_FAULTY);
 801e1f8:	2101      	movs	r1, #1
 801e1fa:	68f8      	ldr	r0, [r7, #12]
 801e1fc:	f7fe fcea 	bl	801cbd4 <toState>
	}
	else
	{
		DBGV("issueDelayResp\n");
	}
}
 801e200:	bf00      	nop
 801e202:	3720      	adds	r7, #32
 801e204:	46bd      	mov	sp, r7
 801e206:	bd80      	pop	{r7, pc}

0801e208 <issuePDelayRespFollowUp>:

static void issuePDelayRespFollowUp(PtpClock *ptpClock, const TimeInternal *time, const MsgHeader * pDelayReqHeader)
{
 801e208:	b580      	push	{r7, lr}
 801e20a:	b088      	sub	sp, #32
 801e20c:	af00      	add	r7, sp, #0
 801e20e:	60f8      	str	r0, [r7, #12]
 801e210:	60b9      	str	r1, [r7, #8]
 801e212:	607a      	str	r2, [r7, #4]
	Timestamp responseOriginTimestamp;
	fromInternalTime(time, &responseOriginTimestamp);
 801e214:	f107 0314 	add.w	r3, r7, #20
 801e218:	4619      	mov	r1, r3
 801e21a:	68b8      	ldr	r0, [r7, #8]
 801e21c:	f7fd fec4 	bl	801bfa8 <fromInternalTime>

	msgPackPDelayRespFollowUp(ptpClock->msgObuf, pDelayReqHeader, &responseOriginTimestamp);
 801e220:	68fb      	ldr	r3, [r7, #12]
 801e222:	33cc      	adds	r3, #204	; 0xcc
 801e224:	f107 0214 	add.w	r2, r7, #20
 801e228:	6879      	ldr	r1, [r7, #4]
 801e22a:	4618      	mov	r0, r3
 801e22c:	f000 fd91 	bl	801ed52 <msgPackPDelayRespFollowUp>

	if (!netSendPeerGeneral(&ptpClock->netPath, ptpClock->msgObuf, PDELAY_RESP_FOLLOW_UP_LENGTH))
 801e230:	68fb      	ldr	r3, [r7, #12]
 801e232:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
 801e236:	68fb      	ldr	r3, [r7, #12]
 801e238:	33cc      	adds	r3, #204	; 0xcc
 801e23a:	2236      	movs	r2, #54	; 0x36
 801e23c:	4619      	mov	r1, r3
 801e23e:	f001 f951 	bl	801f4e4 <netSendPeerGeneral>
 801e242:	4603      	mov	r3, r0
 801e244:	2b00      	cmp	r3, #0
 801e246:	d103      	bne.n	801e250 <issuePDelayRespFollowUp+0x48>
	{
		ERROR("issuePDelayRespFollowUp: can't sent\n");
		toState(ptpClock, PTP_FAULTY);
 801e248:	2101      	movs	r1, #1
 801e24a:	68f8      	ldr	r0, [r7, #12]
 801e24c:	f7fe fcc2 	bl	801cbd4 <toState>
	}
	else
	{
		DBGV("issuePDelayRespFollowUp\n");
	}
}
 801e250:	bf00      	nop
 801e252:	3720      	adds	r7, #32
 801e254:	46bd      	mov	sp, r7
 801e256:	bd80      	pop	{r7, pc}

0801e258 <ptpd_task>:
ForeignMasterRecord ptpForeignRecords[DEFAULT_MAX_FOREIGN_RECORDS];

__IO uint32_t PTPTimer = 0;

void ptpd_task(void)
{
 801e258:	b580      	push	{r7, lr}
 801e25a:	af00      	add	r7, sp, #0
	{
		// doState() has a switch for the actions and events to be
		// checked for 'port_state'. The actions and events may or may not change
		// 'port_state' by calling toState(), but once they are done we loop around
		// again and perform the actions required for the new 'port_state'.
		doState(&ptpClock);
 801e25c:	4806      	ldr	r0, [pc, #24]	; (801e278 <ptpd_task+0x20>)
 801e25e:	f7fe fec3 	bl	801cfe8 <doState>
	}
	while (netSelect(&ptpClock.netPath, 0) > 0);
 801e262:	2100      	movs	r1, #0
 801e264:	4805      	ldr	r0, [pc, #20]	; (801e27c <ptpd_task+0x24>)
 801e266:	f001 f827 	bl	801f2b8 <netSelect>
 801e26a:	4603      	mov	r3, r0
 801e26c:	2b00      	cmp	r3, #0
 801e26e:	dcf5      	bgt.n	801e25c <ptpd_task+0x4>
}
 801e270:	bf00      	nop
 801e272:	bf00      	nop
 801e274:	bd80      	pop	{r7, pc}
 801e276:	bf00      	nop
 801e278:	2000a570 	.word	0x2000a570
 801e27c:	2000a93c 	.word	0x2000a93c

0801e280 <ptpd_alert>:

void ptpd_alert(void)
{
 801e280:	b480      	push	{r7}
 801e282:	af00      	add	r7, sp, #0
	return;
 801e284:	bf00      	nop
}
 801e286:	46bd      	mov	sp, r7
 801e288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e28c:	4770      	bx	lr
	...

0801e290 <ptpd_init>:

void ptpd_init(void)
{
 801e290:	b580      	push	{r7, lr}
 801e292:	af00      	add	r7, sp, #0
	// Initialize run-time options to default values.
	rtOpts.announceInterval = DEFAULT_ANNOUNCE_INTERVAL;
 801e294:	4b27      	ldr	r3, [pc, #156]	; (801e334 <ptpd_init+0xa4>)
 801e296:	2201      	movs	r2, #1
 801e298:	701a      	strb	r2, [r3, #0]
	rtOpts.syncInterval = DEFAULT_SYNC_INTERVAL;
 801e29a:	4b26      	ldr	r3, [pc, #152]	; (801e334 <ptpd_init+0xa4>)
 801e29c:	2200      	movs	r2, #0
 801e29e:	705a      	strb	r2, [r3, #1]
	rtOpts.clockQuality.clockAccuracy = DEFAULT_CLOCK_ACCURACY;
 801e2a0:	4b24      	ldr	r3, [pc, #144]	; (801e334 <ptpd_init+0xa4>)
 801e2a2:	22fe      	movs	r2, #254	; 0xfe
 801e2a4:	70da      	strb	r2, [r3, #3]
	rtOpts.clockQuality.clockClass = DEFAULT_CLOCK_CLASS;
 801e2a6:	4b23      	ldr	r3, [pc, #140]	; (801e334 <ptpd_init+0xa4>)
 801e2a8:	22f8      	movs	r2, #248	; 0xf8
 801e2aa:	709a      	strb	r2, [r3, #2]
	rtOpts.clockQuality.offsetScaledLogVariance = DEFAULT_CLOCK_VARIANCE; /* 7.6.3.3 */
 801e2ac:	4b21      	ldr	r3, [pc, #132]	; (801e334 <ptpd_init+0xa4>)
 801e2ae:	f241 3288 	movw	r2, #5000	; 0x1388
 801e2b2:	809a      	strh	r2, [r3, #4]
	rtOpts.priority1 = DEFAULT_PRIORITY1;
 801e2b4:	4b1f      	ldr	r3, [pc, #124]	; (801e334 <ptpd_init+0xa4>)
 801e2b6:	22f8      	movs	r2, #248	; 0xf8
 801e2b8:	719a      	strb	r2, [r3, #6]
	rtOpts.priority2 = DEFAULT_PRIORITY2;
 801e2ba:	4b1e      	ldr	r3, [pc, #120]	; (801e334 <ptpd_init+0xa4>)
 801e2bc:	22f8      	movs	r2, #248	; 0xf8
 801e2be:	71da      	strb	r2, [r3, #7]
	rtOpts.domainNumber = DEFAULT_DOMAIN_NUMBER;
 801e2c0:	4b1c      	ldr	r3, [pc, #112]	; (801e334 <ptpd_init+0xa4>)
 801e2c2:	2200      	movs	r2, #0
 801e2c4:	721a      	strb	r2, [r3, #8]
	rtOpts.slaveOnly = FALSE;
 801e2c6:	4b1b      	ldr	r3, [pc, #108]	; (801e334 <ptpd_init+0xa4>)
 801e2c8:	2200      	movs	r2, #0
 801e2ca:	725a      	strb	r2, [r3, #9]
	rtOpts.currentUtcOffset = DEFAULT_UTC_OFFSET;
 801e2cc:	4b19      	ldr	r3, [pc, #100]	; (801e334 <ptpd_init+0xa4>)
 801e2ce:	2222      	movs	r2, #34	; 0x22
 801e2d0:	815a      	strh	r2, [r3, #10]
	rtOpts.servo.noResetClock = DEFAULT_NO_RESET_CLOCK;
 801e2d2:	4b18      	ldr	r3, [pc, #96]	; (801e334 <ptpd_init+0xa4>)
 801e2d4:	2200      	movs	r2, #0
 801e2d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rtOpts.servo.noAdjust = NO_ADJUST;
 801e2da:	4b16      	ldr	r3, [pc, #88]	; (801e334 <ptpd_init+0xa4>)
 801e2dc:	2200      	movs	r2, #0
 801e2de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	rtOpts.inboundLatency.nanoseconds = DEFAULT_INBOUND_LATENCY;
 801e2e2:	4b14      	ldr	r3, [pc, #80]	; (801e334 <ptpd_init+0xa4>)
 801e2e4:	2200      	movs	r2, #0
 801e2e6:	625a      	str	r2, [r3, #36]	; 0x24
	rtOpts.outboundLatency.nanoseconds = DEFAULT_OUTBOUND_LATENCY;
 801e2e8:	4b12      	ldr	r3, [pc, #72]	; (801e334 <ptpd_init+0xa4>)
 801e2ea:	2200      	movs	r2, #0
 801e2ec:	62da      	str	r2, [r3, #44]	; 0x2c
	rtOpts.servo.sDelay = DEFAULT_DELAY_S;
 801e2ee:	4b11      	ldr	r3, [pc, #68]	; (801e334 <ptpd_init+0xa4>)
 801e2f0:	2206      	movs	r2, #6
 801e2f2:	641a      	str	r2, [r3, #64]	; 0x40
	rtOpts.servo.sOffset = DEFAULT_OFFSET_S;
 801e2f4:	4b0f      	ldr	r3, [pc, #60]	; (801e334 <ptpd_init+0xa4>)
 801e2f6:	2201      	movs	r2, #1
 801e2f8:	645a      	str	r2, [r3, #68]	; 0x44
	rtOpts.servo.ap = DEFAULT_AP;
 801e2fa:	4b0e      	ldr	r3, [pc, #56]	; (801e334 <ptpd_init+0xa4>)
 801e2fc:	2202      	movs	r2, #2
 801e2fe:	639a      	str	r2, [r3, #56]	; 0x38
	rtOpts.servo.ai = DEFAULT_AI;
 801e300:	4b0c      	ldr	r3, [pc, #48]	; (801e334 <ptpd_init+0xa4>)
 801e302:	2210      	movs	r2, #16
 801e304:	63da      	str	r2, [r3, #60]	; 0x3c
	rtOpts.maxForeignRecords = sizeof(ptpForeignRecords) / sizeof(ptpForeignRecords[0]);
 801e306:	4b0b      	ldr	r3, [pc, #44]	; (801e334 <ptpd_init+0xa4>)
 801e308:	2205      	movs	r2, #5
 801e30a:	861a      	strh	r2, [r3, #48]	; 0x30
	rtOpts.stats = PTP_TEXT_STATS;
 801e30c:	4b09      	ldr	r3, [pc, #36]	; (801e334 <ptpd_init+0xa4>)
 801e30e:	2201      	movs	r2, #1
 801e310:	739a      	strb	r2, [r3, #14]
	rtOpts.delayMechanism = DEFAULT_DELAY_MECHANISM;
 801e312:	4b08      	ldr	r3, [pc, #32]	; (801e334 <ptpd_init+0xa4>)
 801e314:	2201      	movs	r2, #1
 801e316:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	// Initialize run time options.
	if (ptpdStartup(&ptpClock, &rtOpts, ptpForeignRecords) != 0)
 801e31a:	4a07      	ldr	r2, [pc, #28]	; (801e338 <ptpd_init+0xa8>)
 801e31c:	4905      	ldr	r1, [pc, #20]	; (801e334 <ptpd_init+0xa4>)
 801e31e:	4807      	ldr	r0, [pc, #28]	; (801e33c <ptpd_init+0xac>)
 801e320:	f001 fe4a 	bl	801ffb8 <ptpdStartup>
 801e324:	4603      	mov	r3, r0
 801e326:	2b00      	cmp	r3, #0
 801e328:	d003      	beq.n	801e332 <ptpd_init+0xa2>
	{
		printf("PTPD: startup failed");
 801e32a:	4805      	ldr	r0, [pc, #20]	; (801e340 <ptpd_init+0xb0>)
 801e32c:	f002 f856 	bl	80203dc <iprintf>
		return;
 801e330:	bf00      	nop
	}
}
 801e332:	bd80      	pop	{r7, pc}
 801e334:	2000ab68 	.word	0x2000ab68
 801e338:	2000a9b0 	.word	0x2000a9b0
 801e33c:	2000a570 	.word	0x2000a570
 801e340:	0802699c 	.word	0x0802699c

0801e344 <msgUnpackHeader>:

#include "../ptpd.h"

/* Unpack header message */
void msgUnpackHeader(const octet_t *buf, MsgHeader *header)
{
 801e344:	b5b0      	push	{r4, r5, r7, lr}
 801e346:	b084      	sub	sp, #16
 801e348:	af00      	add	r7, sp, #0
 801e34a:	6078      	str	r0, [r7, #4]
 801e34c:	6039      	str	r1, [r7, #0]
	int32_t msb;
	uint32_t lsb;

	header->transportSpecific = (*(nibble_t*)(buf + 0)) >> 4;
 801e34e:	687b      	ldr	r3, [r7, #4]
 801e350:	781b      	ldrb	r3, [r3, #0]
 801e352:	091b      	lsrs	r3, r3, #4
 801e354:	b2da      	uxtb	r2, r3
 801e356:	683b      	ldr	r3, [r7, #0]
 801e358:	701a      	strb	r2, [r3, #0]
	header->messageType = (*(enum4bit_t*)(buf + 0)) & 0x0F;
 801e35a:	687b      	ldr	r3, [r7, #4]
 801e35c:	781b      	ldrb	r3, [r3, #0]
 801e35e:	f003 030f 	and.w	r3, r3, #15
 801e362:	b2da      	uxtb	r2, r3
 801e364:	683b      	ldr	r3, [r7, #0]
 801e366:	705a      	strb	r2, [r3, #1]
	header->versionPTP = (*(uint4bit_t*)(buf  + 1)) & 0x0F; //force reserved bit to zero if not
 801e368:	687b      	ldr	r3, [r7, #4]
 801e36a:	3301      	adds	r3, #1
 801e36c:	781b      	ldrb	r3, [r3, #0]
 801e36e:	f003 030f 	and.w	r3, r3, #15
 801e372:	b2da      	uxtb	r2, r3
 801e374:	683b      	ldr	r3, [r7, #0]
 801e376:	709a      	strb	r2, [r3, #2]
	header->messageLength = flip16(*(int16_t*)(buf  + 2));
 801e378:	687b      	ldr	r3, [r7, #4]
 801e37a:	3302      	adds	r3, #2
 801e37c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e380:	b29b      	uxth	r3, r3
 801e382:	4618      	mov	r0, r3
 801e384:	f7ee fafc 	bl	800c980 <lwip_htons>
 801e388:	4603      	mov	r3, r0
 801e38a:	b21a      	sxth	r2, r3
 801e38c:	683b      	ldr	r3, [r7, #0]
 801e38e:	809a      	strh	r2, [r3, #4]
	header->domainNumber = (*(uint8_t*)(buf + 4));
 801e390:	687b      	ldr	r3, [r7, #4]
 801e392:	791a      	ldrb	r2, [r3, #4]
 801e394:	683b      	ldr	r3, [r7, #0]
 801e396:	719a      	strb	r2, [r3, #6]
	memcpy(header->flagField, (buf + 6), FLAG_FIELD_LENGTH);
 801e398:	683b      	ldr	r3, [r7, #0]
 801e39a:	3307      	adds	r3, #7
 801e39c:	687a      	ldr	r2, [r7, #4]
 801e39e:	3206      	adds	r2, #6
 801e3a0:	8812      	ldrh	r2, [r2, #0]
 801e3a2:	b292      	uxth	r2, r2
 801e3a4:	801a      	strh	r2, [r3, #0]
	memcpy(&msb, (buf + 8), 4);
 801e3a6:	687b      	ldr	r3, [r7, #4]
 801e3a8:	3308      	adds	r3, #8
 801e3aa:	681b      	ldr	r3, [r3, #0]
 801e3ac:	60fb      	str	r3, [r7, #12]
	memcpy(&lsb, (buf + 12), 4);
 801e3ae:	687b      	ldr	r3, [r7, #4]
 801e3b0:	330c      	adds	r3, #12
 801e3b2:	681b      	ldr	r3, [r3, #0]
 801e3b4:	60bb      	str	r3, [r7, #8]
	header->correctionfield = flip32(msb);
 801e3b6:	68fb      	ldr	r3, [r7, #12]
 801e3b8:	4618      	mov	r0, r3
 801e3ba:	f7ee faf6 	bl	800c9aa <lwip_htonl>
 801e3be:	4603      	mov	r3, r0
 801e3c0:	461a      	mov	r2, r3
 801e3c2:	f04f 0300 	mov.w	r3, #0
 801e3c6:	6839      	ldr	r1, [r7, #0]
 801e3c8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	header->correctionfield <<= 32;
 801e3cc:	683b      	ldr	r3, [r7, #0]
 801e3ce:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 801e3d2:	f04f 0200 	mov.w	r2, #0
 801e3d6:	f04f 0300 	mov.w	r3, #0
 801e3da:	0003      	movs	r3, r0
 801e3dc:	2200      	movs	r2, #0
 801e3de:	6839      	ldr	r1, [r7, #0]
 801e3e0:	e9c1 2304 	strd	r2, r3, [r1, #16]
	header->correctionfield += flip32(lsb);
 801e3e4:	68bb      	ldr	r3, [r7, #8]
 801e3e6:	4618      	mov	r0, r3
 801e3e8:	f7ee fadf 	bl	800c9aa <lwip_htonl>
 801e3ec:	4602      	mov	r2, r0
 801e3ee:	683b      	ldr	r3, [r7, #0]
 801e3f0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 801e3f4:	f04f 0300 	mov.w	r3, #0
 801e3f8:	1884      	adds	r4, r0, r2
 801e3fa:	eb41 0503 	adc.w	r5, r1, r3
 801e3fe:	683b      	ldr	r3, [r7, #0]
 801e400:	e9c3 4504 	strd	r4, r5, [r3, #16]
	memcpy(header->sourcePortIdentity.clockIdentity, (buf + 20), CLOCK_IDENTITY_LENGTH);
 801e404:	683b      	ldr	r3, [r7, #0]
 801e406:	f103 0018 	add.w	r0, r3, #24
 801e40a:	687b      	ldr	r3, [r7, #4]
 801e40c:	3314      	adds	r3, #20
 801e40e:	2208      	movs	r2, #8
 801e410:	4619      	mov	r1, r3
 801e412:	f001 ff23 	bl	802025c <memcpy>
	header->sourcePortIdentity.portNumber = flip16(*(int16_t*)(buf  + 28));
 801e416:	687b      	ldr	r3, [r7, #4]
 801e418:	331c      	adds	r3, #28
 801e41a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e41e:	b29b      	uxth	r3, r3
 801e420:	4618      	mov	r0, r3
 801e422:	f7ee faad 	bl	800c980 <lwip_htons>
 801e426:	4603      	mov	r3, r0
 801e428:	b21a      	sxth	r2, r3
 801e42a:	683b      	ldr	r3, [r7, #0]
 801e42c:	841a      	strh	r2, [r3, #32]
	header->sequenceId = flip16(*(int16_t*)(buf + 30));
 801e42e:	687b      	ldr	r3, [r7, #4]
 801e430:	331e      	adds	r3, #30
 801e432:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e436:	b29b      	uxth	r3, r3
 801e438:	4618      	mov	r0, r3
 801e43a:	f7ee faa1 	bl	800c980 <lwip_htons>
 801e43e:	4603      	mov	r3, r0
 801e440:	b21a      	sxth	r2, r3
 801e442:	683b      	ldr	r3, [r7, #0]
 801e444:	845a      	strh	r2, [r3, #34]	; 0x22
	header->controlField = (*(uint8_t*)(buf + 32));
 801e446:	687b      	ldr	r3, [r7, #4]
 801e448:	f893 2020 	ldrb.w	r2, [r3, #32]
 801e44c:	683b      	ldr	r3, [r7, #0]
 801e44e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	header->logMessageInterval = (*(int8_t*)(buf + 33));
 801e452:	687b      	ldr	r3, [r7, #4]
 801e454:	f993 2021 	ldrsb.w	r2, [r3, #33]	; 0x21
 801e458:	683b      	ldr	r3, [r7, #0]
 801e45a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 801e45e:	bf00      	nop
 801e460:	3710      	adds	r7, #16
 801e462:	46bd      	mov	sp, r7
 801e464:	bdb0      	pop	{r4, r5, r7, pc}

0801e466 <msgPackHeader>:

/* Pack header message */
void msgPackHeader(const PtpClock *ptpClock, octet_t *buf)
{
 801e466:	b580      	push	{r7, lr}
 801e468:	b084      	sub	sp, #16
 801e46a:	af00      	add	r7, sp, #0
 801e46c:	6078      	str	r0, [r7, #4]
 801e46e:	6039      	str	r1, [r7, #0]
	nibble_t transport = 0x80; //(spec annex D)
 801e470:	2380      	movs	r3, #128	; 0x80
 801e472:	73fb      	strb	r3, [r7, #15]
	*(uint8_t*)(buf + 0) = transport;
 801e474:	683b      	ldr	r3, [r7, #0]
 801e476:	7bfa      	ldrb	r2, [r7, #15]
 801e478:	701a      	strb	r2, [r3, #0]
	*(uint4bit_t*)(buf  + 1) = ptpClock->portDS.versionNumber;
 801e47a:	683b      	ldr	r3, [r7, #0]
 801e47c:	3301      	adds	r3, #1
 801e47e:	687a      	ldr	r2, [r7, #4]
 801e480:	f892 2071 	ldrb.w	r2, [r2, #113]	; 0x71
 801e484:	701a      	strb	r2, [r3, #0]
	*(uint8_t*)(buf + 4) = ptpClock->defaultDS.domainNumber;
 801e486:	683b      	ldr	r3, [r7, #0]
 801e488:	3304      	adds	r3, #4
 801e48a:	687a      	ldr	r2, [r7, #4]
 801e48c:	7c92      	ldrb	r2, [r2, #18]
 801e48e:	701a      	strb	r2, [r3, #0]
	if (ptpClock->defaultDS.twoStepFlag)
 801e490:	687b      	ldr	r3, [r7, #4]
 801e492:	781b      	ldrb	r3, [r3, #0]
 801e494:	2b00      	cmp	r3, #0
 801e496:	d003      	beq.n	801e4a0 <msgPackHeader+0x3a>
	{
			*(uint8_t*)(buf + 6) = FLAG0_TWO_STEP;
 801e498:	683b      	ldr	r3, [r7, #0]
 801e49a:	3306      	adds	r3, #6
 801e49c:	2202      	movs	r2, #2
 801e49e:	701a      	strb	r2, [r3, #0]
	}
	memset((buf + 8), 0, 8);
 801e4a0:	683b      	ldr	r3, [r7, #0]
 801e4a2:	3308      	adds	r3, #8
 801e4a4:	2208      	movs	r2, #8
 801e4a6:	2100      	movs	r1, #0
 801e4a8:	4618      	mov	r0, r3
 801e4aa:	f001 fee5 	bl	8020278 <memset>
	memcpy((buf + 20), ptpClock->portDS.portIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 801e4ae:	683b      	ldr	r3, [r7, #0]
 801e4b0:	f103 0014 	add.w	r0, r3, #20
 801e4b4:	687b      	ldr	r3, [r7, #4]
 801e4b6:	3358      	adds	r3, #88	; 0x58
 801e4b8:	2208      	movs	r2, #8
 801e4ba:	4619      	mov	r1, r3
 801e4bc:	f001 fece 	bl	802025c <memcpy>
	*(int16_t*)(buf + 28) = flip16(ptpClock->portDS.portIdentity.portNumber);
 801e4c0:	687b      	ldr	r3, [r7, #4]
 801e4c2:	f9b3 3060 	ldrsh.w	r3, [r3, #96]	; 0x60
 801e4c6:	b29b      	uxth	r3, r3
 801e4c8:	4618      	mov	r0, r3
 801e4ca:	f7ee fa59 	bl	800c980 <lwip_htons>
 801e4ce:	4603      	mov	r3, r0
 801e4d0:	461a      	mov	r2, r3
 801e4d2:	683b      	ldr	r3, [r7, #0]
 801e4d4:	331c      	adds	r3, #28
 801e4d6:	b212      	sxth	r2, r2
 801e4d8:	801a      	strh	r2, [r3, #0]
	*(uint8_t*)(buf + 33) = 0x7F; //Default value (spec Table 24)
 801e4da:	683b      	ldr	r3, [r7, #0]
 801e4dc:	3321      	adds	r3, #33	; 0x21
 801e4de:	227f      	movs	r2, #127	; 0x7f
 801e4e0:	701a      	strb	r2, [r3, #0]
}
 801e4e2:	bf00      	nop
 801e4e4:	3710      	adds	r7, #16
 801e4e6:	46bd      	mov	sp, r7
 801e4e8:	bd80      	pop	{r7, pc}

0801e4ea <msgPackAnnounce>:

/* Pack Announce message */
void msgPackAnnounce(const PtpClock *ptpClock, octet_t *buf)
{
 801e4ea:	b580      	push	{r7, lr}
 801e4ec:	b082      	sub	sp, #8
 801e4ee:	af00      	add	r7, sp, #0
 801e4f0:	6078      	str	r0, [r7, #4]
 801e4f2:	6039      	str	r1, [r7, #0]
	/* Changes in header */
	*(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; //RAZ messageType
 801e4f4:	683b      	ldr	r3, [r7, #0]
 801e4f6:	781b      	ldrb	r3, [r3, #0]
 801e4f8:	f023 030f 	bic.w	r3, r3, #15
 801e4fc:	b2da      	uxtb	r2, r3
 801e4fe:	683b      	ldr	r3, [r7, #0]
 801e500:	701a      	strb	r2, [r3, #0]
	*(char*)(buf + 0) = *(char*)(buf + 0) | ANNOUNCE; //Table 19
 801e502:	683b      	ldr	r3, [r7, #0]
 801e504:	781b      	ldrb	r3, [r3, #0]
 801e506:	f043 030b 	orr.w	r3, r3, #11
 801e50a:	b2da      	uxtb	r2, r3
 801e50c:	683b      	ldr	r3, [r7, #0]
 801e50e:	701a      	strb	r2, [r3, #0]
	*(int16_t*)(buf + 2)  = flip16(ANNOUNCE_LENGTH);
 801e510:	2040      	movs	r0, #64	; 0x40
 801e512:	f7ee fa35 	bl	800c980 <lwip_htons>
 801e516:	4603      	mov	r3, r0
 801e518:	461a      	mov	r2, r3
 801e51a:	683b      	ldr	r3, [r7, #0]
 801e51c:	3302      	adds	r3, #2
 801e51e:	b212      	sxth	r2, r2
 801e520:	801a      	strh	r2, [r3, #0]
	*(int16_t*)(buf + 30) = flip16(ptpClock->sentAnnounceSequenceId);
 801e522:	687b      	ldr	r3, [r7, #4]
 801e524:	f9b3 3386 	ldrsh.w	r3, [r3, #902]	; 0x386
 801e528:	b29b      	uxth	r3, r3
 801e52a:	4618      	mov	r0, r3
 801e52c:	f7ee fa28 	bl	800c980 <lwip_htons>
 801e530:	4603      	mov	r3, r0
 801e532:	461a      	mov	r2, r3
 801e534:	683b      	ldr	r3, [r7, #0]
 801e536:	331e      	adds	r3, #30
 801e538:	b212      	sxth	r2, r2
 801e53a:	801a      	strh	r2, [r3, #0]
	*(uint8_t*)(buf + 32) = CTRL_OTHER; /* Table 23 - controlField */
 801e53c:	683b      	ldr	r3, [r7, #0]
 801e53e:	3320      	adds	r3, #32
 801e540:	2205      	movs	r2, #5
 801e542:	701a      	strb	r2, [r3, #0]
	*(int8_t*)(buf + 33) = ptpClock->portDS.logAnnounceInterval;
 801e544:	683b      	ldr	r3, [r7, #0]
 801e546:	3321      	adds	r3, #33	; 0x21
 801e548:	687a      	ldr	r2, [r7, #4]
 801e54a:	f992 206c 	ldrsb.w	r2, [r2, #108]	; 0x6c
 801e54e:	701a      	strb	r2, [r3, #0]

	/* Announce message */
	memset((buf + 34), 0, 10); /* originTimestamp */
 801e550:	683b      	ldr	r3, [r7, #0]
 801e552:	3322      	adds	r3, #34	; 0x22
 801e554:	220a      	movs	r2, #10
 801e556:	2100      	movs	r1, #0
 801e558:	4618      	mov	r0, r3
 801e55a:	f001 fe8d 	bl	8020278 <memset>
	*(int16_t*)(buf + 44) = flip16(ptpClock->timePropertiesDS.currentUtcOffset);
 801e55e:	687b      	ldr	r3, [r7, #4]
 801e560:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 801e564:	b29b      	uxth	r3, r3
 801e566:	4618      	mov	r0, r3
 801e568:	f7ee fa0a 	bl	800c980 <lwip_htons>
 801e56c:	4603      	mov	r3, r0
 801e56e:	461a      	mov	r2, r3
 801e570:	683b      	ldr	r3, [r7, #0]
 801e572:	332c      	adds	r3, #44	; 0x2c
 801e574:	b212      	sxth	r2, r2
 801e576:	801a      	strh	r2, [r3, #0]
	*(uint8_t*)(buf + 47) = ptpClock->parentDS.grandmasterPriority1;
 801e578:	683b      	ldr	r3, [r7, #0]
 801e57a:	332f      	adds	r3, #47	; 0x2f
 801e57c:	687a      	ldr	r2, [r7, #4]
 801e57e:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801e582:	701a      	strb	r2, [r3, #0]
	*(uint8_t*)(buf + 48) = ptpClock->defaultDS.clockQuality.clockClass;
 801e584:	683b      	ldr	r3, [r7, #0]
 801e586:	3330      	adds	r3, #48	; 0x30
 801e588:	687a      	ldr	r2, [r7, #4]
 801e58a:	7b12      	ldrb	r2, [r2, #12]
 801e58c:	701a      	strb	r2, [r3, #0]
	*(enum8bit_t*)(buf + 49) = ptpClock->defaultDS.clockQuality.clockAccuracy;
 801e58e:	683b      	ldr	r3, [r7, #0]
 801e590:	3331      	adds	r3, #49	; 0x31
 801e592:	687a      	ldr	r2, [r7, #4]
 801e594:	7b52      	ldrb	r2, [r2, #13]
 801e596:	701a      	strb	r2, [r3, #0]
	*(int16_t*)(buf + 50) = flip16(ptpClock->defaultDS.clockQuality.offsetScaledLogVariance);
 801e598:	687b      	ldr	r3, [r7, #4]
 801e59a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801e59e:	b29b      	uxth	r3, r3
 801e5a0:	4618      	mov	r0, r3
 801e5a2:	f7ee f9ed 	bl	800c980 <lwip_htons>
 801e5a6:	4603      	mov	r3, r0
 801e5a8:	461a      	mov	r2, r3
 801e5aa:	683b      	ldr	r3, [r7, #0]
 801e5ac:	3332      	adds	r3, #50	; 0x32
 801e5ae:	b212      	sxth	r2, r2
 801e5b0:	801a      	strh	r2, [r3, #0]
	*(uint8_t*)(buf + 52) = ptpClock->parentDS.grandmasterPriority2;
 801e5b2:	683b      	ldr	r3, [r7, #0]
 801e5b4:	3334      	adds	r3, #52	; 0x34
 801e5b6:	687a      	ldr	r2, [r7, #4]
 801e5b8:	f892 2049 	ldrb.w	r2, [r2, #73]	; 0x49
 801e5bc:	701a      	strb	r2, [r3, #0]
	memcpy((buf + 53), ptpClock->parentDS.grandmasterIdentity, CLOCK_IDENTITY_LENGTH);
 801e5be:	683b      	ldr	r3, [r7, #0]
 801e5c0:	f103 0035 	add.w	r0, r3, #53	; 0x35
 801e5c4:	687b      	ldr	r3, [r7, #4]
 801e5c6:	333c      	adds	r3, #60	; 0x3c
 801e5c8:	2208      	movs	r2, #8
 801e5ca:	4619      	mov	r1, r3
 801e5cc:	f001 fe46 	bl	802025c <memcpy>
	*(int16_t*)(buf + 61) = flip16(ptpClock->currentDS.stepsRemoved);
 801e5d0:	687b      	ldr	r3, [r7, #4]
 801e5d2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801e5d6:	b29b      	uxth	r3, r3
 801e5d8:	4618      	mov	r0, r3
 801e5da:	f7ee f9d1 	bl	800c980 <lwip_htons>
 801e5de:	4603      	mov	r3, r0
 801e5e0:	461a      	mov	r2, r3
 801e5e2:	683b      	ldr	r3, [r7, #0]
 801e5e4:	333d      	adds	r3, #61	; 0x3d
 801e5e6:	b212      	sxth	r2, r2
 801e5e8:	801a      	strh	r2, [r3, #0]
	*(enum8bit_t*)(buf + 63) = ptpClock->timePropertiesDS.timeSource;
 801e5ea:	683b      	ldr	r3, [r7, #0]
 801e5ec:	333f      	adds	r3, #63	; 0x3f
 801e5ee:	687a      	ldr	r2, [r7, #4]
 801e5f0:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 801e5f4:	701a      	strb	r2, [r3, #0]
}
 801e5f6:	bf00      	nop
 801e5f8:	3708      	adds	r7, #8
 801e5fa:	46bd      	mov	sp, r7
 801e5fc:	bd80      	pop	{r7, pc}

0801e5fe <msgUnpackAnnounce>:

/* Unpack Announce message */
void msgUnpackAnnounce(const octet_t *buf, MsgAnnounce *announce)
{
 801e5fe:	b580      	push	{r7, lr}
 801e600:	b082      	sub	sp, #8
 801e602:	af00      	add	r7, sp, #0
 801e604:	6078      	str	r0, [r7, #4]
 801e606:	6039      	str	r1, [r7, #0]
	announce->originTimestamp.secondsField.msb = flip16(*(int16_t*)(buf + 34));
 801e608:	687b      	ldr	r3, [r7, #4]
 801e60a:	3322      	adds	r3, #34	; 0x22
 801e60c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e610:	b29b      	uxth	r3, r3
 801e612:	4618      	mov	r0, r3
 801e614:	f7ee f9b4 	bl	800c980 <lwip_htons>
 801e618:	4603      	mov	r3, r0
 801e61a:	461a      	mov	r2, r3
 801e61c:	683b      	ldr	r3, [r7, #0]
 801e61e:	809a      	strh	r2, [r3, #4]
	announce->originTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 801e620:	687b      	ldr	r3, [r7, #4]
 801e622:	3324      	adds	r3, #36	; 0x24
 801e624:	681b      	ldr	r3, [r3, #0]
 801e626:	4618      	mov	r0, r3
 801e628:	f7ee f9bf 	bl	800c9aa <lwip_htonl>
 801e62c:	4602      	mov	r2, r0
 801e62e:	683b      	ldr	r3, [r7, #0]
 801e630:	601a      	str	r2, [r3, #0]
	announce->originTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 801e632:	687b      	ldr	r3, [r7, #4]
 801e634:	3328      	adds	r3, #40	; 0x28
 801e636:	681b      	ldr	r3, [r3, #0]
 801e638:	4618      	mov	r0, r3
 801e63a:	f7ee f9b6 	bl	800c9aa <lwip_htonl>
 801e63e:	4602      	mov	r2, r0
 801e640:	683b      	ldr	r3, [r7, #0]
 801e642:	609a      	str	r2, [r3, #8]
	announce->currentUtcOffset = flip16(*(int16_t*)(buf + 44));
 801e644:	687b      	ldr	r3, [r7, #4]
 801e646:	332c      	adds	r3, #44	; 0x2c
 801e648:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e64c:	b29b      	uxth	r3, r3
 801e64e:	4618      	mov	r0, r3
 801e650:	f7ee f996 	bl	800c980 <lwip_htons>
 801e654:	4603      	mov	r3, r0
 801e656:	b21a      	sxth	r2, r3
 801e658:	683b      	ldr	r3, [r7, #0]
 801e65a:	819a      	strh	r2, [r3, #12]
	announce->grandmasterPriority1 = *(uint8_t*)(buf + 47);
 801e65c:	687b      	ldr	r3, [r7, #4]
 801e65e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 801e662:	683b      	ldr	r3, [r7, #0]
 801e664:	739a      	strb	r2, [r3, #14]
	announce->grandmasterClockQuality.clockClass = *(uint8_t*)(buf + 48);
 801e666:	687b      	ldr	r3, [r7, #4]
 801e668:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801e66c:	683b      	ldr	r3, [r7, #0]
 801e66e:	741a      	strb	r2, [r3, #16]
	announce->grandmasterClockQuality.clockAccuracy = *(enum8bit_t*)(buf + 49);
 801e670:	687b      	ldr	r3, [r7, #4]
 801e672:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 801e676:	683b      	ldr	r3, [r7, #0]
 801e678:	745a      	strb	r2, [r3, #17]
	announce->grandmasterClockQuality.offsetScaledLogVariance = flip16(*(int16_t*)(buf  + 50));
 801e67a:	687b      	ldr	r3, [r7, #4]
 801e67c:	3332      	adds	r3, #50	; 0x32
 801e67e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e682:	b29b      	uxth	r3, r3
 801e684:	4618      	mov	r0, r3
 801e686:	f7ee f97b 	bl	800c980 <lwip_htons>
 801e68a:	4603      	mov	r3, r0
 801e68c:	b21a      	sxth	r2, r3
 801e68e:	683b      	ldr	r3, [r7, #0]
 801e690:	825a      	strh	r2, [r3, #18]
	announce->grandmasterPriority2 = *(uint8_t*)(buf + 52);
 801e692:	687b      	ldr	r3, [r7, #4]
 801e694:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801e698:	683b      	ldr	r3, [r7, #0]
 801e69a:	751a      	strb	r2, [r3, #20]
	memcpy(announce->grandmasterIdentity, (buf + 53), CLOCK_IDENTITY_LENGTH);
 801e69c:	683b      	ldr	r3, [r7, #0]
 801e69e:	f103 0015 	add.w	r0, r3, #21
 801e6a2:	687b      	ldr	r3, [r7, #4]
 801e6a4:	3335      	adds	r3, #53	; 0x35
 801e6a6:	2208      	movs	r2, #8
 801e6a8:	4619      	mov	r1, r3
 801e6aa:	f001 fdd7 	bl	802025c <memcpy>
	announce->stepsRemoved = flip16(*(int16_t*)(buf + 61));
 801e6ae:	687b      	ldr	r3, [r7, #4]
 801e6b0:	333d      	adds	r3, #61	; 0x3d
 801e6b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e6b6:	b29b      	uxth	r3, r3
 801e6b8:	4618      	mov	r0, r3
 801e6ba:	f7ee f961 	bl	800c980 <lwip_htons>
 801e6be:	4603      	mov	r3, r0
 801e6c0:	b21a      	sxth	r2, r3
 801e6c2:	683b      	ldr	r3, [r7, #0]
 801e6c4:	83da      	strh	r2, [r3, #30]
	announce->timeSource = *(enum8bit_t*)(buf + 63);
 801e6c6:	687b      	ldr	r3, [r7, #4]
 801e6c8:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 801e6cc:	683b      	ldr	r3, [r7, #0]
 801e6ce:	f883 2020 	strb.w	r2, [r3, #32]
}
 801e6d2:	bf00      	nop
 801e6d4:	3708      	adds	r7, #8
 801e6d6:	46bd      	mov	sp, r7
 801e6d8:	bd80      	pop	{r7, pc}

0801e6da <msgPackSync>:

/* Pack SYNC message */
void msgPackSync(const PtpClock *ptpClock, octet_t *buf, const Timestamp *originTimestamp)
{
 801e6da:	b590      	push	{r4, r7, lr}
 801e6dc:	b085      	sub	sp, #20
 801e6de:	af00      	add	r7, sp, #0
 801e6e0:	60f8      	str	r0, [r7, #12]
 801e6e2:	60b9      	str	r1, [r7, #8]
 801e6e4:	607a      	str	r2, [r7, #4]
	/* Changes in header */
	*(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; //RAZ messageType
 801e6e6:	68bb      	ldr	r3, [r7, #8]
 801e6e8:	781b      	ldrb	r3, [r3, #0]
 801e6ea:	f023 030f 	bic.w	r3, r3, #15
 801e6ee:	b2da      	uxtb	r2, r3
 801e6f0:	68bb      	ldr	r3, [r7, #8]
 801e6f2:	701a      	strb	r2, [r3, #0]
	*(char*)(buf + 0) = *(char*)(buf + 0) | SYNC; //Table 19
 801e6f4:	68bb      	ldr	r3, [r7, #8]
 801e6f6:	781a      	ldrb	r2, [r3, #0]
 801e6f8:	68bb      	ldr	r3, [r7, #8]
 801e6fa:	701a      	strb	r2, [r3, #0]
	*(int16_t*)(buf + 2)  = flip16(SYNC_LENGTH);
 801e6fc:	202c      	movs	r0, #44	; 0x2c
 801e6fe:	f7ee f93f 	bl	800c980 <lwip_htons>
 801e702:	4603      	mov	r3, r0
 801e704:	461a      	mov	r2, r3
 801e706:	68bb      	ldr	r3, [r7, #8]
 801e708:	3302      	adds	r3, #2
 801e70a:	b212      	sxth	r2, r2
 801e70c:	801a      	strh	r2, [r3, #0]
	*(int16_t*)(buf + 30) = flip16(ptpClock->sentSyncSequenceId);
 801e70e:	68fb      	ldr	r3, [r7, #12]
 801e710:	f9b3 3384 	ldrsh.w	r3, [r3, #900]	; 0x384
 801e714:	b29b      	uxth	r3, r3
 801e716:	4618      	mov	r0, r3
 801e718:	f7ee f932 	bl	800c980 <lwip_htons>
 801e71c:	4603      	mov	r3, r0
 801e71e:	461a      	mov	r2, r3
 801e720:	68bb      	ldr	r3, [r7, #8]
 801e722:	331e      	adds	r3, #30
 801e724:	b212      	sxth	r2, r2
 801e726:	801a      	strh	r2, [r3, #0]
	*(uint8_t*)(buf + 32) = CTRL_SYNC; //Table 23
 801e728:	68bb      	ldr	r3, [r7, #8]
 801e72a:	3320      	adds	r3, #32
 801e72c:	2200      	movs	r2, #0
 801e72e:	701a      	strb	r2, [r3, #0]
	*(int8_t*)(buf + 33) = ptpClock->portDS.logSyncInterval;
 801e730:	68bb      	ldr	r3, [r7, #8]
 801e732:	3321      	adds	r3, #33	; 0x21
 801e734:	68fa      	ldr	r2, [r7, #12]
 801e736:	f992 206e 	ldrsb.w	r2, [r2, #110]	; 0x6e
 801e73a:	701a      	strb	r2, [r3, #0]
	memset((buf + 8), 0, 8); /* correction field */
 801e73c:	68bb      	ldr	r3, [r7, #8]
 801e73e:	3308      	adds	r3, #8
 801e740:	2208      	movs	r2, #8
 801e742:	2100      	movs	r1, #0
 801e744:	4618      	mov	r0, r3
 801e746:	f001 fd97 	bl	8020278 <memset>

	/* Sync message */
	*(int16_t*)(buf + 34) = flip16(originTimestamp->secondsField.msb);
 801e74a:	687b      	ldr	r3, [r7, #4]
 801e74c:	889b      	ldrh	r3, [r3, #4]
 801e74e:	4618      	mov	r0, r3
 801e750:	f7ee f916 	bl	800c980 <lwip_htons>
 801e754:	4603      	mov	r3, r0
 801e756:	461a      	mov	r2, r3
 801e758:	68bb      	ldr	r3, [r7, #8]
 801e75a:	3322      	adds	r3, #34	; 0x22
 801e75c:	b212      	sxth	r2, r2
 801e75e:	801a      	strh	r2, [r3, #0]
	*(uint32_t*)(buf + 36) = flip32(originTimestamp->secondsField.lsb);
 801e760:	687b      	ldr	r3, [r7, #4]
 801e762:	681a      	ldr	r2, [r3, #0]
 801e764:	68bb      	ldr	r3, [r7, #8]
 801e766:	f103 0424 	add.w	r4, r3, #36	; 0x24
 801e76a:	4610      	mov	r0, r2
 801e76c:	f7ee f91d 	bl	800c9aa <lwip_htonl>
 801e770:	4603      	mov	r3, r0
 801e772:	6023      	str	r3, [r4, #0]
	*(uint32_t*)(buf + 40) = flip32(originTimestamp->nanosecondsField);
 801e774:	687b      	ldr	r3, [r7, #4]
 801e776:	689a      	ldr	r2, [r3, #8]
 801e778:	68bb      	ldr	r3, [r7, #8]
 801e77a:	f103 0428 	add.w	r4, r3, #40	; 0x28
 801e77e:	4610      	mov	r0, r2
 801e780:	f7ee f913 	bl	800c9aa <lwip_htonl>
 801e784:	4603      	mov	r3, r0
 801e786:	6023      	str	r3, [r4, #0]
}
 801e788:	bf00      	nop
 801e78a:	3714      	adds	r7, #20
 801e78c:	46bd      	mov	sp, r7
 801e78e:	bd90      	pop	{r4, r7, pc}

0801e790 <msgUnpackSync>:

/* Unpack Sync message */
void msgUnpackSync(const octet_t *buf, MsgSync *sync)
{
 801e790:	b580      	push	{r7, lr}
 801e792:	b082      	sub	sp, #8
 801e794:	af00      	add	r7, sp, #0
 801e796:	6078      	str	r0, [r7, #4]
 801e798:	6039      	str	r1, [r7, #0]
	sync->originTimestamp.secondsField.msb = flip16(*(int16_t*)(buf + 34));
 801e79a:	687b      	ldr	r3, [r7, #4]
 801e79c:	3322      	adds	r3, #34	; 0x22
 801e79e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e7a2:	b29b      	uxth	r3, r3
 801e7a4:	4618      	mov	r0, r3
 801e7a6:	f7ee f8eb 	bl	800c980 <lwip_htons>
 801e7aa:	4603      	mov	r3, r0
 801e7ac:	461a      	mov	r2, r3
 801e7ae:	683b      	ldr	r3, [r7, #0]
 801e7b0:	809a      	strh	r2, [r3, #4]
	sync->originTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 801e7b2:	687b      	ldr	r3, [r7, #4]
 801e7b4:	3324      	adds	r3, #36	; 0x24
 801e7b6:	681b      	ldr	r3, [r3, #0]
 801e7b8:	4618      	mov	r0, r3
 801e7ba:	f7ee f8f6 	bl	800c9aa <lwip_htonl>
 801e7be:	4602      	mov	r2, r0
 801e7c0:	683b      	ldr	r3, [r7, #0]
 801e7c2:	601a      	str	r2, [r3, #0]
	sync->originTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 801e7c4:	687b      	ldr	r3, [r7, #4]
 801e7c6:	3328      	adds	r3, #40	; 0x28
 801e7c8:	681b      	ldr	r3, [r3, #0]
 801e7ca:	4618      	mov	r0, r3
 801e7cc:	f7ee f8ed 	bl	800c9aa <lwip_htonl>
 801e7d0:	4602      	mov	r2, r0
 801e7d2:	683b      	ldr	r3, [r7, #0]
 801e7d4:	609a      	str	r2, [r3, #8]
}
 801e7d6:	bf00      	nop
 801e7d8:	3708      	adds	r7, #8
 801e7da:	46bd      	mov	sp, r7
 801e7dc:	bd80      	pop	{r7, pc}

0801e7de <msgPackDelayReq>:

/* Pack delayReq message */
void msgPackDelayReq(const PtpClock *ptpClock, octet_t *buf, const Timestamp *originTimestamp)
{
 801e7de:	b590      	push	{r4, r7, lr}
 801e7e0:	b085      	sub	sp, #20
 801e7e2:	af00      	add	r7, sp, #0
 801e7e4:	60f8      	str	r0, [r7, #12]
 801e7e6:	60b9      	str	r1, [r7, #8]
 801e7e8:	607a      	str	r2, [r7, #4]
	/* Changes in header */
	*(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; //RAZ messageType
 801e7ea:	68bb      	ldr	r3, [r7, #8]
 801e7ec:	781b      	ldrb	r3, [r3, #0]
 801e7ee:	f023 030f 	bic.w	r3, r3, #15
 801e7f2:	b2da      	uxtb	r2, r3
 801e7f4:	68bb      	ldr	r3, [r7, #8]
 801e7f6:	701a      	strb	r2, [r3, #0]
	*(char*)(buf + 0) = *(char*)(buf + 0) | DELAY_REQ; //Table 19
 801e7f8:	68bb      	ldr	r3, [r7, #8]
 801e7fa:	781b      	ldrb	r3, [r3, #0]
 801e7fc:	f043 0301 	orr.w	r3, r3, #1
 801e800:	b2da      	uxtb	r2, r3
 801e802:	68bb      	ldr	r3, [r7, #8]
 801e804:	701a      	strb	r2, [r3, #0]
	*(int16_t*)(buf + 2)  = flip16(DELAY_REQ_LENGTH);
 801e806:	202c      	movs	r0, #44	; 0x2c
 801e808:	f7ee f8ba 	bl	800c980 <lwip_htons>
 801e80c:	4603      	mov	r3, r0
 801e80e:	461a      	mov	r2, r3
 801e810:	68bb      	ldr	r3, [r7, #8]
 801e812:	3302      	adds	r3, #2
 801e814:	b212      	sxth	r2, r2
 801e816:	801a      	strh	r2, [r3, #0]
	*(int16_t*)(buf + 30) = flip16(ptpClock->sentDelayReqSequenceId);
 801e818:	68fb      	ldr	r3, [r7, #12]
 801e81a:	f9b3 3382 	ldrsh.w	r3, [r3, #898]	; 0x382
 801e81e:	b29b      	uxth	r3, r3
 801e820:	4618      	mov	r0, r3
 801e822:	f7ee f8ad 	bl	800c980 <lwip_htons>
 801e826:	4603      	mov	r3, r0
 801e828:	461a      	mov	r2, r3
 801e82a:	68bb      	ldr	r3, [r7, #8]
 801e82c:	331e      	adds	r3, #30
 801e82e:	b212      	sxth	r2, r2
 801e830:	801a      	strh	r2, [r3, #0]
	*(uint8_t*)(buf + 32) = CTRL_DELAY_REQ; //Table 23
 801e832:	68bb      	ldr	r3, [r7, #8]
 801e834:	3320      	adds	r3, #32
 801e836:	2201      	movs	r2, #1
 801e838:	701a      	strb	r2, [r3, #0]
	*(int8_t*)(buf + 33) = 0x7F; //Table 24
 801e83a:	68bb      	ldr	r3, [r7, #8]
 801e83c:	3321      	adds	r3, #33	; 0x21
 801e83e:	227f      	movs	r2, #127	; 0x7f
 801e840:	701a      	strb	r2, [r3, #0]
	memset((buf + 8), 0, 8);
 801e842:	68bb      	ldr	r3, [r7, #8]
 801e844:	3308      	adds	r3, #8
 801e846:	2208      	movs	r2, #8
 801e848:	2100      	movs	r1, #0
 801e84a:	4618      	mov	r0, r3
 801e84c:	f001 fd14 	bl	8020278 <memset>

	/* delay_req message */
	*(int16_t*)(buf + 34) = flip16(originTimestamp->secondsField.msb);
 801e850:	687b      	ldr	r3, [r7, #4]
 801e852:	889b      	ldrh	r3, [r3, #4]
 801e854:	4618      	mov	r0, r3
 801e856:	f7ee f893 	bl	800c980 <lwip_htons>
 801e85a:	4603      	mov	r3, r0
 801e85c:	461a      	mov	r2, r3
 801e85e:	68bb      	ldr	r3, [r7, #8]
 801e860:	3322      	adds	r3, #34	; 0x22
 801e862:	b212      	sxth	r2, r2
 801e864:	801a      	strh	r2, [r3, #0]
	*(uint32_t*)(buf + 36) = flip32(originTimestamp->secondsField.lsb);
 801e866:	687b      	ldr	r3, [r7, #4]
 801e868:	681a      	ldr	r2, [r3, #0]
 801e86a:	68bb      	ldr	r3, [r7, #8]
 801e86c:	f103 0424 	add.w	r4, r3, #36	; 0x24
 801e870:	4610      	mov	r0, r2
 801e872:	f7ee f89a 	bl	800c9aa <lwip_htonl>
 801e876:	4603      	mov	r3, r0
 801e878:	6023      	str	r3, [r4, #0]
	*(uint32_t*)(buf + 40) = flip32(originTimestamp->nanosecondsField);
 801e87a:	687b      	ldr	r3, [r7, #4]
 801e87c:	689a      	ldr	r2, [r3, #8]
 801e87e:	68bb      	ldr	r3, [r7, #8]
 801e880:	f103 0428 	add.w	r4, r3, #40	; 0x28
 801e884:	4610      	mov	r0, r2
 801e886:	f7ee f890 	bl	800c9aa <lwip_htonl>
 801e88a:	4603      	mov	r3, r0
 801e88c:	6023      	str	r3, [r4, #0]
}
 801e88e:	bf00      	nop
 801e890:	3714      	adds	r7, #20
 801e892:	46bd      	mov	sp, r7
 801e894:	bd90      	pop	{r4, r7, pc}

0801e896 <msgPackFollowUp>:
	delayreq->originTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
}

/* Pack Follow_up message */
void msgPackFollowUp(const PtpClock *ptpClock, octet_t*buf, const Timestamp *preciseOriginTimestamp)
{
 801e896:	b590      	push	{r4, r7, lr}
 801e898:	b085      	sub	sp, #20
 801e89a:	af00      	add	r7, sp, #0
 801e89c:	60f8      	str	r0, [r7, #12]
 801e89e:	60b9      	str	r1, [r7, #8]
 801e8a0:	607a      	str	r2, [r7, #4]
	/* Changes in header */
	*(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; //RAZ messageType
 801e8a2:	68bb      	ldr	r3, [r7, #8]
 801e8a4:	781b      	ldrb	r3, [r3, #0]
 801e8a6:	f023 030f 	bic.w	r3, r3, #15
 801e8aa:	b2da      	uxtb	r2, r3
 801e8ac:	68bb      	ldr	r3, [r7, #8]
 801e8ae:	701a      	strb	r2, [r3, #0]
	*(char*)(buf + 0) = *(char*)(buf + 0) | FOLLOW_UP; //Table 19
 801e8b0:	68bb      	ldr	r3, [r7, #8]
 801e8b2:	781b      	ldrb	r3, [r3, #0]
 801e8b4:	f043 0308 	orr.w	r3, r3, #8
 801e8b8:	b2da      	uxtb	r2, r3
 801e8ba:	68bb      	ldr	r3, [r7, #8]
 801e8bc:	701a      	strb	r2, [r3, #0]
	*(int16_t*)(buf + 2)  = flip16(FOLLOW_UP_LENGTH);
 801e8be:	202c      	movs	r0, #44	; 0x2c
 801e8c0:	f7ee f85e 	bl	800c980 <lwip_htons>
 801e8c4:	4603      	mov	r3, r0
 801e8c6:	461a      	mov	r2, r3
 801e8c8:	68bb      	ldr	r3, [r7, #8]
 801e8ca:	3302      	adds	r3, #2
 801e8cc:	b212      	sxth	r2, r2
 801e8ce:	801a      	strh	r2, [r3, #0]
	*(int16_t*)(buf + 30) = flip16(ptpClock->sentSyncSequenceId - 1);//sentSyncSequenceId has already been  incremented in issueSync
 801e8d0:	68fb      	ldr	r3, [r7, #12]
 801e8d2:	f9b3 3384 	ldrsh.w	r3, [r3, #900]	; 0x384
 801e8d6:	b29b      	uxth	r3, r3
 801e8d8:	3b01      	subs	r3, #1
 801e8da:	b29b      	uxth	r3, r3
 801e8dc:	4618      	mov	r0, r3
 801e8de:	f7ee f84f 	bl	800c980 <lwip_htons>
 801e8e2:	4603      	mov	r3, r0
 801e8e4:	461a      	mov	r2, r3
 801e8e6:	68bb      	ldr	r3, [r7, #8]
 801e8e8:	331e      	adds	r3, #30
 801e8ea:	b212      	sxth	r2, r2
 801e8ec:	801a      	strh	r2, [r3, #0]
	*(uint8_t*)(buf + 32) = CTRL_FOLLOW_UP; //Table 23
 801e8ee:	68bb      	ldr	r3, [r7, #8]
 801e8f0:	3320      	adds	r3, #32
 801e8f2:	2202      	movs	r2, #2
 801e8f4:	701a      	strb	r2, [r3, #0]
	*(int8_t*)(buf + 33) = ptpClock->portDS.logSyncInterval;
 801e8f6:	68bb      	ldr	r3, [r7, #8]
 801e8f8:	3321      	adds	r3, #33	; 0x21
 801e8fa:	68fa      	ldr	r2, [r7, #12]
 801e8fc:	f992 206e 	ldrsb.w	r2, [r2, #110]	; 0x6e
 801e900:	701a      	strb	r2, [r3, #0]

	/* Follow_up message */
	*(int16_t*)(buf + 34) = flip16(preciseOriginTimestamp->secondsField.msb);
 801e902:	687b      	ldr	r3, [r7, #4]
 801e904:	889b      	ldrh	r3, [r3, #4]
 801e906:	4618      	mov	r0, r3
 801e908:	f7ee f83a 	bl	800c980 <lwip_htons>
 801e90c:	4603      	mov	r3, r0
 801e90e:	461a      	mov	r2, r3
 801e910:	68bb      	ldr	r3, [r7, #8]
 801e912:	3322      	adds	r3, #34	; 0x22
 801e914:	b212      	sxth	r2, r2
 801e916:	801a      	strh	r2, [r3, #0]
	*(uint32_t*)(buf + 36) = flip32(preciseOriginTimestamp->secondsField.lsb);
 801e918:	687b      	ldr	r3, [r7, #4]
 801e91a:	681a      	ldr	r2, [r3, #0]
 801e91c:	68bb      	ldr	r3, [r7, #8]
 801e91e:	f103 0424 	add.w	r4, r3, #36	; 0x24
 801e922:	4610      	mov	r0, r2
 801e924:	f7ee f841 	bl	800c9aa <lwip_htonl>
 801e928:	4603      	mov	r3, r0
 801e92a:	6023      	str	r3, [r4, #0]
	*(uint32_t*)(buf + 40) = flip32(preciseOriginTimestamp->nanosecondsField);
 801e92c:	687b      	ldr	r3, [r7, #4]
 801e92e:	689a      	ldr	r2, [r3, #8]
 801e930:	68bb      	ldr	r3, [r7, #8]
 801e932:	f103 0428 	add.w	r4, r3, #40	; 0x28
 801e936:	4610      	mov	r0, r2
 801e938:	f7ee f837 	bl	800c9aa <lwip_htonl>
 801e93c:	4603      	mov	r3, r0
 801e93e:	6023      	str	r3, [r4, #0]
}
 801e940:	bf00      	nop
 801e942:	3714      	adds	r7, #20
 801e944:	46bd      	mov	sp, r7
 801e946:	bd90      	pop	{r4, r7, pc}

0801e948 <msgUnpackFollowUp>:

/* Unpack Follow_up message */
void msgUnpackFollowUp(const octet_t *buf, MsgFollowUp *follow)
{
 801e948:	b580      	push	{r7, lr}
 801e94a:	b082      	sub	sp, #8
 801e94c:	af00      	add	r7, sp, #0
 801e94e:	6078      	str	r0, [r7, #4]
 801e950:	6039      	str	r1, [r7, #0]
	follow->preciseOriginTimestamp.secondsField.msb = flip16(*(int16_t*)(buf  + 34));
 801e952:	687b      	ldr	r3, [r7, #4]
 801e954:	3322      	adds	r3, #34	; 0x22
 801e956:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e95a:	b29b      	uxth	r3, r3
 801e95c:	4618      	mov	r0, r3
 801e95e:	f7ee f80f 	bl	800c980 <lwip_htons>
 801e962:	4603      	mov	r3, r0
 801e964:	461a      	mov	r2, r3
 801e966:	683b      	ldr	r3, [r7, #0]
 801e968:	809a      	strh	r2, [r3, #4]
	follow->preciseOriginTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 801e96a:	687b      	ldr	r3, [r7, #4]
 801e96c:	3324      	adds	r3, #36	; 0x24
 801e96e:	681b      	ldr	r3, [r3, #0]
 801e970:	4618      	mov	r0, r3
 801e972:	f7ee f81a 	bl	800c9aa <lwip_htonl>
 801e976:	4602      	mov	r2, r0
 801e978:	683b      	ldr	r3, [r7, #0]
 801e97a:	601a      	str	r2, [r3, #0]
	follow->preciseOriginTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 801e97c:	687b      	ldr	r3, [r7, #4]
 801e97e:	3328      	adds	r3, #40	; 0x28
 801e980:	681b      	ldr	r3, [r3, #0]
 801e982:	4618      	mov	r0, r3
 801e984:	f7ee f811 	bl	800c9aa <lwip_htonl>
 801e988:	4602      	mov	r2, r0
 801e98a:	683b      	ldr	r3, [r7, #0]
 801e98c:	609a      	str	r2, [r3, #8]
}
 801e98e:	bf00      	nop
 801e990:	3708      	adds	r7, #8
 801e992:	46bd      	mov	sp, r7
 801e994:	bd80      	pop	{r7, pc}

0801e996 <msgPackDelayResp>:

/* Pack delayResp message */
void msgPackDelayResp(const PtpClock *ptpClock, octet_t *buf, const MsgHeader *header, const Timestamp *receiveTimestamp)
{
 801e996:	b590      	push	{r4, r7, lr}
 801e998:	b085      	sub	sp, #20
 801e99a:	af00      	add	r7, sp, #0
 801e99c:	60f8      	str	r0, [r7, #12]
 801e99e:	60b9      	str	r1, [r7, #8]
 801e9a0:	607a      	str	r2, [r7, #4]
 801e9a2:	603b      	str	r3, [r7, #0]
	/* Changes in header */
	*(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; //RAZ messageType
 801e9a4:	68bb      	ldr	r3, [r7, #8]
 801e9a6:	781b      	ldrb	r3, [r3, #0]
 801e9a8:	f023 030f 	bic.w	r3, r3, #15
 801e9ac:	b2da      	uxtb	r2, r3
 801e9ae:	68bb      	ldr	r3, [r7, #8]
 801e9b0:	701a      	strb	r2, [r3, #0]
	*(char*)(buf + 0) = *(char*)(buf + 0) | DELAY_RESP; //Table 19
 801e9b2:	68bb      	ldr	r3, [r7, #8]
 801e9b4:	781b      	ldrb	r3, [r3, #0]
 801e9b6:	f043 0309 	orr.w	r3, r3, #9
 801e9ba:	b2da      	uxtb	r2, r3
 801e9bc:	68bb      	ldr	r3, [r7, #8]
 801e9be:	701a      	strb	r2, [r3, #0]
	*(int16_t*)(buf + 2)  = flip16(DELAY_RESP_LENGTH);
 801e9c0:	2036      	movs	r0, #54	; 0x36
 801e9c2:	f7ed ffdd 	bl	800c980 <lwip_htons>
 801e9c6:	4603      	mov	r3, r0
 801e9c8:	461a      	mov	r2, r3
 801e9ca:	68bb      	ldr	r3, [r7, #8]
 801e9cc:	3302      	adds	r3, #2
 801e9ce:	b212      	sxth	r2, r2
 801e9d0:	801a      	strh	r2, [r3, #0]
	/* *(uint8_t*)(buf+4) = header->domainNumber; */ /* TODO: Why? */
	memset((buf + 8), 0, 8);
 801e9d2:	68bb      	ldr	r3, [r7, #8]
 801e9d4:	3308      	adds	r3, #8
 801e9d6:	2208      	movs	r2, #8
 801e9d8:	2100      	movs	r1, #0
 801e9da:	4618      	mov	r0, r3
 801e9dc:	f001 fc4c 	bl	8020278 <memset>

	/* Copy correctionField of  delayReqMessage */
	*(int32_t*)(buf + 8) = flip32(header->correctionfield >> 32);
 801e9e0:	687b      	ldr	r3, [r7, #4]
 801e9e2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 801e9e6:	f04f 0200 	mov.w	r2, #0
 801e9ea:	f04f 0300 	mov.w	r3, #0
 801e9ee:	000a      	movs	r2, r1
 801e9f0:	17cb      	asrs	r3, r1, #31
 801e9f2:	4613      	mov	r3, r2
 801e9f4:	4618      	mov	r0, r3
 801e9f6:	f7ed ffd8 	bl	800c9aa <lwip_htonl>
 801e9fa:	4602      	mov	r2, r0
 801e9fc:	68bb      	ldr	r3, [r7, #8]
 801e9fe:	3308      	adds	r3, #8
 801ea00:	601a      	str	r2, [r3, #0]
	*(int32_t*)(buf + 12) = flip32((int32_t)header->correctionfield);
 801ea02:	687b      	ldr	r3, [r7, #4]
 801ea04:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801ea08:	4613      	mov	r3, r2
 801ea0a:	4618      	mov	r0, r3
 801ea0c:	f7ed ffcd 	bl	800c9aa <lwip_htonl>
 801ea10:	4602      	mov	r2, r0
 801ea12:	68bb      	ldr	r3, [r7, #8]
 801ea14:	330c      	adds	r3, #12
 801ea16:	601a      	str	r2, [r3, #0]
	*(int16_t*)(buf + 30) = flip16(header->sequenceId);
 801ea18:	687b      	ldr	r3, [r7, #4]
 801ea1a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 801ea1e:	b29b      	uxth	r3, r3
 801ea20:	4618      	mov	r0, r3
 801ea22:	f7ed ffad 	bl	800c980 <lwip_htons>
 801ea26:	4603      	mov	r3, r0
 801ea28:	461a      	mov	r2, r3
 801ea2a:	68bb      	ldr	r3, [r7, #8]
 801ea2c:	331e      	adds	r3, #30
 801ea2e:	b212      	sxth	r2, r2
 801ea30:	801a      	strh	r2, [r3, #0]
	*(uint8_t*)(buf + 32) = CTRL_DELAY_RESP; //Table 23
 801ea32:	68bb      	ldr	r3, [r7, #8]
 801ea34:	3320      	adds	r3, #32
 801ea36:	2203      	movs	r2, #3
 801ea38:	701a      	strb	r2, [r3, #0]
	*(int8_t*)(buf + 33) = ptpClock->portDS.logMinDelayReqInterval; //Table 24
 801ea3a:	68bb      	ldr	r3, [r7, #8]
 801ea3c:	3321      	adds	r3, #33	; 0x21
 801ea3e:	68fa      	ldr	r2, [r7, #12]
 801ea40:	f992 2063 	ldrsb.w	r2, [r2, #99]	; 0x63
 801ea44:	701a      	strb	r2, [r3, #0]

	/* delay_resp message */
	*(int16_t*)(buf + 34) = flip16(receiveTimestamp->secondsField.msb);
 801ea46:	683b      	ldr	r3, [r7, #0]
 801ea48:	889b      	ldrh	r3, [r3, #4]
 801ea4a:	4618      	mov	r0, r3
 801ea4c:	f7ed ff98 	bl	800c980 <lwip_htons>
 801ea50:	4603      	mov	r3, r0
 801ea52:	461a      	mov	r2, r3
 801ea54:	68bb      	ldr	r3, [r7, #8]
 801ea56:	3322      	adds	r3, #34	; 0x22
 801ea58:	b212      	sxth	r2, r2
 801ea5a:	801a      	strh	r2, [r3, #0]
	*(uint32_t*)(buf + 36) = flip32(receiveTimestamp->secondsField.lsb);
 801ea5c:	683b      	ldr	r3, [r7, #0]
 801ea5e:	681a      	ldr	r2, [r3, #0]
 801ea60:	68bb      	ldr	r3, [r7, #8]
 801ea62:	f103 0424 	add.w	r4, r3, #36	; 0x24
 801ea66:	4610      	mov	r0, r2
 801ea68:	f7ed ff9f 	bl	800c9aa <lwip_htonl>
 801ea6c:	4603      	mov	r3, r0
 801ea6e:	6023      	str	r3, [r4, #0]
	*(uint32_t*)(buf + 40) = flip32(receiveTimestamp->nanosecondsField);
 801ea70:	683b      	ldr	r3, [r7, #0]
 801ea72:	689a      	ldr	r2, [r3, #8]
 801ea74:	68bb      	ldr	r3, [r7, #8]
 801ea76:	f103 0428 	add.w	r4, r3, #40	; 0x28
 801ea7a:	4610      	mov	r0, r2
 801ea7c:	f7ed ff95 	bl	800c9aa <lwip_htonl>
 801ea80:	4603      	mov	r3, r0
 801ea82:	6023      	str	r3, [r4, #0]
	memcpy((buf + 44), header->sourcePortIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 801ea84:	68bb      	ldr	r3, [r7, #8]
 801ea86:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 801ea8a:	687b      	ldr	r3, [r7, #4]
 801ea8c:	3318      	adds	r3, #24
 801ea8e:	2208      	movs	r2, #8
 801ea90:	4619      	mov	r1, r3
 801ea92:	f001 fbe3 	bl	802025c <memcpy>
	*(int16_t*)(buf + 52) = flip16(header->sourcePortIdentity.portNumber);
 801ea96:	687b      	ldr	r3, [r7, #4]
 801ea98:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801ea9c:	b29b      	uxth	r3, r3
 801ea9e:	4618      	mov	r0, r3
 801eaa0:	f7ed ff6e 	bl	800c980 <lwip_htons>
 801eaa4:	4603      	mov	r3, r0
 801eaa6:	461a      	mov	r2, r3
 801eaa8:	68bb      	ldr	r3, [r7, #8]
 801eaaa:	3334      	adds	r3, #52	; 0x34
 801eaac:	b212      	sxth	r2, r2
 801eaae:	801a      	strh	r2, [r3, #0]
}
 801eab0:	bf00      	nop
 801eab2:	3714      	adds	r7, #20
 801eab4:	46bd      	mov	sp, r7
 801eab6:	bd90      	pop	{r4, r7, pc}

0801eab8 <msgUnpackDelayResp>:

/* Unpack delayResp message */
void msgUnpackDelayResp(const octet_t *buf, MsgDelayResp *resp)
{
 801eab8:	b580      	push	{r7, lr}
 801eaba:	b082      	sub	sp, #8
 801eabc:	af00      	add	r7, sp, #0
 801eabe:	6078      	str	r0, [r7, #4]
 801eac0:	6039      	str	r1, [r7, #0]
	resp->receiveTimestamp.secondsField.msb = flip16(*(int16_t*)(buf  + 34));
 801eac2:	687b      	ldr	r3, [r7, #4]
 801eac4:	3322      	adds	r3, #34	; 0x22
 801eac6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801eaca:	b29b      	uxth	r3, r3
 801eacc:	4618      	mov	r0, r3
 801eace:	f7ed ff57 	bl	800c980 <lwip_htons>
 801ead2:	4603      	mov	r3, r0
 801ead4:	461a      	mov	r2, r3
 801ead6:	683b      	ldr	r3, [r7, #0]
 801ead8:	809a      	strh	r2, [r3, #4]
	resp->receiveTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 801eada:	687b      	ldr	r3, [r7, #4]
 801eadc:	3324      	adds	r3, #36	; 0x24
 801eade:	681b      	ldr	r3, [r3, #0]
 801eae0:	4618      	mov	r0, r3
 801eae2:	f7ed ff62 	bl	800c9aa <lwip_htonl>
 801eae6:	4602      	mov	r2, r0
 801eae8:	683b      	ldr	r3, [r7, #0]
 801eaea:	601a      	str	r2, [r3, #0]
	resp->receiveTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 801eaec:	687b      	ldr	r3, [r7, #4]
 801eaee:	3328      	adds	r3, #40	; 0x28
 801eaf0:	681b      	ldr	r3, [r3, #0]
 801eaf2:	4618      	mov	r0, r3
 801eaf4:	f7ed ff59 	bl	800c9aa <lwip_htonl>
 801eaf8:	4602      	mov	r2, r0
 801eafa:	683b      	ldr	r3, [r7, #0]
 801eafc:	609a      	str	r2, [r3, #8]
	memcpy(resp->requestingPortIdentity.clockIdentity, (buf + 44), CLOCK_IDENTITY_LENGTH);
 801eafe:	683b      	ldr	r3, [r7, #0]
 801eb00:	f103 000c 	add.w	r0, r3, #12
 801eb04:	687b      	ldr	r3, [r7, #4]
 801eb06:	332c      	adds	r3, #44	; 0x2c
 801eb08:	2208      	movs	r2, #8
 801eb0a:	4619      	mov	r1, r3
 801eb0c:	f001 fba6 	bl	802025c <memcpy>
	resp->requestingPortIdentity.portNumber = flip16(*(int16_t*)(buf  + 52));
 801eb10:	687b      	ldr	r3, [r7, #4]
 801eb12:	3334      	adds	r3, #52	; 0x34
 801eb14:	f9b3 3000 	ldrsh.w	r3, [r3]
 801eb18:	b29b      	uxth	r3, r3
 801eb1a:	4618      	mov	r0, r3
 801eb1c:	f7ed ff30 	bl	800c980 <lwip_htons>
 801eb20:	4603      	mov	r3, r0
 801eb22:	b21a      	sxth	r2, r3
 801eb24:	683b      	ldr	r3, [r7, #0]
 801eb26:	829a      	strh	r2, [r3, #20]
}
 801eb28:	bf00      	nop
 801eb2a:	3708      	adds	r7, #8
 801eb2c:	46bd      	mov	sp, r7
 801eb2e:	bd80      	pop	{r7, pc}

0801eb30 <msgPackPDelayReq>:

/* Pack PdelayReq message */
void msgPackPDelayReq(const PtpClock *ptpClock, octet_t *buf, const Timestamp *originTimestamp)
{
 801eb30:	b590      	push	{r4, r7, lr}
 801eb32:	b085      	sub	sp, #20
 801eb34:	af00      	add	r7, sp, #0
 801eb36:	60f8      	str	r0, [r7, #12]
 801eb38:	60b9      	str	r1, [r7, #8]
 801eb3a:	607a      	str	r2, [r7, #4]
	/* Changes in header */
	*(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; //RAZ messageType
 801eb3c:	68bb      	ldr	r3, [r7, #8]
 801eb3e:	781b      	ldrb	r3, [r3, #0]
 801eb40:	f023 030f 	bic.w	r3, r3, #15
 801eb44:	b2da      	uxtb	r2, r3
 801eb46:	68bb      	ldr	r3, [r7, #8]
 801eb48:	701a      	strb	r2, [r3, #0]
	*(char*)(buf + 0) = *(char*)(buf + 0) | PDELAY_REQ; //Table 19
 801eb4a:	68bb      	ldr	r3, [r7, #8]
 801eb4c:	781b      	ldrb	r3, [r3, #0]
 801eb4e:	f043 0302 	orr.w	r3, r3, #2
 801eb52:	b2da      	uxtb	r2, r3
 801eb54:	68bb      	ldr	r3, [r7, #8]
 801eb56:	701a      	strb	r2, [r3, #0]
	*(int16_t*)(buf + 2)  = flip16(PDELAY_REQ_LENGTH);
 801eb58:	2036      	movs	r0, #54	; 0x36
 801eb5a:	f7ed ff11 	bl	800c980 <lwip_htons>
 801eb5e:	4603      	mov	r3, r0
 801eb60:	461a      	mov	r2, r3
 801eb62:	68bb      	ldr	r3, [r7, #8]
 801eb64:	3302      	adds	r3, #2
 801eb66:	b212      	sxth	r2, r2
 801eb68:	801a      	strh	r2, [r3, #0]
	*(int16_t*)(buf + 30) = flip16(ptpClock->sentPDelayReqSequenceId);
 801eb6a:	68fb      	ldr	r3, [r7, #12]
 801eb6c:	f9b3 3380 	ldrsh.w	r3, [r3, #896]	; 0x380
 801eb70:	b29b      	uxth	r3, r3
 801eb72:	4618      	mov	r0, r3
 801eb74:	f7ed ff04 	bl	800c980 <lwip_htons>
 801eb78:	4603      	mov	r3, r0
 801eb7a:	461a      	mov	r2, r3
 801eb7c:	68bb      	ldr	r3, [r7, #8]
 801eb7e:	331e      	adds	r3, #30
 801eb80:	b212      	sxth	r2, r2
 801eb82:	801a      	strh	r2, [r3, #0]
	*(uint8_t*)(buf + 32) = CTRL_OTHER; //Table 23
 801eb84:	68bb      	ldr	r3, [r7, #8]
 801eb86:	3320      	adds	r3, #32
 801eb88:	2205      	movs	r2, #5
 801eb8a:	701a      	strb	r2, [r3, #0]
	*(int8_t*)(buf + 33) = 0x7F; //Table 24
 801eb8c:	68bb      	ldr	r3, [r7, #8]
 801eb8e:	3321      	adds	r3, #33	; 0x21
 801eb90:	227f      	movs	r2, #127	; 0x7f
 801eb92:	701a      	strb	r2, [r3, #0]
	memset((buf + 8), 0, 8);
 801eb94:	68bb      	ldr	r3, [r7, #8]
 801eb96:	3308      	adds	r3, #8
 801eb98:	2208      	movs	r2, #8
 801eb9a:	2100      	movs	r1, #0
 801eb9c:	4618      	mov	r0, r3
 801eb9e:	f001 fb6b 	bl	8020278 <memset>

	/* Pdelay_req message */
	*(int16_t*)(buf + 34) = flip16(originTimestamp->secondsField.msb);
 801eba2:	687b      	ldr	r3, [r7, #4]
 801eba4:	889b      	ldrh	r3, [r3, #4]
 801eba6:	4618      	mov	r0, r3
 801eba8:	f7ed feea 	bl	800c980 <lwip_htons>
 801ebac:	4603      	mov	r3, r0
 801ebae:	461a      	mov	r2, r3
 801ebb0:	68bb      	ldr	r3, [r7, #8]
 801ebb2:	3322      	adds	r3, #34	; 0x22
 801ebb4:	b212      	sxth	r2, r2
 801ebb6:	801a      	strh	r2, [r3, #0]
	*(uint32_t*)(buf + 36) = flip32(originTimestamp->secondsField.lsb);
 801ebb8:	687b      	ldr	r3, [r7, #4]
 801ebba:	681a      	ldr	r2, [r3, #0]
 801ebbc:	68bb      	ldr	r3, [r7, #8]
 801ebbe:	f103 0424 	add.w	r4, r3, #36	; 0x24
 801ebc2:	4610      	mov	r0, r2
 801ebc4:	f7ed fef1 	bl	800c9aa <lwip_htonl>
 801ebc8:	4603      	mov	r3, r0
 801ebca:	6023      	str	r3, [r4, #0]
	*(uint32_t*)(buf + 40) = flip32(originTimestamp->nanosecondsField);
 801ebcc:	687b      	ldr	r3, [r7, #4]
 801ebce:	689a      	ldr	r2, [r3, #8]
 801ebd0:	68bb      	ldr	r3, [r7, #8]
 801ebd2:	f103 0428 	add.w	r4, r3, #40	; 0x28
 801ebd6:	4610      	mov	r0, r2
 801ebd8:	f7ed fee7 	bl	800c9aa <lwip_htonl>
 801ebdc:	4603      	mov	r3, r0
 801ebde:	6023      	str	r3, [r4, #0]

	memset((buf + 44), 0, 10); // RAZ reserved octets
 801ebe0:	68bb      	ldr	r3, [r7, #8]
 801ebe2:	332c      	adds	r3, #44	; 0x2c
 801ebe4:	220a      	movs	r2, #10
 801ebe6:	2100      	movs	r1, #0
 801ebe8:	4618      	mov	r0, r3
 801ebea:	f001 fb45 	bl	8020278 <memset>
}
 801ebee:	bf00      	nop
 801ebf0:	3714      	adds	r7, #20
 801ebf2:	46bd      	mov	sp, r7
 801ebf4:	bd90      	pop	{r4, r7, pc}

0801ebf6 <msgPackPDelayResp>:
	pdelayreq->originTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
}

/* Pack PdelayResp message */
void msgPackPDelayResp(octet_t *buf, const MsgHeader *header, const Timestamp *requestReceiptTimestamp)
{
 801ebf6:	b590      	push	{r4, r7, lr}
 801ebf8:	b085      	sub	sp, #20
 801ebfa:	af00      	add	r7, sp, #0
 801ebfc:	60f8      	str	r0, [r7, #12]
 801ebfe:	60b9      	str	r1, [r7, #8]
 801ec00:	607a      	str	r2, [r7, #4]
	/* Changes in header */
	*(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; //RAZ messageType
 801ec02:	68fb      	ldr	r3, [r7, #12]
 801ec04:	781b      	ldrb	r3, [r3, #0]
 801ec06:	f023 030f 	bic.w	r3, r3, #15
 801ec0a:	b2da      	uxtb	r2, r3
 801ec0c:	68fb      	ldr	r3, [r7, #12]
 801ec0e:	701a      	strb	r2, [r3, #0]
	*(char*)(buf + 0) = *(char*)(buf + 0) | PDELAY_RESP; //Table 19
 801ec10:	68fb      	ldr	r3, [r7, #12]
 801ec12:	781b      	ldrb	r3, [r3, #0]
 801ec14:	f043 0303 	orr.w	r3, r3, #3
 801ec18:	b2da      	uxtb	r2, r3
 801ec1a:	68fb      	ldr	r3, [r7, #12]
 801ec1c:	701a      	strb	r2, [r3, #0]
	*(int16_t*)(buf + 2)  = flip16(PDELAY_RESP_LENGTH);
 801ec1e:	2036      	movs	r0, #54	; 0x36
 801ec20:	f7ed feae 	bl	800c980 <lwip_htons>
 801ec24:	4603      	mov	r3, r0
 801ec26:	461a      	mov	r2, r3
 801ec28:	68fb      	ldr	r3, [r7, #12]
 801ec2a:	3302      	adds	r3, #2
 801ec2c:	b212      	sxth	r2, r2
 801ec2e:	801a      	strh	r2, [r3, #0]
	/* *(uint8_t*)(buf+4) = header->domainNumber; */ /* TODO: Why? */
	memset((buf + 8), 0, 8);
 801ec30:	68fb      	ldr	r3, [r7, #12]
 801ec32:	3308      	adds	r3, #8
 801ec34:	2208      	movs	r2, #8
 801ec36:	2100      	movs	r1, #0
 801ec38:	4618      	mov	r0, r3
 801ec3a:	f001 fb1d 	bl	8020278 <memset>
	*(int16_t*)(buf + 30) = flip16(header->sequenceId);
 801ec3e:	68bb      	ldr	r3, [r7, #8]
 801ec40:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 801ec44:	b29b      	uxth	r3, r3
 801ec46:	4618      	mov	r0, r3
 801ec48:	f7ed fe9a 	bl	800c980 <lwip_htons>
 801ec4c:	4603      	mov	r3, r0
 801ec4e:	461a      	mov	r2, r3
 801ec50:	68fb      	ldr	r3, [r7, #12]
 801ec52:	331e      	adds	r3, #30
 801ec54:	b212      	sxth	r2, r2
 801ec56:	801a      	strh	r2, [r3, #0]
	*(uint8_t*)(buf + 32) = CTRL_OTHER; //Table 23
 801ec58:	68fb      	ldr	r3, [r7, #12]
 801ec5a:	3320      	adds	r3, #32
 801ec5c:	2205      	movs	r2, #5
 801ec5e:	701a      	strb	r2, [r3, #0]
	*(int8_t*)(buf + 33) = 0x7F; //Table 24
 801ec60:	68fb      	ldr	r3, [r7, #12]
 801ec62:	3321      	adds	r3, #33	; 0x21
 801ec64:	227f      	movs	r2, #127	; 0x7f
 801ec66:	701a      	strb	r2, [r3, #0]

	/* Pdelay_resp message */
	*(int16_t*)(buf + 34) = flip16(requestReceiptTimestamp->secondsField.msb);
 801ec68:	687b      	ldr	r3, [r7, #4]
 801ec6a:	889b      	ldrh	r3, [r3, #4]
 801ec6c:	4618      	mov	r0, r3
 801ec6e:	f7ed fe87 	bl	800c980 <lwip_htons>
 801ec72:	4603      	mov	r3, r0
 801ec74:	461a      	mov	r2, r3
 801ec76:	68fb      	ldr	r3, [r7, #12]
 801ec78:	3322      	adds	r3, #34	; 0x22
 801ec7a:	b212      	sxth	r2, r2
 801ec7c:	801a      	strh	r2, [r3, #0]
	*(uint32_t*)(buf + 36) = flip32(requestReceiptTimestamp->secondsField.lsb);
 801ec7e:	687b      	ldr	r3, [r7, #4]
 801ec80:	681a      	ldr	r2, [r3, #0]
 801ec82:	68fb      	ldr	r3, [r7, #12]
 801ec84:	f103 0424 	add.w	r4, r3, #36	; 0x24
 801ec88:	4610      	mov	r0, r2
 801ec8a:	f7ed fe8e 	bl	800c9aa <lwip_htonl>
 801ec8e:	4603      	mov	r3, r0
 801ec90:	6023      	str	r3, [r4, #0]
	*(uint32_t*)(buf + 40) = flip32(requestReceiptTimestamp->nanosecondsField);
 801ec92:	687b      	ldr	r3, [r7, #4]
 801ec94:	689a      	ldr	r2, [r3, #8]
 801ec96:	68fb      	ldr	r3, [r7, #12]
 801ec98:	f103 0428 	add.w	r4, r3, #40	; 0x28
 801ec9c:	4610      	mov	r0, r2
 801ec9e:	f7ed fe84 	bl	800c9aa <lwip_htonl>
 801eca2:	4603      	mov	r3, r0
 801eca4:	6023      	str	r3, [r4, #0]
	memcpy((buf + 44), header->sourcePortIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 801eca6:	68fb      	ldr	r3, [r7, #12]
 801eca8:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 801ecac:	68bb      	ldr	r3, [r7, #8]
 801ecae:	3318      	adds	r3, #24
 801ecb0:	2208      	movs	r2, #8
 801ecb2:	4619      	mov	r1, r3
 801ecb4:	f001 fad2 	bl	802025c <memcpy>
	*(int16_t*)(buf + 52) = flip16(header->sourcePortIdentity.portNumber);
 801ecb8:	68bb      	ldr	r3, [r7, #8]
 801ecba:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801ecbe:	b29b      	uxth	r3, r3
 801ecc0:	4618      	mov	r0, r3
 801ecc2:	f7ed fe5d 	bl	800c980 <lwip_htons>
 801ecc6:	4603      	mov	r3, r0
 801ecc8:	461a      	mov	r2, r3
 801ecca:	68fb      	ldr	r3, [r7, #12]
 801eccc:	3334      	adds	r3, #52	; 0x34
 801ecce:	b212      	sxth	r2, r2
 801ecd0:	801a      	strh	r2, [r3, #0]

}
 801ecd2:	bf00      	nop
 801ecd4:	3714      	adds	r7, #20
 801ecd6:	46bd      	mov	sp, r7
 801ecd8:	bd90      	pop	{r4, r7, pc}

0801ecda <msgUnpackPDelayResp>:

/* Unpack PdelayResp message */
void msgUnpackPDelayResp(const octet_t *buf, MsgPDelayResp *presp)
{
 801ecda:	b580      	push	{r7, lr}
 801ecdc:	b082      	sub	sp, #8
 801ecde:	af00      	add	r7, sp, #0
 801ece0:	6078      	str	r0, [r7, #4]
 801ece2:	6039      	str	r1, [r7, #0]
	presp->requestReceiptTimestamp.secondsField.msb = flip16(*(int16_t*)(buf  + 34));
 801ece4:	687b      	ldr	r3, [r7, #4]
 801ece6:	3322      	adds	r3, #34	; 0x22
 801ece8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ecec:	b29b      	uxth	r3, r3
 801ecee:	4618      	mov	r0, r3
 801ecf0:	f7ed fe46 	bl	800c980 <lwip_htons>
 801ecf4:	4603      	mov	r3, r0
 801ecf6:	461a      	mov	r2, r3
 801ecf8:	683b      	ldr	r3, [r7, #0]
 801ecfa:	809a      	strh	r2, [r3, #4]
	presp->requestReceiptTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 801ecfc:	687b      	ldr	r3, [r7, #4]
 801ecfe:	3324      	adds	r3, #36	; 0x24
 801ed00:	681b      	ldr	r3, [r3, #0]
 801ed02:	4618      	mov	r0, r3
 801ed04:	f7ed fe51 	bl	800c9aa <lwip_htonl>
 801ed08:	4602      	mov	r2, r0
 801ed0a:	683b      	ldr	r3, [r7, #0]
 801ed0c:	601a      	str	r2, [r3, #0]
	presp->requestReceiptTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 801ed0e:	687b      	ldr	r3, [r7, #4]
 801ed10:	3328      	adds	r3, #40	; 0x28
 801ed12:	681b      	ldr	r3, [r3, #0]
 801ed14:	4618      	mov	r0, r3
 801ed16:	f7ed fe48 	bl	800c9aa <lwip_htonl>
 801ed1a:	4602      	mov	r2, r0
 801ed1c:	683b      	ldr	r3, [r7, #0]
 801ed1e:	609a      	str	r2, [r3, #8]
	memcpy(presp->requestingPortIdentity.clockIdentity, (buf + 44), CLOCK_IDENTITY_LENGTH);
 801ed20:	683b      	ldr	r3, [r7, #0]
 801ed22:	f103 000c 	add.w	r0, r3, #12
 801ed26:	687b      	ldr	r3, [r7, #4]
 801ed28:	332c      	adds	r3, #44	; 0x2c
 801ed2a:	2208      	movs	r2, #8
 801ed2c:	4619      	mov	r1, r3
 801ed2e:	f001 fa95 	bl	802025c <memcpy>
	presp->requestingPortIdentity.portNumber = flip16(*(int16_t*)(buf + 52));
 801ed32:	687b      	ldr	r3, [r7, #4]
 801ed34:	3334      	adds	r3, #52	; 0x34
 801ed36:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ed3a:	b29b      	uxth	r3, r3
 801ed3c:	4618      	mov	r0, r3
 801ed3e:	f7ed fe1f 	bl	800c980 <lwip_htons>
 801ed42:	4603      	mov	r3, r0
 801ed44:	b21a      	sxth	r2, r3
 801ed46:	683b      	ldr	r3, [r7, #0]
 801ed48:	829a      	strh	r2, [r3, #20]
}
 801ed4a:	bf00      	nop
 801ed4c:	3708      	adds	r7, #8
 801ed4e:	46bd      	mov	sp, r7
 801ed50:	bd80      	pop	{r7, pc}

0801ed52 <msgPackPDelayRespFollowUp>:

/* Pack PdelayRespfollowup message */
void msgPackPDelayRespFollowUp(octet_t *buf, const MsgHeader *header, const Timestamp *responseOriginTimestamp)
{
 801ed52:	b590      	push	{r4, r7, lr}
 801ed54:	b085      	sub	sp, #20
 801ed56:	af00      	add	r7, sp, #0
 801ed58:	60f8      	str	r0, [r7, #12]
 801ed5a:	60b9      	str	r1, [r7, #8]
 801ed5c:	607a      	str	r2, [r7, #4]
	/* Changes in header */
	*(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; //RAZ messageType
 801ed5e:	68fb      	ldr	r3, [r7, #12]
 801ed60:	781b      	ldrb	r3, [r3, #0]
 801ed62:	f023 030f 	bic.w	r3, r3, #15
 801ed66:	b2da      	uxtb	r2, r3
 801ed68:	68fb      	ldr	r3, [r7, #12]
 801ed6a:	701a      	strb	r2, [r3, #0]
	*(char*)(buf + 0) = *(char*)(buf + 0) | PDELAY_RESP_FOLLOW_UP; //Table 19
 801ed6c:	68fb      	ldr	r3, [r7, #12]
 801ed6e:	781b      	ldrb	r3, [r3, #0]
 801ed70:	f043 030a 	orr.w	r3, r3, #10
 801ed74:	b2da      	uxtb	r2, r3
 801ed76:	68fb      	ldr	r3, [r7, #12]
 801ed78:	701a      	strb	r2, [r3, #0]
	*(int16_t*)(buf + 2)  = flip16(PDELAY_RESP_FOLLOW_UP_LENGTH);
 801ed7a:	2036      	movs	r0, #54	; 0x36
 801ed7c:	f7ed fe00 	bl	800c980 <lwip_htons>
 801ed80:	4603      	mov	r3, r0
 801ed82:	461a      	mov	r2, r3
 801ed84:	68fb      	ldr	r3, [r7, #12]
 801ed86:	3302      	adds	r3, #2
 801ed88:	b212      	sxth	r2, r2
 801ed8a:	801a      	strh	r2, [r3, #0]
	*(int16_t*)(buf + 30) = flip16(header->sequenceId);
 801ed8c:	68bb      	ldr	r3, [r7, #8]
 801ed8e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 801ed92:	b29b      	uxth	r3, r3
 801ed94:	4618      	mov	r0, r3
 801ed96:	f7ed fdf3 	bl	800c980 <lwip_htons>
 801ed9a:	4603      	mov	r3, r0
 801ed9c:	461a      	mov	r2, r3
 801ed9e:	68fb      	ldr	r3, [r7, #12]
 801eda0:	331e      	adds	r3, #30
 801eda2:	b212      	sxth	r2, r2
 801eda4:	801a      	strh	r2, [r3, #0]
	*(uint8_t*)(buf + 32) = CTRL_OTHER; //Table 23
 801eda6:	68fb      	ldr	r3, [r7, #12]
 801eda8:	3320      	adds	r3, #32
 801edaa:	2205      	movs	r2, #5
 801edac:	701a      	strb	r2, [r3, #0]
	*(int8_t*)(buf + 33) = 0x7F; //Table 24
 801edae:	68fb      	ldr	r3, [r7, #12]
 801edb0:	3321      	adds	r3, #33	; 0x21
 801edb2:	227f      	movs	r2, #127	; 0x7f
 801edb4:	701a      	strb	r2, [r3, #0]

	/* Copy correctionField of  PdelayReqMessage */
	*(int32_t*)(buf + 8) = flip32(header->correctionfield >> 32);
 801edb6:	68bb      	ldr	r3, [r7, #8]
 801edb8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 801edbc:	f04f 0200 	mov.w	r2, #0
 801edc0:	f04f 0300 	mov.w	r3, #0
 801edc4:	000a      	movs	r2, r1
 801edc6:	17cb      	asrs	r3, r1, #31
 801edc8:	4613      	mov	r3, r2
 801edca:	4618      	mov	r0, r3
 801edcc:	f7ed fded 	bl	800c9aa <lwip_htonl>
 801edd0:	4602      	mov	r2, r0
 801edd2:	68fb      	ldr	r3, [r7, #12]
 801edd4:	3308      	adds	r3, #8
 801edd6:	601a      	str	r2, [r3, #0]
	*(int32_t*)(buf + 12) = flip32((int32_t)header->correctionfield);
 801edd8:	68bb      	ldr	r3, [r7, #8]
 801edda:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801edde:	4613      	mov	r3, r2
 801ede0:	4618      	mov	r0, r3
 801ede2:	f7ed fde2 	bl	800c9aa <lwip_htonl>
 801ede6:	4602      	mov	r2, r0
 801ede8:	68fb      	ldr	r3, [r7, #12]
 801edea:	330c      	adds	r3, #12
 801edec:	601a      	str	r2, [r3, #0]

	/* Pdelay_resp_follow_up message */
	*(int16_t*)(buf + 34) = flip16(responseOriginTimestamp->secondsField.msb);
 801edee:	687b      	ldr	r3, [r7, #4]
 801edf0:	889b      	ldrh	r3, [r3, #4]
 801edf2:	4618      	mov	r0, r3
 801edf4:	f7ed fdc4 	bl	800c980 <lwip_htons>
 801edf8:	4603      	mov	r3, r0
 801edfa:	461a      	mov	r2, r3
 801edfc:	68fb      	ldr	r3, [r7, #12]
 801edfe:	3322      	adds	r3, #34	; 0x22
 801ee00:	b212      	sxth	r2, r2
 801ee02:	801a      	strh	r2, [r3, #0]
	*(uint32_t*)(buf + 36) = flip32(responseOriginTimestamp->secondsField.lsb);
 801ee04:	687b      	ldr	r3, [r7, #4]
 801ee06:	681a      	ldr	r2, [r3, #0]
 801ee08:	68fb      	ldr	r3, [r7, #12]
 801ee0a:	f103 0424 	add.w	r4, r3, #36	; 0x24
 801ee0e:	4610      	mov	r0, r2
 801ee10:	f7ed fdcb 	bl	800c9aa <lwip_htonl>
 801ee14:	4603      	mov	r3, r0
 801ee16:	6023      	str	r3, [r4, #0]
	*(uint32_t*)(buf + 40) = flip32(responseOriginTimestamp->nanosecondsField);
 801ee18:	687b      	ldr	r3, [r7, #4]
 801ee1a:	689a      	ldr	r2, [r3, #8]
 801ee1c:	68fb      	ldr	r3, [r7, #12]
 801ee1e:	f103 0428 	add.w	r4, r3, #40	; 0x28
 801ee22:	4610      	mov	r0, r2
 801ee24:	f7ed fdc1 	bl	800c9aa <lwip_htonl>
 801ee28:	4603      	mov	r3, r0
 801ee2a:	6023      	str	r3, [r4, #0]
	memcpy((buf + 44), header->sourcePortIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 801ee2c:	68fb      	ldr	r3, [r7, #12]
 801ee2e:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 801ee32:	68bb      	ldr	r3, [r7, #8]
 801ee34:	3318      	adds	r3, #24
 801ee36:	2208      	movs	r2, #8
 801ee38:	4619      	mov	r1, r3
 801ee3a:	f001 fa0f 	bl	802025c <memcpy>
	*(int16_t*)(buf + 52) = flip16(header->sourcePortIdentity.portNumber);
 801ee3e:	68bb      	ldr	r3, [r7, #8]
 801ee40:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801ee44:	b29b      	uxth	r3, r3
 801ee46:	4618      	mov	r0, r3
 801ee48:	f7ed fd9a 	bl	800c980 <lwip_htons>
 801ee4c:	4603      	mov	r3, r0
 801ee4e:	461a      	mov	r2, r3
 801ee50:	68fb      	ldr	r3, [r7, #12]
 801ee52:	3334      	adds	r3, #52	; 0x34
 801ee54:	b212      	sxth	r2, r2
 801ee56:	801a      	strh	r2, [r3, #0]
}
 801ee58:	bf00      	nop
 801ee5a:	3714      	adds	r7, #20
 801ee5c:	46bd      	mov	sp, r7
 801ee5e:	bd90      	pop	{r4, r7, pc}

0801ee60 <msgUnpackPDelayRespFollowUp>:

/* Unpack PdelayResp message */
void msgUnpackPDelayRespFollowUp(const octet_t *buf, MsgPDelayRespFollowUp *prespfollow)
{
 801ee60:	b580      	push	{r7, lr}
 801ee62:	b082      	sub	sp, #8
 801ee64:	af00      	add	r7, sp, #0
 801ee66:	6078      	str	r0, [r7, #4]
 801ee68:	6039      	str	r1, [r7, #0]
	prespfollow->responseOriginTimestamp.secondsField.msb = flip16(*(int16_t*)(buf  + 34));
 801ee6a:	687b      	ldr	r3, [r7, #4]
 801ee6c:	3322      	adds	r3, #34	; 0x22
 801ee6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ee72:	b29b      	uxth	r3, r3
 801ee74:	4618      	mov	r0, r3
 801ee76:	f7ed fd83 	bl	800c980 <lwip_htons>
 801ee7a:	4603      	mov	r3, r0
 801ee7c:	461a      	mov	r2, r3
 801ee7e:	683b      	ldr	r3, [r7, #0]
 801ee80:	809a      	strh	r2, [r3, #4]
	prespfollow->responseOriginTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 801ee82:	687b      	ldr	r3, [r7, #4]
 801ee84:	3324      	adds	r3, #36	; 0x24
 801ee86:	681b      	ldr	r3, [r3, #0]
 801ee88:	4618      	mov	r0, r3
 801ee8a:	f7ed fd8e 	bl	800c9aa <lwip_htonl>
 801ee8e:	4602      	mov	r2, r0
 801ee90:	683b      	ldr	r3, [r7, #0]
 801ee92:	601a      	str	r2, [r3, #0]
	prespfollow->responseOriginTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 801ee94:	687b      	ldr	r3, [r7, #4]
 801ee96:	3328      	adds	r3, #40	; 0x28
 801ee98:	681b      	ldr	r3, [r3, #0]
 801ee9a:	4618      	mov	r0, r3
 801ee9c:	f7ed fd85 	bl	800c9aa <lwip_htonl>
 801eea0:	4602      	mov	r2, r0
 801eea2:	683b      	ldr	r3, [r7, #0]
 801eea4:	609a      	str	r2, [r3, #8]
	memcpy(prespfollow->requestingPortIdentity.clockIdentity, (buf + 44), CLOCK_IDENTITY_LENGTH);
 801eea6:	683b      	ldr	r3, [r7, #0]
 801eea8:	f103 000c 	add.w	r0, r3, #12
 801eeac:	687b      	ldr	r3, [r7, #4]
 801eeae:	332c      	adds	r3, #44	; 0x2c
 801eeb0:	2208      	movs	r2, #8
 801eeb2:	4619      	mov	r1, r3
 801eeb4:	f001 f9d2 	bl	802025c <memcpy>
	prespfollow->requestingPortIdentity.portNumber = flip16(*(int16_t*)(buf + 52));
 801eeb8:	687b      	ldr	r3, [r7, #4]
 801eeba:	3334      	adds	r3, #52	; 0x34
 801eebc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801eec0:	b29b      	uxth	r3, r3
 801eec2:	4618      	mov	r0, r3
 801eec4:	f7ed fd5c 	bl	800c980 <lwip_htons>
 801eec8:	4603      	mov	r3, r0
 801eeca:	b21a      	sxth	r2, r3
 801eecc:	683b      	ldr	r3, [r7, #0]
 801eece:	829a      	strh	r2, [r3, #20]
}
 801eed0:	bf00      	nop
 801eed2:	3708      	adds	r7, #8
 801eed4:	46bd      	mov	sp, r7
 801eed6:	bd80      	pop	{r7, pc}

0801eed8 <netQInit>:

#include "../ptpd.h"

/* Initialize network queue. */
static void netQInit(BufQueue *queue)
{
 801eed8:	b480      	push	{r7}
 801eeda:	b083      	sub	sp, #12
 801eedc:	af00      	add	r7, sp, #0
 801eede:	6078      	str	r0, [r7, #4]
	queue->head = 0;
 801eee0:	687b      	ldr	r3, [r7, #4]
 801eee2:	2200      	movs	r2, #0
 801eee4:	821a      	strh	r2, [r3, #16]
	queue->tail = 0;
 801eee6:	687b      	ldr	r3, [r7, #4]
 801eee8:	2200      	movs	r2, #0
 801eeea:	825a      	strh	r2, [r3, #18]
	//sys_mutex_new(&queue->mutex);
}
 801eeec:	bf00      	nop
 801eeee:	370c      	adds	r7, #12
 801eef0:	46bd      	mov	sp, r7
 801eef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eef6:	4770      	bx	lr

0801eef8 <netQPut>:

/* Put data to the network queue. */
static bool netQPut(BufQueue *queue, void *pbuf)
{
 801eef8:	b480      	push	{r7}
 801eefa:	b085      	sub	sp, #20
 801eefc:	af00      	add	r7, sp, #0
 801eefe:	6078      	str	r0, [r7, #4]
 801ef00:	6039      	str	r1, [r7, #0]
	bool retval = FALSE;
 801ef02:	2300      	movs	r3, #0
 801ef04:	73fb      	strb	r3, [r7, #15]

	//sys_mutex_lock(&queue->mutex);

	// Is there room on the queue for the buffer?
	if (((queue->head + 1) & PBUF_QUEUE_MASK) != queue->tail)
 801ef06:	687b      	ldr	r3, [r7, #4]
 801ef08:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801ef0c:	3301      	adds	r3, #1
 801ef0e:	f003 0303 	and.w	r3, r3, #3
 801ef12:	687a      	ldr	r2, [r7, #4]
 801ef14:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 801ef18:	4293      	cmp	r3, r2
 801ef1a:	d015      	beq.n	801ef48 <netQPut+0x50>
	{
		// Place the buffer in the queue.
		queue->head = (queue->head + 1) & PBUF_QUEUE_MASK;
 801ef1c:	687b      	ldr	r3, [r7, #4]
 801ef1e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801ef22:	b29b      	uxth	r3, r3
 801ef24:	3301      	adds	r3, #1
 801ef26:	b29b      	uxth	r3, r3
 801ef28:	b21b      	sxth	r3, r3
 801ef2a:	f003 0303 	and.w	r3, r3, #3
 801ef2e:	b21a      	sxth	r2, r3
 801ef30:	687b      	ldr	r3, [r7, #4]
 801ef32:	821a      	strh	r2, [r3, #16]
		queue->pbuf[queue->head] = pbuf;
 801ef34:	687b      	ldr	r3, [r7, #4]
 801ef36:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801ef3a:	4619      	mov	r1, r3
 801ef3c:	687b      	ldr	r3, [r7, #4]
 801ef3e:	683a      	ldr	r2, [r7, #0]
 801ef40:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		retval = TRUE;
 801ef44:	2301      	movs	r3, #1
 801ef46:	73fb      	strb	r3, [r7, #15]
	}

	//sys_mutex_unlock(&queue->mutex);

	return retval;
 801ef48:	7bfb      	ldrb	r3, [r7, #15]
}
 801ef4a:	4618      	mov	r0, r3
 801ef4c:	3714      	adds	r7, #20
 801ef4e:	46bd      	mov	sp, r7
 801ef50:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef54:	4770      	bx	lr

0801ef56 <netQGet>:

/* Get data from the network queue. */
static void *netQGet(BufQueue *queue)
{
 801ef56:	b480      	push	{r7}
 801ef58:	b085      	sub	sp, #20
 801ef5a:	af00      	add	r7, sp, #0
 801ef5c:	6078      	str	r0, [r7, #4]
	void *pbuf = NULL;
 801ef5e:	2300      	movs	r3, #0
 801ef60:	60fb      	str	r3, [r7, #12]

	//sys_mutex_lock(&queue->mutex);

	// Is there a buffer on the queue?
	if (queue->tail != queue->head)
 801ef62:	687b      	ldr	r3, [r7, #4]
 801ef64:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 801ef68:	687b      	ldr	r3, [r7, #4]
 801ef6a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801ef6e:	429a      	cmp	r2, r3
 801ef70:	d013      	beq.n	801ef9a <netQGet+0x44>
	{
		// Get the buffer from the queue.
		queue->tail = (queue->tail + 1) & PBUF_QUEUE_MASK;
 801ef72:	687b      	ldr	r3, [r7, #4]
 801ef74:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801ef78:	b29b      	uxth	r3, r3
 801ef7a:	3301      	adds	r3, #1
 801ef7c:	b29b      	uxth	r3, r3
 801ef7e:	b21b      	sxth	r3, r3
 801ef80:	f003 0303 	and.w	r3, r3, #3
 801ef84:	b21a      	sxth	r2, r3
 801ef86:	687b      	ldr	r3, [r7, #4]
 801ef88:	825a      	strh	r2, [r3, #18]
		pbuf = queue->pbuf[queue->tail];
 801ef8a:	687b      	ldr	r3, [r7, #4]
 801ef8c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801ef90:	461a      	mov	r2, r3
 801ef92:	687b      	ldr	r3, [r7, #4]
 801ef94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ef98:	60fb      	str	r3, [r7, #12]
	}

	//sys_mutex_unlock(&queue->mutex);

	return pbuf;
 801ef9a:	68fb      	ldr	r3, [r7, #12]
}
 801ef9c:	4618      	mov	r0, r3
 801ef9e:	3714      	adds	r7, #20
 801efa0:	46bd      	mov	sp, r7
 801efa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801efa6:	4770      	bx	lr

0801efa8 <netQEmpty>:

/* Free any remaining pbufs in the queue. */
static void netQEmpty(BufQueue *queue)
{
 801efa8:	b580      	push	{r7, lr}
 801efaa:	b082      	sub	sp, #8
 801efac:	af00      	add	r7, sp, #0
 801efae:	6078      	str	r0, [r7, #4]
	//sys_mutex_lock(&queue->mutex);

	// Free each remaining buffer in the queue.
	while (queue->tail != queue->head)
 801efb0:	e015      	b.n	801efde <netQEmpty+0x36>
	{
		// Get the buffer from the queue.
		queue->tail = (queue->tail + 1) & PBUF_QUEUE_MASK;
 801efb2:	687b      	ldr	r3, [r7, #4]
 801efb4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801efb8:	b29b      	uxth	r3, r3
 801efba:	3301      	adds	r3, #1
 801efbc:	b29b      	uxth	r3, r3
 801efbe:	b21b      	sxth	r3, r3
 801efc0:	f003 0303 	and.w	r3, r3, #3
 801efc4:	b21a      	sxth	r2, r3
 801efc6:	687b      	ldr	r3, [r7, #4]
 801efc8:	825a      	strh	r2, [r3, #18]
		pbuf_free(queue->pbuf[queue->tail]);
 801efca:	687b      	ldr	r3, [r7, #4]
 801efcc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801efd0:	461a      	mov	r2, r3
 801efd2:	687b      	ldr	r3, [r7, #4]
 801efd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801efd8:	4618      	mov	r0, r3
 801efda:	f7ef fe59 	bl	800ec90 <pbuf_free>
	while (queue->tail != queue->head)
 801efde:	687b      	ldr	r3, [r7, #4]
 801efe0:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 801efe4:	687b      	ldr	r3, [r7, #4]
 801efe6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801efea:	429a      	cmp	r2, r3
 801efec:	d1e1      	bne.n	801efb2 <netQEmpty+0xa>
	}
	
	//sys_mutex_unlock(&queue->mutex);
}
 801efee:	bf00      	nop
 801eff0:	bf00      	nop
 801eff2:	3708      	adds	r7, #8
 801eff4:	46bd      	mov	sp, r7
 801eff6:	bd80      	pop	{r7, pc}

0801eff8 <netQCheck>:

/* Check if something is in the queue */
static bool netQCheck(BufQueue  *queue)
{
 801eff8:	b480      	push	{r7}
 801effa:	b085      	sub	sp, #20
 801effc:	af00      	add	r7, sp, #0
 801effe:	6078      	str	r0, [r7, #4]
	bool  retval = FALSE;
 801f000:	2300      	movs	r3, #0
 801f002:	73fb      	strb	r3, [r7, #15]

	//sys_mutex_lock(&queue->mutex);

	if (queue->tail != queue->head) retval = TRUE;
 801f004:	687b      	ldr	r3, [r7, #4]
 801f006:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 801f00a:	687b      	ldr	r3, [r7, #4]
 801f00c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801f010:	429a      	cmp	r2, r3
 801f012:	d001      	beq.n	801f018 <netQCheck+0x20>
 801f014:	2301      	movs	r3, #1
 801f016:	73fb      	strb	r3, [r7, #15]

	//sys_mutex_unlock(&queue->mutex);

	return retval;
 801f018:	7bfb      	ldrb	r3, [r7, #15]
}
 801f01a:	4618      	mov	r0, r3
 801f01c:	3714      	adds	r7, #20
 801f01e:	46bd      	mov	sp, r7
 801f020:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f024:	4770      	bx	lr
	...

0801f028 <netShutdown>:

/* Shut down  the UDP and network stuff */
bool netShutdown(NetPath *netPath)
{
 801f028:	b580      	push	{r7, lr}
 801f02a:	b084      	sub	sp, #16
 801f02c:	af00      	add	r7, sp, #0
 801f02e:	6078      	str	r0, [r7, #4]
	ip4_addr_t multicastAaddr;

	DBG("netShutdown\n");

	/* leave multicast group */
	multicastAaddr.addr = netPath->multicastAddr;
 801f030:	687b      	ldr	r3, [r7, #4]
 801f032:	681b      	ldr	r3, [r3, #0]
 801f034:	60fb      	str	r3, [r7, #12]
	igmp_leavegroup(IP_ADDR_ANY, &multicastAaddr);
 801f036:	f107 030c 	add.w	r3, r7, #12
 801f03a:	4619      	mov	r1, r3
 801f03c:	4817      	ldr	r0, [pc, #92]	; (801f09c <netShutdown+0x74>)
 801f03e:	f7fa fcf1 	bl	8019a24 <igmp_leavegroup>

	/* Disconnect and close the Event UDP interface */
	if (netPath->eventPcb)
 801f042:	687b      	ldr	r3, [r7, #4]
 801f044:	68db      	ldr	r3, [r3, #12]
 801f046:	2b00      	cmp	r3, #0
 801f048:	d00c      	beq.n	801f064 <netShutdown+0x3c>
	{
		udp_disconnect(netPath->eventPcb);
 801f04a:	687b      	ldr	r3, [r7, #4]
 801f04c:	68db      	ldr	r3, [r3, #12]
 801f04e:	4618      	mov	r0, r3
 801f050:	f7f6 fc92 	bl	8015978 <udp_disconnect>
		udp_remove(netPath->eventPcb);
 801f054:	687b      	ldr	r3, [r7, #4]
 801f056:	68db      	ldr	r3, [r3, #12]
 801f058:	4618      	mov	r0, r3
 801f05a:	f7f6 fcd5 	bl	8015a08 <udp_remove>
		netPath->eventPcb = NULL;
 801f05e:	687b      	ldr	r3, [r7, #4]
 801f060:	2200      	movs	r2, #0
 801f062:	60da      	str	r2, [r3, #12]
	}

	/* Disconnect and close the General UDP interface */
	if (netPath->generalPcb)
 801f064:	687b      	ldr	r3, [r7, #4]
 801f066:	691b      	ldr	r3, [r3, #16]
 801f068:	2b00      	cmp	r3, #0
 801f06a:	d00c      	beq.n	801f086 <netShutdown+0x5e>
	{
		udp_disconnect(netPath->generalPcb);
 801f06c:	687b      	ldr	r3, [r7, #4]
 801f06e:	691b      	ldr	r3, [r3, #16]
 801f070:	4618      	mov	r0, r3
 801f072:	f7f6 fc81 	bl	8015978 <udp_disconnect>
		udp_remove(netPath->generalPcb);
 801f076:	687b      	ldr	r3, [r7, #4]
 801f078:	691b      	ldr	r3, [r3, #16]
 801f07a:	4618      	mov	r0, r3
 801f07c:	f7f6 fcc4 	bl	8015a08 <udp_remove>
		netPath->generalPcb = NULL;
 801f080:	687b      	ldr	r3, [r7, #4]
 801f082:	2200      	movs	r2, #0
 801f084:	611a      	str	r2, [r3, #16]
	}

	/* Clear the network addresses. */
	netPath->multicastAddr = 0;
 801f086:	687b      	ldr	r3, [r7, #4]
 801f088:	2200      	movs	r2, #0
 801f08a:	601a      	str	r2, [r3, #0]
	netPath->unicastAddr = 0;
 801f08c:	687b      	ldr	r3, [r7, #4]
 801f08e:	2200      	movs	r2, #0
 801f090:	609a      	str	r2, [r3, #8]

	/* Return a success code. */
	return TRUE;
 801f092:	2301      	movs	r3, #1
}
 801f094:	4618      	mov	r0, r3
 801f096:	3710      	adds	r7, #16
 801f098:	46bd      	mov	sp, r7
 801f09a:	bd80      	pop	{r7, pc}
 801f09c:	08026bf4 	.word	0x08026bf4

0801f0a0 <findIface>:

/* Find interface to  be used.  uuid should be filled with MAC address of the interface.
	 Will return the IPv4 address of  the interface. */
static int32_t findIface(const octet_t *ifaceName, octet_t *uuid, NetPath *netPath)
{
 801f0a0:	b580      	push	{r7, lr}
 801f0a2:	b086      	sub	sp, #24
 801f0a4:	af00      	add	r7, sp, #0
 801f0a6:	60f8      	str	r0, [r7, #12]
 801f0a8:	60b9      	str	r1, [r7, #8]
 801f0aa:	607a      	str	r2, [r7, #4]
	struct netif *iface;

	iface = netif_default;
 801f0ac:	4b09      	ldr	r3, [pc, #36]	; (801f0d4 <findIface+0x34>)
 801f0ae:	681b      	ldr	r3, [r3, #0]
 801f0b0:	617b      	str	r3, [r7, #20]
	memcpy(uuid, iface->hwaddr, iface->hwaddr_len);
 801f0b2:	697b      	ldr	r3, [r7, #20]
 801f0b4:	f103 012e 	add.w	r1, r3, #46	; 0x2e
 801f0b8:	697b      	ldr	r3, [r7, #20]
 801f0ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801f0be:	461a      	mov	r2, r3
 801f0c0:	68b8      	ldr	r0, [r7, #8]
 801f0c2:	f001 f8cb 	bl	802025c <memcpy>

	return iface->ip_addr.addr;
 801f0c6:	697b      	ldr	r3, [r7, #20]
 801f0c8:	685b      	ldr	r3, [r3, #4]
}
 801f0ca:	4618      	mov	r0, r3
 801f0cc:	3718      	adds	r7, #24
 801f0ce:	46bd      	mov	sp, r7
 801f0d0:	bd80      	pop	{r7, pc}
 801f0d2:	bf00      	nop
 801f0d4:	2000a3e4 	.word	0x2000a3e4

0801f0d8 <netRecvEventCallback>:

/* Process an incoming message on the Event port. */
static void netRecvEventCallback(void *arg, struct udp_pcb *pcb, struct pbuf *p,
																 struct ip_addr *addr, u16_t port)
{
 801f0d8:	b580      	push	{r7, lr}
 801f0da:	b086      	sub	sp, #24
 801f0dc:	af00      	add	r7, sp, #0
 801f0de:	60f8      	str	r0, [r7, #12]
 801f0e0:	60b9      	str	r1, [r7, #8]
 801f0e2:	607a      	str	r2, [r7, #4]
 801f0e4:	603b      	str	r3, [r7, #0]
	NetPath *netPath = (NetPath *) arg;
 801f0e6:	68fb      	ldr	r3, [r7, #12]
 801f0e8:	617b      	str	r3, [r7, #20]

	/* Place the incoming message on the Event Port QUEUE. */
	if (!netQPut(&netPath->eventQ, p))
 801f0ea:	697b      	ldr	r3, [r7, #20]
 801f0ec:	3314      	adds	r3, #20
 801f0ee:	6879      	ldr	r1, [r7, #4]
 801f0f0:	4618      	mov	r0, r3
 801f0f2:	f7ff ff01 	bl	801eef8 <netQPut>
 801f0f6:	4603      	mov	r3, r0
 801f0f8:	f083 0301 	eor.w	r3, r3, #1
 801f0fc:	b2db      	uxtb	r3, r3
 801f0fe:	2b00      	cmp	r3, #0
 801f100:	d003      	beq.n	801f10a <netRecvEventCallback+0x32>
	{
		pbuf_free(p);
 801f102:	6878      	ldr	r0, [r7, #4]
 801f104:	f7ef fdc4 	bl	800ec90 <pbuf_free>
		ERROR("netRecvEventCallback: queue full\n");
		return;
 801f108:	e001      	b.n	801f10e <netRecvEventCallback+0x36>
	}

	/* Alert the PTP thread there is now something to do. */
	ptpd_alert();
 801f10a:	f7ff f8b9 	bl	801e280 <ptpd_alert>
}
 801f10e:	3718      	adds	r7, #24
 801f110:	46bd      	mov	sp, r7
 801f112:	bd80      	pop	{r7, pc}

0801f114 <netRecvGeneralCallback>:

/* Process an incoming message on the General port. */
static void netRecvGeneralCallback(void *arg, struct udp_pcb *pcb, struct pbuf *p,
																	 struct ip_addr *addr, u16_t port)
{
 801f114:	b580      	push	{r7, lr}
 801f116:	b086      	sub	sp, #24
 801f118:	af00      	add	r7, sp, #0
 801f11a:	60f8      	str	r0, [r7, #12]
 801f11c:	60b9      	str	r1, [r7, #8]
 801f11e:	607a      	str	r2, [r7, #4]
 801f120:	603b      	str	r3, [r7, #0]
	NetPath *netPath = (NetPath *) arg;
 801f122:	68fb      	ldr	r3, [r7, #12]
 801f124:	617b      	str	r3, [r7, #20]

	/* Place the incoming message on the Event Port QUEUE. */
	if (!netQPut(&netPath->generalQ, p))
 801f126:	697b      	ldr	r3, [r7, #20]
 801f128:	3328      	adds	r3, #40	; 0x28
 801f12a:	6879      	ldr	r1, [r7, #4]
 801f12c:	4618      	mov	r0, r3
 801f12e:	f7ff fee3 	bl	801eef8 <netQPut>
 801f132:	4603      	mov	r3, r0
 801f134:	f083 0301 	eor.w	r3, r3, #1
 801f138:	b2db      	uxtb	r3, r3
 801f13a:	2b00      	cmp	r3, #0
 801f13c:	d003      	beq.n	801f146 <netRecvGeneralCallback+0x32>
	{
		pbuf_free(p);
 801f13e:	6878      	ldr	r0, [r7, #4]
 801f140:	f7ef fda6 	bl	800ec90 <pbuf_free>
		ERROR("netRecvGeneralCallback: queue full\n");
		return;
 801f144:	e001      	b.n	801f14a <netRecvGeneralCallback+0x36>
	}

	/* Alert the PTP thread there is now something to do. */
	ptpd_alert();
 801f146:	f7ff f89b 	bl	801e280 <ptpd_alert>
}
 801f14a:	3718      	adds	r7, #24
 801f14c:	46bd      	mov	sp, r7
 801f14e:	bd80      	pop	{r7, pc}

0801f150 <netInit>:

/* Start  all of the UDP stuff */
bool netInit(NetPath *netPath, PtpClock *ptpClock)
{
 801f150:	b580      	push	{r7, lr}
 801f152:	b088      	sub	sp, #32
 801f154:	af00      	add	r7, sp, #0
 801f156:	6078      	str	r0, [r7, #4]
 801f158:	6039      	str	r1, [r7, #0]
	char addrStr[NET_ADDRESS_LENGTH];

	DBG("netInit\n");

	/* Initialize the buffer queues. */
	netQInit(&netPath->eventQ);
 801f15a:	687b      	ldr	r3, [r7, #4]
 801f15c:	3314      	adds	r3, #20
 801f15e:	4618      	mov	r0, r3
 801f160:	f7ff feba 	bl	801eed8 <netQInit>
	netQInit(&netPath->generalQ);
 801f164:	687b      	ldr	r3, [r7, #4]
 801f166:	3328      	adds	r3, #40	; 0x28
 801f168:	4618      	mov	r0, r3
 801f16a:	f7ff feb5 	bl	801eed8 <netQInit>

	/* Find a network interface */
	interfaceAddr.addr = findIface(ptpClock->rtOpts->ifaceName, ptpClock->portUuidField, netPath);
 801f16e:	683b      	ldr	r3, [r7, #0]
 801f170:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 801f174:	f103 000c 	add.w	r0, r3, #12
 801f178:	683b      	ldr	r3, [r7, #0]
 801f17a:	f203 4309 	addw	r3, r3, #1033	; 0x409
 801f17e:	687a      	ldr	r2, [r7, #4]
 801f180:	4619      	mov	r1, r3
 801f182:	f7ff ff8d 	bl	801f0a0 <findIface>
 801f186:	4603      	mov	r3, r0
 801f188:	61bb      	str	r3, [r7, #24]
	if (!(interfaceAddr.addr))
 801f18a:	69bb      	ldr	r3, [r7, #24]
 801f18c:	2b00      	cmp	r3, #0
 801f18e:	f000 8081 	beq.w	801f294 <netInit+0x144>
			ERROR("netInit: Failed to find interface address\n");
			goto fail01;
	}

	/* Open lwIP raw udp interfaces for the event port. */
	netPath->eventPcb = udp_new();
 801f192:	f7f6 fc7b 	bl	8015a8c <udp_new>
 801f196:	4602      	mov	r2, r0
 801f198:	687b      	ldr	r3, [r7, #4]
 801f19a:	60da      	str	r2, [r3, #12]
	if (NULL == netPath->eventPcb)
 801f19c:	687b      	ldr	r3, [r7, #4]
 801f19e:	68db      	ldr	r3, [r3, #12]
 801f1a0:	2b00      	cmp	r3, #0
 801f1a2:	d079      	beq.n	801f298 <netInit+0x148>
			ERROR("netInit: Failed to open Event UDP PCB\n");
			goto fail02;
	}

	/* Open lwIP raw udp interfaces for the general port. */
	netPath->generalPcb = udp_new();
 801f1a4:	f7f6 fc72 	bl	8015a8c <udp_new>
 801f1a8:	4602      	mov	r2, r0
 801f1aa:	687b      	ldr	r3, [r7, #4]
 801f1ac:	611a      	str	r2, [r3, #16]
	if (NULL == netPath->generalPcb)
 801f1ae:	687b      	ldr	r3, [r7, #4]
 801f1b0:	691b      	ldr	r3, [r3, #16]
 801f1b2:	2b00      	cmp	r3, #0
 801f1b4:	d067      	beq.n	801f286 <netInit+0x136>
			ERROR("netInit: Failed to open General UDP PCB\n");
			goto fail03;
	}

	/* Configure network (broadcast/unicast) addresses. */
	netPath->unicastAddr = 0; /* disable unicast */
 801f1b6:	687b      	ldr	r3, [r7, #4]
 801f1b8:	2200      	movs	r2, #0
 801f1ba:	609a      	str	r2, [r3, #8]

	/* Init General multicast IP address */
	memcpy(addrStr, DEFAULT_PTP_DOMAIN_ADDRESS, NET_ADDRESS_LENGTH);
 801f1bc:	f107 0308 	add.w	r3, r7, #8
 801f1c0:	2210      	movs	r2, #16
 801f1c2:	4938      	ldr	r1, [pc, #224]	; (801f2a4 <netInit+0x154>)
 801f1c4:	4618      	mov	r0, r3
 801f1c6:	f001 f849 	bl	802025c <memcpy>
	if (!inet_aton(addrStr, &netAddr))
 801f1ca:	f107 021c 	add.w	r2, r7, #28
 801f1ce:	f107 0308 	add.w	r3, r7, #8
 801f1d2:	4611      	mov	r1, r2
 801f1d4:	4618      	mov	r0, r3
 801f1d6:	f7fb fc61 	bl	801aa9c <ip4addr_aton>
 801f1da:	4603      	mov	r3, r0
 801f1dc:	2b00      	cmp	r3, #0
 801f1de:	d049      	beq.n	801f274 <netInit+0x124>
	{
			ERROR("netInit: failed to encode multi-cast address: %s\n", addrStr);
			goto fail04;
	}
	netPath->multicastAddr = netAddr.s_addr;
 801f1e0:	69fb      	ldr	r3, [r7, #28]
 801f1e2:	461a      	mov	r2, r3
 801f1e4:	687b      	ldr	r3, [r7, #4]
 801f1e6:	601a      	str	r2, [r3, #0]

	/* Join multicast group (for receiving) on specified interface */
	igmp_joingroup(&interfaceAddr, (struct ip_addr *)&netAddr);
 801f1e8:	f107 021c 	add.w	r2, r7, #28
 801f1ec:	f107 0318 	add.w	r3, r7, #24
 801f1f0:	4611      	mov	r1, r2
 801f1f2:	4618      	mov	r0, r3
 801f1f4:	f7fa fb30 	bl	8019858 <igmp_joingroup>

	/* Init Peer multicast IP address */
	memcpy(addrStr, PEER_PTP_DOMAIN_ADDRESS, NET_ADDRESS_LENGTH);
 801f1f8:	f107 0308 	add.w	r3, r7, #8
 801f1fc:	2210      	movs	r2, #16
 801f1fe:	492a      	ldr	r1, [pc, #168]	; (801f2a8 <netInit+0x158>)
 801f200:	4618      	mov	r0, r3
 801f202:	f001 f82b 	bl	802025c <memcpy>
	if (!inet_aton(addrStr, &netAddr))
 801f206:	f107 021c 	add.w	r2, r7, #28
 801f20a:	f107 0308 	add.w	r3, r7, #8
 801f20e:	4611      	mov	r1, r2
 801f210:	4618      	mov	r0, r3
 801f212:	f7fb fc43 	bl	801aa9c <ip4addr_aton>
 801f216:	4603      	mov	r3, r0
 801f218:	2b00      	cmp	r3, #0
 801f21a:	d02d      	beq.n	801f278 <netInit+0x128>
	{
			ERROR("netInit: failed to encode peer multi-cast address: %s\n", addrStr);
			goto fail04;
	}
	netPath->peerMulticastAddr = netAddr.s_addr;
 801f21c:	69fb      	ldr	r3, [r7, #28]
 801f21e:	461a      	mov	r2, r3
 801f220:	687b      	ldr	r3, [r7, #4]
 801f222:	605a      	str	r2, [r3, #4]

	/* Join peer multicast group (for receiving) on specified interface */
	igmp_joingroup(&interfaceAddr, (struct ip_addr *) &netAddr);
 801f224:	f107 021c 	add.w	r2, r7, #28
 801f228:	f107 0318 	add.w	r3, r7, #24
 801f22c:	4611      	mov	r1, r2
 801f22e:	4618      	mov	r0, r3
 801f230:	f7fa fb12 	bl	8019858 <igmp_joingroup>
	/* Multicast send only on specified interface. */
	//netPath->eventPcb->multicast_ip.addr = netPath->multicastAddr;
	//netPath->generalPcb->multicast_ip.addr = netPath->multicastAddr;

	/* Establish the appropriate UDP bindings/connections for events. */
	udp_recv(netPath->eventPcb, netRecvEventCallback, netPath);
 801f234:	687b      	ldr	r3, [r7, #4]
 801f236:	68db      	ldr	r3, [r3, #12]
 801f238:	687a      	ldr	r2, [r7, #4]
 801f23a:	491c      	ldr	r1, [pc, #112]	; (801f2ac <netInit+0x15c>)
 801f23c:	4618      	mov	r0, r3
 801f23e:	f7f6 fbc3 	bl	80159c8 <udp_recv>
	udp_bind(netPath->eventPcb, IP_ADDR_ANY, PTP_EVENT_PORT);
 801f242:	687b      	ldr	r3, [r7, #4]
 801f244:	68db      	ldr	r3, [r3, #12]
 801f246:	f240 123f 	movw	r2, #319	; 0x13f
 801f24a:	4919      	ldr	r1, [pc, #100]	; (801f2b0 <netInit+0x160>)
 801f24c:	4618      	mov	r0, r3
 801f24e:	f7f6 fa11 	bl	8015674 <udp_bind>
	/*  udp_connect(netPath->eventPcb, &netAddr, PTP_EVENT_PORT); */

	/* Establish the appropriate UDP bindings/connections for general. */
	udp_recv(netPath->generalPcb, netRecvGeneralCallback, netPath);
 801f252:	687b      	ldr	r3, [r7, #4]
 801f254:	691b      	ldr	r3, [r3, #16]
 801f256:	687a      	ldr	r2, [r7, #4]
 801f258:	4916      	ldr	r1, [pc, #88]	; (801f2b4 <netInit+0x164>)
 801f25a:	4618      	mov	r0, r3
 801f25c:	f7f6 fbb4 	bl	80159c8 <udp_recv>
	udp_bind(netPath->generalPcb, IP_ADDR_ANY, PTP_GENERAL_PORT);
 801f260:	687b      	ldr	r3, [r7, #4]
 801f262:	691b      	ldr	r3, [r3, #16]
 801f264:	f44f 72a0 	mov.w	r2, #320	; 0x140
 801f268:	4911      	ldr	r1, [pc, #68]	; (801f2b0 <netInit+0x160>)
 801f26a:	4618      	mov	r0, r3
 801f26c:	f7f6 fa02 	bl	8015674 <udp_bind>
	/*  udp_connect(netPath->generalPcb, &netAddr, PTP_GENERAL_PORT); */

	/* Return a success code. */
	return TRUE;
 801f270:	2301      	movs	r3, #1
 801f272:	e013      	b.n	801f29c <netInit+0x14c>
			goto fail04;
 801f274:	bf00      	nop
 801f276:	e000      	b.n	801f27a <netInit+0x12a>
			goto fail04;
 801f278:	bf00      	nop

fail04:
	udp_remove(netPath->generalPcb);
 801f27a:	687b      	ldr	r3, [r7, #4]
 801f27c:	691b      	ldr	r3, [r3, #16]
 801f27e:	4618      	mov	r0, r3
 801f280:	f7f6 fbc2 	bl	8015a08 <udp_remove>
 801f284:	e000      	b.n	801f288 <netInit+0x138>
			goto fail03;
 801f286:	bf00      	nop
fail03:
	udp_remove(netPath->eventPcb);
 801f288:	687b      	ldr	r3, [r7, #4]
 801f28a:	68db      	ldr	r3, [r3, #12]
 801f28c:	4618      	mov	r0, r3
 801f28e:	f7f6 fbbb 	bl	8015a08 <udp_remove>
 801f292:	e002      	b.n	801f29a <netInit+0x14a>
			goto fail01;
 801f294:	bf00      	nop
 801f296:	e000      	b.n	801f29a <netInit+0x14a>
			goto fail02;
 801f298:	bf00      	nop
fail02:
fail01:
	return FALSE;
 801f29a:	2300      	movs	r3, #0
}
 801f29c:	4618      	mov	r0, r3
 801f29e:	3720      	adds	r7, #32
 801f2a0:	46bd      	mov	sp, r7
 801f2a2:	bd80      	pop	{r7, pc}
 801f2a4:	080269b4 	.word	0x080269b4
 801f2a8:	080269c0 	.word	0x080269c0
 801f2ac:	0801f0d9 	.word	0x0801f0d9
 801f2b0:	08026bf4 	.word	0x08026bf4
 801f2b4:	0801f115 	.word	0x0801f115

0801f2b8 <netSelect>:

/* Wait for a packet  to come in on either port.  For now, there is no wait.
 * Simply check to  see if a packet is available on either port and return 1,
 *  otherwise return 0. */
int32_t netSelect(NetPath *netPath, const TimeInternal *timeout)
{
 801f2b8:	b580      	push	{r7, lr}
 801f2ba:	b082      	sub	sp, #8
 801f2bc:	af00      	add	r7, sp, #0
 801f2be:	6078      	str	r0, [r7, #4]
 801f2c0:	6039      	str	r1, [r7, #0]
	/* Check the packet queues.  If there is data, return TRUE. */
	if (netQCheck(&netPath->eventQ) || netQCheck(&netPath->generalQ)) return 1;
 801f2c2:	687b      	ldr	r3, [r7, #4]
 801f2c4:	3314      	adds	r3, #20
 801f2c6:	4618      	mov	r0, r3
 801f2c8:	f7ff fe96 	bl	801eff8 <netQCheck>
 801f2cc:	4603      	mov	r3, r0
 801f2ce:	2b00      	cmp	r3, #0
 801f2d0:	d107      	bne.n	801f2e2 <netSelect+0x2a>
 801f2d2:	687b      	ldr	r3, [r7, #4]
 801f2d4:	3328      	adds	r3, #40	; 0x28
 801f2d6:	4618      	mov	r0, r3
 801f2d8:	f7ff fe8e 	bl	801eff8 <netQCheck>
 801f2dc:	4603      	mov	r3, r0
 801f2de:	2b00      	cmp	r3, #0
 801f2e0:	d001      	beq.n	801f2e6 <netSelect+0x2e>
 801f2e2:	2301      	movs	r3, #1
 801f2e4:	e000      	b.n	801f2e8 <netSelect+0x30>

	return 0;
 801f2e6:	2300      	movs	r3, #0
}
 801f2e8:	4618      	mov	r0, r3
 801f2ea:	3708      	adds	r7, #8
 801f2ec:	46bd      	mov	sp, r7
 801f2ee:	bd80      	pop	{r7, pc}

0801f2f0 <netEmptyEventQ>:

/* Delete all waiting packets in event queue. */
void netEmptyEventQ(NetPath *netPath)
{
 801f2f0:	b580      	push	{r7, lr}
 801f2f2:	b082      	sub	sp, #8
 801f2f4:	af00      	add	r7, sp, #0
 801f2f6:	6078      	str	r0, [r7, #4]
	netQEmpty(&netPath->eventQ);
 801f2f8:	687b      	ldr	r3, [r7, #4]
 801f2fa:	3314      	adds	r3, #20
 801f2fc:	4618      	mov	r0, r3
 801f2fe:	f7ff fe53 	bl	801efa8 <netQEmpty>
}
 801f302:	bf00      	nop
 801f304:	3708      	adds	r7, #8
 801f306:	46bd      	mov	sp, r7
 801f308:	bd80      	pop	{r7, pc}

0801f30a <netRecv>:

static ssize_t netRecv(octet_t *buf, TimeInternal *time, BufQueue *msgQueue)
{
 801f30a:	b580      	push	{r7, lr}
 801f30c:	b08a      	sub	sp, #40	; 0x28
 801f30e:	af00      	add	r7, sp, #0
 801f310:	60f8      	str	r0, [r7, #12]
 801f312:	60b9      	str	r1, [r7, #8]
 801f314:	607a      	str	r2, [r7, #4]
	u16_t length;
	struct pbuf *p;
	struct pbuf *pcopy;

	/* Get the next buffer from the queue. */
	if ((p = (struct pbuf*) netQGet(msgQueue)) == NULL)
 801f316:	6878      	ldr	r0, [r7, #4]
 801f318:	f7ff fe1d 	bl	801ef56 <netQGet>
 801f31c:	61b8      	str	r0, [r7, #24]
 801f31e:	69bb      	ldr	r3, [r7, #24]
 801f320:	2b00      	cmp	r3, #0
 801f322:	d101      	bne.n	801f328 <netRecv+0x1e>
	{
		return 0;
 801f324:	2300      	movs	r3, #0
 801f326:	e043      	b.n	801f3b0 <netRecv+0xa6>
	}

	/* Verify that we have enough space to store the contents. */
	if (p->tot_len > PACKET_SIZE)
 801f328:	69bb      	ldr	r3, [r7, #24]
 801f32a:	891b      	ldrh	r3, [r3, #8]
 801f32c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801f330:	d904      	bls.n	801f33c <netRecv+0x32>
	{
		ERROR("netRecv: received truncated message\n");
		pbuf_free(p);
 801f332:	69b8      	ldr	r0, [r7, #24]
 801f334:	f7ef fcac 	bl	800ec90 <pbuf_free>
		return 0;
 801f338:	2300      	movs	r3, #0
 801f33a:	e039      	b.n	801f3b0 <netRecv+0xa6>
	}

	/* Verify there is contents to copy. */
	if (p->tot_len == 0)
 801f33c:	69bb      	ldr	r3, [r7, #24]
 801f33e:	891b      	ldrh	r3, [r3, #8]
 801f340:	2b00      	cmp	r3, #0
 801f342:	d104      	bne.n	801f34e <netRecv+0x44>
	{
		ERROR("netRecv: received empty packet\n");
		pbuf_free(p);
 801f344:	69b8      	ldr	r0, [r7, #24]
 801f346:	f7ef fca3 	bl	800ec90 <pbuf_free>
		return 0;
 801f34a:	2300      	movs	r3, #0
 801f34c:	e030      	b.n	801f3b0 <netRecv+0xa6>
	}

	if (time != NULL)
 801f34e:	68bb      	ldr	r3, [r7, #8]
 801f350:	2b00      	cmp	r3, #0
 801f352:	d002      	beq.n	801f35a <netRecv+0x50>
	{
#if LWIP_PTP
		time->seconds = p->time_sec;
		time->nanoseconds = p->time_nsec;
#else
		getTime(time);
 801f354:	68b8      	ldr	r0, [r7, #8]
 801f356:	f000 fe5d 	bl	8020014 <getTime>
#endif
	}

	/* Get the length of the buffer to copy. */
	length = p->tot_len;
 801f35a:	69bb      	ldr	r3, [r7, #24]
 801f35c:	891b      	ldrh	r3, [r3, #8]
 801f35e:	82fb      	strh	r3, [r7, #22]

	/* Copy the pbuf payload into the buffer. */
	pcopy = p;
 801f360:	69bb      	ldr	r3, [r7, #24]
 801f362:	61fb      	str	r3, [r7, #28]
	j = 0;
 801f364:	2300      	movs	r3, #0
 801f366:	623b      	str	r3, [r7, #32]
	for (i = 0; i < length; i++)
 801f368:	2300      	movs	r3, #0
 801f36a:	627b      	str	r3, [r7, #36]	; 0x24
 801f36c:	e018      	b.n	801f3a0 <netRecv+0x96>
	{
		// Copy the next byte in the payload.
		buf[i] = ((u8_t *)pcopy->payload)[j++];
 801f36e:	69fb      	ldr	r3, [r7, #28]
 801f370:	685a      	ldr	r2, [r3, #4]
 801f372:	6a3b      	ldr	r3, [r7, #32]
 801f374:	1c59      	adds	r1, r3, #1
 801f376:	6239      	str	r1, [r7, #32]
 801f378:	441a      	add	r2, r3
 801f37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f37c:	68f9      	ldr	r1, [r7, #12]
 801f37e:	440b      	add	r3, r1
 801f380:	7812      	ldrb	r2, [r2, #0]
 801f382:	701a      	strb	r2, [r3, #0]

		// Skip to the next buffer in the payload?
		if (j == pcopy->len)
 801f384:	69fb      	ldr	r3, [r7, #28]
 801f386:	895b      	ldrh	r3, [r3, #10]
 801f388:	461a      	mov	r2, r3
 801f38a:	6a3b      	ldr	r3, [r7, #32]
 801f38c:	4293      	cmp	r3, r2
 801f38e:	d104      	bne.n	801f39a <netRecv+0x90>
		{
			// Move to the next buffer.
			pcopy = pcopy->next;
 801f390:	69fb      	ldr	r3, [r7, #28]
 801f392:	681b      	ldr	r3, [r3, #0]
 801f394:	61fb      	str	r3, [r7, #28]
			j = 0;
 801f396:	2300      	movs	r3, #0
 801f398:	623b      	str	r3, [r7, #32]
	for (i = 0; i < length; i++)
 801f39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f39c:	3301      	adds	r3, #1
 801f39e:	627b      	str	r3, [r7, #36]	; 0x24
 801f3a0:	8afb      	ldrh	r3, [r7, #22]
 801f3a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f3a4:	429a      	cmp	r2, r3
 801f3a6:	dbe2      	blt.n	801f36e <netRecv+0x64>
		}
	}

	/* Free up the pbuf (chain). */
	pbuf_free(p);
 801f3a8:	69b8      	ldr	r0, [r7, #24]
 801f3aa:	f7ef fc71 	bl	800ec90 <pbuf_free>

	return length;
 801f3ae:	8afb      	ldrh	r3, [r7, #22]
}
 801f3b0:	4618      	mov	r0, r3
 801f3b2:	3728      	adds	r7, #40	; 0x28
 801f3b4:	46bd      	mov	sp, r7
 801f3b6:	bd80      	pop	{r7, pc}

0801f3b8 <netRecvEvent>:

ssize_t netRecvEvent(NetPath *netPath, octet_t *buf, TimeInternal *time)
{
 801f3b8:	b580      	push	{r7, lr}
 801f3ba:	b084      	sub	sp, #16
 801f3bc:	af00      	add	r7, sp, #0
 801f3be:	60f8      	str	r0, [r7, #12]
 801f3c0:	60b9      	str	r1, [r7, #8]
 801f3c2:	607a      	str	r2, [r7, #4]
	return netRecv(buf, time, &netPath->eventQ);
 801f3c4:	68fb      	ldr	r3, [r7, #12]
 801f3c6:	3314      	adds	r3, #20
 801f3c8:	461a      	mov	r2, r3
 801f3ca:	6879      	ldr	r1, [r7, #4]
 801f3cc:	68b8      	ldr	r0, [r7, #8]
 801f3ce:	f7ff ff9c 	bl	801f30a <netRecv>
 801f3d2:	4603      	mov	r3, r0
}
 801f3d4:	4618      	mov	r0, r3
 801f3d6:	3710      	adds	r7, #16
 801f3d8:	46bd      	mov	sp, r7
 801f3da:	bd80      	pop	{r7, pc}

0801f3dc <netRecvGeneral>:

ssize_t netRecvGeneral(NetPath *netPath, octet_t *buf, TimeInternal *time)
{
 801f3dc:	b580      	push	{r7, lr}
 801f3de:	b084      	sub	sp, #16
 801f3e0:	af00      	add	r7, sp, #0
 801f3e2:	60f8      	str	r0, [r7, #12]
 801f3e4:	60b9      	str	r1, [r7, #8]
 801f3e6:	607a      	str	r2, [r7, #4]
	return netRecv(buf, time, &netPath->generalQ);
 801f3e8:	68fb      	ldr	r3, [r7, #12]
 801f3ea:	3328      	adds	r3, #40	; 0x28
 801f3ec:	461a      	mov	r2, r3
 801f3ee:	6879      	ldr	r1, [r7, #4]
 801f3f0:	68b8      	ldr	r0, [r7, #8]
 801f3f2:	f7ff ff8a 	bl	801f30a <netRecv>
 801f3f6:	4603      	mov	r3, r0
}
 801f3f8:	4618      	mov	r0, r3
 801f3fa:	3710      	adds	r7, #16
 801f3fc:	46bd      	mov	sp, r7
 801f3fe:	bd80      	pop	{r7, pc}

0801f400 <netSend>:

static ssize_t netSend(const octet_t *buf, int16_t  length, TimeInternal *time, const int32_t * addr, struct udp_pcb * pcb)
{
 801f400:	b580      	push	{r7, lr}
 801f402:	b086      	sub	sp, #24
 801f404:	af00      	add	r7, sp, #0
 801f406:	60f8      	str	r0, [r7, #12]
 801f408:	607a      	str	r2, [r7, #4]
 801f40a:	603b      	str	r3, [r7, #0]
 801f40c:	460b      	mov	r3, r1
 801f40e:	817b      	strh	r3, [r7, #10]
	err_t result;
	struct pbuf * p;

	/* Allocate the tx pbuf based on the current size. */
	p = pbuf_alloc(PBUF_TRANSPORT, length, PBUF_RAM);
 801f410:	897b      	ldrh	r3, [r7, #10]
 801f412:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f416:	4619      	mov	r1, r3
 801f418:	2036      	movs	r0, #54	; 0x36
 801f41a:	f7ef f955 	bl	800e6c8 <pbuf_alloc>
 801f41e:	6178      	str	r0, [r7, #20]
	if (NULL == p)
 801f420:	697b      	ldr	r3, [r7, #20]
 801f422:	2b00      	cmp	r3, #0
 801f424:	d028      	beq.n	801f478 <netSend+0x78>
		ERROR("netSend: Failed to allocate Tx Buffer\n");
		goto fail01;
	}

	/* Copy the incoming data into the pbuf payload. */
	result = pbuf_take(p, buf, length);
 801f426:	897b      	ldrh	r3, [r7, #10]
 801f428:	461a      	mov	r2, r3
 801f42a:	68f9      	ldr	r1, [r7, #12]
 801f42c:	6978      	ldr	r0, [r7, #20]
 801f42e:	f7ef fee3 	bl	800f1f8 <pbuf_take>
 801f432:	4603      	mov	r3, r0
 801f434:	74fb      	strb	r3, [r7, #19]
	if (ERR_OK != result)
 801f436:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801f43a:	2b00      	cmp	r3, #0
 801f43c:	d113      	bne.n	801f466 <netSend+0x66>
		ERROR("netSend: Failed to copy data to Pbuf (%d)\n", result);
		goto fail02;
	}

	/* send the buffer. */
	result = udp_sendto(pcb, p, (void *)addr, pcb->local_port);
 801f43e:	6a3b      	ldr	r3, [r7, #32]
 801f440:	8a5b      	ldrh	r3, [r3, #18]
 801f442:	683a      	ldr	r2, [r7, #0]
 801f444:	6979      	ldr	r1, [r7, #20]
 801f446:	6a38      	ldr	r0, [r7, #32]
 801f448:	f7f5 fe94 	bl	8015174 <udp_sendto>
 801f44c:	4603      	mov	r3, r0
 801f44e:	74fb      	strb	r3, [r7, #19]
	if (ERR_OK != result)
 801f450:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801f454:	2b00      	cmp	r3, #0
 801f456:	d108      	bne.n	801f46a <netSend+0x6a>
	{
		ERROR("netSend: Failed to send data (%d)\n", result);
		goto fail02;
	}

	if (time != NULL)
 801f458:	687b      	ldr	r3, [r7, #4]
 801f45a:	2b00      	cmp	r3, #0
 801f45c:	d007      	beq.n	801f46e <netSend+0x6e>
		/* TODO: use of loopback mode */
		/*
		time->seconds = 0;
		time->nanoseconds = 0;
		*/
		getTime(time);
 801f45e:	6878      	ldr	r0, [r7, #4]
 801f460:	f000 fdd8 	bl	8020014 <getTime>
 801f464:	e004      	b.n	801f470 <netSend+0x70>
		goto fail02;
 801f466:	bf00      	nop
 801f468:	e002      	b.n	801f470 <netSend+0x70>
		goto fail02;
 801f46a:	bf00      	nop
 801f46c:	e000      	b.n	801f470 <netSend+0x70>
	} else {
		DBGV("netSend\n");
	}


fail02:
 801f46e:	bf00      	nop
	pbuf_free(p);
 801f470:	6978      	ldr	r0, [r7, #20]
 801f472:	f7ef fc0d 	bl	800ec90 <pbuf_free>
 801f476:	e000      	b.n	801f47a <netSend+0x7a>
		goto fail01;
 801f478:	bf00      	nop

fail01:
	return length;
 801f47a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]

	/*  return (0 == result) ? length : 0; */
}
 801f47e:	4618      	mov	r0, r3
 801f480:	3718      	adds	r7, #24
 801f482:	46bd      	mov	sp, r7
 801f484:	bd80      	pop	{r7, pc}

0801f486 <netSendEvent>:

ssize_t netSendEvent(NetPath *netPath, const octet_t *buf, int16_t  length, TimeInternal *time)
{
 801f486:	b580      	push	{r7, lr}
 801f488:	b086      	sub	sp, #24
 801f48a:	af02      	add	r7, sp, #8
 801f48c:	60f8      	str	r0, [r7, #12]
 801f48e:	60b9      	str	r1, [r7, #8]
 801f490:	603b      	str	r3, [r7, #0]
 801f492:	4613      	mov	r3, r2
 801f494:	80fb      	strh	r3, [r7, #6]
	return netSend(buf, length, time, &netPath->multicastAddr, netPath->eventPcb);
 801f496:	68fa      	ldr	r2, [r7, #12]
 801f498:	68fb      	ldr	r3, [r7, #12]
 801f49a:	68db      	ldr	r3, [r3, #12]
 801f49c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 801f4a0:	9300      	str	r3, [sp, #0]
 801f4a2:	4613      	mov	r3, r2
 801f4a4:	683a      	ldr	r2, [r7, #0]
 801f4a6:	68b8      	ldr	r0, [r7, #8]
 801f4a8:	f7ff ffaa 	bl	801f400 <netSend>
 801f4ac:	4603      	mov	r3, r0
}
 801f4ae:	4618      	mov	r0, r3
 801f4b0:	3710      	adds	r7, #16
 801f4b2:	46bd      	mov	sp, r7
 801f4b4:	bd80      	pop	{r7, pc}

0801f4b6 <netSendGeneral>:

ssize_t netSendGeneral(NetPath *netPath, const octet_t *buf, int16_t  length)
{
 801f4b6:	b580      	push	{r7, lr}
 801f4b8:	b086      	sub	sp, #24
 801f4ba:	af02      	add	r7, sp, #8
 801f4bc:	60f8      	str	r0, [r7, #12]
 801f4be:	60b9      	str	r1, [r7, #8]
 801f4c0:	4613      	mov	r3, r2
 801f4c2:	80fb      	strh	r3, [r7, #6]
	return netSend(buf, length, NULL, &netPath->multicastAddr, netPath->generalPcb);
 801f4c4:	68fa      	ldr	r2, [r7, #12]
 801f4c6:	68fb      	ldr	r3, [r7, #12]
 801f4c8:	691b      	ldr	r3, [r3, #16]
 801f4ca:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 801f4ce:	9300      	str	r3, [sp, #0]
 801f4d0:	4613      	mov	r3, r2
 801f4d2:	2200      	movs	r2, #0
 801f4d4:	68b8      	ldr	r0, [r7, #8]
 801f4d6:	f7ff ff93 	bl	801f400 <netSend>
 801f4da:	4603      	mov	r3, r0
}
 801f4dc:	4618      	mov	r0, r3
 801f4de:	3710      	adds	r7, #16
 801f4e0:	46bd      	mov	sp, r7
 801f4e2:	bd80      	pop	{r7, pc}

0801f4e4 <netSendPeerGeneral>:

ssize_t netSendPeerGeneral(NetPath *netPath, const octet_t *buf, int16_t  length)
{
 801f4e4:	b580      	push	{r7, lr}
 801f4e6:	b086      	sub	sp, #24
 801f4e8:	af02      	add	r7, sp, #8
 801f4ea:	60f8      	str	r0, [r7, #12]
 801f4ec:	60b9      	str	r1, [r7, #8]
 801f4ee:	4613      	mov	r3, r2
 801f4f0:	80fb      	strh	r3, [r7, #6]
	return netSend(buf, length, NULL, &netPath->peerMulticastAddr, netPath->generalPcb);
 801f4f2:	68fb      	ldr	r3, [r7, #12]
 801f4f4:	1d1a      	adds	r2, r3, #4
 801f4f6:	68fb      	ldr	r3, [r7, #12]
 801f4f8:	691b      	ldr	r3, [r3, #16]
 801f4fa:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 801f4fe:	9300      	str	r3, [sp, #0]
 801f500:	4613      	mov	r3, r2
 801f502:	2200      	movs	r2, #0
 801f504:	68b8      	ldr	r0, [r7, #8]
 801f506:	f7ff ff7b 	bl	801f400 <netSend>
 801f50a:	4603      	mov	r3, r0
}
 801f50c:	4618      	mov	r0, r3
 801f50e:	3710      	adds	r7, #16
 801f510:	46bd      	mov	sp, r7
 801f512:	bd80      	pop	{r7, pc}

0801f514 <netSendPeerEvent>:

ssize_t netSendPeerEvent(NetPath *netPath, const octet_t *buf, int16_t  length, TimeInternal* time)
{
 801f514:	b580      	push	{r7, lr}
 801f516:	b086      	sub	sp, #24
 801f518:	af02      	add	r7, sp, #8
 801f51a:	60f8      	str	r0, [r7, #12]
 801f51c:	60b9      	str	r1, [r7, #8]
 801f51e:	603b      	str	r3, [r7, #0]
 801f520:	4613      	mov	r3, r2
 801f522:	80fb      	strh	r3, [r7, #6]
	return netSend(buf, length, time, &netPath->peerMulticastAddr, netPath->eventPcb);
 801f524:	68fb      	ldr	r3, [r7, #12]
 801f526:	1d1a      	adds	r2, r3, #4
 801f528:	68fb      	ldr	r3, [r7, #12]
 801f52a:	68db      	ldr	r3, [r3, #12]
 801f52c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 801f530:	9300      	str	r3, [sp, #0]
 801f532:	4613      	mov	r3, r2
 801f534:	683a      	ldr	r2, [r7, #0]
 801f536:	68b8      	ldr	r0, [r7, #8]
 801f538:	f7ff ff62 	bl	801f400 <netSend>
 801f53c:	4603      	mov	r3, r0
}
 801f53e:	4618      	mov	r0, r3
 801f540:	3710      	adds	r7, #16
 801f542:	46bd      	mov	sp, r7
 801f544:	bd80      	pop	{r7, pc}
	...

0801f548 <ETH_PTPNanoSecond2SubSecond>:

#define ADJ_FREQ_BASE_ADDEND      0x35455A81
#define ADJ_FREQ_BASE_INCREMENT   43

static u32_t ETH_PTPNanoSecond2SubSecond(u32_t NanoSecondValue)
{
 801f548:	b580      	push	{r7, lr}
 801f54a:	b084      	sub	sp, #16
 801f54c:	af00      	add	r7, sp, #0
 801f54e:	6078      	str	r0, [r7, #4]
	uint64_t val = NanoSecondValue * 0x80000000ll;
 801f550:	687b      	ldr	r3, [r7, #4]
 801f552:	4618      	mov	r0, r3
 801f554:	f04f 0100 	mov.w	r1, #0
 801f558:	f04f 0200 	mov.w	r2, #0
 801f55c:	f04f 0300 	mov.w	r3, #0
 801f560:	07cb      	lsls	r3, r1, #31
 801f562:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 801f566:	07c2      	lsls	r2, r0, #31
 801f568:	e9c7 2302 	strd	r2, r3, [r7, #8]
	val /= 1000000000;
 801f56c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801f570:	a307      	add	r3, pc, #28	; (adr r3, 801f590 <ETH_PTPNanoSecond2SubSecond+0x48>)
 801f572:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f576:	f7e0 ff5b 	bl	8000430 <__aeabi_uldivmod>
 801f57a:	4602      	mov	r2, r0
 801f57c:	460b      	mov	r3, r1
 801f57e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return val;
 801f582:	68bb      	ldr	r3, [r7, #8]
}
 801f584:	4618      	mov	r0, r3
 801f586:	3710      	adds	r7, #16
 801f588:	46bd      	mov	sp, r7
 801f58a:	bd80      	pop	{r7, pc}
 801f58c:	f3af 8000 	nop.w
 801f590:	3b9aca00 	.word	0x3b9aca00
 801f594:	00000000 	.word	0x00000000

0801f598 <ETH_PTPSubSecond2NanoSecond>:

static u32_t ETH_PTPSubSecond2NanoSecond(u32_t SubSecondValue)
{
 801f598:	b490      	push	{r4, r7}
 801f59a:	b084      	sub	sp, #16
 801f59c:	af00      	add	r7, sp, #0
 801f59e:	6078      	str	r0, [r7, #4]
	uint64_t val = ((uint64_t)SubSecondValue * 1000000000) / 0x80000000ll;
 801f5a0:	687b      	ldr	r3, [r7, #4]
 801f5a2:	461a      	mov	r2, r3
 801f5a4:	f04f 0300 	mov.w	r3, #0
 801f5a8:	490d      	ldr	r1, [pc, #52]	; (801f5e0 <ETH_PTPSubSecond2NanoSecond+0x48>)
 801f5aa:	fb01 f003 	mul.w	r0, r1, r3
 801f5ae:	2100      	movs	r1, #0
 801f5b0:	fb01 f102 	mul.w	r1, r1, r2
 801f5b4:	1844      	adds	r4, r0, r1
 801f5b6:	490a      	ldr	r1, [pc, #40]	; (801f5e0 <ETH_PTPSubSecond2NanoSecond+0x48>)
 801f5b8:	fba2 0101 	umull	r0, r1, r2, r1
 801f5bc:	1863      	adds	r3, r4, r1
 801f5be:	4619      	mov	r1, r3
 801f5c0:	f04f 0200 	mov.w	r2, #0
 801f5c4:	f04f 0300 	mov.w	r3, #0
 801f5c8:	0fc2      	lsrs	r2, r0, #31
 801f5ca:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801f5ce:	0fcb      	lsrs	r3, r1, #31
 801f5d0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return val;
 801f5d4:	68bb      	ldr	r3, [r7, #8]
}
 801f5d6:	4618      	mov	r0, r3
 801f5d8:	3710      	adds	r7, #16
 801f5da:	46bd      	mov	sp, r7
 801f5dc:	bc90      	pop	{r4, r7}
 801f5de:	4770      	bx	lr
 801f5e0:	3b9aca00 	.word	0x3b9aca00

0801f5e4 <ETH_PTPTime_GetTime>:

void ETH_PTPTime_GetTime(struct ptptime_t * timestamp)
{
 801f5e4:	b580      	push	{r7, lr}
 801f5e6:	b082      	sub	sp, #8
 801f5e8:	af00      	add	r7, sp, #0
 801f5ea:	6078      	str	r0, [r7, #4]
	timestamp->tv_sec = ETH->MACSTSR;
 801f5ec:	4b15      	ldr	r3, [pc, #84]	; (801f644 <ETH_PTPTime_GetTime+0x60>)
 801f5ee:	f8d3 3b08 	ldr.w	r3, [r3, #2824]	; 0xb08
 801f5f2:	461a      	mov	r2, r3
 801f5f4:	687b      	ldr	r3, [r7, #4]
 801f5f6:	601a      	str	r2, [r3, #0]
	timestamp->tv_nsec = ETH_PTPSubSecond2NanoSecond(ETH->MACSTNR);
 801f5f8:	4b12      	ldr	r3, [pc, #72]	; (801f644 <ETH_PTPTime_GetTime+0x60>)
 801f5fa:	f8d3 3b0c 	ldr.w	r3, [r3, #2828]	; 0xb0c
 801f5fe:	4618      	mov	r0, r3
 801f600:	f7ff ffca 	bl	801f598 <ETH_PTPSubSecond2NanoSecond>
 801f604:	4603      	mov	r3, r0
 801f606:	461a      	mov	r2, r3
 801f608:	687b      	ldr	r3, [r7, #4]
 801f60a:	605a      	str	r2, [r3, #4]
	if(timestamp->tv_sec != ETH->MACSTSR)
 801f60c:	687b      	ldr	r3, [r7, #4]
 801f60e:	681b      	ldr	r3, [r3, #0]
 801f610:	461a      	mov	r2, r3
 801f612:	4b0c      	ldr	r3, [pc, #48]	; (801f644 <ETH_PTPTime_GetTime+0x60>)
 801f614:	f8d3 3b08 	ldr.w	r3, [r3, #2824]	; 0xb08
 801f618:	429a      	cmp	r2, r3
 801f61a:	d00f      	beq.n	801f63c <ETH_PTPTime_GetTime+0x58>
	{
		timestamp->tv_sec = ETH->MACSTSR;
 801f61c:	4b09      	ldr	r3, [pc, #36]	; (801f644 <ETH_PTPTime_GetTime+0x60>)
 801f61e:	f8d3 3b08 	ldr.w	r3, [r3, #2824]	; 0xb08
 801f622:	461a      	mov	r2, r3
 801f624:	687b      	ldr	r3, [r7, #4]
 801f626:	601a      	str	r2, [r3, #0]
		timestamp->tv_nsec = ETH_PTPSubSecond2NanoSecond(ETH->MACSTNR);
 801f628:	4b06      	ldr	r3, [pc, #24]	; (801f644 <ETH_PTPTime_GetTime+0x60>)
 801f62a:	f8d3 3b0c 	ldr.w	r3, [r3, #2828]	; 0xb0c
 801f62e:	4618      	mov	r0, r3
 801f630:	f7ff ffb2 	bl	801f598 <ETH_PTPSubSecond2NanoSecond>
 801f634:	4603      	mov	r3, r0
 801f636:	461a      	mov	r2, r3
 801f638:	687b      	ldr	r3, [r7, #4]
 801f63a:	605a      	str	r2, [r3, #4]
	}
}
 801f63c:	bf00      	nop
 801f63e:	3708      	adds	r7, #8
 801f640:	46bd      	mov	sp, r7
 801f642:	bd80      	pop	{r7, pc}
 801f644:	40028000 	.word	0x40028000

0801f648 <ETH_PTPStart>:
*                       ETH_PTP_CoarseUpdate : Coarse Update method
* Output         : None
* Return         : None
*******************************************************************************/
void ETH_PTPStart(uint32_t UpdateMethod)
{
 801f648:	b580      	push	{r7, lr}
 801f64a:	b082      	sub	sp, #8
 801f64c:	af00      	add	r7, sp, #0
 801f64e:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_ETH_PTP_UPDATE(UpdateMethod));

	/* Program Time stamp register bit 0 to enable time stamping. */
	ETH_PTPTimeStampCmd(ENABLE);
 801f650:	2001      	movs	r0, #1
 801f652:	f000 f933 	bl	801f8bc <ETH_PTPTimeStampCmd>

	/* Program the Subsecond increment register based on the PTP clock frequency. */
	ETH_SetPTPSubSecondIncrement(ADJ_FREQ_BASE_INCREMENT); /* to achieve 20 ns accuracy, the value is ~ 43 */
 801f656:	202b      	movs	r0, #43	; 0x2b
 801f658:	f000 f96e 	bl	801f938 <ETH_SetPTPSubSecondIncrement>

	if (UpdateMethod == ETH_PTP_FineUpdate)
 801f65c:	687b      	ldr	r3, [r7, #4]
 801f65e:	2b01      	cmp	r3, #1
 801f660:	d10b      	bne.n	801f67a <ETH_PTPStart+0x32>
	{
		/* If you are using the Fine correction method, program the Time stamp addend register
	     * and set Time stamp control register bit 5 (addend register update). */
	    ETH_SetPTPTimeStampAddend(ADJ_FREQ_BASE_ADDEND);
 801f662:	480e      	ldr	r0, [pc, #56]	; (801f69c <ETH_PTPStart+0x54>)
 801f664:	f000 f992 	bl	801f98c <ETH_SetPTPTimeStampAddend>
	    ETH_EnablePTPTimeStampAddend();
 801f668:	f000 f8e4 	bl	801f834 <ETH_EnablePTPTimeStampAddend>

	    /* Poll the Time stamp control register until bit 5 is cleared. */
	    while(ETH_GetPTPFlagStatus(ETH_PTP_FLAG_TSARU) == SET);
 801f66c:	bf00      	nop
 801f66e:	2020      	movs	r0, #32
 801f670:	f000 f946 	bl	801f900 <ETH_GetPTPFlagStatus>
 801f674:	4603      	mov	r3, r0
 801f676:	2b01      	cmp	r3, #1
 801f678:	d0f9      	beq.n	801f66e <ETH_PTPStart+0x26>
	}

	/* To select the Fine correction method (if required),
	 * program Time stamp control register  bit 1. */
	ETH_PTPUpdateMethodConfig(UpdateMethod);
 801f67a:	6878      	ldr	r0, [r7, #4]
 801f67c:	f000 f8fe 	bl	801f87c <ETH_PTPUpdateMethodConfig>

	/* Program the Time stamp high update and Time stamp low update registers
	 * with the appropriate time value. */
	ETH_SetPTPTimeStampUpdate(ETH_PTP_PositiveTime, 0, 0);
 801f680:	2200      	movs	r2, #0
 801f682:	2100      	movs	r1, #0
 801f684:	2000      	movs	r0, #0
 801f686:	f000 f969 	bl	801f95c <ETH_SetPTPTimeStampUpdate>

	/* Set Time stamp control register bit 2 (Time stamp init). */
	ETH_InitializePTPTimeStamp();
 801f68a:	f000 f8e5 	bl	801f858 <ETH_InitializePTPTimeStamp>

	/* Set PPS frequency to 128 Hz */
	ETH_PTPSetPPSFreq(7);
 801f68e:	2007      	movs	r0, #7
 801f690:	f000 f98c 	bl	801f9ac <ETH_PTPSetPPSFreq>

	/* The Time stamp counter starts operation as soon as it is initialized
	 * with the value written in the Time stamp update register. */
}
 801f694:	bf00      	nop
 801f696:	3708      	adds	r7, #8
 801f698:	46bd      	mov	sp, r7
 801f69a:	bd80      	pop	{r7, pc}
 801f69c:	35455a81 	.word	0x35455a81

0801f6a0 <ETH_PTPTime_SetTime>:
* Input          : Time with sign
* Output         : None
* Return         : None
*******************************************************************************/
void ETH_PTPTime_SetTime(struct ptptime_t * timestamp)
{
 801f6a0:	b580      	push	{r7, lr}
 801f6a2:	b088      	sub	sp, #32
 801f6a4:	af00      	add	r7, sp, #0
 801f6a6:	6078      	str	r0, [r7, #4]
	uint32_t SecondValue;
	uint32_t NanoSecondValue;
	uint32_t SubSecondValue;

	/* determine sign and correct Second and Nanosecond values */
	if(timestamp->tv_sec < 0 || (timestamp->tv_sec == 0 && timestamp->tv_nsec < 0))
 801f6a8:	687b      	ldr	r3, [r7, #4]
 801f6aa:	681b      	ldr	r3, [r3, #0]
 801f6ac:	2b00      	cmp	r3, #0
 801f6ae:	db07      	blt.n	801f6c0 <ETH_PTPTime_SetTime+0x20>
 801f6b0:	687b      	ldr	r3, [r7, #4]
 801f6b2:	681b      	ldr	r3, [r3, #0]
 801f6b4:	2b00      	cmp	r3, #0
 801f6b6:	d10f      	bne.n	801f6d8 <ETH_PTPTime_SetTime+0x38>
 801f6b8:	687b      	ldr	r3, [r7, #4]
 801f6ba:	685b      	ldr	r3, [r3, #4]
 801f6bc:	2b00      	cmp	r3, #0
 801f6be:	da0b      	bge.n	801f6d8 <ETH_PTPTime_SetTime+0x38>
	{
		Sign = ETH_PTP_NegativeTime;
 801f6c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801f6c4:	61fb      	str	r3, [r7, #28]
		SecondValue = -timestamp->tv_sec;
 801f6c6:	687b      	ldr	r3, [r7, #4]
 801f6c8:	681b      	ldr	r3, [r3, #0]
 801f6ca:	425b      	negs	r3, r3
 801f6cc:	61bb      	str	r3, [r7, #24]
		NanoSecondValue = -timestamp->tv_nsec;
 801f6ce:	687b      	ldr	r3, [r7, #4]
 801f6d0:	685b      	ldr	r3, [r3, #4]
 801f6d2:	425b      	negs	r3, r3
 801f6d4:	617b      	str	r3, [r7, #20]
 801f6d6:	e007      	b.n	801f6e8 <ETH_PTPTime_SetTime+0x48>
	}
	else
	{
		Sign = ETH_PTP_PositiveTime;
 801f6d8:	2300      	movs	r3, #0
 801f6da:	61fb      	str	r3, [r7, #28]
		SecondValue = timestamp->tv_sec;
 801f6dc:	687b      	ldr	r3, [r7, #4]
 801f6de:	681b      	ldr	r3, [r3, #0]
 801f6e0:	61bb      	str	r3, [r7, #24]
		NanoSecondValue = timestamp->tv_nsec;
 801f6e2:	687b      	ldr	r3, [r7, #4]
 801f6e4:	685b      	ldr	r3, [r3, #4]
 801f6e6:	617b      	str	r3, [r7, #20]
	}

	/* convert nanosecond to subseconds */
	SubSecondValue = ETH_PTPNanoSecond2SubSecond(NanoSecondValue);
 801f6e8:	6978      	ldr	r0, [r7, #20]
 801f6ea:	f7ff ff2d 	bl	801f548 <ETH_PTPNanoSecond2SubSecond>
 801f6ee:	6138      	str	r0, [r7, #16]

	/* Write the offset (positive or negative) in the Time stamp update high and low registers. */
	ETH_SetPTPTimeStampUpdate(Sign, SecondValue, SubSecondValue);
 801f6f0:	693a      	ldr	r2, [r7, #16]
 801f6f2:	69b9      	ldr	r1, [r7, #24]
 801f6f4:	69f8      	ldr	r0, [r7, #28]
 801f6f6:	f000 f931 	bl	801f95c <ETH_SetPTPTimeStampUpdate>
	/* Set Time stamp control register bit 2 (Time stamp init). */
	ETH_InitializePTPTimeStamp();
 801f6fa:	f000 f8ad 	bl	801f858 <ETH_InitializePTPTimeStamp>
	/* The Time stamp counter starts operation as soon as it is initialized
	 * with the value written in the Time stamp update register. */
	while(ETH_GetPTPFlagStatus(ETH_PTP_FLAG_TSSTI) == SET);
 801f6fe:	bf00      	nop
 801f700:	2004      	movs	r0, #4
 801f702:	f000 f8fd 	bl	801f900 <ETH_GetPTPFlagStatus>
 801f706:	4603      	mov	r3, r0
 801f708:	2b01      	cmp	r3, #1
 801f70a:	d0f9      	beq.n	801f700 <ETH_PTPTime_SetTime+0x60>

	struct ptptime_t timestamp2;
	ETH_PTPTime_GetTime(&timestamp2);
 801f70c:	f107 0308 	add.w	r3, r7, #8
 801f710:	4618      	mov	r0, r3
 801f712:	f7ff ff67 	bl	801f5e4 <ETH_PTPTime_GetTime>
}
 801f716:	bf00      	nop
 801f718:	3720      	adds	r7, #32
 801f71a:	46bd      	mov	sp, r7
 801f71c:	bd80      	pop	{r7, pc}
	...

0801f720 <ETH_PTPTime_AdjFreq>:
* Input          : Correction value in thousandth of ppm (Adj*10^9)
* Output         : None
* Return         : None
*******************************************************************************/
void ETH_PTPTime_AdjFreq(int32_t Adj)
{
 801f720:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801f724:	b088      	sub	sp, #32
 801f726:	af00      	add	r7, sp, #0
 801f728:	6178      	str	r0, [r7, #20]
	addend += ADJ_FREQ_BASE_ADDEND;
	*/

	/* 32bit estimation
	ADJ_LIMIT = ((1l<<63)/275/ADJ_FREQ_BASE_ADDEND) = 11258181 = 11 258 ppm*/
	if( Adj > 5120000) Adj = 5120000;
 801f72a:	697b      	ldr	r3, [r7, #20]
 801f72c:	4a3d      	ldr	r2, [pc, #244]	; (801f824 <ETH_PTPTime_AdjFreq+0x104>)
 801f72e:	4293      	cmp	r3, r2
 801f730:	dd01      	ble.n	801f736 <ETH_PTPTime_AdjFreq+0x16>
 801f732:	4b3c      	ldr	r3, [pc, #240]	; (801f824 <ETH_PTPTime_AdjFreq+0x104>)
 801f734:	617b      	str	r3, [r7, #20]
	if( Adj < -5120000) Adj = -5120000;
 801f736:	697b      	ldr	r3, [r7, #20]
 801f738:	4a3b      	ldr	r2, [pc, #236]	; (801f828 <ETH_PTPTime_AdjFreq+0x108>)
 801f73a:	4293      	cmp	r3, r2
 801f73c:	dc01      	bgt.n	801f742 <ETH_PTPTime_AdjFreq+0x22>
 801f73e:	4b3b      	ldr	r3, [pc, #236]	; (801f82c <ETH_PTPTime_AdjFreq+0x10c>)
 801f740:	617b      	str	r3, [r7, #20]

	addend = ((((275LL * Adj)>>8) * (ADJ_FREQ_BASE_ADDEND>>24))>>6) + ADJ_FREQ_BASE_ADDEND;
 801f742:	697b      	ldr	r3, [r7, #20]
 801f744:	4618      	mov	r0, r3
 801f746:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801f74a:	4602      	mov	r2, r0
 801f74c:	460b      	mov	r3, r1
 801f74e:	f04f 0400 	mov.w	r4, #0
 801f752:	f04f 0500 	mov.w	r5, #0
 801f756:	011d      	lsls	r5, r3, #4
 801f758:	ea45 7512 	orr.w	r5, r5, r2, lsr #28
 801f75c:	0114      	lsls	r4, r2, #4
 801f75e:	4622      	mov	r2, r4
 801f760:	462b      	mov	r3, r5
 801f762:	1812      	adds	r2, r2, r0
 801f764:	eb41 0303 	adc.w	r3, r1, r3
 801f768:	f04f 0400 	mov.w	r4, #0
 801f76c:	f04f 0500 	mov.w	r5, #0
 801f770:	00dd      	lsls	r5, r3, #3
 801f772:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801f776:	00d4      	lsls	r4, r2, #3
 801f778:	4622      	mov	r2, r4
 801f77a:	462b      	mov	r3, r5
 801f77c:	1812      	adds	r2, r2, r0
 801f77e:	eb41 0303 	adc.w	r3, r1, r3
 801f782:	1894      	adds	r4, r2, r2
 801f784:	60bc      	str	r4, [r7, #8]
 801f786:	415b      	adcs	r3, r3
 801f788:	60fb      	str	r3, [r7, #12]
 801f78a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801f78e:	eb12 0a00 	adds.w	sl, r2, r0
 801f792:	eb43 0b01 	adc.w	fp, r3, r1
 801f796:	f04f 0000 	mov.w	r0, #0
 801f79a:	f04f 0100 	mov.w	r1, #0
 801f79e:	ea4f 201a 	mov.w	r0, sl, lsr #8
 801f7a2:	ea40 600b 	orr.w	r0, r0, fp, lsl #24
 801f7a6:	ea4f 212b 	mov.w	r1, fp, asr #8
 801f7aa:	4602      	mov	r2, r0
 801f7ac:	460b      	mov	r3, r1
 801f7ae:	1894      	adds	r4, r2, r2
 801f7b0:	603c      	str	r4, [r7, #0]
 801f7b2:	415b      	adcs	r3, r3
 801f7b4:	607b      	str	r3, [r7, #4]
 801f7b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 801f7ba:	1812      	adds	r2, r2, r0
 801f7bc:	eb41 0303 	adc.w	r3, r1, r3
 801f7c0:	f04f 0400 	mov.w	r4, #0
 801f7c4:	f04f 0500 	mov.w	r5, #0
 801f7c8:	009d      	lsls	r5, r3, #2
 801f7ca:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 801f7ce:	0094      	lsls	r4, r2, #2
 801f7d0:	4622      	mov	r2, r4
 801f7d2:	462b      	mov	r3, r5
 801f7d4:	1812      	adds	r2, r2, r0
 801f7d6:	eb41 0303 	adc.w	r3, r1, r3
 801f7da:	f04f 0400 	mov.w	r4, #0
 801f7de:	f04f 0500 	mov.w	r5, #0
 801f7e2:	009d      	lsls	r5, r3, #2
 801f7e4:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 801f7e8:	0094      	lsls	r4, r2, #2
 801f7ea:	4622      	mov	r2, r4
 801f7ec:	462b      	mov	r3, r5
 801f7ee:	eb12 0800 	adds.w	r8, r2, r0
 801f7f2:	eb43 0901 	adc.w	r9, r3, r1
 801f7f6:	f04f 0200 	mov.w	r2, #0
 801f7fa:	f04f 0300 	mov.w	r3, #0
 801f7fe:	ea4f 1298 	mov.w	r2, r8, lsr #6
 801f802:	ea42 6289 	orr.w	r2, r2, r9, lsl #26
 801f806:	ea4f 13a9 	mov.w	r3, r9, asr #6
 801f80a:	4b09      	ldr	r3, [pc, #36]	; (801f830 <ETH_PTPTime_AdjFreq+0x110>)
 801f80c:	4413      	add	r3, r2
 801f80e:	61fb      	str	r3, [r7, #28]
	
	/* Reprogram the Time stamp addend register with new Rate value and set ETH_TPTSCR */
	ETH_SetPTPTimeStampAddend((uint32_t)addend);
 801f810:	69f8      	ldr	r0, [r7, #28]
 801f812:	f000 f8bb 	bl	801f98c <ETH_SetPTPTimeStampAddend>
	ETH_EnablePTPTimeStampAddend();
 801f816:	f000 f80d 	bl	801f834 <ETH_EnablePTPTimeStampAddend>
}
 801f81a:	bf00      	nop
 801f81c:	3720      	adds	r7, #32
 801f81e:	46bd      	mov	sp, r7
 801f820:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801f824:	004e2000 	.word	0x004e2000
 801f828:	ffb1dfff 	.word	0xffb1dfff
 801f82c:	ffb1e000 	.word	0xffb1e000
 801f830:	35455a81 	.word	0x35455a81

0801f834 <ETH_EnablePTPTimeStampAddend>:
  * @brief  Updated the PTP block for fine correction with the Time Stamp Addend register value.
  * @param  None
  * @retval None
  */
void ETH_EnablePTPTimeStampAddend(void)
{
 801f834:	b480      	push	{r7}
 801f836:	af00      	add	r7, sp, #0
	/* Enable the PTP block update with the Time Stamp Addend register value */
	ETH->MACTSCR |= ETH_MACTSCR_TSADDREG;
 801f838:	4b06      	ldr	r3, [pc, #24]	; (801f854 <ETH_EnablePTPTimeStampAddend+0x20>)
 801f83a:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	; 0xb00
 801f83e:	4a05      	ldr	r2, [pc, #20]	; (801f854 <ETH_EnablePTPTimeStampAddend+0x20>)
 801f840:	f043 0320 	orr.w	r3, r3, #32
 801f844:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
}
 801f848:	bf00      	nop
 801f84a:	46bd      	mov	sp, r7
 801f84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f850:	4770      	bx	lr
 801f852:	bf00      	nop
 801f854:	40028000 	.word	0x40028000

0801f858 <ETH_InitializePTPTimeStamp>:
  * @brief  Initialize the PTP Time Stamp
  * @param  None
  * @retval None
  */
void ETH_InitializePTPTimeStamp(void)
{
 801f858:	b480      	push	{r7}
 801f85a:	af00      	add	r7, sp, #0
	/* Initialize the PTP Time Stamp */
	ETH->MACTSCR |= ETH_MACTSCR_TSINIT;
 801f85c:	4b06      	ldr	r3, [pc, #24]	; (801f878 <ETH_InitializePTPTimeStamp+0x20>)
 801f85e:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	; 0xb00
 801f862:	4a05      	ldr	r2, [pc, #20]	; (801f878 <ETH_InitializePTPTimeStamp+0x20>)
 801f864:	f043 0304 	orr.w	r3, r3, #4
 801f868:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
}
 801f86c:	bf00      	nop
 801f86e:	46bd      	mov	sp, r7
 801f870:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f874:	4770      	bx	lr
 801f876:	bf00      	nop
 801f878:	40028000 	.word	0x40028000

0801f87c <ETH_PTPUpdateMethodConfig>:
  *     @arg ETH_PTP_FineUpdate   : Fine Update method
  *     @arg ETH_PTP_CoarseUpdate : Coarse Update method
  * @retval None
  */
void ETH_PTPUpdateMethodConfig(uint32_t UpdateMethod)
{
 801f87c:	b480      	push	{r7}
 801f87e:	b083      	sub	sp, #12
 801f880:	af00      	add	r7, sp, #0
 801f882:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_ETH_PTP_UPDATE(UpdateMethod));

	if (UpdateMethod != ETH_PTP_CoarseUpdate)
 801f884:	687b      	ldr	r3, [r7, #4]
 801f886:	2b00      	cmp	r3, #0
 801f888:	d008      	beq.n	801f89c <ETH_PTPUpdateMethodConfig+0x20>
	{
		/* Enable the PTP Fine Update method */
		ETH->MACTSCR |= ETH_MACTSCR_TSCFUPDT;
 801f88a:	4b0b      	ldr	r3, [pc, #44]	; (801f8b8 <ETH_PTPUpdateMethodConfig+0x3c>)
 801f88c:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	; 0xb00
 801f890:	4a09      	ldr	r2, [pc, #36]	; (801f8b8 <ETH_PTPUpdateMethodConfig+0x3c>)
 801f892:	f043 0302 	orr.w	r3, r3, #2
 801f896:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
	else
	{
		/* Disable the PTP Fine Update method */
		ETH->MACTSCR &= (~(uint32_t)ETH_MACTSCR_TSCFUPDT);
	}
}
 801f89a:	e007      	b.n	801f8ac <ETH_PTPUpdateMethodConfig+0x30>
		ETH->MACTSCR &= (~(uint32_t)ETH_MACTSCR_TSCFUPDT);
 801f89c:	4b06      	ldr	r3, [pc, #24]	; (801f8b8 <ETH_PTPUpdateMethodConfig+0x3c>)
 801f89e:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	; 0xb00
 801f8a2:	4a05      	ldr	r2, [pc, #20]	; (801f8b8 <ETH_PTPUpdateMethodConfig+0x3c>)
 801f8a4:	f023 0302 	bic.w	r3, r3, #2
 801f8a8:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
}
 801f8ac:	bf00      	nop
 801f8ae:	370c      	adds	r7, #12
 801f8b0:	46bd      	mov	sp, r7
 801f8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f8b6:	4770      	bx	lr
 801f8b8:	40028000 	.word	0x40028000

0801f8bc <ETH_PTPTimeStampCmd>:
  * @param  NewState: new state of the PTP time stamp for transmit and receive frames
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ETH_PTPTimeStampCmd(FunctionalState NewState)
{
 801f8bc:	b480      	push	{r7}
 801f8be:	b083      	sub	sp, #12
 801f8c0:	af00      	add	r7, sp, #0
 801f8c2:	4603      	mov	r3, r0
 801f8c4:	71fb      	strb	r3, [r7, #7]
	/* Check the parameters */
	assert_param(IS_FUNCTIONAL_STATE(NewState));

	if (NewState != DISABLE)
 801f8c6:	79fb      	ldrb	r3, [r7, #7]
 801f8c8:	2b00      	cmp	r3, #0
 801f8ca:	d008      	beq.n	801f8de <ETH_PTPTimeStampCmd+0x22>
	{
		/* Enable the PTP time stamp for transmit and receive frames */
		ETH->MACTSCR |= ETH_MACTSCR_TSENA;
 801f8cc:	4b0b      	ldr	r3, [pc, #44]	; (801f8fc <ETH_PTPTimeStampCmd+0x40>)
 801f8ce:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	; 0xb00
 801f8d2:	4a0a      	ldr	r2, [pc, #40]	; (801f8fc <ETH_PTPTimeStampCmd+0x40>)
 801f8d4:	f043 0301 	orr.w	r3, r3, #1
 801f8d8:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
	else
	{
		/* Disable the PTP time stamp for transmit and receive frames */
		ETH->MACTSCR &= (~(uint32_t)ETH_MACTSCR_TSENA);
	}
}
 801f8dc:	e007      	b.n	801f8ee <ETH_PTPTimeStampCmd+0x32>
		ETH->MACTSCR &= (~(uint32_t)ETH_MACTSCR_TSENA);
 801f8de:	4b07      	ldr	r3, [pc, #28]	; (801f8fc <ETH_PTPTimeStampCmd+0x40>)
 801f8e0:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	; 0xb00
 801f8e4:	4a05      	ldr	r2, [pc, #20]	; (801f8fc <ETH_PTPTimeStampCmd+0x40>)
 801f8e6:	f023 0301 	bic.w	r3, r3, #1
 801f8ea:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
}
 801f8ee:	bf00      	nop
 801f8f0:	370c      	adds	r7, #12
 801f8f2:	46bd      	mov	sp, r7
 801f8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f8f8:	4770      	bx	lr
 801f8fa:	bf00      	nop
 801f8fc:	40028000 	.word	0x40028000

0801f900 <ETH_GetPTPFlagStatus>:
  *     @arg ETH_PTP_FLAG_TSSTU : Time Stamp Update
  *     @arg ETH_PTP_FLAG_TSSTI  : Time Stamp Initialize
  * @retval The new state of ETHERNET PTP Flag (SET or RESET).
  */
FlagStatus ETH_GetPTPFlagStatus(uint32_t ETH_PTP_FLAG)
{
 801f900:	b480      	push	{r7}
 801f902:	b085      	sub	sp, #20
 801f904:	af00      	add	r7, sp, #0
 801f906:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 801f908:	2300      	movs	r3, #0
 801f90a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ETH_PTP_GET_FLAG(ETH_PTP_FLAG));

  if ((ETH->MACTSCR & ETH_PTP_FLAG) != (uint32_t)RESET)
 801f90c:	4b09      	ldr	r3, [pc, #36]	; (801f934 <ETH_GetPTPFlagStatus+0x34>)
 801f90e:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 801f912:	687b      	ldr	r3, [r7, #4]
 801f914:	4013      	ands	r3, r2
 801f916:	2b00      	cmp	r3, #0
 801f918:	d002      	beq.n	801f920 <ETH_GetPTPFlagStatus+0x20>
  {
    bitstatus = SET;
 801f91a:	2301      	movs	r3, #1
 801f91c:	73fb      	strb	r3, [r7, #15]
 801f91e:	e001      	b.n	801f924 <ETH_GetPTPFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 801f920:	2300      	movs	r3, #0
 801f922:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801f924:	7bfb      	ldrb	r3, [r7, #15]
}
 801f926:	4618      	mov	r0, r3
 801f928:	3714      	adds	r7, #20
 801f92a:	46bd      	mov	sp, r7
 801f92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f930:	4770      	bx	lr
 801f932:	bf00      	nop
 801f934:	40028000 	.word	0x40028000

0801f938 <ETH_SetPTPSubSecondIncrement>:
  * @brief  Sets the system time Sub-Second Increment value.
  * @param  SubSecondValue: specifies the PTP Sub-Second Increment Register value.
  * @retval None
  */
void ETH_SetPTPSubSecondIncrement(uint32_t SubSecondValue)
{
 801f938:	b480      	push	{r7}
 801f93a:	b083      	sub	sp, #12
 801f93c:	af00      	add	r7, sp, #0
 801f93e:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_ETH_PTP_SUBSECOND_INCREMENT(SubSecondValue));
	/* Set the PTP Sub-Second Increment Register */
	ETH->MACSSIR = (SubSecondValue<<16);
 801f940:	4a05      	ldr	r2, [pc, #20]	; (801f958 <ETH_SetPTPSubSecondIncrement+0x20>)
 801f942:	687b      	ldr	r3, [r7, #4]
 801f944:	041b      	lsls	r3, r3, #16
 801f946:	f8c2 3b04 	str.w	r3, [r2, #2820]	; 0xb04
}
 801f94a:	bf00      	nop
 801f94c:	370c      	adds	r7, #12
 801f94e:	46bd      	mov	sp, r7
 801f950:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f954:	4770      	bx	lr
 801f956:	bf00      	nop
 801f958:	40028000 	.word	0x40028000

0801f95c <ETH_SetPTPTimeStampUpdate>:
  * @param  SubSecondValue: specifies the PTP Time update sub-second value.
  *   This parameter is a 31 bit value, bit32 correspond to the sign.
  * @retval None
  */
void ETH_SetPTPTimeStampUpdate(uint32_t Sign, uint32_t SecondValue, uint32_t SubSecondValue)
{
 801f95c:	b480      	push	{r7}
 801f95e:	b085      	sub	sp, #20
 801f960:	af00      	add	r7, sp, #0
 801f962:	60f8      	str	r0, [r7, #12]
 801f964:	60b9      	str	r1, [r7, #8]
 801f966:	607a      	str	r2, [r7, #4]
	/* Check the parameters */
	assert_param(IS_ETH_PTP_TIME_SIGN(Sign));
	assert_param(IS_ETH_PTP_TIME_STAMP_UPDATE_SUBSECOND(SubSecondValue));

	/* Set the PTP Time Update High Register */
	ETH->MACSTSUR = SecondValue;
 801f968:	4a07      	ldr	r2, [pc, #28]	; (801f988 <ETH_SetPTPTimeStampUpdate+0x2c>)
 801f96a:	68bb      	ldr	r3, [r7, #8]
 801f96c:	f8c2 3b10 	str.w	r3, [r2, #2832]	; 0xb10

	/* Set the PTP Time Update Low Register with sign */
	ETH->MACSTNUR = Sign | SubSecondValue;
 801f970:	4905      	ldr	r1, [pc, #20]	; (801f988 <ETH_SetPTPTimeStampUpdate+0x2c>)
 801f972:	68fa      	ldr	r2, [r7, #12]
 801f974:	687b      	ldr	r3, [r7, #4]
 801f976:	4313      	orrs	r3, r2
 801f978:	f8c1 3b14 	str.w	r3, [r1, #2836]	; 0xb14
}
 801f97c:	bf00      	nop
 801f97e:	3714      	adds	r7, #20
 801f980:	46bd      	mov	sp, r7
 801f982:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f986:	4770      	bx	lr
 801f988:	40028000 	.word	0x40028000

0801f98c <ETH_SetPTPTimeStampAddend>:
  * @brief  Sets the Time Stamp Addend value.
  * @param  Value: specifies the PTP Time Stamp Addend Register value.
  * @retval None
  */
void ETH_SetPTPTimeStampAddend(uint32_t Value)
{
 801f98c:	b480      	push	{r7}
 801f98e:	b083      	sub	sp, #12
 801f990:	af00      	add	r7, sp, #0
 801f992:	6078      	str	r0, [r7, #4]
	/* Set the PTP Time Stamp Addend Register */
	ETH->MACTSAR = Value;
 801f994:	4a04      	ldr	r2, [pc, #16]	; (801f9a8 <ETH_SetPTPTimeStampAddend+0x1c>)
 801f996:	687b      	ldr	r3, [r7, #4]
 801f998:	f8c2 3b18 	str.w	r3, [r2, #2840]	; 0xb18
}
 801f99c:	bf00      	nop
 801f99e:	370c      	adds	r7, #12
 801f9a0:	46bd      	mov	sp, r7
 801f9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9a6:	4770      	bx	lr
 801f9a8:	40028000 	.word	0x40028000

0801f9ac <ETH_PTPSetPPSFreq>:
  * @brief  Sets the frequency of the PPS output.
  * @param  Freq: specifies the frequency of the PPS output in Hz as 2^Freq.
  * @retval None
  */
void ETH_PTPSetPPSFreq(uint8_t Freq)
{
 801f9ac:	b480      	push	{r7}
 801f9ae:	b083      	sub	sp, #12
 801f9b0:	af00      	add	r7, sp, #0
 801f9b2:	4603      	mov	r3, r0
 801f9b4:	71fb      	strb	r3, [r7, #7]
	/* Check the parameters */
	assert_param(IS_PPS_FREQ(Freq));

	ETH->MACPPSCR = Freq;
 801f9b6:	4a05      	ldr	r2, [pc, #20]	; (801f9cc <ETH_PTPSetPPSFreq+0x20>)
 801f9b8:	79fb      	ldrb	r3, [r7, #7]
 801f9ba:	f8c2 3b70 	str.w	r3, [r2, #2928]	; 0xb70
}
 801f9be:	bf00      	nop
 801f9c0:	370c      	adds	r7, #12
 801f9c2:	46bd      	mov	sp, r7
 801f9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9c8:	4770      	bx	lr
 801f9ca:	bf00      	nop
 801f9cc:	40028000 	.word	0x40028000

0801f9d0 <initClock>:
#include "../ptpd.h"

void initClock(PtpClock *ptpClock)
{
 801f9d0:	b580      	push	{r7, lr}
 801f9d2:	b082      	sub	sp, #8
 801f9d4:	af00      	add	r7, sp, #0
 801f9d6:	6078      	str	r0, [r7, #4]
	DBG("initClock\n");

	/* Clear vars */
	ptpClock->Tms.seconds = ptpClock->Tms.nanoseconds = 0;
 801f9d8:	687b      	ldr	r3, [r7, #4]
 801f9da:	2200      	movs	r2, #0
 801f9dc:	f8c3 232c 	str.w	r2, [r3, #812]	; 0x32c
 801f9e0:	687b      	ldr	r3, [r7, #4]
 801f9e2:	f8d3 232c 	ldr.w	r2, [r3, #812]	; 0x32c
 801f9e6:	687b      	ldr	r3, [r7, #4]
 801f9e8:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
	ptpClock->observedDrift = 0;  /* clears clock servo accumulator (the I term) */
 801f9ec:	687b      	ldr	r3, [r7, #4]
 801f9ee:	2200      	movs	r2, #0
 801f9f0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

	/* One way delay */
	ptpClock->owd_filt.n = 0;
 801f9f4:	687b      	ldr	r3, [r7, #4]
 801f9f6:	2200      	movs	r2, #0
 801f9f8:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
	ptpClock->owd_filt.s = ptpClock->servo.sDelay;
 801f9fc:	687b      	ldr	r3, [r7, #4]
 801f9fe:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 801fa02:	b21a      	sxth	r2, r3
 801fa04:	687b      	ldr	r3, [r7, #4]
 801fa06:	f8a3 23a8 	strh.w	r2, [r3, #936]	; 0x3a8

	/* Offset from master */
	ptpClock->ofm_filt.n = 0;
 801fa0a:	687b      	ldr	r3, [r7, #4]
 801fa0c:	2200      	movs	r2, #0
 801fa0e:	f8c3 239c 	str.w	r2, [r3, #924]	; 0x39c
	ptpClock->ofm_filt.s = ptpClock->servo.sOffset;
 801fa12:	687b      	ldr	r3, [r7, #4]
 801fa14:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 801fa18:	b21a      	sxth	r2, r3
 801fa1a:	687b      	ldr	r3, [r7, #4]
 801fa1c:	f8a3 2398 	strh.w	r2, [r3, #920]	; 0x398
		ptpClock->slv_filt.s = 6;
		ptpClock->offsetHistory[0] = 0;
		ptpClock->offsetHistory[1] = 0;
	}

	ptpClock->waitingForFollowUp = FALSE;
 801fa20:	687b      	ldr	r3, [r7, #4]
 801fa22:	2200      	movs	r2, #0
 801fa24:	f883 238c 	strb.w	r2, [r3, #908]	; 0x38c

	ptpClock->waitingForPDelayRespFollowUp = FALSE;
 801fa28:	687b      	ldr	r3, [r7, #4]
 801fa2a:	2200      	movs	r2, #0
 801fa2c:	f883 238d 	strb.w	r2, [r3, #909]	; 0x38d

	ptpClock->pdelay_t1.seconds = ptpClock->pdelay_t1.nanoseconds = 0;
 801fa30:	687b      	ldr	r3, [r7, #4]
 801fa32:	2200      	movs	r2, #0
 801fa34:	f8c3 233c 	str.w	r2, [r3, #828]	; 0x33c
 801fa38:	687b      	ldr	r3, [r7, #4]
 801fa3a:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 801fa3e:	687b      	ldr	r3, [r7, #4]
 801fa40:	f8c3 2338 	str.w	r2, [r3, #824]	; 0x338
	ptpClock->pdelay_t2.seconds = ptpClock->pdelay_t2.nanoseconds = 0;
 801fa44:	687b      	ldr	r3, [r7, #4]
 801fa46:	2200      	movs	r2, #0
 801fa48:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
 801fa4c:	687b      	ldr	r3, [r7, #4]
 801fa4e:	f8d3 2344 	ldr.w	r2, [r3, #836]	; 0x344
 801fa52:	687b      	ldr	r3, [r7, #4]
 801fa54:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
	ptpClock->pdelay_t3.seconds = ptpClock->pdelay_t3.nanoseconds = 0;
 801fa58:	687b      	ldr	r3, [r7, #4]
 801fa5a:	2200      	movs	r2, #0
 801fa5c:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
 801fa60:	687b      	ldr	r3, [r7, #4]
 801fa62:	f8d3 234c 	ldr.w	r2, [r3, #844]	; 0x34c
 801fa66:	687b      	ldr	r3, [r7, #4]
 801fa68:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	ptpClock->pdelay_t4.seconds = ptpClock->pdelay_t4.nanoseconds = 0;
 801fa6c:	687b      	ldr	r3, [r7, #4]
 801fa6e:	2200      	movs	r2, #0
 801fa70:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
 801fa74:	687b      	ldr	r3, [r7, #4]
 801fa76:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
 801fa7a:	687b      	ldr	r3, [r7, #4]
 801fa7c:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350

	/* Reset parent statistics */
	ptpClock->parentDS.parentStats = FALSE;
 801fa80:	687b      	ldr	r3, [r7, #4]
 801fa82:	2200      	movs	r2, #0
 801fa84:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	ptpClock->parentDS.observedParentClockPhaseChangeRate = 0;
 801fa88:	687b      	ldr	r3, [r7, #4]
 801fa8a:	2200      	movs	r2, #0
 801fa8c:	639a      	str	r2, [r3, #56]	; 0x38
	ptpClock->parentDS.observedParentOffsetScaledLogVariance = 0;
 801fa8e:	687b      	ldr	r3, [r7, #4]
 801fa90:	2200      	movs	r2, #0
 801fa92:	869a      	strh	r2, [r3, #52]	; 0x34

	/* Level clock */
	if (!ptpClock->servo.noAdjust)
 801fa94:	687b      	ldr	r3, [r7, #4]
 801fa96:	f893 3421 	ldrb.w	r3, [r3, #1057]	; 0x421
 801fa9a:	f083 0301 	eor.w	r3, r3, #1
 801fa9e:	b2db      	uxtb	r3, r3
 801faa0:	2b00      	cmp	r3, #0
 801faa2:	d002      	beq.n	801faaa <initClock+0xda>
		adjFreq(0);
 801faa4:	2000      	movs	r0, #0
 801faa6:	f000 faed 	bl	8020084 <adjFreq>

	netEmptyEventQ(&ptpClock->netPath);
 801faaa:	687b      	ldr	r3, [r7, #4]
 801faac:	f503 7373 	add.w	r3, r3, #972	; 0x3cc
 801fab0:	4618      	mov	r0, r3
 801fab2:	f7ff fc1d 	bl	801f2f0 <netEmptyEventQ>
}
 801fab6:	bf00      	nop
 801fab8:	3708      	adds	r7, #8
 801faba:	46bd      	mov	sp, r7
 801fabc:	bd80      	pop	{r7, pc}

0801fabe <order>:

static int32_t order(int32_t n)
{
 801fabe:	b580      	push	{r7, lr}
 801fac0:	b082      	sub	sp, #8
 801fac2:	af00      	add	r7, sp, #0
 801fac4:	6078      	str	r0, [r7, #4]
	if (n < 0) {
 801fac6:	687b      	ldr	r3, [r7, #4]
 801fac8:	2b00      	cmp	r3, #0
 801faca:	da02      	bge.n	801fad2 <order+0x14>
		n = -n;
 801facc:	687b      	ldr	r3, [r7, #4]
 801face:	425b      	negs	r3, r3
 801fad0:	607b      	str	r3, [r7, #4]
	}
	if (n == 0) {
 801fad2:	687b      	ldr	r3, [r7, #4]
 801fad4:	2b00      	cmp	r3, #0
 801fad6:	d101      	bne.n	801fadc <order+0x1e>
		return 0;
 801fad8:	2300      	movs	r3, #0
 801fada:	e004      	b.n	801fae6 <order+0x28>
	}
	return floorLog2(n);
 801fadc:	687b      	ldr	r3, [r7, #4]
 801fade:	4618      	mov	r0, r3
 801fae0:	f7fc fb56 	bl	801c190 <floorLog2>
 801fae4:	4603      	mov	r3, r0
}
 801fae6:	4618      	mov	r0, r3
 801fae8:	3708      	adds	r7, #8
 801faea:	46bd      	mov	sp, r7
 801faec:	bd80      	pop	{r7, pc}

0801faee <filter>:

/* Exponencial smoothing */
static void filter(int32_t * nsec_current, Filter * filt)
{
 801faee:	b580      	push	{r7, lr}
 801faf0:	b084      	sub	sp, #16
 801faf2:	af00      	add	r7, sp, #0
 801faf4:	6078      	str	r0, [r7, #4]
 801faf6:	6039      	str	r1, [r7, #0]
			y_sum[n] = y_sum[n-1] + x[n-1] - y[n-1]
			y[n] = y_sum[n] / 2^s
	*/

	/* Increment number of samples */
	filt->n++;
 801faf8:	683b      	ldr	r3, [r7, #0]
 801fafa:	68db      	ldr	r3, [r3, #12]
 801fafc:	1c5a      	adds	r2, r3, #1
 801fafe:	683b      	ldr	r3, [r7, #0]
 801fb00:	60da      	str	r2, [r3, #12]

	/* If it is first time, we are running filter, initialize it */
	if (filt->n == 1)
 801fb02:	683b      	ldr	r3, [r7, #0]
 801fb04:	68db      	ldr	r3, [r3, #12]
 801fb06:	2b01      	cmp	r3, #1
 801fb08:	d10a      	bne.n	801fb20 <filter+0x32>
	{
			filt->y_prev = *nsec_current;
 801fb0a:	687b      	ldr	r3, [r7, #4]
 801fb0c:	681a      	ldr	r2, [r3, #0]
 801fb0e:	683b      	ldr	r3, [r7, #0]
 801fb10:	601a      	str	r2, [r3, #0]
			filt->y_sum = *nsec_current;
 801fb12:	687b      	ldr	r3, [r7, #4]
 801fb14:	681a      	ldr	r2, [r3, #0]
 801fb16:	683b      	ldr	r3, [r7, #0]
 801fb18:	605a      	str	r2, [r3, #4]
			filt->s_prev = 0;
 801fb1a:	683b      	ldr	r3, [r7, #0]
 801fb1c:	2200      	movs	r2, #0
 801fb1e:	815a      	strh	r2, [r3, #10]
	}

	s = filt->s;
 801fb20:	683b      	ldr	r3, [r7, #0]
 801fb22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801fb26:	60fb      	str	r3, [r7, #12]

	/* Speedup filter, if not 2^s > n */
	if ((1<<s) > filt->n)
 801fb28:	2201      	movs	r2, #1
 801fb2a:	68fb      	ldr	r3, [r7, #12]
 801fb2c:	409a      	lsls	r2, r3
 801fb2e:	683b      	ldr	r3, [r7, #0]
 801fb30:	68db      	ldr	r3, [r3, #12]
 801fb32:	429a      	cmp	r2, r3
 801fb34:	dd06      	ble.n	801fb44 <filter+0x56>
	{
		/* Lower the filter order */
		s = order(filt->n);
 801fb36:	683b      	ldr	r3, [r7, #0]
 801fb38:	68db      	ldr	r3, [r3, #12]
 801fb3a:	4618      	mov	r0, r3
 801fb3c:	f7ff ffbf 	bl	801fabe <order>
 801fb40:	60f8      	str	r0, [r7, #12]
 801fb42:	e004      	b.n	801fb4e <filter+0x60>
	}
	else
	{
		/* Avoid overflowing of n */
		filt->n = 1<<s;
 801fb44:	2201      	movs	r2, #1
 801fb46:	68fb      	ldr	r3, [r7, #12]
 801fb48:	409a      	lsls	r2, r3
 801fb4a:	683b      	ldr	r3, [r7, #0]
 801fb4c:	60da      	str	r2, [r3, #12]
	}

	/* Avoid overflowing of filter. 30 is because using signed 32bit integers */
	s2 = 30 - order(max(filt->y_prev, *nsec_current));
 801fb4e:	687b      	ldr	r3, [r7, #4]
 801fb50:	681a      	ldr	r2, [r3, #0]
 801fb52:	683b      	ldr	r3, [r7, #0]
 801fb54:	681b      	ldr	r3, [r3, #0]
 801fb56:	4293      	cmp	r3, r2
 801fb58:	bfb8      	it	lt
 801fb5a:	4613      	movlt	r3, r2
 801fb5c:	4618      	mov	r0, r3
 801fb5e:	f7ff ffae 	bl	801fabe <order>
 801fb62:	4603      	mov	r3, r0
 801fb64:	f1c3 031e 	rsb	r3, r3, #30
 801fb68:	60bb      	str	r3, [r7, #8]

	/* Use the lower filter order, higher will overflow */
	s = min(s, s2);
 801fb6a:	68fa      	ldr	r2, [r7, #12]
 801fb6c:	68bb      	ldr	r3, [r7, #8]
 801fb6e:	4293      	cmp	r3, r2
 801fb70:	bfa8      	it	ge
 801fb72:	4613      	movge	r3, r2
 801fb74:	60fb      	str	r3, [r7, #12]

	/* If the order of the filter changed, change also y_sum value */
	if (filt->s_prev > s) {
 801fb76:	683b      	ldr	r3, [r7, #0]
 801fb78:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801fb7c:	461a      	mov	r2, r3
 801fb7e:	68fb      	ldr	r3, [r7, #12]
 801fb80:	4293      	cmp	r3, r2
 801fb82:	da0b      	bge.n	801fb9c <filter+0xae>
		filt->y_sum >>= (filt->s_prev - s);
 801fb84:	683b      	ldr	r3, [r7, #0]
 801fb86:	685a      	ldr	r2, [r3, #4]
 801fb88:	683b      	ldr	r3, [r7, #0]
 801fb8a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801fb8e:	4619      	mov	r1, r3
 801fb90:	68fb      	ldr	r3, [r7, #12]
 801fb92:	1acb      	subs	r3, r1, r3
 801fb94:	411a      	asrs	r2, r3
 801fb96:	683b      	ldr	r3, [r7, #0]
 801fb98:	605a      	str	r2, [r3, #4]
 801fb9a:	e011      	b.n	801fbc0 <filter+0xd2>
	} else if (filt->s_prev < s) {
 801fb9c:	683b      	ldr	r3, [r7, #0]
 801fb9e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801fba2:	461a      	mov	r2, r3
 801fba4:	68fb      	ldr	r3, [r7, #12]
 801fba6:	4293      	cmp	r3, r2
 801fba8:	dd0a      	ble.n	801fbc0 <filter+0xd2>
		filt->y_sum <<= (s - filt->s_prev);
 801fbaa:	683b      	ldr	r3, [r7, #0]
 801fbac:	685a      	ldr	r2, [r3, #4]
 801fbae:	683b      	ldr	r3, [r7, #0]
 801fbb0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801fbb4:	4619      	mov	r1, r3
 801fbb6:	68fb      	ldr	r3, [r7, #12]
 801fbb8:	1a5b      	subs	r3, r3, r1
 801fbba:	409a      	lsls	r2, r3
 801fbbc:	683b      	ldr	r3, [r7, #0]
 801fbbe:	605a      	str	r2, [r3, #4]
	}

	/* Compute the filter itself */
	filt->y_sum += *nsec_current - filt->y_prev;
 801fbc0:	683b      	ldr	r3, [r7, #0]
 801fbc2:	685a      	ldr	r2, [r3, #4]
 801fbc4:	687b      	ldr	r3, [r7, #4]
 801fbc6:	6819      	ldr	r1, [r3, #0]
 801fbc8:	683b      	ldr	r3, [r7, #0]
 801fbca:	681b      	ldr	r3, [r3, #0]
 801fbcc:	1acb      	subs	r3, r1, r3
 801fbce:	441a      	add	r2, r3
 801fbd0:	683b      	ldr	r3, [r7, #0]
 801fbd2:	605a      	str	r2, [r3, #4]
	filt->y_prev = filt->y_sum >> s;
 801fbd4:	683b      	ldr	r3, [r7, #0]
 801fbd6:	685a      	ldr	r2, [r3, #4]
 801fbd8:	68fb      	ldr	r3, [r7, #12]
 801fbda:	411a      	asrs	r2, r3
 801fbdc:	683b      	ldr	r3, [r7, #0]
 801fbde:	601a      	str	r2, [r3, #0]

	/* Save previous order of the filter */
	filt->s_prev = s;
 801fbe0:	68fb      	ldr	r3, [r7, #12]
 801fbe2:	b21a      	sxth	r2, r3
 801fbe4:	683b      	ldr	r3, [r7, #0]
 801fbe6:	815a      	strh	r2, [r3, #10]

	DBGV("filter: %d -> %d (%d)\n", *nsec_current, filt->y_prev, s);

	/* Actualize target value */
	*nsec_current = filt->y_prev;
 801fbe8:	683b      	ldr	r3, [r7, #0]
 801fbea:	681a      	ldr	r2, [r3, #0]
 801fbec:	687b      	ldr	r3, [r7, #4]
 801fbee:	601a      	str	r2, [r3, #0]
}
 801fbf0:	bf00      	nop
 801fbf2:	3710      	adds	r7, #16
 801fbf4:	46bd      	mov	sp, r7
 801fbf6:	bd80      	pop	{r7, pc}

0801fbf8 <updateOffset>:

/* 11.2 */
void updateOffset(PtpClock *ptpClock, const TimeInternal *syncEventIngressTimestamp,
									const TimeInternal *preciseOriginTimestamp, const TimeInternal *correctionField)
{
 801fbf8:	b580      	push	{r7, lr}
 801fbfa:	b084      	sub	sp, #16
 801fbfc:	af00      	add	r7, sp, #0
 801fbfe:	60f8      	str	r0, [r7, #12]
 801fc00:	60b9      	str	r1, [r7, #8]
 801fc02:	607a      	str	r2, [r7, #4]
 801fc04:	603b      	str	r3, [r7, #0]
	/*  <offsetFromMaster> = <syncEventIngressTimestamp> - <preciseOriginTimestamp>
		 - <meanPathDelay>  -  correctionField  of  Sync  message
		 -  correctionField  of  Follow_Up message. */

	/* Compute offsetFromMaster */
	subTime(&ptpClock->Tms, syncEventIngressTimestamp, preciseOriginTimestamp);
 801fc06:	68fb      	ldr	r3, [r7, #12]
 801fc08:	f503 734a 	add.w	r3, r3, #808	; 0x328
 801fc0c:	687a      	ldr	r2, [r7, #4]
 801fc0e:	68b9      	ldr	r1, [r7, #8]
 801fc10:	4618      	mov	r0, r3
 801fc12:	f7fc fa74 	bl	801c0fe <subTime>
	subTime(&ptpClock->Tms, &ptpClock->Tms, correctionField);
 801fc16:	68fb      	ldr	r3, [r7, #12]
 801fc18:	f503 704a 	add.w	r0, r3, #808	; 0x328
 801fc1c:	68fb      	ldr	r3, [r7, #12]
 801fc1e:	f503 734a 	add.w	r3, r3, #808	; 0x328
 801fc22:	683a      	ldr	r2, [r7, #0]
 801fc24:	4619      	mov	r1, r3
 801fc26:	f7fc fa6a 	bl	801c0fe <subTime>

	ptpClock->currentDS.offsetFromMaster = ptpClock->Tms;
 801fc2a:	68fb      	ldr	r3, [r7, #12]
 801fc2c:	68fa      	ldr	r2, [r7, #12]
 801fc2e:	3318      	adds	r3, #24
 801fc30:	f502 724a 	add.w	r2, r2, #808	; 0x328
 801fc34:	e892 0003 	ldmia.w	r2, {r0, r1}
 801fc38:	e883 0003 	stmia.w	r3, {r0, r1}

	switch (ptpClock->portDS.delayMechanism)
 801fc3c:	68fb      	ldr	r3, [r7, #12]
 801fc3e:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 801fc42:	2b01      	cmp	r3, #1
 801fc44:	d002      	beq.n	801fc4c <updateOffset+0x54>
 801fc46:	2b02      	cmp	r3, #2
 801fc48:	d00c      	beq.n	801fc64 <updateOffset+0x6c>
		case P2P:
				subTime(&ptpClock->currentDS.offsetFromMaster, &ptpClock->currentDS.offsetFromMaster, &ptpClock->portDS.peerMeanPathDelay);
				break;

		default:
				break;
 801fc4a:	e017      	b.n	801fc7c <updateOffset+0x84>
				subTime(&ptpClock->currentDS.offsetFromMaster, &ptpClock->currentDS.offsetFromMaster, &ptpClock->currentDS.meanPathDelay);
 801fc4c:	68fb      	ldr	r3, [r7, #12]
 801fc4e:	f103 0018 	add.w	r0, r3, #24
 801fc52:	68fb      	ldr	r3, [r7, #12]
 801fc54:	f103 0118 	add.w	r1, r3, #24
 801fc58:	68fb      	ldr	r3, [r7, #12]
 801fc5a:	3320      	adds	r3, #32
 801fc5c:	461a      	mov	r2, r3
 801fc5e:	f7fc fa4e 	bl	801c0fe <subTime>
				break;
 801fc62:	e00b      	b.n	801fc7c <updateOffset+0x84>
				subTime(&ptpClock->currentDS.offsetFromMaster, &ptpClock->currentDS.offsetFromMaster, &ptpClock->portDS.peerMeanPathDelay);
 801fc64:	68fb      	ldr	r3, [r7, #12]
 801fc66:	f103 0018 	add.w	r0, r3, #24
 801fc6a:	68fb      	ldr	r3, [r7, #12]
 801fc6c:	f103 0118 	add.w	r1, r3, #24
 801fc70:	68fb      	ldr	r3, [r7, #12]
 801fc72:	3364      	adds	r3, #100	; 0x64
 801fc74:	461a      	mov	r2, r3
 801fc76:	f7fc fa42 	bl	801c0fe <subTime>
				break;
 801fc7a:	bf00      	nop
	}

	if (ptpClock->currentDS.offsetFromMaster.seconds != 0)
 801fc7c:	68fb      	ldr	r3, [r7, #12]
 801fc7e:	699b      	ldr	r3, [r3, #24]
 801fc80:	2b00      	cmp	r3, #0
 801fc82:	d00d      	beq.n	801fca0 <updateOffset+0xa8>
	{
		if (ptpClock->portDS.portState == PTP_SLAVE)
 801fc84:	68fb      	ldr	r3, [r7, #12]
 801fc86:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 801fc8a:	2b08      	cmp	r3, #8
 801fc8c:	d141      	bne.n	801fd12 <updateOffset+0x11a>
		{
				setFlag(ptpClock->events, SYNCHRONIZATION_FAULT);
 801fc8e:	68fb      	ldr	r3, [r7, #12]
 801fc90:	f8d3 3434 	ldr.w	r3, [r3, #1076]	; 0x434
 801fc94:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801fc98:	68fb      	ldr	r3, [r7, #12]
 801fc9a:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
		}

		DBGV("updateOffset: cannot filter seconds\n");

		return;
 801fc9e:	e038      	b.n	801fd12 <updateOffset+0x11a>
	}

	/* Filter offsetFromMaster */
	filter(&ptpClock->currentDS.offsetFromMaster.nanoseconds, &ptpClock->ofm_filt);
 801fca0:	68fb      	ldr	r3, [r7, #12]
 801fca2:	f103 021c 	add.w	r2, r3, #28
 801fca6:	68fb      	ldr	r3, [r7, #12]
 801fca8:	f503 7364 	add.w	r3, r3, #912	; 0x390
 801fcac:	4619      	mov	r1, r3
 801fcae:	4610      	mov	r0, r2
 801fcb0:	f7ff ff1d 	bl	801faee <filter>

	/* Check results */
	if (abs(ptpClock->currentDS.offsetFromMaster.nanoseconds) < DEFAULT_CALIBRATED_OFFSET_NS)
 801fcb4:	68fb      	ldr	r3, [r7, #12]
 801fcb6:	69db      	ldr	r3, [r3, #28]
 801fcb8:	4a18      	ldr	r2, [pc, #96]	; (801fd1c <updateOffset+0x124>)
 801fcba:	4293      	cmp	r3, r2
 801fcbc:	db13      	blt.n	801fce6 <updateOffset+0xee>
 801fcbe:	68fb      	ldr	r3, [r7, #12]
 801fcc0:	69db      	ldr	r3, [r3, #28]
 801fcc2:	f242 720f 	movw	r2, #9999	; 0x270f
 801fcc6:	4293      	cmp	r3, r2
 801fcc8:	dc0d      	bgt.n	801fce6 <updateOffset+0xee>
	{
		if (ptpClock->portDS.portState == PTP_UNCALIBRATED)
 801fcca:	68fb      	ldr	r3, [r7, #12]
 801fccc:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 801fcd0:	2b07      	cmp	r3, #7
 801fcd2:	d11f      	bne.n	801fd14 <updateOffset+0x11c>
		{
				setFlag(ptpClock->events, MASTER_CLOCK_SELECTED);
 801fcd4:	68fb      	ldr	r3, [r7, #12]
 801fcd6:	f8d3 3434 	ldr.w	r3, [r3, #1076]	; 0x434
 801fcda:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801fcde:	68fb      	ldr	r3, [r7, #12]
 801fce0:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
		if (ptpClock->portDS.portState == PTP_UNCALIBRATED)
 801fce4:	e016      	b.n	801fd14 <updateOffset+0x11c>
		}
	}
	else if (abs(ptpClock->currentDS.offsetFromMaster.nanoseconds) > DEFAULT_UNCALIBRATED_OFFSET_NS)
 801fce6:	68fb      	ldr	r3, [r7, #12]
 801fce8:	69db      	ldr	r3, [r3, #28]
 801fcea:	2b00      	cmp	r3, #0
 801fcec:	bfb8      	it	lt
 801fcee:	425b      	neglt	r3, r3
 801fcf0:	4a0b      	ldr	r2, [pc, #44]	; (801fd20 <updateOffset+0x128>)
 801fcf2:	4293      	cmp	r3, r2
 801fcf4:	dd0e      	ble.n	801fd14 <updateOffset+0x11c>
	{
		if (ptpClock->portDS.portState == PTP_SLAVE)
 801fcf6:	68fb      	ldr	r3, [r7, #12]
 801fcf8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 801fcfc:	2b08      	cmp	r3, #8
 801fcfe:	d109      	bne.n	801fd14 <updateOffset+0x11c>
		{
				setFlag(ptpClock->events, SYNCHRONIZATION_FAULT);
 801fd00:	68fb      	ldr	r3, [r7, #12]
 801fd02:	f8d3 3434 	ldr.w	r3, [r3, #1076]	; 0x434
 801fd06:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801fd0a:	68fb      	ldr	r3, [r7, #12]
 801fd0c:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
 801fd10:	e000      	b.n	801fd14 <updateOffset+0x11c>
		return;
 801fd12:	bf00      	nop
		}
	}
}
 801fd14:	3710      	adds	r7, #16
 801fd16:	46bd      	mov	sp, r7
 801fd18:	bd80      	pop	{r7, pc}
 801fd1a:	bf00      	nop
 801fd1c:	ffffd8f1 	.word	0xffffd8f1
 801fd20:	000f4240 	.word	0x000f4240

0801fd24 <updateDelay>:

/* 11.3 */
void updateDelay(PtpClock * ptpClock, const TimeInternal *delayEventEgressTimestamp,
								 const TimeInternal *recieveTimestamp, const TimeInternal *correctionField)
{
 801fd24:	b580      	push	{r7, lr}
 801fd26:	b084      	sub	sp, #16
 801fd28:	af00      	add	r7, sp, #0
 801fd2a:	60f8      	str	r0, [r7, #12]
 801fd2c:	60b9      	str	r1, [r7, #8]
 801fd2e:	607a      	str	r2, [r7, #4]
 801fd30:	603b      	str	r3, [r7, #0]
	/* Tms valid ? */
	if (0 == ptpClock->ofm_filt.n)
 801fd32:	68fb      	ldr	r3, [r7, #12]
 801fd34:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
 801fd38:	2b00      	cmp	r3, #0
 801fd3a:	d031      	beq.n	801fda0 <updateDelay+0x7c>
	{
		DBGV("updateDelay: Tms is not valid");
		return;
	}

	subTime(&ptpClock->Tsm, recieveTimestamp, delayEventEgressTimestamp);
 801fd3c:	68fb      	ldr	r3, [r7, #12]
 801fd3e:	f503 734c 	add.w	r3, r3, #816	; 0x330
 801fd42:	68ba      	ldr	r2, [r7, #8]
 801fd44:	6879      	ldr	r1, [r7, #4]
 801fd46:	4618      	mov	r0, r3
 801fd48:	f7fc f9d9 	bl	801c0fe <subTime>
	subTime(&ptpClock->Tsm, &ptpClock->Tsm, correctionField);
 801fd4c:	68fb      	ldr	r3, [r7, #12]
 801fd4e:	f503 704c 	add.w	r0, r3, #816	; 0x330
 801fd52:	68fb      	ldr	r3, [r7, #12]
 801fd54:	f503 734c 	add.w	r3, r3, #816	; 0x330
 801fd58:	683a      	ldr	r2, [r7, #0]
 801fd5a:	4619      	mov	r1, r3
 801fd5c:	f7fc f9cf 	bl	801c0fe <subTime>
	addTime(&ptpClock->currentDS.meanPathDelay, &ptpClock->Tms, &ptpClock->Tsm);
 801fd60:	68fb      	ldr	r3, [r7, #12]
 801fd62:	f103 0020 	add.w	r0, r3, #32
 801fd66:	68fb      	ldr	r3, [r7, #12]
 801fd68:	f503 714a 	add.w	r1, r3, #808	; 0x328
 801fd6c:	68fb      	ldr	r3, [r7, #12]
 801fd6e:	f503 734c 	add.w	r3, r3, #816	; 0x330
 801fd72:	461a      	mov	r2, r3
 801fd74:	f7fc f9a8 	bl	801c0c8 <addTime>
	div2Time(&ptpClock->currentDS.meanPathDelay);
 801fd78:	68fb      	ldr	r3, [r7, #12]
 801fd7a:	3320      	adds	r3, #32
 801fd7c:	4618      	mov	r0, r3
 801fd7e:	f7fc f9d9 	bl	801c134 <div2Time>

	/* Filter delay */
	if (0 != ptpClock->currentDS.meanPathDelay.seconds)
 801fd82:	68fb      	ldr	r3, [r7, #12]
 801fd84:	6a1b      	ldr	r3, [r3, #32]
 801fd86:	2b00      	cmp	r3, #0
 801fd88:	d10b      	bne.n	801fda2 <updateDelay+0x7e>
	{
		DBGV("updateDelay: cannot filter with seconds");
	}
	else
	{
		filter(&ptpClock->currentDS.meanPathDelay.nanoseconds, &ptpClock->owd_filt);
 801fd8a:	68fb      	ldr	r3, [r7, #12]
 801fd8c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 801fd90:	68fb      	ldr	r3, [r7, #12]
 801fd92:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 801fd96:	4619      	mov	r1, r3
 801fd98:	4610      	mov	r0, r2
 801fd9a:	f7ff fea8 	bl	801faee <filter>
 801fd9e:	e000      	b.n	801fda2 <updateDelay+0x7e>
		return;
 801fda0:	bf00      	nop
	}
}
 801fda2:	3710      	adds	r7, #16
 801fda4:	46bd      	mov	sp, r7
 801fda6:	bd80      	pop	{r7, pc}

0801fda8 <updatePeerDelay>:

void updatePeerDelay(PtpClock *ptpClock, const TimeInternal *correctionField, bool  twoStep)
{
 801fda8:	b580      	push	{r7, lr}
 801fdaa:	b088      	sub	sp, #32
 801fdac:	af00      	add	r7, sp, #0
 801fdae:	60f8      	str	r0, [r7, #12]
 801fdb0:	60b9      	str	r1, [r7, #8]
 801fdb2:	4613      	mov	r3, r2
 801fdb4:	71fb      	strb	r3, [r7, #7]
	DBGV("updatePeerDelay\n");

	if (twoStep)
 801fdb6:	79fb      	ldrb	r3, [r7, #7]
 801fdb8:	2b00      	cmp	r3, #0
 801fdba:	d01f      	beq.n	801fdfc <updatePeerDelay+0x54>
	{
		TimeInternal Tab, Tba;
		subTime(&Tab, &ptpClock->pdelay_t2 , &ptpClock->pdelay_t1);
 801fdbc:	68fb      	ldr	r3, [r7, #12]
 801fdbe:	f503 7150 	add.w	r1, r3, #832	; 0x340
 801fdc2:	68fb      	ldr	r3, [r7, #12]
 801fdc4:	f503 724e 	add.w	r2, r3, #824	; 0x338
 801fdc8:	f107 0318 	add.w	r3, r7, #24
 801fdcc:	4618      	mov	r0, r3
 801fdce:	f7fc f996 	bl	801c0fe <subTime>
		subTime(&Tba, &ptpClock->pdelay_t4, &ptpClock->pdelay_t3);
 801fdd2:	68fb      	ldr	r3, [r7, #12]
 801fdd4:	f503 7154 	add.w	r1, r3, #848	; 0x350
 801fdd8:	68fb      	ldr	r3, [r7, #12]
 801fdda:	f503 7252 	add.w	r2, r3, #840	; 0x348
 801fdde:	f107 0310 	add.w	r3, r7, #16
 801fde2:	4618      	mov	r0, r3
 801fde4:	f7fc f98b 	bl	801c0fe <subTime>
		addTime(&ptpClock->portDS.peerMeanPathDelay, &Tab, &Tba);
 801fde8:	68fb      	ldr	r3, [r7, #12]
 801fdea:	3364      	adds	r3, #100	; 0x64
 801fdec:	f107 0210 	add.w	r2, r7, #16
 801fdf0:	f107 0118 	add.w	r1, r7, #24
 801fdf4:	4618      	mov	r0, r3
 801fdf6:	f7fc f967 	bl	801c0c8 <addTime>
 801fdfa:	e00b      	b.n	801fe14 <updatePeerDelay+0x6c>
	}
	else /* One step  clock */
	{
		subTime(&ptpClock->portDS.peerMeanPathDelay, &ptpClock->pdelay_t4, &ptpClock->pdelay_t1);
 801fdfc:	68fb      	ldr	r3, [r7, #12]
 801fdfe:	f103 0064 	add.w	r0, r3, #100	; 0x64
 801fe02:	68fb      	ldr	r3, [r7, #12]
 801fe04:	f503 7154 	add.w	r1, r3, #848	; 0x350
 801fe08:	68fb      	ldr	r3, [r7, #12]
 801fe0a:	f503 734e 	add.w	r3, r3, #824	; 0x338
 801fe0e:	461a      	mov	r2, r3
 801fe10:	f7fc f975 	bl	801c0fe <subTime>
	}

	subTime(&ptpClock->portDS.peerMeanPathDelay, &ptpClock->portDS.peerMeanPathDelay, correctionField);
 801fe14:	68fb      	ldr	r3, [r7, #12]
 801fe16:	f103 0064 	add.w	r0, r3, #100	; 0x64
 801fe1a:	68fb      	ldr	r3, [r7, #12]
 801fe1c:	3364      	adds	r3, #100	; 0x64
 801fe1e:	68ba      	ldr	r2, [r7, #8]
 801fe20:	4619      	mov	r1, r3
 801fe22:	f7fc f96c 	bl	801c0fe <subTime>
	div2Time(&ptpClock->portDS.peerMeanPathDelay);
 801fe26:	68fb      	ldr	r3, [r7, #12]
 801fe28:	3364      	adds	r3, #100	; 0x64
 801fe2a:	4618      	mov	r0, r3
 801fe2c:	f7fc f982 	bl	801c134 <div2Time>

	/* Filter delay */
	if (ptpClock->portDS.peerMeanPathDelay.seconds != 0)
 801fe30:	68fb      	ldr	r3, [r7, #12]
 801fe32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801fe34:	2b00      	cmp	r3, #0
 801fe36:	d10a      	bne.n	801fe4e <updatePeerDelay+0xa6>
		DBGV("updatePeerDelay: cannot filter with seconds");
		return;
	}
	else
	{
		filter(&ptpClock->portDS.peerMeanPathDelay.nanoseconds, &ptpClock->owd_filt);
 801fe38:	68fb      	ldr	r3, [r7, #12]
 801fe3a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801fe3e:	68fb      	ldr	r3, [r7, #12]
 801fe40:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 801fe44:	4619      	mov	r1, r3
 801fe46:	4610      	mov	r0, r2
 801fe48:	f7ff fe51 	bl	801faee <filter>
 801fe4c:	e000      	b.n	801fe50 <updatePeerDelay+0xa8>
		return;
 801fe4e:	bf00      	nop
	}
}
 801fe50:	3720      	adds	r7, #32
 801fe52:	46bd      	mov	sp, r7
 801fe54:	bd80      	pop	{r7, pc}
	...

0801fe58 <updateClock>:

void updateClock(PtpClock *ptpClock)
{
 801fe58:	b580      	push	{r7, lr}
 801fe5a:	b088      	sub	sp, #32
 801fe5c:	af00      	add	r7, sp, #0
 801fe5e:	6078      	str	r0, [r7, #4]
	TimeInternal timeTmp;
	int32_t offsetNorm;

	DBGV("updateClock\n");

	if (ptpClock->currentDS.offsetFromMaster.seconds != 0 || abs(ptpClock->currentDS.offsetFromMaster.nanoseconds) > MAX_ADJ_OFFSET_NS)
 801fe60:	687b      	ldr	r3, [r7, #4]
 801fe62:	699b      	ldr	r3, [r3, #24]
 801fe64:	2b00      	cmp	r3, #0
 801fe66:	d107      	bne.n	801fe78 <updateClock+0x20>
 801fe68:	687b      	ldr	r3, [r7, #4]
 801fe6a:	69db      	ldr	r3, [r3, #28]
 801fe6c:	2b00      	cmp	r3, #0
 801fe6e:	bfb8      	it	lt
 801fe70:	425b      	neglt	r3, r3
 801fe72:	4a4f      	ldr	r2, [pc, #316]	; (801ffb0 <updateClock+0x158>)
 801fe74:	4293      	cmp	r3, r2
 801fe76:	dd37      	ble.n	801fee8 <updateClock+0x90>
	{
		/* if secs, reset clock or set freq adjustment to max */
		if (!ptpClock->servo.noAdjust)
 801fe78:	687b      	ldr	r3, [r7, #4]
 801fe7a:	f893 3421 	ldrb.w	r3, [r3, #1057]	; 0x421
 801fe7e:	f083 0301 	eor.w	r3, r3, #1
 801fe82:	b2db      	uxtb	r3, r3
 801fe84:	2b00      	cmp	r3, #0
 801fe86:	f000 8087 	beq.w	801ff98 <updateClock+0x140>
		{
			if (!ptpClock->servo.noResetClock)
 801fe8a:	687b      	ldr	r3, [r7, #4]
 801fe8c:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 801fe90:	f083 0301 	eor.w	r3, r3, #1
 801fe94:	b2db      	uxtb	r3, r3
 801fe96:	2b00      	cmp	r3, #0
 801fe98:	d017      	beq.n	801feca <updateClock+0x72>
			{
				getTime(&timeTmp);
 801fe9a:	f107 0310 	add.w	r3, r7, #16
 801fe9e:	4618      	mov	r0, r3
 801fea0:	f000 f8b8 	bl	8020014 <getTime>
				subTime(&timeTmp, &timeTmp, &ptpClock->currentDS.offsetFromMaster);
 801fea4:	687b      	ldr	r3, [r7, #4]
 801fea6:	f103 0218 	add.w	r2, r3, #24
 801feaa:	f107 0110 	add.w	r1, r7, #16
 801feae:	f107 0310 	add.w	r3, r7, #16
 801feb2:	4618      	mov	r0, r3
 801feb4:	f7fc f923 	bl	801c0fe <subTime>
				setTime(&timeTmp);
 801feb8:	f107 0310 	add.w	r3, r7, #16
 801febc:	4618      	mov	r0, r3
 801febe:	f000 f8bc 	bl	802003a <setTime>
				initClock(ptpClock);
 801fec2:	6878      	ldr	r0, [r7, #4]
 801fec4:	f7ff fd84 	bl	801f9d0 <initClock>
		if (!ptpClock->servo.noAdjust)
 801fec8:	e066      	b.n	801ff98 <updateClock+0x140>
			}
			else
			{
				adj = ptpClock->currentDS.offsetFromMaster.nanoseconds > 0 ? ADJ_FREQ_MAX : -ADJ_FREQ_MAX;
 801feca:	687b      	ldr	r3, [r7, #4]
 801fecc:	69db      	ldr	r3, [r3, #28]
 801fece:	2b00      	cmp	r3, #0
 801fed0:	dd02      	ble.n	801fed8 <updateClock+0x80>
 801fed2:	f44f 23fa 	mov.w	r3, #512000	; 0x7d000
 801fed6:	e000      	b.n	801feda <updateClock+0x82>
 801fed8:	4b36      	ldr	r3, [pc, #216]	; (801ffb4 <updateClock+0x15c>)
 801feda:	61bb      	str	r3, [r7, #24]
				adjFreq(-adj);
 801fedc:	69bb      	ldr	r3, [r7, #24]
 801fede:	425b      	negs	r3, r3
 801fee0:	4618      	mov	r0, r3
 801fee2:	f000 f8cf 	bl	8020084 <adjFreq>
		if (!ptpClock->servo.noAdjust)
 801fee6:	e057      	b.n	801ff98 <updateClock+0x140>
		/* the PI controller */

		/* normalize offset to 1s sync interval -> response of the servo will
		 * be same for all sync interval values, but faster/slower
		 * (possible lost of precision/overflow but much more stable) */
		offsetNorm = ptpClock->currentDS.offsetFromMaster.nanoseconds;
 801fee8:	687b      	ldr	r3, [r7, #4]
 801feea:	69db      	ldr	r3, [r3, #28]
 801feec:	61fb      	str	r3, [r7, #28]
		if (ptpClock->portDS.logSyncInterval > 0)
 801feee:	687b      	ldr	r3, [r7, #4]
 801fef0:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 801fef4:	2b00      	cmp	r3, #0
 801fef6:	dd07      	ble.n	801ff08 <updateClock+0xb0>
			offsetNorm >>= ptpClock->portDS.logSyncInterval;
 801fef8:	687b      	ldr	r3, [r7, #4]
 801fefa:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 801fefe:	461a      	mov	r2, r3
 801ff00:	69fb      	ldr	r3, [r7, #28]
 801ff02:	4113      	asrs	r3, r2
 801ff04:	61fb      	str	r3, [r7, #28]
 801ff06:	e00c      	b.n	801ff22 <updateClock+0xca>
		else if (ptpClock->portDS.logSyncInterval < 0)
 801ff08:	687b      	ldr	r3, [r7, #4]
 801ff0a:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 801ff0e:	2b00      	cmp	r3, #0
 801ff10:	da07      	bge.n	801ff22 <updateClock+0xca>
			offsetNorm <<= -ptpClock->portDS.logSyncInterval;
 801ff12:	687b      	ldr	r3, [r7, #4]
 801ff14:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 801ff18:	425b      	negs	r3, r3
 801ff1a:	69fa      	ldr	r2, [r7, #28]
 801ff1c:	fa02 f303 	lsl.w	r3, r2, r3
 801ff20:	61fb      	str	r3, [r7, #28]

		/* the accumulator for the I component */
		ptpClock->observedDrift += offsetNorm / ptpClock->servo.ai;
 801ff22:	687b      	ldr	r3, [r7, #4]
 801ff24:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 801ff28:	687b      	ldr	r3, [r7, #4]
 801ff2a:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 801ff2e:	69f9      	ldr	r1, [r7, #28]
 801ff30:	fb91 f3f3 	sdiv	r3, r1, r3
 801ff34:	441a      	add	r2, r3
 801ff36:	687b      	ldr	r3, [r7, #4]
 801ff38:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

		/* clamp the accumulator to ADJ_FREQ_MAX for sanity */
		if (ptpClock->observedDrift > ADJ_FREQ_MAX)
 801ff3c:	687b      	ldr	r3, [r7, #4]
 801ff3e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801ff42:	f5b3 2ffa 	cmp.w	r3, #512000	; 0x7d000
 801ff46:	dd05      	ble.n	801ff54 <updateClock+0xfc>
			ptpClock->observedDrift = ADJ_FREQ_MAX;
 801ff48:	687b      	ldr	r3, [r7, #4]
 801ff4a:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 801ff4e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
 801ff52:	e009      	b.n	801ff68 <updateClock+0x110>
		else if (ptpClock->observedDrift < -ADJ_FREQ_MAX)
 801ff54:	687b      	ldr	r3, [r7, #4]
 801ff56:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801ff5a:	f513 2ffa 	cmn.w	r3, #512000	; 0x7d000
 801ff5e:	da03      	bge.n	801ff68 <updateClock+0x110>
			ptpClock->observedDrift = -ADJ_FREQ_MAX;
 801ff60:	687b      	ldr	r3, [r7, #4]
 801ff62:	4a14      	ldr	r2, [pc, #80]	; (801ffb4 <updateClock+0x15c>)
 801ff64:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

		/* apply controller output as a clock tick rate adjustment */
		if (!ptpClock->servo.noAdjust)
 801ff68:	687b      	ldr	r3, [r7, #4]
 801ff6a:	f893 3421 	ldrb.w	r3, [r3, #1057]	; 0x421
 801ff6e:	f083 0301 	eor.w	r3, r3, #1
 801ff72:	b2db      	uxtb	r3, r3
 801ff74:	2b00      	cmp	r3, #0
 801ff76:	d00f      	beq.n	801ff98 <updateClock+0x140>
		{
			adj = offsetNorm / ptpClock->servo.ap + ptpClock->observedDrift;
 801ff78:	687b      	ldr	r3, [r7, #4]
 801ff7a:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 801ff7e:	69fa      	ldr	r2, [r7, #28]
 801ff80:	fb92 f2f3 	sdiv	r2, r2, r3
 801ff84:	687b      	ldr	r3, [r7, #4]
 801ff86:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801ff8a:	4413      	add	r3, r2
 801ff8c:	61bb      	str	r3, [r7, #24]
			adjFreq(-adj);
 801ff8e:	69bb      	ldr	r3, [r7, #24]
 801ff90:	425b      	negs	r3, r3
 801ff92:	4618      	mov	r0, r3
 801ff94:	f000 f876 	bl	8020084 <adjFreq>
			ptpClock->parentDS.observedParentOffsetScaledLogVariance = 17000 + scaledLogVariance;
			DBGV("updateClock: observed scalled log variance: 0x%x\n", ptpClock->parentDS.observedParentOffsetScaledLogVariance);
		}
	}

	switch (ptpClock->portDS.delayMechanism)
 801ff98:	687b      	ldr	r3, [r7, #4]
 801ff9a:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 801ff9e:	2b01      	cmp	r3, #1
 801ffa0:	d001      	beq.n	801ffa6 <updateClock+0x14e>
 801ffa2:	2b02      	cmp	r3, #2
			break;

		case P2P:
			DBG("updateClock: one-way delay averaged (P2P): %d sec %d nsec\n",
					ptpClock->portDS.peerMeanPathDelay.seconds, ptpClock->portDS.peerMeanPathDelay.nanoseconds);
			break;
 801ffa4:	e000      	b.n	801ffa8 <updateClock+0x150>
			break;
 801ffa6:	bf00      	nop

	DBG("updateClock: offset from master: %d sec %d nsec\n",
			ptpClock->currentDS.offsetFromMaster.seconds,
			ptpClock->currentDS.offsetFromMaster.nanoseconds);
	DBG("updateClock: observed drift: %d\n", ptpClock->observedDrift);
}
 801ffa8:	bf00      	nop
 801ffaa:	3720      	adds	r7, #32
 801ffac:	46bd      	mov	sp, r7
 801ffae:	bd80      	pop	{r7, pc}
 801ffb0:	05f5e100 	.word	0x05f5e100
 801ffb4:	fff83000 	.word	0xfff83000

0801ffb8 <ptpdStartup>:
{
	netShutdown(&ptpClock->netPath);
}

int16_t ptpdStartup(PtpClock * ptpClock, RunTimeOpts *rtOpts, ForeignMasterRecord* foreign)
{
 801ffb8:	b580      	push	{r7, lr}
 801ffba:	b084      	sub	sp, #16
 801ffbc:	af00      	add	r7, sp, #0
 801ffbe:	60f8      	str	r0, [r7, #12]
 801ffc0:	60b9      	str	r1, [r7, #8]
 801ffc2:	607a      	str	r2, [r7, #4]
	ptpClock->rtOpts = rtOpts;
 801ffc4:	68fb      	ldr	r3, [r7, #12]
 801ffc6:	68ba      	ldr	r2, [r7, #8]
 801ffc8:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
	ptpClock->foreignMasterDS.records = foreign;
 801ffcc:	68fb      	ldr	r3, [r7, #12]
 801ffce:	687a      	ldr	r2, [r7, #4]
 801ffd0:	675a      	str	r2, [r3, #116]	; 0x74

	/* 9.2.2 */
	if (rtOpts->slaveOnly) rtOpts->clockQuality.clockClass = DEFAULT_CLOCK_CLASS_SLAVE_ONLY;
 801ffd2:	68bb      	ldr	r3, [r7, #8]
 801ffd4:	7a5b      	ldrb	r3, [r3, #9]
 801ffd6:	2b00      	cmp	r3, #0
 801ffd8:	d002      	beq.n	801ffe0 <ptpdStartup+0x28>
 801ffda:	68bb      	ldr	r3, [r7, #8]
 801ffdc:	22ff      	movs	r2, #255	; 0xff
 801ffde:	709a      	strb	r2, [r3, #2]

	/* No negative or zero attenuation */
	if (rtOpts->servo.ap < 1) rtOpts->servo.ap = 1;
 801ffe0:	68bb      	ldr	r3, [r7, #8]
 801ffe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ffe4:	2b00      	cmp	r3, #0
 801ffe6:	dc02      	bgt.n	801ffee <ptpdStartup+0x36>
 801ffe8:	68bb      	ldr	r3, [r7, #8]
 801ffea:	2201      	movs	r2, #1
 801ffec:	639a      	str	r2, [r3, #56]	; 0x38
	if (rtOpts->servo.ai < 1) rtOpts->servo.ai = 1;
 801ffee:	68bb      	ldr	r3, [r7, #8]
 801fff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801fff2:	2b00      	cmp	r3, #0
 801fff4:	dc02      	bgt.n	801fffc <ptpdStartup+0x44>
 801fff6:	68bb      	ldr	r3, [r7, #8]
 801fff8:	2201      	movs	r2, #1
 801fffa:	63da      	str	r2, [r3, #60]	; 0x3c

	DBG("event POWER UP\n");

	ETH_PTPStart(ETH_PTP_FineUpdate);
 801fffc:	2001      	movs	r0, #1
 801fffe:	f7ff fb23 	bl	801f648 <ETH_PTPStart>

	toState(ptpClock, PTP_INITIALIZING);
 8020002:	2100      	movs	r1, #0
 8020004:	68f8      	ldr	r0, [r7, #12]
 8020006:	f7fc fde5 	bl	801cbd4 <toState>

	return 0;
 802000a:	2300      	movs	r3, #0
}
 802000c:	4618      	mov	r0, r3
 802000e:	3710      	adds	r7, #16
 8020010:	46bd      	mov	sp, r7
 8020012:	bd80      	pop	{r7, pc}

08020014 <getTime>:

	printf("drift: %c%d.%03d ppm\n", sign, abs(ptpClock->observedDrift / 1000), abs(ptpClock->observedDrift % 1000));
}

void getTime(TimeInternal *time)
{
 8020014:	b580      	push	{r7, lr}
 8020016:	b084      	sub	sp, #16
 8020018:	af00      	add	r7, sp, #0
 802001a:	6078      	str	r0, [r7, #4]
	struct ptptime_t timestamp;
	ETH_PTPTime_GetTime(&timestamp);
 802001c:	f107 0308 	add.w	r3, r7, #8
 8020020:	4618      	mov	r0, r3
 8020022:	f7ff fadf 	bl	801f5e4 <ETH_PTPTime_GetTime>
	time->seconds = timestamp.tv_sec;
 8020026:	68ba      	ldr	r2, [r7, #8]
 8020028:	687b      	ldr	r3, [r7, #4]
 802002a:	601a      	str	r2, [r3, #0]
	time->nanoseconds = timestamp.tv_nsec;
 802002c:	68fa      	ldr	r2, [r7, #12]
 802002e:	687b      	ldr	r3, [r7, #4]
 8020030:	605a      	str	r2, [r3, #4]
}
 8020032:	bf00      	nop
 8020034:	3710      	adds	r7, #16
 8020036:	46bd      	mov	sp, r7
 8020038:	bd80      	pop	{r7, pc}

0802003a <setTime>:

void setTime(const TimeInternal *time)
{
 802003a:	b580      	push	{r7, lr}
 802003c:	b084      	sub	sp, #16
 802003e:	af00      	add	r7, sp, #0
 8020040:	6078      	str	r0, [r7, #4]
	struct ptptime_t ts;

	ts.tv_sec = time->seconds;
 8020042:	687b      	ldr	r3, [r7, #4]
 8020044:	681b      	ldr	r3, [r3, #0]
 8020046:	60bb      	str	r3, [r7, #8]
	ts.tv_nsec = time->nanoseconds;
 8020048:	687b      	ldr	r3, [r7, #4]
 802004a:	685b      	ldr	r3, [r3, #4]
 802004c:	60fb      	str	r3, [r7, #12]
	ETH_PTPTime_SetTime(&ts);
 802004e:	f107 0308 	add.w	r3, r7, #8
 8020052:	4618      	mov	r0, r3
 8020054:	f7ff fb24 	bl	801f6a0 <ETH_PTPTime_SetTime>
	DBG("resetting system clock to %d sec %d nsec\n", time->seconds, time->nanoseconds);
}
 8020058:	bf00      	nop
 802005a:	3710      	adds	r7, #16
 802005c:	46bd      	mov	sp, r7
 802005e:	bd80      	pop	{r7, pc}

08020060 <getRand>:
	ETH_PTPTime_UpdateOffset(&timeoffset);
	DBGV("updateTime: updated\n");
}

uint32_t getRand(uint32_t randMax)
{
 8020060:	b580      	push	{r7, lr}
 8020062:	b082      	sub	sp, #8
 8020064:	af00      	add	r7, sp, #0
 8020066:	6078      	str	r0, [r7, #4]
	return rand() % randMax;
 8020068:	f000 fa5c 	bl	8020524 <rand>
 802006c:	4603      	mov	r3, r0
 802006e:	687a      	ldr	r2, [r7, #4]
 8020070:	fbb3 f2f2 	udiv	r2, r3, r2
 8020074:	6879      	ldr	r1, [r7, #4]
 8020076:	fb01 f202 	mul.w	r2, r1, r2
 802007a:	1a9b      	subs	r3, r3, r2
}
 802007c:	4618      	mov	r0, r3
 802007e:	3708      	adds	r7, #8
 8020080:	46bd      	mov	sp, r7
 8020082:	bd80      	pop	{r7, pc}

08020084 <adjFreq>:

bool  adjFreq(int32_t adj)
{
 8020084:	b580      	push	{r7, lr}
 8020086:	b082      	sub	sp, #8
 8020088:	af00      	add	r7, sp, #0
 802008a:	6078      	str	r0, [r7, #4]
	DBGV("adjFreq %d\n", adj);

	if (adj > ADJ_FREQ_MAX)
 802008c:	687b      	ldr	r3, [r7, #4]
 802008e:	f5b3 2ffa 	cmp.w	r3, #512000	; 0x7d000
 8020092:	dd03      	ble.n	802009c <adjFreq+0x18>
		adj = ADJ_FREQ_MAX;
 8020094:	f44f 23fa 	mov.w	r3, #512000	; 0x7d000
 8020098:	607b      	str	r3, [r7, #4]
 802009a:	e005      	b.n	80200a8 <adjFreq+0x24>
	else if (adj < -ADJ_FREQ_MAX)
 802009c:	687b      	ldr	r3, [r7, #4]
 802009e:	f513 2ffa 	cmn.w	r3, #512000	; 0x7d000
 80200a2:	da01      	bge.n	80200a8 <adjFreq+0x24>
		adj = -ADJ_FREQ_MAX;
 80200a4:	4b04      	ldr	r3, [pc, #16]	; (80200b8 <adjFreq+0x34>)
 80200a6:	607b      	str	r3, [r7, #4]

	/* Fine update method */
	ETH_PTPTime_AdjFreq(adj);
 80200a8:	6878      	ldr	r0, [r7, #4]
 80200aa:	f7ff fb39 	bl	801f720 <ETH_PTPTime_AdjFreq>

	//sprintf(g_debug_message[1], "PTP adjust: %d\n", adj);

	return TRUE;
 80200ae:	2301      	movs	r3, #1
}
 80200b0:	4618      	mov	r0, r3
 80200b2:	3708      	adds	r7, #8
 80200b4:	46bd      	mov	sp, r7
 80200b6:	bd80      	pop	{r7, pc}
 80200b8:	fff83000 	.word	0xfff83000

080200bc <initTimer>:
volatile uint16_t ptpdTimers[TIMER_ARRAY_SIZE];
volatile uint16_t ptpdTimersCounter[TIMER_ARRAY_SIZE];
volatile bool ptpdTimersExpired[TIMER_ARRAY_SIZE];
 
void initTimer(void)
{
 80200bc:	b480      	push	{r7}
 80200be:	b083      	sub	sp, #12
 80200c0:	af00      	add	r7, sp, #0
	int32_t i;

	DBG("initTimer\n");

	/* Create the various timers used in the system. */
  for (i = 0; i < TIMER_ARRAY_SIZE; i++)
 80200c2:	2300      	movs	r3, #0
 80200c4:	607b      	str	r3, [r7, #4]
 80200c6:	e011      	b.n	80200ec <initTimer+0x30>
  {
		// Mark the timer as not expired.
		// Initialize the timer.
		ptpdTimers[i] = 0;
 80200c8:	4a0d      	ldr	r2, [pc, #52]	; (8020100 <initTimer+0x44>)
 80200ca:	687b      	ldr	r3, [r7, #4]
 80200cc:	2100      	movs	r1, #0
 80200ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		ptpdTimersCounter[i] = 0;
 80200d2:	4a0c      	ldr	r2, [pc, #48]	; (8020104 <initTimer+0x48>)
 80200d4:	687b      	ldr	r3, [r7, #4]
 80200d6:	2100      	movs	r1, #0
 80200d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		ptpdTimersExpired[i] = FALSE;
 80200dc:	4a0a      	ldr	r2, [pc, #40]	; (8020108 <initTimer+0x4c>)
 80200de:	687b      	ldr	r3, [r7, #4]
 80200e0:	4413      	add	r3, r2
 80200e2:	2200      	movs	r2, #0
 80200e4:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < TIMER_ARRAY_SIZE; i++)
 80200e6:	687b      	ldr	r3, [r7, #4]
 80200e8:	3301      	adds	r3, #1
 80200ea:	607b      	str	r3, [r7, #4]
 80200ec:	687b      	ldr	r3, [r7, #4]
 80200ee:	2b05      	cmp	r3, #5
 80200f0:	ddea      	ble.n	80200c8 <initTimer+0xc>
	}
}
 80200f2:	bf00      	nop
 80200f4:	bf00      	nop
 80200f6:	370c      	adds	r7, #12
 80200f8:	46bd      	mov	sp, r7
 80200fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200fe:	4770      	bx	lr
 8020100:	2000abc4 	.word	0x2000abc4
 8020104:	2000abb0 	.word	0x2000abb0
 8020108:	2000abbc 	.word	0x2000abbc

0802010c <timerStop>:

void timerStop(int32_t index)
{
 802010c:	b480      	push	{r7}
 802010e:	b083      	sub	sp, #12
 8020110:	af00      	add	r7, sp, #0
 8020112:	6078      	str	r0, [r7, #4]
	/* Sanity check the index. */
	if (index >= TIMER_ARRAY_SIZE) return;
 8020114:	687b      	ldr	r3, [r7, #4]
 8020116:	2b05      	cmp	r3, #5
 8020118:	dc0f      	bgt.n	802013a <timerStop+0x2e>

	// Cancel the timer and reset the expired flag.
	DBGV("timerStop: stop timer %d\n", index);
	ptpdTimers[index] = 0;
 802011a:	4a0b      	ldr	r2, [pc, #44]	; (8020148 <timerStop+0x3c>)
 802011c:	687b      	ldr	r3, [r7, #4]
 802011e:	2100      	movs	r1, #0
 8020120:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	ptpdTimersCounter[index] = 0;
 8020124:	4a09      	ldr	r2, [pc, #36]	; (802014c <timerStop+0x40>)
 8020126:	687b      	ldr	r3, [r7, #4]
 8020128:	2100      	movs	r1, #0
 802012a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	ptpdTimersExpired[index] = FALSE;
 802012e:	4a08      	ldr	r2, [pc, #32]	; (8020150 <timerStop+0x44>)
 8020130:	687b      	ldr	r3, [r7, #4]
 8020132:	4413      	add	r3, r2
 8020134:	2200      	movs	r2, #0
 8020136:	701a      	strb	r2, [r3, #0]
 8020138:	e000      	b.n	802013c <timerStop+0x30>
	if (index >= TIMER_ARRAY_SIZE) return;
 802013a:	bf00      	nop
}
 802013c:	370c      	adds	r7, #12
 802013e:	46bd      	mov	sp, r7
 8020140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020144:	4770      	bx	lr
 8020146:	bf00      	nop
 8020148:	2000abc4 	.word	0x2000abc4
 802014c:	2000abb0 	.word	0x2000abb0
 8020150:	2000abbc 	.word	0x2000abbc

08020154 <timerStart>:

void timerStart(int32_t index, uint32_t interval_ms)
{
 8020154:	b480      	push	{r7}
 8020156:	b083      	sub	sp, #12
 8020158:	af00      	add	r7, sp, #0
 802015a:	6078      	str	r0, [r7, #4]
 802015c:	6039      	str	r1, [r7, #0]
	/* Sanity check the index. */
	if (index >= TIMER_ARRAY_SIZE) return;
 802015e:	687b      	ldr	r3, [r7, #4]
 8020160:	2b05      	cmp	r3, #5
 8020162:	dc11      	bgt.n	8020188 <timerStart+0x34>

	// Set the timer duration and start the timer.
	DBGV("timerStart: set timer %d to %d\n", index, interval_ms);
	ptpdTimersExpired[index] = FALSE;
 8020164:	4a0b      	ldr	r2, [pc, #44]	; (8020194 <timerStart+0x40>)
 8020166:	687b      	ldr	r3, [r7, #4]
 8020168:	4413      	add	r3, r2
 802016a:	2200      	movs	r2, #0
 802016c:	701a      	strb	r2, [r3, #0]
	ptpdTimers[index] = interval_ms;
 802016e:	683b      	ldr	r3, [r7, #0]
 8020170:	b299      	uxth	r1, r3
 8020172:	4a09      	ldr	r2, [pc, #36]	; (8020198 <timerStart+0x44>)
 8020174:	687b      	ldr	r3, [r7, #4]
 8020176:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	ptpdTimersCounter[index] = interval_ms;
 802017a:	683b      	ldr	r3, [r7, #0]
 802017c:	b299      	uxth	r1, r3
 802017e:	4a07      	ldr	r2, [pc, #28]	; (802019c <timerStart+0x48>)
 8020180:	687b      	ldr	r3, [r7, #4]
 8020182:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8020186:	e000      	b.n	802018a <timerStart+0x36>
	if (index >= TIMER_ARRAY_SIZE) return;
 8020188:	bf00      	nop
}
 802018a:	370c      	adds	r7, #12
 802018c:	46bd      	mov	sp, r7
 802018e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020192:	4770      	bx	lr
 8020194:	2000abbc 	.word	0x2000abbc
 8020198:	2000abc4 	.word	0x2000abc4
 802019c:	2000abb0 	.word	0x2000abb0

080201a0 <timerExpired>:

bool timerExpired(int32_t index)
{
 80201a0:	b480      	push	{r7}
 80201a2:	b083      	sub	sp, #12
 80201a4:	af00      	add	r7, sp, #0
 80201a6:	6078      	str	r0, [r7, #4]
	/* Sanity check the index. */
	if (index >= TIMER_ARRAY_SIZE) return FALSE;
 80201a8:	687b      	ldr	r3, [r7, #4]
 80201aa:	2b05      	cmp	r3, #5
 80201ac:	dd01      	ble.n	80201b2 <timerExpired+0x12>
 80201ae:	2300      	movs	r3, #0
 80201b0:	e011      	b.n	80201d6 <timerExpired+0x36>

	/* Determine if the timer expired. */
	if (!ptpdTimersExpired[index]) return FALSE;
 80201b2:	4a0c      	ldr	r2, [pc, #48]	; (80201e4 <timerExpired+0x44>)
 80201b4:	687b      	ldr	r3, [r7, #4]
 80201b6:	4413      	add	r3, r2
 80201b8:	781b      	ldrb	r3, [r3, #0]
 80201ba:	b2db      	uxtb	r3, r3
 80201bc:	f083 0301 	eor.w	r3, r3, #1
 80201c0:	b2db      	uxtb	r3, r3
 80201c2:	2b00      	cmp	r3, #0
 80201c4:	d001      	beq.n	80201ca <timerExpired+0x2a>
 80201c6:	2300      	movs	r3, #0
 80201c8:	e005      	b.n	80201d6 <timerExpired+0x36>
	DBGV("timerExpired: timer %d expired\n", index);
	ptpdTimersExpired[index] = FALSE;
 80201ca:	4a06      	ldr	r2, [pc, #24]	; (80201e4 <timerExpired+0x44>)
 80201cc:	687b      	ldr	r3, [r7, #4]
 80201ce:	4413      	add	r3, r2
 80201d0:	2200      	movs	r2, #0
 80201d2:	701a      	strb	r2, [r3, #0]

	return TRUE;
 80201d4:	2301      	movs	r3, #1
}
 80201d6:	4618      	mov	r0, r3
 80201d8:	370c      	adds	r7, #12
 80201da:	46bd      	mov	sp, r7
 80201dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80201e0:	4770      	bx	lr
 80201e2:	bf00      	nop
 80201e4:	2000abbc 	.word	0x2000abbc

080201e8 <__libc_init_array>:
 80201e8:	b570      	push	{r4, r5, r6, lr}
 80201ea:	4d0d      	ldr	r5, [pc, #52]	; (8020220 <__libc_init_array+0x38>)
 80201ec:	4c0d      	ldr	r4, [pc, #52]	; (8020224 <__libc_init_array+0x3c>)
 80201ee:	1b64      	subs	r4, r4, r5
 80201f0:	10a4      	asrs	r4, r4, #2
 80201f2:	2600      	movs	r6, #0
 80201f4:	42a6      	cmp	r6, r4
 80201f6:	d109      	bne.n	802020c <__libc_init_array+0x24>
 80201f8:	4d0b      	ldr	r5, [pc, #44]	; (8020228 <__libc_init_array+0x40>)
 80201fa:	4c0c      	ldr	r4, [pc, #48]	; (802022c <__libc_init_array+0x44>)
 80201fc:	f001 f92a 	bl	8021454 <_init>
 8020200:	1b64      	subs	r4, r4, r5
 8020202:	10a4      	asrs	r4, r4, #2
 8020204:	2600      	movs	r6, #0
 8020206:	42a6      	cmp	r6, r4
 8020208:	d105      	bne.n	8020216 <__libc_init_array+0x2e>
 802020a:	bd70      	pop	{r4, r5, r6, pc}
 802020c:	f855 3b04 	ldr.w	r3, [r5], #4
 8020210:	4798      	blx	r3
 8020212:	3601      	adds	r6, #1
 8020214:	e7ee      	b.n	80201f4 <__libc_init_array+0xc>
 8020216:	f855 3b04 	ldr.w	r3, [r5], #4
 802021a:	4798      	blx	r3
 802021c:	3601      	adds	r6, #1
 802021e:	e7f2      	b.n	8020206 <__libc_init_array+0x1e>
 8020220:	08026e60 	.word	0x08026e60
 8020224:	08026e60 	.word	0x08026e60
 8020228:	08026e60 	.word	0x08026e60
 802022c:	08026e64 	.word	0x08026e64

08020230 <malloc>:
 8020230:	4b02      	ldr	r3, [pc, #8]	; (802023c <malloc+0xc>)
 8020232:	4601      	mov	r1, r0
 8020234:	6818      	ldr	r0, [r3, #0]
 8020236:	f000 b877 	b.w	8020328 <_malloc_r>
 802023a:	bf00      	nop
 802023c:	20000038 	.word	0x20000038

08020240 <memcmp>:
 8020240:	b530      	push	{r4, r5, lr}
 8020242:	3901      	subs	r1, #1
 8020244:	2400      	movs	r4, #0
 8020246:	42a2      	cmp	r2, r4
 8020248:	d101      	bne.n	802024e <memcmp+0xe>
 802024a:	2000      	movs	r0, #0
 802024c:	e005      	b.n	802025a <memcmp+0x1a>
 802024e:	5d03      	ldrb	r3, [r0, r4]
 8020250:	3401      	adds	r4, #1
 8020252:	5d0d      	ldrb	r5, [r1, r4]
 8020254:	42ab      	cmp	r3, r5
 8020256:	d0f6      	beq.n	8020246 <memcmp+0x6>
 8020258:	1b58      	subs	r0, r3, r5
 802025a:	bd30      	pop	{r4, r5, pc}

0802025c <memcpy>:
 802025c:	440a      	add	r2, r1
 802025e:	4291      	cmp	r1, r2
 8020260:	f100 33ff 	add.w	r3, r0, #4294967295
 8020264:	d100      	bne.n	8020268 <memcpy+0xc>
 8020266:	4770      	bx	lr
 8020268:	b510      	push	{r4, lr}
 802026a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802026e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020272:	4291      	cmp	r1, r2
 8020274:	d1f9      	bne.n	802026a <memcpy+0xe>
 8020276:	bd10      	pop	{r4, pc}

08020278 <memset>:
 8020278:	4402      	add	r2, r0
 802027a:	4603      	mov	r3, r0
 802027c:	4293      	cmp	r3, r2
 802027e:	d100      	bne.n	8020282 <memset+0xa>
 8020280:	4770      	bx	lr
 8020282:	f803 1b01 	strb.w	r1, [r3], #1
 8020286:	e7f9      	b.n	802027c <memset+0x4>

08020288 <_free_r>:
 8020288:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802028a:	2900      	cmp	r1, #0
 802028c:	d048      	beq.n	8020320 <_free_r+0x98>
 802028e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020292:	9001      	str	r0, [sp, #4]
 8020294:	2b00      	cmp	r3, #0
 8020296:	f1a1 0404 	sub.w	r4, r1, #4
 802029a:	bfb8      	it	lt
 802029c:	18e4      	addlt	r4, r4, r3
 802029e:	f000 fc9f 	bl	8020be0 <__malloc_lock>
 80202a2:	4a20      	ldr	r2, [pc, #128]	; (8020324 <_free_r+0x9c>)
 80202a4:	9801      	ldr	r0, [sp, #4]
 80202a6:	6813      	ldr	r3, [r2, #0]
 80202a8:	4615      	mov	r5, r2
 80202aa:	b933      	cbnz	r3, 80202ba <_free_r+0x32>
 80202ac:	6063      	str	r3, [r4, #4]
 80202ae:	6014      	str	r4, [r2, #0]
 80202b0:	b003      	add	sp, #12
 80202b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80202b6:	f000 bc99 	b.w	8020bec <__malloc_unlock>
 80202ba:	42a3      	cmp	r3, r4
 80202bc:	d90b      	bls.n	80202d6 <_free_r+0x4e>
 80202be:	6821      	ldr	r1, [r4, #0]
 80202c0:	1862      	adds	r2, r4, r1
 80202c2:	4293      	cmp	r3, r2
 80202c4:	bf04      	itt	eq
 80202c6:	681a      	ldreq	r2, [r3, #0]
 80202c8:	685b      	ldreq	r3, [r3, #4]
 80202ca:	6063      	str	r3, [r4, #4]
 80202cc:	bf04      	itt	eq
 80202ce:	1852      	addeq	r2, r2, r1
 80202d0:	6022      	streq	r2, [r4, #0]
 80202d2:	602c      	str	r4, [r5, #0]
 80202d4:	e7ec      	b.n	80202b0 <_free_r+0x28>
 80202d6:	461a      	mov	r2, r3
 80202d8:	685b      	ldr	r3, [r3, #4]
 80202da:	b10b      	cbz	r3, 80202e0 <_free_r+0x58>
 80202dc:	42a3      	cmp	r3, r4
 80202de:	d9fa      	bls.n	80202d6 <_free_r+0x4e>
 80202e0:	6811      	ldr	r1, [r2, #0]
 80202e2:	1855      	adds	r5, r2, r1
 80202e4:	42a5      	cmp	r5, r4
 80202e6:	d10b      	bne.n	8020300 <_free_r+0x78>
 80202e8:	6824      	ldr	r4, [r4, #0]
 80202ea:	4421      	add	r1, r4
 80202ec:	1854      	adds	r4, r2, r1
 80202ee:	42a3      	cmp	r3, r4
 80202f0:	6011      	str	r1, [r2, #0]
 80202f2:	d1dd      	bne.n	80202b0 <_free_r+0x28>
 80202f4:	681c      	ldr	r4, [r3, #0]
 80202f6:	685b      	ldr	r3, [r3, #4]
 80202f8:	6053      	str	r3, [r2, #4]
 80202fa:	4421      	add	r1, r4
 80202fc:	6011      	str	r1, [r2, #0]
 80202fe:	e7d7      	b.n	80202b0 <_free_r+0x28>
 8020300:	d902      	bls.n	8020308 <_free_r+0x80>
 8020302:	230c      	movs	r3, #12
 8020304:	6003      	str	r3, [r0, #0]
 8020306:	e7d3      	b.n	80202b0 <_free_r+0x28>
 8020308:	6825      	ldr	r5, [r4, #0]
 802030a:	1961      	adds	r1, r4, r5
 802030c:	428b      	cmp	r3, r1
 802030e:	bf04      	itt	eq
 8020310:	6819      	ldreq	r1, [r3, #0]
 8020312:	685b      	ldreq	r3, [r3, #4]
 8020314:	6063      	str	r3, [r4, #4]
 8020316:	bf04      	itt	eq
 8020318:	1949      	addeq	r1, r1, r5
 802031a:	6021      	streq	r1, [r4, #0]
 802031c:	6054      	str	r4, [r2, #4]
 802031e:	e7c7      	b.n	80202b0 <_free_r+0x28>
 8020320:	b003      	add	sp, #12
 8020322:	bd30      	pop	{r4, r5, pc}
 8020324:	200069a0 	.word	0x200069a0

08020328 <_malloc_r>:
 8020328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802032a:	1ccd      	adds	r5, r1, #3
 802032c:	f025 0503 	bic.w	r5, r5, #3
 8020330:	3508      	adds	r5, #8
 8020332:	2d0c      	cmp	r5, #12
 8020334:	bf38      	it	cc
 8020336:	250c      	movcc	r5, #12
 8020338:	2d00      	cmp	r5, #0
 802033a:	4606      	mov	r6, r0
 802033c:	db01      	blt.n	8020342 <_malloc_r+0x1a>
 802033e:	42a9      	cmp	r1, r5
 8020340:	d903      	bls.n	802034a <_malloc_r+0x22>
 8020342:	230c      	movs	r3, #12
 8020344:	6033      	str	r3, [r6, #0]
 8020346:	2000      	movs	r0, #0
 8020348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802034a:	f000 fc49 	bl	8020be0 <__malloc_lock>
 802034e:	4921      	ldr	r1, [pc, #132]	; (80203d4 <_malloc_r+0xac>)
 8020350:	680a      	ldr	r2, [r1, #0]
 8020352:	4614      	mov	r4, r2
 8020354:	b99c      	cbnz	r4, 802037e <_malloc_r+0x56>
 8020356:	4f20      	ldr	r7, [pc, #128]	; (80203d8 <_malloc_r+0xb0>)
 8020358:	683b      	ldr	r3, [r7, #0]
 802035a:	b923      	cbnz	r3, 8020366 <_malloc_r+0x3e>
 802035c:	4621      	mov	r1, r4
 802035e:	4630      	mov	r0, r6
 8020360:	f000 f920 	bl	80205a4 <_sbrk_r>
 8020364:	6038      	str	r0, [r7, #0]
 8020366:	4629      	mov	r1, r5
 8020368:	4630      	mov	r0, r6
 802036a:	f000 f91b 	bl	80205a4 <_sbrk_r>
 802036e:	1c43      	adds	r3, r0, #1
 8020370:	d123      	bne.n	80203ba <_malloc_r+0x92>
 8020372:	230c      	movs	r3, #12
 8020374:	6033      	str	r3, [r6, #0]
 8020376:	4630      	mov	r0, r6
 8020378:	f000 fc38 	bl	8020bec <__malloc_unlock>
 802037c:	e7e3      	b.n	8020346 <_malloc_r+0x1e>
 802037e:	6823      	ldr	r3, [r4, #0]
 8020380:	1b5b      	subs	r3, r3, r5
 8020382:	d417      	bmi.n	80203b4 <_malloc_r+0x8c>
 8020384:	2b0b      	cmp	r3, #11
 8020386:	d903      	bls.n	8020390 <_malloc_r+0x68>
 8020388:	6023      	str	r3, [r4, #0]
 802038a:	441c      	add	r4, r3
 802038c:	6025      	str	r5, [r4, #0]
 802038e:	e004      	b.n	802039a <_malloc_r+0x72>
 8020390:	6863      	ldr	r3, [r4, #4]
 8020392:	42a2      	cmp	r2, r4
 8020394:	bf0c      	ite	eq
 8020396:	600b      	streq	r3, [r1, #0]
 8020398:	6053      	strne	r3, [r2, #4]
 802039a:	4630      	mov	r0, r6
 802039c:	f000 fc26 	bl	8020bec <__malloc_unlock>
 80203a0:	f104 000b 	add.w	r0, r4, #11
 80203a4:	1d23      	adds	r3, r4, #4
 80203a6:	f020 0007 	bic.w	r0, r0, #7
 80203aa:	1ac2      	subs	r2, r0, r3
 80203ac:	d0cc      	beq.n	8020348 <_malloc_r+0x20>
 80203ae:	1a1b      	subs	r3, r3, r0
 80203b0:	50a3      	str	r3, [r4, r2]
 80203b2:	e7c9      	b.n	8020348 <_malloc_r+0x20>
 80203b4:	4622      	mov	r2, r4
 80203b6:	6864      	ldr	r4, [r4, #4]
 80203b8:	e7cc      	b.n	8020354 <_malloc_r+0x2c>
 80203ba:	1cc4      	adds	r4, r0, #3
 80203bc:	f024 0403 	bic.w	r4, r4, #3
 80203c0:	42a0      	cmp	r0, r4
 80203c2:	d0e3      	beq.n	802038c <_malloc_r+0x64>
 80203c4:	1a21      	subs	r1, r4, r0
 80203c6:	4630      	mov	r0, r6
 80203c8:	f000 f8ec 	bl	80205a4 <_sbrk_r>
 80203cc:	3001      	adds	r0, #1
 80203ce:	d1dd      	bne.n	802038c <_malloc_r+0x64>
 80203d0:	e7cf      	b.n	8020372 <_malloc_r+0x4a>
 80203d2:	bf00      	nop
 80203d4:	200069a0 	.word	0x200069a0
 80203d8:	200069a4 	.word	0x200069a4

080203dc <iprintf>:
 80203dc:	b40f      	push	{r0, r1, r2, r3}
 80203de:	4b0a      	ldr	r3, [pc, #40]	; (8020408 <iprintf+0x2c>)
 80203e0:	b513      	push	{r0, r1, r4, lr}
 80203e2:	681c      	ldr	r4, [r3, #0]
 80203e4:	b124      	cbz	r4, 80203f0 <iprintf+0x14>
 80203e6:	69a3      	ldr	r3, [r4, #24]
 80203e8:	b913      	cbnz	r3, 80203f0 <iprintf+0x14>
 80203ea:	4620      	mov	r0, r4
 80203ec:	f000 fae2 	bl	80209b4 <__sinit>
 80203f0:	ab05      	add	r3, sp, #20
 80203f2:	9a04      	ldr	r2, [sp, #16]
 80203f4:	68a1      	ldr	r1, [r4, #8]
 80203f6:	9301      	str	r3, [sp, #4]
 80203f8:	4620      	mov	r0, r4
 80203fa:	f000 fc27 	bl	8020c4c <_vfiprintf_r>
 80203fe:	b002      	add	sp, #8
 8020400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020404:	b004      	add	sp, #16
 8020406:	4770      	bx	lr
 8020408:	20000038 	.word	0x20000038

0802040c <putchar>:
 802040c:	4b09      	ldr	r3, [pc, #36]	; (8020434 <putchar+0x28>)
 802040e:	b513      	push	{r0, r1, r4, lr}
 8020410:	681c      	ldr	r4, [r3, #0]
 8020412:	4601      	mov	r1, r0
 8020414:	b134      	cbz	r4, 8020424 <putchar+0x18>
 8020416:	69a3      	ldr	r3, [r4, #24]
 8020418:	b923      	cbnz	r3, 8020424 <putchar+0x18>
 802041a:	9001      	str	r0, [sp, #4]
 802041c:	4620      	mov	r0, r4
 802041e:	f000 fac9 	bl	80209b4 <__sinit>
 8020422:	9901      	ldr	r1, [sp, #4]
 8020424:	68a2      	ldr	r2, [r4, #8]
 8020426:	4620      	mov	r0, r4
 8020428:	b002      	add	sp, #8
 802042a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802042e:	f000 bed1 	b.w	80211d4 <_putc_r>
 8020432:	bf00      	nop
 8020434:	20000038 	.word	0x20000038

08020438 <_puts_r>:
 8020438:	b570      	push	{r4, r5, r6, lr}
 802043a:	460e      	mov	r6, r1
 802043c:	4605      	mov	r5, r0
 802043e:	b118      	cbz	r0, 8020448 <_puts_r+0x10>
 8020440:	6983      	ldr	r3, [r0, #24]
 8020442:	b90b      	cbnz	r3, 8020448 <_puts_r+0x10>
 8020444:	f000 fab6 	bl	80209b4 <__sinit>
 8020448:	69ab      	ldr	r3, [r5, #24]
 802044a:	68ac      	ldr	r4, [r5, #8]
 802044c:	b913      	cbnz	r3, 8020454 <_puts_r+0x1c>
 802044e:	4628      	mov	r0, r5
 8020450:	f000 fab0 	bl	80209b4 <__sinit>
 8020454:	4b2c      	ldr	r3, [pc, #176]	; (8020508 <_puts_r+0xd0>)
 8020456:	429c      	cmp	r4, r3
 8020458:	d120      	bne.n	802049c <_puts_r+0x64>
 802045a:	686c      	ldr	r4, [r5, #4]
 802045c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802045e:	07db      	lsls	r3, r3, #31
 8020460:	d405      	bmi.n	802046e <_puts_r+0x36>
 8020462:	89a3      	ldrh	r3, [r4, #12]
 8020464:	0598      	lsls	r0, r3, #22
 8020466:	d402      	bmi.n	802046e <_puts_r+0x36>
 8020468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802046a:	f000 fb53 	bl	8020b14 <__retarget_lock_acquire_recursive>
 802046e:	89a3      	ldrh	r3, [r4, #12]
 8020470:	0719      	lsls	r1, r3, #28
 8020472:	d51d      	bpl.n	80204b0 <_puts_r+0x78>
 8020474:	6923      	ldr	r3, [r4, #16]
 8020476:	b1db      	cbz	r3, 80204b0 <_puts_r+0x78>
 8020478:	3e01      	subs	r6, #1
 802047a:	68a3      	ldr	r3, [r4, #8]
 802047c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8020480:	3b01      	subs	r3, #1
 8020482:	60a3      	str	r3, [r4, #8]
 8020484:	bb39      	cbnz	r1, 80204d6 <_puts_r+0x9e>
 8020486:	2b00      	cmp	r3, #0
 8020488:	da38      	bge.n	80204fc <_puts_r+0xc4>
 802048a:	4622      	mov	r2, r4
 802048c:	210a      	movs	r1, #10
 802048e:	4628      	mov	r0, r5
 8020490:	f000 f898 	bl	80205c4 <__swbuf_r>
 8020494:	3001      	adds	r0, #1
 8020496:	d011      	beq.n	80204bc <_puts_r+0x84>
 8020498:	250a      	movs	r5, #10
 802049a:	e011      	b.n	80204c0 <_puts_r+0x88>
 802049c:	4b1b      	ldr	r3, [pc, #108]	; (802050c <_puts_r+0xd4>)
 802049e:	429c      	cmp	r4, r3
 80204a0:	d101      	bne.n	80204a6 <_puts_r+0x6e>
 80204a2:	68ac      	ldr	r4, [r5, #8]
 80204a4:	e7da      	b.n	802045c <_puts_r+0x24>
 80204a6:	4b1a      	ldr	r3, [pc, #104]	; (8020510 <_puts_r+0xd8>)
 80204a8:	429c      	cmp	r4, r3
 80204aa:	bf08      	it	eq
 80204ac:	68ec      	ldreq	r4, [r5, #12]
 80204ae:	e7d5      	b.n	802045c <_puts_r+0x24>
 80204b0:	4621      	mov	r1, r4
 80204b2:	4628      	mov	r0, r5
 80204b4:	f000 f8d8 	bl	8020668 <__swsetup_r>
 80204b8:	2800      	cmp	r0, #0
 80204ba:	d0dd      	beq.n	8020478 <_puts_r+0x40>
 80204bc:	f04f 35ff 	mov.w	r5, #4294967295
 80204c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80204c2:	07da      	lsls	r2, r3, #31
 80204c4:	d405      	bmi.n	80204d2 <_puts_r+0x9a>
 80204c6:	89a3      	ldrh	r3, [r4, #12]
 80204c8:	059b      	lsls	r3, r3, #22
 80204ca:	d402      	bmi.n	80204d2 <_puts_r+0x9a>
 80204cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80204ce:	f000 fb22 	bl	8020b16 <__retarget_lock_release_recursive>
 80204d2:	4628      	mov	r0, r5
 80204d4:	bd70      	pop	{r4, r5, r6, pc}
 80204d6:	2b00      	cmp	r3, #0
 80204d8:	da04      	bge.n	80204e4 <_puts_r+0xac>
 80204da:	69a2      	ldr	r2, [r4, #24]
 80204dc:	429a      	cmp	r2, r3
 80204de:	dc06      	bgt.n	80204ee <_puts_r+0xb6>
 80204e0:	290a      	cmp	r1, #10
 80204e2:	d004      	beq.n	80204ee <_puts_r+0xb6>
 80204e4:	6823      	ldr	r3, [r4, #0]
 80204e6:	1c5a      	adds	r2, r3, #1
 80204e8:	6022      	str	r2, [r4, #0]
 80204ea:	7019      	strb	r1, [r3, #0]
 80204ec:	e7c5      	b.n	802047a <_puts_r+0x42>
 80204ee:	4622      	mov	r2, r4
 80204f0:	4628      	mov	r0, r5
 80204f2:	f000 f867 	bl	80205c4 <__swbuf_r>
 80204f6:	3001      	adds	r0, #1
 80204f8:	d1bf      	bne.n	802047a <_puts_r+0x42>
 80204fa:	e7df      	b.n	80204bc <_puts_r+0x84>
 80204fc:	6823      	ldr	r3, [r4, #0]
 80204fe:	250a      	movs	r5, #10
 8020500:	1c5a      	adds	r2, r3, #1
 8020502:	6022      	str	r2, [r4, #0]
 8020504:	701d      	strb	r5, [r3, #0]
 8020506:	e7db      	b.n	80204c0 <_puts_r+0x88>
 8020508:	08026de4 	.word	0x08026de4
 802050c:	08026e04 	.word	0x08026e04
 8020510:	08026dc4 	.word	0x08026dc4

08020514 <puts>:
 8020514:	4b02      	ldr	r3, [pc, #8]	; (8020520 <puts+0xc>)
 8020516:	4601      	mov	r1, r0
 8020518:	6818      	ldr	r0, [r3, #0]
 802051a:	f7ff bf8d 	b.w	8020438 <_puts_r>
 802051e:	bf00      	nop
 8020520:	20000038 	.word	0x20000038

08020524 <rand>:
 8020524:	4b17      	ldr	r3, [pc, #92]	; (8020584 <rand+0x60>)
 8020526:	b510      	push	{r4, lr}
 8020528:	681c      	ldr	r4, [r3, #0]
 802052a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802052c:	b9b3      	cbnz	r3, 802055c <rand+0x38>
 802052e:	2018      	movs	r0, #24
 8020530:	f7ff fe7e 	bl	8020230 <malloc>
 8020534:	63a0      	str	r0, [r4, #56]	; 0x38
 8020536:	b928      	cbnz	r0, 8020544 <rand+0x20>
 8020538:	4602      	mov	r2, r0
 802053a:	4b13      	ldr	r3, [pc, #76]	; (8020588 <rand+0x64>)
 802053c:	4813      	ldr	r0, [pc, #76]	; (802058c <rand+0x68>)
 802053e:	214e      	movs	r1, #78	; 0x4e
 8020540:	f000 f900 	bl	8020744 <__assert_func>
 8020544:	4a12      	ldr	r2, [pc, #72]	; (8020590 <rand+0x6c>)
 8020546:	4b13      	ldr	r3, [pc, #76]	; (8020594 <rand+0x70>)
 8020548:	e9c0 2300 	strd	r2, r3, [r0]
 802054c:	4b12      	ldr	r3, [pc, #72]	; (8020598 <rand+0x74>)
 802054e:	6083      	str	r3, [r0, #8]
 8020550:	230b      	movs	r3, #11
 8020552:	8183      	strh	r3, [r0, #12]
 8020554:	2201      	movs	r2, #1
 8020556:	2300      	movs	r3, #0
 8020558:	e9c0 2304 	strd	r2, r3, [r0, #16]
 802055c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802055e:	480f      	ldr	r0, [pc, #60]	; (802059c <rand+0x78>)
 8020560:	690a      	ldr	r2, [r1, #16]
 8020562:	694b      	ldr	r3, [r1, #20]
 8020564:	4c0e      	ldr	r4, [pc, #56]	; (80205a0 <rand+0x7c>)
 8020566:	4350      	muls	r0, r2
 8020568:	fb04 0003 	mla	r0, r4, r3, r0
 802056c:	fba2 3404 	umull	r3, r4, r2, r4
 8020570:	1c5a      	adds	r2, r3, #1
 8020572:	4404      	add	r4, r0
 8020574:	f144 0000 	adc.w	r0, r4, #0
 8020578:	e9c1 2004 	strd	r2, r0, [r1, #16]
 802057c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8020580:	bd10      	pop	{r4, pc}
 8020582:	bf00      	nop
 8020584:	20000038 	.word	0x20000038
 8020588:	08026d10 	.word	0x08026d10
 802058c:	08026d27 	.word	0x08026d27
 8020590:	abcd330e 	.word	0xabcd330e
 8020594:	e66d1234 	.word	0xe66d1234
 8020598:	0005deec 	.word	0x0005deec
 802059c:	5851f42d 	.word	0x5851f42d
 80205a0:	4c957f2d 	.word	0x4c957f2d

080205a4 <_sbrk_r>:
 80205a4:	b538      	push	{r3, r4, r5, lr}
 80205a6:	4d06      	ldr	r5, [pc, #24]	; (80205c0 <_sbrk_r+0x1c>)
 80205a8:	2300      	movs	r3, #0
 80205aa:	4604      	mov	r4, r0
 80205ac:	4608      	mov	r0, r1
 80205ae:	602b      	str	r3, [r5, #0]
 80205b0:	f7e0 fd62 	bl	8001078 <_sbrk>
 80205b4:	1c43      	adds	r3, r0, #1
 80205b6:	d102      	bne.n	80205be <_sbrk_r+0x1a>
 80205b8:	682b      	ldr	r3, [r5, #0]
 80205ba:	b103      	cbz	r3, 80205be <_sbrk_r+0x1a>
 80205bc:	6023      	str	r3, [r4, #0]
 80205be:	bd38      	pop	{r3, r4, r5, pc}
 80205c0:	2000a564 	.word	0x2000a564

080205c4 <__swbuf_r>:
 80205c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80205c6:	460e      	mov	r6, r1
 80205c8:	4614      	mov	r4, r2
 80205ca:	4605      	mov	r5, r0
 80205cc:	b118      	cbz	r0, 80205d6 <__swbuf_r+0x12>
 80205ce:	6983      	ldr	r3, [r0, #24]
 80205d0:	b90b      	cbnz	r3, 80205d6 <__swbuf_r+0x12>
 80205d2:	f000 f9ef 	bl	80209b4 <__sinit>
 80205d6:	4b21      	ldr	r3, [pc, #132]	; (802065c <__swbuf_r+0x98>)
 80205d8:	429c      	cmp	r4, r3
 80205da:	d12b      	bne.n	8020634 <__swbuf_r+0x70>
 80205dc:	686c      	ldr	r4, [r5, #4]
 80205de:	69a3      	ldr	r3, [r4, #24]
 80205e0:	60a3      	str	r3, [r4, #8]
 80205e2:	89a3      	ldrh	r3, [r4, #12]
 80205e4:	071a      	lsls	r2, r3, #28
 80205e6:	d52f      	bpl.n	8020648 <__swbuf_r+0x84>
 80205e8:	6923      	ldr	r3, [r4, #16]
 80205ea:	b36b      	cbz	r3, 8020648 <__swbuf_r+0x84>
 80205ec:	6923      	ldr	r3, [r4, #16]
 80205ee:	6820      	ldr	r0, [r4, #0]
 80205f0:	1ac0      	subs	r0, r0, r3
 80205f2:	6963      	ldr	r3, [r4, #20]
 80205f4:	b2f6      	uxtb	r6, r6
 80205f6:	4283      	cmp	r3, r0
 80205f8:	4637      	mov	r7, r6
 80205fa:	dc04      	bgt.n	8020606 <__swbuf_r+0x42>
 80205fc:	4621      	mov	r1, r4
 80205fe:	4628      	mov	r0, r5
 8020600:	f000 f944 	bl	802088c <_fflush_r>
 8020604:	bb30      	cbnz	r0, 8020654 <__swbuf_r+0x90>
 8020606:	68a3      	ldr	r3, [r4, #8]
 8020608:	3b01      	subs	r3, #1
 802060a:	60a3      	str	r3, [r4, #8]
 802060c:	6823      	ldr	r3, [r4, #0]
 802060e:	1c5a      	adds	r2, r3, #1
 8020610:	6022      	str	r2, [r4, #0]
 8020612:	701e      	strb	r6, [r3, #0]
 8020614:	6963      	ldr	r3, [r4, #20]
 8020616:	3001      	adds	r0, #1
 8020618:	4283      	cmp	r3, r0
 802061a:	d004      	beq.n	8020626 <__swbuf_r+0x62>
 802061c:	89a3      	ldrh	r3, [r4, #12]
 802061e:	07db      	lsls	r3, r3, #31
 8020620:	d506      	bpl.n	8020630 <__swbuf_r+0x6c>
 8020622:	2e0a      	cmp	r6, #10
 8020624:	d104      	bne.n	8020630 <__swbuf_r+0x6c>
 8020626:	4621      	mov	r1, r4
 8020628:	4628      	mov	r0, r5
 802062a:	f000 f92f 	bl	802088c <_fflush_r>
 802062e:	b988      	cbnz	r0, 8020654 <__swbuf_r+0x90>
 8020630:	4638      	mov	r0, r7
 8020632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020634:	4b0a      	ldr	r3, [pc, #40]	; (8020660 <__swbuf_r+0x9c>)
 8020636:	429c      	cmp	r4, r3
 8020638:	d101      	bne.n	802063e <__swbuf_r+0x7a>
 802063a:	68ac      	ldr	r4, [r5, #8]
 802063c:	e7cf      	b.n	80205de <__swbuf_r+0x1a>
 802063e:	4b09      	ldr	r3, [pc, #36]	; (8020664 <__swbuf_r+0xa0>)
 8020640:	429c      	cmp	r4, r3
 8020642:	bf08      	it	eq
 8020644:	68ec      	ldreq	r4, [r5, #12]
 8020646:	e7ca      	b.n	80205de <__swbuf_r+0x1a>
 8020648:	4621      	mov	r1, r4
 802064a:	4628      	mov	r0, r5
 802064c:	f000 f80c 	bl	8020668 <__swsetup_r>
 8020650:	2800      	cmp	r0, #0
 8020652:	d0cb      	beq.n	80205ec <__swbuf_r+0x28>
 8020654:	f04f 37ff 	mov.w	r7, #4294967295
 8020658:	e7ea      	b.n	8020630 <__swbuf_r+0x6c>
 802065a:	bf00      	nop
 802065c:	08026de4 	.word	0x08026de4
 8020660:	08026e04 	.word	0x08026e04
 8020664:	08026dc4 	.word	0x08026dc4

08020668 <__swsetup_r>:
 8020668:	4b32      	ldr	r3, [pc, #200]	; (8020734 <__swsetup_r+0xcc>)
 802066a:	b570      	push	{r4, r5, r6, lr}
 802066c:	681d      	ldr	r5, [r3, #0]
 802066e:	4606      	mov	r6, r0
 8020670:	460c      	mov	r4, r1
 8020672:	b125      	cbz	r5, 802067e <__swsetup_r+0x16>
 8020674:	69ab      	ldr	r3, [r5, #24]
 8020676:	b913      	cbnz	r3, 802067e <__swsetup_r+0x16>
 8020678:	4628      	mov	r0, r5
 802067a:	f000 f99b 	bl	80209b4 <__sinit>
 802067e:	4b2e      	ldr	r3, [pc, #184]	; (8020738 <__swsetup_r+0xd0>)
 8020680:	429c      	cmp	r4, r3
 8020682:	d10f      	bne.n	80206a4 <__swsetup_r+0x3c>
 8020684:	686c      	ldr	r4, [r5, #4]
 8020686:	89a3      	ldrh	r3, [r4, #12]
 8020688:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802068c:	0719      	lsls	r1, r3, #28
 802068e:	d42c      	bmi.n	80206ea <__swsetup_r+0x82>
 8020690:	06dd      	lsls	r5, r3, #27
 8020692:	d411      	bmi.n	80206b8 <__swsetup_r+0x50>
 8020694:	2309      	movs	r3, #9
 8020696:	6033      	str	r3, [r6, #0]
 8020698:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802069c:	81a3      	strh	r3, [r4, #12]
 802069e:	f04f 30ff 	mov.w	r0, #4294967295
 80206a2:	e03e      	b.n	8020722 <__swsetup_r+0xba>
 80206a4:	4b25      	ldr	r3, [pc, #148]	; (802073c <__swsetup_r+0xd4>)
 80206a6:	429c      	cmp	r4, r3
 80206a8:	d101      	bne.n	80206ae <__swsetup_r+0x46>
 80206aa:	68ac      	ldr	r4, [r5, #8]
 80206ac:	e7eb      	b.n	8020686 <__swsetup_r+0x1e>
 80206ae:	4b24      	ldr	r3, [pc, #144]	; (8020740 <__swsetup_r+0xd8>)
 80206b0:	429c      	cmp	r4, r3
 80206b2:	bf08      	it	eq
 80206b4:	68ec      	ldreq	r4, [r5, #12]
 80206b6:	e7e6      	b.n	8020686 <__swsetup_r+0x1e>
 80206b8:	0758      	lsls	r0, r3, #29
 80206ba:	d512      	bpl.n	80206e2 <__swsetup_r+0x7a>
 80206bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80206be:	b141      	cbz	r1, 80206d2 <__swsetup_r+0x6a>
 80206c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80206c4:	4299      	cmp	r1, r3
 80206c6:	d002      	beq.n	80206ce <__swsetup_r+0x66>
 80206c8:	4630      	mov	r0, r6
 80206ca:	f7ff fddd 	bl	8020288 <_free_r>
 80206ce:	2300      	movs	r3, #0
 80206d0:	6363      	str	r3, [r4, #52]	; 0x34
 80206d2:	89a3      	ldrh	r3, [r4, #12]
 80206d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80206d8:	81a3      	strh	r3, [r4, #12]
 80206da:	2300      	movs	r3, #0
 80206dc:	6063      	str	r3, [r4, #4]
 80206de:	6923      	ldr	r3, [r4, #16]
 80206e0:	6023      	str	r3, [r4, #0]
 80206e2:	89a3      	ldrh	r3, [r4, #12]
 80206e4:	f043 0308 	orr.w	r3, r3, #8
 80206e8:	81a3      	strh	r3, [r4, #12]
 80206ea:	6923      	ldr	r3, [r4, #16]
 80206ec:	b94b      	cbnz	r3, 8020702 <__swsetup_r+0x9a>
 80206ee:	89a3      	ldrh	r3, [r4, #12]
 80206f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80206f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80206f8:	d003      	beq.n	8020702 <__swsetup_r+0x9a>
 80206fa:	4621      	mov	r1, r4
 80206fc:	4630      	mov	r0, r6
 80206fe:	f000 fa2f 	bl	8020b60 <__smakebuf_r>
 8020702:	89a0      	ldrh	r0, [r4, #12]
 8020704:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020708:	f010 0301 	ands.w	r3, r0, #1
 802070c:	d00a      	beq.n	8020724 <__swsetup_r+0xbc>
 802070e:	2300      	movs	r3, #0
 8020710:	60a3      	str	r3, [r4, #8]
 8020712:	6963      	ldr	r3, [r4, #20]
 8020714:	425b      	negs	r3, r3
 8020716:	61a3      	str	r3, [r4, #24]
 8020718:	6923      	ldr	r3, [r4, #16]
 802071a:	b943      	cbnz	r3, 802072e <__swsetup_r+0xc6>
 802071c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8020720:	d1ba      	bne.n	8020698 <__swsetup_r+0x30>
 8020722:	bd70      	pop	{r4, r5, r6, pc}
 8020724:	0781      	lsls	r1, r0, #30
 8020726:	bf58      	it	pl
 8020728:	6963      	ldrpl	r3, [r4, #20]
 802072a:	60a3      	str	r3, [r4, #8]
 802072c:	e7f4      	b.n	8020718 <__swsetup_r+0xb0>
 802072e:	2000      	movs	r0, #0
 8020730:	e7f7      	b.n	8020722 <__swsetup_r+0xba>
 8020732:	bf00      	nop
 8020734:	20000038 	.word	0x20000038
 8020738:	08026de4 	.word	0x08026de4
 802073c:	08026e04 	.word	0x08026e04
 8020740:	08026dc4 	.word	0x08026dc4

08020744 <__assert_func>:
 8020744:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020746:	4614      	mov	r4, r2
 8020748:	461a      	mov	r2, r3
 802074a:	4b09      	ldr	r3, [pc, #36]	; (8020770 <__assert_func+0x2c>)
 802074c:	681b      	ldr	r3, [r3, #0]
 802074e:	4605      	mov	r5, r0
 8020750:	68d8      	ldr	r0, [r3, #12]
 8020752:	b14c      	cbz	r4, 8020768 <__assert_func+0x24>
 8020754:	4b07      	ldr	r3, [pc, #28]	; (8020774 <__assert_func+0x30>)
 8020756:	9100      	str	r1, [sp, #0]
 8020758:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802075c:	4906      	ldr	r1, [pc, #24]	; (8020778 <__assert_func+0x34>)
 802075e:	462b      	mov	r3, r5
 8020760:	f000 f9a6 	bl	8020ab0 <fiprintf>
 8020764:	f000 fdd4 	bl	8021310 <abort>
 8020768:	4b04      	ldr	r3, [pc, #16]	; (802077c <__assert_func+0x38>)
 802076a:	461c      	mov	r4, r3
 802076c:	e7f3      	b.n	8020756 <__assert_func+0x12>
 802076e:	bf00      	nop
 8020770:	20000038 	.word	0x20000038
 8020774:	08026d86 	.word	0x08026d86
 8020778:	08026d93 	.word	0x08026d93
 802077c:	08026dc1 	.word	0x08026dc1

08020780 <__sflush_r>:
 8020780:	898a      	ldrh	r2, [r1, #12]
 8020782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020786:	4605      	mov	r5, r0
 8020788:	0710      	lsls	r0, r2, #28
 802078a:	460c      	mov	r4, r1
 802078c:	d458      	bmi.n	8020840 <__sflush_r+0xc0>
 802078e:	684b      	ldr	r3, [r1, #4]
 8020790:	2b00      	cmp	r3, #0
 8020792:	dc05      	bgt.n	80207a0 <__sflush_r+0x20>
 8020794:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8020796:	2b00      	cmp	r3, #0
 8020798:	dc02      	bgt.n	80207a0 <__sflush_r+0x20>
 802079a:	2000      	movs	r0, #0
 802079c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80207a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80207a2:	2e00      	cmp	r6, #0
 80207a4:	d0f9      	beq.n	802079a <__sflush_r+0x1a>
 80207a6:	2300      	movs	r3, #0
 80207a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80207ac:	682f      	ldr	r7, [r5, #0]
 80207ae:	602b      	str	r3, [r5, #0]
 80207b0:	d032      	beq.n	8020818 <__sflush_r+0x98>
 80207b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80207b4:	89a3      	ldrh	r3, [r4, #12]
 80207b6:	075a      	lsls	r2, r3, #29
 80207b8:	d505      	bpl.n	80207c6 <__sflush_r+0x46>
 80207ba:	6863      	ldr	r3, [r4, #4]
 80207bc:	1ac0      	subs	r0, r0, r3
 80207be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80207c0:	b10b      	cbz	r3, 80207c6 <__sflush_r+0x46>
 80207c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80207c4:	1ac0      	subs	r0, r0, r3
 80207c6:	2300      	movs	r3, #0
 80207c8:	4602      	mov	r2, r0
 80207ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80207cc:	6a21      	ldr	r1, [r4, #32]
 80207ce:	4628      	mov	r0, r5
 80207d0:	47b0      	blx	r6
 80207d2:	1c43      	adds	r3, r0, #1
 80207d4:	89a3      	ldrh	r3, [r4, #12]
 80207d6:	d106      	bne.n	80207e6 <__sflush_r+0x66>
 80207d8:	6829      	ldr	r1, [r5, #0]
 80207da:	291d      	cmp	r1, #29
 80207dc:	d82c      	bhi.n	8020838 <__sflush_r+0xb8>
 80207de:	4a2a      	ldr	r2, [pc, #168]	; (8020888 <__sflush_r+0x108>)
 80207e0:	40ca      	lsrs	r2, r1
 80207e2:	07d6      	lsls	r6, r2, #31
 80207e4:	d528      	bpl.n	8020838 <__sflush_r+0xb8>
 80207e6:	2200      	movs	r2, #0
 80207e8:	6062      	str	r2, [r4, #4]
 80207ea:	04d9      	lsls	r1, r3, #19
 80207ec:	6922      	ldr	r2, [r4, #16]
 80207ee:	6022      	str	r2, [r4, #0]
 80207f0:	d504      	bpl.n	80207fc <__sflush_r+0x7c>
 80207f2:	1c42      	adds	r2, r0, #1
 80207f4:	d101      	bne.n	80207fa <__sflush_r+0x7a>
 80207f6:	682b      	ldr	r3, [r5, #0]
 80207f8:	b903      	cbnz	r3, 80207fc <__sflush_r+0x7c>
 80207fa:	6560      	str	r0, [r4, #84]	; 0x54
 80207fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80207fe:	602f      	str	r7, [r5, #0]
 8020800:	2900      	cmp	r1, #0
 8020802:	d0ca      	beq.n	802079a <__sflush_r+0x1a>
 8020804:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020808:	4299      	cmp	r1, r3
 802080a:	d002      	beq.n	8020812 <__sflush_r+0x92>
 802080c:	4628      	mov	r0, r5
 802080e:	f7ff fd3b 	bl	8020288 <_free_r>
 8020812:	2000      	movs	r0, #0
 8020814:	6360      	str	r0, [r4, #52]	; 0x34
 8020816:	e7c1      	b.n	802079c <__sflush_r+0x1c>
 8020818:	6a21      	ldr	r1, [r4, #32]
 802081a:	2301      	movs	r3, #1
 802081c:	4628      	mov	r0, r5
 802081e:	47b0      	blx	r6
 8020820:	1c41      	adds	r1, r0, #1
 8020822:	d1c7      	bne.n	80207b4 <__sflush_r+0x34>
 8020824:	682b      	ldr	r3, [r5, #0]
 8020826:	2b00      	cmp	r3, #0
 8020828:	d0c4      	beq.n	80207b4 <__sflush_r+0x34>
 802082a:	2b1d      	cmp	r3, #29
 802082c:	d001      	beq.n	8020832 <__sflush_r+0xb2>
 802082e:	2b16      	cmp	r3, #22
 8020830:	d101      	bne.n	8020836 <__sflush_r+0xb6>
 8020832:	602f      	str	r7, [r5, #0]
 8020834:	e7b1      	b.n	802079a <__sflush_r+0x1a>
 8020836:	89a3      	ldrh	r3, [r4, #12]
 8020838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802083c:	81a3      	strh	r3, [r4, #12]
 802083e:	e7ad      	b.n	802079c <__sflush_r+0x1c>
 8020840:	690f      	ldr	r7, [r1, #16]
 8020842:	2f00      	cmp	r7, #0
 8020844:	d0a9      	beq.n	802079a <__sflush_r+0x1a>
 8020846:	0793      	lsls	r3, r2, #30
 8020848:	680e      	ldr	r6, [r1, #0]
 802084a:	bf08      	it	eq
 802084c:	694b      	ldreq	r3, [r1, #20]
 802084e:	600f      	str	r7, [r1, #0]
 8020850:	bf18      	it	ne
 8020852:	2300      	movne	r3, #0
 8020854:	eba6 0807 	sub.w	r8, r6, r7
 8020858:	608b      	str	r3, [r1, #8]
 802085a:	f1b8 0f00 	cmp.w	r8, #0
 802085e:	dd9c      	ble.n	802079a <__sflush_r+0x1a>
 8020860:	6a21      	ldr	r1, [r4, #32]
 8020862:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8020864:	4643      	mov	r3, r8
 8020866:	463a      	mov	r2, r7
 8020868:	4628      	mov	r0, r5
 802086a:	47b0      	blx	r6
 802086c:	2800      	cmp	r0, #0
 802086e:	dc06      	bgt.n	802087e <__sflush_r+0xfe>
 8020870:	89a3      	ldrh	r3, [r4, #12]
 8020872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020876:	81a3      	strh	r3, [r4, #12]
 8020878:	f04f 30ff 	mov.w	r0, #4294967295
 802087c:	e78e      	b.n	802079c <__sflush_r+0x1c>
 802087e:	4407      	add	r7, r0
 8020880:	eba8 0800 	sub.w	r8, r8, r0
 8020884:	e7e9      	b.n	802085a <__sflush_r+0xda>
 8020886:	bf00      	nop
 8020888:	20400001 	.word	0x20400001

0802088c <_fflush_r>:
 802088c:	b538      	push	{r3, r4, r5, lr}
 802088e:	690b      	ldr	r3, [r1, #16]
 8020890:	4605      	mov	r5, r0
 8020892:	460c      	mov	r4, r1
 8020894:	b913      	cbnz	r3, 802089c <_fflush_r+0x10>
 8020896:	2500      	movs	r5, #0
 8020898:	4628      	mov	r0, r5
 802089a:	bd38      	pop	{r3, r4, r5, pc}
 802089c:	b118      	cbz	r0, 80208a6 <_fflush_r+0x1a>
 802089e:	6983      	ldr	r3, [r0, #24]
 80208a0:	b90b      	cbnz	r3, 80208a6 <_fflush_r+0x1a>
 80208a2:	f000 f887 	bl	80209b4 <__sinit>
 80208a6:	4b14      	ldr	r3, [pc, #80]	; (80208f8 <_fflush_r+0x6c>)
 80208a8:	429c      	cmp	r4, r3
 80208aa:	d11b      	bne.n	80208e4 <_fflush_r+0x58>
 80208ac:	686c      	ldr	r4, [r5, #4]
 80208ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80208b2:	2b00      	cmp	r3, #0
 80208b4:	d0ef      	beq.n	8020896 <_fflush_r+0xa>
 80208b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80208b8:	07d0      	lsls	r0, r2, #31
 80208ba:	d404      	bmi.n	80208c6 <_fflush_r+0x3a>
 80208bc:	0599      	lsls	r1, r3, #22
 80208be:	d402      	bmi.n	80208c6 <_fflush_r+0x3a>
 80208c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80208c2:	f000 f927 	bl	8020b14 <__retarget_lock_acquire_recursive>
 80208c6:	4628      	mov	r0, r5
 80208c8:	4621      	mov	r1, r4
 80208ca:	f7ff ff59 	bl	8020780 <__sflush_r>
 80208ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80208d0:	07da      	lsls	r2, r3, #31
 80208d2:	4605      	mov	r5, r0
 80208d4:	d4e0      	bmi.n	8020898 <_fflush_r+0xc>
 80208d6:	89a3      	ldrh	r3, [r4, #12]
 80208d8:	059b      	lsls	r3, r3, #22
 80208da:	d4dd      	bmi.n	8020898 <_fflush_r+0xc>
 80208dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80208de:	f000 f91a 	bl	8020b16 <__retarget_lock_release_recursive>
 80208e2:	e7d9      	b.n	8020898 <_fflush_r+0xc>
 80208e4:	4b05      	ldr	r3, [pc, #20]	; (80208fc <_fflush_r+0x70>)
 80208e6:	429c      	cmp	r4, r3
 80208e8:	d101      	bne.n	80208ee <_fflush_r+0x62>
 80208ea:	68ac      	ldr	r4, [r5, #8]
 80208ec:	e7df      	b.n	80208ae <_fflush_r+0x22>
 80208ee:	4b04      	ldr	r3, [pc, #16]	; (8020900 <_fflush_r+0x74>)
 80208f0:	429c      	cmp	r4, r3
 80208f2:	bf08      	it	eq
 80208f4:	68ec      	ldreq	r4, [r5, #12]
 80208f6:	e7da      	b.n	80208ae <_fflush_r+0x22>
 80208f8:	08026de4 	.word	0x08026de4
 80208fc:	08026e04 	.word	0x08026e04
 8020900:	08026dc4 	.word	0x08026dc4

08020904 <std>:
 8020904:	2300      	movs	r3, #0
 8020906:	b510      	push	{r4, lr}
 8020908:	4604      	mov	r4, r0
 802090a:	e9c0 3300 	strd	r3, r3, [r0]
 802090e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8020912:	6083      	str	r3, [r0, #8]
 8020914:	8181      	strh	r1, [r0, #12]
 8020916:	6643      	str	r3, [r0, #100]	; 0x64
 8020918:	81c2      	strh	r2, [r0, #14]
 802091a:	6183      	str	r3, [r0, #24]
 802091c:	4619      	mov	r1, r3
 802091e:	2208      	movs	r2, #8
 8020920:	305c      	adds	r0, #92	; 0x5c
 8020922:	f7ff fca9 	bl	8020278 <memset>
 8020926:	4b05      	ldr	r3, [pc, #20]	; (802093c <std+0x38>)
 8020928:	6263      	str	r3, [r4, #36]	; 0x24
 802092a:	4b05      	ldr	r3, [pc, #20]	; (8020940 <std+0x3c>)
 802092c:	62a3      	str	r3, [r4, #40]	; 0x28
 802092e:	4b05      	ldr	r3, [pc, #20]	; (8020944 <std+0x40>)
 8020930:	62e3      	str	r3, [r4, #44]	; 0x2c
 8020932:	4b05      	ldr	r3, [pc, #20]	; (8020948 <std+0x44>)
 8020934:	6224      	str	r4, [r4, #32]
 8020936:	6323      	str	r3, [r4, #48]	; 0x30
 8020938:	bd10      	pop	{r4, pc}
 802093a:	bf00      	nop
 802093c:	08021265 	.word	0x08021265
 8020940:	08021287 	.word	0x08021287
 8020944:	080212bf 	.word	0x080212bf
 8020948:	080212e3 	.word	0x080212e3

0802094c <_cleanup_r>:
 802094c:	4901      	ldr	r1, [pc, #4]	; (8020954 <_cleanup_r+0x8>)
 802094e:	f000 b8c1 	b.w	8020ad4 <_fwalk_reent>
 8020952:	bf00      	nop
 8020954:	0802088d 	.word	0x0802088d

08020958 <__sfmoreglue>:
 8020958:	b570      	push	{r4, r5, r6, lr}
 802095a:	1e4a      	subs	r2, r1, #1
 802095c:	2568      	movs	r5, #104	; 0x68
 802095e:	4355      	muls	r5, r2
 8020960:	460e      	mov	r6, r1
 8020962:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8020966:	f7ff fcdf 	bl	8020328 <_malloc_r>
 802096a:	4604      	mov	r4, r0
 802096c:	b140      	cbz	r0, 8020980 <__sfmoreglue+0x28>
 802096e:	2100      	movs	r1, #0
 8020970:	e9c0 1600 	strd	r1, r6, [r0]
 8020974:	300c      	adds	r0, #12
 8020976:	60a0      	str	r0, [r4, #8]
 8020978:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802097c:	f7ff fc7c 	bl	8020278 <memset>
 8020980:	4620      	mov	r0, r4
 8020982:	bd70      	pop	{r4, r5, r6, pc}

08020984 <__sfp_lock_acquire>:
 8020984:	4801      	ldr	r0, [pc, #4]	; (802098c <__sfp_lock_acquire+0x8>)
 8020986:	f000 b8c5 	b.w	8020b14 <__retarget_lock_acquire_recursive>
 802098a:	bf00      	nop
 802098c:	2000abd8 	.word	0x2000abd8

08020990 <__sfp_lock_release>:
 8020990:	4801      	ldr	r0, [pc, #4]	; (8020998 <__sfp_lock_release+0x8>)
 8020992:	f000 b8c0 	b.w	8020b16 <__retarget_lock_release_recursive>
 8020996:	bf00      	nop
 8020998:	2000abd8 	.word	0x2000abd8

0802099c <__sinit_lock_acquire>:
 802099c:	4801      	ldr	r0, [pc, #4]	; (80209a4 <__sinit_lock_acquire+0x8>)
 802099e:	f000 b8b9 	b.w	8020b14 <__retarget_lock_acquire_recursive>
 80209a2:	bf00      	nop
 80209a4:	2000abd3 	.word	0x2000abd3

080209a8 <__sinit_lock_release>:
 80209a8:	4801      	ldr	r0, [pc, #4]	; (80209b0 <__sinit_lock_release+0x8>)
 80209aa:	f000 b8b4 	b.w	8020b16 <__retarget_lock_release_recursive>
 80209ae:	bf00      	nop
 80209b0:	2000abd3 	.word	0x2000abd3

080209b4 <__sinit>:
 80209b4:	b510      	push	{r4, lr}
 80209b6:	4604      	mov	r4, r0
 80209b8:	f7ff fff0 	bl	802099c <__sinit_lock_acquire>
 80209bc:	69a3      	ldr	r3, [r4, #24]
 80209be:	b11b      	cbz	r3, 80209c8 <__sinit+0x14>
 80209c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80209c4:	f7ff bff0 	b.w	80209a8 <__sinit_lock_release>
 80209c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80209cc:	6523      	str	r3, [r4, #80]	; 0x50
 80209ce:	4b13      	ldr	r3, [pc, #76]	; (8020a1c <__sinit+0x68>)
 80209d0:	4a13      	ldr	r2, [pc, #76]	; (8020a20 <__sinit+0x6c>)
 80209d2:	681b      	ldr	r3, [r3, #0]
 80209d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80209d6:	42a3      	cmp	r3, r4
 80209d8:	bf04      	itt	eq
 80209da:	2301      	moveq	r3, #1
 80209dc:	61a3      	streq	r3, [r4, #24]
 80209de:	4620      	mov	r0, r4
 80209e0:	f000 f820 	bl	8020a24 <__sfp>
 80209e4:	6060      	str	r0, [r4, #4]
 80209e6:	4620      	mov	r0, r4
 80209e8:	f000 f81c 	bl	8020a24 <__sfp>
 80209ec:	60a0      	str	r0, [r4, #8]
 80209ee:	4620      	mov	r0, r4
 80209f0:	f000 f818 	bl	8020a24 <__sfp>
 80209f4:	2200      	movs	r2, #0
 80209f6:	60e0      	str	r0, [r4, #12]
 80209f8:	2104      	movs	r1, #4
 80209fa:	6860      	ldr	r0, [r4, #4]
 80209fc:	f7ff ff82 	bl	8020904 <std>
 8020a00:	68a0      	ldr	r0, [r4, #8]
 8020a02:	2201      	movs	r2, #1
 8020a04:	2109      	movs	r1, #9
 8020a06:	f7ff ff7d 	bl	8020904 <std>
 8020a0a:	68e0      	ldr	r0, [r4, #12]
 8020a0c:	2202      	movs	r2, #2
 8020a0e:	2112      	movs	r1, #18
 8020a10:	f7ff ff78 	bl	8020904 <std>
 8020a14:	2301      	movs	r3, #1
 8020a16:	61a3      	str	r3, [r4, #24]
 8020a18:	e7d2      	b.n	80209c0 <__sinit+0xc>
 8020a1a:	bf00      	nop
 8020a1c:	08026d0c 	.word	0x08026d0c
 8020a20:	0802094d 	.word	0x0802094d

08020a24 <__sfp>:
 8020a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020a26:	4607      	mov	r7, r0
 8020a28:	f7ff ffac 	bl	8020984 <__sfp_lock_acquire>
 8020a2c:	4b1e      	ldr	r3, [pc, #120]	; (8020aa8 <__sfp+0x84>)
 8020a2e:	681e      	ldr	r6, [r3, #0]
 8020a30:	69b3      	ldr	r3, [r6, #24]
 8020a32:	b913      	cbnz	r3, 8020a3a <__sfp+0x16>
 8020a34:	4630      	mov	r0, r6
 8020a36:	f7ff ffbd 	bl	80209b4 <__sinit>
 8020a3a:	3648      	adds	r6, #72	; 0x48
 8020a3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8020a40:	3b01      	subs	r3, #1
 8020a42:	d503      	bpl.n	8020a4c <__sfp+0x28>
 8020a44:	6833      	ldr	r3, [r6, #0]
 8020a46:	b30b      	cbz	r3, 8020a8c <__sfp+0x68>
 8020a48:	6836      	ldr	r6, [r6, #0]
 8020a4a:	e7f7      	b.n	8020a3c <__sfp+0x18>
 8020a4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8020a50:	b9d5      	cbnz	r5, 8020a88 <__sfp+0x64>
 8020a52:	4b16      	ldr	r3, [pc, #88]	; (8020aac <__sfp+0x88>)
 8020a54:	60e3      	str	r3, [r4, #12]
 8020a56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8020a5a:	6665      	str	r5, [r4, #100]	; 0x64
 8020a5c:	f000 f859 	bl	8020b12 <__retarget_lock_init_recursive>
 8020a60:	f7ff ff96 	bl	8020990 <__sfp_lock_release>
 8020a64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8020a68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8020a6c:	6025      	str	r5, [r4, #0]
 8020a6e:	61a5      	str	r5, [r4, #24]
 8020a70:	2208      	movs	r2, #8
 8020a72:	4629      	mov	r1, r5
 8020a74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8020a78:	f7ff fbfe 	bl	8020278 <memset>
 8020a7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8020a80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8020a84:	4620      	mov	r0, r4
 8020a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020a88:	3468      	adds	r4, #104	; 0x68
 8020a8a:	e7d9      	b.n	8020a40 <__sfp+0x1c>
 8020a8c:	2104      	movs	r1, #4
 8020a8e:	4638      	mov	r0, r7
 8020a90:	f7ff ff62 	bl	8020958 <__sfmoreglue>
 8020a94:	4604      	mov	r4, r0
 8020a96:	6030      	str	r0, [r6, #0]
 8020a98:	2800      	cmp	r0, #0
 8020a9a:	d1d5      	bne.n	8020a48 <__sfp+0x24>
 8020a9c:	f7ff ff78 	bl	8020990 <__sfp_lock_release>
 8020aa0:	230c      	movs	r3, #12
 8020aa2:	603b      	str	r3, [r7, #0]
 8020aa4:	e7ee      	b.n	8020a84 <__sfp+0x60>
 8020aa6:	bf00      	nop
 8020aa8:	08026d0c 	.word	0x08026d0c
 8020aac:	ffff0001 	.word	0xffff0001

08020ab0 <fiprintf>:
 8020ab0:	b40e      	push	{r1, r2, r3}
 8020ab2:	b503      	push	{r0, r1, lr}
 8020ab4:	4601      	mov	r1, r0
 8020ab6:	ab03      	add	r3, sp, #12
 8020ab8:	4805      	ldr	r0, [pc, #20]	; (8020ad0 <fiprintf+0x20>)
 8020aba:	f853 2b04 	ldr.w	r2, [r3], #4
 8020abe:	6800      	ldr	r0, [r0, #0]
 8020ac0:	9301      	str	r3, [sp, #4]
 8020ac2:	f000 f8c3 	bl	8020c4c <_vfiprintf_r>
 8020ac6:	b002      	add	sp, #8
 8020ac8:	f85d eb04 	ldr.w	lr, [sp], #4
 8020acc:	b003      	add	sp, #12
 8020ace:	4770      	bx	lr
 8020ad0:	20000038 	.word	0x20000038

08020ad4 <_fwalk_reent>:
 8020ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020ad8:	4606      	mov	r6, r0
 8020ada:	4688      	mov	r8, r1
 8020adc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8020ae0:	2700      	movs	r7, #0
 8020ae2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020ae6:	f1b9 0901 	subs.w	r9, r9, #1
 8020aea:	d505      	bpl.n	8020af8 <_fwalk_reent+0x24>
 8020aec:	6824      	ldr	r4, [r4, #0]
 8020aee:	2c00      	cmp	r4, #0
 8020af0:	d1f7      	bne.n	8020ae2 <_fwalk_reent+0xe>
 8020af2:	4638      	mov	r0, r7
 8020af4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020af8:	89ab      	ldrh	r3, [r5, #12]
 8020afa:	2b01      	cmp	r3, #1
 8020afc:	d907      	bls.n	8020b0e <_fwalk_reent+0x3a>
 8020afe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020b02:	3301      	adds	r3, #1
 8020b04:	d003      	beq.n	8020b0e <_fwalk_reent+0x3a>
 8020b06:	4629      	mov	r1, r5
 8020b08:	4630      	mov	r0, r6
 8020b0a:	47c0      	blx	r8
 8020b0c:	4307      	orrs	r7, r0
 8020b0e:	3568      	adds	r5, #104	; 0x68
 8020b10:	e7e9      	b.n	8020ae6 <_fwalk_reent+0x12>

08020b12 <__retarget_lock_init_recursive>:
 8020b12:	4770      	bx	lr

08020b14 <__retarget_lock_acquire_recursive>:
 8020b14:	4770      	bx	lr

08020b16 <__retarget_lock_release_recursive>:
 8020b16:	4770      	bx	lr

08020b18 <__swhatbuf_r>:
 8020b18:	b570      	push	{r4, r5, r6, lr}
 8020b1a:	460e      	mov	r6, r1
 8020b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020b20:	2900      	cmp	r1, #0
 8020b22:	b096      	sub	sp, #88	; 0x58
 8020b24:	4614      	mov	r4, r2
 8020b26:	461d      	mov	r5, r3
 8020b28:	da07      	bge.n	8020b3a <__swhatbuf_r+0x22>
 8020b2a:	2300      	movs	r3, #0
 8020b2c:	602b      	str	r3, [r5, #0]
 8020b2e:	89b3      	ldrh	r3, [r6, #12]
 8020b30:	061a      	lsls	r2, r3, #24
 8020b32:	d410      	bmi.n	8020b56 <__swhatbuf_r+0x3e>
 8020b34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020b38:	e00e      	b.n	8020b58 <__swhatbuf_r+0x40>
 8020b3a:	466a      	mov	r2, sp
 8020b3c:	f000 fc00 	bl	8021340 <_fstat_r>
 8020b40:	2800      	cmp	r0, #0
 8020b42:	dbf2      	blt.n	8020b2a <__swhatbuf_r+0x12>
 8020b44:	9a01      	ldr	r2, [sp, #4]
 8020b46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8020b4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8020b4e:	425a      	negs	r2, r3
 8020b50:	415a      	adcs	r2, r3
 8020b52:	602a      	str	r2, [r5, #0]
 8020b54:	e7ee      	b.n	8020b34 <__swhatbuf_r+0x1c>
 8020b56:	2340      	movs	r3, #64	; 0x40
 8020b58:	2000      	movs	r0, #0
 8020b5a:	6023      	str	r3, [r4, #0]
 8020b5c:	b016      	add	sp, #88	; 0x58
 8020b5e:	bd70      	pop	{r4, r5, r6, pc}

08020b60 <__smakebuf_r>:
 8020b60:	898b      	ldrh	r3, [r1, #12]
 8020b62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020b64:	079d      	lsls	r5, r3, #30
 8020b66:	4606      	mov	r6, r0
 8020b68:	460c      	mov	r4, r1
 8020b6a:	d507      	bpl.n	8020b7c <__smakebuf_r+0x1c>
 8020b6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8020b70:	6023      	str	r3, [r4, #0]
 8020b72:	6123      	str	r3, [r4, #16]
 8020b74:	2301      	movs	r3, #1
 8020b76:	6163      	str	r3, [r4, #20]
 8020b78:	b002      	add	sp, #8
 8020b7a:	bd70      	pop	{r4, r5, r6, pc}
 8020b7c:	ab01      	add	r3, sp, #4
 8020b7e:	466a      	mov	r2, sp
 8020b80:	f7ff ffca 	bl	8020b18 <__swhatbuf_r>
 8020b84:	9900      	ldr	r1, [sp, #0]
 8020b86:	4605      	mov	r5, r0
 8020b88:	4630      	mov	r0, r6
 8020b8a:	f7ff fbcd 	bl	8020328 <_malloc_r>
 8020b8e:	b948      	cbnz	r0, 8020ba4 <__smakebuf_r+0x44>
 8020b90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020b94:	059a      	lsls	r2, r3, #22
 8020b96:	d4ef      	bmi.n	8020b78 <__smakebuf_r+0x18>
 8020b98:	f023 0303 	bic.w	r3, r3, #3
 8020b9c:	f043 0302 	orr.w	r3, r3, #2
 8020ba0:	81a3      	strh	r3, [r4, #12]
 8020ba2:	e7e3      	b.n	8020b6c <__smakebuf_r+0xc>
 8020ba4:	4b0d      	ldr	r3, [pc, #52]	; (8020bdc <__smakebuf_r+0x7c>)
 8020ba6:	62b3      	str	r3, [r6, #40]	; 0x28
 8020ba8:	89a3      	ldrh	r3, [r4, #12]
 8020baa:	6020      	str	r0, [r4, #0]
 8020bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020bb0:	81a3      	strh	r3, [r4, #12]
 8020bb2:	9b00      	ldr	r3, [sp, #0]
 8020bb4:	6163      	str	r3, [r4, #20]
 8020bb6:	9b01      	ldr	r3, [sp, #4]
 8020bb8:	6120      	str	r0, [r4, #16]
 8020bba:	b15b      	cbz	r3, 8020bd4 <__smakebuf_r+0x74>
 8020bbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020bc0:	4630      	mov	r0, r6
 8020bc2:	f000 fbcf 	bl	8021364 <_isatty_r>
 8020bc6:	b128      	cbz	r0, 8020bd4 <__smakebuf_r+0x74>
 8020bc8:	89a3      	ldrh	r3, [r4, #12]
 8020bca:	f023 0303 	bic.w	r3, r3, #3
 8020bce:	f043 0301 	orr.w	r3, r3, #1
 8020bd2:	81a3      	strh	r3, [r4, #12]
 8020bd4:	89a0      	ldrh	r0, [r4, #12]
 8020bd6:	4305      	orrs	r5, r0
 8020bd8:	81a5      	strh	r5, [r4, #12]
 8020bda:	e7cd      	b.n	8020b78 <__smakebuf_r+0x18>
 8020bdc:	0802094d 	.word	0x0802094d

08020be0 <__malloc_lock>:
 8020be0:	4801      	ldr	r0, [pc, #4]	; (8020be8 <__malloc_lock+0x8>)
 8020be2:	f7ff bf97 	b.w	8020b14 <__retarget_lock_acquire_recursive>
 8020be6:	bf00      	nop
 8020be8:	2000abd4 	.word	0x2000abd4

08020bec <__malloc_unlock>:
 8020bec:	4801      	ldr	r0, [pc, #4]	; (8020bf4 <__malloc_unlock+0x8>)
 8020bee:	f7ff bf92 	b.w	8020b16 <__retarget_lock_release_recursive>
 8020bf2:	bf00      	nop
 8020bf4:	2000abd4 	.word	0x2000abd4

08020bf8 <__sfputc_r>:
 8020bf8:	6893      	ldr	r3, [r2, #8]
 8020bfa:	3b01      	subs	r3, #1
 8020bfc:	2b00      	cmp	r3, #0
 8020bfe:	b410      	push	{r4}
 8020c00:	6093      	str	r3, [r2, #8]
 8020c02:	da08      	bge.n	8020c16 <__sfputc_r+0x1e>
 8020c04:	6994      	ldr	r4, [r2, #24]
 8020c06:	42a3      	cmp	r3, r4
 8020c08:	db01      	blt.n	8020c0e <__sfputc_r+0x16>
 8020c0a:	290a      	cmp	r1, #10
 8020c0c:	d103      	bne.n	8020c16 <__sfputc_r+0x1e>
 8020c0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020c12:	f7ff bcd7 	b.w	80205c4 <__swbuf_r>
 8020c16:	6813      	ldr	r3, [r2, #0]
 8020c18:	1c58      	adds	r0, r3, #1
 8020c1a:	6010      	str	r0, [r2, #0]
 8020c1c:	7019      	strb	r1, [r3, #0]
 8020c1e:	4608      	mov	r0, r1
 8020c20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020c24:	4770      	bx	lr

08020c26 <__sfputs_r>:
 8020c26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020c28:	4606      	mov	r6, r0
 8020c2a:	460f      	mov	r7, r1
 8020c2c:	4614      	mov	r4, r2
 8020c2e:	18d5      	adds	r5, r2, r3
 8020c30:	42ac      	cmp	r4, r5
 8020c32:	d101      	bne.n	8020c38 <__sfputs_r+0x12>
 8020c34:	2000      	movs	r0, #0
 8020c36:	e007      	b.n	8020c48 <__sfputs_r+0x22>
 8020c38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020c3c:	463a      	mov	r2, r7
 8020c3e:	4630      	mov	r0, r6
 8020c40:	f7ff ffda 	bl	8020bf8 <__sfputc_r>
 8020c44:	1c43      	adds	r3, r0, #1
 8020c46:	d1f3      	bne.n	8020c30 <__sfputs_r+0xa>
 8020c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020c4c <_vfiprintf_r>:
 8020c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c50:	460d      	mov	r5, r1
 8020c52:	b09d      	sub	sp, #116	; 0x74
 8020c54:	4614      	mov	r4, r2
 8020c56:	4698      	mov	r8, r3
 8020c58:	4606      	mov	r6, r0
 8020c5a:	b118      	cbz	r0, 8020c64 <_vfiprintf_r+0x18>
 8020c5c:	6983      	ldr	r3, [r0, #24]
 8020c5e:	b90b      	cbnz	r3, 8020c64 <_vfiprintf_r+0x18>
 8020c60:	f7ff fea8 	bl	80209b4 <__sinit>
 8020c64:	4b89      	ldr	r3, [pc, #548]	; (8020e8c <_vfiprintf_r+0x240>)
 8020c66:	429d      	cmp	r5, r3
 8020c68:	d11b      	bne.n	8020ca2 <_vfiprintf_r+0x56>
 8020c6a:	6875      	ldr	r5, [r6, #4]
 8020c6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020c6e:	07d9      	lsls	r1, r3, #31
 8020c70:	d405      	bmi.n	8020c7e <_vfiprintf_r+0x32>
 8020c72:	89ab      	ldrh	r3, [r5, #12]
 8020c74:	059a      	lsls	r2, r3, #22
 8020c76:	d402      	bmi.n	8020c7e <_vfiprintf_r+0x32>
 8020c78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020c7a:	f7ff ff4b 	bl	8020b14 <__retarget_lock_acquire_recursive>
 8020c7e:	89ab      	ldrh	r3, [r5, #12]
 8020c80:	071b      	lsls	r3, r3, #28
 8020c82:	d501      	bpl.n	8020c88 <_vfiprintf_r+0x3c>
 8020c84:	692b      	ldr	r3, [r5, #16]
 8020c86:	b9eb      	cbnz	r3, 8020cc4 <_vfiprintf_r+0x78>
 8020c88:	4629      	mov	r1, r5
 8020c8a:	4630      	mov	r0, r6
 8020c8c:	f7ff fcec 	bl	8020668 <__swsetup_r>
 8020c90:	b1c0      	cbz	r0, 8020cc4 <_vfiprintf_r+0x78>
 8020c92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020c94:	07dc      	lsls	r4, r3, #31
 8020c96:	d50e      	bpl.n	8020cb6 <_vfiprintf_r+0x6a>
 8020c98:	f04f 30ff 	mov.w	r0, #4294967295
 8020c9c:	b01d      	add	sp, #116	; 0x74
 8020c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ca2:	4b7b      	ldr	r3, [pc, #492]	; (8020e90 <_vfiprintf_r+0x244>)
 8020ca4:	429d      	cmp	r5, r3
 8020ca6:	d101      	bne.n	8020cac <_vfiprintf_r+0x60>
 8020ca8:	68b5      	ldr	r5, [r6, #8]
 8020caa:	e7df      	b.n	8020c6c <_vfiprintf_r+0x20>
 8020cac:	4b79      	ldr	r3, [pc, #484]	; (8020e94 <_vfiprintf_r+0x248>)
 8020cae:	429d      	cmp	r5, r3
 8020cb0:	bf08      	it	eq
 8020cb2:	68f5      	ldreq	r5, [r6, #12]
 8020cb4:	e7da      	b.n	8020c6c <_vfiprintf_r+0x20>
 8020cb6:	89ab      	ldrh	r3, [r5, #12]
 8020cb8:	0598      	lsls	r0, r3, #22
 8020cba:	d4ed      	bmi.n	8020c98 <_vfiprintf_r+0x4c>
 8020cbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020cbe:	f7ff ff2a 	bl	8020b16 <__retarget_lock_release_recursive>
 8020cc2:	e7e9      	b.n	8020c98 <_vfiprintf_r+0x4c>
 8020cc4:	2300      	movs	r3, #0
 8020cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8020cc8:	2320      	movs	r3, #32
 8020cca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020cce:	f8cd 800c 	str.w	r8, [sp, #12]
 8020cd2:	2330      	movs	r3, #48	; 0x30
 8020cd4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8020e98 <_vfiprintf_r+0x24c>
 8020cd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020cdc:	f04f 0901 	mov.w	r9, #1
 8020ce0:	4623      	mov	r3, r4
 8020ce2:	469a      	mov	sl, r3
 8020ce4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020ce8:	b10a      	cbz	r2, 8020cee <_vfiprintf_r+0xa2>
 8020cea:	2a25      	cmp	r2, #37	; 0x25
 8020cec:	d1f9      	bne.n	8020ce2 <_vfiprintf_r+0x96>
 8020cee:	ebba 0b04 	subs.w	fp, sl, r4
 8020cf2:	d00b      	beq.n	8020d0c <_vfiprintf_r+0xc0>
 8020cf4:	465b      	mov	r3, fp
 8020cf6:	4622      	mov	r2, r4
 8020cf8:	4629      	mov	r1, r5
 8020cfa:	4630      	mov	r0, r6
 8020cfc:	f7ff ff93 	bl	8020c26 <__sfputs_r>
 8020d00:	3001      	adds	r0, #1
 8020d02:	f000 80aa 	beq.w	8020e5a <_vfiprintf_r+0x20e>
 8020d06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020d08:	445a      	add	r2, fp
 8020d0a:	9209      	str	r2, [sp, #36]	; 0x24
 8020d0c:	f89a 3000 	ldrb.w	r3, [sl]
 8020d10:	2b00      	cmp	r3, #0
 8020d12:	f000 80a2 	beq.w	8020e5a <_vfiprintf_r+0x20e>
 8020d16:	2300      	movs	r3, #0
 8020d18:	f04f 32ff 	mov.w	r2, #4294967295
 8020d1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020d20:	f10a 0a01 	add.w	sl, sl, #1
 8020d24:	9304      	str	r3, [sp, #16]
 8020d26:	9307      	str	r3, [sp, #28]
 8020d28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020d2c:	931a      	str	r3, [sp, #104]	; 0x68
 8020d2e:	4654      	mov	r4, sl
 8020d30:	2205      	movs	r2, #5
 8020d32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020d36:	4858      	ldr	r0, [pc, #352]	; (8020e98 <_vfiprintf_r+0x24c>)
 8020d38:	f7df fada 	bl	80002f0 <memchr>
 8020d3c:	9a04      	ldr	r2, [sp, #16]
 8020d3e:	b9d8      	cbnz	r0, 8020d78 <_vfiprintf_r+0x12c>
 8020d40:	06d1      	lsls	r1, r2, #27
 8020d42:	bf44      	itt	mi
 8020d44:	2320      	movmi	r3, #32
 8020d46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020d4a:	0713      	lsls	r3, r2, #28
 8020d4c:	bf44      	itt	mi
 8020d4e:	232b      	movmi	r3, #43	; 0x2b
 8020d50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020d54:	f89a 3000 	ldrb.w	r3, [sl]
 8020d58:	2b2a      	cmp	r3, #42	; 0x2a
 8020d5a:	d015      	beq.n	8020d88 <_vfiprintf_r+0x13c>
 8020d5c:	9a07      	ldr	r2, [sp, #28]
 8020d5e:	4654      	mov	r4, sl
 8020d60:	2000      	movs	r0, #0
 8020d62:	f04f 0c0a 	mov.w	ip, #10
 8020d66:	4621      	mov	r1, r4
 8020d68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020d6c:	3b30      	subs	r3, #48	; 0x30
 8020d6e:	2b09      	cmp	r3, #9
 8020d70:	d94e      	bls.n	8020e10 <_vfiprintf_r+0x1c4>
 8020d72:	b1b0      	cbz	r0, 8020da2 <_vfiprintf_r+0x156>
 8020d74:	9207      	str	r2, [sp, #28]
 8020d76:	e014      	b.n	8020da2 <_vfiprintf_r+0x156>
 8020d78:	eba0 0308 	sub.w	r3, r0, r8
 8020d7c:	fa09 f303 	lsl.w	r3, r9, r3
 8020d80:	4313      	orrs	r3, r2
 8020d82:	9304      	str	r3, [sp, #16]
 8020d84:	46a2      	mov	sl, r4
 8020d86:	e7d2      	b.n	8020d2e <_vfiprintf_r+0xe2>
 8020d88:	9b03      	ldr	r3, [sp, #12]
 8020d8a:	1d19      	adds	r1, r3, #4
 8020d8c:	681b      	ldr	r3, [r3, #0]
 8020d8e:	9103      	str	r1, [sp, #12]
 8020d90:	2b00      	cmp	r3, #0
 8020d92:	bfbb      	ittet	lt
 8020d94:	425b      	neglt	r3, r3
 8020d96:	f042 0202 	orrlt.w	r2, r2, #2
 8020d9a:	9307      	strge	r3, [sp, #28]
 8020d9c:	9307      	strlt	r3, [sp, #28]
 8020d9e:	bfb8      	it	lt
 8020da0:	9204      	strlt	r2, [sp, #16]
 8020da2:	7823      	ldrb	r3, [r4, #0]
 8020da4:	2b2e      	cmp	r3, #46	; 0x2e
 8020da6:	d10c      	bne.n	8020dc2 <_vfiprintf_r+0x176>
 8020da8:	7863      	ldrb	r3, [r4, #1]
 8020daa:	2b2a      	cmp	r3, #42	; 0x2a
 8020dac:	d135      	bne.n	8020e1a <_vfiprintf_r+0x1ce>
 8020dae:	9b03      	ldr	r3, [sp, #12]
 8020db0:	1d1a      	adds	r2, r3, #4
 8020db2:	681b      	ldr	r3, [r3, #0]
 8020db4:	9203      	str	r2, [sp, #12]
 8020db6:	2b00      	cmp	r3, #0
 8020db8:	bfb8      	it	lt
 8020dba:	f04f 33ff 	movlt.w	r3, #4294967295
 8020dbe:	3402      	adds	r4, #2
 8020dc0:	9305      	str	r3, [sp, #20]
 8020dc2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8020ea8 <_vfiprintf_r+0x25c>
 8020dc6:	7821      	ldrb	r1, [r4, #0]
 8020dc8:	2203      	movs	r2, #3
 8020dca:	4650      	mov	r0, sl
 8020dcc:	f7df fa90 	bl	80002f0 <memchr>
 8020dd0:	b140      	cbz	r0, 8020de4 <_vfiprintf_r+0x198>
 8020dd2:	2340      	movs	r3, #64	; 0x40
 8020dd4:	eba0 000a 	sub.w	r0, r0, sl
 8020dd8:	fa03 f000 	lsl.w	r0, r3, r0
 8020ddc:	9b04      	ldr	r3, [sp, #16]
 8020dde:	4303      	orrs	r3, r0
 8020de0:	3401      	adds	r4, #1
 8020de2:	9304      	str	r3, [sp, #16]
 8020de4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020de8:	482c      	ldr	r0, [pc, #176]	; (8020e9c <_vfiprintf_r+0x250>)
 8020dea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020dee:	2206      	movs	r2, #6
 8020df0:	f7df fa7e 	bl	80002f0 <memchr>
 8020df4:	2800      	cmp	r0, #0
 8020df6:	d03f      	beq.n	8020e78 <_vfiprintf_r+0x22c>
 8020df8:	4b29      	ldr	r3, [pc, #164]	; (8020ea0 <_vfiprintf_r+0x254>)
 8020dfa:	bb1b      	cbnz	r3, 8020e44 <_vfiprintf_r+0x1f8>
 8020dfc:	9b03      	ldr	r3, [sp, #12]
 8020dfe:	3307      	adds	r3, #7
 8020e00:	f023 0307 	bic.w	r3, r3, #7
 8020e04:	3308      	adds	r3, #8
 8020e06:	9303      	str	r3, [sp, #12]
 8020e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020e0a:	443b      	add	r3, r7
 8020e0c:	9309      	str	r3, [sp, #36]	; 0x24
 8020e0e:	e767      	b.n	8020ce0 <_vfiprintf_r+0x94>
 8020e10:	fb0c 3202 	mla	r2, ip, r2, r3
 8020e14:	460c      	mov	r4, r1
 8020e16:	2001      	movs	r0, #1
 8020e18:	e7a5      	b.n	8020d66 <_vfiprintf_r+0x11a>
 8020e1a:	2300      	movs	r3, #0
 8020e1c:	3401      	adds	r4, #1
 8020e1e:	9305      	str	r3, [sp, #20]
 8020e20:	4619      	mov	r1, r3
 8020e22:	f04f 0c0a 	mov.w	ip, #10
 8020e26:	4620      	mov	r0, r4
 8020e28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020e2c:	3a30      	subs	r2, #48	; 0x30
 8020e2e:	2a09      	cmp	r2, #9
 8020e30:	d903      	bls.n	8020e3a <_vfiprintf_r+0x1ee>
 8020e32:	2b00      	cmp	r3, #0
 8020e34:	d0c5      	beq.n	8020dc2 <_vfiprintf_r+0x176>
 8020e36:	9105      	str	r1, [sp, #20]
 8020e38:	e7c3      	b.n	8020dc2 <_vfiprintf_r+0x176>
 8020e3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8020e3e:	4604      	mov	r4, r0
 8020e40:	2301      	movs	r3, #1
 8020e42:	e7f0      	b.n	8020e26 <_vfiprintf_r+0x1da>
 8020e44:	ab03      	add	r3, sp, #12
 8020e46:	9300      	str	r3, [sp, #0]
 8020e48:	462a      	mov	r2, r5
 8020e4a:	4b16      	ldr	r3, [pc, #88]	; (8020ea4 <_vfiprintf_r+0x258>)
 8020e4c:	a904      	add	r1, sp, #16
 8020e4e:	4630      	mov	r0, r6
 8020e50:	f3af 8000 	nop.w
 8020e54:	4607      	mov	r7, r0
 8020e56:	1c78      	adds	r0, r7, #1
 8020e58:	d1d6      	bne.n	8020e08 <_vfiprintf_r+0x1bc>
 8020e5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020e5c:	07d9      	lsls	r1, r3, #31
 8020e5e:	d405      	bmi.n	8020e6c <_vfiprintf_r+0x220>
 8020e60:	89ab      	ldrh	r3, [r5, #12]
 8020e62:	059a      	lsls	r2, r3, #22
 8020e64:	d402      	bmi.n	8020e6c <_vfiprintf_r+0x220>
 8020e66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020e68:	f7ff fe55 	bl	8020b16 <__retarget_lock_release_recursive>
 8020e6c:	89ab      	ldrh	r3, [r5, #12]
 8020e6e:	065b      	lsls	r3, r3, #25
 8020e70:	f53f af12 	bmi.w	8020c98 <_vfiprintf_r+0x4c>
 8020e74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020e76:	e711      	b.n	8020c9c <_vfiprintf_r+0x50>
 8020e78:	ab03      	add	r3, sp, #12
 8020e7a:	9300      	str	r3, [sp, #0]
 8020e7c:	462a      	mov	r2, r5
 8020e7e:	4b09      	ldr	r3, [pc, #36]	; (8020ea4 <_vfiprintf_r+0x258>)
 8020e80:	a904      	add	r1, sp, #16
 8020e82:	4630      	mov	r0, r6
 8020e84:	f000 f880 	bl	8020f88 <_printf_i>
 8020e88:	e7e4      	b.n	8020e54 <_vfiprintf_r+0x208>
 8020e8a:	bf00      	nop
 8020e8c:	08026de4 	.word	0x08026de4
 8020e90:	08026e04 	.word	0x08026e04
 8020e94:	08026dc4 	.word	0x08026dc4
 8020e98:	08026e24 	.word	0x08026e24
 8020e9c:	08026e2e 	.word	0x08026e2e
 8020ea0:	00000000 	.word	0x00000000
 8020ea4:	08020c27 	.word	0x08020c27
 8020ea8:	08026e2a 	.word	0x08026e2a

08020eac <_printf_common>:
 8020eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020eb0:	4616      	mov	r6, r2
 8020eb2:	4699      	mov	r9, r3
 8020eb4:	688a      	ldr	r2, [r1, #8]
 8020eb6:	690b      	ldr	r3, [r1, #16]
 8020eb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8020ebc:	4293      	cmp	r3, r2
 8020ebe:	bfb8      	it	lt
 8020ec0:	4613      	movlt	r3, r2
 8020ec2:	6033      	str	r3, [r6, #0]
 8020ec4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8020ec8:	4607      	mov	r7, r0
 8020eca:	460c      	mov	r4, r1
 8020ecc:	b10a      	cbz	r2, 8020ed2 <_printf_common+0x26>
 8020ece:	3301      	adds	r3, #1
 8020ed0:	6033      	str	r3, [r6, #0]
 8020ed2:	6823      	ldr	r3, [r4, #0]
 8020ed4:	0699      	lsls	r1, r3, #26
 8020ed6:	bf42      	ittt	mi
 8020ed8:	6833      	ldrmi	r3, [r6, #0]
 8020eda:	3302      	addmi	r3, #2
 8020edc:	6033      	strmi	r3, [r6, #0]
 8020ede:	6825      	ldr	r5, [r4, #0]
 8020ee0:	f015 0506 	ands.w	r5, r5, #6
 8020ee4:	d106      	bne.n	8020ef4 <_printf_common+0x48>
 8020ee6:	f104 0a19 	add.w	sl, r4, #25
 8020eea:	68e3      	ldr	r3, [r4, #12]
 8020eec:	6832      	ldr	r2, [r6, #0]
 8020eee:	1a9b      	subs	r3, r3, r2
 8020ef0:	42ab      	cmp	r3, r5
 8020ef2:	dc26      	bgt.n	8020f42 <_printf_common+0x96>
 8020ef4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8020ef8:	1e13      	subs	r3, r2, #0
 8020efa:	6822      	ldr	r2, [r4, #0]
 8020efc:	bf18      	it	ne
 8020efe:	2301      	movne	r3, #1
 8020f00:	0692      	lsls	r2, r2, #26
 8020f02:	d42b      	bmi.n	8020f5c <_printf_common+0xb0>
 8020f04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020f08:	4649      	mov	r1, r9
 8020f0a:	4638      	mov	r0, r7
 8020f0c:	47c0      	blx	r8
 8020f0e:	3001      	adds	r0, #1
 8020f10:	d01e      	beq.n	8020f50 <_printf_common+0xa4>
 8020f12:	6823      	ldr	r3, [r4, #0]
 8020f14:	68e5      	ldr	r5, [r4, #12]
 8020f16:	6832      	ldr	r2, [r6, #0]
 8020f18:	f003 0306 	and.w	r3, r3, #6
 8020f1c:	2b04      	cmp	r3, #4
 8020f1e:	bf08      	it	eq
 8020f20:	1aad      	subeq	r5, r5, r2
 8020f22:	68a3      	ldr	r3, [r4, #8]
 8020f24:	6922      	ldr	r2, [r4, #16]
 8020f26:	bf0c      	ite	eq
 8020f28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020f2c:	2500      	movne	r5, #0
 8020f2e:	4293      	cmp	r3, r2
 8020f30:	bfc4      	itt	gt
 8020f32:	1a9b      	subgt	r3, r3, r2
 8020f34:	18ed      	addgt	r5, r5, r3
 8020f36:	2600      	movs	r6, #0
 8020f38:	341a      	adds	r4, #26
 8020f3a:	42b5      	cmp	r5, r6
 8020f3c:	d11a      	bne.n	8020f74 <_printf_common+0xc8>
 8020f3e:	2000      	movs	r0, #0
 8020f40:	e008      	b.n	8020f54 <_printf_common+0xa8>
 8020f42:	2301      	movs	r3, #1
 8020f44:	4652      	mov	r2, sl
 8020f46:	4649      	mov	r1, r9
 8020f48:	4638      	mov	r0, r7
 8020f4a:	47c0      	blx	r8
 8020f4c:	3001      	adds	r0, #1
 8020f4e:	d103      	bne.n	8020f58 <_printf_common+0xac>
 8020f50:	f04f 30ff 	mov.w	r0, #4294967295
 8020f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020f58:	3501      	adds	r5, #1
 8020f5a:	e7c6      	b.n	8020eea <_printf_common+0x3e>
 8020f5c:	18e1      	adds	r1, r4, r3
 8020f5e:	1c5a      	adds	r2, r3, #1
 8020f60:	2030      	movs	r0, #48	; 0x30
 8020f62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8020f66:	4422      	add	r2, r4
 8020f68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8020f6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8020f70:	3302      	adds	r3, #2
 8020f72:	e7c7      	b.n	8020f04 <_printf_common+0x58>
 8020f74:	2301      	movs	r3, #1
 8020f76:	4622      	mov	r2, r4
 8020f78:	4649      	mov	r1, r9
 8020f7a:	4638      	mov	r0, r7
 8020f7c:	47c0      	blx	r8
 8020f7e:	3001      	adds	r0, #1
 8020f80:	d0e6      	beq.n	8020f50 <_printf_common+0xa4>
 8020f82:	3601      	adds	r6, #1
 8020f84:	e7d9      	b.n	8020f3a <_printf_common+0x8e>
	...

08020f88 <_printf_i>:
 8020f88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020f8c:	460c      	mov	r4, r1
 8020f8e:	4691      	mov	r9, r2
 8020f90:	7e27      	ldrb	r7, [r4, #24]
 8020f92:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020f94:	2f78      	cmp	r7, #120	; 0x78
 8020f96:	4680      	mov	r8, r0
 8020f98:	469a      	mov	sl, r3
 8020f9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020f9e:	d807      	bhi.n	8020fb0 <_printf_i+0x28>
 8020fa0:	2f62      	cmp	r7, #98	; 0x62
 8020fa2:	d80a      	bhi.n	8020fba <_printf_i+0x32>
 8020fa4:	2f00      	cmp	r7, #0
 8020fa6:	f000 80d8 	beq.w	802115a <_printf_i+0x1d2>
 8020faa:	2f58      	cmp	r7, #88	; 0x58
 8020fac:	f000 80a3 	beq.w	80210f6 <_printf_i+0x16e>
 8020fb0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8020fb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8020fb8:	e03a      	b.n	8021030 <_printf_i+0xa8>
 8020fba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8020fbe:	2b15      	cmp	r3, #21
 8020fc0:	d8f6      	bhi.n	8020fb0 <_printf_i+0x28>
 8020fc2:	a001      	add	r0, pc, #4	; (adr r0, 8020fc8 <_printf_i+0x40>)
 8020fc4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8020fc8:	08021021 	.word	0x08021021
 8020fcc:	08021035 	.word	0x08021035
 8020fd0:	08020fb1 	.word	0x08020fb1
 8020fd4:	08020fb1 	.word	0x08020fb1
 8020fd8:	08020fb1 	.word	0x08020fb1
 8020fdc:	08020fb1 	.word	0x08020fb1
 8020fe0:	08021035 	.word	0x08021035
 8020fe4:	08020fb1 	.word	0x08020fb1
 8020fe8:	08020fb1 	.word	0x08020fb1
 8020fec:	08020fb1 	.word	0x08020fb1
 8020ff0:	08020fb1 	.word	0x08020fb1
 8020ff4:	08021141 	.word	0x08021141
 8020ff8:	08021065 	.word	0x08021065
 8020ffc:	08021123 	.word	0x08021123
 8021000:	08020fb1 	.word	0x08020fb1
 8021004:	08020fb1 	.word	0x08020fb1
 8021008:	08021163 	.word	0x08021163
 802100c:	08020fb1 	.word	0x08020fb1
 8021010:	08021065 	.word	0x08021065
 8021014:	08020fb1 	.word	0x08020fb1
 8021018:	08020fb1 	.word	0x08020fb1
 802101c:	0802112b 	.word	0x0802112b
 8021020:	680b      	ldr	r3, [r1, #0]
 8021022:	1d1a      	adds	r2, r3, #4
 8021024:	681b      	ldr	r3, [r3, #0]
 8021026:	600a      	str	r2, [r1, #0]
 8021028:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802102c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8021030:	2301      	movs	r3, #1
 8021032:	e0a3      	b.n	802117c <_printf_i+0x1f4>
 8021034:	6825      	ldr	r5, [r4, #0]
 8021036:	6808      	ldr	r0, [r1, #0]
 8021038:	062e      	lsls	r6, r5, #24
 802103a:	f100 0304 	add.w	r3, r0, #4
 802103e:	d50a      	bpl.n	8021056 <_printf_i+0xce>
 8021040:	6805      	ldr	r5, [r0, #0]
 8021042:	600b      	str	r3, [r1, #0]
 8021044:	2d00      	cmp	r5, #0
 8021046:	da03      	bge.n	8021050 <_printf_i+0xc8>
 8021048:	232d      	movs	r3, #45	; 0x2d
 802104a:	426d      	negs	r5, r5
 802104c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021050:	485e      	ldr	r0, [pc, #376]	; (80211cc <_printf_i+0x244>)
 8021052:	230a      	movs	r3, #10
 8021054:	e019      	b.n	802108a <_printf_i+0x102>
 8021056:	f015 0f40 	tst.w	r5, #64	; 0x40
 802105a:	6805      	ldr	r5, [r0, #0]
 802105c:	600b      	str	r3, [r1, #0]
 802105e:	bf18      	it	ne
 8021060:	b22d      	sxthne	r5, r5
 8021062:	e7ef      	b.n	8021044 <_printf_i+0xbc>
 8021064:	680b      	ldr	r3, [r1, #0]
 8021066:	6825      	ldr	r5, [r4, #0]
 8021068:	1d18      	adds	r0, r3, #4
 802106a:	6008      	str	r0, [r1, #0]
 802106c:	0628      	lsls	r0, r5, #24
 802106e:	d501      	bpl.n	8021074 <_printf_i+0xec>
 8021070:	681d      	ldr	r5, [r3, #0]
 8021072:	e002      	b.n	802107a <_printf_i+0xf2>
 8021074:	0669      	lsls	r1, r5, #25
 8021076:	d5fb      	bpl.n	8021070 <_printf_i+0xe8>
 8021078:	881d      	ldrh	r5, [r3, #0]
 802107a:	4854      	ldr	r0, [pc, #336]	; (80211cc <_printf_i+0x244>)
 802107c:	2f6f      	cmp	r7, #111	; 0x6f
 802107e:	bf0c      	ite	eq
 8021080:	2308      	moveq	r3, #8
 8021082:	230a      	movne	r3, #10
 8021084:	2100      	movs	r1, #0
 8021086:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802108a:	6866      	ldr	r6, [r4, #4]
 802108c:	60a6      	str	r6, [r4, #8]
 802108e:	2e00      	cmp	r6, #0
 8021090:	bfa2      	ittt	ge
 8021092:	6821      	ldrge	r1, [r4, #0]
 8021094:	f021 0104 	bicge.w	r1, r1, #4
 8021098:	6021      	strge	r1, [r4, #0]
 802109a:	b90d      	cbnz	r5, 80210a0 <_printf_i+0x118>
 802109c:	2e00      	cmp	r6, #0
 802109e:	d04d      	beq.n	802113c <_printf_i+0x1b4>
 80210a0:	4616      	mov	r6, r2
 80210a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80210a6:	fb03 5711 	mls	r7, r3, r1, r5
 80210aa:	5dc7      	ldrb	r7, [r0, r7]
 80210ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80210b0:	462f      	mov	r7, r5
 80210b2:	42bb      	cmp	r3, r7
 80210b4:	460d      	mov	r5, r1
 80210b6:	d9f4      	bls.n	80210a2 <_printf_i+0x11a>
 80210b8:	2b08      	cmp	r3, #8
 80210ba:	d10b      	bne.n	80210d4 <_printf_i+0x14c>
 80210bc:	6823      	ldr	r3, [r4, #0]
 80210be:	07df      	lsls	r7, r3, #31
 80210c0:	d508      	bpl.n	80210d4 <_printf_i+0x14c>
 80210c2:	6923      	ldr	r3, [r4, #16]
 80210c4:	6861      	ldr	r1, [r4, #4]
 80210c6:	4299      	cmp	r1, r3
 80210c8:	bfde      	ittt	le
 80210ca:	2330      	movle	r3, #48	; 0x30
 80210cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80210d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80210d4:	1b92      	subs	r2, r2, r6
 80210d6:	6122      	str	r2, [r4, #16]
 80210d8:	f8cd a000 	str.w	sl, [sp]
 80210dc:	464b      	mov	r3, r9
 80210de:	aa03      	add	r2, sp, #12
 80210e0:	4621      	mov	r1, r4
 80210e2:	4640      	mov	r0, r8
 80210e4:	f7ff fee2 	bl	8020eac <_printf_common>
 80210e8:	3001      	adds	r0, #1
 80210ea:	d14c      	bne.n	8021186 <_printf_i+0x1fe>
 80210ec:	f04f 30ff 	mov.w	r0, #4294967295
 80210f0:	b004      	add	sp, #16
 80210f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80210f6:	4835      	ldr	r0, [pc, #212]	; (80211cc <_printf_i+0x244>)
 80210f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80210fc:	6823      	ldr	r3, [r4, #0]
 80210fe:	680e      	ldr	r6, [r1, #0]
 8021100:	061f      	lsls	r7, r3, #24
 8021102:	f856 5b04 	ldr.w	r5, [r6], #4
 8021106:	600e      	str	r6, [r1, #0]
 8021108:	d514      	bpl.n	8021134 <_printf_i+0x1ac>
 802110a:	07d9      	lsls	r1, r3, #31
 802110c:	bf44      	itt	mi
 802110e:	f043 0320 	orrmi.w	r3, r3, #32
 8021112:	6023      	strmi	r3, [r4, #0]
 8021114:	b91d      	cbnz	r5, 802111e <_printf_i+0x196>
 8021116:	6823      	ldr	r3, [r4, #0]
 8021118:	f023 0320 	bic.w	r3, r3, #32
 802111c:	6023      	str	r3, [r4, #0]
 802111e:	2310      	movs	r3, #16
 8021120:	e7b0      	b.n	8021084 <_printf_i+0xfc>
 8021122:	6823      	ldr	r3, [r4, #0]
 8021124:	f043 0320 	orr.w	r3, r3, #32
 8021128:	6023      	str	r3, [r4, #0]
 802112a:	2378      	movs	r3, #120	; 0x78
 802112c:	4828      	ldr	r0, [pc, #160]	; (80211d0 <_printf_i+0x248>)
 802112e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8021132:	e7e3      	b.n	80210fc <_printf_i+0x174>
 8021134:	065e      	lsls	r6, r3, #25
 8021136:	bf48      	it	mi
 8021138:	b2ad      	uxthmi	r5, r5
 802113a:	e7e6      	b.n	802110a <_printf_i+0x182>
 802113c:	4616      	mov	r6, r2
 802113e:	e7bb      	b.n	80210b8 <_printf_i+0x130>
 8021140:	680b      	ldr	r3, [r1, #0]
 8021142:	6826      	ldr	r6, [r4, #0]
 8021144:	6960      	ldr	r0, [r4, #20]
 8021146:	1d1d      	adds	r5, r3, #4
 8021148:	600d      	str	r5, [r1, #0]
 802114a:	0635      	lsls	r5, r6, #24
 802114c:	681b      	ldr	r3, [r3, #0]
 802114e:	d501      	bpl.n	8021154 <_printf_i+0x1cc>
 8021150:	6018      	str	r0, [r3, #0]
 8021152:	e002      	b.n	802115a <_printf_i+0x1d2>
 8021154:	0671      	lsls	r1, r6, #25
 8021156:	d5fb      	bpl.n	8021150 <_printf_i+0x1c8>
 8021158:	8018      	strh	r0, [r3, #0]
 802115a:	2300      	movs	r3, #0
 802115c:	6123      	str	r3, [r4, #16]
 802115e:	4616      	mov	r6, r2
 8021160:	e7ba      	b.n	80210d8 <_printf_i+0x150>
 8021162:	680b      	ldr	r3, [r1, #0]
 8021164:	1d1a      	adds	r2, r3, #4
 8021166:	600a      	str	r2, [r1, #0]
 8021168:	681e      	ldr	r6, [r3, #0]
 802116a:	6862      	ldr	r2, [r4, #4]
 802116c:	2100      	movs	r1, #0
 802116e:	4630      	mov	r0, r6
 8021170:	f7df f8be 	bl	80002f0 <memchr>
 8021174:	b108      	cbz	r0, 802117a <_printf_i+0x1f2>
 8021176:	1b80      	subs	r0, r0, r6
 8021178:	6060      	str	r0, [r4, #4]
 802117a:	6863      	ldr	r3, [r4, #4]
 802117c:	6123      	str	r3, [r4, #16]
 802117e:	2300      	movs	r3, #0
 8021180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021184:	e7a8      	b.n	80210d8 <_printf_i+0x150>
 8021186:	6923      	ldr	r3, [r4, #16]
 8021188:	4632      	mov	r2, r6
 802118a:	4649      	mov	r1, r9
 802118c:	4640      	mov	r0, r8
 802118e:	47d0      	blx	sl
 8021190:	3001      	adds	r0, #1
 8021192:	d0ab      	beq.n	80210ec <_printf_i+0x164>
 8021194:	6823      	ldr	r3, [r4, #0]
 8021196:	079b      	lsls	r3, r3, #30
 8021198:	d413      	bmi.n	80211c2 <_printf_i+0x23a>
 802119a:	68e0      	ldr	r0, [r4, #12]
 802119c:	9b03      	ldr	r3, [sp, #12]
 802119e:	4298      	cmp	r0, r3
 80211a0:	bfb8      	it	lt
 80211a2:	4618      	movlt	r0, r3
 80211a4:	e7a4      	b.n	80210f0 <_printf_i+0x168>
 80211a6:	2301      	movs	r3, #1
 80211a8:	4632      	mov	r2, r6
 80211aa:	4649      	mov	r1, r9
 80211ac:	4640      	mov	r0, r8
 80211ae:	47d0      	blx	sl
 80211b0:	3001      	adds	r0, #1
 80211b2:	d09b      	beq.n	80210ec <_printf_i+0x164>
 80211b4:	3501      	adds	r5, #1
 80211b6:	68e3      	ldr	r3, [r4, #12]
 80211b8:	9903      	ldr	r1, [sp, #12]
 80211ba:	1a5b      	subs	r3, r3, r1
 80211bc:	42ab      	cmp	r3, r5
 80211be:	dcf2      	bgt.n	80211a6 <_printf_i+0x21e>
 80211c0:	e7eb      	b.n	802119a <_printf_i+0x212>
 80211c2:	2500      	movs	r5, #0
 80211c4:	f104 0619 	add.w	r6, r4, #25
 80211c8:	e7f5      	b.n	80211b6 <_printf_i+0x22e>
 80211ca:	bf00      	nop
 80211cc:	08026e35 	.word	0x08026e35
 80211d0:	08026e46 	.word	0x08026e46

080211d4 <_putc_r>:
 80211d4:	b570      	push	{r4, r5, r6, lr}
 80211d6:	460d      	mov	r5, r1
 80211d8:	4614      	mov	r4, r2
 80211da:	4606      	mov	r6, r0
 80211dc:	b118      	cbz	r0, 80211e6 <_putc_r+0x12>
 80211de:	6983      	ldr	r3, [r0, #24]
 80211e0:	b90b      	cbnz	r3, 80211e6 <_putc_r+0x12>
 80211e2:	f7ff fbe7 	bl	80209b4 <__sinit>
 80211e6:	4b1c      	ldr	r3, [pc, #112]	; (8021258 <_putc_r+0x84>)
 80211e8:	429c      	cmp	r4, r3
 80211ea:	d124      	bne.n	8021236 <_putc_r+0x62>
 80211ec:	6874      	ldr	r4, [r6, #4]
 80211ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80211f0:	07d8      	lsls	r0, r3, #31
 80211f2:	d405      	bmi.n	8021200 <_putc_r+0x2c>
 80211f4:	89a3      	ldrh	r3, [r4, #12]
 80211f6:	0599      	lsls	r1, r3, #22
 80211f8:	d402      	bmi.n	8021200 <_putc_r+0x2c>
 80211fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80211fc:	f7ff fc8a 	bl	8020b14 <__retarget_lock_acquire_recursive>
 8021200:	68a3      	ldr	r3, [r4, #8]
 8021202:	3b01      	subs	r3, #1
 8021204:	2b00      	cmp	r3, #0
 8021206:	60a3      	str	r3, [r4, #8]
 8021208:	da05      	bge.n	8021216 <_putc_r+0x42>
 802120a:	69a2      	ldr	r2, [r4, #24]
 802120c:	4293      	cmp	r3, r2
 802120e:	db1c      	blt.n	802124a <_putc_r+0x76>
 8021210:	b2eb      	uxtb	r3, r5
 8021212:	2b0a      	cmp	r3, #10
 8021214:	d019      	beq.n	802124a <_putc_r+0x76>
 8021216:	6823      	ldr	r3, [r4, #0]
 8021218:	1c5a      	adds	r2, r3, #1
 802121a:	6022      	str	r2, [r4, #0]
 802121c:	701d      	strb	r5, [r3, #0]
 802121e:	b2ed      	uxtb	r5, r5
 8021220:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021222:	07da      	lsls	r2, r3, #31
 8021224:	d405      	bmi.n	8021232 <_putc_r+0x5e>
 8021226:	89a3      	ldrh	r3, [r4, #12]
 8021228:	059b      	lsls	r3, r3, #22
 802122a:	d402      	bmi.n	8021232 <_putc_r+0x5e>
 802122c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802122e:	f7ff fc72 	bl	8020b16 <__retarget_lock_release_recursive>
 8021232:	4628      	mov	r0, r5
 8021234:	bd70      	pop	{r4, r5, r6, pc}
 8021236:	4b09      	ldr	r3, [pc, #36]	; (802125c <_putc_r+0x88>)
 8021238:	429c      	cmp	r4, r3
 802123a:	d101      	bne.n	8021240 <_putc_r+0x6c>
 802123c:	68b4      	ldr	r4, [r6, #8]
 802123e:	e7d6      	b.n	80211ee <_putc_r+0x1a>
 8021240:	4b07      	ldr	r3, [pc, #28]	; (8021260 <_putc_r+0x8c>)
 8021242:	429c      	cmp	r4, r3
 8021244:	bf08      	it	eq
 8021246:	68f4      	ldreq	r4, [r6, #12]
 8021248:	e7d1      	b.n	80211ee <_putc_r+0x1a>
 802124a:	4629      	mov	r1, r5
 802124c:	4622      	mov	r2, r4
 802124e:	4630      	mov	r0, r6
 8021250:	f7ff f9b8 	bl	80205c4 <__swbuf_r>
 8021254:	4605      	mov	r5, r0
 8021256:	e7e3      	b.n	8021220 <_putc_r+0x4c>
 8021258:	08026de4 	.word	0x08026de4
 802125c:	08026e04 	.word	0x08026e04
 8021260:	08026dc4 	.word	0x08026dc4

08021264 <__sread>:
 8021264:	b510      	push	{r4, lr}
 8021266:	460c      	mov	r4, r1
 8021268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802126c:	f000 f89c 	bl	80213a8 <_read_r>
 8021270:	2800      	cmp	r0, #0
 8021272:	bfab      	itete	ge
 8021274:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8021276:	89a3      	ldrhlt	r3, [r4, #12]
 8021278:	181b      	addge	r3, r3, r0
 802127a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802127e:	bfac      	ite	ge
 8021280:	6563      	strge	r3, [r4, #84]	; 0x54
 8021282:	81a3      	strhlt	r3, [r4, #12]
 8021284:	bd10      	pop	{r4, pc}

08021286 <__swrite>:
 8021286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802128a:	461f      	mov	r7, r3
 802128c:	898b      	ldrh	r3, [r1, #12]
 802128e:	05db      	lsls	r3, r3, #23
 8021290:	4605      	mov	r5, r0
 8021292:	460c      	mov	r4, r1
 8021294:	4616      	mov	r6, r2
 8021296:	d505      	bpl.n	80212a4 <__swrite+0x1e>
 8021298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802129c:	2302      	movs	r3, #2
 802129e:	2200      	movs	r2, #0
 80212a0:	f000 f870 	bl	8021384 <_lseek_r>
 80212a4:	89a3      	ldrh	r3, [r4, #12]
 80212a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80212aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80212ae:	81a3      	strh	r3, [r4, #12]
 80212b0:	4632      	mov	r2, r6
 80212b2:	463b      	mov	r3, r7
 80212b4:	4628      	mov	r0, r5
 80212b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80212ba:	f000 b817 	b.w	80212ec <_write_r>

080212be <__sseek>:
 80212be:	b510      	push	{r4, lr}
 80212c0:	460c      	mov	r4, r1
 80212c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80212c6:	f000 f85d 	bl	8021384 <_lseek_r>
 80212ca:	1c43      	adds	r3, r0, #1
 80212cc:	89a3      	ldrh	r3, [r4, #12]
 80212ce:	bf15      	itete	ne
 80212d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80212d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80212d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80212da:	81a3      	strheq	r3, [r4, #12]
 80212dc:	bf18      	it	ne
 80212de:	81a3      	strhne	r3, [r4, #12]
 80212e0:	bd10      	pop	{r4, pc}

080212e2 <__sclose>:
 80212e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80212e6:	f000 b81b 	b.w	8021320 <_close_r>
	...

080212ec <_write_r>:
 80212ec:	b538      	push	{r3, r4, r5, lr}
 80212ee:	4d07      	ldr	r5, [pc, #28]	; (802130c <_write_r+0x20>)
 80212f0:	4604      	mov	r4, r0
 80212f2:	4608      	mov	r0, r1
 80212f4:	4611      	mov	r1, r2
 80212f6:	2200      	movs	r2, #0
 80212f8:	602a      	str	r2, [r5, #0]
 80212fa:	461a      	mov	r2, r3
 80212fc:	f7df fe6b 	bl	8000fd6 <_write>
 8021300:	1c43      	adds	r3, r0, #1
 8021302:	d102      	bne.n	802130a <_write_r+0x1e>
 8021304:	682b      	ldr	r3, [r5, #0]
 8021306:	b103      	cbz	r3, 802130a <_write_r+0x1e>
 8021308:	6023      	str	r3, [r4, #0]
 802130a:	bd38      	pop	{r3, r4, r5, pc}
 802130c:	2000a564 	.word	0x2000a564

08021310 <abort>:
 8021310:	b508      	push	{r3, lr}
 8021312:	2006      	movs	r0, #6
 8021314:	f000 f882 	bl	802141c <raise>
 8021318:	2001      	movs	r0, #1
 802131a:	f7df fe35 	bl	8000f88 <_exit>
	...

08021320 <_close_r>:
 8021320:	b538      	push	{r3, r4, r5, lr}
 8021322:	4d06      	ldr	r5, [pc, #24]	; (802133c <_close_r+0x1c>)
 8021324:	2300      	movs	r3, #0
 8021326:	4604      	mov	r4, r0
 8021328:	4608      	mov	r0, r1
 802132a:	602b      	str	r3, [r5, #0]
 802132c:	f7df fe6f 	bl	800100e <_close>
 8021330:	1c43      	adds	r3, r0, #1
 8021332:	d102      	bne.n	802133a <_close_r+0x1a>
 8021334:	682b      	ldr	r3, [r5, #0]
 8021336:	b103      	cbz	r3, 802133a <_close_r+0x1a>
 8021338:	6023      	str	r3, [r4, #0]
 802133a:	bd38      	pop	{r3, r4, r5, pc}
 802133c:	2000a564 	.word	0x2000a564

08021340 <_fstat_r>:
 8021340:	b538      	push	{r3, r4, r5, lr}
 8021342:	4d07      	ldr	r5, [pc, #28]	; (8021360 <_fstat_r+0x20>)
 8021344:	2300      	movs	r3, #0
 8021346:	4604      	mov	r4, r0
 8021348:	4608      	mov	r0, r1
 802134a:	4611      	mov	r1, r2
 802134c:	602b      	str	r3, [r5, #0]
 802134e:	f7df fe6a 	bl	8001026 <_fstat>
 8021352:	1c43      	adds	r3, r0, #1
 8021354:	d102      	bne.n	802135c <_fstat_r+0x1c>
 8021356:	682b      	ldr	r3, [r5, #0]
 8021358:	b103      	cbz	r3, 802135c <_fstat_r+0x1c>
 802135a:	6023      	str	r3, [r4, #0]
 802135c:	bd38      	pop	{r3, r4, r5, pc}
 802135e:	bf00      	nop
 8021360:	2000a564 	.word	0x2000a564

08021364 <_isatty_r>:
 8021364:	b538      	push	{r3, r4, r5, lr}
 8021366:	4d06      	ldr	r5, [pc, #24]	; (8021380 <_isatty_r+0x1c>)
 8021368:	2300      	movs	r3, #0
 802136a:	4604      	mov	r4, r0
 802136c:	4608      	mov	r0, r1
 802136e:	602b      	str	r3, [r5, #0]
 8021370:	f7df fe69 	bl	8001046 <_isatty>
 8021374:	1c43      	adds	r3, r0, #1
 8021376:	d102      	bne.n	802137e <_isatty_r+0x1a>
 8021378:	682b      	ldr	r3, [r5, #0]
 802137a:	b103      	cbz	r3, 802137e <_isatty_r+0x1a>
 802137c:	6023      	str	r3, [r4, #0]
 802137e:	bd38      	pop	{r3, r4, r5, pc}
 8021380:	2000a564 	.word	0x2000a564

08021384 <_lseek_r>:
 8021384:	b538      	push	{r3, r4, r5, lr}
 8021386:	4d07      	ldr	r5, [pc, #28]	; (80213a4 <_lseek_r+0x20>)
 8021388:	4604      	mov	r4, r0
 802138a:	4608      	mov	r0, r1
 802138c:	4611      	mov	r1, r2
 802138e:	2200      	movs	r2, #0
 8021390:	602a      	str	r2, [r5, #0]
 8021392:	461a      	mov	r2, r3
 8021394:	f7df fe62 	bl	800105c <_lseek>
 8021398:	1c43      	adds	r3, r0, #1
 802139a:	d102      	bne.n	80213a2 <_lseek_r+0x1e>
 802139c:	682b      	ldr	r3, [r5, #0]
 802139e:	b103      	cbz	r3, 80213a2 <_lseek_r+0x1e>
 80213a0:	6023      	str	r3, [r4, #0]
 80213a2:	bd38      	pop	{r3, r4, r5, pc}
 80213a4:	2000a564 	.word	0x2000a564

080213a8 <_read_r>:
 80213a8:	b538      	push	{r3, r4, r5, lr}
 80213aa:	4d07      	ldr	r5, [pc, #28]	; (80213c8 <_read_r+0x20>)
 80213ac:	4604      	mov	r4, r0
 80213ae:	4608      	mov	r0, r1
 80213b0:	4611      	mov	r1, r2
 80213b2:	2200      	movs	r2, #0
 80213b4:	602a      	str	r2, [r5, #0]
 80213b6:	461a      	mov	r2, r3
 80213b8:	f7df fdf0 	bl	8000f9c <_read>
 80213bc:	1c43      	adds	r3, r0, #1
 80213be:	d102      	bne.n	80213c6 <_read_r+0x1e>
 80213c0:	682b      	ldr	r3, [r5, #0]
 80213c2:	b103      	cbz	r3, 80213c6 <_read_r+0x1e>
 80213c4:	6023      	str	r3, [r4, #0]
 80213c6:	bd38      	pop	{r3, r4, r5, pc}
 80213c8:	2000a564 	.word	0x2000a564

080213cc <_raise_r>:
 80213cc:	291f      	cmp	r1, #31
 80213ce:	b538      	push	{r3, r4, r5, lr}
 80213d0:	4604      	mov	r4, r0
 80213d2:	460d      	mov	r5, r1
 80213d4:	d904      	bls.n	80213e0 <_raise_r+0x14>
 80213d6:	2316      	movs	r3, #22
 80213d8:	6003      	str	r3, [r0, #0]
 80213da:	f04f 30ff 	mov.w	r0, #4294967295
 80213de:	bd38      	pop	{r3, r4, r5, pc}
 80213e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80213e2:	b112      	cbz	r2, 80213ea <_raise_r+0x1e>
 80213e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80213e8:	b94b      	cbnz	r3, 80213fe <_raise_r+0x32>
 80213ea:	4620      	mov	r0, r4
 80213ec:	f000 f830 	bl	8021450 <_getpid_r>
 80213f0:	462a      	mov	r2, r5
 80213f2:	4601      	mov	r1, r0
 80213f4:	4620      	mov	r0, r4
 80213f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80213fa:	f000 b817 	b.w	802142c <_kill_r>
 80213fe:	2b01      	cmp	r3, #1
 8021400:	d00a      	beq.n	8021418 <_raise_r+0x4c>
 8021402:	1c59      	adds	r1, r3, #1
 8021404:	d103      	bne.n	802140e <_raise_r+0x42>
 8021406:	2316      	movs	r3, #22
 8021408:	6003      	str	r3, [r0, #0]
 802140a:	2001      	movs	r0, #1
 802140c:	e7e7      	b.n	80213de <_raise_r+0x12>
 802140e:	2400      	movs	r4, #0
 8021410:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8021414:	4628      	mov	r0, r5
 8021416:	4798      	blx	r3
 8021418:	2000      	movs	r0, #0
 802141a:	e7e0      	b.n	80213de <_raise_r+0x12>

0802141c <raise>:
 802141c:	4b02      	ldr	r3, [pc, #8]	; (8021428 <raise+0xc>)
 802141e:	4601      	mov	r1, r0
 8021420:	6818      	ldr	r0, [r3, #0]
 8021422:	f7ff bfd3 	b.w	80213cc <_raise_r>
 8021426:	bf00      	nop
 8021428:	20000038 	.word	0x20000038

0802142c <_kill_r>:
 802142c:	b538      	push	{r3, r4, r5, lr}
 802142e:	4d07      	ldr	r5, [pc, #28]	; (802144c <_kill_r+0x20>)
 8021430:	2300      	movs	r3, #0
 8021432:	4604      	mov	r4, r0
 8021434:	4608      	mov	r0, r1
 8021436:	4611      	mov	r1, r2
 8021438:	602b      	str	r3, [r5, #0]
 802143a:	f7df fd93 	bl	8000f64 <_kill>
 802143e:	1c43      	adds	r3, r0, #1
 8021440:	d102      	bne.n	8021448 <_kill_r+0x1c>
 8021442:	682b      	ldr	r3, [r5, #0]
 8021444:	b103      	cbz	r3, 8021448 <_kill_r+0x1c>
 8021446:	6023      	str	r3, [r4, #0]
 8021448:	bd38      	pop	{r3, r4, r5, pc}
 802144a:	bf00      	nop
 802144c:	2000a564 	.word	0x2000a564

08021450 <_getpid_r>:
 8021450:	f7df bd80 	b.w	8000f54 <_getpid>

08021454 <_init>:
 8021454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021456:	bf00      	nop
 8021458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802145a:	bc08      	pop	{r3}
 802145c:	469e      	mov	lr, r3
 802145e:	4770      	bx	lr

08021460 <_fini>:
 8021460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021462:	bf00      	nop
 8021464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021466:	bc08      	pop	{r3}
 8021468:	469e      	mov	lr, r3
 802146a:	4770      	bx	lr
